{"prompt": "'''\nMr. Chanek opened a letter from his fellow, who is currently studying at Singanesia. Here is what it says.\n\nDefine an array b (0 \u2264 b_i < k) with n integers. While there exists a pair (i, j) such that b_i \u2260 b_j, do the following operation:\n\n  * Randomly pick a number i satisfying 0 \u2264 i < n. Note that each number i has a probability of 1/n to be picked. \n  * Randomly Pick a number j satisfying 0 \u2264 j < k. \n  * Change the value of b_i to j. It is possible for b_i to be changed to the same value. \n\n\n\nDenote f(b) as the expected number of operations done to b until all elements of b are equal. \n\nYou are given two integers n and k, and an array a (-1 \u2264 a_i < k) of n integers. \n\nFor every index i with a_i = -1, replace a_i with a random number j satisfying 0 \u2264 j < k. Let c be the number of occurrences of -1 in a. There are k^c possibilites of a after the replacement, each with equal probability of being the final array.\n\nFind the expected value of f(a) modulo 10^9 + 7. \n\nFormally, let M = 10^9 + 7. It can be shown that the answer can be expressed as an irreducible fraction p/q, where p and q are integers and q not \u2261 0 \\pmod{M}. Output the integer equal to p \u22c5 q^{-1} mod M. In other words, output such an integer x that 0 \u2264 x < M and x \u22c5 q \u2261 p \\pmod{M}.\n\nAfter reading the letter, Mr. Chanek gave the task to you. Solve it for the sake of their friendship!\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 10^5, 2 \u2264 k \u2264 10^9). \n\nThe second line contains n integers a_1, a_2, \u2026, a_n (-1 \u2264 a_i < k).\n\nOutput\n\nOutput an integer denoting the expected value of f(a) modulo 10^9 + 7.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\") == \"\"", "str(solution('...')) == '...'", "solution('''\n2 3\n0 -1\n''') == '2'\n\n# simulate stdin\nimport sys\nif __name__ == '__main__':\n    problem_name = __file__.replace('.py', '')\n    assert len(sys.argv) >= 2, f'usage: python3 {problem_name}.py testfile'\n    with open(sys.argv[1]) as testfile:\n        print(solution(testfile.read()))", "solution(\"\"\"3 10\n-1 -1 -1\"\"\") == '1'\nassert solution(\"\"\"2 5\n-1 -1\"\"\") == '5'\nassert solution(\"\"\"1 1\n0\"\"\") == '0'\nassert solution(\"\"\"1 2\n-1\"\"\") == '1'\nassert solution(\"\"\"2 2\n-1 -1\"\"\") == '2'\nassert solution(\"\"\"2 3\n-1 0\"\"\") == '3'\nassert solution(\"\"\"2 3\n-1 1\"\"\") == '2'\nassert solution(\"\"\"2 4\n-1 0\"\"\") == '7'\nassert solution(\"\"\"2 4\n-1 2\"\"\") == '4'\nassert solution(\"\"\"2 4\n-1 3\"\"\") == '3'\nassert solution(\"\"\"2 5\n-1 0\"\"\") == '14'\nassert solution(\"\"\"2 5\n-1 2\"\"\") == '8'\nassert solution(\"\"\"2 5\n-1 3\"\"\") == '6'\nassert solution(\"\"\"2 5\n-1 4\"\"\") == '5'\nassert solution(\"\"\"2 6\n-1 0\"\"\") == '22'\nassert solution(\"\"\"2 6\n-1 2\"\"\") == '13'\nassert solution(\"\"\"2 6\n-1 3\"\"\") == '10'\nassert solution(\"\"\"2 6\n-1 4", "solution(input) == output", "solution('''\n2 2\n0 1\n''') == '1'\n\nassert solution('''\n2 2\n-1 -1\n''') == '1'\n\nassert solution('''\n2 5\n0 4\n''') == '1'\n\nassert solution('''\n3 2\n0 1 -1\n''') == '2'\n\nassert solution('''\n3 2\n-1 -1 -1\n''') == '2'\n\nassert solution('''\n3 2\n0 0 -1\n''') == '1'\n\nassert solution('''\n3 5\n0 4 -1\n''') == '1'\n\nassert solution('''\n3 5\n0 4 4\n''') == '1'\n\nassert solution('''\n3 5\n0 4 2\n''') == '2'\n\nassert solution('''\n4 3\n1 2 -1 0\n''') == '4'\n\nassert solution('''\n4 3\n1 2 0 0\n''') == '3'\n\nassert solution('''\n4 3\n1 2 2 0\n''') == '2'\n\nassert solution('''\n4 3\n1 2 2 2\n''') == '1'\n\nassert solution('''\n4 5\n1 4 2 0\n''') == '", "solution(\n'''2 3\n1 -1''') == '1'\n\nassert solution(\n'''3 3\n0 1 -1''') == '7'\n\nassert solution(\n'''4 2\n0 1 -1 0''') == '8'\n\nassert solution(\n'''10 7\n0 1 2 3 4 5 6 -1 -1 -1''') == '445176747'", "solution(\"3 4\\n-1 -1 -1\") == \"48\"\nassert solution(\"4 2\\n0 0 0 0\") == \"1\"\nassert solution(\"5 2\\n0 0 0 0 0\") == \"1\"\nassert solution(\"6 2\\n0 0 0 0 0 0\") == \"1\"\nassert solution(\"5 3\\n0 0 0 0 0\") == \"13\"\nassert solution(\"5 2\\n0 0 -1 0 0\") == \"4\"\nassert solution(\"6 4\\n-1 0 -1 0 -1 0\") == \"816\"\nassert solution(\"10 3\\n0 1 0 0 1 1 0 2 0 0\") == \"35\"\nassert solution(\"10 9\\n0 0 0 0 0 0 0 0 0 0\") == \"1\"\nassert solution(\"10 9\\n0 0 0 0 0 0 0 0 0 1\") == \"1\"\nassert solution(\"10 9\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\") == \"6561\"\nassert solution(\"10 9\\n0 1 2 3 4 5 6 7 8 9\") == \"11\"\nassert solution(\"10 9\\n0 0 0 0 0 0 0 0 0 8\") == \"1\"\nassert solution(\"10 9\\n0 0 0 0 0 0 0 0 7 8\") ==", "solution(r'''\n2 2\n-1 0\n''') == r'''\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3 2\n-1 0 -1\n''') == r'''\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3 3\n-1 -1 -1\n''') == r'''\n4\n'''\n\n# check the correctness of solution\nassert solution(r'''\n4 3\n-1 -1 -1 -1\n''') == r'''\n8\n'''\n\n# check the correctness of solution\nassert solution(r'''\n10 9\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == r'''\n7340033\n'''\n\n# check the correctness of solution\nassert solution(r'''\n100 10\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -", "solution('''\n5 2\n-1 -1 0 -1 -1\n''') == '''\n??\n'''", "solution('''\n3 2\n-1 -1 -1\n''') == '0'\n\nassert solution('''\n3 2\n0 0 1\n''') == '1'\n\nassert solution('''\n5 3\n-1 0 -1 0 -1\n''') == '2'\n\nassert solution('''\n10 5\n4 0 1 4 4 2 0 0 1 0\n''') == '8'\n\nassert solution('''\n3 3\n-1 -1 -1\n''') == '0'\n\n# check the performance of solution\n\nfrom random import randint, choice\n\ndef stdin_gen():\n    n = randint(2, 10**5)\n    k = randint(2, 10**9)\n    a = []\n    for _ in range(n):\n        a.append(randint(-1, k-1))\n    return f'{n} {k}\\n{ \" \".join(map(str, a)) }'\n\nif __name__ == '__main__':\n    import os, time\n    import cProfile, pstats\n    pr = cProfile.Profile()\n    pr.enable()\n    print(solution(stdin_gen()))\n    pr.disable()\n    pstats.Stats(pr).sort_stats('tott", "solution('''4 2\n-1 -1 1 -1''') == '2'\nassert solution('''2 3\n-1 1''') == '1'\nassert solution('''100000 2\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "solution('''2 3\n-1 -1''') == '2'\nassert solution('''3 2\n0 -1 1''') == '1'\nassert solution('''3 5\n-1 -1 0''') == '4'\nassert solution('''2 3\n-1 1''') == '1'\nassert solution('''4 9\n5 -1 -1 -1''') == '17'\nassert solution('''5 4\n-1 -1 1 -1 1''') == '10'\nassert solution('''5 4\n-1 1 -1 -1 1''') == '8'\nassert solution('''5 4\n1 -1 -1 -1 1''') == '5'\nassert solution('''5 4\n1 -1 -1 1 1''') == '3'\nassert solution('''5 4\n1 1 -1 1 1''') == '1'\nassert solution('''5 4\n1 1 1 1 1''') == '0'\nassert solution('''3 8\n-1 0 7''') == '4'\nassert solution('''3 8\n0 -1 7''') == '4'\nassert solution('''3 8\n0 7 -1''') == '4'\nassert solution('''3 8\n7 0 -1''')", "solution('''\n3 2\n-1 -1 0\n''') == '2'\n\nassert solution('''\n3 2\n-1 0 -1\n''') == '3'\n\nassert solution('''\n3 3\n0 0 0\n''') == '1'\n\nassert solution('''\n5 2\n-1 -1 0 -1 0\n''') == '5'\n\nassert solution('''\n10 5\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '81'\n\nassert solution('''\n10 10\n0 1 2 3 4 5 6 7 8 9\n''') == '1'\n\nassert solution('''\n10 4\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '19'\n\nassert solution('''\n100 123\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -", "solution('''\n3 2\n-1 -1 -1\n''') == '3'\n\nassert solution('''\n3 2\n-1 0 -1\n''') == '6'\n\nassert solution('''\n3 2\n0 1 0\n''') == '1'\n\nassert solution('''\n3 4\n-1 -1 -1\n''') == '12'\n\nassert solution('''\n3 5\n-1 -1 -1\n''') == '20'\n\nassert solution('''\n3 5\n-1 -1 0\n''') == '30'\n\nassert solution('''\n3 5\n0 1 0\n''') == '1'\n\nassert solution('''\n3 5\n0 -1 0\n''') == '2'\n\nassert solution('''\n4 5\n0 -1 0 -1\n''') == '20'\n\nassert solution('''\n4 5\n0 -1 1 -1\n''') == '30'\n\nassert solution('''\n4 5\n0 -1 0 -1\n''') == '20'\n\nassert solution('''\n4 5\n0 -1 0 0\n''') == '10'\n\nassert solution('''\n4 5\n0 -1 1 1\n''') == '35'\n\nassert", "solution(sample_input) == \"5\\n\"\nassert solution(sample_2) == \"693967246\\n\"\nassert solution(sample_3) == \"865849448\\n\"\nassert solution(sample_4) == \"865849448\\n\"\nassert solution(sample_5) == \"865849448\\n\"\nassert solution(sample_6) == \"865849448\\n\"\nassert solution(sample_7) == \"865849448\\n\"\nassert solution(sample_8) == \"865849448\\n\"\nassert solution(sample_9) == \"865849448\\n\"\nassert solution(sample_10) == \"865849448\\n\"\nassert solution(sample_11) == \"865849448\\n\"\nassert solution(sample_12) == \"865849448\\n\"\nassert solution(sample_13) == \"865849448\\n\"\nassert solution(sample_14) == \"865849448\\n\"\nassert solution(sample_15) == \"865849448\\n\"\nassert solution(sample_16) == \"865849448\\n\"\nassert solution(sample_17) == \"865849448\\n\"\nassert solution(sample_18) == \"865849448\\n", "solution(\"\"\"\n4 4\n1 -1 2 -1\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1 2\n-1\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6 9\n1 -1 2 -1 1 -1\n\"\"\") == \"5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n1 -1 2 1 -1\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 7\n-1 4 -1 -1 -1\n\"\"\") == \"12\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6 8\n-1 1 -1 -1 2 1\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 3\n-1 2 -1 2 -1 1 1 2 -1 1\n\"\"\") == \"37\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n12 2\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7 2\n-1 -1 1 -1 -1 -1 -1\n\"\"\") == \"3\"\n", "solution('''2 3\n-1 0''') == \"1\"\nassert solution('''5 100\n-1 5 10 -1 10''') == \"9994\"\nassert solution('''1 2\n0''') == \"0\"\nassert solution('''3 100\n-1 0 -1''') == \"998\"\nassert solution('''2 3\n-1 -1''') == \"1\"\nassert solution('''1 10\n0''') == \"0\"\nassert solution('''2 3\n-1 -1''') == \"1\"\nassert solution('''1 100\n0''') == \"0\"\nassert solution('''2 3\n-1 -1''') == \"1\"\nassert solution('''1 100\n0''') == \"0\"\nassert solution('''2 3\n-1 -1''') == \"1\"\nassert solution('''1 100\n0''') == \"0\"\nassert solution('''2 3\n-1 -1''') == \"1\"\nassert solution('''1 100\n0''') == \"0\"\nassert solution('''2 3\n-1 -1''') == \"1\"\nassert solution('''1 100\n0''') == \"0\"\nassert solution('''2 3\n-1 -1''')", "solution(stdin) == stdout\n```", "solution('''\n3 2\n-1 -1 -1\n''') == '6'\n\n# this solution is to be tested by Codewars\nassert solution('''\n5 3\n-1 0 -1 2 -1\n''') == '100'\n\n#this solution is to be tested by Codewars\nassert solution('''\n10 8\n1 -1 4 -1 1 -1 1 -1 1 -1\n''') == '22673081'", "solution(\"\") == \"\", \"failed test0\"\n\n# initialize testcases container\ntestcases = []\n\n# read the testcases from input file\nwith open('testcases.txt', 'r') as tc:\n    for line in tc:\n        testcases.append(line.strip())\n\n# loop through the testcases and simulate the input to solution function\nfor i, test in enumerate(testcases):\n    print(solution(test))", "solution(\"\") == \"\", \"An example\"\n\n# get the input\nn, k = map(int, input().split())\na = [int(x) for x in input().split()]\n\n# calculate the answer\nr = 0", "solution('''\n2 3\n1 -1\n''') == '2'\n\nassert solution('''\n3 2\n0 1 0\n''') == '6'\n\nassert solution('''\n4 5\n-1 2 3 -1\n''') == '6'\n\nassert solution('''\n2 3\n-1 -1\n''') == '2'\n\nassert solution('''\n3 3\n-1 0 0\n''') == '3'\n\nassert solution('''\n3 2\n-1 -1 -1\n''') == '2'\n\nassert solution('''\n5 2\n0 1 0 1 0\n''') == '8'\n\nassert solution('''\n5 3\n-1 -1 -1 -1 -1\n''') == '2'\n\nassert solution('''\n6 2\n-1 -1 -1 -1 -1 -1\n''') == '2'\n\nassert solution('''\n7 2\n-1 -1 -1 -1 -1 -1 -1\n''') == '2'\n\nassert solution('''\n8 2\n-1 -1 -1 -1 -1 -1 -1 -1\n''') == '2'\n\nassert solution('''\n9 2\n-1 -1 -1 -1 -1 -", "solution(\"2 3\\n0 -1\") == '4'\nassert solution(\"4 5\\n-1 -1 2 -1\") == '15'\nassert solution(\"4 4\\n0 0 -1 0\") == '8'\nassert solution(\"3 4\\n-1 -1 -1\") == '3'\nassert solution(\"4 2\\n0 0 0 0\") == '1'\nassert solution(\"10 1000\\n0 1 2 3 4 5 6 7 8 9\") == '1001'\nassert solution(\"10 1000\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\") == '1'\nassert solution(\"10 1000\\n0 0 0 0 0 0 0 0 0 0\") == '1'\nassert solution(\"10 1000\\n-1 0 -1 0 -1 0 -1 0 -1 0\") == '554'\nassert solution(\"10 1000\\n0 -1 0 -1 0 -1 0 -1 0 -1\") == '554'\nassert solution(\"10 1000\\n999 999 999 999 999 999 999 999 999 999\") == '1'\nassert solution(\"10 1000\\n0 0 0 0 0 1 0 0 0 0\") == '9'\nassert solution(\"10 1000\\n0 0 0 0 0 1 1 1 1 1\") == '99'\nassert solution(\"10 1000\\n", "solution('''\n2 2\n-1 -1\n''') == '3'\n\nassert solution('''\n2 3\n0 1\n''') == '1'\n\nassert solution('''\n3 2\n0 -1 1\n''') == '1'\n\nassert solution('''\n2 3\n0 0\n''') == '0'\n\n# print solution\nimport sys\nstdin = sys.stdin.read()\nn = int(stdin.split('\\n')[0].split()[0])\nfor i in range(n):\n    stdin = sys.stdin.read()\n    sol = solution(stdin)\n    print('#{}'.format(i+1), sol)", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution(test_case[0]) == test_case[1]", "solution(\"\"\"\\\n2 5\n-1 0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\\\n2 5\n-1 -1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\\\n2 5\n-1 -1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\\\n4 5\n-1 -1 2 3\n\"\"\") == \"38\"\n\nassert solution(\"\"\"\\\n10 3\n-1 -1 -1 0 0 1 1 1 2 2\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\\\n5 5\n-1 -1 -1 0 0\n\"\"\") == \"48\"\n\nassert solution(\"\"\"\\\n5 5\n-1 -1 -1 0 1\n\"\"\") == \"71\"\n\nassert solution(\"\"\"\\\n5 5\n-1 -1 -1 1 1\n\"\"\") == \"59\"\n\nassert solution(\"\"\"\\\n5 5\n-1 -1 -1 1 2\n\"\"\") == \"63\"\n\nassert solution(\"\"\"\\\n5 5\n-1 -1 -1 2 2\n\"\"\") == \"59\"\n\nassert solution(\"\"\"\\\n5 5\n-1 -1 -1 2 3\n\"\"\") == \"55\"\n\nassert solution(\"\"\"\\\n5 5\n-1 -1 -1 3 3\n\"\"\") == \"53\"\n", "solution('''2 3\n1 -1''') == '1'\nassert solution('''2 3\n-1 -1''') == '2'\nassert solution('''3 2\n-1 0 -1''') == '2'\nassert solution('''2 2\n-1 -1''') == '1'\nassert solution('''3 1\n-1 0 -1''') == '0'\nassert solution('''2 1\n-1 -1''') == '0'\nassert solution('''1 1\n-1''') == '0'\nassert solution('''10 1000000000\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '9990394728'\nassert solution('''2 3\n-1 -1''') == '2'\nassert solution('''3 2\n-1 0 -1''') == '2'\nassert solution('''2 2\n-1 -1''') == '1'\nassert solution('''3 1\n-1 0 -1''') == '0'\nassert solution('''2 1\n-1 -1''') == '0'\nassert solution('''1 1\n-1''') == '0'\nassert solution('''10 1000000000\n-1 -1 -1", "solution('''\n2 3\n-1 -1\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1 2\n0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1 3\n-1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n3 4\n-1 -1 -1\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4 3\n-1 -1 -1 -1\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n6 2\n-1 -1 -1 -1 -1 -1\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n5 3\n0 0 1 -1 -1\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3 2\n-1 0 -1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n4 3\n0 0 -1 1\n''') == '1'\n\n# check the correctness of solution", "solution('''2 2\n-1 -1''') == '1'\nassert solution('''4 3\n0 -1 1 2''') == '1'\nassert solution('''4 2\n-1 0 1 1''') == '2'\nassert solution('''10 3\n-1 1 1 2 0 -1 -1 1 -1 0''') == '8'\nassert solution('''1 2\n0''') == '0'\nassert solution('''2 2\n0 0''') == '0'\nassert solution('''10 9\n0 0 0 1 0 2 0 0 0 2''') == '1'\nassert solution('''10 9\n-1 0 0 0 -1 0 0 0 -1 -1''') == '0'\nassert solution('''10 9\n-1 0 0 0 0 0 0 0 -1 -1''') == '1'\nassert solution('''10 9\n-1 0 0 0 0 0 0 0 0 -1''') == '0'\nassert solution('''10 9\n0 0 0 0 0 0 0 0 0 0''') == '0'\nassert solution('''10 9\n0 0 0 0 0 0 0 0 0 1''') == '1'\nassert solution('''10 9\n0 0 0 0 0 0 0 0 1 0''') ==", "solution('''\n3 3\n0 -1 2\n''') == '6'\n\nassert solution('''\n10 4\n1 2 3 -1 0 0 1 -1 2 -1\n''') == '882394'\n\nassert solution('''\n10 10\n2 3 3 0 2 6 8 1 2 9\n''') == '4966208'\n\nassert solution('''\n4 2\n0 -1 -1 0\n''') == '4'\n\nassert solution('''\n10 2\n0 0 1 1 0 1 1 0 0 1\n''') == '5'\n\nprint('All passed!')", "(solution('''\n2 2\n-1 -1\n''') == '2')\n\nassert (solution('''\n5 2\n0 0 0 0 -1\n''') == '1')\n\nassert (solution('''\n2 3\n-1 1\n''') == '3')\n\nassert (solution('''\n5 4\n1 2 3 0 -1\n''') == '1')\n\nassert (solution('''\n2 3\n0 1\n''') == '1')\n\nassert (solution('''\n4 4\n1 2 3 -1\n''') == '1')\n\nassert (solution('''\n3 10\n0 4 9\n''') == '1')\n\nassert (solution('''\n10 10\n2 3 3 3 3 3 3 1 4 2\n''') == '3')\n\nassert (solution('''\n5 10\n0 0 -1 0 0\n''') == '1')\n\nassert (solution('''\n5 10\n-1 3 0 3 3\n''') == '2')\n\nassert (solution('''\n5 10\n4 1 -1 4 4\n''') == '3')\n\nassert (solution('''\n5 10\n-1 -1 -1 -1 -1\n''')", "solution(\"2 2\\n-1 -1\") == \"1\"\nassert solution(\"4 3\\n-1 -1 2 1\") == \"1\"\nassert solution(\"10 2\\n-1 -1 -1 1 1 -1 -1 -1 -1 -1\") == \"49\"\nassert solution(\"15 3\\n2 -1 1 -1 2 1 1 1 -1 2 -1 1 1 1 2\") == \"163\"\nassert solution(\"16 5\\n-1 1 2 2 1 3 3 2 3 -1 2 -1 2 2 3 -1\") == \"2629\"\nassert solution(\"16 3\\n-1 2 1 1 2 2 -1 1 2 1 -1 2 1 2 1 2\") == \"1107\"\nassert solution(\"1 100\\n-1\") == \"1\"\nassert solution(\"2 3\\n2 2\") == \"0\"\nassert solution(\"2 3\\n2 0\") == \"1\"\nassert solution(\"4 4\\n-1 -1 2 0\") == \"2\"\nassert solution(\"4 4\\n-1 -1 2 1\") == \"1\"\nassert solution(\"4 4\\n-1 -1 3 1\") == \"1\"\nassert solution(\"4 5\\n-1 -1 3 1\") == \"5\"\nassert solution(\"5 4\\n1 -1 2 3 -1", "solution('''\n2 2\n-1 -1\n''') == '1'\n\nassert solution('''\n3 2\n-1 -1 -1\n''') == '2'\n\nassert solution('''\n4 4\n0 -1 1 2\n''') == '6'\n\nassert solution('''\n3 4\n-1 -1 -1\n''') == '12'\n\nassert solution('''\n5 10\n1 2 3 4 5\n''') == '0'\n\nassert solution('''\n6 10\n0 1 2 3 4 5\n''') == '1'\n\nassert solution('''\n6 10\n-1 -1 -1 -1 -1 -1\n''') == '6'\n\nassert solution('''\n3 4\n0 -1 0\n''') == '4'\n\nassert solution('''\n4 4\n0 -1 0 1\n''') == '7'\n\nassert solution('''\n4 4\n0 -1 1 0\n''') == '8'\n\nassert solution('''\n4 4\n1 -1 0 0\n''') == '4'\n\nassert solution('''\n4 4\n-1 0 -1 0\n''') == '8'\n\nassert solution('''\n4 4\n-1 -1 0 0\n", "solution('''\n3 3\n-1 -1 0\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3 2\n-1 0 -1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1 3\n-1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n5 2\n-1 0 -1 -1 0\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n10 3\n0 1 2 0 1 2 0 1 2 0\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n10 2\n0 1 0 1 0 1 0 1 0 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n10 2\n1 0 1 0 1 0 1 0 1 0\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1 1\n0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1 0\n0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1 -1\n0\n''') == '0'\n\n# check the correctness", "solution('''4 3\n1 -1 -1 1''') == '2'\nassert solution('''4 3\n-1 -1 -1 -1''') == '12'\nassert solution('''4 4\n1 1 1 1''') == '0'\nassert solution('''10 3\n0 -1 -1 0 -1 -1 0 -1 -1 0''') == '2'\nassert solution('''10 3\n0 -1 -1 0 -1 -1 0 -1 -1 1''') == '1'\nassert solution('''10 9\n1 1 1 1 1 1 1 1 1 1''') == '0'\nassert solution('''8 6\n-1 -1 1 -1 -1 -1 -1 -1''') == '31'\nassert solution('''10 9\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '123'\nassert solution('''10 6\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '81'\nassert solution('''10 5\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '57'\nassert solution('''10 4\n-1 -1 -1 -1", "solution('''3 2\n1 -1 1''') == '7'\nassert solution('''3 3\n-1 -1 -1''') == '4'\nassert solution('''4 4\n-1 0 -1 0''') == '11'\nassert solution('''4 4\n0 1 2 3''') == '0'\nassert solution('''6 4\n0 1 2 3 0 1''') == '0'\nassert solution('''10 4\n0 -1 0 -1 -1 0 -1 0 -1 0''') == '31'\nassert solution('''10 3\n0 1 2 0 1 2 0 1 2 0''') == '0'\nassert solution('''10 3\n0 0 0 0 0 0 0 0 0 0''') == '0'\nassert solution('''10 2\n0 0 0 0 0 0 0 0 0 0''') == '0'\nassert solution('''10 2\n1 1 1 1 1 1 1 1 1 1''') == '0'\nassert solution('''10 2\n1 1 1 1 1 1 1 1 1 0''') == '10'\nassert solution('''10 2\n0 0 0 0 0 0 0 0 0 1''') == '9'\nassert solution('''10 2\n1 0 1 0 1 0 1 0 1 0''')", "solution('''\n5 2\n-1 0 1 -1 -1\n''') == '''\n5\n'''\nassert solution('''\n3 2\n-1 -1 -1\n''') == '''\n2\n'''\nassert solution('''\n4 3\n-1 0 2 1\n''') == '''\n4\n'''\nassert solution('''\n10 5\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '''\n6\n'''\nassert solution('''\n2 3\n1 2\n''') == '''\n0\n'''\nassert solution('''\n10 5\n0 1 2 3 4 -1 -1 -1 -1 -1\n''') == '''\n3\n'''\nassert solution('''\n10 100\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '''\n4\n'''\nassert solution('''\n20 10000\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n''') == '''\n0\n'''\nassert solution('''\n50 1000000\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -", "solution('''\n2 2\n0 -1\n''') == '1'\n\nassert solution('''\n3 2\n-1 0 -1\n''') == '2'\n\nassert solution('''\n3 2\n0 -1 -1\n''') == '3'\n\nassert solution('''\n3 2\n-1 -1 -1\n''') == '4'\n\nassert solution('''\n4 3\n1 -1 2 0\n''') == '4'\n\nassert solution('''\n4 3\n-1 -1 -1 -1\n''') == '10'\n\nassert solution('''\n4 3\n0 0 0 0\n''') == '1'\n\nassert solution('''\n4 3\n1 2 -1 -1\n''') == '3'\n\nassert solution('''\n4 3\n0 -1 0 -1\n''') == '2'\n\nassert solution('''\n4 3\n0 -1 1 -1\n''') == '4'\n\nassert solution('''\n4 3\n0 -1 1 2\n''') == '4'\n\nassert solution('''\n4 3\n1 2 -1 0\n''') == '3'\n\nassert solution('''\n4 3\n1 -1 0 0\n''') == '3'", "solution(\"\"\"4 2\n-1 1 -1 0\"\"\") == \"2\"\nassert solution(\"\"\"4 4\n-1 -1 -1 -1\"\"\") == \"4\"\nassert solution(\"\"\"4 3\n-1 -1 -1 0\"\"\") == \"1\"\nassert solution(\"\"\"4 3\n0 -1 1 2\"\"\") == \"1\"\nassert solution(\"\"\"4 3\n0 0 1 1\"\"\") == \"1\"\nassert solution(\"\"\"2 3\n-1 0\"\"\") == \"1\"\nassert solution(\"\"\"2 3\n0 -1\"\"\") == \"1\"\nassert solution(\"\"\"2 3\n0 0\"\"\") == \"1\"\nassert solution(\"\"\"2 3\n1 1\"\"\") == \"0\"\nassert solution(\"\"\"2 3\n1 0\"\"\") == \"0\"\nassert solution(\"\"\"2 3\n0 1\"\"\") == \"0\"\nassert solution(\"\"\"2 3\n2 2\"\"\") == \"0\"\nassert solution(\"\"\"4 9\n-1 -1 -1 -1\"\"\") == \"49\"\nassert solution(\"\"\"4 9\n-1 -1 -1 5\"\"\") == \"34\"\nassert solution(\"\"\"4 9\n-1 -1 2 5\"\"\") == \"30\"\nassert solution(\"\"\"4 9\n-1 3 2 5\"\"\") == \"20\"\nassert solution(\"\"\"4", "solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the correctness of solution\nassert", "solution('''3 2\n-1 -1 0''') == '3'\nassert solution('''3 2\n0 0 0''') == '0'\nassert solution('''3 2\n-1 0 -1''') == '3'\nassert solution('''3 2\n-1 -1 -1''') == '6'\nassert solution('''3 3\n0 0 0''') == '0'\nassert solution('''3 3\n-1 -1 -1''') == '18'\nassert solution('''5 2\n-1 -1 0 -1 -1''') == '30'\nassert solution('''5 3\n-1 -1 0 -1 -1''') == '90'\nassert solution('''5 3\n-1 -1 -1 -1 -1''') == '270'\nassert solution('''5 3\n0 0 -1 -1 -1''') == '90'\nassert solution('''5 3\n0 0 0 -1 -1''') == '90'\nassert solution('''5 3\n0 0 0 0 -1''') == '90'\nassert solution('''5 3\n0 0 0 0 0''') == '0'\nassert solution('''5 2\n0 0 -1 -1 -1''') == '30'\nassert", "solution(\"\"\"4 2\n-1 1 -1 -1\"\"\") == '2'\nassert solution(\"\"\"3 2\n-1 -1 -1\"\"\") == '9'\nassert solution(\"\"\"5 2\n-1 -1 -1 0 -1\"\"\") == '16'\nassert solution(\"\"\"6 2\n-1 -1 -1 -1 -1 -1\"\"\") == '36'\nassert solution(\"\"\"10 3\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\"\"\") == '1249'\nassert solution(\"\"\"10 3\n-1 -1 -1 1 -1 -1 -1 -1 -1 -1\"\"\") == '1248'\nassert solution(\"\"\"20 1\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\"\") == '1'\nassert solution(\"\"\"20 1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\"\"\") == '455547'\nassert solution(\"\"\"100000 1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "solution(\"3 5\\n-1 -1 -1\") == \"1\"\nassert solution(\"3 2\\n-1 0 -1\") == \"5\"\nassert solution(\"5 6\\n2 0 -1 4 1\") == \"1\"\nassert solution(\"5 5\\n1 2 2 1 1\") == \"0\"\nassert solution(\"5 3\\n1 2 -1 1 1\") == \"5\"\nassert solution(\"5 2\\n-1 -1 -1 -1 -1\") == \"8\"\nassert solution(\"5 2\\n-1 -1 0 -1 -1\") == \"12\"\nassert solution(\"5 3\\n-1 -1 -1 -1 -1\") == \"16\"\nassert solution(\"5 3\\n-1 -1 -1 -1 0\") == \"24\"\nassert solution(\"5 5\\n-1 -1 -1 -1 -1\") == \"25\"\nassert solution(\"5 5\\n-1 -1 -1 -1 0\") == \"35\"\nassert solution(\"5 5\\n-1 -1 -1 0 -1\") == \"35\"\nassert solution(\"5 5\\n-1 -1 -1 0 0\") == \"49\"\nassert solution(\"5 5\\n-1 -1 0 -1 -1\") == \"35\"\nassert solution(\"5 5\\n-", "'12' == solution('''\n4 3\n1 2 -1 -1\n''')\n\n# check the correctness of solution\nassert '17' == solution('''\n4 3\n-1 -1 -1 -1\n''')\n\n# check the correctness of solution\nassert '475299837' == solution('''\n4 3\n-1 -1 -1 0\n''')\n\n# check the correctness of solution\nassert '878974381' == solution('''\n5 6\n-1 -1 -1 -1 -1\n''')\n\n# check the correctness of solution\nassert '175786816' == solution('''\n8 6\n-1 -1 -1 -1 -1 -1 -1 -1\n''')\n\n# check the correctness of solution\nassert '93717794' == solution('''\n8 3\n-1 -1 -1 -1 -1 -1 -1 -1\n''')\n\n# check the correctness of solution\nassert '982360472' == solution('''\n8 4\n-1 -1 -1 -1 -1 -1 -1 -1\n''')\n\n# check the correctness of solution\nassert '12' == solution('''\n4 3\n1 2 -1 -1\n''')\n\n# check the correctness of solution\nassert", "solution('''\n3 2\n-1 0 -1\n''') == '1'\n\nassert solution('''\n4 3\n0 -1 -1 1\n''') == '13'\n\nassert solution('''\n5 20\n-1 5 7 -1 4\n''') == '235'\n\nassert solution('''\n15 100\n-1 42 -1 -1 -1 -1 -1 -1 -1 -1 42 -1 -1 -1 -1 -1\n''') == '58928'\n\nassert solution('''\n100000 1\n0\n''') == '1'\n\nassert solution('''\n100000 1000000000\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -", "solution('''\n4 4\n-1 -1 -1 -1\n''') == '20'\n\nassert solution('''\n10 10\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '100'\n\nassert solution('''\n10 10\n-1 -1 -1 -1 -1 -1 -1 -1 -1 0\n''') == '81'\n\nassert solution('''\n10 100\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '324'\n\nassert solution('''\n10 100\n-1 -1 -1 -1 -1 -1 -1 -1 -1 0\n''') == '290'\n\nassert solution('''\n10 1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '0'\n\nassert solution('''\n10 1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 0\n''') == '0'\n\nassert solution('''\n10 10\n-1 -1 -1 -1 -1 -1 -1 -1 -1 0\n''') == '81'\n\nassert solution('''\n3 2\n0 1 0\n", "solution(stdin) == stdout\n\n\n# view source code of testing tool\nimport inspect\nprint(inspect.getsource(f'{__file__}'))", "solution('''\n4 4\n-1 -1 0 -1\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n4 4\n0 -1 0 0\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n6 10\n0 9 -1 0 -1 0\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n10 10\n9 -1 8 -1 0 0 -1 1 -1 -1\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n20 2\n0 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0\n''') == '19'\n\n# check the correctness of solution\nassert solution('''\n10 1000000000\n0 1 0 0 1 1 0 0 1 1\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n10 1000000000\n0 0 0 0 0 0 0 0 0 0\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n10 1000000000\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n''') == '125994639'\n\n# check the correctness of solution\nassert"], "finish_reason": ["stop", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length"], "sum_logprob": [-5.46140478, -10.15311390785, -53.071479466548006, -78.9834487063276, -7.19582349, -80.8467935434931, -69.91474858305, -146.1645042824501, -57.73436230598742, -20.82003938203, -133.55373301304584, -32.39200906704103, -113.91929914454909, -77.57496200041201, -92.31384129673798, -77.82787991553107, -140.61433635162504, -100.74482469228708, -9.601328570696, -105.51501584155002, -72.75127964049997, -41.3546455771, -84.51772261007092, -135.41665817946205, -77.55674209925998, -12.328861258896008, -9.8890587026, -113.41717327852709, -88.01314412558297, -84.88215036577508, -122.49878454661994, -133.378760403364, -150.45308942273903, -216.29689229803506, -109.38582381033301, -74.087753079447, -116.87822534449903, -108.79912565506986, -101.19814699175099, -89.508920555627, -115.15427764184798, -21.509580715144004, -76.78523673567402, -112.576455059364, -116.61157738118897, -175.93321437949496, -101.91178415812908, -84.31394555468545, -45.75858320815001, -139.77791540767612], "mean_logprob": [-0.91023413, -0.8460928256541667, -0.4696591103234336, -0.26327816235442497, -1.0279747842857143, -0.2694893118116433, -0.7437739210962766, -0.4872150142748333, -0.19244787435329133, -0.717932392483793, -0.44517911004348665, -0.10797336355680333, -0.3797309971484967, -0.25858320666804, -0.30771280432246, -0.25942626638510335, -0.46871445450541666, -0.33581608230762333, -0.8001107142246666, -0.9769908874217592, -0.7063231033058253, -0.7384758138767857, -0.28172574203357, -0.45138886059820665, -0.46441162933688623, -0.04109620419632, -0.6180661689125, -0.3780572442617567, -0.2933771470852767, -0.28294050121925, -0.4083292818220667, -0.9327186042193287, -0.5015102980757966, -0.72098964099345, -0.36461941270111, -0.24695917693149, -0.3895940844816633, -0.36266375218356667, -0.33732715663917, -0.29836306851875666, -0.3838475921394933, -0.07169860238381333, -0.25595078911891334, -0.37525485019788, -0.38870525793729666, -0.58644404793165, -0.33970594719376335, -0.281046485182285, -1.1732970053371794, -0.46592638469225334]}
{"prompt": "'''\nMr. Chanek has an array a of n integers. The prettiness value of a is denoted as:\n\n$$$\u2211_{i=1}^{n} {\u2211_{j=1}^{n} {\\gcd(a_i, a_j) \u22c5 \\gcd(i, j)}}$$$\n\nwhere \\gcd(x, y) denotes the greatest common divisor (GCD) of integers x and y.\n\nIn other words, the prettiness value of an array a is the total sum of \\gcd(a_i, a_j) \u22c5 \\gcd(i, j) for all pairs (i, j).\n\nHelp Mr. Chanek find the prettiness value of a, and output the result modulo 10^9 + 7!\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n3 1\n''') == '8'\n\nassert solution('''\n2\n2 2\n''') == '8'\n\nassert solution('''\n3\n1 2 3\n''') == '12'\n\nassert solution('''\n3\n1 2 4\n''') == '16'\n\nassert solution('''\n5\n2 2 2 2 2\n''') == '80'\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '80'\n\n# check the performance of solution\nimport timeit\nimport random\nimport string\n\nn_max = 10**5\nv_max = 10**5\ntest_inputs = [\n    (random.randint(2, n_max), [random.randint(1, v_max) for _ in range(n_max)])\n    for _ in range(10)\n]\n\ndef test_perf(f):\n    for n, values in test_inputs:\n        test_input = '\\n'.join([str(n), ' '.join(map(str, values))])\n        print(f'{n=} {values=}')\n        time = timeit.timeit(lambda: f(test_input), number=100)\n        print(f'", "solution('''\n5\n5 2 1 3 1\n''') == '102'\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '225'\n\nassert solution('''\n5\n3 3 4 4 4\n''') == '192'\n\nassert solution('''\n5\n5 4 3 2 1\n''') == '102'\n\nassert solution('''\n5\n4 3 3 2 3\n''') == '116'\n\nassert solution('''\n5\n2 2 2 2 2\n''') == '80'\n\n# this is a local test, not a real testcase, you can use it to test your code\n# print(solution('''\n# 1\n# 5\n# '''))\n\ndef testcase(input: str, expected: str) -> None:\n    import sys\n    import io\n    import unittest\n\n    class Tester(unittest.TestCase):\n        def test(self):\n            self.assertEqual(solution(input), expected)\n\n    suite = unittest.TestSuite()\n    suite.addTest(Tester('test'))\n    result = unittest.TextTestRunner(verbosity=2).run(suite)\n    if result.errors or result.failures:\n        print", "solution(\"1\\n2 3\") == \"28\"\nassert solution(\"2\\n1 2\") == \"11\"\nassert solution(\"3\\n5 5 5\") == \"108\"\nassert solution(\"5\\n1 2 3 4 5\") == \"335\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"3297\"\nassert solution(\"100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"146779\"\nassert solution(\"1000\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98", "solution('''\n4\n1 2 3 4\n''') == '49'\n\n# simulate user input for the program\nwhile True:\n    try:\n        # read the next line\n        line = input()\n        # stop if there is no next line\n        if not line:\n            break\n        # otherwise, print the solution\n        print(solution(line))\n    except EOFError:\n        break", "solution('''\n2\n1 1\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 10 10 5 10\n''') == '''\n25\n'''", "solution('''\n5\n1 1 1 1 1\n''') == '60'\n\n# check the correctness of solution\nassert solution('''\n10\n5 5 5 5 5 5 5 5 5 5\n''') == '500'\n\n# check the correctness of solution\nassert solution('''\n5\n2 3 4 5 6\n''') == '70'\n\n# check the correctness of solution\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '210'\n\n# check the correctness of solution\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '670'\n\n# check the correctness of solution\nassert solution('''\n100\nsolution('''\n3\n3 4 3\n''') == '39'\n\n# check the correctness of solution\nassert solution('''\n3\n7 4 3\n''') == '135'\n\n# check the correctness of solution\nassert solution('''\n7\n30 22 15 1 9 17 35\n''') == '3941'\n\n# check the correctness of solution\nassert solution('''\n6\n64 1 24 12 15 34\n''') == '4657'\n\n# check the correctness of solution\nassert solution('''\n4\n89 10 44 56\n''') == '1869'\n\n# check the correctness of solution\nassert solution('''\n10\n51 1 11 41 61 26 4 4 9 56\n''') == '15046'\n\n# check the correctness of solution\nassert solution('''\n10\n8 8 8 8 8 8 8 8 8 8\n''') == '2808'\n\n# check the correctness of solution\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '55'\n\n# check the correctness of solution\nassert solution('''\n10\n7 7 7 7 7 7 7 7 7 7\n''') == '903'\n\n# check the correctness of solution\nassert solution('''\n10\n10 10 10 10 10 10 10 10", "solution('''\n2\n1 2\n''') == '6'\n\nassert solution('''\n3\n2 3 1\n''') == '19'\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '15014728'\n\nassert solution('''\n7\n1 6 5 3 2 4 7\n''') == '2037429'\n\n# submit answer\nprint(solution('''\n7\n1 6 5 3 2 4 7\n'''))", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution('''\n2\n1 2\n''') == '4'\n\nassert solution('''\n3\n1 2 3\n''') == '15'\n\nassert solution('''\n4\n1 2 3 4\n''') == '36'\n\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n''') == '96'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '183'\n\nassert solution('''\n100\n14 5 27 28 31 9 30 5 21 16 11 4 13 24 13 25 13 18 13 29 24 9 16 19 20 21 28 18 12 9 25 5 23 6 20 26 18 9 21 27 24 14 14 11 10 9 28 10 22 6 10 21 19 25 7 5 8 8 27 24 19 9 7 5 25 24 16 23 10 10 7 5 6 15 10 10 21 20 23 5 16 6 26 24 12 9 18 14 15 28 14 16 20 21 11 5 8 8 6 15 16 24 27 24 22 22 16 12 12 9 7 5 4 4 21 27 21 11 19 16 6 4 25 4 23 26 19 18 28 6 4 19 15 28 23 22 16 15 27 23 18 24 23 24 20 25 18 19 24 15 20 6 5 16 28 10 18 18 26 11 10 10 6 18 27 21 24 6 5 4 25 21 16 27 20 23 5 4 6 25 23", "solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"\"\"\n170\n\"\"\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"\"\"\n28\n\"\"\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the performance of solution\n# from utils import *\n# import random\n# n = int(1e5)\n# stdin = \"{}\\n{}\".format(n, \" \".join(str(random.randint(1, int(1e5))) for _ in range(n)))\n# assert run_timed(solution, stdin) < 1", "solution('''\n2\n1 1\n''') == '2'\n\nassert solution('''\n3\n1 2 3\n''') == '18'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '370'\n\nassert solution('''\n10\n724 974 588 100 646 699 154 849 296 11\n''') == '17253970'\n\nassert solution('''\n100\n230 645 863 843 736 686 606 212 794 522 649 617 197 901 516 626 121 750 973 537 611 932 946 238 887 805 734 813 591 264 888 987 587 469 896 929 545 417 859 717 887 970 829 874 913 557 631 973 958 527 381 972 965 599 877 880 916 564 585 165 783 813 653 374 903 987 593\n''') == '688489645'\n\nassert solution('''\n1000\n251 894 528 772 489 893 442 721 830 645 897 742 355 804 549 564 954 936 242 541 786 794 581 604 718 741 525 652 5", "solution(\"input\") == \"output\"", "solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"23\"\n\nassert solution(\"\"\"\n4\n2 2 2 2\n\"\"\") == \"40\"\n\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"90\"\n\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"205\"\n\nassert solution(\"\"\"\n5\n5 4 3 2 1\n\"\"\") == \"205\"\n\nassert solution(\"\"\"\n5\n5 5 5 5 5\n\"\"\") == \"215\"\n\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"205\"\n\nassert solution(\"\"\"\n5\n5 4 3 2 1\n\"\"\") == \"205\"\n\nassert solution(\"\"\"\n5\n5 5 5 5 5\n\"\"\") == \"215\"\n\nassert solution(\"\"\"\n5\n5 5 5 5 1\n\"\"\") == \"210\"\n\nassert solution(\"\"\"\n5\n1 2 1 2 1\n\"\"\") == \"90\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 1\n\"\"\") == \"60\"\n\nassert solution(\"\"\"\n5\n2 2 2 2 2\n\"\"\") == \"120\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 2\n\"\"\")", "solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n155\n\"\"\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"\"\"\n27\n\"\"\"\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\n2750\n\"\"\"\nassert solution(\"\"\"\n10\n10 9 8 7 6 5 4 3 2 1\n\"\"\") == \"\"\"\n2750\n\"\"\"", "solution('''\n5\n1 2 3 4 5\n''') == '''\n150\n'''\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n6720\n'''\n\nassert solution('''\n1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n3\n3 6 9\n''') == '''\n126\n'''\n\nassert solution('''\n2\n1000000000 1\n''') == '''\n1000000000\n'''\n\nassert solution('''\n2\n2 4\n''') == '''\n20\n'''\n\nassert solution('''\n2\n4 2\n''') == '''\n20\n'''\n\nassert solution('''\n5\n20 20 20 20 20\n''') == '''\n44100\n'''\n\nassert solution('''\n3\n6 6 6\n''') == '''\n630\n'''\n\nassert solution('''\n10\n1 10 2 9 3 8 4 7 5 6\n''') == '''\n6720\n'''\n\nassert solution('''\n8\n1 1 2 2 3 3 4 4\n''') == '''\n1320\n'''\n\nassert solution('''\n8\n1 2 1", "solution(stdin_1) == stdout_1\nassert solution(stdin_2) == stdout_2\nassert solution(stdin_3) == stdout_3\nassert solution(stdin_4) == stdout_4\nassert solution(stdin_5) == stdout_5\nassert solution(stdin_6) == stdout_6\nassert solution(stdin_7) == stdout_7\nassert solution(stdin_8) == stdout_8\nassert solution(stdin_9) == stdout_9\nassert solution(stdin_10) == stdout_10", "solution(r'''\n''') == r'''\n'''\n\n# ==================================================\n\n# Template\n\nfrom collections import deque\nfrom typing import List, Set, Dict, Tuple, Optional\nfrom copy import deepcopy\n\n# Template Author: Rajput-Ji\n\ndef read_ints() -> List[int]:\n    return [int(x) for x in stdin.readline().split()]\n\ndef read_strs() -> List[str]:\n    return [x for x in stdin.readline().split()]\n\ndef solve(tc: int) -> None:\n    pass\n\n# ==================================================\n\nstdin = open('input.txt', 'r')\n\ntc = int(stdin.readline())\n\nfor i in range(tc):\n    solve(i)\n\nstdin.close()", "solution('''\n5\n1 3 2 3 4\n''') == '''\n63\n'''\n\n# get input\ndef get_input():\n    with open('input.txt', 'r') as f:\n        return f.read()\n\n# tests\nif __name__ == '__main__':\n    n = int(get_input().split('\\n')[0])\n    assert(2 <= n <= 10**5)\n    a = list(map(int, get_input().split('\\n')[1].split()))\n    assert(len(a) == n)\n    assert(all(1 <= v <= 10**5 for v in a))", "solution(TEST_CASES[0]) == TEST_CASES[0][-1]\nassert solution(TEST_CASES[1]) == TEST_CASES[1][-1]\n\n'''\nBy doing so it is easier to compare with the stdout.txt file.\n\n\nAddtional tip: if you want to output an integer, you can use either str(int) or '{}'.format(int)\n'''", "solution('''\n2\n1 1\n''') == '2'\n\nassert solution('''\n3\n1 2 3\n''') == '22'\n\nassert solution('''\n4\n1 1 2 3\n''') == '90'\n\nassert solution('''\n10\n1 7 4 4 5 2 5 7 8 2\n''') == '4911'\n\nassert solution('''\n10\n420055 420055 909009 420055 420055 792426 792426 792426 792426 792426\n''') == '792426'\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '110'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '170'\n\nassert solution('''\n5\n5 4 3 2 1\n''') == '170'\n\nassert solution('''\n5\n1 2 4 3 1\n''') == '126'\n\nassert solution('''\n5\n2 2 2 2 2\n''') == '22'\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '1'\n\nassert solution('''\n5\n10 10 10 10 10\n''') == '10'\n\nassert solution('''", "solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n3\n1 1 1\n''') == '9'\n\nassert solution('''\n3\n4 5 6\n''') == '114'\n\nassert solution('''\n4\n1 2 3 4\n''') == '124'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '1721'\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '1519'\n\nassert solution('''\n10\n4 4 4 4 4 4 4 4 4 4\n''') == '32960'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '1721'\n\nassert solution('''\n100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(\"\") == \"\", \"Not a valid test case\"\nassert solution(\"\") == \"\", \"Not a valid test case\"\nassert solution(\"\") == \"\", \"Not a valid test case\"\nassert solution(\"\") == \"\", \"Not a valid test case\"\nassert solution(\"\") == \"\", \"Not a valid test case\"\nassert solution(\"\") == \"\", \"Not a valid test case\"\nassert solution(\"\") == \"\", \"Not a valid test case\"\nassert solution(\"\") == \"\", \"Not a valid test case\"\nassert solution(\"\") == \"\", \"Not a valid test case\"\nassert solution(\"\") == \"\", \"Not a valid test case\"\n\n# now that you've passed the samples, submit to the online judge\nprint(solution(open(\"./sample.txt\", \"r\").read()))", "solution('''2\n2 2''') == '8'\nassert solution('''3\n3 5 7''') == '196'\nassert solution('''5\n1 2 3 4 5''') == '440'\n\n# get the input\nn, *a = [int(x) for x in input().split()]\n\nfrom math import gcd\nM = 10**9 + 7\n\na = [0] + a\ngcd_from_left = [0] * (n + 1)\ngcd_from_right = [0] * (n + 1)\ngcd_from_left[1] = a[1]\ngcd_from_right[n] = a[n]\nfor i in range(2, n + 1):\n    gcd_from_left[i] = gcd(gcd_from_left[i - 1], a[i])\nfor i in range(n - 1, 0, -1):\n    gcd_from_right[i] = gcd(gcd_from_right[i + 1], a[i])\n\nfrom itertools import combinations\nfrom functools import reduce\n\ndef get_gcd(x, y):\n    if x == 0:\n        return y\n    return get_gcd(y % x,", "solution('''\n5\n1 2 3 4 5\n''') == '''\n120\n'''\nassert solution('''\n2\n100 100\n''') == '''\n120000\n'''\nassert solution('''\n5\n5 4 3 2 1\n''') == '''\n30\n'''\nassert solution('''\n8\n12 10 30 15 8 19 22 7\n''') == '''\n1180\n'''", "solution(\"\") == \"\", \"empty input\"\nassert solution(\"\") == \"\", \"empty input\"", "solution('''\n2\n1 2\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n2\n1 10\n''') == '15'\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 3\n''') == '42'\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 3 4\n''') == '120'\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 3 4 5\n''') == '300'\n\n# check the correctness of solution\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '735'\n\n# check the correctness of solution\nassert solution('''\n7\n1 2 3 4 5 6 7\n''') == '1716'\n\n# check the correctness of solution\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n''') == '3996'\n\n# check the correctness of solution\nassert solution('''\n9\n1 2 3 4 5 6 7 8 9\n''') == '9192'\n\n# check the correctness of solution\nassert solution('''\n10\n1 2", "solution('''\n2\n1 2\n''') == '6'\n\nassert solution('''\n3\n1 2 3\n''') == '36'\n\nassert solution('''\n3\n1 1 1\n''') == '18'\n\n# submit\nTESTS = [\n    ('''\n2\n1 2\n''', '6'),\n    ('''\n3\n1 2 3\n''', '36'),\n    ('''\n3\n1 1 1\n''', '18'),\n    ('''\n10\n1 2 3 4 5 6 7 8 9 10\n''', '371429600'),\n    ('''\n5\n1 2 3 4 5\n''', '475'),\n    ('''\n50\n49 50 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n''', '20991497'),\n    ('''\n4\n4 2 1 5\n''', '130'),\n    ('''\n20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''', '76166160'),\n    ('''\n100\n100 100 100 100 100 100 100 100 100", "solution('''\n2\n1 2\n''') == '8'\n\nassert solution('''\n3\n3 1 2\n''') == '31'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n5\n6 1 2 3 4\n''') == '188'\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '250'\n\n# submit this file\n# check https://judge.yosupo.jp/submission/4672 for details\n\n'''\ni, j = [int(i) for i in input().split()]\nans = gcd(i, j)\nprint(ans)\n'''", "solution(\"3\\n1 2 3\") == \"25\"\nassert solution(\"5\\n1 1 1 1 1\") == \"20\"\nassert solution(\"5\\n5 5 5 5 5\") == \"200\"\nassert solution(\"5\\n1 2 3 4 5\") == \"60\"\nassert solution(\"4\\n1 2 3 4\") == \"68\"\nassert solution(\"1\\n5\") == \"5\"\nassert solution(\"5\\n2 3 4 5 6\") == \"72\"\nassert solution(\"3\\n5 7 5\") == \"33\"\nassert solution(\"4\\n4 2 2 1\") == \"40\"\nassert solution(\"5\\n2 3 4 5 6\") == \"72\"\nassert solution(\"2\\n1 2\") == \"8\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"32\"\nassert solution(\"3\\n3 1 3\") == \"23\"\nassert solution(\"5\\n2 3 4 5 6\") == \"72\"\nassert solution(\"3\\n3 1 3\") == \"23\"\nassert solution(\"2\\n2 2\") == \"20\"\nassert solution(\"6\\n2 3 4 5 6 6\") == \"128\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"240\"\nassert solution(\"10\\n5 5", "solution('''\n3\n3 2 1\n''') == '28'\n\n# check correctness of solution\nassert solution('''\n2\n1 1\n''') == '5'\n\n# check correctness of solution\nassert solution('''\n4\n1 2 3 4\n''') == '84'\n\n# check correctness of solution\nassert solution('''\n5\n1 2 3 4 5\n''') == '290'\n\n# check correctness of solution\nassert solution('''\n5\n1 1 1 1 1\n''') == '50'\n\n# check correctness of solution\nassert solution('''\n5\n2 3 4 5 6\n''') == '420'\n\n# check correctness of solution\nassert solution('''\n5\n1 1 1 2 2\n''') == '70'\n\n# check correctness of solution\nassert solution('''\n5\n1 1 1 3 3\n''') == '140'\n\n# check correctness of solution\nassert solution('''\n5\n1 1 1 4 4\n''') == '210'\n\n# check correctness of solution\nassert solution('''\n5\n1 1 1 5 5\n''') == '280'\n\n# check correctness of solution\nassert solution('''\n5\n1 1 2 2 2\n''') == '100'\n\n# check correctness of solution", "solution('''\n2\n1 1\n''') == '2'\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '50'\n\nassert solution('''\n4\n2 3 2 3\n''') == '60'\n\nassert solution('''\n10\n2 3 5 7 9 11 13 17 19 23\n''') == '32281899'\n\n# print test case number\nprint('all test case passed')", "solution('''\n8\n6 1 4 8 10 2 6 11\n''') == '1095899'\nassert solution('''\n1\n1\n''') == '0'\nassert solution('''\n1\n2\n''') == '0'\nassert solution('''\n2\n2 2\n''') == '6'\nassert solution('''\n2\n1 1\n''') == '0'\nassert solution('''\n3\n1 2 3\n''') == '20'\nassert solution('''\n4\n4 3 2 1\n''') == '70'\nassert solution('''\n5\n5 4 2 2 1\n''') == '144'\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '0'\nassert solution('''\n7\n4 2 1 1 1 2 4\n''') == '144'\nassert solution('''\n8\n5 1 2 2 2 1 2 2\n''') == '344'\nassert solution('''\n9\n6 3 5 4 1 7 2 2 3\n''') == '844'\nassert solution('''\n10\n3 4 4 6 6 1 4 6 5 5\n''') == '1926'\nassert solution('''\n11\n2 3 3 3 3 3 3 3 3 3 3\n''') ==", "solution('''\n2\n2 3\n''') == '9'\n\nassert solution('''\n3\n1 2 3\n''') == '24'\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '10'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '154'\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '33154488'\n\nassert solution('''\n4\n9 7 9 5\n''') == '116'\n\nassert solution('''\n1\n1000\n''') == '1000'\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '55'\n\nassert solution('''\n10\n10 9 8 7 6 5 4 3 2 1\n''') == '33154488'", "solution(r'''\n3\n1 2 3\n''') == r'''\n9\n'''\n\n# check the correctness of solution\nassert solution(r'''\n5\n1 2 3 4 5\n''') == r'''\n155\n'''\n\nassert solution(r'''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == r'''\n4110\n'''\n\n# submit\n# https://codeforces.com/contest/1171/submission/48963420\n\n# editorial\n'''\nhttps://codeforces.com/blog/entry/65521\n\nThe most important observation is the fact that \\gcd(i, j) can be uniquely represented as \\gcd(k, \\gcd(i, j)) where k is the LCM of all distinct prime divisors of i.\n\nNext, let\u2019s look at the range of possible values of i, j and \\gcd(i, j).\n\nThe range of \\gcd(i, j) depends on the range of i and j:\n\nif j < i then \\gcd(i, j) = \\gcd(j, i) and \\gcd(i, j) ranges from 1 to min(i, j)\nif j > i then \\gcd(i", "solution('''\n2\n1 2\n''') == '''\n7\n'''\nassert solution('''\n3\n1 2 3\n''') == '''\n42\n'''\nassert solution('''\n4\n1 1 1 1\n''') == '''\n100\n'''\nassert solution('''\n4\n1 1 1 2\n''') == '''\n140\n'''\nassert solution('''\n4\n1 1 2 2\n''') == '''\n176\n'''\nassert solution('''\n4\n1 2 3 4\n''') == '''\n280\n'''\nassert solution('''\n5\n1 1 1 1 1\n''') == '''\n245\n'''\nassert solution('''\n5\n1 1 1 1 2\n''') == '''\n345\n'''\nassert solution('''\n5\n1 1 1 2 2\n''') == '''\n445\n'''\nassert solution('''\n5\n1 1 2 2 2\n''') == '''\n585\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n940\n'''\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\n462\n'''\nassert solution('''\n6\n1", "solution(\"\") == \"\"", "solution('''\n3\n1 2 3\n''') == '''\n9\n'''\nassert solution('''\n4\n1 2 3 4\n''') == '''\n30\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n58\n'''\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n288\n'''\nassert solution('''\n99999\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(stdin=\"\"\"\\\n3\n1 2 3\n\"\"\") == \"\"\"\\\n23\n\"\"\"\n\nassert solution(stdin=\"\"\"\\\n4\n2 2 2 2\n\"\"\") == \"\"\"\\\n18\n\"\"\"\n\nassert solution(stdin=\"\"\"\\\n5\n1 2 2 2 1\n\"\"\") == \"\"\"\\\n25\n\"\"\"\n\nassert solution(stdin=\"\"\"\\\n1\n1\n\"\"\") == \"\"\"\\\n1\n\"\"\"\n\nassert solution(stdin=\"\"\"\\\n4\n1 2 3 4\n\"\"\") == \"\"\"\\\n49\n\"\"\"", "solution('''\n4\n2 3 6 7\n''') == '''\n39\n'''\nassert solution('''\n5\n1 4 4 4 4\n''') == '''\n62\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n20\n'''\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n360\n'''\nassert solution('''\n100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n''') == '''\n58756083\n'''\n# print the results\nprint(solution(stdin))", "solution('''\n3\n1 2 3\n''') == '28'\n\nassert solution('''\n3\n2 3 4\n''') == '56'\n\nassert solution('''\n3\n3 4 5\n''') == '90'\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '1150'\n\nassert solution('''\n1\n1\n''') == '1'\n\nprint('done')", "solution(\"2\\n1 2\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"24\"\nassert solution(\"3\\n1 1 1\") == \"9\"\nassert solution(\"5\\n7 21 1 42 56\") == \"71926\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"33333\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"110\"\nassert solution(\"5\\n1 2 3 4 5\") == \"29\"\nassert solution(\"4\\n1 2 3 4\") == \"11\"\nassert solution(\"3\\n1 2 3\") == \"12\"\nassert solution(\"2\\n1 1\") == \"2\"\nassert solution(\"2\\n1 3\") == \"2\"\nassert solution(\"2\\n3 1\") == \"2\"\nassert solution(\"3\\n1 1 1\") == \"6\"\nassert solution(\"3\\n1 2 1\") == \"8\"\nassert solution(\"2\\n1 3\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\") == \"29\"\nassert solution(\"4\\n1 2 3 4\") == \"11\"\nassert solution(\"3\\n1 2 3\") == \"12\"\nassert solution(\"2\\n1 1\") == \"2\"\n", "solution(example_input) == example_output\nassert solution(example_input_2) == example_output_2\n\n# get the input and run the solution\ninput = stdin.read()\noutput = solution(input)\n\n# print the output\nprint(output)", "solution('''\n2\n1 1\n''') == '4'\n\nassert solution('''\n3\n1 2 3\n''') == '33'\n\nassert solution('''\n4\n12 11 12 10\n''') == '334'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '2022'\n\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '12078'\n\nassert solution('''\n7\n1 2 3 4 5 6 7\n''') == '103282'\n\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n''') == '925948'\n\nassert solution('''\n9\n1 2 3 4 5 6 7 8 9\n''') == '8362676'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '75192944'\n\nassert solution('''\n100\n2 3 4 5 6 7 8 9 10 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution('''\n3\n1 2 3\n''') == '23'\n\n# sample inputs and outputs\nsolution('''\n3\n1 2 3\n''')\n\nsolution('''\n4\n4 4 4 4\n''')\n\nsolution('''\n5\n1 2 3 4 5\n''')\n\nsolution('''\n5\n5 5 5 5 5\n''')\n\nsolution('''\n5\n5 4 3 2 1\n''')\n\nsolution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''')\n\nsolution('''\n10\n10 9 8 7 6 5 4 3 2 1\n''')\n\nsolution('''\n100000\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"14\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n100 150 13 123 12 313 13 12 13 1\n\"\"\") == \"147081\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"19834\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n1 2 1 2\n\"\"\") == \"19\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"102\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n100\nsolution('''\n3\n1 2 3\n''') == '41'\n\n'''\nhttps://www.hackerrank.com/challenges/connecting-towns/problem\n\nConnecting Towns\n\nIt is Ash\u2019s birthday today and he has received N gifts from his N friends. Being grateful for their wishes, he decides to send one gift to each of his friends on some future date.\n\nFor each valid i, the i-th gift has a beauty number A[i]. Ash wants to send the gifts such that the product of the beauty numbers of the gifts sent to any two different friends is not divisible by a prime number p. However, he can send the gifts in any order. What is the maximum number of gifts he can send?\n\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains two space-separated integers N and p.\nThe second line contains N space-separated integers A[1], A[2], \u2026, A[N].\nOutput\n\nFor each test case, print a single line containing one integer \u2015 the maximum number of gifts Ash can send.\n\nConstraints\n\n1 \u2264 T \u2264 1,000\n2 \u2264 N \u2264 10^5\n2 \u2264 p \u2264 10^9\n1 \u2264", "solution('''\n2\n2 3\n''') == '''\n11\n'''\nassert solution('''\n4\n1 1 1 1\n''') == '''\n49\n'''\nassert solution('''\n3\n1 5 7\n''') == '''\n36\n'''\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n564\n'''\nassert solution('''\n100\n6 5 2 5 1 4 7 9 8 5 4 1 8 1 7 8 5 8 8 4 6 9 3 4 4 5 8 3 6 8 7 6 5 4 3 8 6 9 7 9 5 5 1 5 3 3 3 9 4 5 1 1 4 6 1 9 2 5 5 4 2 4 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2 5 5 5 2 2 7 9 2", "solution(sample1_in) == sample1_out\n\n# testcase(sample1_in, sample1_out)\ntestcase(sample2_in, sample2_out)\ntestcase(sample3_in, sample3_out)\n\n# test the performance\nt = Timer('solution(sample1_in)', globals=globals())\nassert t.best > 2.0 / 1000\n# testcase(sample2_in, sample2_out)\n# testcase(sample3_in, sample3_out)"], "finish_reason": ["length", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "stop"], "sum_logprob": [-130.19285323080697, -158.89565900270114, -79.77085272843001, -60.32816826251998, -33.115183918099994, -75.26178808530004, -250.60370833844686, -92.79111010692002, -9.014637869700001, -636.8869638010198, -75.44105734576998, -792.8276327593201, -7.2154483649999985, -96.22719637258797, -39.93450740966997, -132.0585653652214, -13.573873283673993, -99.44828534070002, -67.21678747093995, -125.25121155590402, -189.8450484829409, -92.71204890338497, -65.35385043772001, -107.17776967530003, -79.72383235256497, -13.089044913, -48.090221906204, -155.27963248740198, -115.02461939209701, -170.0021926794019, -89.50846201013078, -83.89543817216202, -207.88011562617126, -49.11082185334001, -74.55162886183999, -225.59828224999302, -69.75023028267574, -5.590004166, -55.65384966948999, -56.69251444363302, -95.51118849540097, -50.61741641986401, -145.0456987451038, -33.35804411243001, -130.16817763717998, -56.71837378800599, -127.88144573736993, -117.57742284777005, -228.63886187315399, -84.813507620716], "mean_logprob": [-0.43397617743602335, -0.52965219667567, -0.2659028424281, -0.6350333501317895, -0.6132441466314815, -0.250872626951, -0.8353456944614893, -0.773259250891, -0.33387547665555556, -2.1229565460034, -0.5202831541087586, -2.6427587758644, -0.801716485, -0.32075732124196, -0.4116959526770103, -0.440195217884071, -0.09765376463074821, -0.5073892109219388, -0.4308768427624359, -1.1928686814848, -0.63281682827647, -0.30904016301128334, -0.3532640564201081, -0.357259232251, -0.7893448747778713, -0.5690889092608695, -0.16030073968734668, -0.5175987749580067, -0.6887701760005809, -0.5666739755980067, -0.29836154003376936, -0.7990041730682095, -0.692933718753905, -0.16370273951113334, -0.6012228134019355, -0.7519942741666433, -0.232500767608919, -0.931667361, -0.18551283223163334, -0.43609626495102305, -0.39796328539750414, -0.48207063257013333, -0.48348566248368, -0.529492763689365, -0.4338939254572667, -0.18906124596002, -0.4262714857912333, -0.3919247428259, -0.76212953957718, -0.6731230763548889]}
{"prompt": "'''\nMr. Chanek has an integer represented by a string s. Zero or more digits have been erased and are denoted by the character _. There are also zero or more digits marked by the character X, meaning they're the same digit.\n\nMr. Chanek wants to count the number of possible integer s, where s is divisible by 25. Of course, s must not contain any leading zero. He can replace the character _ with any digit. He can also replace the character X with any digit, but it must be the same for every character X.\n\nAs a note, a leading zero is any 0 digit that comes before the first nonzero digit in a number string in positional notation. For example, 0025 has two leading zeroes. An exception is the integer zero, (0 has no leading zero, but 0000 has three leading zeroes).\n\nInput\n\nOne line containing the string s (1 \u2264 |s| \u2264 8). The string s consists of the characters 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, _, and X.\n\nOutput\n\nOutput an integer denoting the number of possible integer s.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(test_data) == result\n\nprint(solution(data))", "solution(\"\") == \"\", \"Wrong answer for input: {}\".format(\"\")\n\n# print the result\nwith open(\"OUTPUT.txt\", \"w\") as f:\n    f.write(solution(open(\"INPUT.txt\", \"r\").read()))", "solution(stdin='4655') == '1'\nassert solution(stdin='4_5_') == '0'\nassert solution(stdin='X') == '1'\nassert solution(stdin='XX') == '10'\nassert solution(stdin='XXX') == '100'\nassert solution(stdin='XXXX') == '1000'\nassert solution(stdin='XXXXX') == '10000'\nassert solution(stdin='XXXXXX') == '100000'\nassert solution(stdin='XXXXXXX') == '1000000'\nassert solution(stdin='XXXXXXXX') == '10000000'\nassert solution(stdin='5___5') == '2'\nassert solution(stdin='X__X') == '10'\nassert solution(stdin='5_5_5') == '0'\nassert solution(stdin='_0_') == '0'\nassert solution(stdin='_6_') == '4'\nassert solution(stdin='_X_') == '30'\nassert solution(stdin='_XX') == '300'\nassert solution(stdin='_XXX') == '3000'\nassert solution(stdin='_XXXX') == '30000'\nassert solution(stdin='_XXXXX') == '300000'\nassert solution(stdin='_XXXXXX", "solution(\"A-small-practice.in\") == \"A-small-practice.out\"\nassert solution(\"A-large-practice.in\") == \"A-large-practice.out\"", "solution(\"1_2_\") == \"5\"\nassert solution(\"5X5X5X5X\") == \"1\"\nassert solution(\"______\") == \"100000\"\nassert solution(\"_XX_\") == \"100\"\nassert solution(\"_0X_\") == \"75\"\nassert solution(\"_____00\") == \"50000\"\nassert solution(\"___00_X\") == \"50000\"\nassert solution(\"_0_\") == \"100\"\nassert solution(\"_000_\") == \"100000\"\nassert solution(\"_0XX\") == \"50\"\nassert solution(\"__0_\") == \"500\"\nassert solution(\"_X_\") == \"400\"\nassert solution(\"_X\") == \"200\"\nassert solution(\"_XX\") == \"50\"\nassert solution(\"_0X\") == \"75\"\nassert solution(\"_0_\") == \"100\"\nassert solution(\"__0\") == \"500\"\nassert solution(\"X_\") == \"200\"\nassert solution(\"XX\") == \"50\"\nassert solution(\"0X\") == \"75\"\nassert solution(\"0_\") == \"100\"\nassert solution(\"__\") == \"500\"\nassert solution(\"_\") == \"400\"\nassert solution(\"X\") == \"200\"\nassert solution(\"0\") == \"100\"\nassert solution(\"\") == \"100\"", "solution(\"__\") == \"9\"\nassert solution(\"2_\") == \"3\"\nassert solution(\"1X_\") == \"8\"\nassert solution(\"XXXX\") == \"9\"\nassert solution(\"5_5\") == \"1\"\nassert solution(\"5_5_\") == \"4\"\nassert solution(\"___X\") == \"25\"\nassert solution(\"X5_5\") == \"5\"\nassert solution(\"5_5X\") == \"5\"\nassert solution(\"XX5_\") == \"3\"\nassert solution(\"_5_5\") == \"4\"\nassert solution(\"X___\") == \"25\"\nassert solution(\"XX__\") == \"20\"\nassert solution(\"_XX_\") == \"20\"\nassert solution(\"__XX\") == \"20\"\nassert solution(\"_5_5_\") == \"20\"\nassert solution(\"_5XX_\") == \"10\"\nassert solution(\"X_5_5\") == \"10\"\nassert solution(\"XX_5_\") == \"10\"\nassert solution(\"X_X_X\") == \"25\"\nassert solution(\"_XX_X\") == \"25\"\nassert solution(\"X_XX_\") == \"25\"\nassert solution(\"XX_X_\") == \"25\"\nassert solution(\"5_5_5\") == \"0\"\nassert solution(\"5_", "solution(str) == str, 'Unexpected result'\n\n# tests\n# 1\nstdin = '_2X_X25'\nassert solution(stdin) == '3', 'Unexpected result'\n# 2\nstdin = '25_X'\nassert solution(stdin) == '14', 'Unexpected result'\n# 3\nstdin = '3_X_X7'\nassert solution(stdin) == '4', 'Unexpected result'\n# 4\nstdin = '25_X_X'\nassert solution(stdin) == '14', 'Unexpected result'\n# 5\nstdin = '1_X25'\nassert solution(stdin) == '10', 'Unexpected result'\n# 6\nstdin = '_X_X'\nassert solution(stdin) == '2', 'Unexpected result'\n# 7\nstdin = '2_X5'\nassert solution(stdin) == '8', 'Unexpected result'\n# 8\nstdin = '_X25'\nassert solution(stdin) == '13', 'Unexpected result'\n# 9\nstdin = '5_X25'\nassert solution(stdin) == '5', 'Unexpected result'\n# 10\nstdin = '25_X1'\nassert solution(stdin)", "solution('''3X_2X_X''') == '1'\nassert solution('''_''') == '10'\nassert solution('''X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9X9", "solution(\"_25\") == 1\nassert solution(\"10_\") == 2\nassert solution(\"X01\") == 2\nassert solution(\"X0_\") == 9\nassert solution(\"_5_\") == 25\nassert solution(\"XX_\") == 25\nassert solution(\"0X_\") == 10\nassert solution(\"_0_\") == 100\nassert solution(\"XX1\") == 100\nassert solution(\"01X\") == 100\nassert solution(\"_XX\") == 100\nassert solution(\"1XX\") == 100\nassert solution(\"X1X\") == 100\nassert solution(\"XX1\") == 100\nassert solution(\"_2X\") == 50\nassert solution(\"_22\") == 50\nassert solution(\"2_2\") == 50\nassert solution(\"22_\") == 50\nassert solution(\"0XX\") == 100\nassert solution(\"X0X\") == 100\nassert solution(\"XX0\") == 100\nassert solution(\"__X\") == 100\nassert solution(\"_X_\") == 100\nassert solution(\"X__\") == 100\nassert solution(\"_XX1\") == 100\nassert solution(\"_2XX\") == 50\nassert solution(\"_2X0\") == 50\nassert solution(\"_225\") == 50\nassert solution(\"_22_\") == 50\nassert solution(\"_0X_\") == 10\nassert solution(\"_0XX\") == 10\nassert solution(\"_0", "solution(\"5__5\") == \"5\"\nassert solution(\"5_5\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"5_0\") == \"0\"\nassert solution(\"____\") == \"100000\"\nassert solution(\"________\") == \"100000000000000000000000000000\"\nassert solution(\"0__0_0_0\") == \"0\"\nassert solution(\"25_2X_XX\") == \"85\"\nassert solution(\"25_2XX_XX\") == \"100\"\nassert solution(\"25_2X_X\") == \"0\"\nassert solution(\"25_2XX_X\") == \"0\"\nassert solution(\"25X_X\") == \"0\"\nassert solution(\"2_5X_X\") == \"0\"\nassert solution(\"2X_5X_X\") == \"0\"\nassert solution(\"2_5_X\") == \"0\"\nassert solution(\"2X_5_X\") == \"0\"\nassert solution(\"1_5X_X\") == \"11\"\nassert solution(\"2_5XX_X\") == \"100\"\nassert solution(\"2X_5XX_X\") == \"100\"\nassert solution(\"1_5_X\") == \"1\"\nassert solution(\"2X_5_X\") == \"0\"\nassert solution(\"2XX_5", "solution(\n'''\n25X_\n'''\n) == '2'\n\nassert solution(\n'''\n5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5", "solution(\"75_5\") == \"1\"\nassert solution(\"5_5_5\") == \"1\"\nassert solution(\"5X5X5\") == \"1\"\nassert solution(\"5_5X5\") == \"2\"\nassert solution(\"5X5_5\") == \"2\"\nassert solution(\"5_5_5\") == \"1\"\nassert solution(\"5_XX5\") == \"3\"\nassert solution(\"_5X55\") == \"2\"\nassert solution(\"55XX_\") == \"3\"\nassert solution(\"_55X_\") == \"3\"\nassert solution(\"55_XX\") == \"3\"\nassert solution(\"55X_X\") == \"3\"\nassert solution(\"_55XX\") == \"3\"\nassert solution(\"_5X_X\") == \"3\"\nassert solution(\"_5X5_\") == \"2\"\nassert solution(\"5_5XX\") == \"2\"\nassert solution(\"5_5X_\") == \"2\"\nassert solution(\"5XX5_\") == \"2\"\nassert solution(\"5XX_5\") == \"2\"\nassert solution(\"5X_X5\") == \"2\"\nassert solution(\"5X_5X\") == \"2\"\nassert solution(\"5X5_X\") == \"2\"\nassert solution(\"5X5X_", "solution('''25_X''') == \"2\"\nassert solution('''25_XX''') == \"4\"\nassert solution('''25_XXXX''') == \"16\"\nassert solution('''25_XXXXXX''') == \"64\"\nassert solution('''25_XXXXXXX''') == \"256\"\nassert solution('''25_XXXXXXXX''') == \"1024\"\nassert solution('''25_XXXXXXXXX''') == \"4096\"\nassert solution('''25_XXXXXXXXXX''') == \"16384\"\nassert solution('''25_XXXXXXXXXXX''') == \"65536\"\nassert solution('''_XXXXXXXXXXX''') == \"3600000\"\nassert solution('''0_XXXXXXXXX''') == \"0\"\nassert solution('''_XXXXXXXXX''') == \"3600000\"\nassert solution('''__XXXXXXXX''') == \"900000\"\nassert solution('''___XXXXXXX''') == \"216000\"\nassert solution('''____XXXXXX''') == \"54000\"\nassert solution('''_____XXXXX''') == \"13500\"\nassert solution('''______XXXX''') == \"3375\"\nassert solution('''_______XXX''') == \"843\"\nassert solution('''________XX''')", "solution(\"0123456789_\") == \"10\"\nassert solution(\"_0123456789_\") == \"30\"\nassert solution(\"02XX456789_\") == \"1\"\nassert solution(\"XX00XX0000XX\") == \"9\"\nassert solution(\"0X_0__0\") == \"8\"\nassert solution(\"0X_0__05\") == \"8\"\nassert solution(\"0X_0__056\") == \"8\"\nassert solution(\"0X_0__056_\") == \"8\"\nassert solution(\"5X_0__056_\") == \"8\"\nassert solution(\"5X_0__056_5\") == \"8\"\nassert solution(\"5X_0__056_5_\") == \"8\"\nassert solution(\"5X_0__056_5_0\") == \"0\"\nassert solution(\"5X_0__056_5_0X\") == \"8\"\nassert solution(\"5X_0__056_5_0XX\") == \"8\"\nassert solution(\"5X_0__056_5_0XX0\") == \"8\"\nassert solution(\"5X_0__056_5_0XX0X\") == \"8\"\nassert solution(\"5X_0__056_5_0XX0X", "solution(\"\") == \"\", \"Empty string\"\nassert solution(\"X\") == \"10\", \"Single X\"\nassert solution(\"XX\") == \"100\", \"Two Xs\"\nassert solution(\"X_\") == \"25\", \"X_\"\nassert solution(\"_\") == \"10\", \"Single _\"\nassert solution(\"_X\") == \"5\", \"_X\"\nassert solution(\"___\") == \"100\", \"Three _s\"\nassert solution(\"25\") == \"1\", \"Number\"\nassert solution(\"5_\") == \"10\", \"5_\"\nassert solution(\"0_\") == \"25\", \"0_\"\nassert solution(\"1_\") == \"25\", \"1_\"\nassert solution(\"2_\") == \"25\", \"2_\"\nassert solution(\"3_\") == \"25\", \"3_\"\nassert solution(\"4_\") == \"25\", \"4_\"\nassert solution(\"X25\") == \"0\", \"X25\"\nassert solution(\"XX2_\") == \"0\", \"XX2_\"\nassert solution(\"X1X2_\") == \"0\", \"X1X2_\"\nassert solution(\"1_1\") == \"25\", \"1_1\"\nassert solution(\"2_2\") == \"25\", \"2_2\"\nassert solution(\"3_3\") == \"25\", \"", "solution(\"6__XXX\") == \"2\"\nassert solution(\"6__X4X\") == \"1\"\nassert solution(\"__5___\") == \"0\"\nassert solution(\"_5_XX__\") == \"1\"\nassert solution(\"_5_X2X__\") == \"2\"\nassert solution(\"_5_X2X1_\") == \"1\"\nassert solution(\"_5_X2X15\") == \"2\"\nassert solution(\"___5___\") == \"0\"\nassert solution(\"XXX5___\") == \"0\"\nassert solution(\"__5XXX\") == \"0\"\nassert solution(\"_5XX_X\") == \"0\"\nassert solution(\"_5X2_X\") == \"0\"\nassert solution(\"_5X2_\") == \"0\"\nassert solution(\"_5X2X4\") == \"0\"\nassert solution(\"_5X2X45\") == \"0\"\nassert solution(\"X__X\") == \"0\"\nassert solution(\"X6_X\") == \"0\"\nassert solution(\"X__X4\") == \"0\"\nassert solution(\"___\") == \"0\"\nassert solution(\"XXX\") == \"0\"\nassert solution(\"_X\") == \"0\"\nassert solution(\"_X1\") == \"0\"\nassert solution(\"_X15\") == \"0", "solution('''\n_0XX00\n''') == '''\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n_0XX0\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n_\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n_0_\n''') == '''\n100\n'''\n\n# check the correctness of solution\nassert solution('''\n_00\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n_0X\n''') == '''\n20\n'''\n\n# check the correctness of solution\nassert solution('''\n_00X\n''') == '''\n20\n'''\n\n# check the correctness of solution\nassert solution('''\n_0XX\n''') == '''\n20\n'''\n\n# check the correctness of solution\nassert solution('''\n_00XX\n''') == '''\n20\n'''\n\n# check the correctness of solution\nassert solution('''\n_00000\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n_0000X\n''') ==", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution('''\n_\n''') == '''\n'''\n\nassert solution('''\n2_\n''') == '''\n'''\n\nassert solution('''\n5_5\n''') == '''\n'''\n\nassert solution('''\n5X5\n''') == '''\n'''\n\nassert solution('''\n0_0\n''') == '''\n'''\n\nassert solution('''\n0X0\n''') == '''\n'''\n\nassert solution('''\n25_\n''') == '''\n'''\n\nassert solution('''\n25X\n''') == '''\n'''\n\nassert solution('''\nX25\n''') == '''\n'''\n\nassert solution('''\n2_25\n''') == '''\n'''\n\nassert solution('''\n2X25\n''') == '''\n'''\n\nassert solution('''\n2X2X\n''') == '''\n'''\n\nassert solution('''\n2X2_\n''') == '''\n'''\n\nassert solution('''\n_0_\n''') == '''\n'''\n\nassert solution('''\n_0X\n''') == '''\n'''\n\nassert solution('''", "solution(\"2__7\") == \"2\"\nassert solution(\"1__1\") == \"0\"\nassert solution(\"25_0\") == \"2\"\nassert solution(\"2_25\") == \"2\"\nassert solution(\"_3_X\") == \"0\"\nassert solution(\"0_25\") == \"3\"\nassert solution(\"0_0_\") == \"2\"\nassert solution(\"2_5X\") == \"1\"\nassert solution(\"_5__\") == \"1\"\nassert solution(\"_5_5\") == \"0\"\nassert solution(\"_4_4\") == \"0\"\nassert solution(\"2_50\") == \"2\"\nassert solution(\"X_X_\") == \"0\"\nassert solution(\"_X_X\") == \"0\"\nassert solution(\"XX_X\") == \"1\"\nassert solution(\"_0XX\") == \"0\"\nassert solution(\"0XXX\") == \"1\"\nassert solution(\"00XX\") == \"1\"\nassert solution(\"XXX_\") == \"0\"\nassert solution(\"_00X\") == \"1\"\nassert solution(\"X0_X\") == \"1\"\nassert solution(\"0_XX\") == \"1\"\nassert solution(\"5_5X\") == \"1\"\nassert solution(\"X5_5\") == \"1\"\nassert solution(\"5X5", "solution(\"X5X5X5X5\") == \"1\"\nassert solution(\"2_5\") == \"2\"\nassert solution(\"\") == \"0\"\nassert solution(\"0__0\") == \"0\"\nassert solution(\"1__\") == \"0\"\nassert solution(\"5___5X5X5X5\") == \"0\"\nassert solution(\"25__5_2_5\") == \"14\"\nassert solution(\"5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5", "solution(solution_i, solution_o)\n\n# test the performance of solution\nprint(f'testing the performance of {solution.__name__}...')\n\nfrom utils import run_test\ni, o = '1', '1'\nassert solution(i) == o\n\ni, o = '5', '0'\nassert solution(i) == o\n\ni, o = '25', '5'\nassert solution(i) == o\n\ni, o = '251', '0'\nassert solution(i) == o\n\ni, o = '52', '0'\nassert solution(i) == o\n\ni, o = '2501', '0'\nassert solution(i) == o\n\ni, o = '250', '1'\nassert solution(i) == o\n\ni, o = '257', '1'\nassert solution(i) == o\n\ni, o = '259', '1'\nassert solution(i) == o\n\ni, o = '265', '2'\nassert solution(i) == o\n\ni, o = '525', '1'\nassert solution(i) == o\n\ni, o = '5X5', '1'\nassert solution(i) == o\n\ni, o = '5_5',", "solution('''''') == ''''\nassert solution('''3+5''') == '''8'''\nassert solution('''3 X+X''') == '''16'''\nassert solution('''3__+__5''') == '''875'''\nassert solution('''X___+X_X''') == '''1250'''\nassert solution('''__0+__0''') == '''200'''\nassert solution('''0X00+0X00''') == '''300'''\nassert solution('''3_X+_X_''') == '''150'''\nassert solution('''_0_0+00_''') == '''600'''\nassert solution('''0XX0+_XX0''') == '''850'''\nassert solution('''3_X+_X_''') == '''150'''\nassert solution('''0XXX+XXX0''') == '''1550'''\nassert solution('''3_X+_X_''') == '''150'''\nassert solution('''_5_5+5__''') == '''375'''\nassert solution('''_5_5+5__''') == '''375'''\nassert solution('''5_", "solution(\"5_\") == \"2\"\nassert solution(\"7__\") == \"5\"\nassert solution(\"5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X", "solution('''\n123__2X\n''') == '''\n8\n'''\n\n# stress testing\ns = string.digits + '_X'\ntest_cases = [''.join(random.choices(s, k=random.randint(1,10))) for i in range(100)]\ntest_cases.append('25')\ntest_cases.append('9X9X9X_')\ntest_cases.append('_0')\ntest_cases.append('_')\n\nfor test_case in test_cases:\n    result = solution(test_case)\n    print(result)", "solution('''\n''') == '''\n'''\n\n# real input\nprint(solution('''\n'''))", "solution('''\n25\n''') == '''\n2\n'''\n\nassert solution('''\n0_\n''') == '''\n7\n'''\n\nassert solution('''\n1_0X00\n''') == '''\n1\n'''\n\nassert solution('''\nX_X_X\n''') == '''\n8\n'''\n\nassert solution('''\n__\n''') == '''\n72\n'''\n\nassert solution('''\n0\n''') == '''\n0\n'''\n\nassert solution('''\n1X0X\n''') == '''\n0\n'''\n\nassert solution('''\n_\n''') == '''\n10\n'''\n\nassert solution('''\n__X\n''') == '''\n40\n'''\n\nassert solution('''\nX_X\n''') == '''\n10\n'''\n\nassert solution('''\n__0\n''') == '''\n36\n'''\n\nassert solution('''\n_XX\n''') == '''\n20\n'''\n\nassert solution('''\nX_X_\n''') == '''\n20\n'''\n\nassert solution('''\n_0X0\n''') == '''\n6\n'''", "solution('''''') == ''''\nassert solution('''125X__''') == '''6'''\nassert solution('''125__''') == '''1'''\nassert solution('''X_''') == '''0'''\nassert solution('''125X_X''') == '''20'''\nassert solution('''3__3''') == '''2'''\nassert solution('''3_3_3''') == '''7'''\nassert solution('''3_3_4''') == '''4'''\nassert solution('''_1X1__X''') == '''2'''\nassert solution('''__X____''') == '''3'''\nassert solution('''_5X5__5''') == '''4'''\nassert solution('''__5X5__''') == '''6'''\nassert solution('''5_5_5_''') == '''8'''\nassert solution('''1_X__X_''') == '''6'''\nassert solution('''1_X__X1''') == '''6'''\nassert solution('''X_X_X_X''') == '''10'''\nassert solution('''__X_X__", "str(solution('''__X5''')) == '25'\nassert str(solution('''0_4''')) == '4'\nassert str(solution('''0__''')) == '100'\nassert str(solution('''XX5''')) == '5'\nassert str(solution('''__5''')) == '200'\nassert str(solution('''XX1''')) == '25'\nassert str(solution('''0XX''')) == '25'\nassert str(solution('''X1X''')) == '20'\nassert str(solution('''X__''')) == '200'\nassert str(solution('''XX_''')) == '10'\nassert str(solution('''0X_''')) == '25'\nassert str(solution('''1XX''')) == '25'\nassert str(solution('''X_X''')) == '20'\nassert str(solution('''_XX''')) == '10'\nassert str(solution('''X_5''')) == '5'\nassert str(solution('''_X5''')) == '5'\nassert str(solution(", "solution(\"_0_\") == \"10\"\nassert solution(\"000X00X0\") == \"8\"\nassert solution(\"XXXXXXXXX\") == \"1\"\nassert solution(\"_XXXX__XX\") == \"0\"\nassert solution(\"_XXXXX_X_\") == \"0\"\nassert solution(\"_XXXX_XX\") == \"25\"\nassert solution(\"XXX_XXXX_\") == \"0\"\nassert solution(\"_XXX__XXX\") == \"0\"\nassert solution(\"_XXX_XX__\") == \"0\"\nassert solution(\"__X_X_XX_\") == \"100\"\nassert solution(\"__X_X_X__\") == \"100\"\nassert solution(\"__X_X_X_X\") == \"0\"\nassert solution(\"0_XX_XX__\") == \"0\"\nassert solution(\"0X_X_X__\") == \"0\"\nassert solution(\"0_X_X_X__\") == \"0\"\nassert solution(\"X_X_X__\") == \"0\"\nassert solution(\"XXXX_X__\") == \"0\"\nassert solution(\"_X_X_X_X\") == \"125\"\nassert solution(\"_X_X_X__\") == \"125\"\nassert solution(\"_X_X_X_X\") == \"125\"\nassert solution(\"_X_X", "solution('''00X5''') == '2'\nassert solution('''X024X5X''') == '0'\nassert solution('''_0XX_''') == '0'\nassert solution('''3_5X95X3_''') == '2'\nassert solution('''_325___XX_____''') == '0'\nassert solution('''__X4_X__X4X4__''') == '0'\nassert solution('''__X01X_X01X0X_''') == '0'\nassert solution('''___X_3_5_6_2_6__X''') == '0'\nassert solution('''___5__X_X_X_X_X__''') == '0'\nassert solution('''__X_X_X_X_X_X_X_X__''') == '0'\nassert solution('''__X23X4X__X_X4_X21''') == '0'\nassert solution('''__X_______X_X_X_X_''') == '0'\nassert solution('''_X_X_X_X_X_X_X_X_X_''') == '0'\nassert solution('''_X3_5", "solution(\"10_X\") == \"0\"\nassert solution(\"X___\") == \"10\"\nassert solution(\"_25\") == \"1\"\nassert solution(\"3_X2_X\") == \"9\"\nassert solution(\"1_0_0\") == \"7\"\nassert solution(\"30_X\") == \"0\"\nassert solution(\"X_X0\") == \"0\"\nassert solution(\"__5\") == \"2\"\nassert solution(\"2_0\") == \"1\"\nassert solution(\"7_5_\") == \"1\"\nassert solution(\"_5__\") == \"20\"\nassert solution(\"1_X0\") == \"0\"\nassert solution(\"5_5_\") == \"2\"\nassert solution(\"XX_X\") == \"0\"\nassert solution(\"X_0_\") == \"10\"\nassert solution(\"_0_0\") == \"10\"\nassert solution(\"10X0\") == \"0\"\nassert solution(\"2_50\") == \"1\"\nassert solution(\"1_00\") == \"1\"\nassert solution(\"10X_\") == \"0\"\nassert solution(\"0_00\") == \"1\"\nassert solution(\"_00_\") == \"10\"\nassert solution(\"_0_X\") == \"10\"\nassert solution(\"_0XX\") == \"0\"\nassert solution(\"X", "solution('''\n''') == '''\n'''\n\n# test solutions\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') ==", "solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"13_X02\") == 2\nassert solution(\"X4_7_0\") == 60\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert solution(\"1_0X00\") == 31\nassert", "solution('''25\n''') == '''1\n'''\nassert solution('''5__\n''') == '''5\n'''\nassert solution('''5X5\n''') == '''1\n'''\nassert solution('''05X5\n''') == '''0\n'''\nassert solution('''05XX5\n''') == '''0\n'''\nassert solution('''1___00_0\n''') == '''310\n'''\nassert solution('''_XXXXXXX_\n''') == '''0\n'''\nassert solution('''0X00X0XX0\n''') == '''6\n'''\nassert solution('''123456789\n''') == '''0\n'''\nassert solution('''1__2__3__\n''') == '''63\n'''\nassert solution('''X____X___\n''') == '''0\n'''\nassert solution('''_X_X_X_X_\n''') == '''125\n'''\nassert solution('''XXXXXXXXX\n''') == '''1\n'''\nassert solution('''5X5_5XX5_\n''') == '''0\n'''\nassert solution('''5X55X55X5\n''')", "solution(\"X\") == \"10\"\nassert solution(\"1_\") == \"81\"\nassert solution(\"__\") == \"100\"\nassert solution(\"X_\") == \"180\"\nassert solution(\"_X\") == \"180\"\nassert solution(\"XX\") == \"275\"\nassert solution(\"_X_\") == \"500\"\nassert solution(\"_XX\") == \"500\"\nassert solution(\"X_X\") == \"500\"\nassert solution(\"X__\") == \"500\"\nassert solution(\"_XXX\") == \"2500\"\nassert solution(\"XX_X\") == \"2500\"\nassert solution(\"XX__\") == \"2500\"\nassert solution(\"XX_XX\") == \"7500\"\nassert solution(\"_XX_X\") == \"7500\"\nassert solution(\"_XX__\") == \"7500\"\nassert solution(\"_XX_XX\") == \"12500\"\nassert solution(\"XX_XX_\") == \"62500\"\nassert solution(\"X__XX_\") == \"62500\"\nassert solution(\"X_XX_X\") == \"62500\"\nassert solution(\"X_XX__\") == \"62500\"\nassert solution(\"X_XX_XX\") == \"187500\"\nassert solution(\"X_XX_XXX\") == \"312500\"\nassert solution(\"XX_XX_XX\") == \"312500\"\nassert", "'1' == solution('25_')\nassert '3' == solution('2X5_')\nassert '5' == solution('2_5_')\nassert '2' == solution('2_0_')\nassert '7' == solution('X_X_')\nassert '0' == solution('2_25')\nassert '0' == solution('05_')\nassert '1' == solution('0_5')\nassert '0' == solution('5_0')\nassert '0' == solution('5__0')\nassert '1' == solution('5_00')\nassert '0' == solution('_2_25')\nassert '0' == solution('_0__5')\nassert '0' == solution('_25_')\nassert '0' == solution('_2_2_')\nassert '0' == solution('_2_0_')\nassert '0' == solution('_2_1_')\nassert '0' == solution('_3_0_')\nassert '0' == solution('_4_0_')\nassert '0' == solution('_X_X_')\nassert '0' == solution('_X_25')\nassert '0' == solution('_X_5_')\nassert '0' == solution('_5_5_')\nassert '0'", "solution(\"_\") == \"10\"\nassert solution(\"0__\") == \"30\"\nassert solution(\"__\") == \"90\"\nassert solution(\"X\") == \"0\"\nassert solution(\"X0_\") == \"0\"\nassert solution(\"0__0\") == \"20\"\nassert solution(\"0_0_0\") == \"80\"\nassert solution(\"0_0__\") == \"110\"\nassert solution(\"0X_00\") == \"10\"\nassert solution(\"00_00\") == \"40\"\nassert solution(\"00_0_\") == \"110\"\nassert solution(\"00_X0\") == \"0\"\nassert solution(\"__00_\") == \"180\"\nassert solution(\"X0X0X\") == \"0\"\nassert solution(\"X0_00\") == \"0\"\nassert solution(\"00_0X\") == \"0\"\nassert solution(\"__X00\") == \"0\"\nassert solution(\"00X_0\") == \"0\"\nassert solution(\"00_X_\") == \"0\"\nassert solution(\"X00_0\") == \"0\"\nassert solution(\"00X__\") == \"0\"\nassert solution(\"_0X0_\") == \"0\"\nassert solution(\"0_0X_\") == \"0\"\nassert solution(\"0X00_\") == \"0\"\nassert solution", "solution(stdin='2___') == '97'\nassert solution(stdin='_0_5') == '87'\nassert solution(stdin='_0_4') == '79'\nassert solution(stdin='_0_2') == '79'\nassert solution(stdin='_0_1') == '79'\nassert solution(stdin='_0_0') == '79'\nassert solution(stdin='_100') == '65'\nassert solution(stdin='_200') == '65'\nassert solution(stdin='_300') == '65'\nassert solution(stdin='_400') == '65'\nassert solution(stdin='_500') == '65'\nassert solution(stdin='_600') == '65'\nassert solution(stdin='_700') == '65'\nassert solution(stdin='_800') == '65'\nassert solution(stdin='_900') == '65'\nassert solution(stdin='_0X0') == '25'\nassert solution(stdin='_0XX') == '25'\nassert solution(stdin='_X0X') == '25'\nassert solution(stdin='_XXX') == '25'\nassert solution(stdin='_0XX') == '25'\nassert solution(stdin", "solution('''25X''') == '2'\nassert solution('''25_''') == '17'\nassert solution('''_5_''') == '102'\nassert solution('''XX''') == '0'\nassert solution('''6_0''') == '3'\nassert solution('''X__X''') == '0'\nassert solution('''5_5_''') == '60'\nassert solution('''25X5X5X5X''') == '0'\nassert solution('''5__5_5''') == '300'\nassert solution('''__5_5_''') == '800'\nassert solution('''_5__5_''') == '700'\nassert solution('''_5_5__''') == '600'\nassert solution('''5_5__5''') == '100'\nassert solution('''5__5_5''') == '300'\nassert solution('''5___5_''') == '400'\nassert solution('''5_5_5__''') == '500'\nassert solution('''5_5___5''') == '200'\nassert solution('''5__5_5''') == '300'\nassert solution('''5___5_", "solution(\"5\") == \"1\"\nassert solution(\"5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X5X", "solution('''example''') == '''example'''\n# let's try to create some random test cases\nimport random\nfrom itertools import product\n\n\ndef _tcs():\n    for _ in range(100):\n        word = ''\n        for _ in range(random.randint(1, 10)):\n            word += random.choice(list('_X0123456789'))\n        yield word\n# check random test cases\nfor _ in range(1000):\n    if not solution(random.choice(_tcs())) == \"\":\n        print(\"Wrong answer!\")\n    else:\n        print(\"Correct\")\n \n# add your own test cases here\nassert solution('''_5XX5''') == '''10'''\nassert solution('''_5X5''') == '''10'''\nassert solution('''_55''') == '''10'''\nassert solution('''XX''') == '''25'''\nassert solution('''_''') == '''10'''\nassert solution('''_X_X''') == '''1'''\nassert solution('''XXXXXXXX''') == '''1'''\nassert solution('''_XXXXXXX''') == '''10'''\nassert solution('''XXXXXXXXX''') ==", "solution(\"\") == \"\", \"Empty string\"\nassert solution(\"25\") == \"1\", \"25\"\nassert solution(\"5\") == \"1\", \"5\"\nassert solution(\"X5\") == \"1\", \"X5\"\nassert solution(\"5XX\") == \"0\", \"5XX\"\nassert solution(\"X5X\") == \"0\", \"X5X\"\nassert solution(\"25X\") == \"1\", \"25X\"\nassert solution(\"X25\") == \"1\", \"X25\"\nassert solution(\"5X5\") == \"1\", \"5X5\"\nassert solution(\"X25X\") == \"1\", \"X25X\"\nassert solution(\"25_\") == \"1\", \"25_\"\nassert solution(\"X25X\") == \"1\", \"X25X\"\nassert solution(\"25__\") == \"4\", \"25__\"\nassert solution(\"X25X_\") == \"0\", \"X25X_\"\nassert solution(\"25__X\") == \"1\", \"25__X\"\nassert solution(\"X25X_X\") == \"0\", \"X25X_X\"\nassert solution(\"25__XX\") == \"1\", \"25__XX\"\nassert solution(\"X25X_XX\") == \"0\", \"X25X_XX\"\nassert solution(\"25__XX5\") == \"", "solution(\"25_\") == \"2\"\nassert solution(\"25X\") == \"1\"\nassert solution(\"2_5\") == \"2\"\nassert solution(\"2X5\") == \"2\"\nassert solution(\"X_X\") == \"100\"\nassert solution(\"XXX\") == \"1\"\nassert solution(\"___\") == \"10000\"\nassert solution(\"X__\") == \"400\"\nassert solution(\"__X\") == \"400\"\nassert solution(\"_X_\") == \"400\"\nassert solution(\"_XX\") == \"160\"\nassert solution(\"X_X\") == \"100\"\nassert solution(\"XX_\") == \"100\"\nassert solution(\"X1X\") == \"10\"\nassert solution(\"1_1\") == \"20\"\nassert solution(\"2_2\") == \"20\"\nassert solution(\"3_3\") == \"20\"\nassert solution(\"4_4\") == \"20\"\nassert solution(\"5_5\") == \"20\"\nassert solution(\"6_6\") == \"20\"\nassert solution(\"7_7\") == \"20\"\nassert solution(\"8_8\") == \"20\"\nassert solution(\"9_9\") == \"20\"\nassert solution(\"2__\") == \"400\"\nassert solution(\"X1_\") == \"40\"\nassert solution(\"X_1\") == \"40\"\n", "solution('''\n0__0_0X0\n''') == '''\n0\n'''\n\nassert solution('''\nXXXX\n''') == '''\n0\n'''\n\nassert solution('''\n0XX0_0_0\n''') == '''\n0\n'''\n\nassert solution('''\n0XX0_X0_\n''') == '''\n2\n'''\n\nassert solution('''\n1234\n''') == '''\n0\n'''\n\nassert solution('''\n25__\n''') == '''\n10\n'''\n\nassert solution('''\nX_X_X\n''') == '''\n2\n'''\n\nassert solution('''\n1_000_000\n''') == '''\n0\n'''\n\nassert solution('''\n1_XXX_XXX\n''') == '''\n1\n'''\n\nassert solution('''\nXXXX_XXXX\n''') == '''\n10\n'''\n\nassert solution('''\nX_X_X_X_X\n''') == '''\n5\n'''\n\nassert solution('''\n0XX00_X0X0\n''') == '''\n1\n'''\n\nassert solution('''\n0_00_0000\n", "solution(\"____\") == \"10\"\nassert solution(\"X___\") == \"2\"\nassert solution(\"__X_\") == \"2\"\nassert solution(\"___X\") == \"2\"\nassert solution(\"X_X_\") == \"1\"\nassert solution(\"XX__\") == \"1\"\nassert solution(\"XXXX\") == \"1\"\nassert solution(\"_X_X\") == \"2\"\nassert solution(\"_XX_\") == \"2\"\nassert solution(\"_XX0\") == \"0\"\nassert solution(\"_XX5\") == \"1\"\nassert solution(\"_X25\") == \"2\"\nassert solution(\"__5X\") == \"2\"\nassert solution(\"0123\") == \"0\"\nassert solution(\"0_23\") == \"1\"\nassert solution(\"0X23\") == \"1\"\nassert solution(\"0_05\") == \"2\"\nassert solution(\"0_2X\") == \"1\"\nassert solution(\"0X25\") == \"1\"\nassert solution(\"0025\") == \"1\"\nassert solution(\"0X05\") == \"2\"\nassert solution(\"0X2X\") == \"2\"\nassert solution(\"_05X\") == \"2\"\nassert solution(\"_02X\") == \"1\"\nassert solution(\"_0X5\") == \"2\"\nassert solution(\"_0", "solution('''23_0''') == '26'\nassert solution('''1X1X1X1X1X''') == '6'\nassert solution('''_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_", "solution('''casa''') == '''Output'''\n\n# check the correctness of solution\nassert solution('''casa''') == '''Output'''\n\n# check the correctness of solution\nassert solution('''casa''') == '''Output'''", "solution(\"00_00\") == \"50\"\nassert solution(\"000_00\") == \"0\"\nassert solution(\"_0000\") == \"100\"\nassert solution(\"00000_00\") == \"1\"\nassert solution(\"00_0X0X\") == \"2500\"\nassert solution(\"00_0XX0\") == \"100\"\nassert solution(\"_0_0_X_X_0_\") == \"416000\"\nassert solution(\"00_0XX0\") == \"100\"\nassert solution(\"_0X_X_X_X_X_\") == \"1000000\"\nassert solution(\"0_0XX0_0XX0\") == \"2500\"\nassert solution(\"XXXX_XXXX\") == \"0\"\nassert solution(\"XXXX_XX_X\") == \"2500\"\nassert solution(\"X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X_X", "solution('''\n''') == '''\n'''\n# TODO: generate check_solution.py\n\n# from check_solution import solution as func\n# stdin = '''\n# '''\n# stdout = solution(stdin)\n# print(stdout)"], "finish_reason": ["stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "stop"], "sum_logprob": [-19.782983849600004, -36.26942770724, -109.71707794954695, -13.009065798149997, -167.83484082758008, -158.6748262855899, -151.65889567126902, -47.47898814919992, -161.22685912823002, -176.11821497311027, -33.76338763569998, -115.35107985693509, -78.54953213715498, -139.13406844862996, -116.33142921050003, -183.3658185512201, -73.35007235643526, -13.515031353830013, -70.88152729716701, -184.71781703994398, -98.33432193776993, -133.44918773989312, -182.3436809227701, -40.65529065460001, -106.47428366017003, -19.129299308049994, -123.62280583045698, -191.36581751556503, -118.057017563586, -177.00783254179416, -258.3396014712239, -206.87162099877798, -22.636949357379, -76.83165991687297, -164.10505652195405, -116.89881078433591, -156.57382047767797, -149.86973450090014, -94.12040654895297, -158.06575005370397, -28.655911109, -192.77781931533005, -95.54328092914002, -91.03598277694991, -145.82525066447508, -129.95711329508, -52.95306581929999, -35.04867927101, -160.31651933401994, -65.61720679217001], "mean_logprob": [-1.0990546583111112, -0.5757052017022223, -0.3657235931651567, -0.3025364139104651, -0.5594494694252666, -0.5289160876186333, -0.5055296522375633, -0.15826329383066667, -0.5374228637607666, -0.5870607165770333, -0.11254462545233333, -0.3845035995231167, -0.26183177379051664, -0.4637802281621, -0.3877714307016667, -0.6112193951707333, -0.24450024118811767, -0.04505010451276666, -0.23627175765722333, -0.6157260567998133, -0.3277810731259, -0.44483062579964333, -0.6078122697425666, -0.13551763551533333, -0.7498188990152816, -0.6170741712274194, -0.41207601943485667, -0.6378860583852167, -0.39352339187862, -0.5900261084726467, -0.86113200490408, -0.6895720699959267, -0.07545649785793, -0.25610553305624334, -0.54701685507318, -0.38966270261445335, -0.5219127349255933, -0.49956578166966664, -0.31373468849651, -0.5268858335123466, -0.09551970369666667, -0.6425927310511, -0.31847760309713335, -0.3034532759231667, -0.48608416888158335, -0.4331903776502667, -0.17651021939766667, -0.5563282423969842, -0.5343883977800666, -0.9942001029116666]}
{"prompt": "'''\nThe Winter holiday will be here soon. Mr. Chanek wants to decorate his house's wall with ornaments. The wall can be represented as a binary string a of length n. His favorite nephew has another binary string b of length m (m \u2264 n).\n\nMr. Chanek's nephew loves the non-negative integer k. His nephew wants exactly k occurrences of b as substrings in a. \n\nHowever, Mr. Chanek does not know the value of k. So, for each k (0 \u2264 k \u2264 n - m + 1), find the minimum number of elements in a that have to be changed such that there are exactly k occurrences of b in a.\n\nA string s occurs exactly k times in t if there are exactly k different pairs (p,q) such that we can obtain s by deleting p characters from the beginning and q characters from the end of t.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 m \u2264 n \u2264 500) \u2014 size of the binary string a and b respectively.\n\nThe second line contains a binary string a of length n.\n\nThe third line contains a binary string b of length m.\n\nOutput\n\nOutput n - m + 2 integers \u2014 the (k+1)-th integer denotes the minimal number of elements in a that have to be changed so there are exactly k occurrences of b as a substring in a.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1 2\n0\n11\n''') == '''\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1 2\n1\n11\n''') == '''\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2\n11\n11\n''') == '''\n0 0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n4 2\n0110\n10\n''') == '''\n0 1 0 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3\n100\n111\n''') == '''\n0 0 0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4\n1100\n1100\n''') == '''\n0 0 0 0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n6 3\n110110\n111\n''') == '''\n0 0 0 1 0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n00101\n10101\n''') == '''\n0 0 0 0 0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n01101\n10101\n", "(solution('''\n5 3\n10101\n001\n''') == '''\n3 1 0 0 0\n''')\nassert (solution('''\n5 3\n00100\n001\n''') == '''\n3 2 1 0 0\n''')\nassert (solution('''\n5 3\n11011\n011\n''') == '''\n3 2 1 0 0\n''')\nassert (solution('''\n5 3\n11011\n011\n''') == '''\n3 2 1 0 0\n''')\nassert (solution('''\n7 5\n0111111\n01111\n''') == '''\n7 5 3 1 0 0 0\n''')\nassert (solution('''\n3 1\n111\n1\n''') == '''\n1 0 0\n''')\nassert (solution('''\n10 9\n1111111111\n111111111\n''') == '''\n10 9 8 7 6 5 4 3 2 1 0\n''')\nassert (solution('''\n9 9\n111111111\n111111111\n''') == '''\n10 9 8 7 6 5 4 3 2 1 0\n''')\nassert (solution('''\n5 4\n11111\n1111\n''') == '''\n5 4 3 2 1 0\n''')\nassert (", "solution('''\n5 2\n01011\n01\n''') == '''\n0 1 1 3 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4 2\n0110\n01\n''') == '''\n0 0 0 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1\n0\n0\n''') == '''\n0\n'''\n\nassert solution('''\n1 1\n1\n1\n''') == '''\n0\n'''\n\nassert solution('''\n5 3\n11001\n110\n''') == '''\n0 0 0 1 1\n'''\n\nassert solution('''\n3 1\n010\n0\n''') == '''\n0 1 1\n'''\n\nassert solution('''\n3 1\n010\n1\n''') == '''\n0 0 0\n'''\n\nassert solution('''\n3 1\n010\n1\n''') == '''\n0 0 0\n'''\n\nassert solution('''\n7 3\n1111111\n111\n''') == '''\n0 0 0 3 3 3 3\n'''\n\nprint('All test cases passed.')", "solution('''\n3 2\n011\n01\n''') == '''\n0 1 2\n'''\n\nassert solution('''\n7 3\n0001110\n001\n''') == '''\n0 1 2 3 4 5 6\n'''\n\nassert solution('''\n7 3\n0001101\n001\n''') == '''\n0 1 2 3 4 4 5\n'''\n\n# check the efficiency of solution\nassert solution('''\n1000000 500000\nsolution('''\n5 3\n10001\n010\n''') == '''\n2 2 1\n'''\n\nassert solution('''\n4 2\n0110\n11\n''') == '''\n1 1 1 1\n'''\n\nassert solution('''\n4 2\n0110\n00\n''') == '''\n2 3 3 3\n'''\n\nassert solution('''\n5 3\n10011\n001\n''') == '''\n2 2 1 1\n'''\n\nassert solution('''\n9 7\n011011111\n1011110\n''') == '''\n2 2 1 1 1 1 1 1\n'''\n\nassert solution('''\n5 2\n10101\n10\n''') == '''\n2 1 0 0\n'''\n\nassert solution('''\n5 2\n11011\n01\n''') == '''\n1 1 1 1 0\n'''\n\nassert solution('''\n6 5\n100100\n10010\n''') == '''\n2 2 2 2 2\n'''\n\nassert solution('''\n5 3\n10111\n011\n''') == '''\n2 2 1 1\n'''\n\nassert solution('''\n6 4\n100100\n0101\n''') == '''\n2 2 2 2 2\n'''\n\n", "solution('''\\\n4 2\n0110\n10\n''') == '''\\\n2\n1\n1\n2\n'''\n\n# test performance of solution\ndef run_test(test_id: int, test_case: str):\n    solution(test_case)\n\ntest_cases = [\n    ('0.in', ''),\n    ('1.in', ''),\n    ('2.in', ''),\n    ('3.in', ''),\n    ('4.in', ''),\n    ('5.in', ''),\n    ('6.in', ''),\n    ('7.in', ''),\n    ('8.in', ''),\n    ('9.in', ''),\n    ('10.in', ''),\n    ('11.in', ''),\n    ('12.in', ''),\n    ('13.in', ''),\n    ('14.in', ''),\n    ('15.in', ''),\n    ('16.in', ''),\n    ('17.in', ''),\n    ('18.in', ''),\n    ('19.in', ''),\n    ('20.in', ''),\n    ('21.in', ''),\n    ('22.in', ''),\n    ('23.in', ''),\n    ('24.in', ''),\n    ('25", "solution(\"\"\"4 3\n1010\n101\n\"\"\") == \"\"\"2 1 0\"\"\"\n\nassert solution(\"\"\"5 3\n10101\n111\n\"\"\") == \"\"\"3 2 2\"\"\"\n\nassert solution(\"\"\"10 6\n1110010001\n11100\n\"\"\") == \"\"\"2 2 2 2 2 2 2\"\"\"\n\nassert solution(\"\"\"9 5\n101101111\n10110\n\"\"\") == \"\"\"2 2 2 2 2 2\"\"\"\n\nassert solution(\"\"\"1 1\n1\n1\n\"\"\") == \"\"\"0\"\"\"\n\nassert solution(\"\"\"2 1\n10\n1\n\"\"\") == \"\"\"1 0\"\"\"\n\nassert solution(\"\"\"3 2\n111\n11\n\"\"\") == \"\"\"0 0 0\"\"\"\n\nassert solution(\"\"\"1 1\n0\n0\n\"\"\") == \"\"\"0\"\"\"\n\nassert solution(\"\"\"3 2\n110\n11\n\"\"\") == \"\"\"1 1 0\"\"\"\n\nassert solution(\"\"\"4 2\n1010\n10\n\"\"\") == \"\"\"1 1 0\"\"\"\n\nassert solution(\"\"\"4 3\n1111\n111\n\"\"\") == \"\"\"0 0 0\"\"\"\n\nassert solution(\"\"\"5 4\n11111\n1111\n\"\"\") == \"\"\"0 0 0\"\"\"\n\nassert solution(\"\"\"4 3\n1010\n110\n\"\"\") == \"\"\"1 1 0\"\"\"\n\nassert solution(\"\"\"5 3\n10101\n101\n\"\"\")", "(solution(\"\"\"\n5 3\n01010\n010\n\"\"\") == \"\"\"\n3\n3\n3\n2\n2\n\"\"\")\n\nassert (solution(\"\"\"\n5 3\n11111\n111\n\"\"\") == \"\"\"\n0\n0\n0\n0\n0\n\"\"\")\n\nassert (solution(\"\"\"\n5 3\n11000\n001\n\"\"\") == \"\"\"\n4\n4\n4\n4\n4\n\"\"\")\n\nassert (solution(\"\"\"\n5 3\n11111\n101\n\"\"\") == \"\"\"\n1\n1\n1\n1\n1\n\"\"\")\n\nassert (solution(\"\"\"\n5 3\n11111\n100\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n\"\"\")\n\nassert (solution(\"\"\"\n5 3\n11111\n001\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n\"\"\")\n\nassert (solution(\"\"\"\n5 3\n11111\n010\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n\"\"\")\n\nassert (solution(\"\"\"\n5 3\n11111\n011\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n\"\"\")\n\nassert (solution(\"\"\"\n5 3\n11111\n110\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2", "solution(open(\"testcases/yourtestcase.in\")) == open(\"testcases/yourtestcase.out\").read()", "solution('''\n5 3\n01010\n010\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n5 2\n01010\n01\n''') == '''\n1 2 2 2\n'''\n\nassert solution('''\n2 1\n10\n1\n''') == '''\n1 1\n'''\n\nassert solution('''\n2 1\n01\n1\n''') == '''\n1 2\n'''\n\nassert solution('''\n2 1\n00\n0\n''') == '''\n0 1\n'''\n\nassert solution('''\n2 1\n00\n1\n''') == '''\n2 2\n'''\n\nassert solution('''\n2 1\n11\n1\n''') == '''\n0 0\n'''\n\nassert solution('''\n5 2\n01010\n10\n''') == '''\n2 3 3 3\n'''\n\n# print output\nprint(solution('''\n2 1\n00\n0\n'''))", "solution(stdin='''\n5 3\n01010\n010\n''') == '''\n0 0 1 1 2\n'''\nassert solution(stdin='''\n6 5\n010110\n01010\n''') == '''\n0 0 0 0 0 1\n'''\nassert solution(stdin='''\n6 3\n110101\n110\n''') == '''\n0 0 0 1 1 1\n'''\nassert solution(stdin='''\n8 3\n11010101\n011\n''') == '''\n0 0 0 1 1 1 1 1\n'''\nassert solution(stdin='''\n4 1\n0101\n0\n''') == '''\n0 0 0 0\n'''\nassert solution(stdin='''\n5 3\n01000\n001\n''') == '''\n0 0 0 1 1\n'''\nassert solution(stdin='''\n5 3\n01000\n100\n''') == '''\n0 0 0 1 1\n'''\nassert solution(stdin='''\n5 3\n01000\n010\n''') == '''\n0 0 0 1 1\n'''\nassert solution(stdin='''\n5 3\n01000\n011\n''') == '''\n0 0 0 1 1\n'''\nassert solution(std", "solution('''\n5 2\n00010\n10\n''') == '''\n3 2 1 0 0 \n'''\n\nassert solution('''\n4 4\n1111\n1111\n''') == '''\n0 0 0 0 \n'''\n\nassert solution('''\n5 4\n10101\n1010\n''') == '''\n3 2 2 1 0 \n'''", "solution(test_data) == 'test_data_output'\n# check the speed of solution\nt = datetime.now()\nassert solution(in_data) == out_data\nprint(datetime.now() - t)", "solution('''\n5 2\n11000\n10\n''') == '''\n1 2 1 0 0\n'''\nassert solution('''\n6 2\n111001\n10\n''') == '''\n0 1 1 0 0 0\n'''\nassert solution('''\n4 3\n0011\n110\n''') == '''\n4 4 4 4\n'''\nassert solution('''\n3 3\n111\n111\n''') == '''\n0 0 0\n'''\nassert solution('''\n4 4\n0000\n0000\n''') == '''\n0 0 0 0\n'''\nassert solution('''\n4 2\n0110\n11\n''') == '''\n3 2 2 2\n'''\nassert solution('''\n5 3\n01111\n111\n''') == '''\n2 3 3 2 2\n'''\nassert solution('''\n3 3\n010\n010\n''') == '''\n2 2 2\n'''\nassert solution('''\n5 2\n01110\n10\n''') == '''\n1 2 2 1 1\n'''\nassert solution('''\n5 2\n00100\n01\n''') == '''\n2 3 3 2 2\n'''\nassert solution('''\n4 3\n1100\n100\n''') == '''\n3", "solution('''\n6 4\n110110\n0110\n''') == '''\n2 2 1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n6 3\n100100\n100\n''') == '''\n4 2 1 1 1\n'''\n\nassert solution('''\n4 3\n0110\n101\n''') == '''\n1 0 0 1\n'''", "solution(\"\"\"\n2 2\n01\n10\n\"\"\") == \"\"\"\n1 1 \n\"\"\"\n\nassert solution(\"\"\"\n3 2\n010\n01\n\"\"\") == \"\"\"\n1 2 1 \n\"\"\"\n\nassert solution(\"\"\"\n5 3\n00100\n010\n\"\"\") == \"\"\"\n1 1 2 2 1 \n\"\"\"\n\nassert solution(\"\"\"\n7 4\n1111011\n1011\n\"\"\") == \"\"\"\n3 3 2 1 1 1 0 \n\"\"\"\n\nassert solution(\"\"\"\n7 6\n0101011\n010010\n\"\"\") == \"\"\"\n3 2 1 1 1 1 0 \n\"\"\"\n\nassert solution(\"\"\"\n11 7\n11111110001\n1111110\n\"\"\") == \"\"\"\n4 3 3 3 3 3 3 3 2 1 0 \n\"\"\"\n\nassert solution(\"\"\"\n11 9\n11111110001\n1111111111\n\"\"\") == \"\"\"\n5 4 4 4 4 4 4 4 4 4 1 \n\"\"\"\n\nassert solution(\"\"\"\n11 11\n11111110001\n11111110001\n\"\"\") == \"\"\"\n5 5 5 5 5 5 5 5 5 5 1 \n\"\"\"\n\nassert solution(\"\"\"\n11 8\n11111110001\n011111110\n\"\"\") == \"\"\"\n4 3 3 3 3 3 3 3 3 2 1 \n\"\"\"\n\nassert solution(\"\"\"\n9 5\n1111", "solution(\"\"\"\n5 3\n00100\n010\n\"\"\") == \"\"\"\n2\n1\n1\n1\n0\n0\n\"\"\"\n\nassert solution(\"\"\"\n5 4\n10001\n0100\n\"\"\") == \"\"\"\n3\n2\n2\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n4 3\n0010\n010\n\"\"\") == \"\"\"\n2\n1\n1\n0\n\"\"\"\n\nassert solution(\"\"\"\n3 3\n101\n101\n\"\"\") == \"\"\"\n0\n0\n0\n\"\"\"\n\nassert solution(\"\"\"\n4 3\n0110\n001\n\"\"\") == \"\"\"\n2\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n11111\n001\n\"\"\") == \"\"\"\n4\n3\n3\n3\n3\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n10100\n010\n\"\"\") == \"\"\"\n2\n1\n1\n1\n0\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n00010\n001\n\"\"\") == \"\"\"\n2\n1\n1\n1\n0\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n01111\n001\n\"\"\") == \"\"\"\n2\n1\n1\n1\n0\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n10001\n001\n\"\"\") == \"\"\"\n2\n1\n1\n1\n0\n\"\"\"\n", "solution('''\n5 3\n10101\n111\n''') == '''\n2 0 1 2\n'''\n\nassert solution('''\n5 2\n01010\n11\n''') == '''\n0 0 2 1\n'''\n\nassert solution('''\n4 4\n1111\n1111\n''') == '''\n0\n'''\n\nassert solution('''\n10 5\n1000100010\n01000\n''') == '''\n3 2 2 1 1 1\n'''\n\nassert solution('''\n6 4\n100011\n1100\n''') == '''\n2 1 1 1 1\n'''\n\nassert solution('''\n11 3\n10010110001\n001\n''') == '''\n3 2 1 1 1 1 1 1 1\n'''\n\nassert solution('''\n15 9\n1111101110111111\n1101111110\n''') == '''\n9 8 7 7 7 6 6 6 6\n'''\n\nassert solution('''\n20 10\n11111101111111011101\n1111111111\n''') == '''\n10 9 9 9 9 9 9 9 9 9\n'''\n\nassert solution('''\n9 2\n011100101\n11\n''') == '''\n1 1 1 1 1 1\n'''\n\nassert", "solution(\"test\") == \"test\"", "solution('''\n5 2\n11100\n11\n''') == '''\n1\n1\n1\n0\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2\n111\n11\n''') == '''\n0\n0\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n10 6\n1111111111\n111111\n''') == '''\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n'''", "solution('''\n3 2\n111\n11\n''') == '''\n1 0\n'''\nassert solution('''\n6 2\n101111\n10\n''') == '''\n0 0 0 0 1 0\n'''\nassert solution('''\n5 3\n10011\n100\n''') == '''\n0 1 0 0 0\n'''\nassert solution('''\n10 5\n1001101111\n11111\n''') == '''\n0 0 0 0 0 0 0 0 1 0\n'''\n\n# this one takes forever!\n# assert solution('''\n# 500 500\nsolution('''\n5 2\n00100\n10\n''') == '''\n0 2 4\n'''\n\n# stress testing \nfrom random import randint\n\nwhile True:\n    n = randint(1, 500)\n    m = randint(1, n)\n    a = ''.join([str(randint(0, 1)) for _ in range(n)])\n    b = ''.join([str(randint(0, 1)) for _ in range(m)])\n    assert solution(f'{n} {m}\\n{a}\\n{b}') == solution_alt(f'{n} {m}\\n{a}\\n{b}')", "solution(r'''\n5 1\n10100\n1\n''') == r'''\n0 1 2 2 2 \n'''\n\n# check the correctness of solution\nassert solution(r'''\n5 2\n01000\n01\n''') == r'''\n0 1 2 2 2 \n'''\n\n# check the correctness of solution\nassert solution(r'''\n4 2\n0110\n10\n''') == r'''\n0 1 2 3 3 \n'''\n\n# check the correctness of solution\nassert solution(r'''\n5 2\n01000\n11\n''') == r'''\n0 1 2 2 3 \n'''\n\n# check the correctness of solution\nassert solution(r'''\n6 2\n011000\n11\n''') == r'''\n0 1 2 2 3 3 \n'''\n\n# check the correctness of solution\nassert solution(r'''\n5 2\n01000\n10\n''') == r'''\n0 1 2 2 3 \n'''\n\n# check the correctness of solution\nassert solution(r'''\n5 2\n01000\n00\n''') == r'''\n0 1 2 2 2 \n'''\n\n# check the correctness of solution\nassert solution(r'''\n5 2\n01000\n01\n''') == r''", "solution('''\n5 3\n00000\n101\n''') == '''\n4 4 4 4\n'''\n\nassert solution('''\n8 8\n11001100\n11001100\n''') == '''\n0 0 0 0 0 0 0 0 0\n'''\n\nassert solution('''\n7 7\n1110011\n0011100\n''') == '''\n1 2 2 3 4 5 6 7\n'''\n\nassert solution('''\n6 3\n110110\n110\n''') == '''\n2 2 2 2 2 2\n'''\n\nassert solution('''\n6 6\n100100\n100100\n''') == '''\n0 0 0 0 0 0 0\n'''\n\nassert solution('''\n20 3\n011110110101101111010\n101\n''') == '''\n4 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9\n'''\n\n# print the solution (with input data)\nin_str = ''\nwith open('in.txt', 'r') as in_file:\n    for line in in_file:\n        in_str += line\nprint(solution(in_str))", "solution('''\n5 2\n11010\n01\n''') == '''\n0 1 2 2 2\n'''\nassert solution('''\n3 2\n101\n01\n''') == '''\n2 3 3\n'''\nassert solution('''\n7 4\n0101111\n0111\n''') == '''\n0 1 1 2 2 2 2\n'''\nassert solution('''\n10 10\n1111111111\n1111111111\n''') == '''\n0 0 0 0 0 0 0 0 0 0\n'''\nassert solution('''\n10 9\n1111111111\n1111111111\n''') == '''\n0 0 0 0 0 0 0 0 0 1\n'''\nassert solution('''\n9 9\n111111111\n111111111\n''') == '''\n0 0 0 0 0 0 0 0 0\n'''\nassert solution('''\n5 5\n11011\n11011\n''') == '''\n0 0 0 0 0\n'''\nassert solution('''\n9 5\n101111111\n11111\n''') == '''\n0 1 1 1 1 1 1 1 1\n'''\nassert solution('''\n1 1\n1\n1\n''') == '''\n0\n'''\nassert solution('''\n1 1\n0\n0\n''", "solution('''\n3 2\n110\n11\n''') == '''\n0\n1\n1\n'''\nassert solution('''\n4 3\n0011\n010\n''') == '''\n2\n2\n1\n1\n1\n'''\nassert solution('''\n6 4\n111111\n1111\n''') == '''\n0\n1\n1\n1\n1\n1\n1\n'''\nassert solution('''\n4 3\n1010\n010\n''') == '''\n2\n2\n1\n1\n1\n'''\nassert solution('''\n5 3\n11110\n111\n''') == '''\n0\n0\n0\n1\n1\n1\n'''\nassert solution('''\n5 3\n01110\n111\n''') == '''\n0\n1\n1\n1\n1\n1\n'''\nassert solution('''\n5 3\n01110\n010\n''') == '''\n0\n2\n2\n2\n2\n2\n'''\nassert solution('''\n5 3\n01000\n010\n''') == '''\n0\n2\n2\n2\n2\n2\n'''\nassert solution('''\n5 3\n01000\n111\n''') == '''\n0\n3\n3\n3\n3\n", "solution('''\n6 3\n101010\n010\n''') == '''\n0 1 2 3 4 5\n'''\n\n#\n# auto-generate inputs\n#\n\nimport random\nimport string\ndef auto_input(n: int) -> str:\n    from random import randint\n    output = []\n    output.append(f'{n} {randint(1, n)}')\n    output.append(''.join([random.choice(string.ascii_lowercase) for _ in range(n)]))\n    output.append(''.join([random.choice(string.ascii_lowercase) for _ in range(n)]))\n    return '\\n'.join(output)\n\n# check the correctness of solution\nfor i in range(100):\n    assert solution(auto_input(10)) == '''\n0 1 2 3 4 5 6 7 8 9\n'''\n\n# stress testing solution\nimport time\nfrom random import randint\nfor _ in range(100):\n    n = randint(500,500)\n    print(f'n = {n}')\n    start = time.time()\n    solution(auto_input(n))\n    end = time.time()\n    print(f'Elapsed time: {(end - start):.2f}')", "solution('''\n5 3\n11011\n101\n''') == '''\n2 3 3 3 2 \n'''\n\nassert solution('''\n1 1\n0\n0\n''') == '''\n0 \n'''\n\nassert solution('''\n1 1\n1\n1\n''') == '''\n0 \n'''\n\nassert solution('''\n4 3\n1010\n101\n''') == '''\n2 2 1 0 \n'''\n\nassert solution('''\n10 10\n0000000111\n0101010101\n''') == '''\n0 0 0 0 0 0 0 0 0 0 \n'''\n\nassert solution('''\n100 100\n01101100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100", "solution(\"\"\"\n2 1\n0\n0\n\"\"\") == \"\"\"\n1 2\n\"\"\"\n\n# two example tests\nassert solution(\"\"\"\n3 2\n000\n11\n\"\"\") == \"\"\"\n3 2\n\"\"\"\n\nassert solution(\"\"\"\n3 2\n111\n10\n\"\"\") == \"\"\"\n0 2\n\"\"\"\n\n# multi input test\ninput_output = [\n    # this is a comment\n    # for each input in a list, the first value is the input, the second is the output\n    [\"\"\"\n5 4\n11111\n1111\n\"\"\", \"\"\"\n2 3\n\"\"\"\n    ],\n    [\"\"\"\n10 8\n1001001001\n10010010\n\"\"\", \"\"\"\n0 1\n\"\"\"\n    ],\n    [\"\"\"\n5 2\n01010\n11\n\"\"\", \"\"\"\n2 3\n\"\"\"\n    ],\n    [\"\"\"\n10 4\n0101010101\n1101\n\"\"\", \"\"\"\n1 2\n\"\"\"\n    ],\n    [\"\"\"\n5 4\n01000\n0101\n\"\"\", \"\"\"\n2 3\n\"\"\"\n    ],\n    [\"\"\"\n10 8\n1100011001\n00010010\n\"\"\", \"\"\"\n0 1\n\"\"\"\n    ],\n    [\"\"\"\n10 7\n1001001001\n1001000\n\"\"\", \"\"\"\n0 1\n\"\"\"\n    ],\n    [\"\"\"\n10 4\n", "solution('''\n3 1\n000\n0\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n4 2\n0110\n11\n''') == '''\n0 0 1 2\n'''\n\nassert solution('''\n4 1\n1101\n1\n''') == '''\n0 1 0 0\n'''\n\nassert solution('''\n5 3\n11011\n101\n''') == '''\n0 0 0 1 1\n'''\n\nassert solution('''\n5 2\n01101\n11\n''') == '''\n0 0 0 1 1\n'''\n\n# test input\n\ninput = sys.stdin.read()\nsys.stdout.write(solution(input))", "solution('''\n4 2\n0011\n10\n''') == '''\n1 1 1 2\n'''\n\n# print input\nprint(solution('''\n4 2\n0011\n10\n'''))\n\n#\ndef solution2(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution2('''\n4 2\n0011\n10\n''') == '''\n1 1 1 2\n'''\n\n# print input\nprint(solution2('''\n4 2\n0011\n10\n'''))", "solution('''\n6 5\n111000\n00011\n''') == '''\n1 0 1 2 0 1\n'''\n\nassert solution('''\n10 5\n1111010001\n11011\n''') == '''\n1 0 0 0 1 0 1 0 0 1\n'''\n\nassert solution('''\n10 5\n0101010001\n11001\n''') == '''\n1 0 0 1 0 0 1 0 0 1\n'''\n\nassert solution('''\n2 1\n01\n1\n''') == '''\n1 0 0\n'''\n\nassert solution('''\n1 1\n1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n2 1\n10\n1\n''') == '''\n1 0 0\n'''\n\nassert solution('''\n5 2\n01110\n11\n''') == '''\n1 1 0 0 0\n'''\n\nassert solution('''\n3 2\n101\n01\n''') == '''\n1 0 0\n'''\n\nassert solution('''\n4 4\n1111\n1111\n''') == '''\n1 0 0 0\n'''\n\nassert solution('''\n5 5\n11111\n11111\n''') == '''\n1 0 0 0 0\n'''\n", "'1 4 1 4 1 4 1 4' == solution('10 3\\n1101110100\\n101\\n')\nassert '1 4 2 5 1 6 1 7 1 8 1 9' == solution('10 5\\n1101110100\\n110101\\n')\nassert '0 1 2 3 4 5 6 7 8 9 10' == solution('10 10\\n1010101010\\n1010101010\\n')\nassert '1 2 3 4 5 6 7 8 9 10 11' == solution('10 1\\n1010101010\\n1\\n')\nassert '0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10' == solution('10 2\\n1010101010\\n01\\n')\nassert '2 3 4 5 6 7 8 9 10 11 12' == solution('10 9\\n1010101010\\n010101010\\n')\nassert '0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10' == solution('10 2\\n1010101010\\n01\\n')\nassert '0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10' == solution('10 2\\n1010101010\\n01\\n')\nassert '0 1 1 2 2 3 3 4 4 5", "solution('''\n10 4\n1010101011\n1001\n''') == '''\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n'''\n\nassert solution('''\n10 10\n1111111111\n1111111111\n''') == '''\n0\n'''\n\nassert solution('''\n10 4\n0000000000\n1111\n''') == '''\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n'''\n\nassert solution('''\n5 3\n11010\n010\n''') == '''\n2\n2\n2\n2\n2\n2\n'''\n\nassert solution('''\n4 2\n0011\n01\n''') == '''\n3\n3\n3\n3\n3\n'''\n\nassert solution('''\n10 3\n1000110011\n100\n''') == '''\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\nassert solution('''\n1 1\n1\n1\n''') == '''\n0\n'''\n\nassert solution('''\n5 5\n11111\n11111\n''') == '''\n0\n'''\n\nassert solution('''\n10 3", "solution('''\n3 2\n111\n11\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n6 3\n110011\n110\n''') == '''\n1 2 0 1 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n6 3\n110011\n010\n''') == '''\n2 1 2 1 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n6 5\n110011\n10011\n''') == '''\n0 1 0 0 0 0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1\n11\n1\n''') == '''\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2\n10001\n01\n''') == '''\n1 1 1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n20 16\n111010001010110101111\n1010101101010101010\n''') == '''\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n'''\n\n# check the correctness of solution\nassert solution('''\n10 3\n1111111111\n111\n''') ==", "solution('''\n4 2\n0011\n11\n''') == '''\n2 2 3 3\n'''\n\n# hackerrank environment\nfrom io import StringIO\nimport sys\nif len(sys.argv) > 1:\n    inp = open(sys.argv[1])\n    sys.stdin = inp\n\nprint(solution(sys.stdin.read()))", "solution(sample_input) == sample_output", "solution('''\n5 3\n10110\n010\n''') == '''\n1 1 2 3 3\n'''\n\nassert solution('''\n5 3\n11010\n010\n''') == '''\n0 0 0 0 0\n'''\n\nassert solution('''\n10 5\n0011101101\n01101\n''') == '''\n2 2 3 3 3 3 3 3 3 3\n'''\n\nassert solution('''\n9 3\n100110101\n101\n''') == '''\n1 1 1 1 1 1 1 1 1\n'''\n\nassert solution('''\n5 3\n10001\n100\n''') == '''\n2 2 2 2 2\n'''\n\nassert solution('''\n10 5\n0110011100\n11100\n''') == '''\n0 0 0 0 0 0 0 0 0 0\n'''\n\nassert solution('''\n7 4\n1111000\n1000\n''') == '''\n0 0 0 0 0 0 0\n'''\n\nassert solution('''\n7 4\n1111000\n1100\n''') == '''\n2 2 2 2 2 2 2\n'''\n\nassert solution('''\n7 4\n1111000\n0000\n''') == '''\n4 4 4 4 4 4 4\n'''\n\nassert solution(", "solution(stdin) == stdout\n```\n\n## Submitting your solution\n\nFor each problem you solve, you will be presented with an **Upload** button on the top right of the problem description.\n\n![Upload button](https://i.imgur.com/IQsxCd8.png)\n\nSimply click the upload button to show the upload modal.\n\n![Upload modal](https://i.imgur.com/X9Sesl0.png)\n\nChoose the language you have created your solution in, enter the source code into the textbox, and click the **Upload** button in the modal.\n\nOnce your solution is uploaded, it will be automatically tested on sample testcases to verify that it is valid.\n\n![Uploaded solution](https://i.imgur.com/4uVONZw.png)\n\nIf your solution is valid, it will appear in your list of uploaded solutions.\n\n![List of solutions](https://i.imgur.com/sjlO9Yr.png)\n\n## Testing your solution\n\nOnce your solution is uploaded, you can test it on testcases. To do so, click the **Check** button at the bottom of the problem description.\n\n![Check button](https://i.imgur.com/v5bgV7O.png)\n\nChoose", "solution('''\n5 3\n10101\n101\n''') == '''\n0 0 1 1 2\n'''\n\n# read the input\nbuffer = []\nwhile True:\n    try:\n        buffer.append(input())\n    except EOFError:\n        break\nstdin = '\\n'.join(buffer)\n\n# parse the input and run the solution\nprint(solution(stdin))", "solution('''\n4 2\n0101\n01\n''') == '''\n0\n1\n1\n2\n2\n'''\nassert solution('''\n5 3\n11011\n011\n''') == '''\n0\n0\n0\n0\n0\n'''\nassert solution('''\n10 5\n1100110001\n00011\n''') == '''\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n'''\nassert solution('''\n15 5\n100110101111001\n01010\n''') == '''\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n'''\nassert solution('''\n15 5\n100110101111001\n01001\n''') == '''\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n'''\nassert solution('''\n15 5\n100110101111001\n10011\n''') == '''\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n'''\nassert solution('''\n15 5", "solution('''\n5 3\n10010\n100\n''') == '''\n2 3 1\n'''\n\nassert solution('''\n3 3\n111\n111\n''') == '''\n0 0 0\n'''\n\nassert solution('''\n5 5\n11010\n11010\n''') == '''\n0 2 3 3 3\n'''\n\nassert solution('''\n1 1\n1\n1\n''') == '''\n0 0\n'''\n\nassert solution('''\n9 4\n110011010\n0011\n''') == '''\n2 3 3 4 2 1 1 1 1\n'''\n\nassert solution('''\n10 5\n1001000100\n10010\n''') == '''\n2 3 3 4 4 3 3 3 3 3\n'''\n\nassert solution('''\n4 3\n1110\n111\n''') == '''\n1 2 1 1\n'''\n\nassert solution('''\n6 5\n111111\n11111\n''') == '''\n0 1 1 1 1 1\n'''\n\nassert solution('''\n15 6\n1111011111110111\n111111\n''') == '''\n1 2 2 3 3 4 4 5 5 6 6 7 7 7\n'''\n\nassert solution('''\n6 5\n100100", "solution(open(\"path/to/task\").read()) == open(\"path/to/result\").read()", "solution('''\nn m\nstring a\nstring b\n''') == ''\n\n# check for time limit\nassert solution('''\n...\n''') == ''", "solution('''\n3 2\n110\n11\n''') == '''\n2 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2\n010\n10\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n10101\n010\n''') == '''\n2 2 2 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4\n0101\n0101\n''') == '''\n0 0 0 0\n'''\n\n# check the correctness of solution\nassert solution('''\n8 3\n11100010\n110\n''') == '''\n3 2 2 2 2 2 2 2\n'''\n\nassert solution('''\n500 50\n0\n''') == '''\n500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500", "\"0 1 2 1 0\" == solution(\"\"\"\n5 3\n00100\n001\n\"\"\")\n\nassert \"0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "solution(\"\"\"1\n1\n1\"\"\") == \"\"\"0\n1\"\"\"\n\nassert solution(\"\"\"4\n1100\n1010\"\"\") == \"\"\"2\n2\n1\n0\"\"\"\n\nassert solution(\"\"\"4\n1010\n1100\"\"\") == \"\"\"1\n1\n2\n3\"\"\"\n\nassert solution(\"\"\"4\n1001\n1001\"\"\") == \"\"\"0\n0\n0\n0\"\"\"\n\nassert solution(\"\"\"5\n11000\n10000\"\"\") == \"\"\"3\n3\n3\n3\n3\"\"\"\n\nassert solution(\"\"\"5\n10111\n11100\"\"\") == \"\"\"0\n0\n1\n1\n2\"\"\"\n\nassert solution(\"\"\"4\n1010\n1010\"\"\") == \"\"\"0\n0\n0\n0\"\"\"\n\nassert solution(\"\"\"7\n1011000\n1010110\"\"\") == \"\"\"0\n0\n0\n0\n0\n0\n0\"\"\"\n\nassert solution(\"\"\"7\n1100000\n1101111\"\"\") == \"\"\"0\n0\n0\n0\n0\n0\n0\"\"\"\n\nassert solution(\"\"\"7\n1111000\n1111001\"\"\") == \"\"\"1\n1\n1\n1\n1\n1\n1\"\"\"\n\nassert solution(\"\"\"7\n1011100\n1011011\"\"\") == \"\"\"1\n1\n1\n1\n1\n1\n1\"\"\"\n\nassert solution(\"\"\"7\n", "solution(\"\"\"\n2 1\n11\n1\n\"\"\") == \"\"\"\n1 0\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n1\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n7 4\n1010101\n1101\n\"\"\") == \"\"\"\n3 1 1 1 0 0 0\n\"\"\"\n\nassert solution(\"\"\"\n15 6\n111111111111111\n111111\n\"\"\") == \"\"\"\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\"\"\"", "solution('''1 2\n1\n1''') == '''1 1 1'''\nassert solution('''1 2\n1\n0''') == '''0 1 1'''\nassert solution('''2 2\n01\n10''') == '''1 1 2'''\nassert solution('''3 3\n011\n001''') == '''1 2 2'''\nassert solution('''3 3\n111\n010''') == '''0 0 0'''\nassert solution('''3 3\n110\n110''') == '''0 1 1'''\nassert solution('''6 3\n001011\n110''') == '''1 1 2 3 3 3'''\nassert solution('''12 4\n000011101111\n1011''') == '''0 1 2 3 4 5 6 7 8 9 10 11 12'''\nassert solution('''8 4\n00110111\n1101''') == '''0 1 1 2 2 3 3 4'''\nassert solution('''7 4\n0001010\n0001''') == '''0 1 1 2 2 3 3'''\nassert solution('''5 5\n11111\n11111''') == '''0 0 0 0 0'''\nassert solution('''20 10\n00001101011011101100\n00101011011''", "solution(\"\") == \"\""], "finish_reason": ["length", "length", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "length", "length", "length", "stop", "length", "stop"], "sum_logprob": [-85.55543699092927, -103.59312114811001, -97.66687427084804, -90.99036028481086, -136.25034777797805, -72.823755353294, -127.61920842765508, -68.47536816203704, -24.820435876000005, -83.27508394774898, -98.57355650414607, -39.925546650505005, -45.90035451144001, -122.02344217190573, -56.659057701319966, -150.86703134588902, -104.28740241962996, -183.33808107308795, -9.967604406000001, -49.184059653776, -86.98589115072605, -49.32788926396297, -78.15804736392398, -148.88621643526193, -96.93542315274503, -96.66518611876101, -129.48133787595856, -82.44217018568499, -221.837758512513, -85.03022397386299, -45.47681622286502, -127.89323105260186, -108.57608802323406, -102.691759227055, -125.89346845117291, -46.57297368936901, -6.76423862574, -124.31267654656303, -361.8934940620372, -41.217800487720005, -83.10387755816879, -144.9870741484229, -15.727827552070002, -31.263284364, -83.20090774331969, -33.52656502400001, -139.790243659903, -55.78123083469001, -170.250780143525, -5.839413255999999], "mean_logprob": [-0.2851847899697643, -0.3453104038270333, -0.3564484462439708, -0.30330120094937, -0.4541678259265933, -0.24274585117764666, -0.42539736142551665, -0.22825122720679, -0.8864441384285714, -0.3498953107048277, -0.3285785216804867, -0.4436171850056111, -0.8660444247441509, -0.40674480723968565, -0.5901985177220833, -0.5028901044862967, -0.3476246747321, -0.6111269369102933, -1.1075116006666665, -0.38727606026595274, -0.28995297050241997, -0.3102382972576289, -0.26052682454641335, -0.5453707561731209, -0.32311807717581664, -0.32221728706253666, -0.4316044595865283, -0.27480723395228335, -0.73945919504171, -0.49436176728990117, -0.33937922554376865, -0.42631077017534, -0.36192029341078, -0.3423058640901833, -0.4196448948372433, -0.5007846633265484, -0.6149307841581818, -0.41437558848854333, -1.2063116468734576, -0.43387158408126314, -0.27701292519389564, -0.48329024716141, -0.6553261480029167, -0.801622676, -0.2773363591443989, -0.11175521674666666, -0.4659674788663433, -0.4850541811712174, -0.5675026004784167, -0.9732355426666667]}
{"prompt": "'''\nDenote a cyclic sequence of size n as an array s such that s_n is adjacent to s_1. The segment s[r, l] where l < r is the concatenation of s[r, n] and s[1, l].\n\nYou are given an array a consisting of n integers. Define b as the cyclic sequence obtained from concatenating m copies of a. Note that b has size n \u22c5 m.\n\nYou are given an integer k where k = 1 or k is a prime number. Find the number of different segments in b where the sum of elements in the segment is divisible by k.\n\nTwo segments are considered different if the set of indices of the segments are different. For example, when n = 3 and m = 2, the set of indices for segment s[2, 5] is \\{2, 3, 4, 5\\}, and for segment s[5, 2] is \\{5, 6, 1, 2\\}. In particular, the segments s[1, 6], s[2,1], \u2026, s[6, 5] are considered as the same segment.\n\nOutput the answer modulo 10^9 + 7.\n\nInput\n\nThe first line contains three integers n, m, and k (1 \u2264 n, m, k \u2264 2 \u22c5 10^5, k = 1 or k is a prime number).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5).\n\nOutput\n\nOutput an integer denoting the number of different segments in b where the sum of elements in the segment is divisible by k, modulo 10^9 + 7.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n4 1 2\n4 2 1 3\n''') == '7'\n\nassert solution('''\n4 2 2\n4 2 1 3\n''') == '14'\n\nassert solution('''\n4 3 2\n4 2 1 3\n''') == '21'\n\nassert solution('''\n3 3 3\n1 2 3\n''') == '8'\n\nassert solution('''\n1 2 2\n1\n''') == '3'\n\nassert solution('''\n3 2 2\n1 2 3\n''') == '9'\n\n# check the performance of solution\nimport random\nm = 10**5\na = [random.randint(0, m) for _ in range(m)]\nprint(solution(f'''\n{m} 3 2\n{' '.join(map(str, a))}\n'''))", "solution(ex_1) == sol_1", "solution(\"\"\"\n1 1 2\n1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 2 2\n1 2\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n1 2 2\n1\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n2 1 2\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 2 2\n1 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n2 2 2\n2 2\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n3 1 2\n1 1 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4 2 2\n2 2 2 2\n\"\"\") == \"48\"\n\nassert solution(\"\"\"\n4 2 2\n2 1 2 1\n\"\"\") == \"48\"\n\nassert solution(\"\"\"\n4 3 2\n2 1 2 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 3 2\n1 1 1 1\n\"\"\") == \"20\"\n\nassert solution(\"\"\"\n1 3 2\n2\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n2 3 2\n2 2\n\"\"\") == \"42\"\n\nassert solution(\"\"\"\n3 3 2\n2 2 2\n\"\"\") == \"192\"\n\nassert solution(\"\"\"\n4 3 2\n2 2 2 2\n", "(solution('''\n3 2 7\n1 2 3\n''') == '''\n3\n''')\nassert (solution('''\n5 1 3\n2 3 4 2 3\n''') == '''\n12\n''')\nassert (solution('''\n5 2 2\n1 1 1 1 1\n''') == '''\n16\n''')\nassert (solution('''\n5 3 3\n5 1 3 2 5\n''') == '''\n27\n''')\nassert (solution('''\n10 9 7\n0 1 0 1 0 1 0 1 0 1\n''') == '''\n100\n''')\nassert (solution('''\n4 5 4\n0 1 0 1\n''') == '''\n80\n''')\nassert (solution('''\n10 10 13\n0 1 0 1 0 1 0 1 0 1 0\n''') == '''\n1000\n''')\nassert (solution('''\n20 20 13\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\n''') == '''\n68951\n''')\nassert (solution('''\n20 20 2\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\n''') == '''\n1048576\n", "solution('''\n1 1 1\n1\n''') == '1'\n\nassert solution('''\n2 1 5\n1 1\n''') == '2'\n\nassert solution('''\n1 2 7\n1\n''') == '0'\n\nassert solution('''\n2 3 5\n1 1\n''') == '6'\n\nassert solution('''\n3 2 11\n3 5 7\n''') == '12'\n\nassert solution('''\n5 4 17\n5 5 5 5 5\n''') == '35'\n\nassert solution('''\n4 6 13\n3 1 2 2\n''') == '63'\n\nassert solution('''\n10 1 29\n7 8 12 18 12 13 8 13 2 1\n''') == '1'\n\nassert solution('''\n2 2 3\n2 2\n''') == '4'\n\nassert solution('''\n3 2 7\n1 1 1\n''') == '8'\n\nassert solution('''\n10 4 2\n1 2 2 1 1 2 2 1 2 1\n''') == '40'\n\nassert solution('''\n2 5 3\n2 2\n''') == '6'\n\nassert solution('''\n10 7 11\n3 1 1 1 1 7 9 5 5 1\n''') == '64'\n", "solution('''\n1 3 2\n1\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n3 2 4\n1 2 3\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n3 2 2\n1 2 3\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n3 2 7\n1 2 3\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n3 3 2\n1 2 3\n''') == '8'\n\n# check the correctness of solution\nassert solution('''\n2 2 3\n1 2\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n2 2 7\n1 2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n2 2 13\n1 2\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n4 2 7\n1 2 1 2\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4 2 5\n1 2 1 2\n''') == '8'\n\n# check the correctness of solution\nassert solution('''\n4 2 2\n1 2 1 2", "solution('''3 2 2\n1 2 3''') == '4'\nassert solution('''3 2 3\n1 2 3''') == '2'\nassert solution('''3 2 4\n1 2 3''') == '2'\nassert solution('''3 2 5\n1 2 3''') == '2'\nassert solution('''3 2 7\n1 2 3''') == '3'\nassert solution('''3 2 13\n1 2 3''') == '3'\nassert solution('''3 2 29\n1 2 3''') == '3'\nassert solution('''3 3 3\n1 2 3''') == '2'\nassert solution('''3 3 4\n1 2 3''') == '2'\nassert solution('''3 3 7\n1 2 3''') == '3'\nassert solution('''3 3 8\n1 2 3''') == '3'\nassert solution('''3 3 13\n1 2 3''') == '3'\nassert solution('''3 3 25\n1 2 3''') == '3'\nassert solution('''3 4 3\n1 2 3''') == '2'\nassert solution('''3 4 4\n1 2 3''') == '2'\nassert solution('''3 4 7\n1 2 3''') == '", "solution(stdin=\"1 1 1\") == \"1\"\nassert solution(stdin=\"2 2 2\") == \"2\"\nassert solution(stdin=\"2 3 3\") == \"3\"\nassert solution(stdin=\"3 4 5\") == \"6\"\nassert solution(stdin=\"10 1 2\") == \"10\"\nassert solution(stdin=\"10 1 3\") == \"0\"\nassert solution(stdin=\"10 2 3\") == \"10\"\nassert solution(stdin=\"10 1 7\") == \"9\"\nassert solution(stdin=\"10 2 7\") == \"18\"\nassert solution(stdin=\"1 1 1\") == \"1\"\nassert solution(stdin=\"2 2 2\") == \"2\"\nassert solution(stdin=\"2 3 3\") == \"3\"\nassert solution(stdin=\"3 4 5\") == \"6\"\nassert solution(stdin=\"10 1 2\") == \"10\"\nassert solution(stdin=\"10 1 3\") == \"0\"\nassert solution(stdin=\"10 2 3\") == \"10\"\nassert solution(stdin=\"10 1 7\") == \"9\"\nassert solution(stdin=\"10 2 7\") == \"18\"\nassert solution(stdin=\"10 2 11\") == \"36\"\nassert solution(stdin=\"10 1 13\") == \"10\"\nassert", "solution(TEST_CASES[0]) == '6'\nassert solution(TEST_CASES[1]) == '0'\nassert solution(TEST_CASES[2]) == '1'\nassert solution(TEST_CASES[3]) == '1'\nassert solution(TEST_CASES[4]) == '3'\n\n# submit the solution to codeforces\n#submit(solution, TEST_CASES)", "solution('''\n3 2 3\n0 1 2\n''') == '12'\n\nassert solution('''\n4 2 2\n1 1 1 1\n''') == '16'\n\nassert solution('''\n1 3 1\n1\n''') == '12'\n\nassert solution('''\n2 1 47\n3 1\n''') == '1'\n\nassert solution('''\n3 1 23\n3 1 2\n''') == '1'\n\nassert solution('''\n3 1 41\n3 1 2\n''') == '0'\n\nassert solution('''\n2 3 31\n7 8\n''') == '15'\n\nassert solution('''\n2 3 31\n8 7\n''') == '15'\n\nassert solution('''\n2 3 31\n8 8\n''') == '30'\n\nassert solution('''\n2 3 31\n7 7\n''') == '30'\n\nassert solution('''\n2 3 31\n1 8\n''') == '15'\n\nassert solution('''\n3 2 1000000007\n1 2 3\n''') == '48'\n\nassert solution('''\n4 2 1000000007\n1 2 3 4\n''') == '64'\n\nassert solution('''\n5 2 1000000007\n1 2 3 4 5", "solution('''\n5 2 7\n1 2 3 4 5\n''') == '''\n9\n'''\n\nassert solution('''\n2 2 3\n2 2\n''') == '''\n7\n'''\n\nassert solution('''\n3 2 7\n3 4 5\n''') == '''\n6\n'''\n\nassert solution('''\n2 3 2\n1 1\n''') == '''\n4\n'''\n\nassert solution('''\n2 3 3\n1 1\n''') == '''\n4\n'''\n\nassert solution('''\n1 1 3\n2\n''') == '''\n1\n'''\n\nassert solution('''\n1 2 3\n1\n''') == '''\n3\n'''\n\nassert solution('''\n2 2 3\n1 2\n''') == '''\n2\n'''\n\nassert solution('''\n1 1 1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n1 2 1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n2 2 2\n1 1\n''') == '''\n1\n'''\n\nassert solution('''\n2 2 3\n2 2\n''') == '''\n2\n'''\n\nassert", "solution(\"\"\"3 2 2\n1 1 1\n\"\"\") == \"\"\"5\n\"\"\"\n\n# submit\n# s = input()\n# print(solution(s))\n\n# print(solution(\"\"\"3 2 2\n# 1 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"2 2 3\n# 2 3\n# \"\"\"))\n\n# print(solution(\"\"\"3 2 7\n# 2 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"3 2 5\n# 1 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"3 3 3\n# 1 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"2 3 3\n# 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"2 3 1\n# 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"2 3 2\n# 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"2 3 4\n# 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"4 5 2\n# 1 1 2 3\n# \"\"\"))\n\n# print(solution(\"\"\"4 2 5\n# 1 1 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"4 2 7\n# 1 1 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"4 2 3\n", "solution(\"\"\"\n10 10 3\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\n15\n\"\"\"\nassert solution(\"\"\"\n6 7 5\n6 1 3 3 4 7\n\"\"\") == \"\"\"\n6\n\"\"\"\nassert solution(\"\"\"\n2 2 2\n1 2\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1 1 2\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n4 1 1000000007\n1 2 3 4\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n1 2 1\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1 2 1000000007\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n4 4 6\n1 2 3 4\n\"\"\") == \"\"\"\n8\n\"\"\"\nassert solution(\"\"\"\n2 2 9\n1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n3 4 1000000007\n1 2 3\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2 3 1000000007\n1 2\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1 1 1\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2 1 1000000007\n1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n", "solution('''\n    1 2 3\n    1 2 3\n''') == '''\n    2\n'''\n\n# check the correctness of solution\nassert solution('''\n    3 3 3\n    1 1 1\n''') == '''\n    5\n'''\n\n# check the correctness of solution\nassert solution('''\n    4 1 4\n    1 2 3 4\n''') == '''\n    3\n'''\n\n# check the correctness of solution\nassert solution('''\n    10 7 101\n    105 98 8 98 8 98 105 98 8 98\n''') == '''\n    65\n'''\n\n# check the correctness of solution\nassert solution('''\n    10 7 157\n    105 98 8 98 8 98 105 98 8 98\n''') == '''\n    65\n'''\n\n# check the correctness of solution\nassert solution('''\n    10 4 4\n    2 3 3 4 2 3 3 4 2 3\n''') == '''\n    15\n'''\n\n# check the correctness of solution\nassert solution('''\n    10 5 4\n    2 3 3 4 2 3 3 4 2 3\n''') == '''\n    20\n'''\n\n# check the correctness of solution\nassert solution('''\n    10 6 4\n    2 3 3 4 2 3 3 4", "solution(get_stdin()) == get_stdout()\n\n# read file\nwith open(filepath) as file:\n    stdin = file.read()\n\n# run solution\nprint(solution(stdin))", "solution('''1 1 1\n1''') == '1'\nassert solution('''1 2 1\n1''') == '3'\nassert solution('''1 2 2\n1''') == '2'\nassert solution('''3 1 3\n1 3 2''') == '2'\nassert solution('''3 2 3\n1 3 2''') == '12'\nassert solution('''3 2 5\n1 3 2''') == '14'\nassert solution('''3 3 5\n1 3 2''') == '40'\nassert solution('''100 2 1\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1''') == '159601'\nassert solution('''100 2 2\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54", "solution(\"\"\"\n3 2 2\n1 2 3\n\"\"\") == \"\"\"\n8\n\"\"\"\nassert solution(\"\"\"\n3 3 1\n1 2 3\n\"\"\") == \"\"\"\n12\n\"\"\"\nassert solution(\"\"\"\n2 3 5\n2 3\n\"\"\") == \"\"\"\n9\n\"\"\"\nassert solution(\"\"\"\n3 1 15\n0 5 7\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2 3 3\n2 1\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n2 2 2\n2 2\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n2 2 7\n5 2\n\"\"\") == \"\"\"\n5\n\"\"\"\nassert solution(\"\"\"\n7 3 3\n2 6 3 3 0 3 3\n\"\"\") == \"\"\"\n48\n\"\"\"\nassert solution(\"\"\"\n1 1 1\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n6 2 2\n0 4 5 4 1 0\n\"\"\") == \"\"\"\n15\n\"\"\"\nassert solution(\"\"\"\n7 2 3\n2 5 4 1 2 2 5\n\"\"\") == \"\"\"\n44\n\"\"\"\nassert solution(\"\"\"\n6 1 5\n0 3 2 1 1 0\n\"\"\") == \"\"\"\n6\n\"\"\"\nassert solution(\"\"\"\n1 1 11\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n1 2 2\n", "solution('''\n4 3 3\n1 1 1 1\n''') == '24'\n\nassert solution('''\n3 2 5\n1 2 3\n''') == '10'\n\nassert solution('''\n6 4 2\n1 1 2 2 3 3\n''') == '93'", "solution(\"\"\"\n3 1 9\n1 2 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n2 3 11\n1 2\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n4 2 7\n3 2 4 1\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n3 2 13\n3 5 1\n\"\"\") == \"24\"\n\nassert solution(\"\"\"\n5 4 11\n5 1 2 3 4\n\"\"\") == \"60\"\n\nassert solution(\"\"\"\n2 5 13\n1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 3 7\n5 3 1 3 3\n\"\"\") == \"36\"\n\nassert solution(\"\"\"\n5 4 13\n1 2 3 4 5\n\"\"\") == \"120\"\n\nassert solution(\"\"\"\n5 3 3\n5 4 3 4\n\"\"\") == \"18\"\n\nassert solution(\"\"\"\n4 4 5\n4 1 3 2\n\"\"\") == \"48\"\n\nassert solution(\"\"\"\n3 2 7\n1 2 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n4 2 7\n4 1 3 1\n\"\"\") == \"24\"\n\nassert solution(\"\"\"\n4 2 5\n4 2 1 3\n\"\"\") == \"24\"\n\nassert solution(\"\"\"\n3 3 11\n1 5 2\n\"\"\") == \"18\"", "solution(__doc__) == \"\"\"\n1\n1\n\n\"\"\"\n\n# simulate stdin by reading lines\nsys.stdin = io.StringIO(__doc__.strip())\n\n# call function and print result\nresult = solution(sys.stdin.read())\nprint(result)", "False", "solution('''\n3 2 2\n1 2 3\n''') == '''\n4\n'''\n\nassert solution('''\n2 3 3\n2 3\n''') == '''\n2\n'''\n\nassert solution('''\n3 1 5\n4 5 6\n''') == '''\n2\n'''\n\n# check the performance of solution\nassert solution('''\n3 5 5\n4 5 6\n''') == '''\n0\n'''\n\nassert solution('''\n3 5 5\n4 6 7\n''') == '''\n2\n'''\n\nassert solution('''\n5 2 3\n1 2 3 4 5\n''') == '''\n5\n'''\n\nassert solution('''\n5 2 5\n1 2 3 4 5\n''') == '''\n2\n'''\n\nassert solution('''\n5 2 2\n1 2 3 4 5\n''') == '''\n6\n'''\n\nassert solution('''\n5 2 2\n1 2 3 4 6\n''') == '''\n6\n'''\n\nassert solution('''\n5 2 2\n1 2 4 5 6\n''') == '''\n6\n'''\n\nassert solution('''\n5 2 2\n1 2 4 6 7\n''') == '''\n6\n''", "solution(\"\"\"5 2 3\n5 2 0 0 1\n\"\"\") == \"\"\"8\"\"\"\nassert solution(\"\"\"2 3 3\n1 1\n\"\"\") == \"\"\"18\"\"\"\nassert solution(\"\"\"6 1 13\n0 0 0 0 0 0\n\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"4 2 4\n4 0 0 0\n\"\"\") == \"\"\"4\"\"\"\nassert solution(\"\"\"2 2 5\n1 0\n\"\"\") == \"\"\"4\"\"\"\nassert solution(\"\"\"3 1 7\n1 1 1\n\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"4 2 7\n4 2 2 2\n\"\"\") == \"\"\"4\"\"\"\nassert solution(\"\"\"1 2 3\n2\n\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"3 2 7\n0 1 1\n\"\"\") == \"\"\"4\"\"\"\nassert solution(\"\"\"3 2 7\n0 0 1\n\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"3 2 7\n0 1 0\n\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"2 3 3\n2 2\n\"\"\") == \"\"\"18\"\"\"\nassert solution(\"\"\"5 4 7\n0 0 0 0 0\n\"\"\") == \"\"\"16\"\"\"\nassert solution(\"\"\"5 2 7\n0 0 0 0 0\n\"\"\") == \"\"\"8\"\"\"\nassert solution(\"\"\"3 1 5\n1 1 1\n\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"5 1 7\n5 2", "solution(stdin='3 2 2') == '4'\nassert solution(stdin='5 5 2') == '0'\nassert solution(stdin='2 5 3') == '0'\nassert solution(stdin='2 2 5') == '1'\nassert solution(stdin='2 2 2') == '2'\nassert solution(stdin='3 3 7') == '0'\nassert solution(stdin='4 1 7') == '0'\nassert solution(stdin='1 2 7') == '0'\nassert solution(stdin='2 3 7') == '0'\nassert solution(stdin='1 5 7') == '0'\nassert solution(stdin='5 1 7') == '0'\nassert solution(stdin='1 1 7') == '0'\nassert solution(stdin='5 5 7') == '2'\nassert solution(stdin='1 1 4') == '0'\nassert solution(stdin='2 2 4') == '0'\nassert solution(stdin='1 5 4') == '0'\nassert solution(stdin='5 1 4') == '0'\nassert solution(stdin='2 3 4') == '0'\nassert solution(stdin='3 2 4') == '0'\nassert solution(stdin='4 1 4') == '0'\nassert", "solution(\"\"\"\n3 2 5\n1 2 3\n\"\"\") == \"\"\"\n6\n\"\"\"\n\n# get the input\ninput = sys.stdin.read()\n\n# run the solution with the input\nprint(solution(input))", "solution('''\n2 3 4\n1 2\n''') == '3'\n\nassert solution('''\n3 4 5\n1 2 3\n''') == '5'\n\nassert solution('''\n2 1 2\n1 2\n''') == '2'\n\nassert solution('''\n10 2 11\n53 65 44 5 42 87 15 79 7 2\n''') == '5'\n\nassert solution('''\n1 5 5\n1\n''') == '0'\n\nassert solution('''\n1 1 7\n0\n''') == '1'\n\nassert solution('''\n1 1 5\n0\n''') == '0'\n\nassert solution('''\n1 1 11\n0\n''') == '1'\n\nassert solution('''\n3 5 5\n3 1 1\n''') == '4'\n\nassert solution('''\n4 2 7\n2 3 3 3\n''') == '4'\n\nassert solution('''\n4 1 7\n2 3 3 3\n''') == '1'\n\nassert solution('''\n4 4 7\n2 3 3 3\n''') == '4'\n\nassert solution('''\n4 3 7\n2 3 3 3\n''') == '4'\n\nassert solution('''\n4 5 7\n2 3 3 3", "solution(\n'''\n3 2 7\n1 2 3\n'''\n) == '1'\n\n# check the correctness of solution\nassert solution(\n'''\n3 2 13\n1 2 3\n'''\n) == '6'\n\n# check the correctness of solution\nassert solution(\n'''\n10 1 13\n0 1 1 1 0 0 0 0 0 1\n'''\n) == '13'\n\n# check the correctness of solution\nassert solution(\n'''\n1 2 19\n12\n'''\n) == '4'\n\n# check the correctness of solution\nassert solution(\n'''\n2 5 3\n2 1\n'''\n) == '4'\n\n# check the correctness of solution\nassert solution(\n'''\n100000 1 10\n1\n'''\n) == '100000'\n\n# check the correctness of solution\nassert solution(\n'''\n1 100000 3\n2\n'''\n) == '3'\n\n# check the correctness of solution\nassert solution(\n'''\n1 100000 13\n12\n'''\n) == '1'\n\n# check the correctness of solution\nassert solution(\n'''\n10 10 10\n1 2 3 4 5 6 7 8 9 10\n'''\n) == '55'\n\n# check the correctness of solution\nassert solution(\n", "solution('''\n3 3 3\n1 1 1\n''') == '6'\n\n# check performance\n\n# set up python benchmark\nimport timeit\nimport sys\nsys.path.append('..')\nfrom lib import benchmark\n\n# start python benchmark\nassert benchmark(solution, '''\n1000000000 1000000000 1000000000\n1000000000\n''') == '500000000500000000'", "solution('''\n3 2 7\n1 2 3\n''') == '7'\n\nassert solution('''\n5 2 5\n1 2 3 4 5\n''') == '8'\n\nassert solution('''\n1 3 5\n5\n''') == '6'\n\nassert solution('''\n10 4 7\n4 4 4 4 4 4 4 4 4 4\n''') == '4'\n\nassert solution('''\n20 15 5\n5 4 3 2 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n''') == '5399186'\n\nassert solution('''\n15 13 349\n34 91 36 30 24 26 46 38 21 81 29 34 28 17 45\n''') == '4574'\n\nassert solution('''\n15 13 349\n34 91 36 30 24 26 46 38 21 81 29 34 28 17 45\n''') == '4574'\n\nassert solution('''\n20 15 1000\n10 9 8 7 6 5 4 3 2 1 2 3 4 5 6 7 8 9 10\n''') == '1'\n\nassert solution('''\n20 15 1000\n10 9 8 7 6 5 4 3 2 1 2 3 4 5 6 7 8 9 10\n''') == '1'\n\nassert solution('''\n20 15 1000\n10 9 8 7 6 5 4", "solution('''\n1 1 2\n1\n''') == '2'\nassert solution('''\n4 3 7\n2 3 1 6\n''') == '6'\nassert solution('''\n4 2 7\n1 2 3 4\n''') == '10'\nassert solution('''\n3 3 3\n2 3 1\n''') == '12'\nassert solution('''\n3 3 2\n1 1 1\n''') == '6'\nassert solution('''\n3 2 2\n1 2 3\n''') == '9'\nassert solution('''\n7 1 7\n1 2 3 4 5 6 7\n''') == '4'\nassert solution('''\n7 3 7\n1 2 3 4 5 6 7\n''') == '14'\nassert solution('''\n7 7 7\n1 2 3 4 5 6 7\n''') == '27'\nassert solution('''\n7 13 1\n1 2 3 4 5 6 7\n''') == '65'\nassert solution('''\n3 3 3\n1 2 3\n''') == '4'\nassert solution('''\n2 3 3\n2 1\n''') == '4'\nassert solution('''\n4 3 5\n1 2 1 2\n''') == '6'\nassert solution('''\n4 3 5\n1 2", "solution('''\n5 2 6\n1 2 3 4 5\n''') == '''\n4\n'''\nassert solution('''\n2 3 7\n4 5\n''') == '''\n4\n'''\nassert solution('''\n2 3 7\n6 1\n''') == '''\n0\n'''\nassert solution('''\n2 3 7\n2 3\n''') == '''\n6\n'''\nassert solution('''\n3 1 23\n3 7 1\n''') == '''\n1\n'''\nassert solution('''\n4 1 7\n4 4 4 4\n''') == '''\n1\n'''\nassert solution('''\n2 3 7\n1 0\n''') == '''\n6\n'''\nassert solution('''\n3 1 7\n0 0 0\n''') == '''\n1\n'''\nassert solution('''\n5 1 7\n1 1 1 1 1\n''') == '''\n1\n'''\nassert solution('''\n5 2 6\n5 1 5 2 5\n''') == '''\n9\n'''\nassert solution('''\n5 2 7\n1 1 1 1 1\n''') == '''\n4\n'''\nassert solution('''\n5 2 6\n1 2 3 4 5\n''') == '''", "solution(example_input) == example_output\n\n# test cases:\n'''\nInput\n2 3 1\n0 0\nOutput\n6\n\nInput\n2 2 1\n1 2\nOutput\n4\n\nInput\n3 1 5\n1 2 3\nOutput\n3\n\nInput\n3 1 7\n1 2 3\nOutput\n1\n\nInput\n3 2 7\n1 2 3\nOutput\n4\n\nInput\n4 2 2\n1 2 1 2\nOutput\n9\n\nInput\n1 1 2\n1\nOutput\n1\n\nInput\n1 2 2\n1\nOutput\n2\n\nInput\n1 3 2\n1\nOutput\n3\n\nInput\n1 2 3\n1\nOutput\n0\n\nInput\n1 3 4\n1\nOutput\n0\n\nInput\n1 2 1\n1\nOutput\n2\n\nInput\n1 3 1\n1\nOutput\n6\n\nInput\n100000 100000 5\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution('''5 3 7\n1 2 3 4 5''') == '12'\nassert solution('''1 1 7\n1''') == '1'\nassert solution('''1 2 7\n1''') == '2'\nassert solution('''10 2 1000000000\n1 1 1 1 1 1 1 1 1 1''') == '90'\nassert solution('''4 3 2\n2 2 2 2''') == '6'\nassert solution('''4 2 2\n1 2 3 4''') == '4'\nassert solution('''3 2 2\n1 2 3''') == '2'\nassert solution('''2 3 2\n1 1''') == '4'\nassert solution('''1 1 2\n1''') == '0'\nassert solution('''1 2 2\n1''') == '0'\nassert solution('''2 1 2\n2 1''') == '1'\nassert solution('''5 4 5\n1 2 3 4 5''') == '22'\nassert solution('''2 1 6\n1 2''') == '1'\nassert solution('''1 1 6\n1''') == '1'\nassert solution('''1 1 5\n1''') == '0'\nassert solution('''3 1 5\n2 3 4''') == '1", "solution('''\n1000000000 1000000000 1000000000\n1000000000\n''') == '1000000000'", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution(\"\"\"\n3 2 3\n1 3 2\n\"\"\") == \"\"\"\n7\n\"\"\"\n\n# benchmarking\nfrom benchmark import benchmark\nprint(\"\\n\")\nbenchmark(solution)", "solution(test_case1) == '3'\nassert solution(test_case2) == '4'\nassert solution(test_case3) == '0'", "solution(\"\"\"\n6 3 2\n0 1 2 3 4 5\n\"\"\") == \"\"\"\n6\n\"\"\"\n\nassert solution(\"\"\"\n1 1 2\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n3 2 1\n1 2 3\n\"\"\") == \"\"\"\n9\n\"\"\"\n\nassert solution(\"\"\"\n2 1 3\n2 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# read the input\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# create prefix sum of a\nprefix_sum = [0] * n\nprefix_sum[0] = a[0]\nfor i in range(1, n):\n    prefix_sum[i] = prefix_sum[i-1] + a[i]\n\n# create prefix sum of b\nc = [0] * (n * m)\nfor i in range(n):\n    for j in range(m):\n        c[m * i + j] = prefix_sum[i]\n\n# create suffix sum of b\nsuffix_sum = [0] * (n * m)\nsuffix_sum[n * m - 1] = c[n * m - 1]\nfor i in range(n * m - 2, -1, -", "solution('''\n3 2 2\n1 2 3\n''') == '''\n5\n'''\n\nassert solution('''\n5 1 7\n1 2 3 4 5\n''') == '''\n0\n'''\n\nassert solution('''\n3 1 5\n1 2 3\n''') == '''\n0\n'''\n\nassert solution('''\n2 2 2\n1 2\n''') == '''\n4\n'''\n\nassert solution('''\n5 2 7\n1 2 3 4 5\n''') == '''\n2\n'''\n\nassert solution('''\n5 2 11\n1 2 3 4 5\n''') == '''\n3\n'''\n\nassert solution('''\n5 2 13\n1 2 3 4 5\n''') == '''\n5\n'''\n\nassert solution('''\n5 2 13\n7 8 9 10 11\n''') == '''\n15\n'''\n\nassert solution('''\n10 2 13\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n33\n'''\n\nassert solution('''\n10 1 13\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n0\n'''\n\nassert solution('''\n10 1 4\n1 2 3 4 5 6 7 8", "solution('''3 2 7\n1 4 2''') == '7'\nassert solution('''7 3 19\n3 5 7 9 11 13 17''') == '1'\nassert solution('''3 2 1000000007\n1 4 2''') == '6'\nassert solution('''6 5 1000000007\n1 1 1 1 1 1''') == '64'\nassert solution('''6 5 1000000007\n1 2 3 4 5 6''') == '64'\nassert solution('''6 5 1000000007\n1 1 1 1 1 1''') == '64'\nassert solution('''6 5 1000000007\n2 3 5 7 11 13''') == '64'\nassert solution('''5 5 1000000007\n2 3 5 7 11''') == '40'\nassert solution('''5 2 1000000007\n2 3 5 7 11''') == '16'\nassert solution('''2 5 1000000007\n1 2''') == '120'\nassert solution('''2 4 1000000007\n1 2''') == '24'\nassert solution('''2 3 1000000007\n1 2''') == '6'\nassert solution('''2 2 1000000007\n1 2''') == '2'\nassert solution('''2 1 1000000007\n1 2''') ==", "(solution(testcase) == \"the_right_answer\"), \"exercise solution is wrong\"\nprint(\"this exercise is done\")", "solution('''\n3 2 2\n1 2 3\n''') == '6'\n\nassert solution('''\n3 3 3\n1 2 3\n''') == '9'\n\nassert solution('''\n3 4 2\n1 1 2\n''') == '12'\n\nassert solution('''\n2 2 1\n1 2\n''') == '6'\n\nassert solution('''\n1 1 2\n1\n''') == '1'\n\nassert solution('''\n2 1 5\n1 1\n''') == '2'\n\nassert solution('''\n4 3 7\n2 3 3 3\n''') == '6'\n\nassert solution('''\n3 1 1\n0 0 0\n''') == '1'\n\nassert solution('''\n2 3 3\n2 2\n''') == '9'\n\nassert solution('''\n4 4 3\n2 3 4 1\n''') == '12'\n\nassert solution('''\n4 1 1\n1 1 1 1\n''') == '1'\n\nassert solution('''\n5 2 4\n0 0 1 1 0\n''') == '2'\n\nassert solution('''\n5 2 7\n0 0 0 1 0\n''') == '1'\n\nassert solution('''\n5 2 7\n0 0 0", "solution(\"\"\"\n3 2 7\n1 1 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n4 3 2\n1 2 3 4\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n4 4 2\n0 0 0 0\n\"\"\") == \"\"\"\n11\n\"\"\"\n\nassert solution(\"\"\"\n1 1 1\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2 2 1\n1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2 2 2\n1 2\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2 2 3\n1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2 3 3\n1 2\n\"\"\") == \"\"\"\n4\n\"\"\"\n\nassert solution(\"\"\"\n4 2 2\n1 2 2 1\n\"\"\") == \"\"\"\n5\n\"\"\"\n\nassert solution(\"\"\"\n5 3 2\n2 2 2 2 2\n\"\"\") == \"\"\"\n12\n\"\"\"\n\nassert solution(\"\"\"\n1 2 2\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2 3 5\n3 3\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n8 8 2\n0 0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n119\n\"\"\"\n\nassert", "solution('''\n5 3 5\n1 1 1 1 1\n''') == '5'\n\nassert solution('''\n5 3 5\n4 4 4 4 4\n''') == '6'\n\nassert solution('''\n5 3 5\n1 1 1 1 2\n''') == '6'\n\nassert solution('''\n5 3 5\n1 1 1 1 3\n''') == '7'\n\nassert solution('''\n10 5 4\n0 0 0 0 0 0 0 0 0 0\n''') == '0'\n\nassert solution('''\n7 4 15\n6 5 2 6 6 4 8\n''') == '6'\n\nassert solution('''\n5 3 5\n0 0 0 0 0\n''') == '5'\n\nassert solution('''\n5 3 5\n5 5 5 5 5\n''') == '6'\n\nassert solution('''\n5 3 5\n5 5 5 5 4\n''') == '6'\n\nassert solution('''\n5 3 5\n5 5 5 5 3\n''') == '7'\n\nassert solution('''\n5 3 5\n5 5 5 5 2\n''') == '7'\n\nassert solution('''\n5 3 5\n5 5 5 5 1\n''') == '7'\n\nassert solution('''\n", "solution('''\n3 2 4\n4 4 4\n''') == '4'\n\nassert solution('''\n5 2 7\n5 7 5 1 7\n''') == '5'\n\nassert solution('''\n5 3 11\n10 6 4 2 11\n''') == '84'\n\nassert solution('''\n4 1 1\n1 1 1 1\n''') == '15'\n\nassert solution('''\n10 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '45'\n\nassert solution('''\n1 4 10\n1\n''') == '1'\n\nassert solution('''\n1 4 3\n2\n''') == '1'\n\nassert solution('''\n1 4 5\n3\n''') == '1'\n\nassert solution('''\n1 4 7\n4\n''') == '1'\n\nassert solution('''\n2 4 5\n2 3\n''') == '1'\n\nassert solution('''\n2 4 7\n4 5\n''') == '1'\n\nassert solution('''\n2 4 9\n6 7\n''') == '1'\n\nassert solution('''\n2 4 11\n8 9\n''') == '1'\n\nassert solution('''\n2 4 5\n1 2\n''')", "solution('''\n3 2 2\n1 2 1\n''') == '4'\n\n# load the test inputs\nwith open('tests/tests.txt') as f:\n    tests = f.readlines()\n\n# test the correctness of solution\nfor test in tests:\n    print(solution(test))", "solution(test_case) == test_result\n\n# submit solution\n#solution(stdin)", "(solution('''\n3 3 3\n2 1 3\n''') == '''\n3\n''')\n\nassert (solution('''\n2 3 5\n1 2\n''') == '''\n0\n''')\n\nassert (solution('''\n4 2 7\n4 1 1 5\n''') == '''\n4\n''')", "solution(sample_input) == sample_output", "solution('''3 2 1\n1 2 3''') == '30'\nassert solution('''3 2 2\n1 2 3''') == '18'\nassert solution('''3 2 3\n1 2 3''') == '11'\nassert solution('''3 2 5\n1 2 3''') == '8'\nassert solution('''1 1 1\n1''') == '1'\nassert solution('''1 1 2\n1''') == '0'\nassert solution('''1 1 100\n1''') == '0'\nassert solution('''1 1 998244353\n1''') == '1'\nassert solution('''1 2 1\n1''') == '3'\nassert solution('''1 2 2\n1''') == '1'\nassert solution('''1 2 3\n1''') == '1'\nassert solution('''2 2 1\n1 2''') == '15'\nassert solution('''2 2 2\n1 2''') == '9'\nassert solution('''2 2 3\n1 2''') == '6'\nassert solution('''3 3 1\n1 2 3''') == '45'\nassert solution('''3 3 2\n1 2 3''') == '27'\nassert solution('''3 3 3\n1 2"], "finish_reason": ["stop", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-88.72748985943406, -17.876799407, -111.24194132711794, -155.1571977646, -218.841013105712, -83.77547937346608, -65.14720107622502, -84.6315320901141, -38.35342586131601, -139.19030812581596, -98.84737773585707, -116.30996846118798, -141.71811310006805, -134.236055224745, -37.52158953067999, -78.46222804323403, -203.35832676966686, -45.507632815890005, -197.9014716756719, -60.18363436643999, -5.1099877, -108.5706574200169, -181.40649910709496, -109.35337701308706, -28.90454603948, -176.86178461436106, -130.9539589803876, -89.62205036287001, -233.57988627586442, -156.8551521410799, -137.8931628012921, -124.88046760199003, -141.62499326371486, -19.950291153299997, -8.0964932835, -45.5054150042, -19.45895451557, -104.75518766310404, -101.40148502226812, -134.06106401771896, -53.152971680099995, -151.27626998234405, -127.44897746279396, -117.57781128287304, -140.01579122373002, -43.080644052349996, -21.972262636399996, -48.49099464542999, -6.99022144586, -74.35236684313303], "mean_logprob": [-0.44363744929717003, -1.6251635824545454, -0.37080647109039333, -0.5171906592153334, -0.7294700436857067, -0.27925159791155335, -0.21715733692075, -0.28210510696704666, -0.35512431353070373, -0.46396769375272, -0.3294912591195233, -0.38769989487062667, -0.47239371033356, -0.4474535174158167, -0.7215690294361539, -0.2615407601441133, -0.6778610892322233, -0.6692298943513235, -0.65967157225224, -0.8982631994991045, -5.1099877, -0.3619021914000567, -0.6046883303569833, -0.36451125671029, -0.5352693711014815, -0.58953928204787, -0.4365131966012917, -0.9958005595874444, -0.7785996209195484, -0.5228505071369334, -0.45964387600430734, -0.41626822533996666, -0.47208331087905, -0.7673188905115385, -0.404824664175, -1.0342139773681818, -0.5120777504097368, -0.3491839588770133, -0.33800495007422665, -0.4468702133923967, -1.77176572267, -0.50425423327448, -0.42482992487598, -0.39192603760957667, -0.4667193040791, -0.5983422785048611, -0.9155109431833334, -0.5986542548818519, -0.6354746768963636, -0.24784122281044332]}
{"prompt": "'''\nThere is a city park represented as a tree with n attractions as its vertices and n - 1 rails as its edges. The i-th attraction has happiness value a_i.\n\nEach rail has a color. It is either black if t_i = 0, or white if t_i = 1. Black trains only operate on a black rail track, and white trains only operate on a white rail track. If you are previously on a black train and want to ride a white train, or you are previously on a white train and want to ride a black train, you need to use 1 ticket.\n\nThe path of a tour must be a simple path \u2014 it must not visit an attraction more than once. You do not need a ticket the first time you board a train. You only have k tickets, meaning you can only switch train types at most k times. In particular, you do not need a ticket to go through a path consisting of one rail color.\n\nDefine f(u, v) as the sum of happiness values of the attractions in the tour (u, v), which is a simple path that starts at the u-th attraction and ends at the v-th attraction. Find the sum of f(u,v) for all valid tours (u, v) (1 \u2264 u \u2264 v \u2264 n) that does not need more than k tickets, modulo 10^9 + 7.\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 2 \u22c5 10^5, 0 \u2264 k \u2264 n-1) \u2014 the number of attractions in the city park and the number of tickets you have.\n\nThe second line contains n integers a_1, a_2,\u2026, a_n (0 \u2264 a_i \u2264 10^9) \u2014 the happiness value of each attraction.\n\nThe i-th of the next n - 1 lines contains three integers u_i, v_i, and t_i (1 \u2264 u_i, v_i \u2264 n, 0 \u2264 t_i \u2264 1) \u2014 an edge between vertices u_i and v_i with color t_i. The given edges form a tree.\n\nOutput\n\nOutput an integer denoting the total happiness value for all valid tours (u, v) (1 \u2264 u \u2264 v \u2264 n), modulo 10^9 + 7.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n4 2\n4 2 3 1\n1 2 0\n2 3 0\n3 4 1\n''') == '14'\n\nassert solution('''\n3 1\n1 2 3\n1 2 0\n2 3 1\n''') == '6'\n\nassert solution('''\n4 0\n4 2 3 1\n1 2 0\n2 3 0\n3 4 1\n''') == '14'\n\nassert solution('''\n5 1\n1 2 3 4 5\n1 2 0\n2 3 0\n3 4 0\n4 5 1\n''') == '25'\n\nassert solution('''\n1 0\n1\n''') == '1'\n\nassert solution('''\n3 0\n1 2 3\n1 2 0\n2 3 0\n''') == '6'\n\nassert solution('''\n3 1\n1 2 3\n1 2 0\n2 3 1\n''') == '6'\n\nassert solution('''\n4 0\n4 2 3 1\n1 2 0\n2 3 0\n3 4 1\n''') == '14'\n\nassert solution('''\n4 1\n4 2 3 1\n1 2 0\n2 3 0\n3 4 1\n''') == '14'\n\nassert solution('''\n4 2\n4 2 3 1\n1 2 0\n2 3", "solution('''3 1\n2 3 4\n1 2 0\n2 3 1''') == '19'\nassert solution('''4 1\n1 2 3 4\n1 2 0\n2 3 0\n3 4 0''') == '10'\nassert solution('''5 0\n5 3 6 1 2\n1 2 0\n1 3 0\n1 4 0\n2 5 0''') == '45'\nassert solution('''5 1\n5 3 6 1 2\n1 2 0\n1 3 0\n1 4 0\n2 5 0''') == '45'\nassert solution('''5 2\n5 3 6 1 2\n1 2 0\n1 3 0\n1 4 0\n2 5 0''') == '63'\nassert solution('''5 1\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 0\n2 5 0''') == '15'\nassert solution('''6 1\n1 2 3 4 5 6\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n2 6 0''') == '21'\nassert solution('''100000 0\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50", "solution('''\n5 2\n1 2 3 4 5\n1 2 0\n1 3 0\n2 4 0\n3 5 0\n''') == '35'\n\nassert solution('''\n3 1\n3 4 5\n1 2 0\n1 3 1\n''') == '23'\n\nassert solution('''\n3 0\n3 4 5\n1 2 0\n1 3 1\n''') == '0'\n\nassert solution('''\n3 0\n3 4 5\n1 2 1\n1 3 1\n''') == '23'\n\n# no need any extra import\n# optimized solution\n\nimport sys\n\ninput = sys.stdin.readline\nMOD = 10**9 + 7\n\nn, k = map(int, input().split())\nh = list(map(int, input().split()))\ng = [[] for _ in range(n)]\nfor _ in range(n - 1):\n    a, b, c = map(int, input().split())\n    a -= 1\n    b -= 1\n    g[a].append((b, c))\n    g[b].append((a, c))\n\nSUM = [0] * n\nans = 0\n\ndef dfs(v, p, x, y):\n    x ^= y\n    ans += h[v]", "solution('''\n3 1\n2 3 4\n1 2 0\n2 3 1\n''') == '40'\n\nassert solution('''\n4 1\n1 2 3 4\n1 2 0\n2 3 0\n3 4 0\n''') == '60'\n\nassert solution('''\n4 0\n1 2 3 4\n1 2 0\n2 3 0\n3 4 0\n''') == '24'\n\nassert solution('''\n3 0\n5 2 1\n1 2 0\n2 3 0\n''') == '13'\n\nassert solution('''\n5 2\n1 1 2 2 3\n1 2 0\n2 3 0\n2 4 1\n2 5 1\n''') == '30'\n\nassert solution('''\n5 0\n5 5 5 5 5\n1 2 0\n2 3 0\n2 4 0\n2 5 0\n''') == '25'\n\nassert solution('''\n5 1\n5 5 5 5 5\n1 2 0\n2 3 0\n2 4 0\n2 5 0\n''') == '70'\n\nassert solution('''\n5 2\n5 5 5 5 5\n1 2 0\n2 3 0\n2 4 0\n2 5 0\n''') == '110'\n\nassert solution('''\n6 2\n1 2 3 1 3 3\n1 2 0", "solution(testdata) == \"\"\n \n# check the performance of solution\nt = timeit.Timer(lambda: solution(testdata))\nprint(\"time :\", t.timeit(1))\nprint(\"memory :\", memory_usage_psutil())", "solution(\"\"\"\n3 1\n1 1 1\n1 2 0\n2 3 1\n\"\"\") == '8'\n\nassert solution(\"\"\"\n3 0\n1 2 3\n1 2 0\n2 3 1\n\"\"\") == '1'\n\nassert solution(\"\"\"\n4 3\n4 2 1 5\n1 2 0\n1 3 0\n1 4 0\n\"\"\") == '17'\n\nassert solution(\"\"\"\n5 1\n2 3 1 1 2\n1 2 0\n1 3 0\n1 4 0\n2 5 1\n\"\"\") == '22'\n\nassert solution(\"\"\"\n3 2\n1 2 3\n1 2 0\n2 3 1\n\"\"\") == '9'\n\nassert solution(\"\"\"\n5 2\n1 2 2 3 5\n1 2 0\n1 3 0\n1 4 0\n2 5 1\n\"\"\") == '23'\n\nassert solution(\"\"\"\n4 1\n1 4 2 3\n1 2 0\n1 3 0\n1 4 0\n\"\"\") == '12'\n\nassert solution(\"\"\"\n6 3\n1 2 2 3 5 6\n1 2 0\n1 3 0\n1 4 0\n2 5 1\n5 6 1\n\"\"\") == '26'\n\nassert solution(\"\"\"\n6 1\n1 2 2 3 5 6\n1 2 0\n1 3 0\n1 4 0\n2 5 1\n5", "solution('''\n3 1\n1 2 3\n1 2 0\n2 3 1\n''') == '13'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1 2 3 4\n1 2 0\n2 3 1\n3 4 0\n''') == '33'\n\n# check the correctness of solution\nassert solution('''\n4 2\n1 2 3 4\n1 2 0\n2 3 1\n3 4 0\n''') == '54'\n\n# check the correctness of solution\nassert solution('''\n5 0\n2 3 3 3 3\n1 2 0\n2 3 1\n3 4 0\n4 5 1\n''') == '21'\n\n# check the correctness of solution\nassert solution('''\n5 1\n2 3 3 3 3\n1 2 0\n2 3 1\n3 4 0\n4 5 1\n''') == '42'\n\n# check the correctness of solution\nassert solution('''\n6 0\n2 3 3 3 3 3\n1 2 0\n2 3 1\n3 4 0\n4 5 1\n5 6 0\n''') == '21'\n\n# check the correctness of solution\nassert solution('''\n6 1\n2 3 3 3 3 3\n1 2 0\n2 3 1\n3 4 0\n4 5 1\n5 6 0\n''') == '", "solution('''3 1\n4 0 4\n1 2 0\n2 3 1''') == '8'\nassert solution('''3 2\n4 0 4\n1 2 0\n2 3 1''') == '14'\nassert solution('''6 0\n20 10 8 25 16 8\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n3 6 0''') == '203'\nassert solution('''6 1\n20 10 8 25 16 8\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n3 6 0''') == '207'\nassert solution('''5 1\n11 13 11 13 8\n1 2 0\n1 3 0\n1 4 0\n1 5 0''') == '41'\nassert solution('''5 2\n11 13 11 13 8\n1 2 0\n1 3 0\n1 4 0\n1 5 0''') == '45'\nassert solution('''5 1\n11 13 11 13 8\n1 2 0\n1 3 1\n1 4 0\n1 5 0''') == '36'\nassert solution('''5 2\n11 13 11 13 8\n1 2 0\n1 3 1\n1 4 0\n1 5 0''') == '40'\nassert solution('''5 1\n11 13 11 13 8\n1 2 0\n1 3 1\n1", "solution(\"test\") == \"test\"", "solution(example_input) == example_output", "solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"7\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"4\"\nassert solution(\"7\") == \"6\"\nassert solution(\"8\") == \"3\"\nassert solution(\"9\") == \"6\"\nassert solution(\"10\") == \"2\"\nassert solution(\"11\") == \"6\"\nassert solution(\"12\") == \"8\"\nassert solution(\"13\") == \"2\"\nassert solution(\"14\") == \"9\"\nassert solution(\"15\") == \"4\"\nassert solution(\"16\") == \"4\"\nassert solution(\"17\") == \"9\"\nassert solution(\"18\") == \"5\"\nassert solution(\"19\") == \"1\"\nassert solution(\"20\") == \"9\"\nassert solution(\"21\") == \"2\"\nassert solution(\"22\") == \"5\"\nassert solution(\"23\") == \"3\"\nassert solution(\"24\") == \"2\"\nassert solution(\"25\") == \"5\"\nassert solution(\"26\") == \"5\"\nassert solution(\"27\") == \"5\"\nassert solution(\"28\") == \"3\"\nassert solution(\"29\") == \"7\"\nassert solution(\"30\") == \"5\"\nassert", "solution(example) == '14'\n# assert solution(example) == '?\\n'\n# stdin = \"\"\n# for i in range(10000):\n#     stdin += f\"{i+1} {i+2} 1\\n\"\n# assert solution(stdin) == '?\\n'", "solution(SAMPLE) == str(SAMPLE_OUT)", "solution('''\n4 2\n1 2 2 1\n1 2 0\n1 3 0\n2 4 0\n''') == '9'\n\nassert solution('''\n3 0\n0 1 0\n1 2 0\n2 3 0\n''') == '3'\n\nassert solution('''\n3 1\n0 1 0\n1 2 0\n2 3 0\n''') == '4'\n\nassert solution('''\n4 0\n0 1 1 0\n1 2 0\n2 3 0\n3 4 0\n''') == '6'\n\nassert solution('''\n4 1\n0 1 1 0\n1 2 0\n2 3 0\n3 4 0\n''') == '7'\n\nassert solution('''\n6 0\n0 1 1 0 1 1\n1 2 0\n2 3 0\n3 4 0\n4 5 0\n5 6 0\n''') == '10'\n\nassert solution('''\n6 1\n0 1 1 0 1 1\n1 2 0\n2 3 0\n3 4 0\n4 5 0\n5 6 0\n''') == '13'\n\nassert solution('''\n6 2\n0 1 1 0 1 1\n1 2 0\n2 3 0\n3 4 0\n4 5 0\n5 6 0\n''') == '22'\n\nassert solution('''\n6 3\n", "solution(\"\"\"n, k\na_1, a_2, ..., a_n\nu_1, v_1, t_1\nu_2, v_2, t_2\n...\nu_{n-1}, v_{n-1}, t_{n-1}\"\"\") == \"the total happiness value\"", "solution('''4 3\n2 3 4 2\n1 2 0\n2 3 0\n3 4 1\n''') == '28'\n\nassert solution('''4 2\n2 3 4 2\n1 2 0\n2 3 0\n3 4 1\n''') == '15'\n\nassert solution('''4 1\n1 2 3 4\n1 2 0\n2 3 0\n3 4 0\n''') == '10'\n\nassert solution('''4 0\n1 2 3 4\n1 2 0\n2 3 0\n3 4 0\n''') == '5'\n\nassert solution('''10 2\n3 4 2 1 5 6 2 7 3 8\n1 2 0\n2 3 0\n1 4 0\n2 5 0\n2 6 0\n2 7 0\n2 8 0\n2 9 0\n9 10 1\n''') == '186'\n\nassert solution('''10 1\n3 4 2 1 5 6 2 7 3 8\n1 2 0\n2 3 0\n1 4 0\n2 5 0\n2 6 0\n2 7 0\n2 8 0\n2 9 0\n9 10 1\n''') == '105'\n\nassert solution('''10 0\n3 4 2 1 5 6 2 7 3 8\n1 2 0\n2 3 0\n1 4 0\n2 5 0\n2 6 0\n2 7 0\n", "solution('''\n2 0\n2 3\n1 2 0\n2 1 1\n''') == '3'\n\nassert solution('''\n3 1\n3 5 1\n1 2 0\n2 3 1\n3 1 0\n''') == '9'\n\nassert solution('''\n3 2\n3 5 1\n1 2 0\n2 3 1\n3 1 0\n''') == '9'\n\nassert solution('''\n5 3\n1 2 3 4 5\n1 2 0\n2 3 1\n2 4 0\n4 5 1\n''') == '15'\n\nassert solution('''\n1 0\n1\n''') == '1'\n\nassert solution('''\n2 1\n1 2\n1 2 0\n2 1 1\n''') == '2'\n\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 0\n2 3 1\n3 4 0\n4 5 1\n5 6 0\n6 7 1\n7 8 0\n8 9 1\n9 10 0\n''') == '55'\n\nassert solution('''\n3 1\n1 2 3\n1 2 0\n2 3 1\n3 1 0\n''') == '6'\n\nassert solution('''\n100000 100000\n10 20 30 40 50 60 70 80 90 100 110 120 130", "solution(INPUT) == OUTPUT\n\n# get input and output\nstdin = input()\n\n# print solution\nprint(solution(stdin))", "solution('''\n2 2\n1 1\n1 2 0\n''') == '2'\n\nassert solution('''\n3 2\n1 2 3\n1 2 0\n2 3 1\n''') == '14'\n\nassert solution('''\n10 0\n1 2 3 4 5 6 7 8 9 10\n1 2 0\n1 3 0\n1 4 0\n2 5 0\n2 6 0\n3 7 0\n3 8 0\n4 9 0\n4 10 0\n''') == '55'\n\nassert solution('''\n5 1\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 0\n2 5 0\n''') == '30'\n\nassert solution('''\n4 2\n1 2 3 4\n1 2 0\n1 3 0\n2 4 0\n''') == '10'\n\nassert solution('''\n4 1\n1 2 3 4\n1 2 0\n1 3 0\n2 4 0\n''') == '9'\n\nassert solution('''\n6 3\n1 2 3 4 5 6\n1 2 0\n1 3 0\n1 4 0\n2 5 0\n2 6 0\n''') == '19'\n\nassert solution('''\n6 4\n1 2 3 4 5 6\n1 2 0\n1 3 0\n1 4 0\n2 5 0\n2", "solution('''\n3 1\n1 1 1\n1 2 0\n2 3 1\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1 2 3 4\n1 2 0\n1 3 0\n2 4 0\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n5 2\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 0\n2 5 0\n''') == '20'\n\n# check the correctness of solution\nassert solution('''\n5 2\n1 2 3 4 5\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n''') == '21'\n\n# check the correctness of solution\nassert solution('''\n6 3\n1 2 3 4 5 6\n1 2 0\n1 3 0\n1 4 0\n2 5 0\n2 6 0\n''') == '30'\n\n# check the correctness of solution\nassert solution('''\n6 3\n1 2 3 4 5 6\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n3 6 0\n''') == '31'\n\n# check the correctness of solution\nassert solution('''\n6 4\n1 2 3 4 5 6\n1 2 0\n1 3 0\n2 4 0\n2 5", "solution(stdin) == stdout", "solution('''2 0\n100\n1 2 0''') == '100'\nassert solution('''3 1\n10 20 30\n1 2 0\n2 3 1''') == '60'\nassert solution('''4 1\n10 20 30 40\n1 2 0\n2 3 1\n3 4 0''') == '180'\nassert solution('''4 1\n10 20 30 40\n1 2 0\n2 3 1\n3 4 1''') == '90'\nassert solution('''3 1\n10 20 30\n1 2 0\n2 3 1''') == '60'\nassert solution('''3 2\n10 20 30\n1 2 0\n2 3 1''') == '340'\nassert solution('''3 2\n100 100 100\n1 2 0\n2 3 1''') == '3300'\nassert solution('''5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n1 2 0\n2 3 1\n3 4 0\n4 5 1''') == '5000000000'\nassert solution('''5 2\n1000000000 1000000000 1000000000 1000000000 1000000000\n1 2 0\n2 3 1\n3 4 0\n4 5 1''') == '11153960984200000000'\nassert solution('''2 0\n1000000000 1000000000\n1 2 0''') == '", "solution('''\n4 2\n1 2 3 4\n1 2 0\n2 3 0\n3 4 1\n''') == '36'\n\n# check the correctness of solution\nassert solution('''\n5 2\n1 2 3 4 5\n1 2 0\n2 3 0\n3 4 1\n4 5 1\n''') == '68'\n\n# check the correctness of solution\nassert solution('''\n5 1\n1 2 3 4 5\n1 2 0\n2 3 0\n3 4 1\n4 5 1\n''') == '36'\n\n# check the correctness of solution\nassert solution('''\n5 0\n1 2 3 4 5\n1 2 0\n2 3 0\n3 4 1\n4 5 1\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n5 1\n1 2 3 4 5\n1 2 0\n2 3 0\n3 4 1\n4 5 1\n''') == '36'\n\n# check the correctness of solution\nassert solution('''\n1 0\n0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1 1\n0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n2 0\n0 1\n1 2 1\n''') == '0'\n\n", "solution('''\n3 2\n1 2 3\n1 2 0\n2 3 1\n''') == '6'\n\nassert solution('''\n3 0\n1 2 3\n1 2 0\n2 3 1\n''') == '15'\n\nassert solution('''\n2 0\n1 1\n1 2 0\n''') == '2'\n\nassert solution('''\n5 2\n1 1 1 1 1\n1 2 0\n2 3 1\n3 4 0\n3 5 1\n''') == '10'\n\nassert solution('''\n3 1\n1 2 3\n1 2 0\n2 3 1\n''') == '5'\n\nassert solution('''\n5 2\n6 4 2 4 8\n1 2 0\n2 3 1\n2 4 0\n4 5 1\n''') == '57'\n\nassert solution('''\n5 2\n1 1 1 1 1\n1 2 0\n2 3 1\n2 4 0\n4 5 1\n''') == '10'\n\nassert solution('''\n20 19\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 0\n2 3 1\n3 4 0\n3 5 1\n3 6 0\n3 7 1\n7 8 0\n7 9 1\n7 10 0\n7 11 1\n7 12 0", "\"10\\n\" == solution(\"\"\"\\\n3 2\n1 2 3\n1 2 0\n2 3 1\\\n\"\"\")\nassert \"1\\n\" == solution(\"\"\"\\\n3 1\n1 2 3\n1 2 0\n2 3 1\\\n\"\"\")\nassert \"108\\n\" == solution(\"\"\"\\\n4 1\n1 2 3 4\n1 2 0\n2 3 1\n3 4 0\\\n\"\"\")\nassert \"2\\n\" == solution(\"\"\"\\\n4 0\n1 2 3 4\n1 2 0\n2 3 1\n3 4 0\\\n\"\"\")\nassert \"0\\n\" == solution(\"\"\"\\\n2 0\n2 3\n1 2 0\\\n\"\"\")\nassert \"12\\n\" == solution(\"\"\"\\\n2 1\n3 1\n1 2 0\\\n\"\"\")\nassert \"12\\n\" == solution(\"\"\"\\\n2 1\n3 4\n1 2 0\\\n\"\"\")\nassert \"0\\n\" == solution(\"\"\"\\\n1 0\n1\n\"\"\")\nassert \"1\\n\" == solution(\"\"\"\\\n2 0\n1\n1 2 0\\\n\"\"\")\nassert \"2\\n\" == solution(\"\"\"\\\n2 1\n1 2\n1 2 0\\\n\"\"\")\nassert \"0\\n\" == solution(\"\"\"\\\n2 0\n2 1\n", "solution(stdin) == stdout\nprint(\"success!\")", "solution(sampleIn) == sampleOut\n# run the solution\nassert solution(userIn) == userOut", "(solution(stdin=open(\"data/input.txt\", \"r\").read()) == open(\"data/output.txt\", \"r\").read().strip())", "solution('''\n2 2\n1 2\n1 2 0\n2 1 1\n''') == '3'\n\nassert solution('''\n4 2\n1 1 2 2\n1 2 0\n2 3 0\n3 4 0\n''') == '10'\n\nassert solution('''\n2 2\n1 1\n1 2 0\n2 1 1\n''') == '2'\n\nassert solution('''\n4 2\n1 1 2 2\n1 2 0\n2 3 0\n3 4 1\n''') == '12'\n\nassert solution('''\n5 1\n1 1 1 1 1\n1 2 0\n2 3 0\n2 4 0\n2 5 0\n''') == '5'\n\nassert solution('''\n10 2\n976 703 262 649 576 987 697 495 554 62\n1 2 0\n1 3 0\n1 4 0\n2 5 0\n2 6 0\n3 7 0\n3 8 0\n4 9 0\n4 10 0\n''') == '202992'\n\nassert solution('''\n1 1\n1\n''') == '1'\n\nassert solution('''\n1 0\n1\n''') == '1'\n\nassert solution('''\n2 0\n1 2\n1 2 0\n2 1 1\n''') == '1'", "solution(\"\") == \"\", \"sample_input_1.txt\"\n\ndef tests():\n    pass\n\nif __name__ == \"__main__\":\n    tests()", "solution(stdin='3 2\\n3 2 1\\n1 2 0\\n2 3 1') == '16'\nassert solution(stdin='3 0\\n3 2 1\\n1 2 0\\n2 3 1') == '0'\nassert solution(stdin='5 0\\n5 4 3 2 1\\n1 2 0\\n1 3 0\\n1 4 0\\n1 5 0') == '60'\nassert solution(stdin='5 1\\n5 4 3 2 1\\n1 2 0\\n1 3 0\\n1 4 0\\n1 5 0') == '15'\nassert solution(stdin='5 2\\n5 4 3 2 1\\n1 2 0\\n1 3 0\\n1 4 0\\n1 5 0') == '60'\nassert solution(stdin='5 3\\n5 4 3 2 1\\n1 2 0\\n1 3 0\\n1 4 0\\n1 5 0') == '15'\nassert solution(stdin='5 4\\n5 4 3 2 1\\n1 2 0\\n1 3 0\\n1 4 0\\n1 5 0') == '60'\nassert solution(stdin='6 5\\n6 5 4 3 2 1\\n1 2 0\\n1 3 0\\n1 4 0\\n1 5 0\\n", "solution('''\n8 2\n1 2 1 2 1 1 2 1\n1 2 0\n1 3 0\n1 4 0\n2 5 0\n2 6 0\n3 7 0\n3 8 0\n''') == '12'\nassert solution('''\n5 3\n1 2 1 2 1\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n''') == '9'\nassert solution('''\n5 0\n1 2 1 2 1\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n''') == '7'\nassert solution('''\n5 1\n1 2 1 2 1\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n''') == '11'\nassert solution('''\n5 0\n1 0 0 0 0\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n''') == '0'\nassert solution('''\n6 2\n1 2 1 2 1 1\n1 2 0\n1 3 0\n1 4 0\n2 5 0\n2 6 0\n''') == '12'\nassert solution('''\n6 1\n1 2 1 2 1 1\n1 2 0\n1 3 0\n1 4 0\n2 5 0\n2 6 0\n''') == '12'\nassert solution('''\n8 0\n1", "solution('''\n5 1\n2 3 3 3 2\n1 2 0\n1 3 0\n2 4 1\n2 5 1\n''') == '36'\n\nassert solution('''\n5 0\n1 2 3 4 5\n1 2 0\n1 3 0\n2 4 1\n2 5 1\n''') == '10'\n\nassert solution('''\n3 0\n1 2 3\n1 2 0\n2 3 0\n''') == '8'\n\nassert solution('''\n1 0\n1\n''') == '1'\n\nassert solution('''\n2 0\n1 2\n1 2 0\n''') == '3'\n\nassert solution('''\n2 1\n1 2\n1 2 0\n''') == '6'\n\nassert solution('''\n2 1\n2 2\n1 2 0\n''') == '4'\n\nassert solution('''\n4 0\n4 4 4 4\n1 2 0\n1 3 0\n1 4 0\n''') == '32'\n\nassert solution('''\n4 1\n4 4 4 4\n1 2 0\n1 3 0\n1 4 0\n''') == '64'\n\nassert solution('''\n4 1\n4 1 4 4\n1 2 0\n1 3 0\n1 4 0\n''') == '64'\n\nassert", "solution(\"\"\"\n5 4\n1 2 1 2 1\n1 2 0\n1 3 0\n2 4 0\n3 5 0\n\"\"\") == \"22\"\n\n# check runtime\nassert solution(\"\"\"\n2 1\n1 2\n1 2 0\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 2\n3 2 1\n1 2 0\n1 3 0\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1 0\n2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 0\n1 2\n1 2 0\n\"\"\") == \"3\"\n\n# check corner cases\nassert solution(\"\"\"\n2 1\n2 2\n1 2 0\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3 2\n3 2 2\n1 2 0\n1 3 0\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n3 2\n3 2 2\n1 2 0\n1 3 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n3 2\n3 2 2\n1 2 1\n1 3 0\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n3 2\n3 2 2\n1 2 1\n1 3 1\n\"\"\") == \"11\"\n\nassert solution(\"\"\"\n3 1\n3 2 2\n1 2 0\n1 3 0\n\"\"\") == \"5\"\n", "solution('''\n3 1\n1 2 3\n1 2 0\n2 3 1\n''') == '24'\n\nassert solution('''\n2 0\n2 1\n1 2 0\n''') == '3'\n\nassert solution('''\n4 1\n1 2 3 4\n1 2 0\n2 3 1\n3 4 0\n''') == '40'\n\nassert solution('''\n4 2\n1 2 3 4\n1 2 0\n2 3 1\n3 4 0\n''') == '46'\n\nassert solution('''\n10 4\n1 2 3 4 5 6 7 8 9 10\n1 2 0\n2 3 1\n3 4 0\n4 5 1\n5 6 0\n6 7 1\n7 8 0\n8 9 1\n9 10 0\n''') == '235'", "solution('''\n5 2\n1 2 3 4 5\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n''') == '17'\n\n# check the correctness of solution\nassert solution('''\n5 1\n1 2 3 4 5\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n5 2\n1 2 3 4 5\n1 2 0\n1 3 0\n2 4 1\n2 5 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n6 0\n1 2 3 4 5 6\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n3 6 0\n''') == '15'\n\n# check the correctness of solution\nassert solution('''\n7 1\n1 2 3 4 5 6 7\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n3 6 0\n3 7 0\n''') == '15'\n\n# check the correctness of solution\nassert solution('''\n7 2\n1 2 3 4 5 6 7\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n3 6 0\n3 7 0\n''') == '21'\n\n# check the correctness of solution\n", "solution('''\n4 1\n1 2 3 4\n1 2 0\n2 3 0\n3 4 0\n''') == '4'\n\nassert solution('''\n4 0\n1 2 3 4\n1 2 0\n2 3 0\n3 4 0\n''') == '1'\n\nassert solution('''\n4 0\n1 2 3 4\n1 2 0\n2 3 1\n3 4 0\n''') == '4'\n\nassert solution('''\n4 0\n1 2 3 4\n1 2 1\n2 3 0\n3 4 0\n''') == '4'\n\nassert solution('''\n4 0\n1 2 3 4\n1 2 1\n2 3 1\n3 4 0\n''') == '3'\n\nassert solution('''\n4 0\n1 2 3 4\n1 2 1\n2 3 1\n3 4 1\n''') == '1'\n\nassert solution('''\n4 1\n1 2 3 4\n1 2 1\n2 3 1\n3 4 1\n''') == '4'\n\nassert solution('''\n4 2\n1 2 3 4\n1 2 1\n2 3 1\n3 4 1\n''') == '9'\n\n# print the result\nfor key, value in input.items():\n    print(solution(value))", "solution(example_input) == example_output\n# speedtest\ntest_set = [\n    example_input,\n    example_input2,\n    example_input3,\n    example_input4,\n    example_input5,\n    example_input6,\n    example_input7,\n    example_input8,\n    example_input9,\n    example_input10,\n    example_input11,\n    example_input12,\n    example_input13,\n    example_input14,\n    example_input15,\n    example_input16,\n    example_input17,\n    example_input18,\n    example_input19,\n    example_input20,\n    example_input21,\n    example_input22,\n    example_input23,\n    example_input24,\n    example_input25,\n    example_input26,\n    example_input27,\n    example_input28,\n    example_input29,\n    example_input30,\n    example_input31,\n    example_input32,\n    example_input33,\n    example_input34,\n    example_input35,\n    example_input36,\n    example_input37,\n    example_input38,\n    example_input39,\n    example_input40,\n", "solution(\"\"\"\n5 2\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 1\n4 5 1\n\"\"\") == \"\"\"\n21\n\"\"\"\n\nassert solution(\"\"\"\n3 0\n1 2 3\n1 2 0\n2 3 0\n\"\"\") == \"\"\"\n15\n\"\"\"\n\nassert solution(\"\"\"\n4 1\n1 2 3 4\n1 2 0\n1 3 1\n3 4 0\n\"\"\") == \"\"\"\n26\n\"\"\"\n\nassert solution(\"\"\"\n4 1\n0 0 0 0\n1 2 0\n1 3 1\n3 4 0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n5 1\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 1\n4 5 1\n\"\"\") == \"\"\"\n9\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 1\n4 5 1\n\"\"\") == \"\"\"\n19\n\"\"\"\n\nassert solution(\"\"\"\n3 2\n1 2 3\n1 2 0\n2 3 0\n\"\"\") == \"\"\"\n19\n\"\"\"\n\nassert solution(\"\"\"\n2 1\n0 0\n1 2 0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n5 2\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 1\n", "str(solution('''3 1\n1 2 3\n1 2 0\n2 3 1''')) == '14'\nassert str(solution('''6 2\n10 10 10 10 10 10\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n3 6 0''')) == '91'\nassert str(solution('''7 2\n100 100 100 100 100 100 100\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n3 6 0\n3 7 0''')) == '28800'\nassert str(solution('''5 2\n1 1 2 3 4\n1 2 0\n1 3 0\n3 4 0\n3 5 0''')) == '41'\nassert str(solution('''5 2\n10 10 2 10 10\n1 2 0\n1 3 0\n3 4 0\n3 5 0''')) == '500'\nassert str(solution('''5 2\n10 10 2 10 10\n1 2 0\n1 3 0\n3 4 1\n3 5 1''')) == '700'\nassert str(solution('''5 2\n10 10 10 10 10\n1 2 0\n1 3 0\n3 4 1\n3 5 1''')) == '1000'\nassert str(solution('''5 2\n1 1 2 3", "solution('''\n\n''') == '''\n\n'''", "solution(stdin=\"3 1\\n1 2 3\\n1 2 0\\n2 3 0\") == \"15\", \"Wrong Answer\"\nassert solution(stdin=\"3 2\\n1 2 3\\n1 2 0\\n2 3 0\") == \"21\", \"Wrong Answer\"\nassert solution(stdin=\"4 2\\n1 2 3 4\\n1 2 0\\n2 3 0\\n3 4 0\") == \"30\", \"Wrong Answer\"\nassert solution(stdin=\"4 2\\n1 2 3 4\\n1 2 0\\n2 3 1\\n3 4 0\") == \"40\", \"Wrong Answer\"\nassert solution(stdin=\"4 2\\n1 2 3 4\\n1 2 0\\n2 3 1\\n3 4 1\") == \"21\", \"Wrong Answer\"\nassert solution(stdin=\"4 2\\n1 2 3 4\\n1 2 1\\n2 3 0\\n3 4 0\") == \"40\", \"Wrong Answer\"\nassert solution(stdin=\"6 2\\n1 2 3 4 5 6\\n1 2 0\\n2 3 0\\n2 4 1\\n2 5 1\\n2 6 1\") == \"109\", \"Wrong Answer\"\nassert solution(stdin=\"6 2\\n1 2 3 4 5 6\\n1 2 0", "solution('''\n4 3\n1 2 3 4\n1 2 0\n2 3 0\n3 4 1\n''') == '22'\n\nassert solution('''\n5 2\n10 20 30 40 50\n1 2 0\n2 3 0\n3 4 0\n4 5 1\n''') == '4950'\n\nassert solution('''\n5 2\n0 0 0 0 0\n1 2 0\n2 3 0\n3 4 0\n4 5 1\n''') == '0'\n\nassert solution('''\n5 1\n10 20 30 40 50\n1 2 0\n2 3 0\n3 4 0\n4 5 1\n''') == '60'\n\nassert solution('''\n3 0\n3 2 1\n1 2 0\n2 3 0\n''') == '3'\n\nassert solution('''\n5 0\n1 1 1 1 1\n1 2 0\n2 3 0\n3 4 0\n4 5 1\n''') == '1'\n\nassert solution('''\n4 0\n5 5 5 5\n1 2 0\n2 3 0\n3 4 0\n''') == '5'\n\nassert solution('''\n4 0\n100 10 10 100\n1 2 0\n2 3 0\n3 4 0\n''') == '110'\n\n# STRESS TEST\n\n# from random import seed, random", "solution(\"\"\"\n5 4\n1 1 1 1 1\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n\"\"\") == '12'\n\nassert solution(\"\"\"\n5 3\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n\"\"\") == '19'\n\nassert solution(\"\"\"\n5 2\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n\"\"\") == '25'\n\nassert solution(\"\"\"\n5 1\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n\"\"\") == '31'\n\nassert solution(\"\"\"\n5 0\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n\"\"\") == '36'\n\nassert solution(\"\"\"\n5 4\n1 2 3 4 5\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n\"\"\") == '36'\n\nassert solution(\"\"\"\n3 1\n1 2 3\n1 2 0\n1 3 0\n\"\"\") == '5'\n\nassert solution(\"\"\"\n3 0\n1 2 3\n1 2 0\n1 3 0\n\"\"\") == '6'\n\nassert solution(\"\"\"\n3 2\n1 2 3\n1 2 0\n1", "solution(\"\"\"\n4 2\n1 2 3 4\n1 2 0\n1 3 0\n3 4 1\n\"\"\") == \"31\"\n\nassert solution(\"\"\"\n4 0\n1 2 3 4\n1 2 0\n1 3 0\n3 4 1\n\"\"\") == \"15\"\n\nassert solution(\"\"\"\n1 0\n0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 1\n0 0 1 0\n1 2 0\n1 3 0\n3 4 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n7 3\n2 5 5 2 4 4 6\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n5 6 0\n5 7 1\n\"\"\") == \"26\"\n\nassert solution(\"\"\"\n7 3\n2 5 5 2 4 4 6\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n5 6 1\n5 7 1\n\"\"\") == \"26\"\n\nassert solution(\"\"\"\n7 3\n2 5 5 2 4 4 6\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n5 6 1\n5 7 0\n\"\"\") == \"26\"\n\nassert solution(\"\"\"\n7 3\n2 5 5 2 4 4 6\n1 2 0\n1 3 0\n2 4 0\n2 5 0\n5 6 0\n5 7 1\n", "solution(\"\"\"\n4 2\n1 2 3 4\n1 2 0\n1 3 0\n3 4 1\n\"\"\") == '19'\nassert solution(\"\"\"\n4 0\n1 2 3 4\n1 2 0\n1 3 0\n3 4 1\n\"\"\") == '10'\nassert solution(\"\"\"\n4 3\n1 2 3 4\n1 2 0\n1 3 0\n3 4 1\n\"\"\") == '37'\nassert solution(\"\"\"\n4 0\n1 2 3 4\n1 2 1\n1 3 1\n3 4 1\n\"\"\") == '6'\nassert solution(\"\"\"\n5 0\n1 2 3 4 5\n1 2 0\n1 3 0\n3 4 0\n4 5 0\n\"\"\") == '15'\nassert solution(\"\"\"\n5 1\n1 2 3 4 5\n1 2 0\n1 3 0\n3 4 0\n4 5 0\n\"\"\") == '40'\nassert solution(\"\"\"\n5 3\n1 2 3 4 5\n1 2 0\n1 3 0\n3 4 0\n4 5 0\n\"\"\") == '140'\nassert solution(\"\"\"\n5 4\n1 2 3 4 5\n1 2 0\n1 3 0\n3 4 0\n4 5 0\n\"\"\") == '175'\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n1 2 0\n1 3 0\n3 4 0", "solution('''\n5 2\n1 1 2 3\n1 2 0\n1 3 0\n2 4 0\n2 5 1\n''') == '19'\n\nassert solution('''\n3 1\n1 1 1\n1 2 0\n2 3 1\n''') == '5'\n\nassert solution('''\n4 2\n1 1 1 1\n1 2 0\n2 3 0\n2 4 1\n''') == '6'\n\nassert solution('''\n5 1\n1 1 1 1 1\n1 2 0\n1 3 0\n2 4 0\n2 5 1\n''') == '20'\n\nassert solution('''\n5 0\n1 1 1 1 1\n1 2 0\n1 3 0\n2 4 0\n2 5 1\n''') == '15'\n\nassert solution('''\n4 0\n1 1 1 1\n1 2 0\n2 3 0\n2 4 1\n''') == '3'\n\nassert solution('''\n7 2\n1 1 1 1 1 1 1\n1 2 0\n1 3 0\n2 4 0\n2 5 1\n5 6 0\n5 7 1\n''') == '56'\n\nassert solution('''\n6 0\n1 1 1 1 1 1\n1 2 0\n1 3 0\n2 4 0\n2 5 1\n3 6 1\n''') ==", "solution(\"\"\"\n2 1\n7 8\n1 2 0\n\"\"\") == '23'\n\nassert solution(\"\"\"\n3 2\n4 2 8\n1 2 0\n2 3 1\n\"\"\") == '18'\n\nassert solution(\"\"\"\n2 0\n1000 999\n1 2 0\n\"\"\") == '999'\n\nassert solution(\"\"\"\n2 1\n10 10\n1 2 0\n\"\"\") == '20'\n\nassert solution(\"\"\"\n2 0\n10 10\n1 2 1\n\"\"\") == '10'\n\nassert solution(\"\"\"\n3 0\n10 10 10\n1 2 0\n2 3 1\n\"\"\") == '30'\n\nassert solution(\"\"\"\n3 0\n10 10 10\n1 2 1\n2 3 0\n\"\"\") == '20'\n\nassert solution(\"\"\"\n3 0\n10 10 10\n1 2 1\n1 3 0\n\"\"\") == '20'\n\nassert solution(\"\"\"\n3 1\n10 10 10\n1 2 1\n1 3 0\n\"\"\") == '30'\n\nassert solution(\"\"\"\n3 1\n10 10 10\n1 2 1\n2 3 0\n\"\"\") == '30'\n\nassert solution(\"\"\"\n3 1\n10 10 10\n1 2 0\n2 3 1\n\"\"\") == '30'\n\nassert solution(\"\"\"\n3 1\n10 10 10\n1", "solution('''\n6 3\n1 3 3 2 3 1\n1 2 0\n1 3 0\n2 4 0\n3 5 0\n3 6 1\n''') == '39'\n\nassert solution('''\n6 2\n1 3 3 2 3 1\n1 2 0\n1 3 0\n2 4 0\n3 5 0\n3 6 1\n''') == '38'\n\nassert solution('''\n6 1\n1 3 3 2 3 1\n1 2 0\n1 3 0\n2 4 0\n3 5 0\n3 6 1\n''') == '33'\n\nassert solution('''\n6 0\n1 3 3 2 3 1\n1 2 0\n1 3 0\n2 4 0\n3 5 0\n3 6 1\n''') == '12'\n\nassert solution('''\n5 2\n3 5 4 1 7\n1 2 0\n1 3 0\n1 4 0\n4 5 1\n''') == '37'\n\nassert solution('''\n6 3\n5 5 5 5 5 5\n1 2 0\n1 3 0\n2 4 0\n3 5 0\n3 6 1\n''') == '30'\n\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 0\n1 3 0\n2 4 0\n3 5 0\n4 6 0\n5 7", "solution('''\n3 1\n1 2 3\n1 2 0\n2 3 1\n''') == '15'\n\n# check the correctness of solution\nassert solution('''\n4 2\n1 2 3 4\n1 2 0\n2 3 1\n3 4 0\n''') == '37'\n\nprint('correct!')"], "finish_reason": ["length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "stop"], "sum_logprob": [-69.65089670392305, -90.94233083068596, -137.50809275050696, -108.09393584642899, -46.14314769527001, -126.26752371132996, -64.347065391383, -123.59668055841401, -9.085182060000001, -6.8204676503, -80.60186699421, -58.62942076297002, -14.185716364, -74.3275821710039, -24.45561270673999, -96.52689579841808, -96.57142559392196, -29.75049634783, -78.707716908405, -62.84718065415398, -5.3347849586, -120.42282732339706, -62.633557197550026, -106.252056356906, -104.30723362462298, -14.439367165599998, -22.9442438515, -24.50150181169999, -167.914564726389, -34.21603361826, -66.11458485788857, -84.85712696028997, -91.64410359754802, -110.62357340539884, -56.874140048999976, -61.726364150250006, -75.06594542865501, -42.32535360792106, -87.30945192101606, -123.80548983212192, -8.9723307373, -74.96341025551409, -122.25638470821407, -63.00273683324499, -98.04034569522999, -71.10952087849202, -85.93343005025999, -90.94524921136899, -97.71501621401805, -33.65367980133999], "mean_logprob": [-0.23216965567974332, -0.30314110276895334, -0.4583603091683567, -0.3603131194880967, -0.7955715119874138, -0.42089174570443333, -0.21449021797127668, -0.4119889351947133, -1.0094646733333335, -0.6200425136636364, -0.2686728899807, -0.8031427501776712, -1.0132654545714286, -0.24775860723668, -0.32607483608986665, -0.32175631932806, -0.32190475197974, -0.8264026763286111, -0.26235905636135, -0.20949060218051332, -0.5927538842888889, -0.4014094244113233, -0.20877852399183333, -0.35417352118968665, -0.3476907787487433, -0.9626244777066667, -0.9560101604791666, -0.6805972725472222, -0.55971521575463, -0.8554008404565, -0.220381949526295, -0.28285708986763336, -0.30548034532516, -0.36874524468466335, -0.3107876505409836, -0.2057545471675, -0.2544608319615424, -0.14108451202640332, -0.29103150640338665, -0.41268496610707334, -0.56077067108125, -0.249878034185047, -0.40752128236071333, -0.21000912277748332, -0.32680115231743334, -0.23703173626164, -0.2864447668342, -0.30315083070456333, -0.32571672071339336, -0.44871573068453335]}
{"prompt": "'''\nMr. Chanek lives in a city represented as a plane. He wants to build an amusement park in the shape of a circle of radius r. The circle must touch the origin (point (0, 0)).\n\nThere are n bird habitats that can be a photo spot for the tourists in the park. The i-th bird habitat is at point p_i = (x_i, y_i). \n\nFind the minimum radius r of a park with at least k bird habitats inside. \n\nA point is considered to be inside the park if and only if the distance between p_i and the center of the park is less than or equal to the radius of the park. Note that the center and the radius of the park do not need to be integers.\n\nIn this problem, it is guaranteed that the given input always has a solution with r \u2264 2 \u22c5 10^5.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 n) \u2014 the number of bird habitats in the city and the number of bird habitats required to be inside the park.\n\nThe i-th of the next n lines contains two integers x_i and y_i (0 \u2264 |x_i|, |y_i| \u2264 10^5) \u2014 the position of the i-th bird habitat.\n\nOutput\n\nOutput a single real number r denoting the minimum radius of a park with at least k bird habitats inside. It is guaranteed that the given input always has a solution with r \u2264 2 \u22c5 10^5.\n\nYour answer is considered correct if its absolute or relative error does not exceed 10^{-4}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is accepted if and only if \\frac{|a - b|}{max{(1, |b|)}} \u2264 10^{-4}.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1 1\n1 1\n''') == '0.7071067811865476'\n\nassert solution('''\n1 2\n1 1\n''') == '0.7071067811865476'\n\nassert solution('''\n3 2\n1 1\n1 -1\n-1 1\n''') == '1.4142135623730951'\n\nassert solution('''\n3 1\n1 1\n1 -1\n-1 1\n''') == '0.7071067811865476'\n\nassert solution('''\n5 2\n0 0\n1 0\n-1 0\n0 1\n0 -1\n''') == '0.7071067811865476'\n\nassert solution('''\n5 1\n0 0\n1 0\n-1 0\n0 1\n0 -1\n''') == '0.0'\n\nassert solution('''\n5 3\n0 0\n1 0\n-1 0\n0 1\n0 -1\n''') == '0.7071067811865476'\n\n# print(solution('''\n# 5 5\n# 0 0\n# 1 0\n# -1 0\n# 0 1\n# 0 -1\n# '''))\n\nprint(solution('''\n5 5\n0 0\n1 0\n-1 0\n0", "solution('''\n3 2\n1 -1\n-1 1\n1 1\n''') == '1.4142135623730951'\nassert solution('''\n6 4\n-7 -3\n-3 0\n3 0\n-3 1\n3 3\n0 -3\n''') == '3.494428952030339'\nassert solution('''\n5 5\n-5 -5\n-1 -3\n-3 3\n3 3\n5 5\n''') == '2.8284271247461903'\nassert solution('''\n1 1\n0 0\n''') == '0.0'\nassert solution('''\n1 2\n0 0\n''') == '0.0'\nassert solution('''\n5 2\n-5 0\n-3 -3\n0 0\n3 3\n5 0\n''') == '3.0'\nassert solution('''\n3 1\n-3 -3\n0 0\n3 3\n''') == '3.0'\nassert solution('''\n4 1\n-4 -4\n0 0\n4 4\n4 -4\n''') == '4.0'\nassert solution('''\n4 1\n-4 -4\n0 0\n4 4\n4 -4\n''') == '4.0'\nassert", "solution(r'''\n3 2\n1 2\n1 3\n1 4\n''') == '2.0'\n\nassert solution(r'''\n2 1\n1 1\n2 2\n''') == '1.41421'\n\nassert solution(r'''\n2 1\n2 2\n-2 -2\n''') == '1.0'\n\nassert solution(r'''\n3 2\n1 1\n0 0\n-1 -1\n''') == '1.73205'\n\nassert solution(r'''\n2 1\n1 1\n-1 -1\n''') == '2.0'\n\n# test the speed of solution (1 seconds for 100 cases)\nimport random\n\ndef gen_test(n: int, k: int) -> str:\n    points = [None] * n\n    for i in range(n):\n        points[i] = ' '.join(str(x) for x in (random.randint(-1000000, 1000000), random.randint(-1000000, 1000000)))\n    return '{n} {k}\\n{points}'.format(n=n, k=k, points='\\n'.join(points))\n\ndef test_solution(n: int, k: int) -> bool:\n    stdin = gen_test(n,", "solution('''\n5 3\n1 1\n1 -1\n-1 -1\n-1 1\n0 0\n''') == '1.41421'\n\nassert solution('''\n3 2\n2 0\n0 2\n0 0\n''') == '2.00000'\n\nassert solution('''\n10 2\n10 0\n-10 0\n0 10\n0 -10\n5 5\n-5 5\n-5 -5\n5 -5\n2 3\n0 2\n''') == '5.00000'", "solution('''\n4 2\n-1 1\n0 0\n1 1\n-1 -1\n''') == '1.4142135623730951'\n\nassert solution('''\n2 1\n-1 1\n1 1\n''') == '1.0'\n\nassert solution('''\n3 2\n-1 1\n0 0\n1 1\n''') == '1.0'\n\nassert solution('''\n2 1\n0 0\n1 1\n''') == '1.4142135623730951'\n\nassert solution('''\n4 2\n-10 -10\n-10 10\n10 10\n10 -10\n''') == '14.142135623730951'\n\nassert solution('''\n2 1\n0 1\n0 0\n''') == '1.0'\n\nassert solution('''\n3 1\n-1 1\n0 0\n1 1\n''') == '1.0'\n\nassert solution('''\n3 1\n-1 1\n1 1\n0 0\n''') == '1.0'\n\nassert solution('''\n1 1\n0 0\n''') == '0.0'\n\nassert solution('''\n1 0\n0 0\n''') == '0.0'\n\n# stress testing solution\n# import random", "solution('''\n4 3\n1 0\n-1 0\n0 1\n0 -1\n''') == '1.0'\n\nassert solution('''\n7 3\n2 5\n-2 5\n-5 5\n-5 -5\n5 -5\n5 5\n0 0\n''') == '5.0'\n\nassert solution('''\n3 2\n-2 0\n2 0\n0 3\n''') == '3.0'\n\nassert solution('''\n3 1\n-2 0\n2 0\n0 3\n''') == '1.7320508075688772'", "solution(\"1 0 \\n 0 0\") == \"0\"\nassert solution(\"3 2 \\n 0 0 \\n 1 0 \\n 0 1\") == \"1\"\nassert solution(\"5 4 \\n 0 0 \\n -2 0 \\n 2 0 \\n 0 2 \\n 0 -2\") == \"2\"\nassert solution(\"6 3 \\n 0 0 \\n -1 0 \\n 1 0 \\n 0 1 \\n 0 -1 \\n 0 0\") == \"1\"\nassert solution(\"4 2 \\n 0 0 \\n 3 0 \\n 0 3 \\n -3 0\") == \"3\"\nassert solution(\"4 3 \\n 0 0 \\n 3 0 \\n 0 3 \\n -3 0\") == \"3\"\nassert solution(\"4 4 \\n 0 0 \\n 3 0 \\n 0 3 \\n -3 0\") == \"3\"\nassert solution(\"6 4 \\n 0 0 \\n 3 0 \\n 0 3 \\n -3 0 \\n 3 3 \\n -3 3\") == \"3\"\nassert solution(\"1 2 \\n 0 0\") == \"0\"\nassert solution(\"2 1 \\n 0 0 \\n 0 0\") == \"0\"\nassert solution(\"5 1 \\n 0 0 \\n -2 0 \\n 2 0 \\n 0 2 \\n 0 -2\") == \"1\"\nassert solution(\"5 2", "\"1.23456789\\n\" == solution(\"\"\"\n3 2\n0 0\n0 1\n1 0\n\"\"\")\nassert \"3.14159265\\n\" == solution(\"\"\"\n3 2\n0 0\n0 1\n1 0\n\"\"\")\nassert \"4.0\\n\" == solution(\"\"\"\n4 2\n-1 -1\n-1 1\n1 -1\n1 1\n\"\"\")\nassert \"7.5\\n\" == solution(\"\"\"\n3 3\n0 0\n0 5\n5 0\n\"\"\")\nassert \"9.5\\n\" == solution(\"\"\"\n4 4\n0 0\n0 5\n5 0\n5 5\n\"\"\")\nassert \"0.0\\n\" == solution(\"\"\"\n1 1\n0 0\n\"\"\")\nassert \"6.86602540\\n\" == solution(\"\"\"\n2 1\n-1 0\n1 0\n\"\"\")\nassert \"7.5\\n\" == solution(\"\"\"\n3 2\n1 0\n0 1\n-1 0\n\"\"\")\nassert \"7.5\\n\" == solution(\"\"\"\n3 2\n0 1\n1 0\n0 -1\n\"\"\")\nassert \"0.0\\n\" == solution(\"\"\"\n1 0\n0 0\n\"\"\")\nassert \"2.0\\n\" == solution(\"\"\"\n2 0", "solution('''3 2\n3 2\n3 -2\n-3 -2''') == '2.8284271247461903'\n\n# convert stdin to list of lines\ndef to_lines(stdin: str) -> list:\n    return stdin.splitlines()\n\n# convert lines of strings to arrays of integers\ndef to_int_array(lines: list) -> list:\n    return [list(map(int, line.split())) for line in lines]\n\n# get the first integer of the first line\ndef get_k(stdin: str) -> int:\n    lines = to_lines(stdin)\n    int_arr = to_int_array(lines)\n    return int_arr[0][1]\n\n# get the rest of the integers\ndef get_xy(stdin: str) -> list:\n    lines = to_lines(stdin)\n    int_arr = to_int_array(lines)\n    return int_arr[1:]\n\n# calculate the distance between two points\ndef distance(x1: int, y1: int, x2: int, y2: int) -> float:\n    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n\n# get the number of", "solution(\"\"\"1 1\n0 0\"\"\") == '0.0000000000'\nassert solution(\"\"\"2 1\n1 2\n3 4\"\"\") == '2.8284271247'\nassert solution(\"\"\"3 2\n-100 -100\n100 100\n100 100\"\"\") == '141.4213562373'\nassert solution(\"\"\"3 2\n1 2\n3 4\n5 6\"\"\") == '2.8284271247'\nassert solution(\"\"\"3 2\n-1000 -1000\n0 0\n1000 1000\"\"\") == '1414.2135623731'\nassert solution(\"\"\"5 3\n1 1\n1 -1\n-1 1\n-1 -1\n0 0\"\"\") == '1.0000000000'\nassert solution(\"\"\"10 5\n-43 -24\n-63 -46\n-38 -86\n-48 -78\n-60 -96\n-74 -55\n-81 -93\n-59 -100\n-100 -100\n-100 -100\"\"\") == '144.9696104739'\nassert solution(\"\"\"2 1\n-10 -10\n10 10\"\"\") == '20.0000000000'\nassert solution(\"\"\"2 1\n-10 10\n10 -10\"\"\") == '14.1421356237'\nassert solution(\"\"\"3 1\n-1000000000 -1000000000", "solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution(\"\") == \"\", \"expected output '' \"\nassert solution", "solution('''\n3 2\n0 -3\n3 0\n3 3\n''') == '3.414213562373095'\n\nassert solution('''\n4 3\n0 0\n0 4\n4 0\n4 4\n''') == '4.0'\n\nassert solution('''\n1 1\n2 3\n''') == '2.23606797749979'\n\nassert solution('''\n10 5\n0 10\n0 20\n0 30\n0 40\n0 50\n0 60\n0 70\n0 80\n0 90\n0 100\n''') == '10.0'\n\nassert solution('''\n10 5\n1 6\n2 3\n5 9\n9 4\n0 5\n-5 1\n-1 4\n-5 -5\n-4 -4\n-4 -1\n''') == '4.47213595499958'\n\n# print(solution(stdin))\n# assert solution(stdin) == output\n'''\nimport sys\n\nget_input = input\n\n# define input\nif True:\n    def input():\n        return stdin\n\n\ndef solution(inp: str) -> str:\n    n, k = [int(x) for x in inp.split('\\n')[0].split()]\n    points = [", "solution(\"\"\"2 1\n0 0\n1 0\"\"\") == \"\"\"1.0\"\"\", \"Example 1\"\nassert solution(\"\"\"4 2\n0 0\n1 0\n-1 0\n0 1\"\"\") == \"\"\"1.4142135623730951\"\"\", \"Example 2\"\nassert solution(\"\"\"7 3\n-3 2\n-2 2\n-1 2\n0 2\n1 2\n2 2\n3 2\"\"\") == \"\"\"2.0\"\"\", \"Example 3\"\nassert solution(\"\"\"100 50\n-7837 -2837\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898 -9898\n-9898", "solution('''\n4 2\n-1 -1\n-1 1\n1 -1\n1 1\n''') == '1.4142135623730951'\n\n# test the speed of solution\nfrom timeit import timeit\nassert timeit(stmt='solution(r\"\"\"\n1000000 1000000\n\"\"\")', number=1, globals=globals()) < 1.0\n\nstdin = ''\nfor i in range(1000000):\n    stdin += f'{random.randint(-100000, 100000)} {random.randint(-100000, 100000)}\\n'\nassert timeit(stmt=f'solution(r\"\"\"\\n{stdin}\"\"\")', number=1, globals=globals()) < 1.0", "solution('''\n5 3\n-1 -1\n-1 1\n1 -1\n1 1\n0 0\n''') == '1.4142'\n\nassert solution('''\n10 6\n-1 -1\n-1 1\n1 -1\n1 1\n2 2\n2 -2\n-2 2\n-2 -2\n0 0\n3 3\n''') == '3.8284'\n\nassert solution('''\n3 2\n1 1\n1 -1\n-1 1\n''') == '2.8284'\n\nassert solution('''\n3 1\n1 1\n1 -1\n-1 1\n''') == '1.4142'\n\nassert solution('''\n1 1\n1 0\n''') == '1.0000'\n\nassert solution('''\n2 1\n0 0\n1 0\n''') == '1.0000'\n\nassert solution('''\n2 1\n0 0\n0 1\n''') == '1.0000'\n\nassert solution('''\n2 1\n0 0\n0 2\n''') == '2.0000'\n\nassert solution('''\n2 1\n0 0\n2 0\n''') == '2.0000'\n\nassert solution('''\n5 2\n0 0\n1 0\n2 0\n3 0", "solution(__input) == __output\n```\n\nIt is also important to notice that all the examples are correct and your solution must be tested against all of them.\n\nYou can read more about the contest system in the [official documentation](https://codeforces.com/blog/entry/40744).\n\n## Judge limits\n\nIn order to maintain correct execution of the scoring system, all solutions are executed with the following limits:\n\n- real time limit: 5 seconds\n- memory limit: 256 MB\n- stack limit: 64 MB\n\nSome solutions might have a higher limit as it is stated in the problem description.\n\n## Validation of output\n\nFor every solution we calculate the absolute error and the relative error between the user's output and the jury's output. The solution is considered correct if the absolute error or the relative error is less than `10e-4`.\n\n__Validation examples__\n\n| Input      | User output | Jury output | Correct |\n| ---------- | ----------- | ----------- | ------- |\n| 1<br/>2    | 2.0000      | 2.0000      | Yes     |\n| 1<br/>2    | 1.9999      | 2.0000      | Yes     |\n| 1<br/>2    | 2.0001      | 2.0000      | Yes     |\n| 1<br/>2    | 2", "solution('''input''') == '''output'''\n# test for all cases\nfor case in testcases:\n    result = solution(case.input)\n    checker.check(case, result)\n# get the 1st case\ncase = testcases[0]\n# get the input\ninput = case.input\n# get the output\noutput = case.output\n# get the output of your solution\nresult = solution(input)\nprint('the result of your solution:', result)\nprint('the correct output:', output)\n# check if they are the same\nassert result == output", "solution(\"\"\"4 3\n-1 1\n-1 -1\n1 1\n1 -1\"\"\") == \"1.4142135623\"\n\nassert solution(\"\"\"7 4\n1 1\n2 2\n-1 -1\n-2 -2\n-3 -3\n-4 -4\n-5 -5\"\"\") == \"3.53553390593\"\n\nassert solution(\"\"\"9 5\n-7 1\n-2 -2\n1 3\n3 -3\n3 2\n3 -3\n3 1\n3 -3\n3 0\"\"\") == \"3.53553390593\"\n\n# get input and copy it to a file\n!cp /content/drive/My\\ Drive/Colab\\ Notebooks/CodeForces/CirclePark/input.txt .\n\n!cat input.txt | python3 solution.py\n# measure time\n%timeit -n100 -r100 !cat input.txt | python3 solution.py\n \n# get the output from a file and format it as it should be shown on CodeForces\n!cat output.txt | sed 's/\\[[0-9]*\\]//g' | sed 's/\\]//g'\n \n# measure time\n%timeit -n100 -r100 !cat input.txt | python3 solution.py | sed", "solution('''\n\n''') == '''\n\n'''\n\n# check the performance of solution\nassert solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"4 1\n0 0\n0 1\n1 0\n1 1\"\"\") == \"1.4142135623730951\"\nassert solution(\"\"\"4 1\n0 0\n0 1\n1 0\n2 1\"\"\") == \"1.4142135623730951\"\nassert solution(\"\"\"2 2\n0 0\n0 1\"\"\") == \"1.0\"\nassert solution(\"\"\"5 2\n0 0\n0 1\n1 0\n1 1\n1 2\"\"\") == \"1.0\"\nassert solution(\"\"\"6 3\n0 0\n0 1\n1 0\n1 1\n1 2\n1 3\"\"\") == \"1.0\"\nassert solution(\"\"\"6 3\n0 0\n0 1\n1 0\n1 1\n1 2\n3 3\"\"\") == \"1.0\"\nassert solution(\"\"\"6 3\n0 0\n0 1\n1 0\n1 1\n1 2\n1 4\"\"\") == \"1.4142135623730951\"\nassert solution(\"\"\"7 3\n0 0\n0 1\n1 0\n1 1\n1 2\n1 4\n1 7\"\"\") == \"1.4142135623730951\"\nassert solution(\"\"\"8 4\n0 0\n0 1\n1 0\n1 1\n1 2\n1 4\n1 7\n2 3\"\"\") == \"1.4", "solution('''\n1 1\n1 0\n''') == '1.0'\n\nassert solution('''\n1 1\n0 0\n''') == '0.0'\n\nassert solution('''\n1 1\n0 10\n''') == '10.0'\n\nassert solution('''\n2 1\n0 10\n1 0\n''') == '1.4142135623730951'\n\nassert solution('''\n2 2\n0 10\n1 0\n''') == '0.0'\n\nassert solution('''\n3 2\n0 10\n1 0\n1 1\n''') == '1.0'\n\nassert solution('''\n3 2\n0 10\n1 0\n-1 1\n''') == '1.0'\n\nassert solution('''\n3 3\n0 10\n1 0\n-1 1\n''') == '0.0'\n\nassert solution('''\n4 2\n0 10\n1 0\n-1 1\n0.5 0.5\n''') == '0.7071067811865476'\n\nassert solution('''\n4 3\n0 10\n1 0\n-1 1\n0.5 0.5\n''') == '0.0'\n\nassert solution('''\n4 3\n0 10\n1 0\n-1", "solution(stdin=\"1 1\\n100\\n100\") == '141.4213562373095'\nassert solution(stdin=\"3 2\\n-10 -3\\n1 -4\\n-7 1\") == '10.198039027185569'\nassert solution(stdin=\"2 1\\n0 0\\n1 1\") == '1.4142135623730951'\nassert solution(stdin=\"10 2\\n0 2\\n-1 1\\n-1 -1\\n1 -1\\n2 0\\n2 2\\n-2 2\\n-2 -2\\n-3 0\\n3 0\") == '3.1622776601683795'\nassert solution(stdin=\"100 10\\n157 -118\\n51 -214\\n-264 -210\\n-61 -168\\n-224 -19\\n-68 -179\\n164 -205\\n-281 -23\\n-55 -91\\n-59 -74\\n81 -188\\n-215 -34\\n-206 -201\\n-267 -139\\n-52 -254\\n-145 -152\\n-263 -15\\n-26 -222\\n-247 -114\\n-223 -93\\n32 -173\\n-217 -150\\", "solution(input_data) == output_data", "solution(\"\"\"4 3\n2 2\n4 4\n4 -4\n-4 -4\"\"\") == \"\"\"4.0\"\"\"\nassert solution(\"\"\"3 1\n1 0\n0 1\n-1 0\"\"\") == \"\"\"1.0\"\"\"\nassert solution(\"\"\"3 2\n0 1\n1 0\n-1 0\"\"\") == \"\"\"1.4142135623730951\"\"\"\nassert solution(\"\"\"6 4\n1 1\n1 -1\n-1 -1\n-1 1\n0 1\n0 -1\"\"\") == \"\"\"1.0\"\"\"\nassert solution(\"\"\"6 4\n1 1\n1 -1\n-1 -1\n-1 1\n0 1\n0 -1\"\"\") == \"\"\"1.0\"\"\"\nassert solution(\"\"\"5 2\n1 1\n1 -1\n-1 -1\n-1 1\n0 0\"\"\") == \"\"\"1.4142135623730951\"\"\"\nassert solution(\"\"\"5 2\n1 1\n1 -1\n-1 -1\n-1 1\n0 0\"\"\") == \"\"\"1.4142135623730951\"\"\"\nassert solution(\"\"\"1 1\n0 0\"\"\") == \"\"\"0.0\"\"\"\nassert solution(\"\"\"1 1\n0 0\"\"\") == \"\"\"0.0\"\"\"\nassert solution(\"\"\"1 2\n2 2\"\"\") == \"\"\"2.0\"\"\"\nassert solution(\"\"\"1", "solution(\"\"\"\n4 2\n2 3\n1 1\n-2 -3\n-1 -1\n\"\"\") == \"\"\"\n2.8284271247461903\n\"\"\"", "solution('''\n4 2\n0 0\n0 1\n1 0\n1 1\n''') == '0.5'\n\nassert solution('''\n5 4\n0 0\n0 1\n1 0\n1 1\n0 2\n''') == '0.5'\n\nassert solution('''\n2 1\n1 1\n2 2\n''') == '0.7071067811865476'\n\nassert solution('''\n3 1\n1 1\n2 2\n3 3\n''') == '0.7071067811865476'\n\nassert solution('''\n3 1\n1 1\n2 2\n3 3\n''') == '0.7071067811865476'\n\nassert solution('''\n1 3\n2 2\n''') == '1.4142135623730951'\n\nassert solution('''\n1 1\n1 1\n''') == '0'\n\nassert solution('''\n3 3\n1 1\n2 2\n3 3\n''') == '0.7071067811865476'\n\nassert solution('''\n10 7\n0 3\n0 -3\n1 4\n1 -4\n-1 4\n-1 -4\n2 5\n2 -5\n-2 5\n-2 -5\n''') == '0.7071067811865476'\n\nassert", "solution(\"1 1\") == \"0.0\"\nassert solution(\"2 1\") == \"1.0\"\nassert solution(\"2 2\") == \"1.4142135623730951\"\nassert solution(\"3 2\") == \"1.4142135623730951\"\nassert solution(\"3 3\") == \"1.7320508075688772\"\nassert solution(\"100 30\") == \"4.242640687119285\"\nassert solution(\"100 70\") == \"4.4242640687119285\"\nassert solution(\"1000 700\") == \"6.928203230275509\"\nassert solution(\"1000 900\") == \"7.0710678118654755\"\nassert solution(\"10000 9000\") == \"10.295630140987\"\nassert solution(\"10000 9999\") == \"10.295630140987\"\nassert solution(\"100000 90000\") == \"14.142135623730951\"\nassert solution(\"100000 99999\") == \"14.142135623730951\"\nassert solution(\"1000000 900000\") == \"17.88854381999832\"\nassert solution(\"1000000 999999\") == \"17.88854381999832\"\nassert solution(\"10000000 9000000\") == \"21.623279190158926\"\nassert solution(\"10000000 9", "solution('''\n2 1\n-1 -1\n0 0\n''') == '0.70711\\n'\n\nif __name__ == '__main__':\n    from python_code_template import run_stdin\n    run_stdin(solution)", "solution(\"stdin\") == \"stdout\"", "solution('''6 3\n1 1\n2 1\n-1 1\n1 2\n-1 -1\n2 -1''') == '2.23606797749979'\n\nassert solution('''3 2\n1 1\n-1 1\n0 -3''') == '2.23606797749979'\n\nassert solution('''4 1\n0 0\n0 1\n1 0\n-1 0''') == '0.999999999999999'\n\nassert solution('''4 1\n0 0\n0 2\n1 0\n-1 0''') == '1.999999999999998'\n\nassert solution('''2 1\n1 1\n-1 -1''') == '1.414213562373095'\n\nassert solution('''10 2\n0 0\n0 1\n1 0\n-1 0\n1 1\n-1 1\n1 -1\n-1 -1\n2 2\n-2 -2''') == '2.0'\n\nassert solution('''1 1\n0 0''') == '0.0'\n\nassert solution('''3 1\n0 0\n0 2\n0 -2''') == '1.999999999999998'\n\nassert solution('''4 1\n0 0\n0 4\n0 -4\n4 0''') ==", "solution('''3 2\n-1 -2\n2 0\n3 0''') == '2.0'\nassert solution('''3 2\n-1 -2\n2 0\n0 0''') == '2.0'\nassert solution('''3 1\n1 0\n0 1\n0 -1''') == '1.7320508075688772'\nassert solution('''4 2\n0 0\n1 0\n0 1\n-1 0''') == '1.0'\nassert solution('''4 2\n0 0\n2 0\n0 2\n-2 0''') == '2.0'\nassert solution('''4 3\n0 0\n2 0\n0 2\n-2 0''') == '1.0'\nassert solution('''4 1\n0 0\n2 0\n0 2\n-2 0''') == '2.0'\nassert solution('''10 5\n0 -2\n-2 0\n0 2\n2 0\n3 0\n1 1\n-1 1\n-1 -1\n1 -1\n0 0''') == '1.0'\nassert solution('''10 4\n0 -2\n-2 0\n0 2\n2 0\n3 0\n1 1\n-1 1\n-1 -1\n1 -1\n0 0''') == '", "solution('''\n4 3\n2 3\n2 -3\n-2 -3\n-2 3\n''') == '3.414213562373095'", "solution('''\n1 1\n0 0\n''') == '0.00000'\n\nassert solution('''\n3 1\n0 0\n1 1\n1 2\n''') == '1.00000'\n\nassert solution('''\n4 3\n0 0\n1 1\n2 1\n2 0\n''') == '1.41421'\n\nassert solution('''\n4 2\n0 0\n1 1\n2 1\n2 0\n''') == '2.00000'\n\nassert solution('''\n10 8\n-5 -5\n5 5\n2 3\n5 7\n-5 -5\n5 7\n4 5\n4 4\n4 4\n-5 -5\n''') == '0.00000'\n\nassert solution('''\n10 9\n-5 -5\n5 5\n2 3\n5 7\n-5 -5\n5 7\n4 5\n4 4\n4 4\n-5 -5\n''') == '0.00000'\n\nassert solution('''\n10 10\n-5 -5\n5 5\n2 3\n5 7\n-5 -5\n5 7\n4 5\n4 4\n4 4\n-5 -5\n''') == '0.00000'\n\nassert solution('''\n10 2\n-5 -5\n5 5\n2 3\n5 7\n", "solution(fixture) == str(0)", "solution('''5 2\n1 1\n-1 -1\n-1 1\n1 -1\n0 2''') == '1.4142135623730951'\nassert solution('''4 3\n-1 -1\n-1 1\n1 -1\n1 1''') == '1.4142135623730951'\nassert solution('''3 2\n0 0\n0 1\n1 0''') == '0.7071067811865476'\nassert solution('''10 7\n-7 -1\n1 0\n1 -1\n-1 -2\n2 -2\n-5 -5\n5 -5\n5 3\n2 3\n-2 3''') == '2.1213203435596424'\nassert solution('''1 0\n0 0''') == '0.0'\nassert solution('''3 2\n0 0\n0 1\n1 0''') == '0.7071067811865476'\nassert solution('''6 5\n0 0\n1 0\n1 1\n0 1\n1 2\n0 2''') == '1.0'\nassert solution('''3 2\n1 1\n1 0\n0 1''') == '0.7071067811865476'\nassert solution('''10 7\n-7 -1\n1 0\n1 -1", "solution('''\n3 1\n1 1\n1 -1\n-1 -1\n''') == '1.41421'\n\nassert solution('''\n4 2\n1 1\n-1 1\n-1 -1\n1 -1\n''') == '1.41421'\n\nassert solution('''\n4 2\n0 0\n0 1\n1 0\n1 1\n''') == '1.00000'\n\nassert solution('''\n1 1\n1 1\n''') == '0.00000'\n\nassert solution('''\n100 50\n44 55\n-1 -1\n12 -22\n-123 31\n33 32\n-88 -99\n-12 -22\n-11 21\n-33 23\n32 -12\n-11 1\n-55 -55\n-22 -21\n-55 -12\n1 1\n-22 55\n-11 -11\n-11 -11\n33 11\n22 1\n-2 2\n1 -1\n1 -1\n-33 11\n-22 -22\n-22 -21\n11 22\n11 33\n-11 -11\n-11 -11\n-33 -11\n-33 11\n22 22\n22 -33\n-22 33\n-22 -21\n-55 -55\n-44 -44\n44 33\n44 -44\n22 55\n-", "solution('''5 3\n1 2\n2 3\n1 3\n2 1\n3 2''') == '''1.0'''\n\n# get input\nn, k = map(int, input().split())\np = []\nfor _ in range(n):\n    p.append(tuple(map(int, input().split())))\n\n# create list of points with origin as a center of all circles\np = list(map(lambda x: (x[0]**2 + x[1]**2, x), p))\n\n# sort points in ascending order\np.sort()\n\n# count number of points inside every circle\nc = [0]\nfor i in range(1, n):\n    c.append(c[i-1] + 1)\n    for j in range(i-1, -1, -1):\n        if p[i][0] - p[j][0] > p[j][0]:\n            break\n        c[i] += 1\n\n# find the minimum radius\nr = 0\nfor i in range(n):\n    if c[i] >= k:\n        r = max(r, p[i][0])\n\n# convert solution to required format\nr = round(r**0.5, 3)\nr = str(r)\n", "solution('''\n2 1\n1 2\n2 3\n''') == '2.23606797749979'\nassert solution('''\n2 2\n1 2\n2 3\n''') == '2.23606797749979'\nassert solution('''\n1 1\n1 2\n''') == '1.4142135623730951'\nassert solution('''\n5 3\n-5 1\n-4 3\n-3 -4\n-2 4\n1 -5\n''') == '6.808712022926454'\nassert solution('''\n5 5\n-5 1\n-4 3\n-3 -4\n-2 4\n1 -5\n''') == '4.82842712474619'\nassert solution('''\n5 4\n-5 1\n-4 3\n-3 -4\n-2 4\n1 -5\n''') == '4.82842712474619'\nassert solution('''\n5 2\n-5 1\n-4 3\n-3 -4\n-2 4\n1 -5\n''') == '6.808712022926454'\nassert solution('''\n5 1\n-5 1\n-4 3\n-3 -4\n-2 4\n1 -5\n''') == '8.48528", "abs(float(solution('input.txt')) - 1.9136) < 1e-4", "solution('''3 2\n-1 2\n1 0\n1 2''') == '1.4142135623730951'\n\n# check the correctness of solution\nassert solution('''10 5\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n0 9''') == '2.5'\n\n# submit solution\nprint(solution(sys.stdin.read()))", "solution(\"\"\"\n5 3\n0 0\n1 0\n1 2\n0 1\n1 1\n\"\"\") == \"\"\"\n1.0\n\"\"\"\n\nassert solution(\"\"\"\n3 2\n0 0\n1 0\n0 1\n\"\"\") == \"\"\"\n0.5\n\"\"\"\n\nassert solution(\"\"\"\n4 3\n0 0\n1 0\n0 1\n1 1\n\"\"\") == \"\"\"\n0.5\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n0 0\n1 0\n2 0\n3 0\n4 0\n\"\"\") == \"\"\"\n1.5\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n0 0\n2 0\n0 2\n2 2\n1 1\n\"\"\") == \"\"\"\n1.4142135623730951\n\"\"\"\n\n# print the solution and copy to clipboard\nprint(solution(\"\"\"\n5 3\n0 0\n1 0\n2 0\n3 0\n4 0\n\"\"\"))\n\n# submit solution\nimport sys\n\ngen = (x for x in sys.stdin)\nfunc = lambda: next(gen)\nsys.stdin = func\nsys.stdout = open(\"output.txt\", \"w\")\n\nprint(solution(func))", "solution(stdin) == stdout", "solution('''\n6 3\n2 3\n-2 3\n-2 -3\n2 -3\n2 0\n0 0\n''') == '2.50000'\n\n# check the correctness of solution\nassert solution('''\n10 2\n0 1\n1 0\n-1 0\n0 -1\n1 1\n-1 1\n1 -1\n-1 -1\n0 2\n0 -2\n''') == '1.00000'\n\n# check the correctness of solution\nassert solution('''\n3 2\n2 3\n-2 3\n0 0\n''') == '1.41421356237'\n\nassert solution('''\n1 1\n1 1\n''') == '0.00000'\n\nassert solution('''\n2 1\n0 1\n1 0\n''') == '0.00000'\n\n# check the correctness of solution\nassert solution('''\n6 4\n2 3\n-2 3\n-2 -3\n2 -3\n2 0\n0 0\n''') == '2.00000'\n\n# check the correctness of solution\nassert solution('''\n10 5\n0 1\n1 0\n-1 0\n0 -1\n1 1\n-1 1\n1 -1\n-1 -1\n0 2\n0 -2\n''') == '1.00000'", "solution('''\n3 2\n-2 3\n2 3\n0 4\n''') == '3.414213562373095'\n\n# check the correctness of solution\nassert solution('''\n2 1\n-2 3\n2 3\n''') == '4.242640687119285'\n\n# check the correctness of solution\nassert solution('''\n1 1\n0 0\n''') == '0.0'\n\n# check the correctness of solution\nassert solution('''\n5 2\n1 1\n1 2\n2 2\n2 1\n3 1\n''') == '1.0'\n\n# check the correctness of solution\nassert solution('''\n5 2\n2 3\n-2 3\n-2 -3\n2 -3\n3 0\n''') == '3.0'\n\n# check the correctness of solution\nassert solution('''\n5 3\n2 3\n-2 3\n-2 -3\n2 -3\n3 0\n''') == '2.0'\n\n# check the correctness of solution\nassert solution('''\n5 4\n2 3\n-2 3\n-2 -3\n2 -3\n3 0\n''') == '0.9999999999999999'\n\n# check the correctness of solution\nassert solution('''\n5 5\n2 3\n", "solution(stdin) == stdout\n\n\n# another possible solution for the same problem\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution(stdin) == stdout\n\n'''\nIn the hackathon competitions, each participant is initially given a cool T-shirt.\n\nYou have n T-shirts and k boxes of the same size. You are going to pack your T-shirts into the boxes so that all boxes are full. You want to minimize the number of boxes you use.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 k \u2264 10^5) \u2014 the number of T-shirts and the number of boxes.\n\nOutput\n\nOutput a single integer \u2014 the minimum number of boxes you can use.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution(stdin) == stdout\n\n\n# another possible solution for the same problem\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution(stdin) == stdout\n\n'''\nYou are given a sequence of n numbers a_1, a_2, ..., a_n.\n\nLet's call a pair of indices (i, j) good if 1", "solution('''\n3 2\n0 1\n0 2\n0 3\n''') == '1.4142135623730951'\nassert solution('''\n2 1\n2 3\n4 5\n''') == '2.8284271247461903'\nassert solution('''\n4 2\n0 0\n1 1\n1 -1\n-1 1\n''') == '1.0'\nassert solution('''\n5 3\n1 2\n-1 2\n0 3\n-3 -3\n3 -3\n''') == '3.0'\nassert solution('''\n1 1\n0 0\n''') == '0.0'\nassert solution('''\n1 10\n0 0\n''') == '0.0'\nassert solution('''\n3 3\n0 1\n0 2\n0 3\n''') == '1.4142135623730951'\nassert solution('''\n10 7\n1 1\n2 0\n2 2\n3 1\n3 3\n4 0\n4 2\n4 4\n5 1\n5 3\n''') == '1.4142135623730951'\nassert solution('''\n10 5\n1 1\n2 0\n2 2\n3 1\n3 3\n4 0\n4 2\n4 4\n5 1\n5 3\n", "solution(\"1 1\\n1 2\") == \"1.4142135623730951\"\nassert solution(\"2 1\\n2 3\\n-1 2\") == \"1.4142135623730951\"\nassert solution(\"2 2\\n2 3\\n-1 2\") == \"2.8284271247461903\"\nassert solution(\"2 2\\n2 2\\n-1 2\") == \"1.4142135623730951\"\nassert solution(\"3 2\\n-5 6\\n5 -7\\n-3 -4\") == \"4.633249939298906\"\nassert solution(\"4 3\\n-2 3\\n0 -2\\n1 -1\\n-1 1\") == \"1.0\"\nassert solution(\"4 3\\n2 3\\n0 -2\\n1 -1\\n-1 1\") == \"1.0\"\nassert solution(\"4 4\\n-1 0\\n-1 1\\n1 0\\n1 1\") == \"0.7071067811865476\"\nassert solution(\"4 4\\n-1 0\\n-1 1\\n1 0\\n1 1\") == \"0.7071067811865476\"\nassert solution(\"4 4\\n-1 0\\n-1 1\\n1 0\\", "solution(\"\"\"\n3 2\n1 0\n-1 0\n0 1\n\"\"\") == \"\"\"\n1.4142135623730951\n\"\"\"\nassert solution(\"\"\"\n3 1\n1 0\n-1 0\n0 1\n\"\"\") == \"\"\"\n1.0000000000000002\n\"\"\"\nassert solution(\"\"\"\n5 2\n0 5\n4 0\n-4 0\n2 -2\n0 -4\n\"\"\") == \"\"\"\n5.000000000000001\n\"\"\"\nassert solution(\"\"\"\n7 4\n-14 -10\n-12 -10\n0 -10\n7 -10\n-10 -7\n-10 2\n3 10\n\"\"\") == \"\"\"\n14.14213562373095\n\"\"\"\nassert solution(\"\"\"\n1 1\n2 0\n\"\"\") == \"\"\"\n2.0\n\"\"\"\nassert solution(\"\"\"\n6 6\n0 1\n1 0\n1 2\n0 -1\n-1 -1\n-1 0\n\"\"\") == \"\"\"\n1.118033988749895\n\"\"\"\nassert solution(\"\"\"\n11 11\n0 -1\n2 1\n0 3\n-3 0\n1 0\n-3 -3\n3 -3\n3 -1\n-3 1\n-1 3\n1 3\n\"\"\") == \"\"\"\n2.5\n\"\"\"\nassert solution(\"\"\"\n10 10\n0 5\n4 0\n", "solution(\"\") == \"\", \"Solution does not work for the sample data\"", "solution(input_data) == output_data"], "finish_reason": ["length", "length", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "length", "stop", "stop"], "sum_logprob": [-68.99031272599902, -176.56024662675807, -129.97835991216093, -55.83925029233999, -94.07081960764002, -60.34341480510001, -97.80719302950804, -130.92962982716656, -113.41174331786605, -211.02981877275, -24.56248719133101, -199.00864659165, -91.40741593048094, -69.247597334517, -91.25183118778304, -317.81635171472453, -111.18696377767, -231.74897044521603, -13.59477236082, -83.71798996823104, -66.27109778652003, -382.3318956894981, -8.940549938000002, -90.04310346209505, -25.88002196900001, -95.16829942340793, -116.16218249450999, -45.29990940048699, -9.016545564400001, -120.36622934161997, -99.83148581248297, -21.079968506499995, -108.8973376744189, -21.013068965000002, -147.41161879364807, -307.32293378144004, -158.53325332566408, -112.13972572176995, -26.9796592512, -46.14043890206002, -126.92194612530595, -5.656732230499999, -107.78153031411105, -82.37992141264499, -172.16227100258604, -105.67371643227698, -159.98435923201387, -207.21367254935595, -21.909129648, -8.934915514000002], "mean_logprob": [-0.22996770908666334, -0.5885341554225266, -0.43326119970720334, -0.4653270857695, -0.31356939869213335, -0.431024391465, -0.32602397676502665, -0.43643209942388866, -0.37803914439288666, -0.7034327292425, -0.08187495730443667, -0.6633621553055, -0.30469138643493665, -0.3890314456995337, -0.30417277062594333, -1.0593878390490825, -0.8236071390938519, -0.77249656815072, -0.33157981367853656, -0.27905996656077, -0.2209036592884, -1.2744396522983266, -0.8127772670909091, -0.30014367820698334, -0.6312200480243902, -0.3172276647446933, -0.38720727498169966, -0.7190461809601111, -0.8196859604000001, -0.40122076447206667, -0.3327716193749433, -0.5405120129871794, -0.3629911255813967, -1.910278996818182, -0.4913720626454933, -1.0244097792714666, -0.5284441777522133, -0.3737990857392333, -1.1730286630956521, -0.44365806636596156, -0.4700812819455778, -0.6285258033888889, -0.35927176771370334, -0.27459973804215, -0.5738742366752867, -0.3522457214409233, -0.5350647465953645, -0.6907122418311866, -1.288772332235294, -0.8122650467272727]}
{"prompt": "'''\nAndi and Budi were given an assignment to tidy up their bookshelf of n books. Each book is represented by the book title \u2014 a string s_i numbered from 1 to n, each with length m. Andi really wants to sort the book lexicographically ascending, while Budi wants to sort it lexicographically descending.\n\nSettling their fight, they decided to combine their idea and sort it asc-desc-endingly, where the odd-indexed characters will be compared ascendingly, and the even-indexed characters will be compared descendingly.\n\nA string a occurs before a string b in asc-desc-ending order if and only if in the first position where a and b differ, the following holds:\n\n  * if it is an odd position, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b; \n  * if it is an even position, the string a has a letter that appears later in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u22c5 m \u2264 10^6).\n\nThe i-th of the next n lines contains a string s_i consisting of m uppercase Latin letters \u2014 the book title. The strings are pairwise distinct.\n\nOutput\n\nOutput n integers \u2014 the indices of the strings after they are sorted asc-desc-endingly.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n5 4\nCATA\nAATA\nATAA\nTAAA\nAAAT\n\"\"\") == \"\"\"\n3 4 2 1 5\n\"\"\"\nassert solution(\"\"\"\n3 2\nXX\nZZ\nYY\n\"\"\") == \"\"\"\n2 3 1\n\"\"\"\nassert solution(\"\"\"\n6 4\nDABA\nBCCA\nABCD\nDCCB\nACDA\nABDB\n\"\"\") == \"\"\"\n3 4 6 2 5 1\n\"\"\"\nassert solution(\"\"\"\n3 2\nXY\nYX\nZX\n\"\"\") == \"\"\"\n2 3 1\n\"\"\"\nassert solution(\"\"\"\n3 2\nBA\nBA\nBA\n\"\"\") == \"\"\"\n1 2 3\n\"\"\"\n\n# get the input\nwith open('input/A.txt') as f:\n    print(solution(f.read()))", "solution(\"\"\"\n5 6\nHACKING\nHACKER\nHACKERMAN\nHACKE\nHACK\n\"\"\") == \"\"\"\n3 4 1 2 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\nAAA\nBBB\nCCC\n\"\"\") == \"\"\"\n2 3 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 3\nHAA\nHBA\nHCA\nHDD\n\"\"\") == \"\"\"\n4 3 2 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\nBINOM\nBINOM\nBINOM\nBINOM\nBINOM\n\"\"\") == \"\"\"\n1 2 3 4 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\nAAA\nCCC\nBBB\n\"\"\") == \"\"\"\n1 3 2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2 3\nCCC\nAAA\n\"\"\") == \"\"\"\n2 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 2\nAA\nAC\nCC\nBB\n\"\"\") == \"\"\"\n2 4 3 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 2\nCC\nAA\nBB\n\"\"\") == \"\"\"\n3 1 2\n\"\"\"\n\n# check the", "solution('''\n4 4\nDBBA\nDBAB\nCAAB\nDABB\n''') == '''\n3 4 2 1\n'''\n\n# check whether the sample test is judged as a \"Wrong Answer\"\nimport random\ntry:\n    assert solution('''\n4 4\nDBBA\nDBAB\nCAAB\nDABB\n''') == '''\n3 4 2 1\n'''\nexcept:\n    print('Sample test is judged as a \"Wrong Answer\", please check your code!')\n\n# check the max runtime of solution (2 seconds)\ntry:\n    import time\n    start = time.time()\n    assert solution('''\n4 4\nDBBA\nDBAB\nCAAB\nDABB\n''') == '''\n3 4 2 1\n'''\n    end = time.time()\n    assert end - start < 2\nexcept:\n    print('Max runtime exceeded, please check your code!')", "solution(\"\"\"4 6\nABCDEF\nABDCEF\nABCEFE\nABCFDE\n\"\"\") == \"\"\"4 1 3 2\"\"\"\n\nassert solution(\"\"\"4 5\nCBAAC\nBBBAA\nBACCA\nCABCA\n\"\"\") == \"\"\"4 3 2 1\"\"\"\n\n# this is my submission\nfrom typing import List\nimport collections\nfrom collections import Counter\nfrom heapq import *\nfrom math import floor, ceil\nimport re\nfrom functools import lru_cache\n\ndef solution(stdin):\n    n, m = map(int, stdin.split())\n    words = [stdin.split()[i] for i in range(1, n+1)]\n    word_counts = collections.defaultdict(int)\n    word_counts = [[\"\", 0]] * n\n    print(word_counts)\n    for i in range(n):\n        # word_counts[i][0] = words[i]\n        # word_counts[i][1] = i\n        word_counts[i] = (words[i], i)\n    print(word_counts)\n    word_counts.sort(key=lambda x: x[0])\n    print(word_counts)\n    # word_counts = sorted(word", "solution('''\n2 3\nAAA\nABA\n''') == '''\n2 1\n'''\n\n# let's read the input\nn, m = [int(i) for i in input().split()]\nbookshelf = list()\nfor i in range(n):\n    bookshelf.append(input())\n\n# find out how the sorting will look like\nodd_sort_order = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\neven_sort_order = 'ZYXWVUTSRQPONMLKJIHGFEDCBA'\n\nordering = []\nfor i in range(m):\n    if i % 2 == 0:\n        ordering.append(even_sort_order)\n    else:\n        ordering.append(odd_sort_order)\n\n# sort the shelf\nbookshelf.sort(key=lambda x: [ordering[i].index(c) for i, c in enumerate(x)])\n\n# print the result\nprint(' '.join([str(i + 1) for i in range(n)]))", "solution(\"\"\"4 6\nAAAAAA\nBBBBBB\nABACUS\nABACUS\n\"\"\") == \"\"\"1 2 4 3\"\"\"\n\nassert solution(\"\"\"2 3\nAAA\nAAA\n\"\"\") == \"\"\"1 2\"\"\"\n\nassert solution(\"\"\"2 3\nAAA\nBBB\n\"\"\") == \"\"\"2 1\"\"\"\n\nassert solution(\"\"\"5 5\nAAAAA\nAAAAA\nAAAAA\nAAAAA\nAAAAA\n\"\"\") == \"\"\"1 2 3 4 5\"\"\"\n\nassert solution(\"\"\"3 3\nAAA\nBBB\nCCC\n\"\"\") == \"\"\"3 2 1\"\"\"\n\nassert solution(\"\"\"4 4\nBBBB\nBBBB\nAAAA\nAAAA\n\"\"\") == \"\"\"3 4 1 2\"\"\"\n\nassert solution(\"\"\"4 5\nAAAAA\nABACA\nABACA\nABACA\n\"\"\") == \"\"\"1 2 3 4\"\"\"\n\nassert solution(\"\"\"4 7\nAZAZAZA\nAZAZAZA\nAZAZAZA\nAZAZAZA\n\"\"\") == \"\"\"1 2 3 4\"\"\"\n\nassert solution(\"\"\"4 7\nAZAZAZA\nAZAZAZA\nAZAZAZA\nAZAZAZA\n\"\"\") == \"\"\"1 2 3 4\"\"\"\n\nassert solution(\"\"\"2 3\nAAA\nBBB\n\"\"\") == \"\"\"2 1\"\"\"\n\nassert solution(\"\"\"1 10\nABCDEFGHIJ\n\"\"\")", "solution(\"\"\"\n2 3\nABC\nDEF\n\"\"\") == \"2 1\"\n\nassert solution(\"\"\"\n6 5\nAMYXE\nBXYZG\nFEXKD\nKAYBV\nLJVQZ\nQCIYU\n\"\"\") == \"5 1 2 3 4 6\"\n\nassert solution(\"\"\"\n1 3\nABC\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 3\nCBA\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 5\nCDBAE\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 5\nEDCBA\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 5\nABCDE\nFGHIJ\nKLMNO\nPQRST\nUVWXY\n\"\"\") == \"1 2 3 4 5\"\n\nassert solution(\"\"\"\n1 5\nGFHRE\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 3\nABC\nDEF\nEDC\nGHI\n\"\"\") == \"3 2 1 4\"\n\nassert solution(\"\"\"\n4 3\nABC\nDEF\nEDC\nGHI\n\"\"\") == \"3 2 1 4\"\n\nassert solution(\"\"\"\n4 3\nABC\nDEF\nEDC\nGHI\n\"\"\") == \"3 2 1 4\"\n\nassert solution(\"\"\"\n2", "solution('''\n2 3\nABC\nDAC\n''') == '2 1', 'Test 1'\n\nassert solution('''\n2 3\nABC\nBAC\n''') == '2 1', 'Test 2'\n\nassert solution('''\n3 4\nABCD\nDBCA\nDACB\n''') == '2 3 1', 'Test 3'\n\nassert solution('''\n5 5\nCACAB\nACCBB\nBACCB\nBCBCC\nACBBC\n''') == '3 4 2 1 5', 'Test 4'\n\nassert solution('''\n7 7\nBAACAAA\nBCCBAAA\nCACBAAA\nDCCBAAA\nECCBAAA\nFCCBAAA\nGCCBAAA\n''') == '3 4 5 6 7 2 1', 'Test 5'\n\nassert solution('''\n6 5\nAACDB\nBBBBB\nBBBBB\nBBBBB\nBBBBB\nBBBBB\n''') == '6 5 4 3 2 1', 'Test 6'\n\nassert solution('''\n2 1\nA\nB\n''') == '2 1', 'Test 7'\n\nassert solution('''\n3 2\nAB\nBA\nAB\n''') == '3 2 1', 'Test 8'\n\nassert solution('''\n", "solution('''\n2 3\nAAA\nBBB\n''') == '1 2'\n\nassert solution('''\n3 4\nABCD\nZCXV\nHHJF\n''') == '2 1 3'\n\nassert solution('''\n4 2\nAB\nBA\nZZ\nXV\n''') == '3 4 2 1'\n\n# check the speed of solution\nprint(timeit.timeit(lambda: solution(testdata), number=1000))\n\n'''\nSample test(s)\n\nInput\n3 4\nABCD\nZCXV\nHHJF\nOutput\n2 1 3\n\nInput\n2 3\nAAA\nBBB\nOutput\n1 2\n\nInput\n3 4\nXZYX\nYZYZ\nZYZZ\nOutput\n1 2 3\n\nInput\n5 3\nAYB\nBZC\nCAD\nDAE\nEBF\nOutput\n2 3 1 4 5\n\nInput\n4 4\nKJHG\nASDF\nQWER\nZXCV\nOutput\n4 3 2 1\n\nInput\n4 6\nZXCVBN\nVBNMZA\nASDFGH\nQWERTY\nOutput\n2 3 4 1\n\nInput\n4 7\nIPTXOUY\nGSLAOQL\nACBXHNV\nSGWRVDN\n", "solution('''\n3 4\nETEN\nTEIN\nNAEN\n''') == '3 1 2'\nassert solution('''\n4 3\nSAT\nSUN\nMON\nTUE\n''') == '2 1 4 3'\nassert solution('''\n2 3\nDNS\nDNS\n''') == '1 2'\nassert solution('''\n3 2\nAB\nBC\nCA\n''') == '2 3 1'\nassert solution('''\n5 2\nAB\nAB\nAB\nAB\nAB\n''') == '1 2 3 4 5'\nassert solution('''\n5 2\nAB\nBA\nAB\nBA\nAB\n''') == '1 2 3 4 5'\nassert solution('''\n5 2\nAB\nBA\nAB\nAB\nBA\n''') == '2 1 4 3 5'\nassert solution('''\n3 4\nENAT\nTEIN\nNAEN\n''') == '3 1 2'\nassert solution('''\n3 4\nETNE\nTEIN\nNAEN\n''') == '1 2 3'\nassert solution('''\n3 4\nTENA\nTEIN\nNAEN\n''') == '1 2 3'\nassert solution('''\n3 4\nETEN\nENIT\nNAEN\n''') == '1 2 3'", "solution(stdin) == stdout", "solution('''\n3 4\nABDC\nDAXC\nBACD\n''') == '''\n1 3 2\n'''\n\nassert solution('''\n2 3\nABC\nABC\n''') == '''\n1 2\n'''\n\nassert solution('''\n5 6\nABCDEF\nFEDCBA\nBCDEFG\nCDEFGH\nEFGHIJ\n''') == '''\n3 4 5 2 1\n'''\n\nif __name__ == '__main__':\n    with open('tests/%s/input.txt' % __file__[:-3], 'r') as file:\n        stdin = file.read()\n        print(solution(stdin))", "solution(\"1 2\") == 1\nassert solution(\"3 3 aaB BaA BBa\") == 2 1 3\nassert solution(\"3 4 aabA cBdD cdaD\") == 2 1 3\nassert solution(\"5 5 BaBaa ABaaBB abaaBB abaABB bbbaaa\") == 2 1 3 4 5\nassert solution(\"2 4 aaba aBab\") == 2 1\nassert solution(\"7 7 abbBAB aBaaBb AbbABB aBBaAb bABbAA aBBaAA aABbAa\") == 7 2 4 1 6 3 5\nassert solution(\"10 10 BAABAAaB AAaaBaBa bbAABAAb abBAAbbA BaabABBa abaaAbBa BBaBaaBB aBAAAbbA BBBbBbbA aaBaabaa\") == 6 2 8 9 10 3 7 1 4 5\nassert solution(\"9 6 AAAAAA bBAAAB AbaAaA aBBbAA baaBba AaBbaa aABABB AABABa AbBABb\") == 7 6 8 5 1 9 4 3 2\nassert solution(\"8 9 aaAAbbbbb aBAbBABba bbaaBbAab abBAAabAA AbaabBbaA aAAbAbAa", "solution(\"\"\"4 6\nRANDOM\nSORTING\nPROBLEM\nSOLUTION\"\"\") == \"\"\"4 1 3 2\"\"\"\n\n# stress testing the solution\nwhile True:\n    # generate a random test case\n    ...\n    # pass it to solution\n    print(solution(testcase))", "solution('''1\nAB''') == '1'\nassert solution('''2\nAB\nBA''') == '2 1'\nassert solution('''4\nAAA\nAAB\nABA\nABB''') == '1 2 3 4'\nassert solution('''4\nABB\nAAA\nABA\nAAB''') == '3 1 4 2'\nassert solution('''10\nALGORITHMS\nDATA\nSTRUCTURES\nPROGRAMMING\nCOMPETITIONS\nSUBMISSIONS\nDATASTRUCTURES\nTEST\nCASES\nEXAMPLE''') == '10 8 4 2 7 6 1 3 5 9'\n\n# I/O <https://dmoj.ca/problem/valentines16j2>\nf = open('main.in', 'r')\nprint(solution(f.read()))\nf.close()", "solution('''\n2 3\nABC\nCBA\n''') == '''\n2 1\n'''\n\nprint(solution('''\n4 4\nAACC\nCCAA\nCCCC\nAAAA\n'''))\n\nprint(solution('''\n4 1\nA\nB\nC\nD\n'''))\n\nprint(solution('''\n5 9\nBBBBBBBBB\nBBBBBBBBB\nBBBBBBBBB\nBBBBBBBBB\nBBBBBBBBB\n'''))\n\nprint(solution('''\n5 9\nBBBBBBBBB\nAAAAAAABB\nCCCCCCCCC\nDADADADAD\nDDDDDDDDD\n'''))\n\n# test case\n# sample\n# n = 2, m = 3\n# s1 = \"ABC\"\n# s2 = \"CBA\"\n# ans = \"2 1\"\n# sorted(s1) = \"ABC\"\n# sorted(s2) = \"ABC\"\n# sorted(s1, key=lambda a: a[::-1]) = \"CBA\"\n# sorted(s2, key=lambda a: a[::-1]) = \"CBA\"\n# so, \"CBA\" < \"ABC\"\n# odd: ABC => CBA => desc\n# even", "solution('''\n''') == '''\n'''\n\n# check the performance of solution\nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n''') == '''\n'''\n \nassert solution('''\n", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution('''\n3 3\nABC\nBAC\nCAB\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n5 7\nEDRKAJYG\nYGJEDRKA\nKJEDRKYA\nGAJEDKRJ\nKJGDRYEK\n''') == '''\n1 3 4 5 2\n'''\n\nassert solution('''\n7 3\nAAA\nAAA\nAAA\nAAA\nAAA\nAAA\nAAA\n''') == '''\n1 2 3 4 5 6 7\n'''\n\nassert solution('''\n10 6\nAACZAB\nDZABAC\nZABACA\nZABACA\nACZBAA\nAABCZA\nBAACZA\nBAACZA\nCZABAA\nBAAACZ\n''') == '''\n1 4 6 8 2 5 7 9 3 10\n'''\n\nprint(\"Success!\")", "solution(\"\"\"5 6\nABCDEF\nABCDEG\nABCDEH\nABCDEI\nABCDEJ\"\"\") == \"1 2 3 4 5\"\nassert solution(\"\"\"5 6\nABCDEF\nABCDEG\nABCDEH\nABCDEI\nABCDEJ\"\"\") == \"1 2 3 4 5\"\nassert solution(\"\"\"10 6\nABCDEF\nABCDEG\nABCDEH\nABCDEI\nABCDEJ\nABCDEK\nABCDEL\nABCDEM\nABCDEN\nABCDEO\"\"\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"\"\"10 6\nABCDEO\nABCDEN\nABCDEM\nABCDEL\nABCDEK\nABCDEJ\nABCDEI\nABCDEH\nABCDEG\nABCDEF\"\"\") == \"10 9 8 7 6 5 4 3 2 1\"\nassert solution(\"\"\"5 6\nABCDEF\nABCDEG\nABCDEH\nABCDEI\nABCDEJ\"\"\") == \"1 2 3 4 5\"\nassert solution(\"\"\"5 6\nABCDEF\nABCDEG\nABCDEH\nABCDEI\nABCDEJ\"\"\") == \"1 2 3 4 5\"\nassert solution(\"\"\"5 6\nABCDEF\nABCDEG\nABCDEH\nABCDEI\nABCDEJ\"\"\") == \"1 2 3 4 5\"\nassert solution(\"", "solution('''\n3 4\nAABB\nBBAA\nBAAB\n''') == '2 1 3'\nassert solution('''\n3 3\nABC\nBAC\nCBA\n''') == '1 2 3'\nassert solution('''\n4 8\nBANANANA\nABBBBBBB\nNANANANA\nABABABAB\n''') == '4 2 1 3'\n\n# test the speed of solution\nassert solution('''\n9 7\nFORDMUST\nWOMENSON\nPROGRAM\nCONTEST\nPROBLEM\nQUESTION\nANSWER\nSOLUTION\nSOLUTION\n''') == '4 6 2 5 1 3 7 9 8'\nassert solution('''\n5 15\nXEJWDMVHQHJWUYOQ\nFDOYUYVYFHTWSSIG\nVJXOKXOXDQVQBTZO\nKZYBSKNZBPKDNZSO\nRITTSISRVCCBXJXB\n''') == '3 4 2 5 1'\nassert solution('''\n3 9\nGORBYCHEVSK\nGAGARINSKAY\nLEBEDEVSKY\n''') == '2 3 1'\nassert solution('''\n10 10\nXDHXIG", "solution('''\n3 6\nOPUEGO\nHDROXL\nVGYINF\n''') == '''\n2 1 3\n'''\n\n# don't change this part\nimport sys\nsys.stdin = open('input.txt', 'r')\ninput()\nprint(solution(sys.stdin.read()))", "solution('''\n\n''') == '''\n\n'''", "(\n    solution(r'''\n4 5\nABCDE\nEDCBA\nBCDDA\nACBED\n''') == r'''\n2 1 4 3\n'''\n)\n\n# check the correctness of solution\nassert (\n    solution(r'''\n6 3\nAAA\nBBB\nAAA\nBBB\nAAA\nBBB\n''') == r'''\n1 3 5 2 4 6\n'''\n)\n\n# check the correctness of solution\nassert (\n    solution(r'''\n1 2\nAA\n''') == r'''\n1\n'''\n)\n\n# check the correctness of solution\nassert (\n    solution(r'''\n2 3\nAAA\nBBB\n''') == r'''\n1 2\n'''\n)\n\n# check the correctness of solution\nassert (\n    solution(r'''\n3 3\nAAA\nAAA\nAAA\n''') == r'''\n1 2 3\n'''\n)\n\n# check the correctness of solution\nassert (\n    solution(r'''\n5 10\nPBMXAOUWDW\nPPQKDQYIJY\nUHRCZCFXJF\nFIDQTEMTKM\nTQBOTJHAYZ\n''') == r'''\n4 5 1 3 2\n'''\n", "solution('''\n4 2\nBA\nAB\nBB\nAA\n''') == '3 4 1 2'\n\nassert solution('''\n5 10\nZDSHEPYKUO\nFVJAWPXWXK\nQZMZTFBUQV\nFITMYBQPQT\nYOZKFKNGKD\n''') == '1 2 3 4 5'\n\nassert solution('''\n3 4\nABAB\nABAB\nBABA\n''') == '1 2 3'\n\n# input_ = '''\n# 4 2\n# BA\n# AB\n# BB\n# AA\n# '''\n# print(solution(input_))\n\n# input_ = '''\n# 5 10\n# ZDSHEPYKUO\n# FVJAWPXWXK\n# QZMZTFBUQV\n# FITMYBQPQT\n# YOZKFKNGKD\n# '''\n# print(solution(input_))\n\n# input_ = '''\n# 3 4\n# ABAB\n# ABAB\n# BABA\n# '''\n# print(solution(input_))", "solution(\"...\") == \"...\"\n\n# check the performance of solution\nprint(timeit.timeit(lambda: solution(\"...\"), number=10))\n\n# @END@", "solution(problem_input) == problem_output\n\n# stress testing\nwhile True:\n    pass", "solution('''\n1 1\nA\n''') == '''\n1\n'''\n\nassert solution('''\n2 3\nABB\nAAA\n''') == '''\n2 1\n'''\n\nassert solution('''\n3 2\nAC\nCA\nBB\n''') == '''\n3 1 2\n'''\n\nassert solution('''\n3 3\nABB\nAAA\nBBB\n''') == '''\n2 1 3\n'''\n\nassert solution('''\n5 5\nZYXAB\nYXABZ\nABCDE\nABACD\nABBCD\n''') == '''\n5 4 3 2 1\n'''\n\nassert solution('''\n5 3\nADC\nBAC\nBBC\nBCA\nCAB\n''') == '''\n4 3 2 1 5\n'''\n\nassert solution('''\n6 2\nAB\nCA\nAA\nCC\nDD\nBD\n''') == '''\n2 1 4 6 3 5\n'''\n\nassert solution('''\n5 4\nABBH\nABBG\nABBF\nABBC\nABCA\n''') == '''\n4 3 2 1 5\n'''\n\nassert solution('''\n6 4\nABCD\nCBDA\nDABA\nCABD\nDABC\nBDCA", "solution('''2 2\nAB\nBA''') == '1 2', 'WA'\nassert solution('''3 3\nABC\nBAC\nCBA''') == '1 2 3', 'WA'\nassert solution('''1 3\nABC''') == '1', 'WA'\nassert solution('''5 6\nABCDEF\nFEDCBA\nDEFABC\nDEABCF\nEFDCBA''') == '5 4 3 2 1', 'WA'\nassert solution('''2 3\nABC\nABC''') == '1 2', 'WA'\nassert solution('''2 3\nAAA\nAAA''') == '1 2', 'WA'\nassert solution('''2 3\nBCA\nABC''') == '2 1', 'WA'\nassert solution('''3 2\nBA\nAA\nBB''') == '3 2 1', 'WA'\nassert solution('''1 2\nBB''') == '1', 'WA'\nassert solution('''2 3\nCCD\nCDD''') == '1 2', 'WA'\nassert solution('''1 6\nABCABC''') == '1', 'WA'\nassert solution('''6 4\nACBB\nCABB\nBCAB\nCBAB\nABCB\nBBCA''') == '6 5 4 3 2 1", "solution(example_input) == example_output\nassert solution(test_input) == test_output\n\n# submit\n#sol = solution(stdin)\n# with open('test.out', 'w') as fout:\n#     fout.write(sol)", "solution(test_data) == output", "solution(\"2 3\\nABC\\nABB\") == \"2 1\", \"expected 2 1\"\nassert solution(\"3 1\\nA\\nB\\nC\") == \"1 2 3\", \"expected 1 2 3\"\nassert solution(\"4 3\\nBCB\\nACA\\nABB\\nABB\") == \"2 4 3 1\", \"expected 2 4 3 1\"\nassert solution(\"5 1\\nA\\nB\\nC\\nD\\nE\") == \"5 4 3 2 1\", \"expected 5 4 3 2 1\"\nassert solution(\"10 1\\nE\\nD\\nC\\nB\\nA\\nA\\nB\\nC\\nD\\nE\") == \"10 9 8 7 6 5 4 3 2 1\", \"expected 10 9 8 7 6 5 4 3 2 1\"\nassert solution(\"1 2\\nDE\") == \"1\", \"expected 1\"\nassert solution(\"2 3\\nEDC\\nABC\") == \"2 1\", \"expected 2 1\"\nassert solution(\"3 1\\nC\\nB\\nA\") == \"3 2 1\", \"expected 3 2 1\"\nassert solution(\"4 3\\nBCB\\nABB\\nABB\\nACA\") == \"4 3 2 1\", \"expected 4 3 2 1\"\nassert solution(\"5 1\\", "solution(\"\"\"3 2\nAA\nBB\nCC\"\"\") == \"1 2 3\", \"AA, BB, CC\"\nassert solution(\"\"\"4 5\nABACA\nBABCA\nABCBA\nBABCB\"\"\") == \"4 2 3 1\", \"BABCB, ABCBA, BABCA, ABACA\"\nassert solution(\"\"\"7 4\nBCAB\nBCBA\nCAAB\nCABB\nCABB\nCCBB\nCCCB\"\"\") == \"3 1 2 6 5 4 7\", \"BCAB, BCBA, CABB, CAAB, CABB, CCBB, CCCB\"\n\n# add problem to collection\ntasks.append({\n    \"title\": \"Books\",\n    \"points\": 35,\n    \"samples\": [\n        {\n            \"input\": \"\"\"4 5\nABACA\nBABCA\nABCBA\nBABCB\"\"\",\n            \"answer\": \"4 2 3 1\",\n            \"explanation\": \"BABCB, ABCBA, BABCA, ABACA\"\n        },\n        {\n            \"input\": \"\"\"7 4\nBCAB\nBCBA\nCAAB\nCABB\nCABB\nCCBB\nCCCB\"\"\",\n            \"answer\": \"3 1 2 6 5 4 7\",\n            \"explanation\": \"BCAB,", "solution('''\n4 5\nABCDE\nBEZAB\nCZABX\nEABXA\n''') == '2 4 1 3'\n\nassert solution('''\n5 2\nAZ\nZB\nZZ\nBA\nXZ\n''') == '3 5 2 4 1'\n\nassert solution('''\n5 3\nZBC\nABC\nZCX\nXCX\nABZ\n''') == '2 5 4 3 1'\n\nassert solution('''\n3 4\nABXZ\nABXZ\nBCZC\n''') == '1 2 3'\n\nassert solution('''\n2 3\nXZX\nABX\n''') == '2 1'\n\n# what if there is no solution?\nassert solution('''\n2 4\nABXZ\nABXZ\n''') == '1 2'", "solution(\"\") == \"\", \"First\"\nassert solution(\"\") == \"\", \"Second\"\nassert solution(\"\") == \"\", \"Third\"\n\n# check the performance of solution\nassert solution(\"\") == \"\", \"First\"\nassert solution(\"\") == \"\", \"Second\"\nassert solution(\"\") == \"\", \"Third\"", "solution(TEST_CASES[0]['input']) == TEST_CASES[0]['answer']\nassert solution(TEST_CASES[1]['input']) == TEST_CASES[1]['answer']\nassert solution(TEST_CASES[2]['input']) == TEST_CASES[2]['answer']\n\n# find the problem set solution\nwith open(sys.argv[1], 'r') as f:\n    solution(f.read())", "solution(\"\"\"3 6\nABCDEF\nFEDCBA\nGHDVJB\n\"\"\") == \"2 1 3\", \"ERROR: test_case_1\"\nassert solution(\"\"\"2 3\nABC\nJKL\n\"\"\") == \"2 1\", \"ERROR: test_case_2\"\nassert solution(\"\"\"2 3\nAAA\nBDB\n\"\"\") == \"1 2\", \"ERROR: test_case_3\"\n\n# test scenarios\nprint(\"ALL TESTS ARE OK!!!\")", "solution(\"\"\"6 3\nAAA\nEEL\nQQQ\nQQE\nQQQ\nQQQ\"\"\") == \"1 5 4 6 2 3\"\n\n# test for submission\nstdin = sys.stdin.read()\nsys.stdout.write(solution(stdin))", "solution(example_input) == example_output\nassert solution(example_input_2) == example_output_2\n\ndef test_solution() -> None:\n    assert solution(test_input) == test_output\n\ntest_solution()", "str(solution('''4 3\nABC\nACB\nACA\nBCA''')) == '''2 1 4 3'''\n\n# check if my code can handle the large data correctly\nassert str(solution('''12 5\nBBBBB\nBBBBB\nBBBBB\nBBBBB\nBBBBB\nBBBBB\nBBBBB\nBBBBB\nBBBBB\nBBBBB\nBBBBB\nBBBBB''')) == '''1 2 3 4 5 6 7 8 9 10 11 12'''\n\nprint('Tests passed!')", "solution(\"\"\"\n2 3\nAAA\nABC\n\"\"\") == \"\"\"\n2 1\n\"\"\"\n\nassert solution(\"\"\"\n3 5\nAAMMA\nABMBA\nABBAB\n\"\"\") == \"\"\"\n2 3 1\n\"\"\"\n\nassert solution(\"\"\"\n1 8\nBANANANA\n\"\"\") == \"\"\"\n1\n\"\"\"", "solution(\"2 3\\nABC\\nBAC\") == \"2 1\"\nassert solution(\"1 3\\nABC\") == \"1\"\nassert solution(\"2 4\\nABCD\\nBCAD\") == \"2 1\"\nassert solution(\"2 4\\nABCD\\nDCBA\") == \"1 2\"\nassert solution(\"2 3\\nABC\\nDEF\") == \"1 2\"\nassert solution(\"1 4\\nABCD\") == \"1\"\nassert solution(\"3 2\\nZA\\nAZ\\nAA\") == \"3 1 2\"\nassert solution(\"4 2\\nAB\\nCD\\nEF\\nGH\") == \"4 3 2 1\"\nassert solution(\"4 2\\nBA\\nDC\\nFE\\nHG\") == \"4 3 2 1\"\nassert solution(\"4 2\\nBA\\nDC\\nFE\\nHG\") == \"4 3 2 1\"\nassert solution(\"1 2\\nAA\") == \"1\"\nassert solution(\"10 1\\nA\\nB\\nC\\nD\\nE\\nF\\nG\\nH\\nI\\nJ\") == \"10 9 8 7 6 5 4 3 2 1\"\nassert solution(\"10 1\\nJ\\nI\\nH\\nG\\nF\\nE\\nD\\nC", "solution(stdin) == stdout", "solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\", \"Expected: ''\"\nassert solution(\"\") == \"\",", "solution('''\n10 3\nTAS\nJFK\nTYO\nLCA\nBWI\nHND\nFRA\nSAN\nMNL\nMAD\n''') == '''\n7 1 5 2 4 6 9 3 8 10\n'''\nassert solution('''\n3 4\nABCD\nEFGH\nIJKL\n''') == '''\n2 1 3\n'''\nassert solution('''\n5 5\nUZSXU\nXAVIJ\nAFEQQ\nRKVYQ\nQQNQQ\n''') == '''\n5 4 1 3 2\n'''\nassert solution('''\n1 10\nZOOMBIZLOL\n''') == '''\n1\n'''\nassert solution('''\n10 10\nMVOZXWEBZJ\nLZIMGDFWQQ\nCQPRXJHXJS\nVPAEFMYJZI\nVUFHLLVDSS\nZSVUZJCHUZ\nOTVWVBAXFP\nXJYVYQQNDY\nCQHBRQANZH\nVLDLJYBHDS\n''') == '''\n10 6 4 2 8 5 3 7 9 1\n'''\nassert solution('''\n10 5\nFFHTC\nTQF", "solution('''\n3 2\nAB\nBC\nAA\n''') == '''\n3 1 2\n'''\n\nassert solution('''\n2 3\nAAA\nZAA\n''') == '''\n2 1\n'''\n\nassert solution('''\n5 1\nA\nA\nA\nA\nA\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n1 1\nA\n''') == '''\n1\n'''\n\n# get input from input.txt\ndef main():\n    stdin = 'input.txt'\n    with open(stdin, 'r') as in_file:\n        solution(in_file.read())\n\nif __name__ == '__main__':\n    main()", "solution('''\n6 10\nUQPASUQXQQ\nGOLAZXTCCV\nDCBZRSKWZM\nHUZFWCGTRB\nEYMOLGXUOB\nQIENXEQPQT\n''') == '''\n6 5 4 3 2 1\n'''\n\n# print output and submit to checkiO\nsolution(stdin='\\n'.join([input() for _ in range(int(input().split()[0]))]))", "solution(\"3 4\\nABAB\\nBABA\\nABAB\") == \"2 1 3\"\nassert solution(\"5 5\\nBACAB\\nCABAC\\nABACB\\nBCABA\\nACBAC\") == \"5 4 1 2 3\"\nassert solution(\"5 5\\nABACA\\nABACA\\nABACA\\nABACA\\nABACA\") == \"2 1 3 4 5\"\nassert solution(\"3 3\\nAAA\\nAAA\\nAAA\") == \"1 2 3\"\nassert solution(\"1 4\\nABCD\") == \"1\"\nassert solution(\"1 1\\nA\") == \"1\"\nassert solution(\"2 1\\nA\\nA\") == \"1 2\"\nassert solution(\"3 1\\nB\\nA\\nC\") == \"2 1 3\"\nassert solution(\"3 2\\nBA\\nBA\\nAB\") == \"2 1 3\"\nassert solution(\"5 2\\nAA\\nBB\\nAB\\nAB\\nAA\") == \"4 5 1 2 3\"\nassert solution(\"5 4\\nAAAB\\nAAAB\\nAAAB\\nAAAB\\nAAAB\") == \"4 5 1 2 3\"\nassert solution(\"5 5\\nABCAB\\nABCAB\\nABCAB\\nABCAB", "solution('''\n3 4\nAAAA\nBBBB\nCCCC\n''') == '''\n2 3 1\n'''\n\nassert solution('''\n3 4\nAAAA\nAAAA\nAAAA\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n6 1\nA\nD\nC\nB\nE\nF\n''') == '''\n2 3 1 5 6 4\n'''\n\nassert solution('''\n7 3\nABC\nFED\nCDE\nCDB\nAAA\nCDA\nBCD\n''') == '''\n5 2 6 4 1 7 3\n'''\n\n# stress testing\n'''\ndef stress(N: int, M: int):\n    import random\n    arr = []\n    for _ in range(N):\n        curr = ''\n        for _ in range(M):\n            curr += chr(random.randint(65, 65 + 25))\n        arr.append(curr)\n    arr = list(dict.fromkeys(arr))\n    from pprint import pprint\n    pprint(arr)\n    print(len(arr))\n    print(len(arr) * M)\n\nstress(5000, 1000)\n'''", "solution(get_string_from_file(\"path/to/file\")) == get_string_from_file(\"path/to/file\")"], "finish_reason": ["stop", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "stop"], "sum_logprob": [-136.37505480499996, -131.52833742455496, -127.56720993269899, -190.0476443581569, -103.08541582137492, -121.7950746698, -204.921452944998, -163.205201096545, -296.59601172488607, -151.87914642573506, -5.495710741000001, -75.46963000999, -492.7416173759302, -69.45857230840002, -151.87155235739002, -177.00913571265005, -23.687892260598993, -12.089481012402702, -174.947297691138, -49.443083989098994, -492.0473850603496, -96.09329027371398, -8.139229291399998, -244.514682368042, -224.36958713492396, -30.848349105200004, -18.317774682899994, -193.99760759816706, -152.025871546385, -43.54831818661, -10.88790504, -109.78488371268152, -131.67315454390285, -179.57562081743995, -18.37500451721999, -44.78568994911498, -104.44888680944999, -61.13879540147002, -32.34724789664999, -83.66737272287996, -52.76817281633999, -97.29806217565653, -5.495711741, -18.74410031435797, -587.0207217170686, -76.95841191081901, -236.59697943835982, -135.348947693133, -155.6501829362879, -19.92158402579001], "mean_logprob": [-0.745218878715847, -0.43842779141518334, -0.5798509542395409, -0.6334921478605233, -0.4074522364481225, -0.4059835822326667, -0.68307150981666, -0.5440173369884833, -0.9886533724162867, -0.5062638214191166, -0.6106345267777777, -0.4658619136419136, -1.6424720579197667, -0.9782897508225352, -0.7372405454242233, -0.5900304523755, -0.07895964086866333, -0.04029827004134233, -0.8291341122802749, -0.16481027996366332, -1.6401579502011667, -1.216370762958405, -0.5087018307125, -0.8150489412268067, -0.8070848458090791, -0.7523987586634147, -0.7964249862130435, -0.64665869199389, -0.5067529051546167, -0.7023922288162903, -1.2097672266666666, -0.36594961237560497, -0.4389105151463433, -0.9209006195766154, -0.2517123906468493, -0.3763503357068487, -0.9243264319420353, -0.886069498572029, -0.5577111706318966, -0.6338437327490909, -0.6943180633728947, -0.324326873918855, -0.6106346378888889, -0.06248033438119333, -1.9567357390568967, -0.43479328763174574, -2.005059147782712, -0.45116315897711, -0.5539152417661495, -0.6225495008059375]}
{"prompt": "'''\nChanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions.\n\nThe map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them such that it is possible to travel between each pair of rooms through several tunnels.\n\nThe i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z.\n\nTo prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries.\n\nThere are two types of queries to be done:\n\n  * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). \n  * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). \n\n\n\nHelp them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n''') == '''\n'''\n\n# test the performance of solution\nfrom utils import *\nassert solution('''\n''') == '''\n'''\nprint(get_time_ms(solution, '''\n'''))\n# print(get_memory_kb(solution, '''\n# '''))\n\n# stdin = sys.stdin.read()\n# print(solution(stdin))", "solution('''\n1 1\n1\n1 1\n2 1 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1\n1\n1 1\n2 1 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2\n2 3\n1 2\n1 1\n2 1 2\n1 2 4\n2 1 2\n''') == '''\n5\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1\n2 3\n1 2\n1 1\n2 1 2\n''') == '''\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n1 2\n1\n1 1\n1 1 2\n2 1 1\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1\n1\n1 1\n2 1 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1 2\n1\n1 1\n1 1 2\n2 1 1\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1\n2 3\n", "solution('''\n5 4\n1 2 3 4 5\n1 2\n1 3\n2 4\n2 5\n1 3 3\n2 1 5\n1 5 3\n2 3 5\n''') == '''\n0\n12\n0\n8\n'''", "solution(\"test case 1\") == \"test case 1 solution\"\nassert solution(\"test case 2\") == \"test case 2 solution\"\n\n# print solution to stdout\nprint(solution(sys.stdin.read()))", "solution('''\n5 5\n2 2 1 1 0\n1 2\n1 3\n1 4\n1 5\n1 2 -3\n2 2 5\n1 4 2\n2 2 5\n1 2 0\n2 2 5\n''') == '''\n5\n2\n5\n5\n'''\nassert solution('''\n5 5\n1 0 -1 1 0\n1 2\n1 3\n1 4\n1 5\n1 2 3\n2 2 5\n1 4 2\n2 2 5\n1 2 -3\n2 2 5\n''') == '''\n3\n2\n3\n3\n'''\n\n# submit solution\nsolution('''\n''')", "solution('''\n2 3\n1 -1\n1 2\n1 1 2\n2 1 2\n1 2 1\n2 1 2\n''') == '''\n2\n2\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 -1\n1 2\n1 1 2\n2 1 2\n1 2 -1\n2 1 2\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 -1\n1 2\n1 1 2\n2 1 2\n1 2 -1\n2 1 2\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 -1\n1 2\n1 1 2\n2 1 2\n1 2 -1\n2 1 2\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 -1\n1 2\n1 1 2\n2 1 2\n1 2 -1\n2 1 2\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 -1\n1 2\n1 1 2\n2 1", "(solution('''\n4 3\n2 3 5 4\n1 2\n1 3\n2 4\n1 2 0\n2 1 4\n1 4 2\n''') == '''\n13\n6\n''')\n\n# check the correctness of solution\nassert (solution('''\n5 3\n6 8 2 -6 -1\n1 2\n1 3\n1 4\n1 5\n2 1 2\n2 5 1\n1 5 -5\n''') == '''\n5\n15\n5\n''')\n\n# check the correctness of solution\nassert (solution('''\n5 10\n9 6 -5 9 -6\n1 2\n1 3\n1 4\n2 5\n2 1 -5\n2 3 6\n2 5 -2\n1 4 -5\n2 3 -7\n2 5 5\n1 4 -5\n2 5 -2\n1 2 9\n1 4 2\n2 3 -9\n2 5 3\n2 3 -2\n2 5 -1\n2 5 -2\n''') == '''\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n''')\n\n# check the correctness of solution\nassert (solution('''\n5 5\n8 3 -2 -4 5\n1 2\n1 3\n1 4\n1 5\n2 5 5\n2 3 3", "solution(str(\n   \"2 1\\n\"\n   \"0 1\\n\"\n   \"1 2\\n\"\n   \"2 2\"\n)) == \"0\", \"simple example\"\nassert solution(str(\n   \"3 2\\n\"\n   \"0 0 1\\n\"\n   \"1 2\\n\"\n   \"2 3\\n\"\n   \"1 2 2\\n\"\n   \"2 1 3\"\n)) == \"1\\n1\", \"another example\"\nassert solution(str(\n   \"3 3\\n\"\n   \"0 0 1\\n\"\n   \"1 2\\n\"\n   \"2 3\\n\"\n   \"1 2 2\\n\"\n   \"2 1 3\\n\"\n   \"1 1 1\"\n)) == \"1\\n1\\n0\", \"with update\"\nassert solution(str(\n   \"2 1\\n\"\n   \"0 1\\n\"\n   \"1 2\\n\"\n   \"2 1\"\n)) == \"1\", \"with inversion\"\n\nprint(\"passed the test\")", "solution(testcase_input) == testcase_output", "solution('''\nn\na_1 a_2 ... a_n\ns_1 t_1\ns_2 t_2\n...\ns_m t_m\n1 u c\n2 u v\n''') == '''\n'''", "solution('''4 3\n1 -3 2 1\n1 2\n1 3\n2 4\n1 1 4\n2 1 4\n2 4 1''') == '''4\n1\n1'''\n\nassert solution('''10 4\n5 -5 3 -2 -1 5 -5 -1 -2 -2\n1 2\n1 3\n2 4\n1 5\n1 6\n1 7\n7 8\n7 9\n7 10\n1 2 10\n2 2 7\n1 2 -1\n2 7 10''') == '''11\n3\n11\n3'''\n\nassert solution('''2 3\n2 1\n1 2\n1 1 1\n2 1 2\n2 2 1''') == '''1\n1\n1'''\n\nprint('all tests passed')", "solution('''1\n1\n1\n1\n1 1\n2 1 1\n''') == '0'\n\nassert solution('''1\n1\n1\n1\n1 1\n2 1 1\n''') == '0'\n\nassert solution('''1\n1\n1\n1\n1 1\n2 1 1\n''') == '0'\n\nassert solution('''1\n1\n1\n1\n1 1\n2 1 1\n''') == '0'\n\nassert solution('''1\n1\n1\n1\n1 1\n2 1 1\n''') == '0'\n\nassert solution('''1\n1\n1\n1\n1 1\n2 1 1\n''') == '0'\n\nassert solution('''1\n1\n1\n1\n1 1\n2 1 1\n''') == '0'\n\nassert solution('''1\n1\n1\n1\n1 1\n2 1 1\n''') == '0'\n\nassert solution('''1\n1\n1\n1\n1 1\n2 1 1\n''') == '0'\n\nassert solution('''1\n1\n1\n1\n1 1\n2 1 1\n''') == '0'\n\nassert solution('''1\n1\n1\n1\n1 1\n2 1 1\n''", "solution(\"\"\"\n7 2\n-1 2 -3 -4 5 -6 -7\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7\n1 4 5\n2 1 7\n\"\"\") == \"\"\"\n20\n\"\"\"", "solution(inp) == out", "solution('''\\\n6 4\n-2 3 -5 -5 5 3\n2 3\n1 5\n4 6\n1 4\n1 5 1\n2 4 5\n2 1 6\n''') == '''\\\n1\n7\n3\n'''\n\nassert solution('''\\\n2 2\n-1 -1\n1 2\n1 2 1\n2 1 2\n''') == '''\\\n2\n2\n'''", "solution(\"\"\"\n3 3\n-2 -3 4\n1 2\n2 3\n1 1 4\n1 2 2\n2 1 3\n\"\"\") == \"\"\"\n7\n-5\n5\n\"\"\"", "solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"\n\"\"\") == \"\"\n# this is a template for competitive programming\n# author: erick.c.macaviso@gmail.com\nfrom typing import List\nimport os\nimport sys\nimport inspect\nimport io\nimport math\nimport itertools\nimport functools\nfrom collections import Counter, defaultdict\nfrom types import FunctionType\n\ndef debug(func: FunctionType):\n    def wrapped_func(*args, **kwargs):\n        func_args = inspect.getcallargs(func, *args, **kwargs)\n        print(f'{func.__name__}({\", \".join(f\"{k}={v}\" for k, v in func_args.items())})')\n        ret = func(*args, **kwargs)\n        if ret is not None:\n            print(f'    -> {ret}')\n        return ret\n    return wrapped_func\n\ndef _test(correct: str, *, stdin: str = None):\n    global T\n    fname = os.path.splitext(os.path.basename(__file__))[0]\n    if stdin is not None:\n        sys.stdin = io.StringIO(stdin)\n    else:\n        assert os.path.isfile(f'{fname}.in')\n       ", "solution('''\n5 3\n-1 -2 -3 -4 -5\n1 2\n1 3\n2 4\n2 5\n1 1 2\n2 1 2\n2 4 2\n''') == '''\n3\n5\n7\n'''", "solution('''\n2 3\n0 0\n1 2\n1 2 1\n2 1 3\n2 1 3\n''') == '''\n4\n4\n'''\nassert solution('''\n3 5\n-3 0 -1\n1 2\n1 3\n1 2 1\n1 2 2\n2 1 3\n2 1 3\n2 3 3\n2 3 3\n''') == '''\n-1\n-1\n6\n6\n6\n'''\nassert solution('''\n4 7\n0 3 3 5\n1 2\n1 3\n1 4\n2 3 1\n3 4 2\n1 2 1\n1 2 2\n2 1 3\n2 1 3\n3 1 2\n3 1 2\n3 1 2\n2 3 3\n2 3 3\n2 3 3\n''') == '''\n5\n5\n5\n5\n5\n5\n5\n'''\nassert solution('''\n10 8\n-8 2 -9 2 -2 -2 3 -2 2 -5\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 10 1\n1 10 1\n1 10 1\n1 10 1\n1 10 1\n2 3 3\n2 3 3\n2 3 3\n2 3 3\n2 3 3\n2 3 3\n2 3 3\n", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''", "solution(stdin='4 4\\n0 -2 2 -4\\n1 2\\n1 3\\n2 4\\n1 1 4\\n1 3 -2\\n2 1 4\\n2 3 4') == '4\\n6\\n6\\n'\n\n# check the performance of solution\n# assert solution(stdin=stdin)", "solution(\n    '''4 3\n1 -1 2 -2\n1 2\n1 3\n2 4\n1 1 1\n2 1 4\n2 4 1''') == '''1\n5'''\n\nassert solution(\n    '''5 6\n-2 1 -2 3 -1\n1 2\n1 3\n2 4\n2 5\n1 3 1\n1 2 -1\n2 1 4\n2 5 1\n1 4 0\n2 1 5''') == '''3\n3\n0\n0\n1'''\n\nassert solution(\n    '''4 10\n0 0 1 0\n1 2\n1 3\n1 4\n1 3 1\n1 1 0\n2 1 2\n2 2 1\n2 4 2\n2 2 4\n2 4 2\n2 1 4\n2 4 1\n2 1 2\n2 2 4\n2 4 1\n2 1 4\n2 4 2\n2 1 2\n2 2 4\n2 4 1\n2 1 4\n2 4 2\n2 1 2\n2 2 4\n2 4 1\n2 1 4\n2 4 2\n2 1 2\n2 2 4\n2 4 1\n2 1 4\n2 4 2\n2 1 2\n2 2 4\n2 4 1\n2 1 4\n2 4 2\n2 1 2\n2 2 4\n2 4 1\n2 1 4\n2 4 2", "solution(example_input) == example_output\n\n# get the input from file\nwith open('input', 'r') as fp:\n    input = fp.read()\n\n# print the result to standard output\nprint(solution(input))", "solution(open('input.txt', 'r').read()) == open('output.txt', 'r').read()", "solution('''\n4 5\n3 2 3 -4\n1 2\n1 3\n1 4\n1 2 1\n2 2 3\n2 2 3\n2 2 3\n2 2 3\n''') == '''\n4\n4\n4\n4\n'''\n\n# get input from stdin\nTEST_INPUT = ''\ninp = stdin.readline()\nwhile inp:\n    TEST_INPUT += inp\n    inp = stdin.readline()\n\n# remove leading and trailing whitespaces\nTEST_INPUT = TEST_INPUT.strip()\n\n# submit solution\nprint(solution(TEST_INPUT))", "solution('''\n3 3\n1 2 3\n1 2\n2 3\n1 2 3\n2 3 3\n2 3 1\n''') == '''\n5\n3\n'''\n\nassert solution('''\n5 9\n0 0 0 0 0\n1 2\n1 3\n1 4\n1 5\n2 3 3\n2 3 -5\n2 5 -5\n2 5 3\n2 1 1\n2 3 3\n2 3 -5\n2 5 -5\n2 5 3\n''') == '''\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''", "solution(\"\"\"\n8 6\n3 5 2 8 -2 2 1 3\n1 2\n1 3\n1 4\n2 5\n2 6\n1 7\n2 8\n1 2 4\n1 7 4\n2 1 8\n2 7 8\n1 2 1\n1 7 1\n\"\"\") == \"\"\"\n3\n3\n3\n3\n2\n2\n\"\"\"\n# 1 2\n# | |\n# 3 7 8\n# | | |\n# 4 5 6", "solution('''\\\n5 5\n0 0 0 0 0\n1 2\n1 3\n1 4\n2 5\n1 3 0\n2 1 5\n1 3 100\n2 1 5\n2 3 5\\\n''') == '''\\\n0\n100\n0\n0\\\n'''", "solution(stdin='''\\\n7 7\n0 0 0 0 0 0 0\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7\n1 1 1\n1 2 2\n2 3 3\n2 4 4\n2 5 5\n2 6 6\n2 7 7\\\n''') == '''\\\n1\n2\n3\n4\n5\n6\n7\\\n'''\n\n# check the performance of solution\nassert solution(stdin='''\\\n10 10\n-4 -1 6 -5 4 -1 7 5 -8 -7\n1 2\n1 3\n2 4\n2 5\n2 6\n3 7\n3 8\n3 9\n3 10\n1 1 1\n1 3 3\n1 4 4\n1 5 5\n1 6 6\n1 7 7\n1 8 8\n1 9 9\n1 10 10\n2 4 4\n2 5 5\n2 6 6\n2 7 7\n2 8 8\n2 9 9\n2 10 10\\\n''') == '''\\\n-8\n-7\n-2\n-2\n-2\n-2\n-2\n-2\n-2\n-2\\\n'''", "solution(\"\"\"\n3 4\n1 -1 1\n1 2\n2 3\n1 1 1\n1 2 3\n2 3 3\n2 2 1\n\"\"\") == \"\"\"\n2\n2\n2\n2\n\"\"\"\n\n# test the performance of solution\nfrom utils import *\nprops = {'name': 'Maze', 'input_size': [10, 50000], 'time_limit': 5}\nprint(test_solution(solution, props))", "solution('''\n5 7\n1 2 3 4 5\n1 2\n1 3\n2 4\n2 5\n1 2 3\n2 2 4\n2 1 5\n1 2 1\n2 2 4\n''') == '''\n0\n0\n4\n4\n4\n4\n'''", "solution('''\n3 3\n3 2 5\n1 2\n2 3\n1 1 2\n1 2 3\n2 1 3\n''') == '''\n4\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2 3 4 5\n1 2\n1 3\n1 4\n1 5\n2 1 2\n2 1 3\n2 1 4\n2 1 5\n2 3 4\n''') == '''\n0\n0\n0\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5 6\n1 2 3 4 5\n1 2\n1 3\n1 4\n1 5\n2 1 2\n2 1 3\n2 1 4\n2 1 5\n2 3 4\n1 1 2\n1 1 2\n''') == '''\n0\n0\n0\n0\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2 3 4 5\n1 2\n1 3\n1 4\n1 5\n2 1 2\n2 1 3\n2 1 4\n2 1 5\n2 3 4\n1 1 2\n1 1 2\n''') == '''\n0\n0\n0\n0\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n10", "solution('''\n5 8\n1 2 3 4 5\n1 2\n1 3\n2 4\n2 5\n1 3 10\n2 3 5\n2 3 6\n2 3 1\n2 3 2\n''') == '''\n7\n6\n6\n6\n7\n'''\nassert solution('''\n5 10\n1 2 3 4 5\n1 2\n1 3\n2 4\n2 5\n1 3 10\n2 3 5\n2 3 6\n2 3 1\n2 3 2\n1 3 2\n''') == '''\n7\n6\n7\n6\n7\n6\n7\n6\n7\n6\n'''\n\n# read the input file and print the output file\nwith open('input.txt', 'r') as infile, open('output.txt', 'w') as outfile:\n    tests = int(infile.readline())\n    for i in range(1, tests + 1):\n        output = solution(infile.read())\n        print(f'Case #{i}:', output, file=outfile)", "solution(\"input_file\") == \"output_file\"", "solution('''4 6\n0 -4 2 1\n1 2\n1 3\n1 4\n1 2 -1\n2 3 -1\n2 4 -2\n2 1 3\n2 3 3\n1 2 1\n2 1 3\n2 3 3''') == '''5\n5\n5\n5\n5\n5'''\n\nassert solution('''5 9\n-5 2 -7 0 -2\n1 2\n1 3\n1 4\n1 5\n2 1 5\n2 1 -5\n2 5 5\n2 5 -5\n2 3 5\n2 3 -5\n2 4 5\n2 4 -5\n2 5 5\n2 5 -5''') == '''5\n5\n5\n5\n5\n5\n5\n5\n5\n5'''\n\nassert solution('''10 14\n-1 -1 1 -1 1 -1 -1 1 -1 -1\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n4 10\n5 1\n6 2\n7 3\n8 4\n9 5\n10 6\n1 1 0\n2 1 3\n2 3 3\n1 3 3\n2 1 3\n2 3 3\n1 3 -1\n2 1 3\n2 3 3\n1 3 0\n2 1 3\n2 3 3\n1 3 1", "solution('''4 5\n1 2 1 2\n1 2\n1 3\n2 4\n1 2 0\n2 2 3\n2 2 4\n1 4 0\n2 2 4''') == '''2\n2\n0'''\n\nassert solution('''4 2\n1 2 1 2\n1 2\n1 3\n2 4\n2 1 3\n2 1 4''') == '''2\n2'''\n\n# stress testing the solution\n# while True:\n#     test = {\n#         'size': random.randint(1, 10),\n#         'A': list(set(random.randint(-10**9, 10**9) for _ in range(random.randint(1, 10)))),\n#         'queries': [(random.randint(1, 2), random.randint(1, 10), random.randint(-10**9, 10**9))\n#                         for _ in range(random.randint(1, 10))]\n#     }\n#     out1 = solution(test)\n#     out2 = solution_brute(test)\n#     if out1 != out2:\n#         print(test)\n#         print(out1)\n#         print(out2)\n#         break", "solution(sample) == '''\n2\n0\n0\n'''\nassert solution(sample2) == '''\n0\n'''\nassert solution(sample3) == '''\n3\n3\n3\n0\n'''\nassert solution(problem) == '''\n\n'''", "solution(\"\"\"\n7 4\n0 3 4 6 -7 2 -6\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n1 4 3\n2 1 6\n1 5 1\n2 1 6\n\"\"\") == \"\"\"\n11\n1\n1\n\"\"\", \"Example 1\"\n\n# stress test\nimport random\nwhile True:\n    random.seed()\n    test_case = \"\"\"\n11 5\n-3 4 -8 9 -4 2 6 -7 7 -4 5\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n3 9\n3 10\n3 11\n2 1 8\n2 2 6\n2 3 9\n2 1 6\n1 4 -2\n\"\"\".strip()\n    n, q = map(int, test_case.split()[1:3])\n    a = list(map(int, test_case.split()[3:3+n]))\n    edges = []\n    for i in range(3+n, 3+n+n-1):\n        edges.append(list(map(int, test_case.split()[i].split())))\n    for i in range(3+n+n-1, 3+n+n-1+q):\n        print(test_case.split()[i])", "solution(\"\"\"\n5 4\n-5 5 -10 -10 -10\n1 2\n1 3\n2 4\n2 5\n1 3 0\n2 1 4\n1 3 10\n2 1 4\n\"\"\") == '''\n10\n20\n'''", "solution(\"\"\"\n5 5\n-5 4 2 -1 2\n1 2\n1 3\n2 4\n3 5\n1 1 1\n1 3 -1\n2 1 5\n2 3 2\n2 4 2\n\"\"\") == \"\"\"\n3\n-6\n\"\"\"", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution('''\n4 6\n2 -2 3 3\n1 2\n1 3\n2 4\n1 2 3\n2 3 4\n1 1 3\n2 2 4\n1 2 -4\n1 3 -4\n2 1 4\n''') == '''\n3\n0\n-4\n6\n-4\n'''\n\n# get input from stdin\ndef get_input() -> str:\n    return stdin.read()\n\n# parse input string as a sequence of integers\ndef parse_input(input_string: str) -> list:\n    return [int(line) for line in input_string.splitlines()]\n\n# input reader\ndef in_gen(input_string: str) -> Iterator[Tuple[int, ...]]:\n    lines = input_string.splitlines()\n    for i in range(0, len(lines), 2):\n        yield tuple(parse_input(lines[i]))\n        yield tuple(parse_input(lines[i+1]))\n\ndef main():\n    # read from stdin\n    stdin = get_input()\n    # parse input\n    input_list = list(in_gen(stdin))\n    for i in range(len(input_list)):\n        print(solution(stdin))\n\nif __name__ ==", "solution('''\n3 3\n1 1 1\n1 2\n2 3\n2 1 3\n2 1 2\n2 2 3\n''') == '''\n4\n0\n'''\n\nassert solution('''\n8 5\n5 -5 7 -2 -1 6 -1\n1 2\n1 3\n1 4\n2 5\n5 6\n6 7\n7 8\n1 2 7\n2 5 4\n2 4 7\n1 5 8\n2 3 7\n''') == '''\n22\n9\n9\n26\n'''", "solution(get_stdin()) == '''\\\n'''\n\n# show code after the problem is solved\n# print(solution(get_stdin()))", "solution(SAMPLE1) == '''\n1000\n'''\nassert solution(SAMPLE2) == '''\n10\n-10\n0\n'''\nassert solution(SAMPLE3) == '''\n1\n'''\nassert solution(SAMPLE4) == '''\n13\n'''\nassert solution(SAMPLE5) == '''\n1\n1\n3\n'''\nassert solution(SAMPLE6) == '''\n10\n'''\nassert solution(SAMPLE7) == '''\n10\n'''\nassert solution(SAMPLE8) == '''\n4\n'''\nassert solution(SAMPLE9) == '''\n47\n'''\nassert solution(SAMPLE10) == '''\n14\n'''\nassert solution(SAMPLE11) == '''\n98\n'''\nassert solution(SAMPLE12) == '''\n3\n'''\nassert solution(SAMPLE13) == '''\n26\n'''\nassert solution(SAMPLE14) == '''\n3\n'''\nassert solution(SAMPLE15) == '''\n52\n'''\nassert solution(SAMPLE16) == '''\n26\n'''\nassert solution(SAMPLE17) == '''\n26\n'''\nassert solution(SAMPLE18) == '''\n26\n'''\nassert solution(SAM", "solution('''\n5 5\n1 2 3 4 5\n1 2\n1 3\n2 4\n3 5\n1 1 1\n1 2 -1\n2 1 2\n2 1 5\n2 4 5\n''') == '''\n0\n2\n4\n4\n'''\n\nassert solution('''\n4 1\n1 2 3 4\n1 2\n1 3\n2 4\n2 1 2\n''') == '''\n4\n'''\n\nassert solution('''\n5 3\n0 0 0 0 0\n1 2\n1 3\n2 4\n3 5\n2 1 2\n2 1 5\n2 4 5\n''') == '''\n0\n0\n0\n'''", "solution(\"\"\"\n6 6\n1 -1 2 1 -1 2\n1 2\n1 3\n2 4\n2 5\n3 6\n1 1 2\n1 3 3\n2 3 6\n1 6 0\n2 1 6\n\"\"\") == \"\"\"\n0\n3\n5\n0\n5\n\"\"\", 'test fails'\n\nprint(\"All tests passed!\")", "solution(test_case[0]) == test_case[1]\n\n# get the input from stdin\nlines = []\nfor line in stdin:\n    lines.append(line.rstrip())\n\nprint(solution(lines))", "solution('''\n2 2\n2 3\n1 2\n1 1\n2 2\n''') == '''\n3\n3\n'''\n\nassert solution('''\n10 20\n10 5 7 9 -2 3 6 1 5 7\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n2 9\n2 10\n3 7\n3 8\n3 9\n3 10\n4 7\n4 8\n4 9\n4 10\n1 1 8\n2 1 10\n1 10 2\n2 1 2\n2 3 3\n2 3 2\n2 3 3\n2 3 2\n2 3 3\n1 4 2\n1 5 2\n1 6 2\n2 6 2\n2 6 3\n2 6 2\n2 6 3\n2 6 2\n''') == '''\n1\n5\n5\n5\n5\n5\n5\n5\n5\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n'''\n\nprint('test pass')"], "finish_reason": ["stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-48.70946938759002, -61.141146813513494, -35.8582010432, -29.17919800536, -90.96241388358997, -43.78069466172, -232.29009530038905, -101.03433750217505, -11.124748203699998, -23.33816604764, -135.8332384566901, -30.343357783348992, -39.09293519560998, -9.186210415, -81.91529317526002, -36.6605391804, -7.229530141, -172.94612054101552, -33.523700586539995, -170.32761324780267, -10.892203321960004, -57.41405451459497, -147.48225243411986, -35.60757768546999, -9.861644407640002, -88.515487301319, -72.57562048887002, -101.51870477501, -38.62691198945, -119.8225731709399, -83.08613940479995, -44.1085000661, -75.06834903974492, -114.20862918402992, -12.430373631999998, -163.4332815742662, -127.59152717172, -46.713880452809995, -190.60627028246978, -44.43698656556999, -53.3797537444, -6.814198859370001, -183.92173049892006, -99.65700503270405, -38.107119844539994, -120.08322085338301, -58.25496532995002, -69.51582698727002, -26.3876809658, -167.61575860483], "mean_logprob": [-0.4683602825729808, -0.20380382271171166, -0.6077661193762712, -0.5721411373599999, -0.5984369334446711, -0.14593564887240001, -0.7743003176679634, -0.405760391575, -0.8557498618230769, -0.4023821732351724, -0.7631080812173595, -0.10114452594449667, -0.7107806399201818, -1.148276301875, -0.8191529317526, -0.8146786484533334, -0.4518456338125, -0.5764870684700517, -0.5779948376989655, -0.567758710826008, -0.18153672203266666, -0.7088154878345062, -0.4916075081137333, -0.6139237531977586, -0.37929401567846155, -0.5861952801411854, -0.5259102933976086, -0.9761413920674038, -0.5765210744694029, -0.45559913753209125, -0.7838315038188679, -0.6583358218820895, -0.250227830132483, -0.47586928826679165, -0.956182587076923, -0.5447776052475534, -0.44612422088013987, -0.7077860674668182, -0.6353542342749, -0.7661549407856897, -0.8896625624066666, -0.425887428710625, -0.6130724349964, -0.8102195531114147, -1.0028189432773684, -0.40027740284461, -0.36870231221487343, -0.8477539876496342, -0.47120858867500004, -0.7042678932976051]}
{"prompt": "'''\nMr. Chanek has a new game called Dropping Balls. Initially, Mr. Chanek has a grid a of size n \u00d7 m\n\nEach cell (x,y) contains an integer a_{x,y} denoting the direction of how the ball will move.\n\n  * a_{x,y}=1 \u2014 the ball will move to the right (the next cell is (x, y + 1)); \n  * a_{x,y}=2 \u2014 the ball will move to the bottom (the next cell is (x + 1, y)); \n  * a_{x,y}=3 \u2014 the ball will move to the left (the next cell is (x, y - 1)). \n\n\n\nEvery time a ball leaves a cell (x,y), the integer a_{x,y} will change to 2. Mr. Chanek will drop k balls sequentially, each starting from the first row, and on the c_1, c_2, ..., c_k-th (1 \u2264 c_i \u2264 m) columns.\n\nDetermine in which column each ball will end up in (position of the ball after leaving the grid).\n\nInput\n\nThe first line contains three integers n, m, and k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 10^5) \u2014 the size of the grid and the number of balls dropped by Mr. Chanek.\n\nThe i-th of the next n lines contains m integers a_{i,1},a_{i,2},\u2026,a_{i,m} (1 \u2264 a_{i,j} \u2264 3). It will satisfy a_{i, 1} \u2260 3 and a_{i, m} \u2260 1.\n\nThe next line contains k integers c_1, c_2, \u2026, c_k (1 \u2264 c_i \u2264 m) \u2014 the balls' column positions dropped by Mr. Chanek sequentially.\n\nOutput\n\nOutput k integers \u2014 the i-th integer denoting the column where the i-th ball will end.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n4 3 3\n1 2 3\n1 1 1\n1 1 1\n1 1 1\n2 3 1\n\"\"\") == \"\"\"\n3 1 2\n\"\"\"\n\n'''\n    initially, the grid looks like this\n    1 2 3\n    1 1 1\n    1 1 1\n    1 1 1\n    \n    as long as a_x,y is not 3, we can go right\n    if a_x,y is 1, we go right\n    if a_x,y is 2, we go down\n    if a_x,y is 3, we are done\n    \n    we start with\n    1 2 3\n    1 1 1\n    1 1 1\n    1 1 1\n    \n    the first ball goes to column 2\n    we change that to \n    1 2 2\n    1 1 1\n    1 1 1\n    1 1 1\n    \n    and we change the column to 2\n    we go down\n    and we get\n    1 2 2\n    1 1 1\n    1 1 1\n    1 1 1\n    \n    we are done\n    \n    for the second ball, we go to column 3\n    we have\n    1 2 2\n    1 1 1\n    1 1 1\n    1 1 1\n    \n    we go right\n    1 2 2\n    1 1", "solution(r'''\n2 2 3\n1 2\n2 1\n1 2 2\n''') == '''\n1 2 1\n'''\n\nassert solution(r'''\n3 3 2\n2 3 1\n3 2 3\n1 2 3\n1 3\n''') == '''\n2 2\n'''", "solution(solution_input1) == solution_output1\nassert solution(solution_input2) == solution_output2\nassert solution(solution_input3) == solution_output3\nassert solution(solution_input4) == solution_output4\nassert solution(solution_input5) == solution_output5\nassert solution(solution_input6) == solution_output6\nassert solution(solution_input7) == solution_output7\nassert solution(solution_input8) == solution_output8\nassert solution(solution_input9) == solution_output9\nassert solution(solution_input10) == solution_output10\n\n# check the performance of solution\nassert len(solution(solution_input11)) == 50000", "solution('''\n3 4 2\n1 1 1 2\n1 1 1 1\n1 1 1 1\n1 3\n''') == '''\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3 3\n1 1 1\n1 1 1\n1 1 1\n1 2 3\n''') == '''\n1 2 3\n'''\n\n# submit the solution to the judge system\ndef submit_solution() -> None:\n    print(solution(input()))\n\nsubmit_solution()", "solution(solution_input) == solution_output\n# run solution\n# stdin = open('input.txt', 'r')\n# stdout = open('output.txt', 'w')\n# stdout.write(solution(stdin))\n# stdin.close()\n# stdout.close()", "\"1 3 3\" == solution(\"\"\"5 4 3\n3 1 2 1\n1 1 1 1\n1 1 1 1\n2 1 1 3\n2 2 2 2\n2 1 3\n\"\"\")\n\nassert \"1 1 2\" == solution(\"\"\"5 5 3\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n2 2 2 2 2\n1 1 3\n\"\"\")\n\nassert \"2 3 3\" == solution(\"\"\"5 5 3\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n2 2 2 2 2\n2 3 3\n\"\"\")\n\nassert \"1 2 2 2\" == solution(\"\"\"3 4 4\n3 1 2 1\n2 1 1 3\n2 2 2 2\n1 1 2 2\n\"\"\")\n\nassert \"1 1 1 1 1\" == solution(\"\"\"5 5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n2 2 2 2 2\n1 1 1 1 1\n\"\"\")\n\nassert \"2 3 3 3 3\" == solution(\"\"\"5 5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n2 2 2 2 2\n2 3 3 3 3\n\"\"\")\n", "solution(\"\"\"\n3 4 5\n1 2 3 1\n1 2 1 1\n1 2 1 1\n2 3 4 2\n\"\"\") == \"\"\"\n3 2 1 3\n\"\"\"", "solution('''\n3 3 5\n1 1 1\n1 1 1\n1 1 1\n2 1 3 2 2\n''') == '''\n2 1 3 2 2\n'''\nassert solution('''\n1 2 3\n1 2\n1 2\n''') == '''\n1 1 1\n'''\nassert solution('''\n5 8 6\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n3 1 2 2 5 5 5 4\n''') == '''\n3 3 3 3 3 3 3\n'''\nassert solution('''\n2 10 10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 2 5 8 8 4 1 1 2 7\n''') == '''\n1 1 1 1 1 1 1 1 1 1\n'''\n\ndef parse_input(input_str: str) -> list:\n    lines = input_str.split('\\n')\n    n, m, k = [int(i) for i in lines[0].split()]\n    a = [[int(c) for c in line.split()] for line in lines[1:n+1]]\n    c = [int", "solution(t_case1) == '1\\n5\\n1\\n5\\n'\n\n# submit\ndef submit():\n    print(solution(input()))\nsubmit()", "solution(\"input\") == \"output\"", "solution('''\n5 5 1\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n2\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n5 5 1\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n5 5 1\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n5\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n5 5 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n2 3\n''') == '2 3'\n\n# check the correctness of solution\nassert solution('''\n5 5 4\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 1 1 1 2\n1 2 3 4\n''') == '1 2 3 4'\n\n# check the correctness of solution\nassert solution('''\n5 5", "solution(\"\"\"\n5 4 3\n1 2 1 1\n2 1 1 1\n1 2 1 2\n2 1 2 1\n1 1 1 1\n1 2 3\n\"\"\") == \"\"\"\n1 1 2\n\"\"\"\n\nassert solution(\"\"\"\n3 3 3\n2 1 1\n2 1 2\n2 1 2\n1 2 3\n\"\"\") == \"\"\"\n1 2 1\n\"\"\"\n\nassert solution(\"\"\"\n5 2 1\n2 2\n2 1\n2 2\n2 2\n2 2\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1 5 5\n1 2 3 1 1\n1 2 3 1 2\n1 2 3 1 3\n1 2 3 1 4\n1 2 3 1 5\n\"\"\") == \"\"\"\n2 3 4 5\n\"\"\"\n\n# TODO: add some tests\n\n# start testing\nif __name__ == \"__main__\":\n    import os\n    import time\n    input_file = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)),\n        \"input.txt\")\n    start = time.time()\n    with open(input_file, \"r\") as f:\n        stdin = f.read()\n    print(solution(stdin))\n    print(f\"computed in {time.time", "solution(test_dataset) == test_answer\n\n# get the input\nlines = []\nfor line in stdin:\n    lines.append(line.rstrip('\\n'))\n\n# run and get the output\noutput = solution(lines)\n\n# print the output\nprint(output)", "solution('''\n3 4 4\n1 2 1 2\n2 1 2 1\n1 2 1 2\n1 2 2 4\n''') == '''\n2 1 1 2\n'''\n\nassert solution('''\n2 4 3\n2 2 1 1\n1 1 1 2\n1 2 2 2\n''') == '''\n2 3 3\n'''\n\nassert solution('''\n2 2 2\n1 1\n1 1\n1 2\n''') == '''\n1 2\n'''", "solution('''\n4 4 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n2 3 1 2\n''') == '''\n2 3 1 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4 2\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 2\n''') == '''\n3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4 2\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 4\n''') == '''\n3 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 4 5\n1 2 1 1\n1 1 1 1\n1 1 1 1\n2 1 1 3\n''') == '''\n2 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1 4 1\n1 1 1 1\n1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1 4 2\n1 1 1 1\n2 3\n''') == '''\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 1 1\n1\n", "solution('''\n4 5 5\n1 2 3 2 1\n1 1 1 2 1\n1 2 1 1 2\n1 1 1 2 1\n2 2 3 3 3 2\n''') == '''\n3 3 3 3 3\n'''\nassert solution('''\n3 3 5\n1 1 1\n1 2 1\n1 1 1\n1 2 1 2 3\n''') == '''\n2 2 1 2 3\n'''\n\n# get the input\nwith open('testcase/input.txt') as file:\n    content = file.read()\n\n# print the output to a file\nwith open('testcase/output.txt', 'w') as file:\n    file.write(solution(content))", "solution('''\n7 11 5\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n5 8 1 2 5\n''') == '''\n5 5 7 7 7\n'''", "solution(\"\"\"\n5 5 4\n2 2 1 1 1\n2 1 2 2 1\n1 1 1 1 1\n1 1 2 2 1\n2 2 2 2 2\n2 1 5 4 1\n\"\"\") == \"\"\"\n4\n4\n4\n4\n\"\"\"\nassert solution(\"\"\"\n1 5 1\n1 1 1 1 1\n3\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n2 3 2\n2 1 2\n1 1 2\n1 3\n\"\"\") == \"\"\"\n1\n2\n\"\"\"", "solution('''3 4 4\n3 2 1 1\n2 2 1 1\n1 1 1 1\n2 3 1 4\n''') == '''1 1 2 4\n'''\n\n# get the input\nT = int(input())\nfor i in range(T):\n    N,M,K = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(N):\n        matrix.append([int(x) for x in input().split()])\n    cols = [int(x) for x in input().split()]\n    # run solution\n    print('Case #{}: {}'.format(i+1, solution(N,M,K,matrix,cols)))", "solution('''\n6 6 2\n1 1 2 2 2 1\n1 1 1 2 2 1\n2 2 2 2 2 2\n1 2 2 2 2 2\n2 1 2 2 2 2\n2 2 2 2 2 2\n2 1\n''') == '''\n1\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n1 6 2\n1 1 1 1 1 1\n1 2\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 1\n1\n1\n''') == '''\n1\n'''", "'1 2 3 4 5 6' == solution('''\n5 6 5\n1 1 1 1 1 1\n1 2 1 1 1 1\n1 2 2 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 2 3 4 5 6\n''')\n\n# stdin\n'''\n'''", "solution(stdin) == stdout\n\n# lets test if it works for another test case\n# stdin = ...\n# assert solution(stdin) == ...", "solution('''\n4 6 5\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n3 2 5 6 4\n''') == '''\n2 2 3 3 3\n'''\nassert solution('''\n6 3 2\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2\n''') == '''\n1 2\n'''\nassert solution('''\n5 7 10\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 2 3 4 5 6 7\n''') == '''\n1 2 3 4 5 6 7\n'''\nassert solution('''\n2 3 3\n1 1 1\n1 1 1\n1 2 3\n''') == '''\n1 2 2\n'''\nassert solution('''\n3 2 1\n1 2\n1 2\n1 2\n2\n''') == '''\n2\n'''\nassert solution('''\n8 1 1\n3\n3\n3\n3\n3\n3\n3\n3\n1\n''') == '''\n1\n'''\nassert solution('''\n4 6 5\n1 1", "solution('''\n5 5 3\n2 1 2 2 2\n2 1 1 1 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 3 5\n''') == '''\n3\n3\n5\n'''\n\n# for testing\nassert solution('''\n4 6 4\n2 1 1 1 1 1\n2 1 1 1 1 1\n2 2 2 2 2 2\n2 2 2 2 2 2\n4 5 1 4 6\n''') == '''\n2\n2\n6\n4\n'''\n\n# for testing\nassert solution('''\n10 10 4\n2 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2", "solution('''\n2 3 2\n1 1 2\n1 1 1\n1 2\n''') == '''\n1 2\n'''\n\nassert solution('''\n2 3 3\n1 1 2\n1 1 1\n1 2 1\n''') == '''\n1 2 2\n'''\n\nassert solution('''\n2 3 3\n1 1 2\n1 1 1\n1 2 1\n''') == '''\n1 2 2\n'''\n\nassert solution('''\n3 4 5\n1 2 1 1\n1 1 1 1\n1 1 1 1\n1 2 2 1 1\n''') == '''\n1 2 2 3 3\n'''\n\nassert solution('''\n2 3 2\n1 1 2\n1 1 1\n1 2\n''') == '''\n1 2\n'''\n\nassert solution('''\n3 4 5\n1 2 1 1\n1 1 1 1\n1 1 1 1\n1 2 2 1 1\n''') == '''\n1 2 2 3 3\n'''\n\nassert solution('''\n1000 1000 1000\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(stdin) == '''\n'''", "solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"", "solution(SAMPLE1) == ''\nassert solution(SAMPLE2) == ''\nassert solution(SAMPLE3) == ''\nassert solution(SAMPLE4) == ''\nassert solution(SAMPLE5) == ''", "solution(test_data) == answer\n\n# auto-submit\n# _SUBMIT_\n# _SUBMIT_", "solution(\"\"\"\n3 3 3\n2 2 2\n1 2 2\n1 2 2\n1 2 3\n\"\"\") == \"1 2 2\", \"failed test\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5 3\n1 1 1 1 1\n1 2 2 1 1\n1 2 2 1 1\n1 2 2 1 1\n1 1 1 1 1\n1 2 3\n\"\"\") == \"1 2 3\", \"failed test\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5 3\n1 1 1 1 1\n1 2 2 1 1\n1 2 2 1 1\n1 2 2 1 1\n1 1 1 1 1\n1 2 3\n\"\"\") == \"1 2 3\", \"failed test\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1 1 1\n1\n1\n\"\"\") == \"1\", \"failed test\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1 1 2\n1\n1\n1\n\"\"\") == \"1 1\", \"failed test\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 2 1\n1 1\n1 2\n1 1\n1\n\"\"\") == \"1\", \"failed test\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 2 2\n1 1\n1 2\n1 1\n1 2\n", "solution('''\n3 4 2\n1 1 2 3\n2 2 2 3\n1 2 3 3\n2 3\n''') == '3 2'\n\nassert solution('''\n3 4 2\n1 1 2 3\n2 2 2 3\n1 2 3 3\n2 1\n''') == '2 1'\n\nassert solution('''\n4 6 5\n1 1 1 1 1 1\n2 2 2 2 2 2\n1 1 1 1 1 1\n2 2 2 2 2 2\n3 1 1 4 2 2\n''') == '1 2 2 1 1'\n\nassert solution('''\n1000 1000 5\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1", "solution('''\n''')\n\n# get input for local testing\ndef get_input():\n    lines = []\n    while True:\n        try:\n            line = input()\n        except:\n            break\n        else:\n            lines.append(line)\n    return '\\n'.join(lines)\n\n# call solution function\nprint(solution(get_input()))", "solution('''\n5 5 3\n1 2 3 1 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n2 3 2\n''') == '''\n1 2 4\n'''\n\n# get input\n#stdin = ''\nstdin = '''\n3 3 3\n1 2 1\n1 1 1\n1 1 1\n1 2 1\n'''\nstdin = stdin.strip()\n\n# print solution\nprint(solution(stdin))", "solution(\n'''\n4 4 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 1 1 1\n1 2 4\n'''\n) == '''\n3\n3\n3\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n4 4 2\n3 2 1 1\n3 2 1 1\n3 2 1 1\n3 3 3 3\n2 3\n'''\n) == '''\n2\n2\n'''\n\nprint('OK')\n# %%", "solution('''\\\n4 6 3\n1 2 1 1 2 3\n2 1 1 1 2 3\n2 1 1 1 2 3\n2 1 1 1 2 3\n2 4 6\\\n''') == '\\\n3\n3\n3\\\n'\nassert solution('''\\\n1 1 1\n1\n1\\\n''') == '\\\n1\\\n'\nassert solution('''\\\n1 3 2\n1 1 1\n1\\\n''') == '\\\n1\n1\\\n'\nassert solution('''\\\n2 3 3\n1 1 1\n2 1 1\n1 1 1\\\n''') == '\\\n1\n1\n1\\\n'\nassert solution('''\\\n4 5 5\n1 1 1 1 1\n1 1 1 1 1\n2 1 1 1 1\n2 1 1 1 1\n2 1 1 1 1\n2 1 1 1 1\n2 1 1 1 1\n1 1 1 1 1\\\n''') == '\\\n5\n5\n5\n5\n5\\\n'\nassert solution('''\\\n3 3 3\n2 1 1\n2 1 1\n2 1 1\n2 1 1\n2 1 1\n2 1 1\\\n''') == '\\\n1\n1\n1\\\n'\nassert solution('''\\\n1 1 4\n1\n1\n", "solution('''\n3 4 2\n1 1 2 1\n1 1 1 1\n1 1 1 1\n2 4\n''') == '3 4', 'test 1'\n\nassert solution('''\n3 4 2\n1 1 2 1\n1 1 1 1\n1 1 1 1\n2 3\n''') == '2 3', 'test 2'\n\nassert solution('''\n3 4 3\n1 1 2 1\n1 1 1 1\n1 1 1 1\n2 3 4\n''') == '2 3 4', 'test 3'\n\nassert solution('''\n3 4 3\n1 1 2 1\n1 1 1 1\n1 1 1 1\n2 2 2\n''') == '2 3 3', 'test 4'\n\nassert solution('''\n3 4 3\n1 1 2 1\n1 1 1 1\n1 1 1 1\n2 1 2\n''') == '2 3 2', 'test 5'\n\nassert solution('''\n3 3 2\n1 1 2\n1 1 2\n1 1 2\n1 2\n''') == '1 2', 'test 6'\n\nassert solution('''\n3 3 2\n1 1 2\n1 1 2\n1 1 2\n2 1\n''') == '2 2', 'test 7'\n\nassert solution('''\n5 5 2\n1 1 2 2", "solution(\"\"\"8 7 1\n2 1 1 2 1 1 1\n2 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 3\n3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"8 7 2\n2 1 1 2 1 1 1\n2 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 3\n3 7\n\"\"\") == \"1 5\"\n\nassert solution(\"\"\"8 7 3\n2 1 1 2 1 1 1\n2 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 3\n3 1 3\n\"\"\") == \"3 1 3\"\n\nassert solution(\"\"\"1 1 1\n1\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"6 3 3\n1 2 2\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n2", "solution('''\n4 4 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '''\n4 4 4 4\n'''\n\n# get the input for test and run the solution on it\nTEST_CASES = [\n    '''\n    4 4 4\n    1 1 1 1\n    1 1 1 1\n    1 1 1 1\n    1 1 1 1\n    1 1 1 1\n    ''',\n    '''\n    4 2 2\n    2 1 1\n    2 1 1\n    2 1 1\n    2 1 1\n    1 2\n    ''',\n    '''\n    4 4 2\n    1 2 3 1\n    1 2 3 1\n    1 2 3 1\n    1 2 3 1\n    1 2\n    ''',\n    '''\n    3 3 3\n    2 2 2\n    1 1 1\n    3 3 3\n    1 2 1\n    ''',\n    '''\n    2 2 2\n    2 2\n    2 2\n    1 2\n    ''',\n    '''\n    3 3 3\n    1 1 1\n    1 1 1\n    1 1 1\n    2 2 2\n    ''',\n    '''\n    4 4 3\n    1 1 2 1\n    2", "solution('''\n3 4 5\n1 1 1 1\n1 1 1 1\n1 1 1 1\n2 3 4 5\n''') == '''\n1 1 1 1\n'''\nassert solution('''\n3 4 5\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '''\n1 1 1 1 1\n'''\nassert solution('''\n3 4 5\n1 1 1 1\n1 1 1 1\n1 1 1 1\n2 3 4 5\n''') == '''\n1 1 1 1\n'''\nassert solution('''\n3 4 5\n1 1 1 1\n1 1 1 1\n1 1 1 1\n2 3 4 5\n''') == '''\n1 1 1 1\n'''\nassert solution('''\n3 4 5\n1 1 1 1\n1 1 1 1\n1 1 1 1\n2 3 4 5\n''') == '''\n1 1 1 1\n'''\nassert solution('''\n3 4 5\n1 1 1 1\n1 1 1 1\n1 1 1 1\n2 3 4 5\n''') == '''\n1 1 1 1\n'''\nassert solution('''\n3 4 5\n1 1 1 1\n1 1 1 1\n1 1 1 1\n2 3 4 5\n''') == '''\n", "solution(\"4 4 2\\n1 2 3 1\\n2 2 3 1\\n3 2 3 1\\n1 1 1 1\\n1 2\\n\") == \"2\\n2\\n\"\n\n# get the input\nwith open('in.txt', 'r') as f:\n    data = f.read()\n\n# write the output to a file\nwith open('out.txt', 'w') as f:\n    f.write(solution(data))", "solution(r'''\n2 3 3\n1 2 3\n2 2 3\n2 3\n''') == '''\n3\n3\n3\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1 1 2\n1\n1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1 1 4\n1\n1\n1\n1\n''') == '''\n1\n1\n1\n1\n'''\n\nassert solution(r'''\n1 1 1\n1\n1\n''') == '''\n1\n'''\n\nassert solution(r'''\n3 3 5\n1 2 3\n2 2 3\n2 3 3\n1 1 2 3\n''') == '''\n3\n3\n3\n2\n3\n'''", "(solution('''\n5 5 3\n2 1 2 2 1\n1 1 2 1 2\n2 1 2 2 1\n1 1 2 1 2\n2 1 2 2 1\n3 2 5\n''')) == '''\n3 2 4\n'''\n\nassert (solution('''\n4 4 4\n1 2 2 1\n2 1 2 1\n2 1 2 1\n1 2 2 1\n2 2 3 1\n''')) == '''\n2 2 2 1\n'''\n\nassert (solution('''\n3 5 2\n2 1 2 2 1\n1 1 2 1 2\n2 1 2 2 1\n3 1\n''')) == '''\n2 3\n'''\n\nassert (solution('''\n4 5 5\n1 2 2 1 1\n2 1 2 1 2\n2 1 2 1 2\n1 2 2 1 1\n2 2 3 1 1\n''')) == '''\n2 2 2 1 1\n'''\n\nassert (solution('''\n2 3 3\n2 1 2\n1 1 2\n2 2 1\n''')) == '''\n1 2 2\n'''\n\nassert (solution('''\n10 10 1\n2 1 2 2 1 1 2 2 1 2\n1 1 2 1 2 1 1 2 1 2\n2 1 2 2 1 1 2 2", "solution('''4 4 5\n1 2 1 1\n1 1 1 1\n3 3 3 3\n3 3 3 3\n2 3 2 3 2\n''') == '''1 2 1 3 3'''\n\n# check the performance of solution\n\nassert solution('''1000 1000 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(stdin_copy) == '''\n'''", "solution(str_stdin1) == str_stdout1\nassert solution(str_stdin2) == str_stdout2\n\n# run with tests\nprint(solution(str_stdin1))\nprint(solution(str_stdin2))", "solution(stdin) == stdout", "(solution('''\n5 4 3\n1 1 1 2\n1 1 1 1\n1 1 1 2\n1 1 1 1\n1 1 1 1\n2 3 1\n''') == '''\n3 3 2\n''')\n\n# get input\nn, m, k = [int(x) for x in input().split()]\nnums = [[int(x) for x in input().split()] for _ in range(n)]\ncolumns = [int(x) for x in input().split()]\n\n# run algorithm\nfor column in columns:\n    for i in range(n):\n        # check ball direction\n        if nums[i][column - 1] == 1:\n            # ball goes right\n            nums[i][column - 1] = 2\n            column += 1\n        elif nums[i][column - 1] == 2:\n            # ball goes down\n            nums[i][column - 1] = 2\n            continue\n        elif nums[i][column - 1] == 3:\n            # ball goes left\n            nums[i][column - 1] = 2\n            column -= 1\n        # check if the ball is outside the grid\n        if column < 1 or column > m:\n            print(column)\n            break", "solution(\n'''3 3 2\n1 1 1\n1 1 1\n1 1 1\n1 2\n''') == '''2 3'''\n\nassert solution(\n'''2 3 3\n1 1 1\n1 1 1\n1 2 1\n''') == '''1 2 2'''\n\n# read the input\ninput_ = open('input.txt', 'r')\nstdin = input_.read()\ninput_.close()\n\n# create output and write\noutput_ = open('output.txt', 'w')\noutput_.write(solution(stdin))\noutput_.close()", "solution('''\n1 1 1\n1\n1\n''') == '1'\n\nassert solution('''\n2 2 3\n2 2\n1 1\n1 2 2\n''') == '1 1 1'\n\nassert solution('''\n5 5 2\n1 2 3 2 1\n1 2 3 2 1\n1 2 3 2 1\n1 2 3 2 1\n1 2 3 2 1\n1 5\n''') == '5 1'\n\nassert solution('''\n3 3 2\n1 1 2\n2 1 2\n1 1 2\n2 3\n2 3\n''') == '2 2'\n\nassert solution('''\n5 5 2\n1 2 3 2 1\n1 2 3 2 1\n1 2 3 2 1\n1 2 3 2 1\n1 2 3 2 1\n1 5\n''') == '5 1'\n\nassert solution('''\n3 3 1\n1 1 2\n2 1 2\n1 1 2\n2 3\n''') == '2'\n\n# print(solution('''\n# 3 3 2\n# 1 1 2\n# 2 1 2\n# 1 1 2\n# 2 3\n# 2 3\n# '''))", "solution('''\n3 3 3\n1 1 1\n2 2 3\n1 1 1\n1 2 3\n''') == '1 1 1'\n\n# ---\n\n# check the speed of solution\nimport timeit\n\nassert timeit.timeit(stmt='solution(r\"\"\"\\n3 3 3\\n1 1 1\\n2 2 3\\n1 1 1\\n1 2 3\\n\"\"\")', setup='from __main__ import solution', number=10) < 1\n\n# ---\n\n# check the speed of solution\nimport timeit\n\nassert timeit.timeit(stmt='solution(r\"\"\"\\n2 3 3\\n1 1 1\\n1 1 1\\n1 2 3\\n\"\"\")', setup='from __main__ import solution', number=10) < 1\n\n# ---\n\n# check the speed of solution\nimport timeit\n\nassert timeit.timeit(stmt='solution(r\"\"\"\\n2 2 2\\n1 1\\n1 1\\n1 2\\n\"\"\")', setup='from __main__ import solution', number=10) < 1\n\n# ---\n\n# check the speed of solution\nimport timeit\n\nassert timeit.timeit(stmt='solution(r\"\"\"\\n2 3 3\\n1 1 1\\n1"], "finish_reason": ["length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-186.83690819594997, -36.38847903018002, -34.4766630363, -47.16160415199201, -33.70824947871999, -106.3529632417249, -31.274483888000002, -136.67232547796698, -42.86528129933001, -7.886092795000001, -43.51879966129603, -139.70678746987306, -35.25754923428401, -61.37669829123002, -92.35964203502299, -95.38882514739998, -41.89198611775, -77.05043261656003, -79.32857044458999, -65.5817016525, -49.727342001100006, -42.47867660800001, -103.746945399463, -94.64551896190714, -69.682840476541, -10.513415285000002, -10.087441170000002, -16.36164233038, -24.4227503074, -84.62627890454999, -75.6561487312599, -38.21617790293, -62.515104745680006, -61.75545880222699, -119.18113349025494, -82.16057310079009, -83.12393171999501, -111.12758294040803, -43.771326528650974, -51.92494399471001, -64.06804979773, -125.19710679508609, -55.60043602840004, -18.101192667, -34.14641745802001, -5.744822728, -106.81423706077202, -67.24378056001001, -85.80387419479798, -82.94178051226001], "mean_logprob": [-0.6227896939865, -0.5053955420858334, -0.19928706957398845, -0.38342767603245526, -0.4747640771650704, -0.3545098774724167, -0.7818620972, -0.45557441825989, -0.9742109386211364, -0.8762325327777778, -0.14506266553765335, -0.46568929156624334, -0.49658520048287325, -0.5383920902739474, -0.30786547345007664, -0.5852075162417177, -0.3674735624364035, -0.664227867384138, -0.4721938716939881, -0.4651184514361702, -0.6811964657684931, -1.1480723407567568, -0.34582315133154334, -0.31548506320635666, -0.23227613492180332, -0.8761179404166667, -0.8406200975, -0.33391106796693876, -0.8421638037034482, -0.2820875963485, -0.2521871624375333, -0.42939525733629214, -0.5253370146695798, -0.5278244342070684, -0.3972704449675167, -0.27386857700263334, -0.2770797723999833, -0.37042527646802664, -0.14590442176217, -0.480786518469537, -0.33543481569492145, -0.41732368931695335, -0.18533478676133333, -1.2929423333571428, -0.5597773353773771, -0.6383136364444445, -0.3658021817149726, -0.49443956294124997, -0.32136282469961797, -0.27647260170753335]}
{"prompt": "'''\nMr. Chanek wants to knit a batik, a traditional cloth from Indonesia. The cloth forms a grid a with size n \u00d7 m. There are k colors, and each cell in the grid can be one of the k colors.\n\nDefine a sub-rectangle as an ordered pair of two cells ((x_1, y_1), (x_2, y_2)), denoting the top-left cell and bottom-right cell (inclusively) of a sub-rectangle in a. Two sub-rectangles ((x_1, y_1), (x_2, y_2)) and ((x_3, y_3), (x_4, y_4)) have the same pattern if and only if the following holds: \n\n  * they have the same width (x_2 - x_1 = x_4 - x_3); \n  * they have the same height (y_2 - y_1 = y_4 - y_3); \n  * for every pair (i, j) where 0 \u2264 i \u2264 x_2 - x_1 and 0 \u2264 j \u2264 y_2 - y_1, the color of cells (x_1 + i, y_1 + j) and (x_3 + i, y_3 + j) are equal. \n\n\n\nCount the number of possible batik color combinations, such that the subrectangles ((a_x, a_y),(a_x + r - 1, a_y + c - 1)) and ((b_x, b_y),(b_x + r - 1, b_y + c - 1)) have the same pattern.\n\nOutput the answer modulo 10^9 + 7.\n\nInput\n\nThe first line contains five integers n, m, k, r, and c (1 \u2264 n, m \u2264 10^9, 1 \u2264 k \u2264 10^9, 1 \u2264 r \u2264 min(10^6, n), 1 \u2264 c \u2264 min(10^6, m)) \u2014 the size of the batik, the number of colors, and size of the sub-rectangle.\n\nThe second line contains four integers a_x, a_y, b_x, and b_y (1 \u2264 a_x, b_x \u2264 n, 1 \u2264 a_y, b_y \u2264 m) \u2014 the top-left corners of the first and second sub-rectangle. Both of the sub-rectangles given are inside the grid (1 \u2264 a_x + r - 1, b_x + r - 1 \u2264 n, 1 \u2264 a_y + c - 1, b_y + c - 1 \u2264 m).\n\nOutput\n\nOutput an integer denoting the number of possible batik color combinations modulo 10^9 + 7.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n5 5 1 2 2\n1 1 1 2\n''') == '''\n2\n'''\n\nassert solution('''\n5 5 1 1 1\n1 1 2 2\n''') == '''\n0\n'''\n\nassert solution('''\n5 5 3 3 3\n1 1 1 3\n''') == '''\n243\n'''\n\nassert solution('''\n5 5 3 3 3\n1 1 2 2\n''') == '''\n36\n'''\n\nassert solution('''\n5 5 3 3 3\n1 1 3 3\n''') == '''\n1\n'''\n\n# print solution\nimport sys\nsys.setrecursionlimit(100000)\nprint(solution(sys.stdin.read()))", "solution(\"\") == \"\", \"Example #1\"\nassert solution(\"\") == \"\", \"Example #2\"\nassert solution(\"\") == \"\", \"Example #3\"\nassert solution(\"\") == \"\", \"Example #4\"\nassert solution(\"\") == \"\", \"Example #5\"\nassert solution(\"\") == \"\", \"Example #6\"\nassert solution(\"\") == \"\", \"Example #7\"\nassert solution(\"\") == \"\", \"Example #8\"\nassert solution(\"\") == \"\", \"Example #9\"\nassert solution(\"\") == \"\", \"Example #10\"\nassert solution(\"\") == \"\", \"Example #11\"\nassert solution(\"\") == \"\", \"Example #12\"\nassert solution(\"\") == \"\", \"Example #13\"\nassert solution(\"\") == \"\", \"Example #14\"\nassert solution(\"\") == \"\", \"Example #15\"\nassert solution(\"\") == \"\", \"Example #16\"\nassert solution(\"\") == \"\", \"Example #17\"\nassert solution(\"\") == \"\", \"Example #18\"\nassert solution(\"\") == \"\", \"Example #19\"\nassert solution(\"\") == \"\", \"Example #20\"\nassert solution(\"\") == \"\", \"Example #21\"\nassert solution(\"\") == \"\", \"Example #22\"\nassert solution(\"\") == \"\", \"Example #23\"\nassert solution", "solution('''\n6 5 1 2 2\n1 1 1 1\n''') == '''\n36\n'''\n\n# test cases\nimport os\ntest_cases = [\n    'test_solution.txt',\n    'test_solution_1.txt',\n    'test_solution_2.txt',\n    'test_solution_3.txt',\n    'test_solution_4.txt',\n    'test_solution_5.txt',\n    'test_solution_6.txt',\n    'test_solution_7.txt',\n    'test_solution_8.txt',\n    'test_solution_9.txt',\n    'test_solution_10.txt',\n    'test_solution_11.txt',\n    'test_solution_12.txt',\n    'test_solution_13.txt',\n    'test_solution_14.txt',\n    'test_solution_15.txt',\n    'test_solution_16.txt',\n    'test_solution_17.txt',\n    'test_solution_18.txt',\n    'test_solution_19.txt',\n    'test_solution_20.txt',\n    'test_solution_21.", "solution('''\n5 5 2 1 1\n1 1 3 3\n''') == '''\n13\n'''\nassert solution('''\n5 5 2 1 1\n1 1 3 5\n''') == '''\n12\n'''\nassert solution('''\n5 5 2 1 1\n1 1 5 5\n''') == '''\n11\n'''\nassert solution('''\n5 5 2 2 2\n1 1 5 5\n''') == '''\n9\n'''\nassert solution('''\n5 5 2 2 2\n1 1 3 3\n''') == '''\n9\n'''\nassert solution('''\n5 5 2 2 2\n1 1 2 2\n''') == '''\n10\n'''\nassert solution('''\n5 5 2 2 2\n1 1 2 4\n''') == '''\n10\n'''\nassert solution('''\n5 5 2 2 2\n1 1 2 5\n''') == '''\n10\n'''\nassert solution('''\n5 5 2 2 2\n1 1 3 4\n''') == '''\n10\n'''\nassert solution('''\n5 5 2 2 2\n1 1 3 5\n''') == '''\n10\n'''\nassert solution('''\n5 5 2 2 2\n1 1 4 5\n''') == '", "solution('''3 5 4 2 2\n1 1 3 5''') == '64'\nassert solution('''3 3 2 2 2\n1 1 2 2''') == '4'\nassert solution('''10 10 9 10 5\n4 1 7 8''') == '865709788'\n\n# benchmark\ninput_data = ['''10 10 9 10 5\n4 1 7 8''',\n'''500 500 2 500 1\n1 1 500 500''',\n'''5 5 2 2 2\n3 2 4 4''',\n'''100 100 1 1 1\n1 1 100 100''',\n'''2 3 3 2 1\n1 2 2 3''',\n'''10 4 10 10 2\n1 1 2 4''',\n'''5 5 5 5 5\n3 2 4 4''',\n'''100 100 99 99 99\n50 50 99 99''',\n'''100 100 100 100 100\n10 10 100 100''',\n'''1 1 1 1 1\n1 1 1 1''',\n'''3 5 4 2 2\n1 1 3 5''',\n'''3 3 2 2 2\n1 1 2 2''',\n'''10 10 1 1 1\n1 1 10 10''',\n'''1 1 1 1 1\n1 1 1 1''',\n'''10 10 1 1 1\n1 1 10 10", "solution('''\n1000000000 1000000000 1000000000 1000000 1000000\n1 1 1 1\n''') == '153090691'\nassert solution('''\n1000000000 1000000000 1000000000 2 2\n1 1 1 1\n''') == '4'\nassert solution('''\n1000000000 1000000000 1000000000 2 2\n1 2 1 2\n''') == '1'\nassert solution('''\n1000000000 1000000000 1000000000 1 1\n1 1000000 1 1000000\n''') == '1'\nassert solution('''\n1000000000 1000000000 1000000000 1000000 1000000\n500000 500000 500000 500000\n''') == '133177970'\nassert solution('''\n1000000000 1000000000 1000000000 1000000 1000000\n1 1 500000 500000\n''') == '123456789'\nassert solution('''\n2 2 2 2 1\n1 1 1 1\n''') == '1'\nassert solution('''\n2 2 2 2 1\n1 1 2 2\n''') == '1'\nassert solution('''\n2 2 2 2 1\n1 2 1 2\n''') == '2'\nassert solution('''\n2 2 2 2 1\n1 2 2 1\n''') == '2'\nassert solution('''\n2 2 2 2 1\n2 1", "solution(\"\"\"5 7 3 3 3\n2 3 3 4\"\"\") == \"36\"\nassert solution(\"\"\"10 10 100 100 100\n100 100 10 10\"\"\") == \"88103904\"\nassert solution(\"\"\"11 17 3 3 3\n2 3 3 4\"\"\") == \"72\"\nassert solution(\"\"\"11 17 3 3 4\n2 3 3 4\"\"\") == \"360\"\nassert solution(\"\"\"11 17 3 2 3\n2 3 3 4\"\"\") == \"144\"\nassert solution(\"\"\"11 17 3 1 3\n2 3 3 4\"\"\") == \"360\"\nassert solution(\"\"\"11 17 3 3 2\n2 3 3 4\"\"\") == \"90\"\nassert solution(\"\"\"11 17 3 2 2\n2 3 3 4\"\"\") == \"72\"\nassert solution(\"\"\"11 17 3 1 2\n2 3 3 4\"\"\") == \"90\"\nassert solution(\"\"\"11 17 3 3 1\n2 3 3 4\"\"\") == \"30\"\nassert solution(\"\"\"11 17 3 2 1\n2 3 3 4\"\"\") == \"36\"\nassert solution(\"\"\"11 17 3 1 1\n2 3 3 4\"\"\") == \"30\"\nassert solution(\"\"\"9 9 9 9 9\n2 3 3 4\"\"\") == \"16570136\"\nassert solution(\"\"\"9 9 1 1 1\n2 3 3 4\"\"\") == \"1563221\"", "solution('''\n2 3 3 2 2\n1 1 2 2\n''') == '''\n6\n'''\n\nassert solution('''\n4 5 7 2 2\n1 1 3 5\n''') == '''\n18\n'''\n\nassert solution('''\n10 10 2 1 1\n1 1 10 10\n''') == '''\n2\n'''\n\nassert solution('''\n1 1 1000000000 1 1\n1 1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n1 1 1000000000 1 1\n1 1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n1 1 1000000000 1 1\n1 1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n3 3 3 2 2\n1 2 1 3\n''') == '''\n27\n'''\n\n# this part is for the user interface. do not change it\nimport sys\n\ndef get_stdin():\n    lines = []\n    for line in sys.stdin:\n        lines.append(line.rstrip('\\n'))\n    return '\\n'.join(lines)\n\nif __name__ == '__main__':\n    print(solution(get_stdin()))", "solution(\"\"\"\n4 6 3 2 3\n1 3 3 6\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2 2 2 1 1\n1 1 2 2\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 2 3 1 2\n1 1 3 2\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 4 2 1 2\n1 1 3 4\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 4 2 1 2\n1 2 3 4\n\"\"\") == \"5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 4 2 1 2\n1 3 3 4\n\"\"\") == \"5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 4 2 1 2\n1 4 3 4\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 4 2 1 2\n2 1 3 4\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 4 2 1 2\n2 2 3 4\n\"\"\") == \"5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 4 2 1 2\n2 3 3 4\n\"\"\") == \"5\"", "True\n# test the performance of solution\nimport timeit\nprint(timeit.timeit(lambda: solution('test case'), number=100)/100)", "solution('''\n4 4 3 1 1\n1 1 2 2\n''') == '9'\n\nassert solution('''\n4 4 3 1 2\n1 1 2 2\n''') == '63'\n\nassert solution('''\n4 4 3 2 2\n1 1 2 2\n''') == '120'\n\nassert solution('''\n5 5 5 1 1\n1 1 2 2\n''') == '25'\n\nassert solution('''\n5 5 5 1 2\n1 1 2 2\n''') == '625'\n\nassert solution('''\n5 5 5 2 2\n1 1 2 2\n''') == '2160'\n\nassert solution('''\n5 5 5 2 2\n1 1 2 3\n''') == '1440'\n\nassert solution('''\n5 5 5 3 3\n1 1 2 2\n''') == '8100'\n\nassert solution('''\n5 5 5 2 2\n1 2 2 3\n''') == '4940'\n\nassert solution('''\n10 10 7 1 1\n1 1 10 10\n''') == '28883072'\n\nassert solution('''\n10 10 7 1 2\n1 1 10 10\n''') == '718964777'\n\nassert solution('''\n10 10 7 1 3\n1 1 10 10", "str(solution(sample_input)) == sample_output", "solution('''\n4 5 100 3 2\n1 1 2 3\n''') == '''\n57360\n'''\nassert solution('''\n3 3 5 2 2\n1 1 2 2\n''') == '''\n75\n'''\nassert solution('''\n10 10 100000 2 1\n3 2 8 10\n''') == '''\n24816\n'''\nassert solution('''\n10 10 100000 3 3\n4 6 6 10\n''') == '''\n0\n'''\nassert solution('''\n8 7 5 3 2\n1 1 7 7\n''') == '''\n24\n'''\nassert solution('''\n3 2 4 2 2\n1 1 2 2\n''') == '''\n1\n'''\nassert solution('''\n2 3 3 2 1\n1 1 2 3\n''') == '''\n9\n'''\nassert solution('''\n20 20 1000 2 1\n3 2 8 10\n''') == '''\n648\n'''\nassert solution('''\n11 11 100 2 1\n3 2 8 10\n''') == '''\n441\n'''\nassert solution('''\n3 3 100 2 2\n1 1 2 2\n''') == '''\n36\n'''\nassert solution('''\n2 3 3 2 1\n1 1 2 3\n", "solution(\"1 1 1 1 1\\n1 1 1 1\") == \"1\"\nassert solution(\"2 2 2 2 2\\n1 1 1 1\") == \"4\"\nassert solution(\"3 2 4 2 2\\n1 1 2 1\") == \"10\"\nassert solution(\"100000 100000 100000 100000 100000\\n1 1 1 1\") == \"1000000007\"\nassert solution(\"34 67 89 3 4\\n56 34 89 56\") == \"209175584\"\nassert solution(\"1 1 1 1 1\\n1 1 1 1\") == \"1\"\nassert solution(\"2 2 2 2 2\\n1 1 1 1\") == \"4\"\nassert solution(\"3 2 4 2 2\\n1 1 2 1\") == \"10\"\nassert solution(\"100000 100000 100000 100000 100000\\n1 1 1 1\") == \"1000000007\"\nassert solution(\"34 67 89 3 4\\n56 34 89 56\") == \"209175584\"\n\n# import random\n# for n in range(0, 100):\n#     for m in range(0, 100):\n#         for k in range(0, 100):\n#             for r in range(0, 100):\n#                 for c in range(0, 100):\n#                     for a_x in range(0, 100):\n#                         for", "solution('''1\n1 2\n''') == '''3'''\n\nassert solution('''2\n2 2\n''') == '''8'''\n\nassert solution('''2\n2 3\n''') == '''27'''\n\nassert solution('''3\n1 2\n''') == '''18'''\n\nassert solution('''4\n2 2\n''') == '''24'''\n\nassert solution('''2\n2 2\n''') == '''8'''\n\n# check the time limit of solution\nfrom timeit import timeit\nassert timeit('''\ndef solve():\n    solution('''1\n    1 2\n    ''') == '''3'''\n''', number=10000) < 1", "solution(r'''\n5 5 5 2 3\n2 3 3 3\n''') == r'''\n18\n'''\n\nassert solution(r'''\n2 2 2 1 1\n1 1 1 1\n''') == r'''\n1\n'''\n\nassert solution(r'''\n5 4 4 2 2\n3 2 1 1\n''') == r'''\n3\n'''\n\nassert solution(r'''\n9 9 9 3 3\n6 9 7 1\n''') == r'''\n6\n'''\n\n# read the input\nn, m, k, r, c = map(int, input().split())\na_x, a_y, b_x, b_y = map(int, input().split())\n\n# solve the problem\nresult = solution(locals())\n\n# print result\nprint(result)", "solution(SAMPLE_INPUT1) == SAMPLE_OUTPUT1\nassert solution(SAMPLE_INPUT2) == SAMPLE_OUTPUT2\nassert solution(SAMPLE_INPUT3) == SAMPLE_OUTPUT3\nassert solution(SAMPLE_INPUT4) == SAMPLE_OUTPUT4\nassert solution(SAMPLE_INPUT5) == SAMPLE_OUTPUT5\nassert solution(SAMPLE_INPUT6) == SAMPLE_OUTPUT6\nassert solution(SAMPLE_INPUT7) == SAMPLE_OUTPUT7\nassert solution(SAMPLE_INPUT8) == SAMPLE_OUTPUT8\nassert solution(SAMPLE_INPUT9) == SAMPLE_OUTPUT9\nassert solution(SAMPLE_INPUT10) == SAMPLE_OUTPUT10\nassert solution(SAMPLE_INPUT11) == SAMPLE_OUTPUT11\nassert solution(SAMPLE_INPUT12) == SAMPLE_OUTPUT12\nassert solution(SAMPLE_INPUT13) == SAMPLE_OUTPUT13\nassert solution(SAMPLE_INPUT14) == SAMPLE_OUTPUT14\nassert solution(SAMPLE_INPUT15) == SAMPLE_OUTPUT15\nassert solution(SAMPLE_INPUT16) == SAMPLE_OUTP", "solution('''5 4 3 2 2\n1 1 4 1''') == '8'\nassert solution('''5 4 3 2 2\n1 1 4 2''') == '4'\nassert solution('''5 4 3 2 2\n2 2 3 3''') == '2'\nassert solution('''1 1 1 1 1\n1 1 1 1''') == '1'\nassert solution('''20 20 5 4 4\n1 1 11 11''') == '59805072'\nassert solution('''20 20 5 4 4\n2 3 3 16''') == '59805072'\nassert solution('''20 20 5 4 4\n3 2 16 3''') == '59805072'\nassert solution('''20 20 5 4 4\n3 3 14 14''') == '59805072'\nassert solution('''20 20 5 4 4\n2 2 9 9''') == '59805072'\nassert solution('''20 20 5 4 4\n5 7 8 11''') == '59805072'\nassert solution('''20 20 5 4 4\n6 6 18 20''') == '59805072'\nassert solution('''20 20 5 4 4\n7 5 19 18''') == '59805072'\nassert solution('''20 20 5 4 4\n7 7", "solution(\"\"\"\\\n    3 3 3 1 1\n    1 1 2 2\n    \"\"\") == \"18\"\nassert solution(\"\"\"\\\n    3 3 3 1 1\n    1 1 1 1\n    \"\"\") == \"9\"\nassert solution(\"\"\"\\\n    4 5 2 2 1\n    1 1 2 2\n    \"\"\") == \"0\"\nassert solution(\"\"\"\\\n    6 6 3 2 2\n    1 2 3 3\n    \"\"\") == \"16\"\nassert solution(\"\"\"\\\n    1 1 1000000000 1 1\n    1 1 1 1\n    \"\"\") == \"1\"\nassert solution(\"\"\"\\\n    7 7 1 1 1\n    5 7 2 3\n    \"\"\") == \"49\"\nassert solution(\"\"\"\\\n    999999999 999999001 1 1 1\n    1 2 1 2\n    \"\"\") == \"1\"\nassert solution(\"\"\"\\\n    7 7 1 1 1\n    4 7 2 3\n    \"\"\") == \"49\"\nassert solution(\"\"\"\\\n    1000 1000 1000000000 1 1\n    1 1 999 1000\n    \"\"\") == \"928791538\"\nassert solution(\"\"\"\\\n    1000 1000 1000000000 1 1\n    1 1 1 1000\n    \"\"\") == \"928791538\"\nassert solution(\"\"\"\\\n    1000 1000 1000000000 1 1\n    1", "solution('''\n42 51 1000000 1 1\n1 1 42 51\n''') == '5133146864'\nassert solution('''\n42 51 1000000 1 2\n1 1 42 51\n''') == '7004054464'\nassert solution('''\n42 51 1000000 2 2\n1 1 42 51\n''') == '4700795904'\nassert solution('''\n42 51 1000000 1 2\n1 2 2 51\n''') == '1075730048'\nassert solution('''\n42 51 1000000 1 2\n1 2 42 52\n''') == '1168152064'\nassert solution('''\n42 51 1000000 1 1\n40 51 42 51\n''') == '2985144832'\nassert solution('''\n42 51 1000000 1 1\n40 1 42 1\n''') == '402653184'\nassert solution('''\n42 51 1000000 1 1\n40 1 42 2\n''') == '503316480'\nassert solution('''\n42 51 1000000 1 1\n40 1 42 3\n''') == '604661760'\nassert solution('''\n42 51 1000000 1 1\n40 1 42 4\n''') == '706007040'\nassert solution('''\n42 51 1000000 1 1\n40 1 42", "solution('''\n2 3 3 1 1\n1 1 2 2\n''') == '18'\n\n# check the correctness of solution\nassert solution('''\n5 4 2 1 2\n2 3 2 3\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n11 11 4 3 2\n8 1 6 4\n''') == '410'\n\n# check the correctness of solution\nassert solution('''\n10000 10000 10000 1 1\n1 1 10000 10000\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n9999999999 1000000000 1000000000 1 1\n1 1 9999999999 1000000000\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1000000000 1000000000 1000000000 999999999 1\n1 1 1000000000 1000000000\n''') == '1000000001'\n\n# check the correctness of solution\nassert solution('''\n1000000000 1000000000 1000000000 1 999999999\n1 1 1000000000 1000000000\n''') == '1000000001'\n\n# check the correctness of solution\nassert solution('''\n1000000000 1000000000 1000000000 999999999 999999999\n1 1 1000000000 1000000000\n''') == '1000000001'\n\n# check the correctness of solution\nassert solution('''", "solution(example1) == \"10\"\nassert solution(example2) == \"32\"\nassert solution(example3) == \"2\"\n\nsolution_inputs = [\n    (\"3 3 3 2 2\\n1 1 2 2\\n\"),\n    (\"30 30 1 5 5\\n13 17 15 24\\n\"),\n    (\"20 20 5 4 3\\n2 10 3 3\\n\"),\n    (\"1000 1000 1000 1000 1000\\n1000 1000 1000 1000\\n\"),\n    (\"4 4 2 2 2\\n1 1 2 2\\n\"),\n    (\"4 4 2 2 2\\n1 1 2 2\\n\"),\n    (\"4 4 2 2 2\\n2 2 2 2\\n\"),\n    (\"5 5 3 3 3\\n2 2 3 3\\n\"),\n    (\"5 5 3 3 3\\n1 1 4 4\\n\"),\n    (\"5 5 3 3 3\\n3 3 5 5\\n\"),\n    (\"5 5 3 3 3\\n3 3 3 3\\n\"),\n    (\"5 5 3 3 3\\n1 1 1 1\\n\"),\n    (\"5 5 3 3 3\\n1 1 3 3\\n\"),\n    (\"5 5 3 3 3\\n2 2 2 2\\n\"),\n    (\"5 5 3 3 3\\n1 2 2 2\\n\"),\n    (\"5 5", "solution('''\nsample input\n''') == '''\nsample output\n'''", "solution('''\n1 1 1 1 1\n1 1 1 1\n''') == '1'\n\nassert solution('''\n1 1 2 1 1\n1 1 1 1\n''') == '2'\n\nassert solution('''\n3 3 3 1 1\n1 1 2 3\n''') == '36'\n\nassert solution('''\n3 3 3 2 2\n1 1 2 3\n''') == '36'\n\nassert solution('''\n4 4 4 2 2\n1 1 2 3\n''') == '100'\n\nassert solution('''\n4 4 4 2 2\n2 1 3 4\n''') == '100'\n\nassert solution('''\n4 4 4 2 2\n1 2 3 4\n''') == '0'\n\nassert solution('''\n1000000 1000000 1000000000 1 1\n1 1 1 1\n''') == '1'\n\nassert solution('''\n1000000 1000000 1000000000 1 1\n1 1 1000000 1000000\n''') == '1'\n\nassert solution('''\n1000000 1000000 1000000000 1 1\n1 1 1000000 1000000\n''') == '1'\n\nassert solution('''\n1000000 1000000 1000000000 2 2\n1 1 1000000 1000000\n''') == '1'\n\nassert solution('''\n1000000", "solution('''\n5 5 2 2 2\n2 2 2 4\n''') == '2'\n\nassert solution('''\n2 3 3 2 2\n1 2 1 3\n''') == '12'\n\nassert solution('''\n1 1 1000000 1 1\n1 1\n''') == '1000000'\n\nassert solution('''\n1 1000000 1 1 1\n1 1\n''') == '1000000'\n\nassert solution('''\n1000000 1 1 1 1\n1 1\n''') == '1000000'\n\nassert solution('''\n1000000 1000000 1000000 1 1\n1 1\n''') == '1000000'\n\nassert solution('''\n1000000 1000000 1000000 1000000 1000000\n1 1\n''') == '1000000'\n\n# print('All correct!')", "solution(\"\"\"\n1 2 3 4 5\n1 1 1 1\n\"\"\") == \"\"\"\n\n\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n11 2 3 4 5\n1 1 1 1\n\"\"\") == \"\"\"\n\n\n\"\"\"", "solution(TEST_CASES[0]['input']) == TEST_CASES[0]['output']\nassert solution(TEST_CASES[1]['input']) == TEST_CASES[1]['output']\nassert solution(TEST_CASES[2]['input']) == TEST_CASES[2]['output']\nassert solution(TEST_CASES[3]['input']) == TEST_CASES[3]['output']\nassert solution(TEST_CASES[4]['input']) == TEST_CASES[4]['output']\n\n# submit the solution\ndef submit_solution() -> None:\n    task_id = task_id_from_filename(__file__)\n    print('task_id: ', task_id)\n    user_id = constant.USER_ID\n    task_token = get_task_token(user_id, task_id)\n    print('task_token: ', task_token)\n    for test_case in TEST_CASES:\n        print('submitting for: ', test_case['input'])\n        data = {\n            'task_id': task_id,\n            'solution': solution(test_case['input']),\n            'token': task", "solution('''\n10 10 1000000 1 1\n1 1 2 2\n''') == '1000000'\n\n# check the correctness of solution\nassert solution('''\n3 3 2 1 1\n1 1 2 2\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n10 10 2 1 1\n1 1 2 2\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n10 10 2 1 1\n1 1 10 10\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n5 5 2 1 1\n1 1 5 5\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n10 10 2 1 1\n1 1 5 5\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n10 10 2 1 1\n1 1 5 4\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n10 10 2 1 1\n1 1 5 3\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n10 10 2 1 1\n1 1 5 2\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n10 10 2 1 1", "str(solution(stdin)) == stdout\n\n```\n\n### Hints\n\n* For example, if we want to calculate the number of ways to color a rectangle 1x1, the answer is k. If we want to calculate the number of ways to color a rectangle 1x2, the answer is k*k. A trick to solve the problem is to find a formula for the number of ways to color a rectangle 1xm for all m. In this problem, we can add a row or add a column when we color the rectangle. For example, if we want to color a rectangle 1x3, the first row has k ways to color. Then we add a column on the right of the rectangle, the first column has k ways to color. The number of ways to color a rectangle 1x3 is k*k. A bit more complicated when we add a column on the right of a rectangle 1x4, the first column has k ways to color. But when we add a column on the second column, we have to consider the first column as well. So the number of ways to color a rectangle 1x4 is k*k*k.\n* We need to show that this formula is correct for all m.\n* After we know the formula for the number of ways to color a rectangle 1xm, the problem becomes much easier to solve.\n* The above solution would time out. We need", "solution(r'''\n2 3 3 1 1\n1 1 2 2\n''') == r'''\n6\n'''\n\n# print the program output, if any\nprint(solution(r'''\n3 6 4 2 2\n1 1 3 6\n'''))", "solution('''4 4 2 2 2\n1 1 4 4''') == '15'\nassert solution('''4 4 3 2 2\n1 1 4 4''') == '111'\nassert solution('''4 4 5 2 2\n1 1 4 4''') == '715'\nassert solution('''100 100 50 50 50\n1 1 100 100''') == '905693528'\nassert solution('''100000000 100000000 100000000 1 1\n1 1 100000000 100000000''') == '0'\nassert solution('''100000000 100000000 100000000 999999999 1\n1 1 100000000 100000000''') == '999999999'\nassert solution('''100000000 100000000 100000000 1 999999999\n1 1 100000000 100000000''') == '999999999'\nassert solution('''100000000 100000000 100000000 999999999 999999999\n1 1 100000000 100000000''') == '0'\nassert solution('''100000000 100000000 100000001 999999999 999999999\n1 1 100000000 100000000''') == '999999999'\nassert solution('''100000000 100000000 100000000 1 999999998\n1 1 100000000 100000000''') == '899999999'\nassert solution('''100000000 100000000 100000000 999999998 999999999\n1 1 100000000", "solution(\"\"\"\n3 3 2 2 2\n1 1 2 2\n\"\"\") == \"\"\"\n12\n\"\"\"\n\nassert solution(\"\"\"\n7 8 4 3 3\n1 4 3 4\n\"\"\") == \"\"\"\n48\n\"\"\"\n\nassert solution(\"\"\"\n1 1 5 1 1\n1 1 1 1\n\"\"\") == \"\"\"\n5\n\"\"\"\n\nassert solution(\"\"\"\n2 3 2 1 2\n1 1 2 2\n\"\"\") == \"\"\"\n6\n\"\"\"\n\nassert solution(\"\"\"\n2 4 1 1 2\n1 1 2 1\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n2 2 1 1 1\n1 1 1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1 1 1 1 1\n1 1 1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1 2 2 1 1\n1 1 1 1\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n2 1 1 1 1\n1 1 1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n3 2 4 2 1\n1 1 1 1\n\"\"\") == \"\"\"\n48\n\"\"\"\n\nassert solution(\"\"\"\n2 3 3 1 1\n1 1 1 1\n\"\"\") == \"\"\"\n36\n\"\"\"\n\nassert solution(\"\"\"\n3 2 4 2 1\n1 1 1 1", "solution(\"1 2 3 4 5\\n\") == \"\"", "solution(\"\"\"\n3 3 3 1 1\n1 1 2 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2 3 3 1 1\n1 1 2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 1000000000 1 1 1\n1 1\n\"\"\") == \"1000000000\"\n\nassert solution(\"\"\"\n4 4 4 2 2\n1 1 3 3\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\n1 1 1 2 2\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 2 4 2 2\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 3 3 2 2\n1 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1 2 3 2 2\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 1 2 2 2\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 4 4 2 2\n1 1 3 3\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\n1 2 4 2 2\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 3 3 2 2\n1 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1 2 3 2 2\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"", "solution('''\n3 4 2 2 2\n1 1 2 3\n''') == '5'\n\n# this is a template for submitting a solution\nfrom __future__ import division\nfrom sys import stdin\nfrom __future__ import division\nfrom sys import stdin\nfrom collections import Counter\nimport string\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import Counter\n\nif __name__ == '__main__':\n    n, m, k, r, c = map(int, stdin.readline().split())\n    a_x, a_y, b_x, b_y = map(int, stdin.readline().split())\n    ret = 0\n    for i in range(c):\n        for j in range(c):\n            if (a_x + i, a_y + j) == (b_x + i, b_y + j):\n                ret += 1\n    print(ret)", "solution(\"\"\"4 5 2 2 2\n1 1 2 3\"\"\") == \"\"\"4\"\"\", \"Sample 1\"\nassert solution(\"\"\"1 1 1 1 1\n1 1 1 1\"\"\") == \"\"\"1\"\"\", \"Sample 2\"\nassert solution(\"\"\"10 9 7 6 2\n6 4 8 9\"\"\") == \"\"\"6\"\"\", \"Sample 3\"\nassert solution(\"\"\"10 10 4 3 4\n1 10 7 1\"\"\") == \"\"\"0\"\"\", \"Sample 4\"\nassert solution(\"\"\"10 10 4 3 3\n1 10 7 1\"\"\") == \"\"\"3\"\"\", \"Sample 5\"\nassert solution(\"\"\"10 10 5 3 3\n1 10 7 1\"\"\") == \"\"\"12\"\"\", \"Sample 6\"\nassert solution(\"\"\"10 10 4 2 2\n1 10 5 4\"\"\") == \"\"\"1\"\"\", \"Sample 7\"\nassert solution(\"\"\"10 10 4 2 3\n1 10 5 4\"\"\") == \"\"\"3\"\"\", \"Sample 8\"\nassert solution(\"\"\"10 10 4 2 4\n1 10 5 4\"\"\") == \"\"\"9\"\"\", \"Sample 9\"\nassert solution(\"\"\"10 10 3 3 3\n1 10 7 1\"\"\") == \"\"\"1\"\"\", \"Sample 10\"\nassert solution(\"\"\"10 10 3 3 4\n1 10 7 1\"\"\") == \"\"\"1\"\"\", \"Sample 11\"\nassert solution(\"\"\"10 10 3 3 5\n1 10 7 1\"\"", "solution('''\n2 2 3 1 1\n1 1 2 2\n''') == '6'\n\nassert solution('''\n5 7 5 1 2\n3 1 1 7\n''') == '1572864'\n\nassert solution('''\n4 3 3 1 1\n3 2 1 1\n''') == '12'\n\nassert solution('''\n9 8 9 1 1\n1 1 8 8\n''') == '512'\n\nassert solution('''\n13 11 13 2 2\n2 3 4 4\n''') == '11664'\n\n# periksa tokoh\nassert solution('''\n512 512 512 5 10\n10 1 256 254\n''') == '26753029'\n\n# periksa tokoh\nassert solution('''\n100000 100000 100000 5 10\n10 1 20000 20000\n''') == '387547771'\n\n# periksa tokoh\nassert solution('''\n1 1 1000000000 1 1\n1 1 1 1\n''') == '1000000000'\n\n# periksa tokoh\nassert solution('''\n1000000000 1000000000 1000000000 5 10\n10 1 200000000 200000000\n''') == '387547771'\n\n# periksa tokoh\nassert solution('''", "solution('''\n4 5 2 2 2\n1 1 4 4\n''') == '27'\n\nassert solution('''\n5 3 3 3 3\n2 1 1 1\n''') == '4'\n\nassert solution('''\n4 4 4 4 1\n2 3 3 4\n''') == '0'\n\nassert solution('''\n5 6 3 3 3\n2 1 1 2\n''') == '6'\n\nassert solution('''\n10 10 10 1 2\n3 7 2 8\n''') == '210'\n\nassert solution('''\n10 10 10 2 3\n1 2 8 9\n''') == '429'\n\nassert solution('''\n10 10 10 5 1\n1 4 4 4\n''') == '429'\n\nassert solution('''\n10 10 10 3 3\n2 4 4 5\n''') == '0'\n\n# test speed of solution\nfrom random import randint\nfrom time import time\n\nn, m, k, r, c = 10 ** 5, 10 ** 5, 10 ** 5, 10 ** 5, 10 ** 5\na_x, a_y, b_x, b_y = randint(1, n), randint(1, m), randint(1, n), randint(1, m)\nstdin = f'{n}", "solution('''\n3 5 6 2 2\n1 1 2 4\n''') == '''\n3\n'''\n\n# input\nprint(solution(input()))", "solution('''\n2 3 2 2 2\n1 1 2 3\n''') == '24'\n\n# check the correctness of solution\nassert solution('''\n2 3 2 2 2\n1 1 2 3\n''') == '24'\n\n# check the correctness of solution\nassert solution('''\n2 3 2 2 2\n1 1 2 3\n''') == '24'\n\n# check the correctness of solution\nassert solution('''\n2 3 2 2 2\n1 1 2 3\n''') == '24'\n\n# check the correctness of solution\nassert solution('''\n2 3 2 2 2\n1 1 2 3\n''') == '24'\n\n# check the correctness of solution\nassert solution('''\n2 3 2 2 2\n1 1 2 3\n''') == '24'\n\n# check the correctness of solution\nassert solution('''\n2 3 2 2 2\n1 1 2 3\n''') == '24'\n\n# check the correctness of solution\nassert solution('''\n2 3 2 2 2\n1 1 2 3\n''') == '24'\n\n# check the correctness of solution\nassert solution('''\n2 3 2 2 2\n1 1 2 3\n''') == '24'\n\n# check the correctness of solution\nassert solution('''\n2 3 2 2 2\n1", "solution('''\n5 5 4 2 2\n1 1 2 2\n''') == '''\n15\n'''\n\nassert solution('''\n5 5 4 2 2\n1 1 2 2\n''') == '''\n15\n'''\n\nassert solution('''\n5 5 4 2 2\n1 1 2 2\n''') == '''\n15\n'''", "solution('''\n1 1 1 1 1\n1 1 1 1\n''') == '1'\n\nassert solution('''\n3 3 3 2 2\n1 1 2 2\n''') == '18'\n\nassert solution('''\n10 10 10 9 8\n1 1 10 10\n''') == '948224675'\n\nassert solution('''\n12345 67890 123456789 456 789\n1 1 100 100\n''') == '977956038'\n\n# print the answer to stdout\nwith open('output.txt', 'w') as f:\n    f.write(solution(open('input.txt', 'r').read()))", "solution('''\n5 4 3 2 3\n1 2 3 4\n''') == '15'\n\nassert solution('''\n4 6 2 3 4\n1 1 2 2\n''') == '5'\n\nassert solution('''\n5 3 1 3 3\n3 1 1 3\n''') == '2'\n\nassert solution('''\n10 5 5 1 2\n1 2 2 4\n''') == '25'\n\nassert solution('''\n10 10 10 2 4\n2 3 5 5\n''') == '38750'\n\nassert solution('''\n100000 100000 100000 1 1\n100000 100000\n''') == '13'\n\n# let's read first line of file\nwith open('input.txt', 'r') as file:\n    input_for_solution = file.readline()\n    print(solution(input_for_solution))", "solution('''\n5 5 2 2 2\n1 1 1 2\n''') == '34'\n\n# check the correctness of solution\nassert solution('''\n10 8 3 3 3\n2 4 1 2\n''') == '1541'\n\n# check the correctness of solution\nassert solution('''\n10 8 3 3 3\n6 5 8 7\n''') == '300'\n\n# check the correctness of solution\nassert solution('''\n10 8 3 3 3\n1 3 3 6\n''') == '1866'\n\n# check the correctness of solution\nassert solution('''\n10 10 1 2 2\n5 5 5 5\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n1 1 1 1 1\n1 1 1 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1 1 100 1 1\n1 1 1 1\n''') == '99'\n\n# check the correctness of solution\nassert solution('''\n1 1 100 1 1\n1 1 1 1\n''') == '99'\n\n# check the correctness of solution\nassert solution('''\n9999999999 9999999999 1 3 3\n1 1 9999999997 9999999999\n''') == '993'\n\n# check the correctness of solution\n", "solution('''\n1 1 1000000000 1 1\n1 1 1 1\n''') == '1'\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert solution('''\n# ''') == ''\n\n# input is not a good test case\n# assert", "solution(None) == '', 'not passed'\nassert solution(None) == '', 'not passed'\n\n# get the input\n# inp = stdin.readlines()\n\n# run the solution\n# solution(inp)", "solution('''\n    3 3 2 2 2\n    1 1 3 3\n''') == '''\n    4\n'''\n\n# get the input\ninput = ''\nfor line in sys.stdin:\n    input += line\n\n# print the result\nprint(solution(input))", "solution('''\n3 4 4 2 2\n1 1 2 1\n''') == '''\n28\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4 4 2 2\n1 1 2 1\n''') == '''\n48\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4 4 2 2\n1 2 2 3\n''') == '''\n32\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4 4 2 2\n1 2 3 4\n''') == '''\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3 3 2 2\n1 1 2 1\n''') == '''\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3 3 2 2\n1 1 3 3\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4 4 2 2\n1 2 2 3\n''') == '''\n32\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5 4 2 2\n1 2 3 4\n''') == '''\n28\n'''\n\n# check the correctness of solution\nassert solution('''\n1 5 5 1 1\n1", "solution('''\n3 3 3 2 2\n1 1 2 2\n''') == '2'\n\nprint('done')", "solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"2 3 3 2 2\") == \"0\"\nassert solution(\"5 4 4 2 2\") == \"36\"\nassert solution(\"3 3 3 1 1\") == \"5\"\nassert solution(\"5 5 5 2 2\") == \"225\"\nassert solution(\"2 2 3 2 2\") == \"0\"\nassert solution(\"4 4 4 2 2\") == \"196\"\nassert solution(\"10 5 5 1 1\") == \"25\"\nassert solution(\"10 10 10 5 5\") == \"67843769\"\nassert solution(\"10 10 10 5 5\") == \"67843769\"\nassert solution(\"10 10 10 4 4\") == \"117649\"\nassert solution(\"10 10 10 10 10\") == \"1\"\nassert solution(\"100000000 100000000 100000000 1 1\") == \"100000000\"\nassert solution(\"100000000 100000000 100000000 99999999 99999999\") == \"1\"\nassert solution(\"100000000 100000000 100000000 99999999 99999998\") == \"0\"\nassert solution(\"1234567890 1234567890 1234567890 999999999 999999999\") == \"0\"\nassert solution(\"1234567890 1234567890 1234567890 1 1\") == \"1234567890\"\nassert solution(\"1234567890 1234567890 12345"], "finish_reason": ["stop", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "length"], "sum_logprob": [-74.88718664877099, -17.189420095644994, -59.444601115819026, -66.73059845442731, -221.92514490352013, -124.15948657903397, -180.19744706118408, -125.43678399322306, -76.47987865753201, -30.77537377794, -151.32922135649204, -10.71451043006, -204.3278360008039, -132.20116469808806, -96.23476119742205, -98.57957302608403, -15.087792139415164, -142.49826633574554, -169.2436608302251, -213.83680359139407, -110.81121890983378, -178.29351767407994, -10.025235085999997, -77.97198623372202, -66.04450484281202, -32.42181747381, -76.27386107587503, -70.67214078583697, -314.01048439226025, -53.241472143820026, -125.14046697685792, -119.19573485784099, -12.915927216, -104.85931954418398, -107.95065602249706, -133.340268245465, -249.36615342652922, -179.54167805382195, -30.879665353800007, -26.29777621461701, -27.019148369573994, -113.60157286774597, -157.33563777273258, -151.29162986394994, -44.51739899938501, -41.99167624264001, -33.58429077526, -96.51261121242605, -19.801725072, -162.1702913627499], "mean_logprob": [-0.42549537868619886, -0.057298066985483335, -0.19814867038606332, -0.222435328181424, -0.7397504830117333, -0.4138649552634467, -0.6006581568706133, -0.42377291889602364, -0.25493292885844, -0.905158052292353, -0.5044307378549734, -0.8241931100046154, -0.6810927866693467, -0.4406705489936267, -0.5467884158944432, -0.5029570052351224, -0.050292640464717236, -0.47499422111915135, -0.56414553610075, -0.7127893453046467, -0.369370729699446, -0.5943117255802667, -0.5012617543, -0.25990662077907334, -0.3513005576745319, -0.5894875904329091, -0.25424620358625, -0.23557380261945668, -1.0467016146408668, -0.8451027324415873, -0.41713488992286, -0.3973191161928033, -0.9935328627692308, -0.34953106514728, -0.5044423178621356, -0.44446756081821664, -0.831220511421765, -0.5984722601794067, -0.771991633845, -0.08765925404872334, -0.31787233375969415, -0.7235768972467899, -0.771253126336924, -0.5043054328798333, -0.14839132999795, -0.7634850225934545, -0.4938866290479412, -0.3217087040414203, -0.6828181059310345, -0.5405676378758333]}
{"prompt": "'''\nMr. Chanek gives you a sequence a indexed from 1 to n. Define f(a) as the number of indices where a_i = i. \n\nYou can pick an element from the current sequence and remove it, then concatenate the remaining elements together. For example, if you remove the 3-rd element from the sequence [4, 2, 3, 1], the resulting sequence will be [4, 2, 1]. \n\nYou want to remove some elements from a in order to maximize f(a), using zero or more operations. Find the largest possible f(a).\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the initial length of the sequence.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the initial sequence a.\n\nOutput\n\nOutput an integer denoting the largest f(a) that can be obtained by doing zero or more operations.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7\n1 2 3 4 5 1 6\n\"\"\") == \"\"\"\n4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n2 3 4 5 6 7 8 9 10 1\n\"\"\") == \"\"\"\n4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n4 2 3 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 5 4 3 2\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n1 1 1 1 1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n2 1 3 5 4\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n4 1 2 3\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness", "solution(\"\"\"\n6\n1 2 4 3 2 1\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5 5 5 5 5\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n4 1 2 3\n\"\"\") == \"2\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2 1\n\"\"\") == \"2\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3 2 1\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n2 3 4 1\n\"\"\") == \"2\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 5 3 2 4\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5 3 1 2 4\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n1 5 3 2 4 6\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n2 3 1 4 5\n\"\"\") == \"3\"\n\n", "solution(example) == result\n\n# check runtime\nimport timeit\n\ntimes = [0] * 100\nfor i in range(100):\n    t = timeit.Timer(lambda: solution(example))\n    times[i] = t.timeit(number=1)\n\nprint('[times]: {}'.format(times))\nprint('[avg]: {}'.format(sum(times) / len(times)))", "solution(input_str) == output_str", "solution(TEST1) == \"12\", \"solution is incorrect\"\nassert solution(TEST2) == \"2\", \"solution is incorrect\"\nassert solution(TEST3) == \"0\", \"solution is incorrect\"\n\n# generate random testcases\nfrom random import randint\n\nfor i in range(5):\n    n = randint(1, 200000)\n    a = [randint(1, 200000) for i in range(n)]\n    test = f\"{n}\\n{' '.join(map(str, a))}\"\n    assert solution(test) == str(n), \"solution is incorrect\"\n\nprint(\"correct\")", "solution('''\n5\n4 2 3 1 5\n''') == '''\n3\n'''\n\nassert solution('''\n5\n5 3 2 4 1\n''') == '''\n4\n'''\n\nassert solution('''\n5\n5 4 3 2 1\n''') == '''\n0\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n5\n'''", "True", "solution('''1\n1''') == '1'\nassert solution('''5\n1 2 3 4 5''') == '5'\nassert solution('''6\n2 3 3 3 3 3''') == '3'\nassert solution('''6\n3 5 5 2 2 4''') == '3'\nassert solution('''6\n1 4 1 4 2 5''') == '2'\nassert solution('''6\n2 5 5 4 2 3''') == '2'\nassert solution('''6\n1 4 4 4 4 5''') == '2'\nassert solution('''6\n2 1 2 1 2 3''') == '2'\nassert solution('''6\n3 2 2 1 1 4''') == '2'\nassert solution('''6\n1 1 2 3 3 4''') == '2'\nassert solution('''6\n1 3 4 4 5 6''') == '2'\nassert solution('''6\n6 4 1 4 1 2''') == '2'\nassert solution('''6\n3 1 2 1 5 4''') == '2'\nassert solution('''6\n2 3 3 4 4 5''') == '2'\nassert solution('''6\n2 2 2 4 5 5''') == '2'\nassert solution('''6\n", "solution('''\n3\n1 2 3\n''') == '''\n3\n'''\n\nassert solution('''\n5\n1 1 2 2 3\n''') == '''\n4\n'''\n\nassert solution('''\n2\n1 2\n''') == '''\n2\n'''\n\nassert solution('''\n10\n1 2 2 3 3 3 4 4 4 5\n''') == '''\n7\n'''\n\nassert solution('''\n11\n1 1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n10\n5 5 5 5 5 5 5 5 5 5\n''') == '''\n1\n'''\n\nassert solution('''\n6\n2 3 4 5 5 7\n''') == '''\n2\n'''\n\nassert solution('''\n10\n1 2 1 2 1 2 1 2 1 2\n''') == '''\n1\n'''\n\nassert solution('''\n10\n2 1 2 1 2 1 2 1 2 1\n''') == '''\n1\n'''\n\nassert solution('''\n10\n2 3 2 3 2 3 2 3 2 3\n''') == '''\n2\n'''\n\nassert solution('''\n10\n3 2 3 2 3 2", "solution(sampleInput1) == sampleOutput1\nassert solution(sampleInput2) == sampleOutput2\nassert solution(sampleInput3) == sampleOutput3\nassert solution(sampleInput4) == sampleOutput4\nassert solution(sampleInput5) == sampleOutput5\n\n# check the correctness of solution with sample data\ntestCases = int(input())\nfor t in range(testCases):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    solution(f'{n}\\n{a}')", "solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"2\\n2 1\") == \"1\"\nassert solution(\"5\\n1 1 2 2 3\") == \"3\"\nassert solution(\"5\\n2 3 3 4 4\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"6\\n3 1 6 2 4 5\") == \"3\"\nassert solution(\"6\\n1 2 4 6 5 3\") == \"4\"\nassert solution(\"6\\n2 3 1 4 5 6\") == \"2\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"7\"\nassert solution(\"9\\n1 1 2 2 3 3 4 4 5\") == \"5\"\nassert solution(\"9\\n2 3 3 4 4 5 5 6 6\") == \"1\"\nassert solution(\"9\\n2 3 3 4 4 5 5 6 6\") == \"1\"\nassert solution(\"9\\n1 2 3 4 5 6 7 8 9\") == \"9\"\nassert solution(\"15\\n1 2 2 3 3 3 4 4 4 5 5 5 6 6 6\") == \"7\"\nassert solution(\"15\\n2 3 3 4 4 4 5 5 5 6 6 6 7 7 7\") == \"1", "solution(\"5\\n4 2 3 1 5\") == \"3\"\nassert solution(\"8\\n2 6 7 3 4 8 5 1\") == \"6\"\nassert solution(\"8\\n2 3 4 5 6 7 8 1\") == \"8\"\nassert solution(\"7\\n3 5 2 1 4 7 6\") == \"5\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"5\\n5 4 3 2 1\") == \"0\"\n\ndef solution_input():\n    n = int(input())\n    nums = list(map(int, input().split(' ')))\n    return solution('{}\\n{}'.format(n, ' '.join(map(str, nums))))\n\ndef solution_file(filename: str):\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n        return solution(''.join(lines))\n\nimport time\nstart = time.time()\nres = solution_file('input.txt')\nend = time.time()\nwith open('output.txt', 'w') as f:\n    f.write(res)\nprint('time', end - start)", "solution(None) == None\n\n# run test after each change of code in this cell\n# if solution passes all tests, the autograder will unlock the next exercise\n# autograder.run_tests(solution)\n\n# lock the next cell before changing the code\n# autograder.lock_exercise()", "solution(\"\"\"\n5\n4 2 3 1 5\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\n10\n\"\"\"\n\n# submit solution\nprint(solution(stdin))", "solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3", "solution('''5\n4 2 3 1 5''') == '3'\nassert solution('''3\n3 2 1''') == '0'\nassert solution('''5\n1 2 3 4 5''') == '5'\n\nprint('passed all tests')", "solution('''\n4\n4 2 3 1\n''') == '3'\n\nassert solution('''\n4\n1 2 3 4\n''') == '4'\n\nassert solution('''\n6\n3 6 5 6 2 1\n''') == '4'\n\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '6'\n\nassert solution('''\n7\n7 6 5 4 3 2 1\n''') == '1'\n\nassert solution('''\n7\n7 6 5 4 3 2 2\n''') == '3'", "solution(\"4\\n4 2 3 1\") == \"1\"\nassert solution(\"5\\n1 2 1 2 5\") == \"4\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"10\"\nassert solution(\"3\\n3 3 3\") == \"0\"\nassert solution(\"6\\n1 2 4 6 5 1\") == \"5\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"20\\n17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\") == \"0\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"5\\n1 2 1 1 1\") == \"3\"\nassert solution(\"10\\n1 5 3 9 2 3 1 2 2 5\") == \"7\"\nassert solution(\"2\\n2 1\") == \"1\"\nassert solution(\"4\\n4 4 4 4\") == \"0\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"20\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"10\\n1 1 1", "solution('''\n6\n1 2 3 4 5 6\n''') == '1'\n\nassert solution('''\n10\n1 2 3 1 2 3 4 5 6 7\n''') == '6'\n\nassert solution('''\n11\n1 2 2 3 4 5 6 7 8 9 10\n''') == '8'", "solution('''\n5\n4 2 3 1 5\n''') == '''\n3\n'''\n\nassert solution('''\n5\n5 1 2 3 4\n''') == '''\n5\n'''\n\nassert solution('''\n1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n10\n'''\n\nassert solution('''\n10\n10 9 8 7 6 5 4 3 2 1\n''') == '''\n1\n'''\n\nassert solution('''\n10\n8 4 2 9 1 6 3 7 5 10\n''') == '''\n6\n'''\n\nassert solution('''\n10\n8 4 2 9 1 6 3 10 5 7\n''') == '''\n6\n'''\n\nassert solution('''\n100000\n11180 52475 15356 14489 53363 38709 17719 46411 31410 10773 13502 81671 59052\n''') == '''\n7\n'''\n\nassert solution('''\n100000\n11180 52475 15356 14489 53363 38709 17719 46411 31410 10773 13502 81671 59052\n''') == '''\n7\n'''\n", "solution('''\n5\n2 3 1 4 5\n''') == '''\n3\n'''\nassert solution('''\n1\n1\n''') == '''\n1\n'''\nassert solution('''\n5\n5 4 3 2 1\n''') == '''\n0\n'''\nassert solution('''\n10\n3 5 4 2 1 9 8 7 6 10\n''') == '''\n4\n'''\n\n# ====\n# ----\n# ----\n# ====\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''\n5\n2 3 1 4 5\n'''), '''\n3\n''')\n        self.assertEqual(solution('''\n1\n1\n'''), '''\n1\n''')\n        self.assertEqual(solution('''\n5\n5 4 3 2 1\n'''), '''\n0\n''')\n        self.assertEqual(solution('''\n10\n3 5 4 2 1 9 8 7 6 10\n'''), '''\n4\n''')\n\n# ----\n# ----\n# ----\n\n# ----\n# ----\n# ----\n\n# ----\n# ----\n# ----\n\n#", "solution(\"\"\"\n5\n4 2 3 1 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n7\n7 1 2 3 4 5 6\n\"\"\") == \"1\"", "solution(stdin=\"4\\n4 2 3 1\") == \"3\"\nassert solution(stdin=\"3\\n3 1 2\") == \"2\"\nassert solution(stdin=\"7\\n3 5 3 2 7 1 4\") == \"3\"\nassert solution(stdin=\"1\\n1\") == \"1\"\nassert solution(stdin=\"5\\n5 1 2 4 3\") == \"1\"\nassert solution(stdin=\"20\\n5 9 7 17 6 19 13 16 3 18 15 4 20 11 1 14 10 8 2 12\") == \"7\"\nassert solution(stdin=\"20\\n4 13 6 7 16 10 12 19 5 1 18 15 9 20 2 8 11 14 17 3\") == \"3\"\nassert solution(stdin=\"20\\n18 19 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 20\") == \"17\"\nassert solution(stdin=\"20\\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\") == \"1\"\nassert solution(stdin=\"20\\n20 11 9 1 8 19 12 5 17 7 6 10 18 16 3 14 4 13 2 15\") == \"5\"\nassert solution(stdin=\"20\\n14 1 3 2 17 5 7 9 16 4 12 15 11 20 6 10 13 8 18 19\") ==", "(solution('3\\n3 1 2') == '1')\nassert (solution('5\\n2 4 1 5 3') == '3')\nassert (solution('8\\n5 7 6 4 5 1 2 7') == '4')\nassert (solution('9\\n10 7 1 3 2 3 4 5 7') == '4')\nassert (solution('1\\n1') == '1')\nassert (solution('2\\n2 1') == '1')\nassert (solution('2\\n1 2') == '1')\nassert (solution('3\\n3 2 1') == '1')\nassert (solution('3\\n1 2 3') == '3')\nassert (solution('4\\n4 3 2 1') == '1')\nassert (solution('4\\n1 2 3 4') == '4')\nassert (solution('5\\n5 4 3 2 1') == '1')\nassert (solution('5\\n1 2 3 4 5') == '5')\nassert (solution('6\\n6 5 4 3 2 1') == '1')\nassert (solution('6\\n1 2 3 4 5 6') == '6')\nassert (solution('7\\n7 6 5 4 3 2 1') == '1')\nassert (solution", "solution(stdin=\"2\\n2 1\") == \"1\"\nassert solution(stdin=\"4\\n4 2 3 1\") == \"2\"\nassert solution(stdin=\"4\\n4 2 1 3\") == \"2\"\nassert solution(stdin=\"4\\n4 3 2 1\") == \"1\"\nassert solution(stdin=\"5\\n5 4 3 2 1\") == \"1\"\nassert solution(stdin=\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(stdin=\"5\\n1 5 2 4 3\") == \"2\"\nassert solution(stdin=\"5\\n1 5 3 2 4\") == \"2\"\nassert solution(stdin=\"5\\n1 5 4 3 2\") == \"1\"\nassert solution(stdin=\"5\\n1 5 3 4 2\") == \"1\"\nassert solution(stdin=\"5\\n2 3 4 5 1\") == \"1\"\nassert solution(stdin=\"5\\n3 4 5 1 2\") == \"1\"\nassert solution(stdin=\"5\\n4 5 1 2 3\") == \"1\"\nassert solution(stdin=\"5\\n5 1 2 3 4\") == \"1\"\nassert solution(stdin=\"6\\n1 6 2 5 3 4\") == \"2\"\nassert solution(stdin=\"", "solution('''\n4\n4 2 3 1\n''') == '2'\n\nassert solution('''\n4\n4 2 3 3\n''') == '3'\n\nassert solution('''\n4\n4 2 1 1\n''') == '0'\n\nassert solution('''\n2\n1 1\n''') == '0'\n\nassert solution('''\n10\n10 9 8 7 6 5 4 3 2 1\n''') == '1'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '10'\n\nassert solution('''\n10\n1 9 2 8 3 7 4 6 5 10\n''') == '9'\n\nassert solution('''\n10\n1 2 1 2 1 2 1 2 1 2\n''') == '2'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '10'\n\n# test for performance\nimport random\nrandom.seed(42)\nTEST_DATA = (\n    (str(i), ' '.join(str(random.randint(1, 10**5)) for _ in range(i)))\n    for i in range(1, 10**5)\n)\nprint('\\nPerformance test')\nfor i, test_data in enumer", "solution('''\n5\n3 4 5 1 2\n''') == '3'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n7\n2 3 3 3 3 3 3\n''') == '1'\n\nassert solution('''\n7\n1 2 3 4 5 6 7\n''') == '7'\n\nassert solution('''\n7\n7 6 5 4 3 2 1\n''') == '7'\n\nassert solution('''\n7\n1 2 1 2 1 2 1\n''') == '2'\n\nassert solution('''\n7\n1 2 1 3 1 2 1\n''') == '3'\n\nassert solution('''\n7\n1 2 1 3 1 4 1\n''') == '4'\n\nassert solution('''\n7\n1 2 1 3 1 4 1\n''') == '4'\n\nassert solution('''\n7\n1 1 1 1 1 1 1\n''') == '0'\n\nassert solution('''\n7\n2 2 2 2 2 2 2\n''') == '0'\n\nassert solution('''\n7\n1 2 3 4 5 6 7\n''') == '7'\n\nassert solution('''\n7\n1 2 3 4 5 6 7\n''') == '7", "solution('''\n5\n4 2 3 1 5\n''') == '3'\n\nassert solution('''\n5\n1 3 2 4 5\n''') == '5'\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '1'\n\nassert solution('''\n10\n3 8 4 5 7 9 10 1 6 2\n''') == '7'", "solution('''\n4\n4 2 3 1\n''') == '2'\n\n# run and show the solution result\nwith open('input.txt', 'r') as in_file:\n    with open('output.txt', 'w') as out_file:\n        solution(in_file.read().strip())(out_file.write().strip())", "solution('''\n4\n4 2 3 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 3 4\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n10\n1 2 2 3 3 3 3 3 3 3\n''') == '9'\n\n# check the correctness of solution\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n5\n1 3 3 3 3\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n7\n1 1 1 1 1 1 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n2\n2 2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 2\n''') == '1'", "solution(example_input) == example_output\n \n# test for random input\n\n# get the random input and output\nproblem_input, problem_output = generate_random_input_and_output()\n\n# get the solution to the random problem\nsolution_input = problem_input\nsolution_output = solution(solution_input)\n\n# compare the problem output with the solution output\nassert problem_output == solution_output\n\n# print both the input and the output in a nice form\nprint(problem_input)\nprint(problem_output)\n\n# you can also use the file for testing\nwith open(filename + '.in', 'r') as file:\n    input = file.read()\n    assert solution(input) == solution(problem_input)\n \nprint('Congratulations! You have solved the problem!')", "solution(\"\"\"\n5\n4 2 3 1 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6\n1 6 4 2 3 5\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n7\n6 5 4 3 2 1 7\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n8\n8 7 6 5 4 3 2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n7\n7 7 7 7 7 7 7\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\n\n# submit the solution\n\nprint(solution(stdin=sys.stdin))", "solution('''\n5\n4 2 3 1 5\n''') == '3'\n\nassert solution('''\n3\n3 1 2\n''') == '2'\n\nassert solution('''\n6\n4 3 5 6 2 1\n''') == '4'\n\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n''') == '8'\n\nassert solution('''\n1\n1\n''') == '1'\n\n# print(\"\\n** The test has passed successfully. **\")", "solution('''\n5\n1 5 2 4 3\n''') == '3'\n\nassert solution('''\n10\n6 8 10 5 4 9 7 1 3 2\n''') == '10'\n\n# print test input\nprint('''\n5\n1 5 2 4 3\n''')\n\n# print test output\nprint('''\n3\n''')\n\n# print test input\nprint('''\n10\n6 8 10 5 4 9 7 1 3 2\n''')\n\n# print test output\nprint('''\n10\n''')", "solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"5\"\nassert solution(\"8\\n4 3 3 2 4 4 3 2\") == \"4\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"6\"\nassert solution(\"5\\n5 4 3 2 1\") == \"0\"\nassert solution(\"2\\n2 1\") == \"1\"\nassert solution(\"10\\n5 4 3 2 1 10 9 8 7 6\") == \"0\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"5\"\nassert solution(\"8\\n4 3 3 2 4 4 3 2\") == \"4\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"6\"\nassert solution(\"5\\n5 4 3 2 1\") == \"0\"\nassert solution(\"2\\n2 1\") == \"1\"\nassert solution(\"10\\n5 4 3 2 1 10 9 8 7 6\") == \"0\"\nassert solution(\"100000\\n100000 99999 99998 99997 99996 99995 99994 99993 99992 99991 99990 99989 99988 99987 99986 99985 99984 99983 99982 99981 99980 99979 99978 99977 99976 99975 99974 99973 99972 99971 99970 99969 99968 99967", "solution('''\n5\n4 2 3 1 5\n''') == '''\n4\n'''\n\nassert solution('''\n6\n1 3 3 3 2 1\n''') == '''\n3\n'''\n\nassert solution('''\n4\n1 2 3 4\n''') == '''\n4\n'''\n\nassert solution('''\n6\n2 3 3 3 3 3\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1\n''') == '''\n1\n'''\n\n# generate tests\nimport random\ndef gen(n: int, N: int = 100000) -> str:\n    return '\\n'.join([str(n), ' '.join([str(random.randint(1, N)) for _ in range(n)])])\n\nwith open('inputs/solution.txt', 'w') as f:\n    f.write(gen(1000))\nwith open('inputs/solution1.txt', 'w') as f:\n    f.write(gen(100000))", "solution(stdin='5\\n4 2 3 1 5') == '1'\nassert solution(stdin='5\\n5 4 3 2 1') == '5'\nassert solution(stdin='5\\n1 2 3 4 5') == '0'\nassert solution(stdin='5\\n1 2 2 1 5') == '2'\n\n# print solution\nwith open('data.txt', 'r') as f:\n    lines = f.readlines()\n    print(solution(stdin=lines[0].strip()))", "solution('''3\n3 2 1''') == '2'\nassert solution('''2\n2 1''') == '2'\nassert solution('''6\n6 5 4 3 2 1''') == '6'\nassert solution('''8\n4 4 4 4 4 4 4 4''') == '8'\nassert solution('''1\n1''') == '1'\nassert solution('''4\n4 1 2 3''') == '4'\nassert solution('''6\n3 2 4 1 2 4''') == '5'\nassert solution('''5\n1 2 3 4 5''') == '5'\nassert solution('''8\n8 4 2 7 1 5 6 3''') == '8'\nassert solution('''10\n2 3 1 4 7 2 8 5 6 2''') == '10'\nassert solution('''7\n1 2 3 4 5 6 7''') == '7'\nassert solution('''5\n5 4 3 2 1''') == '5'\nassert solution('''7\n1 2 3 4 3 2 1''') == '6'\nassert solution('''6\n6 6 6 6 6 6''') == '6'\nassert solution('''6\n1 2 3 4 5 6''') == '6'\nassert solution('''6\n", "solution(stdin) == expected_output", "solution(\"\") == \"\"", "solution(stdin=\"\") == stdout\n \n# check performance\nimport timeit\nimport random\n\n# generate string of random operations of random length\ntimes = [10, 1000, 10000, 100000, 1000000]\nfor t in times:\n    stdin = \"\"\n    for _ in range(t):\n        stdin += random.choice([\"+\", \"-\", \"*\", \"/\"]) + \" \" + str(random.randint(0, 1000)) + \"\\n\"\n    print(f\"timeit, stdin of length {t}: {timeit.timeit(lambda: solution(stdin), number=10)}\")", "solution(\"4\\n4 2 3 1\") == \"3\"\nassert solution(\"3\\n3 1 2\") == \"1\"\nassert solution(\"4\\n1 2 3 4\") == \"4\"\nassert solution(\"4\\n4 3 2 1\") == \"1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"6\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1\"\nassert solution(\"6\\n3 1 2 6 4 5\") == \"3\"\nassert solution(\"6\\n3 2 1 4 5 6\") == \"2\"\nassert solution(\"6\\n4 3 2 1 6 5\") == \"2\"\nassert solution(\"6\\n4 2 3 1 5 6\") == \"3\"\nassert solution(\"6\\n5 6 1 2 3 4\") == \"1\"\nassert solution(\"6\\n5 4 3 2 1 6\") == \"1\"\nassert solution(\"6\\n6 5 4 3 2 1\") == \"1\"\n\n# print the output\nwith open('output.txt', 'w') as f:\n    f.write(solution(sys.stdin.read()))", "solution(\"\"\"6\n1 2 3 4 5 6\"\"\") == \"6\"\nassert solution(\"\"\"4\n4 2 3 1\"\"\") == \"4\"\nassert solution(\"\"\"4\n4 4 4 4\"\"\") == \"4\"\nassert solution(\"\"\"4\n4 4 4 4\"\"\") == \"4\"\nassert solution(\"\"\"10\n1 3 3 4 1 3 1 2 3 4\"\"\") == \"7\"\nassert solution(\"\"\"6\n3 1 1 1 2 3\"\"\") == \"5\"\nassert solution(\"\"\"10\n1 2 3 4 5 6 7 8 9 10\"\"\") == \"10\"\nassert solution(\"\"\"10\n10 9 8 7 6 5 4 3 2 1\"\"\") == \"10\"\nassert solution(\"\"\"10\n10 10 10 10 10 10 10 10 10 10\"\"\") == \"10\"\nassert solution(\"\"\"6\n4 3 2 5 2 1\"\"\") == \"6\"\nassert solution(\"\"\"1\n1\"\"\") == \"1\"\nassert solution(\"\"\"1\n10\"\"\") == \"0\"\nassert solution(\"\"\"1\n1\"\"\") == \"1\"\nassert solution(\"\"\"1\n1\"\"\") == \"1\"\nassert solution(\"\"\"1\n1\"\"\") == \"1\"\nassert solution(\"\"\"2\n1 2\"\"\") == \"2\"\nassert solution(\"\"\"2\n2 1\"\"\") == \"2\"\nassert", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution('''5\n1 2 3 4 5''') == '5'\nassert solution('''3\n1 2 3''') == '3'\nassert solution('''6\n2 3 4 5 6 1''') == '6'\nassert solution('''6\n3 2 1 6 5 4''') == '6'\nassert solution('''6\n2 3 4 5 6 1''') == '6'\nassert solution('''6\n3 2 1 6 5 4''') == '6'\nassert solution('''6\n2 4 1 3 5 6''') == '6'\nassert solution('''6\n2 5 1 4 3 6''') == '6'\nassert solution('''6\n3 2 1 6 5 4''') == '6'\nassert solution('''6\n3 2 1 6 5 4''') == '6'\nassert solution('''6\n2 4 1 3 5 6''') == '6'\nassert solution('''6\n2 5 1 4 3 6''') == '6'\nassert solution('''6\n1 6 2 5 3 4''') == '6'\nassert solution('''6\n3 2 6 1 5 4''') == '6'\nassert solution('''6\n2 3 4 5 6 1''') == '6'\nassert solution('''", "solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\n\n# check the performance of solution\nfrom random import randint\ninput_data = [''.join([str(randint(1, 10000)) + ' ' for i in range(10**5)]) for i in range(10)]\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\n\n# check the performance of solution\nfrom random import randint\ninput_data = [''.join([str(randint(1, 10**5)) + ' ' for i in range(10**5)]) for i in range(10)]\nassert solution('''\n''') == '''\n'''\n", "solution('''\n4\n4 2 3 1\n''') == '2'\n\nassert solution('''\n3\n3 2 1\n''') == '1'\n\nassert solution('''\n7\n8 2 1 6 5 7 4\n''') == '5'\n\n# print(solution('''\n# 10\n# 1 2 3 4 5 6 7 8 9 10\n# '''))\n\n# print(solution('''\n# 4\n# 1 2 3 4\n# '''))\n\n# import random\n# n = 100000\n# print(n)\n# print(*random.sample(range(1, n+1), n))", "solution('''\n2\n1 2\n''') == '2'\n\nassert solution('''\n3\n2 3 1\n''') == '3'\n\nassert solution('''\n3\n1 2 3\n''') == '3'\n\nassert solution('''\n5\n2 3 4 1 5\n''') == '5'\n\nassert solution('''\n4\n4 4 4 4\n''') == '4'\n\nassert solution('''\n1\n1\n''') == '1'\n\n# print the solution\nprint(solution('''\n5\n2 3 4 1 5\n'''))", "solution('''\n5\n1 2 3 4 5\n''') == '5'\n\nassert solution('''\n5\n5 4 3 2 1\n''') == '1'\n\nassert solution('''\n5\n3 3 3 3 3\n''') == '0'\n\nassert solution('''\n5\n1 1 2 2 2\n''') == '2'\n\nassert solution('''\n5\n2 3 1 4 5\n''') == '2'\n\nassert solution('''\n5\n1 5 2 4 3\n''') == '1'\n\nassert solution('''\n5\n3 4 2 5 1\n''') == '1'\n\nassert solution('''\n5\n3 4 2 1 5\n''') == '1'\n\nassert solution('''\n5\n1 4 5 2 3\n''') == '1'\n\nassert solution('''\n4\n4 3 2 1\n''') == '1'\n\nassert solution('''\n4\n3 2 1 4\n''') == '1'\n\nassert solution('''\n4\n2 1 4 3\n''') == '1'\n\nassert solution('''\n4\n1 4 3 2\n''') == '1'\n\nassert solution('''\n4\n4 2 3 1\n''') == '1'", "solution(str(sample_input)) == str(sample_output)"], "finish_reason": ["length", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "length", "stop"], "sum_logprob": [-87.31237172061097, -90.69092481143497, -48.6124568606, -8.998271382000002, -76.17853330742999, -27.588533610484994, -5.267097, -155.485646177815, -95.05795257424703, -53.82658946832001, -113.93501646883709, -123.24539820749999, -105.23177718613401, -28.338931331269997, -10.367164828076005, -26.699733566575997, -52.73925619735502, -143.24391823620905, -41.193269031095, -222.04446254053892, -84.93401175362199, -24.972518986119997, -253.1692686091681, -89.14765826834103, -73.161154270351, -127.36552826849005, -78.40307037818417, -43.599069182156, -44.09790492973001, -80.39651555906543, -142.33695956250006, -68.50313948027998, -66.50199486555498, -58.58150839281998, -78.38613633208207, -108.11815710241196, -53.828753160100014, -141.13630674939392, -9.031144196, -5.8248016400000004, -109.11620760125003, -102.66719688092698, -120.14129547864702, -13.878554233299987, -93.61546899780194, -69.37946268754798, -70.89913877433797, -49.41369194943999, -81.93913806124905, -11.584494696319998], "mean_logprob": [-0.29104123906870333, -0.30230308270478334, -0.5011593490783505, -0.8180246710909092, -0.49789891050607843, -0.2704758197106373, -5.267097, -0.5182854872593833, -0.31685984191415667, -0.42052023022125, -0.3797833882294567, -0.45646443780555557, -1.4030903624817868, -0.32952245734034885, -0.2205779750654468, -0.42380529470755557, -0.39357653878623133, -0.47747972745403, -0.5420166977775658, -0.7401482084684633, -0.28311337251207336, -0.4093855571495082, -0.84389756203056, -0.29715886089447, -0.24387051423450334, -0.42455176089496666, -0.26134356792728064, -0.47911065035336264, -0.5377793284113415, -0.26798838519688467, -0.7531056061507937, -0.4597526139616107, -0.5450983185701229, -0.45766803431890624, -0.26128712110694, -0.43772533239842915, -0.43410284806532257, -0.47045435583131334, -0.9031144195999999, -0.9708002733333333, -0.7525255696637931, -0.3528082367042165, -0.4004709849288233, -0.046261847444333336, -0.31205156332600664, -0.23126487562516, -0.46644170246275, -0.3431506385377778, -0.2731304602041633, -0.72403091852]}
{"prompt": "'''\nCasimir has a string s which consists of capital Latin letters 'A', 'B', and 'C' only. Each turn he can choose to do one of the two following actions:\n\n  * he can either erase exactly one letter 'A' and exactly one letter 'B' from arbitrary places of the string (these letters don't have to be adjacent); \n  * or he can erase exactly one letter 'B' and exactly one letter 'C' from arbitrary places in the string (these letters don't have to be adjacent). \n\n\n\nTherefore, each turn the length of the string is decreased exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions.\n\nFor example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by erasing the first occurrence of 'B' and the second occurrence of 'A'). There are also many other options for a turn aside from this particular example.\n\nFor a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"ABCABC\") == \"NO\"\nassert solution(\"CBABC\") == \"YES\"\nassert solution(\"ABC\") == \"NO\"\nassert solution(\"BC\") == \"YES\"\nassert solution(\"BBB\") == \"NO\"\nassert solution(\"BB\") == \"YES\"\nassert solution(\"A\") == \"NO\"\nassert solution(\"B\") == \"NO\"\nassert solution(\"BABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA", "solution(\"2\\nABCABC\\nCABBACB\") == \"\"\"YES\nNO\"\"\"", "solution(\"\"\"\n4\nABCABC\nAA\nBABA\nABC\n\"\"\") == \"\"\"\nYES\nNO\nYES\nNO\n\"\"\"\n\ndef test_solution():\n    import random\n    import string\n    import sys\n    import io\n\n    while True:\n        try:\n            with open(\"test_cases/test_\" + ''.join(random.choice(string.ascii_uppercase) for _ in range(5)) + \".in\", 'w') as f:\n                f.write(str(random.randint(1, 1000)) + '\\n')\n                for i in range(random.randint(1, 1000)):\n                    n = random.randint(1, 50)\n                    f.write(''.join(random.choice(['A', 'B', 'C']) for _ in range(n)) + '\\n')\n            with open(\"test_cases/test_\" + ''.join(random.choice(string.ascii_uppercase) for _ in range(5)) + \".in\") as f:\n                stdin = f.read()\n            with open(\"test_cases/test_\" + ''.join(random.choice(string.ascii_uppercase) for _ in range(5)) + \".out\", 'w') as f:", "solution('''\n4\nAA\nABC\nABCABC\nABCABCABC\n''') == '''\nYES\nYES\nYES\nNO\n'''\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# noinspection PyInterpreter\ndef solve(stdin: str):\n    stdin = stdin.splitlines()[1:]\n    for test in stdin:\n        count = {'A': 0, 'B': 0, 'C': 0}\n        for t in test:\n            count[t] += 1\n        if count['A'] >= count['B'] and count['B'] >= count['C']:\n            print('YES')\n        else:\n            print('NO')\n\nsolve('''\n4\nAA\nABC\nABCABC\nABCABCABC\n''')\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# noinspection PyInterpreter\ndef solve(stdin: str):\n    stdin = stdin.splitlines()[1:]\n    for test in stdin:\n        c = Counter(test)\n        if c['A'] >= c['B'] and c['B'] >= c['C']:\n            print('YES')\n        else:\n            print('NO')\n\nsolve('''\n4\nAA\nABC\nABCABC\nABCABCABC\n''')\n", "solution(\"\"\"4\nABCABC\nABCABCABC\nAABBCC\nABC\n\"\"\") == \"\"\"NO\nYES\nYES\nNO\n\"\"\"\n\nassert solution(\"\"\"1\nABC\n\"\"\") == \"\"\"NO\n\"\"\"", "solution(r'''\n5\nBCAC\nABCABC\nBCACBC\nCC\nBACCBA\n'''.strip()) == r'''\nYES\nYES\nNO\nYES\nNO\n'''.strip()", "solution(\"\"\"\n4\nABCABC\nA\nAAA\nCCCCC\n\"\"\") == \"\"\"\nYES\nNO\nYES\nNO\n\"\"\"", "solution(\"1\\nABCABC\") == \"YES\"\nassert solution(\"1\\nABABAB\") == \"NO\"\nassert solution(\"1\\nC\") == \"NO\"\nassert solution(\"1\\nB\") == \"NO\"\nassert solution(\"1\\nAC\") == \"NO\"\nassert solution(\"1\\nBC\") == \"NO\"\nassert solution(\"1\\nCAB\") == \"NO\"\nassert solution(\"1\\nCBA\") == \"NO\"\nassert solution(\"1\\nABCCBA\") == \"YES\"\nassert solution(\"1\\nBCABCA\") == \"YES\"\nassert solution(\"1\\nABCABCABC\") == \"YES\"\nassert solution(\"1\\nABABCC\") == \"YES\"\nassert solution(\"1\\nABABCCBA\") == \"YES\"\nassert solution(\"1\\nABABCCBAA\") == \"YES\"\nassert solution(\"1\\nCBABCABC\") == \"YES\"\nassert solution(\"1\\nABAB\") == \"YES\"\nassert solution(\"1\\nAABC\") == \"YES\"\nassert solution(\"1\\nAABB\") == \"YES\"\nassert solution(\"1\\nAAAA\") == \"YES\"\nassert solution(\"1\\nBBBB\") == \"YES\"\nassert solution(\"1\\nCCCC\") ==", "solution(\"\"\"4\nABCABC\nABBABC\nABAABAB\nACCCABCC\"\"\") == \"\"\"YES\nYES\nNO\nNO\"\"\"", "solution(r'''\n3\nCAB\nBACAC\nBBACA\n''') == r'''\nYES\nYES\nNO\n'''\n\n# test speed\nfrom timeit import timeit\nprint(timeit(stmt=f\"solution(r'''{test_input}''')\", number=100, globals=globals()))", "solution(\"\"\"5\nABCABC\nAAAAAA\nCBABAB\nBAAAAB\nCBACBA\"\"\") == \"\"\"YES\nYES\nYES\nNO\nNO\"\"\"", "solution(stdin='1\\nABCABC') == 'YES'\nassert solution(stdin='1\\nABC') == 'NO'\nassert solution(stdin='1\\nABCABCABCABC') == 'YES'\nassert solution(stdin='1\\nABABCCABCBCA') == 'YES'\nassert solution(stdin='1\\nABCAABCAA') == 'YES'\nassert solution(stdin='1\\nABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA", "solution('''\n3\nABCABC\nABCCBA\nABC\n''') == '''\nYES\nYES\nNO\n'''", "solution('''\n1\nABAB\n''') == '''\nYES\n'''\nassert solution('''\n3\nABAB\nABCABC\nABCABCABC\n''') == '''\nYES\nYES\nNO\n'''\n\nprint('OK')", "solution(\"\"\"4\nABCABC\nCBA\nABBA\nABC\n\"\"\") == \"\"\"YES\nNO\nYES\nNO\n\"\"\"\n\n# get input for running the program\ndef get_input() -> str:\n    with open('in.txt', 'r') as f:\n        return f.read()\n\n# print solution to stdout\nprint(solution(get_input()))", "solution(\"ABCABC\\n\"\n                \"ABCCBA\\n\"\n                \"AAAAAA\\n\"\n                \"ACBACB\\n\"\n                \"ABC\\n\"\n                \"BC\") == \"YES\\n\" \\\n               \"YES\\n\" \\\n               \"NO\\n\" \\\n               \"YES\\n\" \\\n               \"NO\\n\" \\\n               \"NO\"", "solution('''\n3\nABBA\nABABABABAB\nABCABCABC\n''') == '''\nYES\nYES\nNO\n'''\n\nstdin = open('/home/user/Downloads/D-small-practice.in', 'r')\nprint(solution(stdin))", "solution(\"\"\"\n1\nABCABC\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n2\nAB\nABC\n\"\"\") == \"NO\\nYES\"", "solution('''3\nABCABC\nABABAB\nABCD\n''') == '''YES\nYES\nNO\n'''", "solution(\"\") == \"\", \"Test 1\"\nassert solution(\"\") == \"\", \"Test 2\"\nassert solution(\"\") == \"\", \"Test 3\"\nassert solution(\"\") == \"\", \"Test 4\"\nassert solution(\"\") == \"\", \"Test 5\"\nassert solution(\"\") == \"\", \"Test 6\"\nassert solution(\"\") == \"\", \"Test 7\"\nassert solution(\"\") == \"\", \"Test 8\"\nassert solution(\"\") == \"\", \"Test 9\"\nassert solution(\"\") == \"\", \"Test 10\"\nassert solution(\"\") == \"\", \"Test 11\"\nassert solution(\"\") == \"\", \"Test 12\"\nassert solution(\"\") == \"\", \"Test 13\"\nassert solution(\"\") == \"\", \"Test 14\"\nassert solution(\"\") == \"\", \"Test 15\"\nassert solution(\"\") == \"\", \"Test 16\"\nassert solution(\"\") == \"\", \"Test 17\"\nassert solution(\"\") == \"\", \"Test 18\"\nassert solution(\"\") == \"\", \"Test 19\"\nassert solution(\"\") == \"\", \"Test 20\"\nassert solution(\"\") == \"\", \"Test 21\"\nassert solution(\"\") == \"\", \"Test 22\"\nassert solution(\"\") == \"\", \"Test 23\"\nassert solution(\"\") == \"\", \"Test 24\"\nassert solution(\"\") == \"\", \"Test 25\"\nassert", "solution('''2\nABAC\nABCBCBCB''') == '''YES\nNO'''", "solution(\"\"\"\n4\nABCABC\nABCCCBA\nABBA\nAAAAAAAAAAAAAAAAA\n\"\"\") == \"\"\"\nYES\nYES\nNO\nNO\n\"\"\"\n\nimport doctest\ndoctest.testmod()\n\nwith open(\"sample.txt\", \"r\") as file:\n    print(solution(file.read()))", "solution('''1\nABCABC\n''') == '''YES\n'''\nassert solution('''1\nA\n''') == '''NO\n'''\nassert solution('''4\nAB\nABC\nABCBA\nAABB\n''') == '''YES\nYES\nYES\nNO\n'''", "solution(r'''\n1\nABCABC\n''') == r'''\nYES\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\nABCABCAC\n''') == r'''\nNO\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\nABC\nABCABC\n''') == r'''\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution(r'''\n4\nA\nBC\nCA\nABABC\n''') == r'''\nNO\nNO\nNO\nYES\n'''\n\n# check the correctness of solution\nassert solution(r'''\n4\nCABBABABABABABABAB\nBACBACBACBAC\nCABACBACBACBAC\nCABCA\n''') == r'''\nYES\nYES\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution(r'''\n6\nCBACBACBACBAC\nABC\nA\nBABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABA", "solution(stdin='''2\nABAC\nABCA''') == '''YES\nNO'''", "solution('''1\nABC''') == 'YES'\nassert solution('''1\nABA''') == 'NO'\nassert solution('''1\nBAC''') == 'YES'\nassert solution('''1\nA''') == 'NO'\nassert solution('''1\nB''') == 'NO'\nassert solution('''1\nC''') == 'NO'\nassert solution('''1\nAAABBCC''') == 'YES'\nassert solution('''1\nAAABBBCC''') == 'NO'\nassert solution('''1\nABCABC''') == 'YES'\nassert solution('''1\nABCABCABC''') == 'YES'\nassert solution('''1\nABCABCABCABC''') == 'YES'\nassert solution('''1\nABCABABCABBC''') == 'YES'\nassert solution('''1\nABCABABCABBA''') == 'NO'\nassert solution('''1\nABABAB''') == 'YES'\nassert solution('''1\nCACACB''') == 'YES'\nassert solution('''1\nCABCAB''') == 'YES'\nassert solution('''1\nCABBCA''') == 'YES'\nassert solution('''1\nCCABBA''", "solution(\"1\\nABCABC\") == \"YES\"\nassert solution(\"2\\nABCABC\\nAABBCC\") == \"YES\\nNO\"", "solution(\"4\\n\\\nABCABC\\n\\\nABBAC\\n\\\nABCA\\n\\\nABC\\n\") == \"YES\\nYES\\nNO\\nNO\"", "solution('''\n4\nABC\nABCABC\nABCABCABC\nABCABCABCABC\n''') == '''\nYES\nYES\nYES\nNO\n'''", "solution('''\n4\nABCABC\nsolution(\"2\") == \"YES\\nNO\", \"sample input\"\nassert solution(\"5\") == \"YES\\nYES\\nNO\\nYES\\nNO\", \"test1\"\nassert solution(\"6\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\", \"test2\"\nassert solution(\"2\") == \"YES\\nNO\", \"test3\"\nassert solution(\"1000\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES", "solution('''\n4\nABCABC\nABCD\nABC\nABCAC\n''') == '''\nYES\nNO\nYES\nNO\n'''\n\n# check performance of solution\nfrom utils import benchmark\nassert benchmark(solution, '''\n1000\nABCD\nAABBCC\nABCABCABC\nCCCBBA\nAABBCCBBAABBCC\nsolution(stdin='1\\nABC') == 'YES'\nassert solution(stdin='1\\nAAC') == 'NO'\nassert solution(stdin='2\\nABC\\nAAC') == 'YES\\nNO'\n\n# get the input\nt = int(input())\nstdin = ''\nfor i in range(t):\n    stdin += input() + '\\n'\n\n# print solution\nprint(solution(stdin))", "solution('''2\nABCABC\nCBA\n''') == '''YES\nNO\n'''\n\n# check the performance of solution\n# import timeit\n# assert timeit.timeit(lambda: solution('...'), number=10) < 1", "solution(\"\"\"\n1\nABCABC\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n3\nAABBCC\nABCABC\nABCBCC\n\"\"\") == \"\"\"\nNO\nYES\nNO\n\"\"\"\n\nassert solution(\"\"\"\n2\nAACBB\nCAAB\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\nassert solution(\"\"\"\n1\nACBCC\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n2\nABCC\nAACB\n\"\"\") == \"\"\"\nNO\nYES\n\"\"\"\n\nassert solution(\"\"\"\n3\nBBBA\nABCACB\nAABCB\n\"\"\") == \"\"\"\nNO\nYES\nYES\n\"\"\"\n\nassert solution(\"\"\"\n2\nAABBCCC\nBBCCCBB\n\"\"\") == \"\"\"\nNO\nNO\n\"\"\"\n\nassert solution(\"\"\"\n2\nABCCB\nCBBAC\n\"\"\") == \"\"\"\nYES\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\nAABCAABC\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\nCBBBCC\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n3\nCBBAAC\nABCCBA\nCABCA\n\"\"\") == \"\"\"\nYES\nYES\nNO\n\"\"\"\n\nassert solution(\"\"\"\n3\nBBBA\nABCACB", "solution(\"\"\"\n2\nABCABC\nABC\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\n# get the output\nif __name__ == \"__main__\":\n    n = int(input())\n    stdin = []\n    for i in range(n):\n        stdin.append(input())\n    print(solution(n, stdin))", "solution(\"\"\"2\nABCABC\nABCACCC\"\"\") == \"\"\"YES\nNO\"\"\"\n# assert solution(\"\"\"1\n# 1 5 7 9 11\"\"\") == \"\"\"NO\"\"\"", "solution(\"A\\nAAB\\nCAB\\nABCABC\") == \"YES\\nYES\\nNO\\nYES\"\n\n# get input and run solution\nstdin = open(\"stdin.txt\", \"r\")\nsolution(stdin.read())", "(solution('''\n3\nABCABC\nCABACA\nACBACB\n''')) == '''\nYES\nYES\nNO\n'''", "solution('''\n3\nABCABC\nAAAA\nB\n''') == '''\nYES\nNO\nYES\n'''", "solution(\"\"\"1\nABCABC\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(\"\"\"1\nCABABABABABC\"\"\") == \"\"\"NO\"\"\"\n\nassert solution(\"\"\"3\nABC\nABCABC\nABACBCC\"\"\") == \"\"\"YES\nYES\nNO\"\"\"", "solution(stdin=\"\"\"3\nABCA\nA\nABC\"\"\") == \"\"\"NO\nYES\nYES\"\"\"", "solution('''\n3\nABCABC\nBACBAC\nCCCC\n''') == '''\nYES\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nA\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nABCBA\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nABC\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nBAC\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nABCABCABC\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nBACBACBAC\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nBBACBACBAC\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nBBACBACBACBAC\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n", "solution(stdin=SAMPLE_1) == \"YES\\nNO\"\nassert solution(stdin=SAMPLE_2) == \"YES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\", "solution('''\n4\nABC\nABCABC\nABCABCABC\nABCBAC\n''') == '''\nYES\nYES\nYES\nNO\n'''\nassert solution('''\n3\nA\nAB\nABC\n''') == '''\nNO\nNO\nNO\n'''\nassert solution('''\n2\nABCABCABCABC\nABCABABC\n''') == '''\nYES\nYES\n'''\nassert solution('''\n1\nBCA\n''') == '''\nNO\n'''\nassert solution('''\n3\nBAC\nABCABCABCABCABC\nCAB\n''') == '''\nNO\nYES\nNO\n'''\n\ndef solution(stdin):\n    for line in stdin.split('\\n')[1:]:\n        print('YES' if line.count('A') == line.count('C') else 'NO')\n\nfrom random import sample\n\ndef print_random_sequence(length, char1, char2):\n    print(length)\n    print(''.join(sample(char1, length // 2)) + ''.join(sample(char2, length // 2)))\n\nfrom subprocess import run, PIPE\n\ndef check_solution(solution, chars, *args):\n    if len(args) == 0:\n       ", "(solution(stdin_sample) == stdout_sample)\nprint(\"OK\")", "solution(\"\") == \"\", \"empty\"\nassert solution(\"A\") == \"NO\", \"A\"\nassert solution(\"C\") == \"NO\", \"C\"\nassert solution(\"B\") == \"NO\", \"B\"\nassert solution(\"AA\") == \"NO\", \"AA\"\nassert solution(\"AB\") == \"YES\", \"AB\"\nassert solution(\"BA\") == \"YES\", \"BA\"\nassert solution(\"CA\") == \"NO\", \"CA\"\nassert solution(\"AC\") == \"NO\", \"AC\"\nassert solution(\"CC\") == \"NO\", \"CC\"\nassert solution(\"CB\") == \"YES\", \"CB\"\nassert solution(\"BC\") == \"YES\", \"BC\"\nassert solution(\"BBCC\") == \"YES\", \"BBCC\"\nassert solution(\"ABAB\") == \"YES\", \"ABAB\"\nassert solution(\"ABCABC\") == \"YES\", \"ABCABC\"\nassert solution(\"ACBC\") == \"YES\", \"ACBC\"\nassert solution(\"ABCABC\") == \"YES\", \"ABCABC\"\nassert solution(\"ABCABC\") == \"YES\", \"ABCABC\"\nassert solution(\"ABCABC\") == \"YES\", \"ABCABC\"\nassert solution(\"ABCABC\") == \"YES\", \"ABCABC\"\nassert solution(\"ABCABC\") == \"YES\", \"ABCABC\"\nassert solution(\"ABCABC\") == \"YES\",", "solution(\"3\\nABCABC\\nABCBC\\nABCA\") == \"YES\\nYES\\nNO\"", "solution('''\n2\nABC\nAB\n''') == '''\nYES\nNO\n'''\n\n# check time limit\nimport timeit\n\nassert timeit.timeit(lambda: solution('''\n1\nsolution('''2\nABC\nCBA''') == '''YES\nNO'''\n# check the correctness of solution\nassert solution('''1\nAABC''') == '''NO'''\n# check the correctness of solution\nassert solution('''1\nCCCCCC''') == '''YES'''\n# check the correctness of solution\nassert solution('''4\nAAA\nBABABABABABABABABA\nABCABCABCABCABCABC\nABBACCCABBCCAAC''') == '''NO\nYES\nYES\nYES'''\n\nprint('OK')"], "finish_reason": ["length", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "length", "stop"], "sum_logprob": [-44.339081289410004, -18.1340874472, -101.32856845171791, -95.88210250109692, -30.95135602294, -44.372228346859984, -22.004115448149996, -102.79359291134794, -39.15370244349999, -55.943384724351986, -32.48260000274001, -60.14322137955, -13.333763194720001, -30.73501857992999, -49.88937171779998, -41.33334506601901, -45.283578355809986, -20.728532666730004, -16.430574328960002, -16.051430636413013, -22.008699870999994, -56.95885902476499, -34.510040933260015, -121.07608154927406, -19.72602124899999, -106.36110347754808, -15.501676787329998, -27.24978081847, -13.233793838539997, -22.612036489899978, -50.03505496022013, -78.34691662135009, -36.39409534629001, -34.24777809743001, -182.46890515863382, -36.51489234115, -44.2872584888, -46.647642364800014, -22.318185480200004, -17.26542744716, -42.08936066574002, -21.740802750100006, -67.66022110719202, -28.73164001386702, -175.09688008745513, -18.1775401279, -59.77799700753497, -16.70203073253, -32.243834341409986, -92.76864346608998], "mean_logprob": [-0.14779693763136667, -0.8242767021454546, -0.33776189483906, -0.31960700833699, -0.6316603269987755, -0.9244214238929167, -0.7098101757467742, -0.34264530970449336, -1.151579483632353, -0.6740166834259277, -0.8548052632300001, -0.2004774045985, -0.4301213933780645, -0.49572610612790324, -0.5605547384022472, -0.45421258314306595, -0.6377968782508451, -0.5454877017560527, -0.5300185267406452, -0.05350476878804333, -0.9170291612916667, -0.7594514536635333, -0.48605691455295774, -0.40358693849758, -0.78904084996, -0.35453701159182666, -0.4429050510665714, -0.6193132004197728, -0.3482577325931579, -0.07537345496633334, -0.166783516534067, -0.2611563887378333, -0.34013173220831777, -0.5904789327143103, -0.6082296838621133, -0.4399384619415663, -1.10718146222, -0.7647154486032787, -0.6199495966722222, -0.5953595671434483, -0.6899895191104918, -0.869632110004, -0.22553407035730666, -0.09577213337955667, -0.5836562669581833, -0.908877006395, -0.19925999002511666, -0.6185937308344445, -0.1074794478047, -0.6923033094484329]}
{"prompt": "'''\nCasimir has a rectangular piece of paper with a checkered field of size n \u00d7 m. Initially, all cells of the field are white.\n\nLet us denote the cell with coordinates i vertically and j horizontally by (i, j). The upper left cell will be referred to as (1, 1) and the lower right cell as (n, m).\n\nCasimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: \n\n  1. First, the center cell (i, j) is painted black. \n  2. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black. \n  3. That is all the cells with coordinates (i - h, j \u00b1 h) for all h between 0 and d are painted. In particular, a tick consists of 2d + 1 black cells. \n\n\n\nAn already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3.\n\n<image>\n\nYou are given a description of a checkered field of size n \u00d7 m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks).\n\nDetermine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n2\n4 9 2\n...*....*\n........*\n........*\n..*..*...\n5 5 2\n.*..*\n.*.*.\n*...*\n.*.*.\n.*..*\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution('''4\n4 9 2\n.........\n.........\n.........\n.........\n2 3 1\n**.\n*.*\n4 4 1\n....\n....\n....\n....\n4 9 1\n.*.**.*.*\n.*.**.*.*\n.*.**.*.*\n.*.**.*.*\n''') == '''YES\nYES\nNO\nYES\n'''", "solution('''\n5\n5 5 2\n.....\n.....\n..*..\n.....\n.....\n5 5 2\n.....\n.***.\n..*..\n.***.\n.....\n5 5 2\n..*..\n.*.*.\n.*.*.\n.*.*.\n..*..\n5 5 2\n.***.\n.***.\n.***.\n.***.\n.***.\n7 4 1\n.***\n.***\n.***\n.***\n.***\n.***\n.***\n''') == '''\nYES\nYES\nYES\nYES\nNO\n'''", "solution('''\n1\n4 9 2\n**..**..*\n.*..*..**\n.*...*...\n***.*..**\n''') == 'YES'\nassert solution('''\n1\n4 9 2\n**..**..*\n.*..*..**\n.*...*...\n.*.*..**\n''') == 'NO'\nassert solution('''\n1\n4 9 1\n**..**..*\n.*..*..**\n.*...*...\n***.*..**\n''') == 'YES'\nassert solution('''\n1\n4 9 3\n**..**..*\n.*..*..**\n.*...*...\n***.*..**\n''') == 'NO'\nassert solution('''\n1\n2 3 3\n.*.\n***\n''') == 'YES'\nassert solution('''\n1\n4 9 4\n**..**..*\n.*..*..**\n.*...*...\n***.*..**\n''') == 'NO'\nassert solution('''\n1\n1 19 2\n*******************\n''') == 'YES'\nassert solution('''\n1\n9 1 1\n*\n*\n*\n*\n*\n*\n*\n*\n*\n''') == 'YES'\nassert solution('''\n1\n9 1 1\n.", "solution('''\n1\n5 5 3\n.....\n.*...\n.....\n.....\n.....\n''') == 'YES'\n\nassert solution('''\n1\n5 5 4\n..*..\n.***.\n..*..\n.....\n.....\n''') == 'NO'\n\nassert solution('''\n1\n5 7 2\n.....**\n.*.*.*.\n.*.*.*.\n.*.*.*.\n.....**\n''') == 'YES'\n\nassert solution('''\n1\n5 7 3\n.....**\n.*.*.*.\n.*.*.*.\n.*.*.*.\n.....**\n''') == 'NO'\n\nassert solution('''\n1\n5 5 1\n*****\n*****\n*****\n*****\n*****\n''') == 'YES'\n\nassert solution('''\n1\n5 5 2\n*****\n*****\n*****\n*****\n*****\n''') == 'NO'\n\nassert solution('''\n1\n5 5 1\n*...*\n.....\n*...*\n.....\n*...*\n''') == 'YES'\n\nassert solution('''\n1\n5 5 2\n*...*\n.....\n*...*\n.....\n*...*\n''') == 'NO'\n\nassert solution('''\n1\n5 5 2\n.*.*.\n.*.*.\n", "solution('''\n1\n4 9 2\n*********\n*********\n*********\n*********\n''') == 'YES'\n\nassert solution('''\n1\n4 9 3\n*********\n****..***\n****..***\n*********\n''') == 'NO'\n\nassert solution('''\n1\n4 9 2\n*********\n****.****\n****.****\n*********\n''') == 'YES'\n\nassert solution('''\n1\n4 9 2\n*********\n****.****\n****.****\n****.****\n''') == 'NO'\n\nassert solution('''\n1\n4 9 2\n*********\n****...**\n****...**\n*********\n''') == 'NO'\n\nassert solution('''\n1\n4 9 2\n*********\n****.****\n****.****\n****.****\n''') == 'NO'\n\nassert solution('''\n1\n4 9 2\n*********\n****.****\n****.****\n*********\n''') == 'YES'\n\nassert solution('''\n1\n4 9 2\n*********\n**..**.**\n**..**.**\n*********\n''') == 'NO'\n\nassert solution('''\n1\n4 9 2\n*********\n****.****\n****.****\n****.", "solution('''\n3\n5 5 1\n**.*.\n***.*\n..*.*\n...**\n.*...\n4 6 2\n.***..\n..**..\n.*....\n....*.\n3 3 2\n.*.\n...\n...\n''') == '''\nYES\nYES\nNO\n'''", "solution(INPUT) == OUTPUT", "solution(\"\"\"5\n5 9 3\n.*..***..\n.*..***..\n.*..***..\n.*..***..\n.*..***..\n5 5 1\n.*.*.\n.*.*.\n.*.*.\n.*.*.\n.*.*.\n5 5 3\n.*.*.\n.*.*.\n.*.*.\n.*.*.\n.*.*.\n5 5 5\n.*.*.\n.*.*.\n.*.*.\n.*.*.\n.*.*.\n5 5 6\n.*.*.\n.*.*.\n.*.*.\n.*.*.\n.*.*.\"\"\") == '''YES\nYES\nNO\nYES\nNO'''\n\nprint(\"All tests passed!\")", "solution('''\n4\n4 4 2\n....\n....\n....\n....\n4 9 2\n..*....*\n..*....*\n..*....*\n..*....*\n4 9 2\n..*....*\n..**...*\n..*....*\n..*....*\n4 9 3\n.**...**\n.**...**\n.**...**\n.**...**\n''') == '''\nYES\nNO\nYES\nYES\n'''\n\n# check the performance of solution\nassert solution('''\n2\n10 10 1\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n5 5 4\n.....\n.....\n.....\n.....\n.....\n''') == '''\nYES\nNO\n'''\n\nprint(\"PASSED!!!\")", "solution(\"\"\"5\n5 9 2\n........*\n...*.....\n*..*.....\n*..*.....\n*........\n5 9 1\n*..*.....\n*..*.....\n*..*.....\n........*\n........*\n3 3 2\n***\n***\n***\n3 3 1\n***\n***\n***\n3 3 3\n***\n***\n***\n3 3 4\n***\n***\n***\"\"\") == '''YES\nYES\nNO\nYES\nNO'''", "solution(\"\"\"\n3\n4 9 2\n........\n........\n........\n........\n2 3 2\n.*.\n.*.\n3 4 2\n.**.\n.**.\n.**.\n\"\"\") == \"\"\"\nYES\nYES\nNO\n\"\"\"\n\n# check that the solution will work for large n\nimport random\nimport string\nn = 9999\nm = 19\nk = random.randint(1, n)\nstrings = []\nfor _ in range(n):\n    row = random.choices(['.', '*'], k=m)\n    strings.append(''.join(row))\n\nassert solution(f\"{n} {m} {k}\\n\" + '\\n'.join(strings)) == \"YES\"", "solution(\"\"\"4\n4 9 2\n..***....\n..***....\n..***....\n..***....\n6 4 2\n...*\n...*\n...*\n...*\n...*\n...*\n2 3 1\n.**\n.**\n6 6 2\n...*..\n...*..\n...*..\n...*..\n...*..\n...*..\n6 6 1\n...*..\n...*..\n...*..\n...*..\n...*..\n...*..\"\"\") == \"\"\"YES\nYES\nYES\nNO\"\"\"", "solution('''\n\n''') == '''\n\n'''\nassert solution('''\n\n''') == '''\n\n'''\nassert solution('''\n\n''') == '''\n\n'''\nassert solution('''\n\n''') == '''\n\n'''\nassert solution('''\n\n''') == '''\n\n'''\nassert solution('''\n\n''') == '''\n\n'''", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution('''\n1\n3 3 2\n...\n...\n...\n''') == 'YES'\n\nassert solution('''\n1\n2 3 3\n..*\n..*\n''') == 'NO'\n\n# check the performance of solution\n\nfrom datetime import datetime\nfrom io import StringIO\n\nstartTime = datetime.now()\n\nstdin = '''\n'''\n\nout = StringIO()\n\nwith redirect_stdin(StringIO(stdin)):\n    with redirect_stdout(out):\n        solution()\n\nprint('Time spent: {}'.format(datetime.now() - startTime))\nprint(out.getvalue())", "solution('''\n2\n5 5 2\n.*...\n*.*..\n..*..\n..*..\n..*..\n4 9 1\n..*.*.*..\n.*.*.*.*.\n.*.*.*.*.\n.*.*.*.*.\n''') == '''\nYES\nNO\n'''", "solution('''\n4\n4 9 3\n.*....*..\n.........\n.........\n..*..*...\n4 9 3\n.*....*..\n........*\n.*......*\n..*..*...\n4 9 3\n.*....*..\n........*\n.*......*\n..*..*...\n4 9 3\n.*....*..\n.*....*..\n.*....*..\n..*..*...\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution('''3\n3 3 2\n..*\n.*.\n..*\n4 4 2\n.*.*\n..**\n.*.*\n.*.*\n4 4 1\n.*.*\n..**\n.*.*\n.*.*\n''') == '''NO\nYES\nYES\n'''\n\ndef main():\n    # read the input\n    t = int(input())\n    inputs = [input() for _ in range(t)]\n\n    # output the solution to stdout\n    for i in range(t):\n        solution_out = solution(inputs[i])\n        print(solution_out)\n\nif __name__ == '__main__':\n    main()", "solution(\"\"\"3\n3 4 2\n....\n....\n....\n4 7 2\n..*...*\n...***.\n.*****.\n..****.\n4 9 3\n....***..\n....***..\n....***..\n....***..\n\"\"\") == \"\"\"YES\nNO\nYES\n\"\"\"\n\nassert solution(\"\"\"3\n3 3 2\n*..\n.**\n..*\n3 2 1\n**\n**\n**\n3 2 1\n.*\n.*\n.*\n\"\"\") == \"\"\"NO\nYES\nNO\n\"\"\"\n\nassert solution(\"\"\"3\n1 1 1\n*\n1 1 1\n.\n1 1 1\n*\n\"\"\") == \"\"\"YES\nYES\nYES\n\"\"\"\n\n# get the input\nstdin = \"\"\nfor line in sys.stdin:\n    stdin += line\n\n# print the result\nresult = solution(stdin)\nprint(result)", "solution(r'''1\n4 9 2\n.****.*..\n.****.***\n.*..*.*..\n.*..*.*..\n''') == 'YES'\n\nassert solution(r'''1\n2 3 1\n...\n...\n''') == 'YES'\n\nassert solution(r'''1\n2 3 1\n.*.\n.*.\n''') == 'NO'\n\nassert solution(r'''1\n4 9 2\n.****.*..\n.****.***\n.*..*.*..\n.*..*.*.*\n''') == 'NO'\n\nassert solution(r'''1\n4 9 1\n.****.*..\n.****.***\n.*..*.*..\n.*..*.*..\n''') == 'NO'\n\n# str on stdin\nimport sys\nstdin = sys.stdin.read()\nprint(solution(stdin))", "solution(\"\"\"\n3\n1 1 1\n.\n3 3 2\n..*\n***\n...\n3 3 1\n***\n***\n***\n\"\"\") == \"\"\"\nYES\nYES\nNO\n\"\"\"\n\ndef solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    cases = int(lines[0])\n    answers = []\n    for i in range(cases):\n        n, m, k = [int(p) for p in lines[3*i+1].split()]\n        board = [[c for c in line] for line in lines[3*i+2:3*i+2+n]]\n        def p(i, j):\n            return 0 <= i < n and 0 <= j < m and board[i][j] == '*'\n        for i in range(n):\n            for j in range(m):\n                if board[i][j] == '*':\n                    possible = True\n                    for d in range(k, min(i, j) + 1):\n                        possible = possible and all(p(i-h, j-h) and p(i-h, j+h) for h in range(d))\n                    if possible:\n                        break\n                    else:\n                        return 'NO'\n    return 'YES'\n\n#", "solution('''\n1\n4 9 2\n.........\n.*.......\n..*......\n..*......\n''') == '''\nYES\n'''\n\nassert solution('''\n2\n4 9 3\n.*.......\n..*......\n..*......\n.........\n4 9 2\n.*.......\n..*......\n..*......\n.........\n''') == '''\nNO\nYES\n'''\n\nassert solution('''\n2\n3 3 1\n...\n...\n...\n3 3 2\n...\n...\n...\n''') == '''\nYES\nNO\n'''\n\nassert solution('''\n2\n3 3 2\n*..\n.*.\n..*\n3 3 2\n.*.\n..*\n*..\n''') == '''\nYES\nYES\n'''\n\nassert solution('''\n2\n3 3 2\n*..\n..*\n..*\n3 3 2\n.*.\n..*\n..*\n''') == '''\nNO\nYES\n'''\n\nassert solution('''\n2\n3 3 2\n*..\n*..\n*..\n3 3 2\n.*.\n.*.\n.*.\n''') == '''\nYES\nYES\n'''\n\nassert solution('''\n1\n9 19 2\n...................\n...................\n...................\n................", "solution(\"\") == \"\"", "solution('''\n3\n3 4 2\n.*..\n..*\n.*..\n2 3 2\n...\n...\n3 3 1\n***\n***\n***\n''') == '''\nYES\nNO\nYES\n'''", "solution(\"\"\"\n5\n5 5 2\n.*...\n..*..\n*.*..\n..*..\n.*...\n2 3 3\n.*.\n.*.\n2 3 2\n..*\n..*\n6 6 2\n.*.*..\n.*.*..\n.*.*..\n.*.*..\n.*.*..\n.*.*..\n6 6 2\n*.*.*.\n.*.*.*\n*.*.*.\n.*.*.*\n*.*.*.\n.*.*.*\n\"\"\") == \"\"\"\nYES\nNO\nYES\nYES\nNO\n\"\"\"", "solution(\"\"\"\n1\n5 11 3\n***********\n***********\n***********\n***********\n***********\n\"\"\") == 'YES'\n\nassert solution(\"\"\"\n1\n5 11 3\n**********.\n**********.\n**********.\n**********.\n**********.\n\"\"\") == 'NO'\n\nassert solution(\"\"\"\n1\n5 11 3\n.*.********\n.*.********\n.*.********\n.*.********\n.*.********\n\"\"\") == 'NO'\n\nassert solution(\"\"\"\n2\n3 5 2\n..*..\n..*..\n..*..\n3 5 2\n..*..\n**...\n..*..\n\"\"\") == 'NO\\nYES'", "solution(\"\"\"\n4\n4 9 2\n.........\n.........\n.........\n.........\n2 2 2\n..\n..\n2 2 3\n..\n..\n4 9 3\n.........\n.........\n.........\n.........\n\"\"\") == \"\"\"\nYES\nNO\nNO\nYES\n\"\"\"", "(\n    solution('''\n1\n4 9 2\n.........\n.........\n.........\n.........\n    ''') == '''\nNO\n    '''\n)\n\nassert (\n    solution('''\n1\n4 9 2\n..*...*..\n..*...*..\n..*...*..\n..*...*..\n    ''') == '''\nYES\n    '''\n)\n\nassert (\n    solution('''\n1\n4 9 3\n........*\n....*....\n........*\n...*.....\n    ''') == '''\nYES\n    '''\n)\n\nassert (\n    solution('''\n2\n4 9 3\n........*\n....*....\n........*\n...*.....\n5 7 2\n.......\n..***..\n.*...*.\n..***..\n.......\n    ''') == '''\nYES\nNO\n    '''\n)\n\n# check time limit\nimport timeit\n\nassert (\n    timeit.timeit(solution, '''\n1\n40 180 10\n............................................\n............................................\n............................................\n............................................\n............................................\n............................................\n............................................\n............................................\n............................................\n............................................\n............................................\n............................................\n............................................\n............................................", "solution(example) == '''\nYES\nNO\n'''\n\nprint('ok')", "solution('''\n1\n4 9 2\n..***..*\n..***..*\n..***..*\n..***..*\n''') == 'NO'\n\nassert solution('''\n1\n4 9 2\n..***..*\n..***..*\n..***..*\n..*****.*\n''') == 'YES'\n\nassert solution('''\n1\n4 9 2\n..***..*\n..***..*\n..***..*\n.*.***.*\n''') == 'YES'\n\nassert solution('''\n1\n4 9 2\n.*.***.*\n.*.***.*\n.*.***.*\n.*.***.*\n''') == 'NO'\n\nassert solution('''\n1\n4 9 2\n.*.*..*\n.*.*..*\n.*.*..*\n.*.*..*\n''') == 'NO'\n\nassert solution('''\n1\n4 9 2\n..*****\n..*****\n..*****\n..*****\n''') == 'NO'\n\nassert solution('''\n1\n4 9 2\n.*..**.\n.*..**.\n.*..**.\n.*..**.\n''') == 'NO'\n\nassert solution('''\n1\n4 9 2\n.*..**.\n.*..**.\n.*..**.\n.*.*.*", "solution(\"\"\"1\n4 9 3\n.********\n*********\n*********\n*********\"\"\") == \"\"\"YES\"\"\"", "solution(\"3\\n4 9 2\\n**....**\\n.**..**.\\n..**.**.\\n.******.\\n3 4 2\\n..**\\n....\\n..**\\n4 4 1\\n****\\n****\\n****\\n****\") == '''YES\nNO\nYES'''\n\n# submit", "solution(r'''\n1\n4 9 2\n..*......\n.**...*..\n.*.**....\n..*.*....\n''') == 'YES'\n\nassert solution(r'''\n1\n3 9 1\n.*..*...*\n*...*..*.\n..*..*..*\n''') == 'NO'\n\nassert solution(r'''\n1\n3 9 3\n.*..*...*\n*...*..*.\n..*..*..*\n''') == 'YES'\n\nassert solution(r'''\n1\n4 9 3\n.*..*..**\n*...*..*.\n..*..*..*\n.*.*..*..\n''') == 'NO'\n\n# submit\n\nprint(solution(sys.stdin.read()))", "solution('''\n5\n5 5 1\n...*.\n.*...\n*.*..\n..*..\n.....\n5 5 2\n...*.\n.*...\n*.*..\n..*..\n.....\n5 5 3\n...*.\n.*...\n*.*..\n..*..\n.....\n5 5 4\n...*.\n.*...\n*.*..\n..*..\n.....\n5 5 5\n...*.\n.*...\n*.*..\n..*..\n.....\n''') == '''\nYES\nYES\nYES\nNO\nNO\n'''", "solution(\"\"\"\n1\n5 6 2\n*...**\n.**...\n....*.\n..***.\n***.*.\n\"\"\") == 'YES'\n\nassert solution(\"\"\"\n1\n5 6 2\n....**\n..*...\n.*....\n..*...\n.....*\n\"\"\") == 'NO'\n\nassert solution(\"\"\"\n3\n3 7 4\n*..*..*\n..*.*..\n*..*..*\n3 7 4\n*..*..*\n..*...*\n*..*..*\n4 10 2\n....*....*\n..*.*.*.*.\n..*.*.*.*.\n....*....*\n\"\"\") == 'YES\\nNO\\nYES'", "solution('''\n''') == ''\n\n# check the performance of solution\nassert solution('''\n''') == ''", "solution('''\n1\n4 9 2\n...*.....\n...*..*..\n........*\n........*\n''') == 'YES'\n\nassert solution('''\n1\n4 9 2\n...*.....\n...*..*..\n.......**\n........*\n''') == 'NO'\n\nassert solution('''\n1\n3 1 1\n**\n**\n**\n''') == 'YES'\n\nassert solution('''\n1\n4 4 1\n....\n....\n....\n....\n''') == 'YES'\n\nassert solution('''\n1\n5 5 4\n...*...\n..***..\n.*.*.*.\n..***..\n...*...\n''') == 'YES'\n\nassert solution('''\n1\n4 4 3\n....\n....\n....\n....\n''') == 'NO'\n\n# if in description is:\n# - 2 \u2264 n \u2264 10; 1 \u2264 m \u2264 19\n# instead of\n# - 1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19\n# then it is not possible to solve this problem\nassert solution('''\n1\n2 2 1\n**\n**\n''') == 'NO'\n\nassert solution('''\n1\n2 4 1\n....\n....\n''') == 'NO'\n\nassert solution('''\n", "solution(\"\"\"2\n4 9 2\n........\n.***.***\n.***.***\n........\n5 10 2\n...***.*.\n...***.*.\n........*\n...***.*.\n........*\n\"\"\") == \"\"\"YES\nNO\n\"\"\"\nprint(\"Solution passed!\")", "solution(r'''\n3\n3 5 1\n...**\n...**\n...**\n4 9 2\n..*******\n..*...*..\n..*...*..\n..*******\n4 9 3\n..*******\n..*...*..\n..*...*..\n..*******\n''') == r'''\nYES\nNO\nYES\n'''", "solution('''\n''') == ''\n\n# show timing statistics\nif __name__ == '__main__':\n    from timeit import timeit\n    print(timeit(setup='''\n''', stmt='''\n''', number=100))", "solution(\"\"\"\n1\n4 9 2\n........\n........\n........\n........\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1\n4 9 2\n.....*..\n....***.\n...*****\n...*****\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1\n4 9 2\n.*..*...\n.***....\n*****...\n...*****\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1\n4 9 2\n.......*\n....****\n...*****\n...*****\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1\n4 9 2\n...*....\n...***..\n...*****\n...*****\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1\n4 9 2\n...*****\n...*****\n...*****\n...*****\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1\n4 9 2\n...****.\n...*****\n...*****\n...*****\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1\n4 9 2\n...*....\n...*****\n...*****\n...*****\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1\n4 9 2\n...*****\n...*****\n...*****\n...*****\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1\n4 9 2\n...*****\n...*****\n", "solution(\"\") == \"\"", "solution('''\n2\n3 4 2\n...*\n...*\n..**\n3 4 2\n....\n....\n....\n''') == '''\nYES\nNO\n'''\n# check the correctness of solution\nassert solution('''\n2\n2 3 1\n..*\n..*\n2 3 1\n**.\n..*\n''') == '''\nYES\nYES\n'''\n# check the correctness of solution\nassert solution('''\n2\n2 3 1\n..*\n..*\n2 3 1\n..*\n..*\n''') == '''\nYES\nNO\n'''\n# check the correctness of solution\nassert solution('''\n2\n2 3 1\n.*.\n.*.\n2 3 1\n..*\n.*.\n''') == '''\nNO\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 1\n..*\n..*\n2 3 1\n***\n***\n''') == '''\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 1\n..*\n..*\n2 3 1\n...\n...\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 4 2", "solution('''\n4\n2 2 2\n*.\n.*\n3 2 2\n.*\n.*\n.*\n3 1 1\n..\n**\n**\n3 2 2\n.*\n.*\n.*\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution(\"\"\"7\n2 2 2\n.*\n.*\n2 2 1\n.*\n.*\n3 2 1\n.*\n.*\n.*\n3 2 2\n.*\n.*\n.*\n4 2 1\n..*\n..*\n..*\n..*\n4 2 2\n..*\n..*\n..*\n..*\n4 3 2\n.*.\n.*.\n.*.\n.*.\n5 3 2\n.*.\n.*.\n.*.\n.*.\n.*.\"\"\") == \"\"\"YES\nYES\nYES\nYES\nNO\nYES\nNO\"\"\"\n\n# test the performance of solution\nimport timeit\n\nassert timeit.timeit(lambda: solution(\"\"\"7\n2 2 2\n.*\n.*\n2 2 1\n.*\n.*\n3 2 1\n.*\n.*\n.*\n3 2 2\n.*\n.*\n.*\n4 2 1\n..*\n..*\n..*\n..*\n4 2 2\n..*\n..*\n..*\n..*\n4 3 2\n.*.\n.*.\n.*.\n.*.\n5 3 2\n.*.\n.*.\n.*.\n.*.\n.*.\"\"\"), number=10) < 0.1", "solution('''\n3\n3 3 3\n...\n...\n...\n4 4 4\n...*\n.*..\n.*..\n...*\n3 4 3\n.**.\n.**.\n.**.\n''') == '''\nYES\nYES\nNO\n'''", "solution('''\n5\n3 3 3\n.**\n.*.\n.**\n1 1 1\n.\n2 1 1\n*.\n*.\n4 4 1\n.**.\n.**.\n.*..\n.*..\n4 4 2\n.**.\n.**.\n.*..\n.*..\n''') == '''\nYES\nYES\nYES\nNO\nYES\n'''", "solution(\"\"\"\n1\n4 9 2\n........*\n........*\n........*\n...*****\n\"\"\") == 'YES'\n\nassert solution(\"\"\"\n1\n5 5 3\n.....\n.....\n..*..\n.....\n.....\n\"\"\") == 'NO'\n\nassert solution(\"\"\"\n3\n3 3 1\n***\n***\n***\n1 1 1\n*\n1 1 2\n*\n\"\"\") == '\\n'.join(['YES', 'YES', 'NO'])", "solution(t1) == 'YES'\nassert solution(t2) == 'NO'\nassert solution(t3) == 'YES'\nassert solution(t4) == 'NO'\n\nprint('OK')"], "finish_reason": ["stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-38.01369812982999, -45.66694774295399, -46.381346784911, -89.11682057969534, -78.12428610198998, -69.44978173667101, -56.54045206854, -8.1309236592, -53.23764891855902, -73.54486201845398, -61.512080852550035, -98.16170749006999, -52.320717159010016, -15.67385006031, -13.657946321319995, -68.787805796142, -36.71173797518, -47.79666010291002, -71.05579096977002, -104.83599759126403, -82.37850489511999, -118.88034879418801, -88.08362553675406, -5.9296023, -30.3401015359, -58.59900038845005, -63.38061669516997, -26.22376826247, -98.85117870470224, -20.950581415999995, -78.73629583307496, -19.858008311929996, -61.11667870018498, -94.95291362523999, -31.677490941740007, -106.49045536099501, -11.525409685599998, -149.311118098509, -55.67823304198, -35.22200143913001, -35.34826618467, -80.24139698413404, -5.929601890000001, -85.9626975322486, -41.429079391420004, -64.74204733656303, -30.53547473641, -47.10302356091497, -49.28893954487001, -22.21817852682], "mean_logprob": [-0.6131241633843548, -0.5436541397970714, -0.3435655317400815, -0.2970560685989843, -0.2604142870066333, -0.23149927245557, -0.7852840565075, -0.9034359621333333, -0.3456990189516818, -0.3790972268992474, -0.5592007350231818, -0.5774218087651176, -0.41856573727208, -0.15518663426049506, -0.04552648773773333, -0.4409474730521923, -0.5170667320447887, -0.42675589377598216, -0.4614012400634416, -0.5189900870854653, -0.40381620046627453, -0.39626782931396, -0.29361208512251336, -0.9882670499999999, -0.5724547459603774, -0.4725725837778226, -0.3986202307872327, -0.42989784036836065, -0.3339566848131832, -0.9976467340952381, -0.26245431944358333, -0.7354817893307407, -0.7453253500022561, -0.5160484436154348, -0.2514086582677778, -0.653315677061319, -0.3974279201931034, -0.49770372699503, -0.8565882006458462, -0.41437648751917644, -0.5794797735191803, -0.26747132328044665, -0.9882669816666667, -0.28654232510749533, -0.6682109579261291, -0.24523502779001136, -0.4771167927564062, -0.5292474557406179, -0.4480812685897273, -0.45343221483306123]}
{"prompt": "'''\nMr. Chanek's city can be represented as a plane. He wants to build a housing complex in the city.\n\nThere are some telephone poles on the plane, which is represented by a grid a of size (n + 1) \u00d7 (m + 1). There is a telephone pole at (x, y) if a_{x, y} = 1.\n\nFor each point (x, y), define S(x, y) as the square of the Euclidean distance between the nearest pole and (x, y). Formally, the square of the Euclidean distance between two points (x_1, y_1) and (x_2, y_2) is (x_2 - x_1)^2 + (y_2 - y_1)^2.\n\nTo optimize the building plan, the project supervisor asks you the sum of all S(x, y) for each 0 \u2264 x \u2264 n and 0 \u2264 y \u2264 m. Help him by finding the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}.\n\nInput\n\nThe first line contains two integers n and m (0 \u2264 n, m < 2000) \u2014 the size of the grid.\n\nThen (n + 1) lines follow, each containing (m + 1) integers a_{i, j} (0 \u2264 a_{i, j} \u2264 1) \u2014 the grid denoting the positions of telephone poles in the plane. There is at least one telephone pole in the given grid.\n\nOutput\n\nOutput an integer denoting the value of \u2211_{x=0}^{n} {\u2211_{y=0}^{m} {S(x, y)}}.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''3 3\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0", "solution('''\\\n2 3\n1 0 0\n0 0 0\n0 0 1\n''') == '''\\\n6\n'''\n\nassert solution('''\\\n3 4\n1 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 1\n''') == '''\\\n16\n'''\n\nassert solution('''\\\n2 4\n1 0 0 0\n0 0 0 0\n0 0 0 1\n''') == '''\\\n12\n'''\n\nassert solution('''\\\n2 4\n1 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '''\\\n18\n'''\n\nassert solution('''\\\n3 4\n1 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 1\n''') == '''\\\n22\n'''\n\nassert solution('''\\\n3 4\n1 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '''\\\n28\n'''\n\nassert solution('''\\\n1 1\n1\n''') == '''\\\n0\n'''\n\nassert solution('''\\\n1 1\n0\n''') == '''\\\n2\n'''\n\nassert solution('''\\\n0 0\n''", "solution('''\n0 0\n1\n''') == '''\n0\n'''\n\nassert solution('''\n2 3\n1 0 0\n0 0 0\n0 0 1\n''') == '''\n4\n'''\n\nassert solution('''\n3 3\n1 0 0\n0 0 0\n0 0 1\n''') == '''\n4\n'''\n\nassert solution('''\n6 6\n1 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 1\n''') == '''\n8\n'''\n\nassert solution('''\n5 5\n1 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 1\n''') == '''\n6\n'''\n\nassert solution('''\n8 8\n1 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 1\n''') == '''\n8\n'''\n\nassert solution('''", "solution(\"\"\"\n    4 3\n    0 0 0 0\n    0 0 0 0\n    0 0 0 0\n    0 0 0 0\n    0 0\n\"\"\") == \"196\"\n\nassert solution(\"\"\"\n    3 3\n    0 0 0\n    0 1 0\n    0 0 0\n    0 0\n\"\"\") == \"18\"\n\n# check the performance of solution\nfrom utils import time_it\n\nN, M = 200, 200\ninp = f\"{N} {M}\\n\"\na = [[1 if random.random() < 0.05 else 0 for _ in range(M+1)] for _ in range(N+1)]\nfor row in a:\n    inp += \" \".join(map(str, row)) + \"\\n\"\n\nassert time_it(solution, inp) < 0.1, \"You are doing something wrong :(\"", "solution(\"\"\"\n5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0\n\"\"\") == '300000000'\n\nassert solution(\"\"\"\n2 3\n0 0 0\n0 0 0\n0 0\n\"\"\") == '33000000'\n\nassert solution(\"\"\"\n3 1\n0\n0\n0\n0\n\"\"\") == '100000000'\n\nassert solution(\"\"\"\n1 1\n0\n0\n\"\"\") == '100000000'\n\nassert solution(\"\"\"\n1 1\n1\n0\n\"\"\") == '0'\n\nassert solution(\"\"\"\n1 1\n0\n1\n\"\"\") == '0'\n\nassert solution(\"\"\"\n3 3\n0 0 0\n0 0 0\n0 0 0\n0 0\n\"\"\") == '70000000'\n\nassert solution(\"\"\"\n1 1\n1\n1\n\"\"\") == '0'\n\nassert solution(\"\"\"\n3 3\n1 0 0\n0 0 0\n0 0 0\n0 0\n\"\"\") == '77000000'\n\nassert solution(\"\"\"\n3 3\n0 0 1\n0 0 0\n0 0 0\n0 0\n\"\"\") == '77000000'\n\nassert solution(\"\"\"\n3 3\n0 0 0\n0 0 1\n0 0 0\n0", "solution('''\n3 4\n0 0 0 0\n0 1 0 0\n0 0 0 0\n0 0 0 0\n''') == '28'\n\nassert solution('''\n5 5\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '50'\n\nassert solution('''\n10 9\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '90'\n\nassert solution('''\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0", "solution(test_data) == test_output\n# test for auto-testing\nimport pytest\n@pytest.mark.timeout(5)\ndef test_more():\n    assert solution(test_data) == test_output\n\nif __name__ == '__main__':\n    # Get a file name\n    if (len(sys.argv) < 2):\n        input_stream = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8')\n    else:\n        input_stream = open(sys.argv[1], 'r', encoding='utf-8')\n\n    # Get an output file name\n    if (len(sys.argv) < 3):\n        output_stream = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')\n    else:\n        output_stream = open(sys.argv[2], 'w', encoding='utf-8')\n\n    # Print answer\n    print(solution(input_stream.read()), file=output_stream)", "solution('''\n4 4\n0 0 0 0\n0 1 0 0\n0 0 0 0\n0 0 0 0\n''') == '''\n38\n'''\n\n# get input and print answer\n# n, m = map(int, input().split())\n# a = [list(map(int, input().split())) for _ in range(n + 1)]\n# print(solution(n, m, a))", "solution(\"\"\"\n4 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"\"\"\n50\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 2\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"\"\"\n24\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1 1\n1\n0\n\"\"\") == \"\"\"\n4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"\"\"\n100\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n0 0\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n0 0\n0\n\"\"\") == \"\"\"\n4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 3\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"\"\"\n48\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 6\n0 0 0 0 0 0\n0 0 0 0 0", "solution('''\n2 3\n1 0 0\n0 0 0\n0 0 0\n''') == '34'\n\n# check the correctness of solution\nassert solution('''\n1 1\n1\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3 2\n1 0 0\n0 0 0\n0 0 1\n''') == '52'\n\n# submit\nimport sys\nfrom os.path import dirname\nsys.path.append(dirname(__file__))\n\nfrom utils import *\nrun_solution(solution)", "solution('''\n5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '1', 'Fail'\n\nassert solution('''\n5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 1\n''') == '0', 'Fail'\n\nassert solution('''\n5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '3', 'Fail'\n\nassert solution('''\n5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '3', 'Fail'\n\nassert solution('''\n5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '3', 'Fail'\n\nassert solution('''\n5 5\n0 0 0 0 0\n0 0 0 0 0\n", "solution(stdin_sample) == stdout_sample\n\n# get input for the challenge\ndef get_input(source: str) -> str:\n    return open(source).read()\n\n# gets a filename where the output should be saved\ndef get_output_path(source: str) -> str:\n    return source.replace('.in', '.out')\n\n# write the output to a text file\ndef save_output(output: str, destination: str):\n    with open(destination, 'w') as f:\n        f.write(output)\n\ndef solve_files(source: str):\n    inp = get_input(source)\n    out = solution(inp)\n    save_output(out, get_output_path(source))\n\n# example on how to use solve_files()\nsolve_files(source = 'input/sample.in')\nsolve_files(source = 'input/small.in')\nsolve_files(source = 'input/large.in')", "solution(solution_input) == solution_output", "solution(\"\"\"\n5 6\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n\"\"\") == \"200\"\n\nassert solution(\"\"\"\n4 4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 1 0 0\n\"\"\") == \"200\"\n\nassert solution(\"\"\"\n2 3\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"17\"\n\nassert solution(\"\"\"\n1 1\n0\n0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 1\n1\n0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 1\n0\n1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 3\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"90\"\n\nassert solution(\"\"\"\n3 3\n0 0 0\n0 0 0\n0 0 0\n0 1 0\n\"\"\") == \"90\"\n\nassert solution(\"\"\"\n3 3\n0", "solution(\"\"\"\n5 7\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n210\n\"\"\"\n\n# test the performance of solution\nassert solution(\"\"\"\n1 1\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n0 0\n\"\"\") == \"\"\"\n4\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n\"\"\") == \"\"\"\n40\n\"\"\"\n\nassert solution(\"\"\"\n3 4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n\"\"\") == \"\"\"\n30\n\"\"\"\n\nassert solution(\"\"\"\n4 3\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"\"\"\n40\n\"\"\"\n\nassert solution(\"\"\"\n0 0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2000 2000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "solution('''\n3 3\n1 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '24'\n\nprint('Passed!')", "(solution(\"\"\"\n2 3\n1 0 0\n0 0 0\n0 0 0\n\"\"\") == \"26\")\nassert (solution(\"\"\"\n3 3\n1 0 0\n0 0 0\n0 0 0\n\"\"\") == \"56\")\nassert (solution(\"\"\"\n1 1\n1\n\"\"\") == \"2\")\nassert (solution(\"\"\"\n2 2\n1 0\n0 0\n\"\"\") == \"8\")\nassert (solution(\"\"\"\n3 1\n1\n0\n0\n\"\"\") == \"20\")\nassert (solution(\"\"\"\n0 0\n\"\"\") == \"0\")\nassert (solution(\"\"\"\n2 1\n1\n0\n\"\"\") == \"6\")\nassert (solution(\"\"\"\n2 2\n0 0\n0 0\n\"\"\") == \"0\")\nassert (solution(\"\"\"\n1 2\n0 0\n\"\"\") == \"0\")\nassert (solution(\"\"\"\n1 1\n0\n\"\"\") == \"0\")\nassert (solution(\"\"\"\n2 3\n0 0 0\n0 0 0\n\"\"\") == \"0\")\nassert (solution(\"\"\"\n3 2\n0 0\n0 0\n0 0\n\"\"\") == \"0\")\nassert (solution(\"\"\"\n4 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0", "solution(\"\"\"\n3 4\n0 0 0 0\n0 1 0 0\n0 0 0 0\n0 0 0 0\n\"\"\") == \"2\\n\"\n\nassert solution(\"\"\"\n3 4\n0 0 0 0\n0 1 0 0\n0 0 1 0\n0 0 0 0\n\"\"\") == \"6\\n\"\n\nassert solution(\"\"\"\n5 7\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\"\"\") == \"8\\n\"\n\nassert solution(\"\"\"\n6 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"10\\n\"\n\nassert solution(\"\"\"\n6 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 1\n\"\"\") == \"12\\n\"\n\nassert solution(\"\"\"\n6 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0", "solution('''\n3 4\n0 0 0 0\n0 1 0 0\n0 0 0 0\n0 0 0 0\n''') == '40'\n\nassert solution('''\n4 2\n0 0\n0 1\n0 0\n0 0\n0 0\n''') == '16'\n\nassert solution('''\n1 1\n0\n0\n''') == '2'\n\n# test speed of solution\n\nimport timeit\nimport random\nimport string\n\ndef generate_testcase(N: int, M: int) -> str:\n    def generate_grid(N: int, M: int) -> list:\n        grid = [['0' for _ in range(M + 1)] for _ in range(N + 1)]\n        grid[random.randint(0, N)][random.randint(0, M)] = '1'\n        return grid\n\n    def convert_to_str(grid: list) -> str:\n        grid_str = ''\n        for row in grid:\n            grid_str += ''.join(row) + '\\n'\n        return grid_str\n\n    grid = generate_grid(N, M)\n    grid_str = convert_to_str(grid)\n    testcase = '\\n'.join([str(N), str(M), grid_str", "solution('''\\\n0 0\n0\n''') == '0'\nassert solution('''\\\n3 3\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '0'\nassert solution('''\\\n3 3\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '4'\nassert solution('''\\\n3 3\n0 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '2'\nassert solution('''\\\n2 3\n0 0 0\n0 1 0\n0 0 0\n''') == '10'\nassert solution('''\\\n2 3\n0 0 0\n0 1 0\n0 1 0\n''') == '8'\nassert solution('''\\\n3 3\n0 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 0\n''') == '2'\nassert solution('''\\\n1 3\n0 0 0\n0 0 0\n''') == '0'\nassert solution('''\\\n3 3\n0", "solution('''\n3 4\n0 0 0 0\n0 1 0 0\n0 0 0 0\n0 0 0 0\n''') == '''\n\n'''", "solution(\"\"\"\n2 2\n1 0 0\n0 0 0\n0 0 0\n\"\"\") == \"6\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1 1\n1\n0\n0\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 4\n1 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"60\"\n\nimport os\nimport unittest\nfrom contextlib import contextmanager\nimport io\n\nclass Tests(unittest.TestCase):\n    def setUp(self):\n        self.file = open(\"data.txt\", \"r\")\n\n    def tearDown(self):\n        self.file.close()\n\n    def test(self):\n        data = self.file.read()\n        f = io.StringIO(data)\n        with stdinIO(f):\n            self.assertEqual(solution(data), \"105814\")\n\n@contextmanager\ndef stdinIO(stdin):\n    old = sys.stdin\n    sys.stdin = stdin\n    yield\n    sys.stdin = old\n\nif __name__ == \"__main__\":\n    unittest.main()", "solution(__file__) == 'todo'", "solution('''3 4\n1 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0''') == '15'\nassert solution('''1 1\n1\n0''') == '1'\nassert solution('''2 3\n1 0 0\n0 0 0\n0 0 0''') == '10'\nassert solution('''5 5\n1 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0''') == '75'\nassert solution('''2000 2000\n1 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0''') == '399950000'\nassert solution('''3 3\n1 0 0\n0 0 0\n0 0 0\n0 0 0''') == '18'\nassert solution('''9 8\n1 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0", "solution(\"\"\"\n1 1\n0 0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 1\n1 0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 1\n1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 2\n1 0 0\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 2\n1 1 0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 2\n1 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 2\n1 0 1\n0 0 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2 2\n1 1 1\n0 0 1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2 2\n1 1 1\n1 0 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 2\n1 1 1\n1 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 3\n1 0 1 0\n0 0 1 0\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n2 3\n1 1 1 0\n0 0 1 0\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n2 3\n1 1 1 0\n1 0 1 0\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2 3\n1 1", "solution(test_input_1) == test_output_1", "solution('''\n2 3\n1 0 0\n0 0 0\n0 0 0\n''') == '34'\n\nassert solution('''\n1 2\n1 0\n0 0\n''') == '2'\n\nassert solution('''\n2 3\n1 0 0\n0 1 0\n0 0 0\n''') == '12'\n\nassert solution('''\n3 2\n1 0\n0 0\n0 0\n''') == '46'\n\nassert solution('''\n3 4\n1 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '100'\n\n# get the output\nwith open('input', 'r') as f:\n    data = f.read()\nwith open('output', 'w') as f:\n    f.write(solution(data))", "solution('''\n0 0\n0\n''') == '0'\nassert solution('''\n0 0\n1\n''') == '0'\nassert solution('''\n0 1\n1 0\n''') == '1'\nassert solution('''\n0 1\n1 1\n''') == '1'\nassert solution('''\n0 1\n1 0\n''') == '1'\nassert solution('''\n1 0\n1 0\n''') == '0'\nassert solution('''\n0 1\n0 1\n''') == '0'\nassert solution('''\n0 1\n1 1\n1 1\n''') == '2'\nassert solution('''\n0 1\n1 1\n0 1\n''') == '1'\nassert solution('''\n0 1\n1 1\n1 0\n''') == '2'\nassert solution('''\n0 1\n1 1\n0 0\n''') == '1'\nassert solution('''\n0 2\n1 1 0\n1 1 0\n''') == '1'\nassert solution('''\n0 2\n1 1 0\n1 1 1\n''') == '2'\nassert solution('''\n0 2\n1 1 0\n0 1 1\n''') == '1'\nassert solution('''\n0 2\n1", "solution('''\n0 0\n1\n''') == '0'\nassert solution('''\n0 0\n0\n''') == '0'\nassert solution('''\n0 1\n0 0\n''') == '1'\nassert solution('''\n1 0\n0\n0\n''') == '1'\nassert solution('''\n2 3\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '16'\nassert solution('''\n2 2\n0 0\n0 0\n''') == '4'\nassert solution('''\n2 2\n1 0\n0 0\n''') == '1'\nassert solution('''\n2 2\n0 1\n0 0\n''') == '1'\nassert solution('''\n2 2\n0 0\n0 1\n''') == '1'\nassert solution('''\n2 2\n0 0\n1 0\n''') == '1'\nassert solution('''\n3 4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '36'\nassert solution('''\n1 2\n0 0 0\n''') == '1'\nassert solution('''\n2 2\n0 1 0\n0 0 0\n''') == '2'\nassert solution('''\n4", "solution(\"2 3\\n0 0 0\\n0 1 0\\n0 0 0\") == \"18\"\nassert solution(\"5 5\\n0 0 0 0 0\\n0 1 0 0 0\\n0 0 0 0 0\\n0 0 0 1 0\\n0 0 0 0 0\") == \"50\"\nassert solution(\"2 3\\n0 0 0\\n0 0 0\\n0 0 0\") == \"18\"\nassert solution(\"4 2\\n0 0\\n0 1\\n0 0\\n0 0\") == \"16\"\nassert solution(\"2 4\\n0 0 0 0\\n0 0 0 0\") == \"18\"\nassert solution(\"5 6\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\") == \"50\"\nassert solution(\"0 0\\n\") == \"0\"\nassert solution(\"1000 1000\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "'31' == solution('''\\\n4\n5\n1 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''')\n\nassert '1' == solution('''\\\n0\n0\n1\n''')\n\nassert '4' == solution('''\\\n1\n1\n0 1\n''')\n\nassert '16' == solution('''\\\n2\n2\n1 0\n0 0\n''')\n\nassert '16' == solution('''\\\n2\n2\n0 0\n0 1\n''')\n\nassert '16' == solution('''\\\n2\n2\n0 0\n1 0\n''')\n\nassert '16' == solution('''\\\n2\n2\n0 1\n0 0\n''')\n\nassert '64' == solution('''\\\n3\n3\n1 0 0\n0 0 0\n0 0 0\n''')\n\nassert '64' == solution('''\\\n3\n3\n0 0 0\n0 0 0\n0 1 0\n''')\n\nassert '64' == solution('''\\\n3\n3\n0 0 0\n0 0 0\n0 0 1\n''')\n\nassert '8' == solution('''\\\n1\n2\n1", "solution('''\n2 3\n1 0 0\n0 0 0\n0 0 0\n''') == '5'\n\nassert solution('''\n5 6\n1 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n''') == '36'\n\nassert solution('''\n1 2\n1 0\n0 0\n''') == '1'\n\nassert solution('''\n2 3\n1 0 0\n0 1 0\n0 0 0\n''') == '2'\n\nassert solution('''\n3 5\n1 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '8'\n\nassert solution('''\n4 3\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n''') == '8'\n\nassert solution('''\n4 3\n1 0 0\n0 0 0\n0 0 1\n0 0 0\n''') == '4'\n\nassert solution('''\n4 5\n1 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '20'\n\nassert", "solution('''\n1 2\n0 0 0\n0 1 0\n0 0 0\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n1 2\n0 0 0\n0 0 0\n0 0 0\n''') == '14'\n\n# check the correctness of solution\nassert solution('''\n1 2\n0 0 0\n0 0 0\n0 1 0\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n1 2\n0 0 0\n0 1 0\n0 1 0\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n1 2\n0 0 0\n0 1 0\n1 1 0\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1 2\n0 0 0\n1 1 0\n1 1 0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1 2\n1 1 0\n1 1 0\n1 1 0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1 2\n1 1 0\n1 1 0\n1 1 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1 2\n1 1 1\n", "solution('''\n3 3\n1 0 0\n0 0 0\n0 0 0\n''') == '0'\n\n#     1 0 0\n#     * * *\n#     * * *\n# 0 0 * * *\n\nassert solution('''\n3 3\n1 0 0\n0 0 0\n0 0 1\n''') == '6'\n\n#     1 0 0\n#     * * *\n#     * * *\n# 0 0 * * 1\n\nassert solution('''\n3 3\n1 0 0\n0 0 0\n0 0 0\n''') == '0'\n\n#     1 0 0\n#     * * *\n#     * * *\n# 0 0 * * *\n\nassert solution('''\n3 3\n0 0 0\n0 0 0\n0 0 0\n''') == '42'\n\n#     * * *\n#     * * *\n#     * * *\n# 0 0 * * *\n\nassert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '0'\n\n#     1 1 1\n#     1 1 1\n#     1 1 1\n# 1 1 1 1 1\n\nassert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '0", "solution(\n    '''\n    1 2\n    1 0 0\n    0 0 0\n    '''\n) == '2'\n\nassert solution(\n    '''\n    2 2\n    1 0 0\n    0 0 0\n    0 0 0\n    '''\n) == '12'\n\nassert solution(\n    '''\n    2 2\n    1 0 0\n    0 1 0\n    0 0 0\n    '''\n) == '10'\n\nassert solution(\n    '''\n    3 3\n    1 0 0 0\n    0 0 0 0\n    0 0 0 0\n    0 0 0 0\n    '''\n) == '28'\n\nassert solution(\n    '''\n    3 3\n    1 0 0 0\n    0 0 0 0\n    0 0 0 1\n    0 0 0 0\n    '''\n) == '26'\n\n# TODO: add some tests", "solution(\"\"\"1 1\n1 1\"\"\") == '5'\nassert solution(\"\"\"2 3\n1 1 1\n1 1 1\n1 1 1\"\"\") == '30'\nassert solution(\"\"\"1 2\n1 1\n1 1\"\"\") == '10'\nassert solution(\"\"\"6 0\n1 1 1 1 1 1\"\"\") == '30'\nassert solution(\"\"\"7 7\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\"\"\") == '210'\nassert solution(\"\"\"19 12\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1", "solution(\"\"\"3 3\n1 0 0\n0 0 0\n0 0 0\n0 1 0\n0 0 0\n0 0 1\"\"\") == \"36\"\nassert solution(\"\"\"4 4\n1 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 1 0 0\n0 0 0 0\n0 0 0 1\n0 0 0 0\"\"\") == \"64\"\nassert solution(\"\"\"6 7\n1 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 1 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 1\n0 0 0 0 0 0 0\"\"\") == \"300\"\nassert solution(\"\"\"0 0\n1\"\"\") == \"0\"\nassert solution(\"\"\"6 7\n1 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 1 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n", "solution(r'''\n2 3\n1 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 1\n''') == r'''\n14\n'''\nassert solution(r'''\n3 3\n1 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 1\n''') == r'''\n28\n'''\nassert solution(r'''\n2 3\n1 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n''') == r'''\n20\n'''\nassert solution(r'''\n1 1\n1\n''') == r'''\n0\n'''\nassert solution(r'''\n2 3\n1 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n''') == r'''\n40\n'''\nassert solution(r'''\n19 9\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0", "solution('''\n2 2\n1 0\n0 1\n0 0\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n1 1\n1\n0\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1 0\n1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n0 1\n1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 0 0\n0 1 0\n0 0 1\n0 0 0\n''') == '18'\n\n# check the correctness of solution\nassert solution('''\n3 2\n1 0\n0 1\n0 0\n1 0\n''') == '18'\n\n# check the correctness of solution\nassert solution('''\n3 2\n1 0\n0 1\n0 0\n0 1\n''') == '18'\n\n# check the correctness of solution\nassert solution('''\n3 2\n1 0\n0 1\n0 0\n0 0\n''') == '18'\n\n# check the correctness of solution\nassert solution('''\n0 1\n1\n0\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n0 2\n1 1\n", "solution(\"\") == \"\", \"Input example #1\"\nassert solution(\"\") == \"\", \"Input example #2\"\nassert solution(\"\") == \"\", \"Input example #3\"\nassert solution(\"\") == \"\", \"Input example #4\"\nassert solution(\"\") == \"\", \"Input example #5\"\nassert solution(\"\") == \"\", \"Input example #6\"\nassert solution(\"\") == \"\", \"Input example #7\"\nassert solution(\"\") == \"\", \"Input example #8\"\nassert solution(\"\") == \"\", \"Input example #9\"\nassert solution(\"\") == \"\", \"Input example #10\"\nassert solution(\"\") == \"\", \"Input example #11\"\nassert solution(\"\") == \"\", \"Input example #12\"\nassert solution(\"\") == \"\", \"Input example #13\"\nassert solution(\"\") == \"\", \"Input example #14\"\nassert solution(\"\") == \"\", \"Input example #15\"\nassert solution(\"\") == \"\", \"Input example #16\"\nassert solution(\"\") == \"\", \"Input example #17\"\nassert solution(\"\") == \"\", \"Input example #18\"\nassert solution(\"\") == \"\", \"Input example #19\"\nassert solution(\"\") == \"\", \"Input example #20\"\nassert solution(\"\") == \"\", \"Input example #21\"\nassert solution(\"\") == \"\",", "solution('''\n2 3\n1 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '''\n44\n'''\n\n# test for overtime\nassert solution('''\n1 1\n0\n0\n''') == '''\n2\n'''\n\n# my own tests\nassert solution('''\n0 1\n1 0\n''') == '''\n2\n'''\n\nassert solution('''\n1 0\n0 1\n''') == '''\n2\n'''\n\nassert solution('''\n1 1\n1 1\n''') == '''\n0\n'''\n\nassert solution('''\n1 1\n1 0\n''') == '''\n4\n'''\n\nassert solution('''\n1 1\n0 1\n''') == '''\n4\n'''\n\nassert solution('''\n1 1\n0 0\n''') == '''\n4\n'''\n\nassert solution('''\n1 1\n1 0\n0 1\n''') == '''\n20\n'''\n\nassert solution('''\n2 2\n1 0 0\n0 0 0\n0 0 0\n''') == '''\n20\n'''\n\nassert solution('''\n2 2\n1 0 0\n0 1 0\n0 0 0\n''') == '''", "solution(\"4 4\\n0 0 0 0\\n0 1 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\") == \"8\"\nassert solution(\"4 4\\n0 0 0 0\\n0 1 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 1\") == \"21\"\nassert solution(\"4 4\\n0 0 0 0\\n0 1 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\") == \"12\"\nassert solution(\"2 3\\n0 0 0\\n0 1 0\\n0 0 0\\n0 0 0\") == \"9\"\nassert solution(\"6 6\\n0 0 0 0 0 0\\n0 1 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\") == \"36\"\nassert solution(\"4 6\\n0 0 0 0 0 0\\n0 1 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\\n0 0 0 0 0 0\") == \"52\"\nassert solution(\"1 0\\n0\\n0\") == \"1", "solution('''\n4 6\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n''') == '\\n18\\n'\n\nassert solution('''\n4 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '\\n9\\n'\n\nassert solution('''\n5 4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '\\n9\\n'\n\nassert solution('''\n10 9\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '\\n81\\n'\n\nassert solution('''\n1 1\n0\n0\n''') == '", "solution(input1) == 'True'\nassert solution(input2) == 'False'\nassert solution(input3) == 'True'\nassert solution(input4) == 'False'\nassert solution(input5) == 'True'\nassert solution(input6) == 'False'\nassert solution(input7) == 'True'\nassert solution(input8) == 'False'\nassert solution(input9) == 'True'\nassert solution(input10) == 'False'\n\n# check the performance of solution\nassert solution(large_input) == '0.0'", "solution('''\\\n2 2\n1 0\n0 1\n0 0''') == '5'\n\nassert solution('''\\\n1 1\n1\n0''') == '1'\n\nassert solution('''\\\n6 7\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0''') == '84'\n\nassert solution('''\\\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0''') == '900'\n\nassert solution('''\\\n0 0\n0''') == '0'\n\nassert solution('''\\\n1 0\n1''') == '0'\n\n# stress test with a set of randomly generated test cases\n# from a set", "solution(\"\"\"3 2\n1 1 1 1\n1 0 1 0\n1 1 1 1\n\"\"\") == \"21\"\n\nassert solution(\"\"\"2 3\n1 1 1\n1 0 1\n1 1 1\n\"\"\") == \"21\"\n\nassert solution(\"\"\"5 4\n1 1 1 1\n1 0 1 0\n1 1 1 1\n1 0 1 0\n1 1 1 1\n\"\"\") == \"105\"\n\nassert solution(\"\"\"10 6\n1 1 1 1 1 1\n1 0 1 0 1 0\n1 1 1 1 1 1\n1 0 1 0 1 0\n1 1 1 1 1 1\n1 0 1 0 1 0\n1 1 1 1 1 1\n1 0 1 0 1 0\n1 1 1 1 1 1\n1 0 1 0 1 0\n\"\"\") == \"1665\"", "solution(\"\"\"\n4 6\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n\"\"\") == '60'\n\nassert solution(\"\"\"\n2 1\n0 0\n0 0\n0\n\"\"\") == '3'\n\nassert solution(\"\"\"\n2 2\n0 0\n0 0\n0 0\n0 0\n\"\"\") == '6'\n\nassert solution(\"\"\"\n1 1\n0\n0\n0\n\"\"\") == '1'\n\nassert solution(\"\"\"\n2 2\n0 0\n0 0\n0 0\n1 0\n\"\"\") == '8'\n\nassert solution(\"\"\"\n3 2\n0 0\n0 0\n0 0\n0 0\n0 1\n\"\"\") == '15'\n\nassert solution(\"\"\"\n2 3\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == '20'\n\nassert solution(\"\"\"\n1 4\n0 0 0 0\n0 0 0 0\n\"\"\") == '4'\n\nassert solution(\"\"\"\n5 6\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n\"\"\") == '60'\n\nassert", "solution(solution.__doc__) == '18'\n\n# check the performance of solution\ndef check_performance():\n    from random import randint\n    from time import time\n\n    n = 2000\n    m = 1999\n    a = [[randint(0, 1) for j in range(m + 1)] for i in range(n + 1)]\n    start = time()\n    for i in range(n + 1):\n        for j in range(m + 1):\n            pass\n    solution(f'{n} {m}\\n' + '\\n'.join(' '.join(str(x) for x in row) for row in a))\n    assert time() - start < 5", "solution(stdin='''\n4 4\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '''\n0\n'''\n\nassert solution(stdin='''\n4 4\n0 0 0 0 0\n0 0 0 0 0\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '''\n16\n'''\n\nassert solution(stdin='''\n4 4\n0 0 0 0 0\n0 0 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 0\n''') == '''\n20\n'''\n\nassert solution(stdin='''\n4 4\n0 0 0 0 0\n0 0 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n''') == '''\n24\n'''\n\nassert solution(stdin='''\n4 4\n0 0 0 0 0\n0 0 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 0\n''') == '''\n20\n'''\n\nassert solution(stdin='''\n4 4\n0 0 0 0 0\n0 0 0 0 0\n0 0 1 0 0\n0", "solution(r'''\n5 3\n1 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n''') == r'''\n1\n4\n4\n4\n4\n4\n6\n6\n6\n6\n6\n8\n8\n8\n8\n8\n9\n9\n9\n9\n9\n10\n10\n10\n10\n10\n11\n11\n11\n11\n11\n12\n12\n12\n12\n12\n13\n13\n13\n13\n13\n14\n14\n14\n14\n14\n15\n15\n15\n15\n15\n16\n16\n16\n16\n16\n17\n17\n17\n17\n17\n18\n18\n18\n18\n18\n19\n19\n19\n19\n19\n20\n20\n20\n20\n20\n21\n21\n21\n21\n21\n22\n22\n22\n22\n22\n23\n23\n23\n23\n23\n24\n24\n24\n24\n24\n25\n25\n25\n25\n25\n26\n26\n26\n26\n26\n27\n27\n27\n27\n27\n28\n28\n28\n28\n28\n29\n29\n29\n29\n29\n30\n30\n30\n30\n30\n31\n31\n31\n31\n31\n32\n"], "finish_reason": ["length", "length", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "stop", "length", "length"], "sum_logprob": [-26.875319233499983, -71.503918267843, -54.815517064926404, -104.69129721114999, -83.9386895936349, -44.348561781539985, -58.95722232045304, -40.791573342259994, -73.31591325326804, -60.69994667308, -52.00178899311, -91.04228832193405, -8.237038466000001, -72.09982930078995, -72.54386465410596, -25.872468649500004, -86.70671655668305, -64.55876425868298, -96.57393778790795, -71.52530910160249, -17.5604621956, -114.69369103212199, -15.0309537994, -76.19485477467, -45.24400897513495, -11.227356273300002, -81.04346879533, -61.769442520971005, -69.169399122489, -74.37833657903302, -71.05009073288095, -78.48414127484995, -52.90041237308004, -71.162750284585, -65.199910774376, -63.673006975959986, -61.21435682988, -70.82798387936094, -69.52628228755798, -22.504730740588986, -95.07303054450203, -79.308514584736, -57.257963941994014, -42.425488475479995, -94.79805554039005, -59.09529370615001, -88.2585395305601, -70.7408668704, -46.35339207591805, -46.24077456856895], "mean_logprob": [-0.089584397445, -0.23834639422614334, -0.18271839021642133, -0.5157206759169951, -0.2797956319787833, -0.1478285392718, -0.24362488562170662, -0.41203609436626265, -0.24438637751089334, -0.4529846766647761, -0.17333929664369999, -0.3907394348580858, -0.6864198721666667, -0.24033276433596668, -0.24181288218035332, -0.6016853174302326, -0.2890223885222767, -0.21519588086227667, -0.32191312595969335, -0.23841769700534166, -0.4621174262, -0.38879217299024404, -1.2525794832833332, -0.2539828492489, -0.15081336325045, -0.74849041822, -0.43571757416844087, -0.20589814173657, -0.23056466374163, -0.24792778859677667, -0.23683363577627, -0.2616138042495, -0.17633470791026667, -0.23720916761528332, -0.3104757655922667, -0.21224335658653334, -0.2040478560996, -0.23609327959787, -0.23175427429186, -0.07501576913529667, -0.3169101018150067, -0.26436171528245334, -0.19085987980664668, -0.3238586906525191, -0.3159935184679667, -0.32649333539309394, -0.29419513176853335, -0.44491111239245285, -0.15451130691972667, -0.15413591522856332]}
{"prompt": "'''\nThe new generation external memory contains an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. \n  2. Then you replace the segment a[l \u2026 r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\n\n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n2\n7\n1 3 2 8 5 4 9\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n4\n2 6 1\n4 7 1\n5 6 1\n3 7 1\n0\n\"\"\"", "solution(\"\"\"\n4\n4\n1 3 2 8\n4\n1 3 2 2\n4\n4 3 2 1\n4\n4 2 3 1\n\"\"\") == \"\"\"\n0\n2 2 1\n0\n2 3 1\n3\n1 2 1\n1 3 1\n1 4 1\n\"\"\"\n\nprint(\"[+] All tests done.\")", "solution('''\n2\n2\n1 3\n4\n4 2 3 1\n''') == '''\n1\n1 2 1\n0\n'''\n\n# check performance of solution\nif __name__ == '__main__':\n    from random import randint\n    from timeit import timeit\n    from utils import random_array\n\n    def generate_input(t=1):\n        for i in range(t):\n            n = randint(2, 50)\n            yield f'{n}\\n' + ' '.join(map(str, random_array(n)))\n\n    generate_input(1000)", "solution(r'''\n2\n4\n4 3 2 1\n4\n1 2 3 4\n''') == r'''\n0\n\n4\n1 1 1\n1 2 1\n2 2 1\n3 4 1\n'''\n\n# check whether the solution is fast enough\nimport timeit\nimport random\n\nn = 1000\na = [random.randint(-1000000000, 1000000000) for _ in range(n)]\n\nsolution_setup = '''\nimport random\nfrom __main__ import solution\n\nn = {n}\na = {a}\n'''.format(n=n, a=a)\n\nassert timeit.timeit(\n    stmt=r'''solution(n, a)''',\n    setup=solution_setup,\n    number=10\n) < 1", "solution(\"\") == \"\"\n\n# input the data\nprint(solution(input()))", "solution('''3\n3\n1 3 2\n4\n1 2 3 4\n5\n2 3 4 5 6''') == '''2\n1 3 1\n1 2 1\n0'''\n# run the solution from the terminal\nwith open('in.txt', 'r') as f:\n    print(solution(f.read()))", "solution(sample_input) == sample_output", "solution(\"\") == \"\", \"no input case\"\nassert solution(\"\") == \"\", \"example 1 case\"\nassert solution(\"\") == \"\", \"example 2 case\"\n\n# get problem input\nimport urllib.request\nresponse = urllib.request.urlopen(\"https://codeforces.com/problemset/problem/377/C/input\")\nraw_input = response.read().decode('utf-8')\n\n# run and print output of solution function\nprint(solution(raw_input))", "solution(INPUT_SAMPLE1) == OUTPUT_SAMPLE1\n# more tests\n\n# performance check\nimport cProfile\ncProfile.run('solution(INPUT_SAMPLE1)')", "solution(case1) == '''3\n3 2 4 1\n1 3 2\n'''\nassert solution(case2) == '''4\n4 1 3 5 2\n2 3 1\n1 3 2\n'''\nassert solution(case3) == '''0\n'''\nassert solution(case4) == '''1\n1 5 2\n'''\nassert solution(case5) == '''2\n2 1 3\n2 3 2\n'''\nassert solution(case6) == '''1\n1 4 2\n'''\nassert solution(case7) == '''2\n2 4 1\n2 3 1\n'''\nassert solution(case8) == '''3\n3 4 1\n3 1 2\n3 2 1\n'''\nassert solution(case9) == '''3\n3 1 4\n3 2 1\n3 4 1\n'''\nassert solution(case10) == '''2\n2 1 3\n2 3 2\n'''\nassert solution(case11) == '''1\n1 2 1\n'''\nassert solution(case12) == '''0\n'''\nassert solution(case13) == '''1\n1 2 1\n'''\nassert solution(case14) == '''3\n3 4 1\n3 1 2\n3 2 1\n'''\nassert solution(case15)", "solution(problem) == answer", "solution(test1) == test1_solution\n\n# get the input\nwith open('inputs/external-memory.txt') as f:\n    stdin = f.read()\n\n# run the solution and print the result\nprint(solution(stdin))", "solution(input_str) == answer", "solution(\"1\\n4\\n6 7 5 5\\n\") == '3\\n3 4 1\\n3 4 1\\n2 4 1\\n'\nassert solution(\"1\\n4\\n7 6 5 5\\n\") == '2\\n3 4 1\\n3 4 1\\n'\nassert solution(\"1\\n5\\n7 7 7 7 7\\n\") == '0\\n'\nassert solution(\"1\\n5\\n7 6 7 7 7\\n\") == '2\\n2 3 1\\n2 4 1\\n'\nassert solution(\"1\\n5\\n7 6 5 5 5\\n\") == '1\\n2 4 1\\n'\nassert solution(\"1\\n5\\n7 7 7 6 7\\n\") == '1\\n2 4 1\\n'\nassert solution(\"1\\n5\\n1 2 3 4 5\\n\") == '0\\n'\nassert solution(\"1\\n5\\n5 5 5 5 7\\n\") == '2\\n2 3 1\\n3 4 1\\n'\nassert solution(\"1\\n5\\n5 7 7 7 7\\n\") == '1\\n2 4 1\\n'\nassert solution(\"1\\n5\\n6 7 5 5 7\\n\") == '3\\n3 4 1\\n", "solution('''\n4\n4\n1 3 2 8\n2\n2 1\n5\n1 1 1 1 1\n5\n1 2 3 4 5\n''') == '''\n1\n2 4 1\n0\n\n3\n1 2 1\n2 3 1\n1 4 1\n2\n1 2 1\n2 3 1\n'''", "solution(\"1\\n3\\n1 2 3\") == \"0\"\nassert solution(\"1\\n5\\n8 5 7 2 4\") == \"2\\n1 4 1\\n4 5 1\"\nassert solution(\"1\\n5\\n1 2 3 4 5\") == \"0\"\nassert solution(\"1\\n5\\n5 4 3 2 1\") == \"2\\n2 5 1\\n1 4 1\"\nassert solution(\"1\\n5\\n1 2 3 4 1\") == \"1\\n1 5 1\"\nassert solution(\"1\\n5\\n5 1 2 3 4\") == \"2\\n1 4 1\\n2 5 1\"\nassert solution(\"1\\n5\\n4 1 2 3 4\") == \"1\\n1 4 1\"\nassert solution(\"1\\n5\\n3 2 1 4 3\") == \"2\\n2 4 1\\n1 3 1\"\nassert solution(\"1\\n5\\n1 2 3 4 4\") == \"1\\n1 5 1\"\nassert solution(\"1\\n5\\n1 2 3 3 4\") == \"1\\n1 5 1\"\nassert solution(\"1\\n5\\n1 1 1 1 1\") == \"0\"\nassert solution(\"1\\n5\\n1 1 1 1 2\") == \"1\\n1 5 1", "solution('''\n2\n6\n5 3 1 3 2 5\n6\n1 2 3 4 5 6\n''') == '''\n2\n2 4 2\n4 6 1\n0\n'''", "solution(r'''\n2\n5\n6 8 2 5 8\n5\n6 2 8 5 8\n''') == r'''\n1\n1 5 2\n0\n'''\n\n# stress testing to check the performance of solution\nassert solution(r'''\n2\n5\n6 8 2 5 8\n5\n6 2 8 5 8\n''') == r'''\n1\n1 5 2\n0\n'''\n\n# stress testing to check the performance of solution\nassert solution(r'''\n2\n5\n6 8 2 5 8\n5\n6 2 8 5 8\n''') == r'''\n1\n1 5 2\n0\n'''\n\n# stress testing to check the performance of solution\nassert solution(r'''\n2\n5\n6 8 2 5 8\n5\n6 2 8 5 8\n''') == r'''\n1\n1 5 2\n0\n'''\n\n# stress testing to check the performance of solution\nassert solution(r'''\n2\n5\n6 8 2 5 8\n5\n6 2 8 5 8\n''') == r'''\n1\n1 5 2\n0\n'''\n\n# stress testing to check the performance of solution\nassert solution(r'''\n2\n5\n6 8 2 5 8\n5\n6 2 8 5 8\n''') == r'''", "solution(r'''\n4\n4\n4 2 1 3\n4\n4 3 2 1\n4\n1 2 4 3\n4\n1 4 2 3\n''') == r'''\n0\n0\n3\n1 2 1\n3\n3 1 1\n2\n2 3 1\n3\n3 2 1\n'''", "solution('''\n2\n6\n1 3 2 8 5 4\n6\n1 2 3 4 5 6\n''') == '''\n3\n3 5 2\n3 5 1\n3 5 1\n0\n'''", "(str(solution(stdin)) == stdout)\n \n# check the time limit\nassert (timeit.timeit(lambda: solution(stdin), number=1) < 1)", "solution(TEST_INPUT) == TEST_OUTPUT\n\n# get user input\nN = int(input())\nuser_input = ''\nfor i in range(N):\n    user_input += input() + '\\n'\n\n# print result\nprint(solution(user_input))", "solution(\"\") == \"\", \"Test 1 failed\"\nassert solution(\"\") == \"\", \"Test 2 failed\"\nassert solution(\"\") == \"\", \"Test 3 failed\"\nassert solution(\"\") == \"\", \"Test 4 failed\"\nassert solution(\"\") == \"\", \"Test 5 failed\"\nassert solution(\"\") == \"\", \"Test 6 failed\"\nassert solution(\"\") == \"\", \"Test 7 failed\"\nassert solution(\"\") == \"\", \"Test 8 failed\"\nassert solution(\"\") == \"\", \"Test 9 failed\"\nassert solution(\"\") == \"\", \"Test 10 failed\"\nassert solution(\"\") == \"\", \"Test 11 failed\"\nassert solution(\"\") == \"\", \"Test 12 failed\"\nassert solution(\"\") == \"\", \"Test 13 failed\"\nassert solution(\"\") == \"\", \"Test 14 failed\"\nassert solution(\"\") == \"\", \"Test 15 failed\"\nassert solution(\"\") == \"\", \"Test 16 failed\"\nassert solution(\"\") == \"\", \"Test 17 failed\"\nassert solution(\"\") == \"\", \"Test 18 failed\"\nassert solution(\"\") == \"\", \"Test 19 failed\"\nassert solution(\"\") == \"\", \"Test 20 failed\"\nassert solution(\"\") == \"\", \"Test 21 failed\"\nassert solution(\"\") == \"\", \"Test 22 failed\"\nassert solution(\"\") == \"\", \"Test 23 failed\"\nassert solution", "'TODO' == solution(r'''\n1\n4\n1 2 3 4\n''')\n\n# test case is provided by CodeSignal system\n_test_ = r'''\n8\n6\n-7 6 -5 -6 0 2\n6\n8 5 -8 3 -2 9\n9\n-2 -6 3 -8 4 -7 -6 -3 5\n6\n7 -3 4 -8 8 -7\n9\n-9 -3 -3 9 -3 -3 0 -6 9\n3\n-2 -2 -2\n6\n-7 6 -5 -6 0 2\n6\n8 5 -8 3 -2 9\n9\n-2 -6 3 -8 4 -7 -6 -3 5\n6\n7 -3 4 -8 8 -7\n9\n-9 -3 -3 9 -3 -3 0 -6 9\n3\n-2 -2 -2\n6\n-7 6 -5 -6 0 2\n6\n8 5 -8 3 -2 9\n9\n-2 -6 3 -8 4 -7 -6 -3 5\n6\n7 -3 4 -8 8 -7\n9\n-9 -3 -3 9 -3 -3 0 -6 9\n3\n-2 -2 -2\n6\n-7 6 -5 -6 0 2\n6\n", "True == True", "solution(r'''\n2\n4\n8 3 2 5\n5\n1 3 5 2 4\n''') == r'''\n2\n2 4 2\n1 4 1\n0\n'''", "solution(STDIN) == \"\", \"TEST 1 FAILED\"", "solution('''\n2\n2\n1 2\n5\n5 2 3 4 1\n''') == '''\n1\n1 2 1\n0\n'''\nassert solution('''\n3\n3\n3 1 2\n3\n2 1 3\n3\n1 3 2\n''') == '''\n2\n2 3 1\n1 3 1\n2\n1 2 1\n1 3 1\n'''\nassert solution('''\n4\n4\n1 2 3 4\n4\n4 3 2 1\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n''') == '''\n0\n0\n2\n2 4 1\n3 4 1\n3\n1 2 1\n3 4 1\n1\n'''\nassert solution('''\n3\n6\n1 6 2 3 5 4\n7\n1 7 2 3 6 5 4\n8\n1 8 2 3 7 6 5 4\n''') == '''\n2\n1 3 1\n4 6 1\n3\n1 4 1\n5 7 1\n4\n1 5 1\n6 8 1\n'''\nassert solution('''\n1\n10\n9 8 7 6 5 4 3 2 1 10\n''') == '''\n3\n1 3 1\n4 6 1\n7 10 1\n'''\nassert solution('''\n2\n7\n1 7 2 3", "solution(\"\"\"\n5\n3\n1 2 3\n3\n3 2 1\n3\n3 1 2\n3\n2 3 1\n3\n2 1 3\n\"\"\") == \"\"\"\n0\n1 2 1\n2 3 1\n2 3 1\n0\n\"\"\", \"Sample input #1\"\n\nassert solution(\"\"\"\n1\n3\n1 2 3\n\"\"\") == \"\"\"\n0\n\"\"\", \"Sample input #2\"\n\nassert solution(\"\"\"\n1\n3\n3 2 1\n\"\"\") == \"\"\"\n1\n1 3 2\n\"\"\", \"Sample input #3\"\n\n# TODO add test for your case\n\n# stress testing\nimport random\nfrom string import ascii_letters\nfrom random import randint\n\nwhile True:\n    N = randint(1, 10)\n    v = [random.choice(ascii_letters) for i in range(N)]\n    print(\"%d\\n%s\" % (N, ' '.join(v)))\n\n    ret = solution(\"%d\\n%s\" % (N, ' '.join(v)))\n    print(ret)\n\n    if input() == 'q':\n        break", "solution('''\n2\n3\n3 1 2\n3\n1 2 3\n''') == '''\n1\n1 3 1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 2 3\n3\n1 3 2\n5\n1 5 2 3 4\n''') == '''\n0\n0\n2\n2 4 1\n2 3 1\n'''", "solution('''\n\n''') == '''\n\n'''", "solution('''\n2\n4\n1 3 2 8\n5\n5 4 3 2 1\n''') == '''\n2\n2 4 1\n1 4 3\n'''", "solution('''4\n4\n4 3 2 1\n4\n4 3 2 4\n4\n1 2 4 3\n4\n2 4 3 1\n''') == '''4\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n4\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n4\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n4\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n'''", "solution(\"\"\"\n2\n5\n2 3 1 4 5\n5\n1 4 1 3 5\n\"\"\") == \"\"\"\n1\n2 5 1\n2\n2 4 1\n3 5 1\n\"\"\"\n# print(solution(\"\"\"\n# 2\n# 5\n# 2 3 1 4 5\n# 5\n# 1 4 1 3 5\n# \"\"\"))", "solution(stdin) == stdout", "solution(\"\"\"\n1\n5\n1 3 2 8 5\n\"\"\") == \"\"\"\n3\n2 4 2\n3 4 1\n2 4 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5\n5 3 8 2 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4\n1 2 3 2\n4\n2 3 1 2\n\"\"\") == \"\"\"\n1\n1 4 1\n1\n1 4 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n0\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n0\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n4\n1 2 2 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n4\n1 1 1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution", "solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n0\n'''\n\nassert solution('''\n1\n8\n1 3 2 8 5 6 4 7\n''') == '''\n3\n2 4 2\n5 6 2\n7 8 2\n'''\n\nassert solution('''\n1\n4\n2 2 2 2\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n1 2 4 3 5\n''') == '''\n2\n2 3 1\n4 5 1\n'''\n\nassert solution('''\n2\n10\n-10 -8 -6 -4 -2 -10 -8 -6 -4 -2\n10\n-10 -8 -6 -4 -2 -10 -8 -6 -4 -2\n''') == '''\n2\n3 5 2\n7 9 2\n1\n3 5 2\n'''", "solution('''\n2\n8\n1 3 2 8 5 4 6 7\n8\n1 8 5 4 2 3 6 7\n''') == '''\n2\n2 4 2\n5 8 1\n1\n2 3 2\n'''", "solution(\"\") == \"\", \"Empty input\"\nassert solution(\"1\\n5\\n8 5 2 6 7\") == \"3\\n3 4 1\\n2 3 2\\n1 2 2\", \"1st simple test\"\nassert solution(\"1\\n5\\n1 2 3 4 5\") == \"0\", \"2nd simple test\"\nassert solution(\"1\\n5\\n1 3 2 4 5\") == \"2\\n2 3 1\\n1 2 1\", \"3rd simple test\"\nassert solution(\"1\\n5\\n1 5 2 4 3\") == \"2\\n1 2 3\\n2 3 1\", \"4th simple test\"\nassert solution(\"1\\n5\\n1 2 3 4 5\") == \"0\", \"5th simple test\"\nassert solution(\"1\\n5\\n1 2 1 1 1\") == \"0\", \"6th simple test\"\nassert solution(\"1\\n5\\n2 1 3 4 5\") == \"1\\n1 2 1\", \"7th simple test\"\nassert solution(\"1\\n5\\n5 4 3 2 1\") == \"3\\n3 4 1\\n2 3 2\\n1 2 2\", \"8th simple test\"\nassert solution(\"1\\n5\\n2 3 2 3 2\") == \"0\", \"9th simple test\"\n", "solution(\"\"\"\n3\n3\n3 1 2\n3\n1 2 3\n4\n1 3 2 4\n\"\"\") == \"\"\"\n2\n2 3 1\n1 3 1\n3\n1 2 1\n1 3 1\n1 4 1\n\"\"\"", "solution('''\n3\n3\n3 2 1\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n''') == '''\n2\n2 3 1\n1 2 1\n0\n'''\nprint('OK')\n \n# start testing\nt0 = time.time()\ntests_num = int(stdin.readline())\nstdin = stdin.read()\n\nstdout = ''\nfor i in range(tests_num):\n    print('Testing %d/%d' % (i + 1, tests_num))\n    stdout += 'Case #%d:\\n' % (i + 1)\n    stdout += solution(stdin)\n    stdout += '\\n'\n\nprint('%.3f s' % (time.time() - t0))\n\n# generate the output\nwith open('output.txt', 'w') as f:\n    f.write(stdout)", "solution(\"\"\"3\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\n\"\"\") == \"\"\"0\n2\n2 3 1\n2\n1 3 1\n1\n1 2 1\n\"\"\"\n\n# run solution\nprint(solution(sys.stdin.read()))", "solution(\"1\\n4\\n4 1 3 2\") == '2\\n1 3 2\\n2 4 1'\nassert solution(\"1\\n5\\n1 2 4 8 16\") == '0'\nassert solution(\"1\\n1\\n1\") == '0'\nassert solution(\"2\\n5\\n1 3 2 4 5\\n5\\n1 2 3 4 5\") == '3\\n1 4 2\\n1 5 1\\n3 5 1\\n0'\nassert solution(\"1\\n8\\n4 5 4 2 1 4 3 2\") == '4\\n1 2 1\\n2 3 1\\n2 5 1\\n5 8 2'\nassert solution(\"1\\n9\\n-1 -1 -1 -1 -1 1 1 1 1\") == '3\\n1 3 1\\n1 4 1\\n5 9 1'\nassert solution(\"3\\n7\\n3 5 4 1 2 6 7\\n6\\n2 3 4 5 1 6\\n9\\n5 7 6 5 1 4 3 8 9\") == '2\\n1 3 1\\n1 5 1\\n1\\n1 2 1\\n0\\n1\\n1 2 1'\nassert solution(\"1\\n4\\n4 1 3 2\") == '2\\n1 3 2\\n2", "solution('''2\n3\n3 2 1\n3\n1 2 3''') == '''1\n1 3 1\n0'''\nassert solution('''1\n4\n1 2 3 4''') == '''0'''\nassert solution('''3\n4\n1 2 3 4\n4\n4 3 2 1\n4\n2 3 1 4''') == '''0\n4\n2 3 1\n1 4 2\n1 4 1\n1 4 1\n1\n1 4 1'''\n\n# check the performance of solution\nassert solution('''10\n4\n1 2 3 4\n4\n4 3 2 1\n4\n2 3 1 4\n4\n2 1 4 3\n4\n1 4 3 2\n4\n3 2 4 1\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n2 3 4 5 1\n5\n2 3 1 5 4''') == '''0\n4\n2 3 1\n1 4 2\n1 4 1\n1 4 1\n1\n1 4 1\n1\n1 5 1\n1\n1 4 1\n1\n1 5 1\n1\n1 5 1\n0\n4\n2 5 1\n1 4 2\n1 4 1\n1 4 1\n1\n1 4 1\n1\n1 5 1\n1\n1 4 1\n1\n1 5 1", "solution('''\n3\n3\n2 3 1\n4\n1 5 2 3\n3\n3 3 3\n''') == '''\n1\n1 3 1\n1\n1 4 2\n0\n'''", "solution('''\n1\n6\n1 3 2 8 5 4\n''') == '''\n2\n2 3 1\n2 4 1\n'''\nassert solution('''\n1\n6\n1 4 8 2 3 5\n''') == '''\n0\n'''\nassert solution('''\n1\n6\n3 5 4 2 8 1\n''') == '''\n3\n4 5 1\n4 6 1\n2 6 1\n'''\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n0\n'''\nassert solution('''\n1\n6\n6 5 4 3 2 1\n''') == '''\n1\n1 6 1\n'''\nassert solution('''\n2\n4\n4 3 2 1\n4\n1 2 3 4\n''') == '''\n2\n1 2 1\n1 3 1\n1\n1 4 1\n'''\nassert solution('''\n2\n5\n1 4 2 3 5\n5\n5 4 3 2 1\n''') == '''\n2\n2 3 1\n2 4 1\n1\n1 5 1\n'''\nassert solution('''\n2\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n''') == '''\n0\n1\n1 5 1\n'''\n", "(solution(stdin) == stdout)", "solution('''1\n5\n2 3 1 4 5''') == '''3\n1 3 2\n2 3 1\n3 5 2'''\nassert solution('''1\n1\n-1''') == '''0'''\nassert solution('''1\n6\n-2 3 -2 3 -2 3''') == '''1\n1 4 3'''\nassert solution('''1\n6\n-2 3 -2 3 -2 2''') == '''1\n1 5 3'''\nassert solution('''1\n2\n2 2''') == '''0'''\nassert solution('''1\n3\n1 2 3''') == '''0'''\nassert solution('''1\n3\n3 2 1''') == '''2\n1 2 1\n2 3 1'''\nassert solution('''1\n4\n1 2 1 2''') == '''0'''\nassert solution('''1\n5\n1 2 1 2 1''') == '''1\n1 5 1'''\nassert solution('''1\n6\n1 2 1 2 1 2''') == '''1\n1 6 1'''\nassert solution('''1\n6\n1 2 3 1 2 3''') == '''2\n2 3 1\n5 6 1'''\nassert solution('''", "solution(\"\"\"\n2\n7\n1 7 5 3 2 4 6\n7\n1 2 4 5 8 7 9\n\"\"\") == \"\"\"\n3\n3 5 1\n2 4 1\n2 5 1\n1\n3 4 1\n\"\"\"", "solution(\"\"\"\n2\n6\n2 3 3 1 4 3\n2\n1 3\n\"\"\") == \"\"\"\n2\n3 6 1\n3 5 1\n3\n3 2 1\n3 2 1\n\"\"\", \"Example #1\"\n\nassert solution(\"\"\"\n1\n2\n2 2\n\"\"\") == \"\"\"\n0\n\"\"\", \"Example #2\"\n\n# test for stdin/stdout\nif __name__ == '__main__':\n    from unittest.mock import patch\n\n    with patch('builtins.input', lambda: stdin), patch('sys.stdout', new=StringIO()) as stdout:\n        solution()\n    assert stdout.getvalue() == solution(stdin)"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "stop", "stop"], "sum_logprob": [-35.26085906246, -54.993522842530005, -85.09162081323005, -85.439849293824, -18.40906877647, -53.427471293880004, -6.720841892699999, -65.94931735012122, -37.144372961740004, -121.7191509267595, -9.717476035, -36.42009555687399, -13.67639318, -112.26502792812106, -42.58323280629999, -102.05421438978604, -29.964177812199996, -59.67917973129805, -53.20713651050001, -25.627418799399997, -30.569622601120006, -30.635398273314017, -16.198481285689997, -197.69802568151403, -5.92442094, -27.9165223115, -23.2153617555, -124.1811390924851, -137.32840356533802, -43.56665860303002, -7.5527674593, -21.448544875000003, -47.808721424290006, -42.00076784072999, -5.391245217, -81.89121581004298, -90.78432425550803, -39.0089624822, -110.82257594694893, -28.51588496860001, -117.925577589159, -39.319294419849996, -191.14033475803305, -106.29928662091001, -31.62522559464999, -101.65606451250973, -8.0738880796, -113.41231905144004, -55.09939154400003, -108.16829176018798], "mean_logprob": [-0.6913893933815687, -0.7050451646478205, -0.5992367662903522, -0.45689758980654543, -0.8766223226890476, -0.6762971049858229, -0.610985626609091, -0.5495776445843433, -0.7903058076965958, -0.40573050308919834, -1.388210862142857, -0.5874208960786129, -1.5195992422222222, -0.37421675976040336, -0.5530289974844156, -0.34018071463262, -0.6513951698304348, -0.19893059910432667, -0.71901535825, -0.512548375988, -0.6947641500254546, -0.43764854676162857, -0.05399493761896667, -0.65899341893838, -1.9748069799999999, -0.6203671624777778, -1.3656095150294119, -0.41393713030828333, -0.5221612302864562, -0.4585964063476842, -0.47204796620625, -0.5231352408536585, -0.4193747493358772, -0.5250095980091251, -0.5990272463333334, -0.27297071936681, -0.4262174847676432, -0.7223881941148148, -0.36940858648983, -0.5092122315821429, -0.5510541008839206, -0.5782249179389706, -0.6371344491934433, -0.35433095540303333, -0.6454127672377551, -0.33885354837503234, -0.7339898254181818, -0.3780410635048, -1.0396111612075472, -0.6636091519029939]}
{"prompt": "'''\nKawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3 3\n5 4\n3 5\n3 2\n1 1\n2 1\n1 2\n''') == '''\n0\n1\n1\n'''\n\n# run\nip = input()\nstdin = ip.split('\\n')\nprint(solution(stdin))", "solution('''\n2 3\n1 2\n3 1\n1 1\n2 1\n1 2\n''') == '''\n0\n1\n0\n'''\n\n# submit on hackerrank\n# input = sys.stdin.read()\n# print(solution(input))", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\n\n# post the answer\nanswer(solution(stdin))", "solution('''\n3 5\n1 2\n1 2\n1 2\n1 1\n1 2\n2 1\n1 3\n2 2\n2 3\n''') == '''\n0\n1\n1\n2\n0\n'''\n\nassert solution('''\n3 5\n1 2\n1 2\n1 2\n1 1\n1 2\n2 1\n1 3\n2 2\n2 3\n''') == '''\n0\n1\n1\n2\n0\n'''\n\nassert solution('''\n1 1\n1 2\n1 1\n''') == '''\n0\n1\n0\n'''\n\nassert solution('''\n1 2\n1 2\n1 1\n2 1\n''') == '''\n0\n1\n0\n'''\n\nassert solution('''\n1 1\n1 2\n1 1\n2 1\n''') == '''\n0\n1\n0\n'''\n\nassert solution('''\n1 2\n1 2\n1 1\n2 1\n''') == '''\n0\n1\n0\n'''\n\nassert solution('''\n2 5\n1 2\n1 2\n1 1\n2 1\n1 2\n2 1\n1 2\n2 2\n2 1\n''') == '''\n0\n1\n0\n0\n1\n'''\n\n", "solution('''\n2 5\n5 3\n2 3\n1 1\n2 1\n1 2\n2 2\n''') == '''\n2\n2\n1\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 5\n5 3\n2 3\n1 1\n2 1\n1 2\n2 2\n''') == '''\n2\n2\n1\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 5\n5 3\n2 3\n1 1\n2 1\n1 2\n2 2\n''') == '''\n2\n2\n1\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 5\n5 3\n2 3\n1 1\n2 1\n1 2\n2 2\n''') == '''\n2\n2\n1\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 5\n5 3\n2 3\n1 1\n2 1\n1 2\n2 2\n''') == '''\n2\n2\n1\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 5\n5 3\n2 3\n1 1\n2 1\n1 2\n2 2\n''') == '", "solution(r'''\n3 5\n3 1\n2 2\n1 3\n1 1\n1 3\n2 2\n1 2\n1 3\n''') == r'''\n0\n0\n0\n1\n2\n'''\n\nassert solution(r'''\n1 5\n1 2\n1 1\n2 1\n1 1\n2 1\n''') == r'''\n0\n1\n1\n1\n0\n'''\n\nassert solution(r'''\n2 3\n2 3\n2 3\n1 1\n1 2\n2 1\n''') == r'''\n0\n0\n0\n'''\n\nassert solution(r'''\n3 5\n4 4\n3 2\n5 5\n1 1\n1 2\n1 3\n2 1\n2 2\n''') == r'''\n0\n0\n0\n1\n2\n2\n'''\n\nassert solution(r'''\n10 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n1 1\n1 3\n2 2\n1 5\n2 3\n''') == r'''\n0\n0\n1\n1\n1\n'''\n\nassert solution(r'''\n10 1\n1 2\n2 3\n3 4\n4 5\n5 6\n", "solution(__doc__) == '''\n'''", "solution(get_input(1)) == get_output(1)\nassert solution(get_input(2)) == get_output(2)\nassert solution(get_input(3)) == get_output(3)\nassert solution(get_input(4)) == get_output(4)\nassert solution(get_input(5)) == get_output(5)\nassert solution(get_input(6)) == get_output(6)\nassert solution(get_input(7)) == get_output(7)\nassert solution(get_input(8)) == get_output(8)\nassert solution(get_input(9)) == get_output(9)\nassert solution(get_input(10)) == get_output(10)\nassert solution(get_input(11)) == get_output(11)\nassert solution(get_input(12)) == get_output(12)\nassert solution(get_input(13)) == get_output(13)\nassert solution(get_input(14)) == get_output(14)\nassert solution(get_input(15)) == get_output(15)\nassert solution(get_input(16)) == get_output(16)\nassert solution(get_input(17)) == get_output(17)\nassert solution(get_input(18)) == get_", "solution(\"\"\"\n2 2\n2 3\n2 3\n1 1\n2 1\n\"\"\") == \"\"\"\n0\n0\n\"\"\"\n\nassert solution(\"\"\"\n1 2\n1 2\n1 1\n2 1\n\"\"\") == \"\"\"\n0\n1\n\"\"\"\n\nassert solution(\"\"\"\n1 3\n1 2\n1 1\n1 2\n2 1\n\"\"\") == \"\"\"\n0\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n2 3\n1 1\n1 1\n1 1\n2 1\n2 2\n\"\"\") == \"\"\"\n0\n1\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n2 5\n1 2\n1 2\n1 1\n2 1\n1 2\n2 1\n1 1\n2 2\n2 1\n\"\"\") == \"\"\"\n0\n1\n1\n1\n1\n1\n2\n2\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n1 6\n1 2\n1 1\n1 2\n2 1\n1 2\n2 1\n1 1\n2 1\n\"\"\") == \"\"\"\n0\n1\n1\n1\n1\n1\n1\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n1 6\n1 2\n1 1\n1 2\n2 1\n1 2\n2 1\n1 1\n2 1\n\"\"\") == \"\"\"\n0\n1\n1\n1", "solution('''\n4 4\n3 3\n4 2\n6 3\n2 3\n1 3\n1 2\n2 1\n1 1\n''') == '''\n1\n1\n2\n0\n'''\n\n# # submit solution\n# import sys\n# f = open('1.in', 'r')\n# sys.stdin = f\n# sys.stdout = open('1.out', 'w')\n#\n# n, m = map(int, input().split())\n# x = [int(i) for i in input().split()]\n# y = [int(i) for i in input().split()]\n# a = [list(map(int, input().split())) for i in range(m)]\n#\n# l = [0] * (n + 1)\n# ans = [0] * m\n#\n# for i in range(m):\n#     if a[i][0] == 1:\n#         l[a[i][1]] = x[a[i][1] - 1]\n#     else:\n#         l[a[i][1]] = 0\n#     ans[i] = sum([x[j - 1] <= l[j] < x[j - 1] + y[j - 1] for j in range(1, n", "solution(stdin=\"\"\"\\\n3 4\n3 2\n1 2\n3 2\n1 1\n2 2\n1 2\n2 1\n2 3\"\"\") == \"\"\"\\\n1\n1\n1\n1\n1\n2\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\"\"\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\\\n4 4\n4 2\n4 2\n4 2\n4 2\n1 4\n1 1\n1 2\n1 3\"\"\") == \"\"\"\\\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n", "solution('''3 4\n3 5\n4 4\n5 2\n1 1\n2 1\n1 2\n2 2''') == '''1\n1\n2\n0'''\n\n# get stdin from the file\nfilename = 'data.in'\nwith open(filename, 'r') as file:\n    stdin = file.read()\n\nprint(solution(stdin))", "solution(example_input) == example_output", "solution('''\n6 4\n2 3\n3 5\n2 3\n2 3\n2 3\n3 5\n1 2\n2 1\n1 1\n2 2\n''') == '''\n0\n0\n0\n1\n1\n1\n2\n2\n2\n'''", "solution(\"\"\"\\\n2 4\n2 3\n3 4\n1 1\n2 1\n1 2\n2 2\n\"\"\") == \"\"\"\\\n0\n1\n1\n1\n1\n\"\"\"", "solution(\"\") == \"\", \"Test1 failed\"\nassert solution(\"\") == \"\", \"Test2 failed\"\nassert solution(\"\") == \"\", \"Test3 failed\"\n\n# check performance of solution\nimport timeit\ndef test():\n    tester(\"\"\"\"\"\")\nt = timeit.timeit(test, number=1000)\nprint(\"Completed tests in {0:.2f}s\".format(t))", "solution(\"\"\"2 3\n2 3\n1 5\n1 1\n2 1\n1 2\"\"\") == \"\"\"0\n0\n1\"\"\"\n\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n4 5\n5 6\n1 3\n1 1\n2 3\n1 2\n2 4\"\"\") == \"\"\"0\n0\n1\n0\n0\"\"\"\n\nassert solution(\"\"\"1 4\n1 0\n1 1\n2 1\n1 1\"\"\") == \"\"\"0\n0\n0\n0\"\"\"\n\nassert solution(\"\"\"5 15\n4 2\n4 2\n4 2\n4 2\n4 2\n1 1\n1 2\n1 3\n1 4\n1 5\n2 1\n2 2\n2 3\n2 4\n2 5\"\"\") == \"\"\"0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\"\"\"\n\n# submit solution\nimport time\nimport json\nimport sys\nimport hashlib\n# from urllib.request import urlopen\nfrom urllib import urlopen\n\ntoken = '3fb081efa6c74a6e9d6b5fd6fd0a7b0c'\nurl = 'https://judgeapi.u-aizu.ac.jp/api/submissions/'\nlocal_test =", "solution('''\n4 5\n2 2\n3 3\n4 5\n3 3\n1 3\n1 2\n2 3\n1 4\n2 2\n''') == '''\n0\n1\n0\n1\n0\n'''\n\nassert solution('''\n2 3\n10 2\n8 2\n1 1\n1 2\n2 1\n2 2\n''') == '''\n0\n0\n0\n0\n0\n'''\n\nassert solution('''\n1 1\n10 2\n1 1\n2 1\n''') == '''\n0\n0\n'''\n\n# run test\nprint('start test')\ntry:\n    while True:\n        s = input()\n        assert solution(s) == str(solve(s))\nexcept:\n    print('TEST FAILED')\n    print(s)\n    sys.exit()\nprint('test done')", "solution('''\n2 3\n2 1\n1 2\n1 1\n2 1\n1 2\n'''[1:]) == '''\n0\n1\n1\n'''[1:]", "solution('''\n3 5\n3 2\n2 1\n2 3\n1 2\n2 2\n1 3\n2 3\n2 2\n2 1\n''') == '''\n0\n0\n1\n1\n0\n'''\n\n# # use IO buffer for fast I/O\n# import io\n# from unittest import main\n\n# f = io.StringIO('''\n# 3 5\n# 3 2\n# 2 1\n# 2 3\n# 1 2\n# 2 2\n# 1 3\n# 2 3\n# 2 2\n# 2 1\n# ''')\n\n# main(module='test', argv=[''], exit=False)", "solution('''\n2 5\n1 2\n3 4\n1 1\n1 2\n2 1\n2 2\n''') == '''\n0\n1\n1\n0\n0\n'''\n\n# get input for testing (get the first line of the text only)\n__test_input = '''\n2 5\n1 2\n3 4\n1 1\n1 2\n2 1\n2 2\n'''\n__test_input = '\\n'.join(__test_input.split('\\n')[1:])\n\n# submit\nimport os\nf = open(os.path.expanduser(\"~/Downloads/p1.in\"))\n__test_input = '\\n'.join(f.read().split('\\n')[1:])\nprint(solution(__test_input))", "solutio", "solution('''\n3 5\n3 4\n2 1\n1 1\n1 1\n2 1\n1 2\n2 2\n2 3\n''') == '''\n0\n1\n2\n2\n0\n'''\nassert solution('''\n3 5\n1 1\n1 1\n1 1\n1 1\n2 1\n1 2\n2 2\n2 3\n''') == '''\n0\n1\n2\n2\n0\n'''\nassert solution('''\n3 5\n3 2\n2 1\n1 1\n1 1\n2 1\n1 2\n2 2\n2 3\n''') == '''\n0\n1\n0\n0\n0\n'''\nassert solution('''\n3 5\n3 2\n2 1\n1 1\n1 1\n2 1\n1 2\n2 2\n2 1\n''') == '''\n0\n1\n0\n0\n1\n'''\nassert solution('''\n3 5\n3 2\n2 1\n1 1\n1 1\n2 1\n1 2\n2 2\n2 1\n1 3\n''') == '''\n0\n1\n0\n0\n1\n1\n'''\nassert solution('''\n3 5\n3 2\n2 1\n1 1\n1 1\n2 1\n1 2\n2 2\n2 1\n1 3\n", "solution('''\n2 3\n2 3\n2 3\n1 1\n2 1\n1 2\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n2 2\n1 1\n1 1\n2 1\n1 2\n''') == '''\n0\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n2 3\n1 1\n1 1\n2 1\n1 2\n''') == '''\n0\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n2 3\n2 3\n1 1\n2 1\n1 2\n''') == '''\n1\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n2 3\n2 3\n1 1\n2 1\n1 2\n''') == '''\n1\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n2 3\n2 3\n1 1\n2 1\n1 2\n''') == '''\n1\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n2 3\n2 3\n1 1\n2", "solution(\"\"\"\\\n3 5\n5 4\n4 2\n3 5\n1 2\n2 1\n1 1\n1 3\n2 3\n\"\"\") == \"\"\"\\\n1\n1\n1\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\\\n1 3\n2 3\n1 1\n2 1\n1 1\n\"\"\") == \"\"\"\\\n0\n1\n0\n\"\"\"", "solution('''\n3 5\n2 1\n3 2\n4 3\n1 1\n2 1\n1 2\n2 2\n1 3\n2 3\n''') == '''\n0\n1\n2\n2\n1\n'''\nassert solution('''\n1 10\n10 10\n1 1\n2 1\n1 1\n2 1\n1 1\n2 1\n1 1\n2 1\n1 1\n''') == '''\n0\n1\n1\n1\n1\n1\n1\n1\n1\n0\n'''\nassert solution('''\n5 7\n10 10\n10 10\n10 10\n10 10\n10 10\n1 1\n2 1\n1 2\n2 2\n1 3\n2 3\n1 4\n''') == '''\n0\n1\n2\n3\n3\n3\n3\n2\n'''\nassert solution('''\n1 5\n4 3\n1 1\n2 1\n1 1\n2 1\n1 1\n''') == '''\n0\n1\n1\n1\n1\n0\n'''\nassert solution('''\n1 1\n1 1\n1 1\n''') == '''\n0\n'''\nassert solution('''\n1 1\n10 10\n1 1\n''') == '''\n0\n'''\nassert solution('''\n1 5", "solution('''\n2 3\n1 1\n1 1\n1 1\n2 1\n1 2\n2 2\n''') == '''\n0\n1\n0\n'''\n\n# test\nimport random\nfrom typing import List\n\ndef is_correct(result: List[int], maintenance: List[int], trains: List[int], ops: List[int]) -> bool:\n    trains_copy = trains.copy()\n    for day, op in enumerate(ops):\n        if op == 1:\n            if trains_copy[day] != 0:\n                return False\n            trains_copy[day] = 1\n        else:\n            if trains_copy[day] != 1:\n                return False\n            trains_copy[day] = 0\n    if trains_copy != maintenance:\n        return False\n    return True\n\nMAX_COUNT = 200000\nMAX_TRAIN_TURNS = 5\nMAX_TRAIN_WORK_DAYS = 50\nMAX_TRAIN_MAINTENANCE_DAYS = 50\n\ndef generate(max_count: int = MAX_COUNT,\n             max_train_turns: int = MAX_TRAIN_TURNS,\n             max_train_work_days: int = MAX_TRAIN_WORK_DAYS,\n            ", "solution('''\n5 15\n3 4\n3 5\n3 6\n3 7\n3 8\n1 1\n1 2\n1 3\n1 4\n1 5\n2 1\n2 2\n2 3\n2 4\n2 5\n''') == '''\n0\n1\n2\n3\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n'''\nassert solution('''\n5 10\n3 4\n3 5\n3 6\n3 7\n3 8\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '''\n0\n1\n2\n3\n4\n4\n4\n4\n4\n4\n'''\nassert solution('''\n5 10\n3 4\n3 5\n3 6\n3 7\n3 8\n2 1\n2 2\n2 3\n2 4\n2 5\n''') == '''\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n'''\nassert solution('''\n1 5\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '''\n0\n0\n0\n0\n0\n'''\nassert solution('''\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10", "solution(\"./stdin1.txt\") == \"./stdout1.txt\"\nassert solution(\"./stdin2.txt\") == \"./stdout2.txt\"\nassert solution(\"./stdin3.txt\") == \"./stdout3.txt\"\nassert solution(\"./stdin4.txt\") == \"./stdout4.txt\"\nassert solution(\"./stdin5.txt\") == \"./stdout5.txt\"\n\n# get the input file\nstdin = \"./stdin.txt\"\n# get the output file\nstdout = \"./stdout.txt\"\n\n# open the input file in read-only mode\nwith open(stdin, \"r\") as input_file:\n    # open the output file in write-only mode\n    with open(stdout, \"w\") as output_file:\n        # call function to solve the problem\n        output_file.write(solution(input_file.read()))", "solution(\"\"\"\n2 3\n2 3\n3 2\n1 1\n2 1\n1 2\n\"\"\") == \"\"\"\n0\n1\n1\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n4 6\n12 10\n7 10\n8 10\n9 10\n1 3\n1 1\n2 3\n1 2\n2 1\n1 4\n2 2\n\"\"\") == \"\"\"\n0\n1\n2\n2\n2\n1\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"\n1 3\n7 2\n1 1\n2 1\n1 1\n\"\"\") == \"\"\"\n0\n0\n1\n\"\"\", \"Example 3\"\n\nassert solution(\"\"\"\n5 5\n6 10\n1 8\n1 10\n5 10\n2 5\n1 1\n2 3\n1 3\n2 4\n1 5\n\"\"\") == \"\"\"\n0\n1\n2\n2\n1\n\"\"\", \"Example 4\"\n\n# print the result by using stdin and stdout\n# it is better to use only one file to avoid using network I/O\nwith open('input.txt', 'r') as f:\n    lines = f.readlines()\n    with open('output.txt', 'w') as g:\n        for result in solution(lines):\n            g.write(result)", "solution(\"\"\"1 2\n1 1\n1 1\n2 1\"\"\") == \"\"\"0\n1\"\"\"\n\nassert solution(\"\"\"3 10\n1 2\n2 3\n3 4\n1 1\n1 2\n1 1\n2 1\n1 3\n2 2\n2 3\"\"\") == \"\"\"0\n0\n0\n1\n2\n3\n3\n2\n2\n1\"\"\"\n\n# TODO write stress test and more tests after solution", "solution(test_case) == answer\n\n# submit\nimport submit # submit.py containing the scraper\nscraper = submit.Scraper()\nscraper.login()\nscraper.do_submit(camp_id, task_id, answer)", "solution(stdin) == stdout", "solution(\"\") == \"\"", "solution(\"\"\"1 2\n2 3\n1 1\n2 1\n\"\"\") == \"\"\"1\n0\n\"\"\"\nassert solution(\"\"\"3 1\n3 4\n3 2\n3 1\n1 1\n\"\"\") == \"\"\"0\n\"\"\"\nassert solution(\"\"\"2 3\n1 2\n2 1\n1 1\n2 2\n1 2\n\"\"\") == \"\"\"0\n1\n1\n\"\"\"\nassert solution(\"\"\"3 4\n1 2\n2 1\n3 1\n1 2\n2 1\n1 1\n2 2\n1 2\n\"\"\") == \"\"\"0\n1\n2\n0\n0\n\"\"\"\nassert solution(\"\"\"1 2\n2 3\n1 1\n2 1\n\"\"\") == \"\"\"1\n0\n\"\"\"\nassert solution(\"\"\"1 4\n1 1\n1 2\n1 3\n1 4\n1 1\n1 2\n1 3\n1 4\n\"\"\") == \"\"\"0\n0\n0\n0\n0\n1\n1\n1\n1\n\"\"\"\nassert solution(\"\"\"2 2\n2 1\n1 1\n1 2\n2 1\n\"\"\") == \"\"\"0\n1\n0\n\"\"\"\nassert solution(\"\"\"1 2\n1 2\n1 1\n1 2\n1 1\n\"\"\") == \"\"\"0\n0\n1\n0\n1\n\"\"\"\nassert solution(\"\"\"2 3\n2 3\n2 1\n1 1\n2 2\n1", "solution(\"2 3\\n2 1\\n3 2\\n1 1\\n1 2\\n2 1\\n2 2\") == \"0\\n1\\n2\\n\"\nassert solution(\"1 2\\n1 2\\n1 1\\n2 1\") == \"0\\n1\\n\"\nassert solution(\"2 3\\n2 1\\n3 2\\n1 1\\n1 2\\n2 2\\n2 1\") == \"0\\n1\\n2\\n\"\nassert solution(\"2 3\\n2 1\\n3 2\\n1 1\\n1 2\\n2 1\\n2 2\") == \"0\\n1\\n2\\n\"\nassert solution(\"3 2\\n1 2\\n3 1\\n2 2\\n1 3\\n2 1\") == \"0\\n1\\n\"\nassert solution(\"2 3\\n1 2\\n3 1\\n1 1\\n1 2\\n2 1\\n2 2\") == \"0\\n1\\n2\\n\"\nassert solution(\"1 2\\n1 2\\n1 1\\n2 1\") == \"0\\n1\\n\"\nassert solution(\"1 2\\n1 2\\n1 1\\n2 1\") == \"0\\n1\\n\"\nassert solution(\"2 3\\n1 2", "solution(\"\"\"\\\n2 3\n2 3\n1 2\n1 1\n2 1\n1 2\"\"\") == \"\"\"\\\n1\n1\n1\n1\n0\n0\n0\"\"\", \"WA\"\n\nassert solution(\"\"\"\\\n2 4\n1 1\n1 1\n1 1\n2 1\n2 2\n1 2\n2 1\"\"\") == \"\"\"\\\n0\n0\n0\n0\n1\n0\n1\n0\n0\n0\"\"\", \"WA\"", "solution('''\n2 5\n3 4\n2 3\n1 1\n2 2\n1 2\n2 1\n''') == '''\n0\n0\n1\n1\n1\n'''\nassert solution('''\n2 5\n1 1000000000\n1000000000 1\n1 1\n2 1\n1 2\n2 2\n''') == '''\n0\n0\n1\n1\n0\n'''\n\n# check memory usage\nimport resource\nimport sys\nimport time\n\n_overhead = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss\n_init = time.time()\n\n# test for small input\nassert solution('''\n2 5\n3 4\n2 3\n1 1\n2 2\n1 2\n2 1\n''')\n_cur = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss - _overhead\nprint(f'Memory usage: {_cur - _overhead:.4f} MB, time usage: {time.time() - _init:.2f}s')\n\n# test for large input\nassert solution('''\n2 5\n1 1000000000\n1000000000 1\n1 1\n2 1\n1 2\n2 2\n''')\n_cur = resource.getrusage(resource.RUSAGE", "solution(r'''\n3 5\n10 11\n11 12\n12 13\n1 2\n2 1\n1 1\n1 3\n2 2\n''') == r'''\n0\n1\n0\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2 3\n10 1\n1 10\n1 1\n1 2\n2 1\n2 2\n''') == r'''\n0\n1\n0\n'''", "solution(\"1 2\") == \"1\\n0\"\nassert solution(\"2 3\\n2 3\\n3 4\\n1 1\\n2 1\\n1 2\") == \"0\\n0\\n1\\n1\\n0\"\nassert solution(\"5 7\\n5 1\\n5 1\\n5 1\\n5 1\\n5 1\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\") == \"0\\n0\\n0\\n0\\n0\\n1\\n2\\n3\\n4\\n5\\n4\\n3\\n2\\n1\\n0\"\nassert solution(\"1 1\\n1000 999\\n1 1\") == \"0\"\nassert solution(\"2 10\\n1 1\\n1 1\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\\n1 1\\n1 2\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n0", "solution(\n'''\n2 3\n2 3\n4 5\n1 1\n2 1\n1 2\n'''\n) == '''\n0\n0\n1\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n2 3\n3 4\n3 4\n1 1\n2 1\n1 2\n'''\n) == '''\n0\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n2 2\n5 4\n5 4\n1 1\n2 1\n'''\n) == '''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n2 4\n3 3\n2 3\n1 1\n2 1\n1 2\n2 2\n'''\n) == '''\n0\n0\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n1 1\n4 3\n1 1\n'''\n) == '''\n0\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n1 3\n3 1\n1 1\n2 1\n1 1\n'''\n) == '''\n0\n1\n0\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n3 5\n1 2\n3 1\n4", "'''\n''' == solution('''\n''')", "solution(test_1) == test_1_output\nassert solution(test_2) == test_2_output\nassert solution(test_3) == test_3_output\nassert solution(test_4) == test_4_output\nassert solution(test_5) == test_5_output\nassert solution(test_6) == test_6_output\nassert solution(test_7) == test_7_output\nassert solution(test_8) == test_8_output\nassert solution(test_9) == test_9_output\nassert solution(test_10) == test_10_output\nassert solution(test_11) == test_11_output\nassert solution(test_12) == test_12_output\nassert solution(test_13) == test_13_output\nassert solution(test_14) == test_14_output\nassert solution(test_15) == test_15_output\nassert solution(test_16) == test_16_output\nassert solution(test_17) == test_17_output\nassert solution(test_18) == test_18_output\nassert solution(test_19) == test_19_output\nassert solution(test_20) == test_20_output\nassert solution(test_21) == test_21_output\nassert solution(test_22)", "solution(r'''\n2 10\n5 5\n5 10\n1 1\n1 2\n2 1\n1 1\n1 2\n2 2\n2 1\n1 1\n1 2\n''') == '''\n0\n0\n1\n1\n1\n0\n0\n0\n0\n0\n'''\n\nassert solution(r'''\n1 3\n3 2\n1 1\n2 1\n1 1\n''') == '''\n0\n0\n0\n'''\n\nassert solution(r'''\n3 8\n3 5\n4 6\n2 3\n1 1\n1 2\n1 3\n2 2\n2 3\n1 1\n2 2\n2 3\n''') == '''\n0\n0\n0\n0\n0\n1\n1\n1\n'''\n\n# submit at https://codeforces.com/contest/1352/submission/82714158\n\nprint(solution('''\n'''))", "solution(\"\"\"\\\n2 3\n2 3\n4 5\n1 1\n1 2\n2 1\n\"\"\") == \"\"\"\\\n0\n1\n2\n0\n\"\"\"", "solution('''\n2 2\n1 1\n2 2\n1 1\n2 1\n''') == '''\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n2 1\n2 1\n1 1\n2 1\n1 2\n''') == '''\n0\n0\n1\n'''\n\nimport time\nimport random\nimport math\n\ndef gen_random_case(mode: int):\n    n = random.randint(1, 200000)\n    m = random.randint(1, 200000)\n    lines = [str(n), str(m)]\n    for i in range(n):\n        x = random.randint(1, 1000000000)\n        y = random.randint(1, 1000000000)\n        lines.append(f'{x} {y}')\n    for i in range(m):\n        op = random.randint(1, 2)\n        k = random.randint(1, n)\n        lines.append(f'{op} {k}')\n    return '\\n'.join(lines)\n\ndef gen_random_cases(mode: int, sz: int) -> str:\n    cases = []\n    for i in range(sz):\n        cases.append(gen_", "solution(test_case[0]) == test_case[1]\n\nfrom iostream import read_input, write_output\nfrom stopwatch import Stopwatch\n\nwith Stopwatch():\n    sample_result = solution(read_input())\n    write_output(sample_result)", "solution('''\n4 2\n4 4\n4 5\n4 4\n4 5\n1 1\n2 1\n''') == '''\n0\n1\n'''\nassert solution('''\n2 3\n1 1\n1 1\n1 1\n2 1\n1 2\n2 2\n''') == '''\n0\n1\n0\n'''\nassert solution('''\n1 1\n1 1000000000\n1 1\n''') == '''\n0\n'''\nassert solution('''\n2 2\n1 1\n1 1\n1 1\n2 1\n''') == '''\n0\n1\n'''\nassert solution('''\n3 5\n3 1\n3 2\n3 3\n1 1\n2 1\n1 2\n2 2\n1 3\n''') == '''\n0\n1\n0\n1\n0\n'''\nassert solution('''\n5 3\n3 3\n3 3\n3 3\n3 3\n3 3\n1 2\n2 2\n1 3\n''') == '''\n0\n1\n1\n'''\nassert solution('''\n5 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n2 1\n''') == '''\n0\n1\n'''\nassert solution('''\n10 1\n1 1\n1 1\n", "solution('''\n1 3\n2 1\n1 1\n2 1\n1 1\n''') == '''\n0\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3 5\n3 4\n1 2\n1 3\n1 1\n2 1\n1 2\n2 2\n2 3\n''') == '''\n0\n0\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 100000\n1 2\n1 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1 1\n2 1\n1 2\n2 2\n1", "(\n    solution(\"\"\"\n5 6\n2 1\n5 4\n2 3\n4 5\n2 1\n1 3\n1 5\n2 2\n1 1\n2 4\n2 1\n\"\"\") == \"\"\"\n0\n0\n1\n2\n2\n2\n\"\"\"\n), \"Example 1\"\n\nassert (\n    solution(\"\"\"\n3 5\n5 7\n3 5\n5 7\n1 1\n1 2\n1 3\n2 2\n2 3\n\"\"\") == \"\"\"\n0\n0\n0\n1\n1\n2\n\"\"\"\n), \"Example 2\"\n\nassert (\n    solution(\"\"\"\n1 5\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"\"\"\n0\n0\n0\n0\n0\n\"\"\"\n), \"Example 3\"\n\nassert (\n    solution(\"\"\"\n3 5\n2 3\n2 3\n2 3\n1 1\n1 2\n1 3\n2 2\n2 3\n\"\"\") == \"\"\"\n0\n0\n0\n1\n1\n1\n\"\"\"\n), \"Example 4\"\n\n# submit solution\nprint(solution(sys.stdin.read()))"], "finish_reason": ["stop", "stop", "stop", "length", "length", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop"], "sum_logprob": [-48.37440696691999, -34.20730803536999, -30.751772865710997, -62.315872573819, -32.0405497861776, -107.68059247799603, -8.988888540800001, -13.860561556785367, -83.12545636115696, -102.18246498214799, -82.70446243769, -58.73833314058, -6.48019574704, -41.78487619355999, -21.682692260160003, -56.00316408786001, -213.38677478286502, -125.61761961811999, -17.2742749765, -54.563868368989, -103.25335424792901, -6.89357404, -68.82402773169548, -52.95514021916901, -45.69418241273998, -83.88747821026699, -140.85733518916996, -63.75244956524002, -66.12690025286001, -185.36292744462995, -77.85622278829, -48.07206373332999, -5.6858852467, -5.665269834999999, -123.92514004834608, -73.25789224958646, -54.19326773250998, -117.55223736993298, -45.186747165150024, -83.520926027817, -89.784656637303, -11.128708941999998, -19.560749090650503, -121.20465333802905, -19.411037650249998, -87.84478616928094, -49.63581148493, -102.36320283426167, -51.33346637030404, -115.90272001961098], "mean_logprob": [-0.6910629566702857, -0.5182925459904546, -0.22949084228142538, -0.20771957524606333, -0.106801832620592, -0.35893530825998665, -0.6914529646769231, -0.04620187185595123, -0.27708485453719, -0.34060821660716, -0.2756815414589667, -0.6526481460064445, -0.5891087042763636, -0.6428442491316924, -0.4927884604581818, -0.5895069903985263, -0.7112892492762166, -0.6157726451868627, -0.3838727772555556, -0.35662659064698693, -0.5551255604727365, -2.2978580133333333, -0.22941342577231832, -0.17651713406389666, -0.49133529476064514, -0.2796249273675567, -0.46952445063056664, -0.21250816521746668, -0.29921674322561087, -0.6369860049643643, -0.7944512529417347, -0.843369539181228, -0.6317650274111111, -0.9442116391666666, -0.4130838001611533, -0.24419297416528835, -0.5017895160417593, -0.39184079123311, -0.4303499730014286, -0.27840308675939, -0.29928218879101, -0.856054534, -0.065202496968835, -0.5559846483395826, -0.49771891410897434, -0.29281595389760334, -0.7636278689989231, -0.3412106761142057, -0.17111155456768, -0.4492353489132209]}
{"prompt": "'''\nIn fact, the problems E1 and E2 do not have much in common. You should probably think of them as two separate problems.\n\nYou are given an integer array a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nLet us consider an empty [deque](https://tinyurl.com/pfeucbux) (double-ended queue). A deque is a data structure that supports adding elements to both the beginning and the end. So, if there are elements [3, 4, 4] currently in the deque, adding an element 1 to the beginning will produce the sequence [\\color{red}{1}, 3, 4, 4], and adding the same element to the end will produce [3, 4, 4, \\color{red}{1}].\n\nThe elements of the array are sequentially added to the initially empty deque, starting with a_1 and finishing with a_n. Before adding each element to the deque, you may choose whether to add it to the beginning or to the end.\n\nFor example, if we consider an array a = [3, 7, 5, 5], one of the possible sequences of actions looks like this:    1. |  add 3 to the beginning of the deque: |  deque has a sequence [\\color{red}{3}] in it;   \n---|---|---  \n  2. |  add 7 to the end of the deque: |  deque has a sequence [3, \\color{red}{7}] in it;   \n  3. |  add 5 to the end of the deque: |  deque has a sequence [3, 7, \\color{red}{5}] in it;   \n  4. |  add 5 to the beginning of the deque: |  deque has a sequence [\\color{red}{5}, 3, 7, 5] in it;   \n  \nFind the minimal possible number of inversions in the deque after the whole array is processed. \n\nAn inversion in sequence d is a pair of indices (i, j) such that i < j and d_i > d_j. For example, the array d = [5, 3, 7, 5] has exactly two inversions \u2014 (1, 2) and (3, 4), since d_1 = 5 > 3 = d_2 and d_3 = 7 > 5 = d_4.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 array size. The second line of the description contains n space-separated integers a_i (-10^9 \u2264 a_i \u2264 10^9) \u2014 elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the minimal possible number of inversions in the deque after executing the described algorithm.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(test_case) == '''3\n3\n4\n4'''", "solution('''4\n4\n3 7 5 5\n4\n4 2 3 4\n4\n4 4 2 4\n4\n1 2 3 4''') == '''2\n0\n2\n0'''", "solution('''\n1\n5\n3 7 5 5\n''') == '2'\n\n# check the performance of solution\nimport random\nfrom array import array\nfrom itertools import count\nfrom time import time\nfrom typing import List\n\nN = int(1e5)\narray_type = 'l'\narray_max = int(1e9)\ns = str(1) + '\\n' + str(N) + '\\n'\nfor _ in range(N):\n    s += str(random.randint(-array_max, array_max)) + ' '\ns += '\\n'\n\nstart = time()\nsolution(s)\nend = time()\nprint(end - start)", "solution('''\n4\n4\n3 7 5 5\n5\n1 3 7 3 3\n1\n1\n5\n1 1 1 1 1\n''') == '''\n2\n1\n0\n0\n'''", "solution('''\n1\n4\n3 7 5 5\n''') == '''\n2\n'''\n\nprint(solution('''\n5\n5\n5 -5 0 -5 5\n6\n-1 -1 -1 -1 -1 0\n7\n0 1 2 3 4 -5 -6\n2\n-2 2\n8\n0 1 1 0 1 1 0 1\n'''))\n\n'''\nExplanation\n\ntestcase #1 | \n|  the optimal solution is to add the numbers to the end of the deque in the given order, the inversions will be (1, 2) and (3, 4).\n\ntestcase #2 | \n|  the optimal solution is to add the numbers to the beginning of the deque in the given order, the inversions will be (2, 3), (3, 4), (4, 5) and (5, 6).\n\ntestcase #3 | \n|  the optimal solution is to add the numbers to the beginning of the deque in the given order, the inversions will be (3, 4), (4, 5), (5, 6) and (6, 7).\n\ntestcase #4 | \n|  the optimal solution is to add the numbers to the beginning of the deque in the given order, the inversions will be (1,", "solution('''\n2\n4\n3 7 5 5\n5\n5 4 3 2 1\n''') == '''\n3\n5\n'''", "solution(\"someinput\") == \"someoutput\"\n\ndef stress_test():\n    # generate a random array of random size n\n    # generate a deque by adding elements from array to the beginning and to the end according to the algorithm\n    # calculate the inversions of the deque\n    # compare the result to our solution\n    # if it is the same, proceed to the next iteration, otherwise print the input, expected output and the result\n    pass\n\n# stress_test()", "solution('''\n1\n5\n3 7 5 5\n''') == '2'\nassert solution('''\n2\n5\n5 3 7 5\n4\n1 1 1 1\n''') == '4\\n6'", "solution('''\n5\n5\n3 7 5 5\n1\n1\n3\n1 2 3\n1\n1\n1\n1 2\n''') == '''\n2\n0\n0\n1\n0\n'''", "solution('''\n1\n4\n3 7 5 5\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n7 2 9 6 5\n''') == '''\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 3 3\n''') == '''\n0\n'''", "solution('''\n4\n4\n3 7 5 5\n5\n5 6 6 4 4\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n''') == '''\n2\n3\n10\n10\n'''", "solution('''\n1\n5\n3 7 5 5\n''') == '''\n2\n'''\n\n# this is a more complex test case.\nassert solution('''\n2\n3\n3 3 3\n2\n1 2\n''') == '''\n1\n0\n'''\n\n# this is a more complex test case.\nassert solution('''\n5\n5\n5 5 5 5 5\n5\n5 5 5 5 6\n5\n5 5 5 6 5\n5\n5 5 6 5 5\n5\n5 6 5 5 5\n''') == '''\n1\n1\n1\n0\n0\n'''", "solution(INPUT) == '''\n'''", "solution('''\n5\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n5 1 2 4 3\n5\n1 4 2 3 5\n5\n5 3 4 1 2\n''') == '''\n0\n5\n2\n1\n2\n'''", "solution('''\n\n''') == '''\n\n'''", "solution('''\n5\n5\n5 1 7 2 4\n5\n5 7 4 2 1\n5\n1 3 7 2 1\n5\n5 4 3 2 1\n5\n5 4 4 2 1\n''') == '''\n3\n5\n3\n5\n3\n'''", "solution(r'''\n5\n5\n3 7 5 5\n3\n1 2 3\n2\n-3 -3\n1\n0\n2\n-1 1\n''') == r'''\n2\n0\n0\n0\n1\n'''", "solution('''\n2\n4\n3 7 5 5\n4\n4 5 2 6\n''') == '''\n4\n4\n'''", "solution('''\n2\n4\n3 7 5 5\n6\n1 7 4 6 5 1\n''') == '''\n2\n4\n'''", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nassert solution(SAMPLE_INPUT_2) == SAMPLE_OUTPUT_2\nassert solution(SMALL_INPUT) == SMALL_OUTPUT\nassert solution(LARGE_INPUT) == LARGE_OUTPUT\n \n# test solution with input from stdin\nfrom threading import Thread\nfrom sys import stdin\nif __name__ == '__main__':\n    def input_thread():\n        stdin.readline()\n        data = list(stdin)\n        inp = '\\n'.join(data).strip()\n        input_data.append(inp)\n    input_data = []\n    Thread(target=input_thread).start()\n    Thread(target=input_thread).start()\n    Thread(target=input_thread).start()\n    Thread(target=input_thread).start()\n    Thread(target=input_thread).start()\n    Thread(target=input_thread).start()\n    Thread(target=input_thread).start()\n    Thread(target=input_thread).start()\n    Thread(target=input_thread).start()\n    Thread(target=input_thread).start()\n    Thread(target=input_thread).start()\n    Thread(target=", "(solution('''\n2\n4\n3 7 5 5\n4\n2 1 3 2\n''') == '''\n2\n3\n''')", "solution('''\n2\n4\n3 7 5 5\n3\n3 7 5\n''') == '''\n2\n1\n'''\n\ndef read_and_process(infile):\n    f = open(infile, 'r')\n    return solution(f.read())\n\n# main()\nif __name__ == '__main__':\n    outfile = 'output.txt'\n    infile = 'input.txt'\n    with open(outfile, 'w') as f:\n        f.write(read_and_process(infile))", "solution('''\n''') == '''\n'''", "solution(sample_input) == sample_output\n\nprint(solution(user_input))", "solution(\"\"\"\n1\n4\n3 7 5 5\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n3 7 5\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n1 1 1 1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n10\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n10\n\"\"\"", "solution(sample_input) == sample_output", "solution('''\n1\n1\n1\n''') == '''\n0\n'''\n\nassert solution('''\n3\n2\n2 1\n2\n1 2\n2\n1 1\n''') == '''\n0\n0\n0\n'''\n\nassert solution('''\n4\n4\n1 2 3 4\n4\n4 3 2 1\n4\n4 4 1 1\n4\n4 4 4 4\n''') == '''\n0\n3\n3\n0\n'''\n\nprint('all tests passed')", "solution(input_case1) == output_case1\nassert solution(input_case2) == output_case2\nassert solution(input_case3) == output_case3\nassert solution(input_case4) == output_case4\n\n# test the performance of solution\n# pytest -s E1.py::test_solution\n\ndef test_solution():\n    assert solution(input_case1) == output_case1\n    assert solution(input_case2) == output_case2\n    assert solution(input_case3) == output_case3\n    assert solution(input_case4) == output_case4", "solution(TEST1) == \"2\\n2\\n3\\n3\\n3\\n3\\n0\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2", "solution('''\n1\n5\n3 7 5 5\n''') == '''\n2\n'''\n\nassert solution('''\n2\n5\n-1 -2 -3 -4 -5\n4\n-1 1 2 3\n''') == '''\n10\n0\n'''\n\nassert solution('''\n3\n4\n1 2 3 4\n4\n1 2 3 4\n4\n4 3 2 1\n''') == '''\n0\n0\n4\n'''\n\nprint(solution('''\n4\n4\n3 2 1 3\n4\n3 1 2 3\n4\n3 2 1 2\n4\n1 2 3 4\n'''))\n\n# sample tests\nassert solution('''\n7\n4\n1 2 3 4\n4\n1 2 3 4\n4\n4 3 2 1\n4\n3 2 1 3\n4\n3 1 2 3\n4\n3 2 1 2\n4\n1 2 3 4\n''') == '''\n0\n0\n4\n1\n1\n1\n0\n'''\n\n# fast submission\n# 2nd try: about 1 sec for ALL test sets\n# the trick is pretty simple\n# let's sort input array in descending order\n# use deque to get the number of non-decreasing subsequence of the input array\n# each element", "solution('''\n2\n5\n3 7 5 5\n2\n3 3\n''') == '''\n2\n0\n'''\n\n# make a stress test\nfrom random import randint\nfrom time import time\n\ndef stress_test(N: int) -> str:\n    '''\n    Generate random test case of N lines.\n    Each of the N lines is in format <N> <a_1> <a_2> ... <a_N>\n    where <N> is the size of an array\n    and <a_i> is a random integer from range [-10^9, 10^9]\n    '''\n    print(N)\n    for _ in range(N):\n        _N = randint(1, 200000)\n        rand_array = [randint(-1000000000, 1000000000) for _ in range(_N)]\n        print(_N)\n        print(' '.join(map(str, rand_array)))\n    return ''\n\ndef stress_checker(stdin: str) -> bool:\n    '''\n    Check the correctness of solution\n    by comparing it with 'brute-force'\n    '''\n    # parse the input\n    lines = stdin.splitlines()\n    T = int(lines[0])\n    test_cases = [map", "solution(\"\"\"\n1\n5\n3 7 5 5\n\"\"\") == \"\"\"\n2\n\"\"\"\n# test the runtime\nimport timeit\n\nprint(timeit.timeit(\"\"\"\\\ndef solution(stdin: str) -> str:\n    pass\nsolution(\"\"\"+\"1\\n5\\n3 7 5 5\")+\"\"\"\n\"\"\", number=10000))", "solution('''\n2\n2\n2 1\n5\n1 2 3 4 5\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 2 3\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 2 3\n3\n3 2 1\n3\n1 1 1\n''') == '''\n0\n2\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 1\n2\n1 2\n''') == '''\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 2\n2\n2 1\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 3 2 1\n''') == '''\n6\n'''\n\nprint('All Ok!')", "solution('''\n1\n6\n1 2 3 3 4 6\n''') == '''\n1\n'''\nassert solution('''\n1\n4\n2 3 5 4\n''') == '''\n0\n'''\nassert solution('''\n1\n6\n1 1 1 1 1 1\n''') == '''\n15\n'''\nassert solution('''\n1\n6\n1 2 3 1 2 3\n''') == '''\n3\n'''\nassert solution('''\n1\n7\n1 2 1 1 2 1 2\n''') == '''\n7\n'''\nassert solution('''\n1\n5\n2 1 3 2 1\n''') == '''\n2\n'''\nassert solution('''\n1\n6\n1 2 1 2 1 2\n''') == '''\n2\n'''\nassert solution('''\n1\n8\n1 2 1 1 2 2 1 2\n''') == '''\n8\n'''\nassert solution('''\n1\n5\n1 1 2 2 1\n''') == '''\n3\n'''\nassert solution('''\n1\n6\n2 1 1 1 2 1\n''') == '''\n4\n'''\nassert solution('''\n1\n6\n1 1 1 1 1 1\n''') == '''", "solution(stdin_sample) == stdout_sample", "solution('''\n3\n3\n3 5 1\n3\n3 7 5\n3\n1 4 2\n''') == '''\n2\n1\n2\n'''\n\n# check the speed of solution\nimport timeit\nfrom itertools import combinations\nimport random\n\nrandom.seed(42)\n\n_ = '''\n3\n3\n3 5 1\n3\n3 7 5\n3\n1 4 2\n'''\n\n_in = '\\n'.join([_] * 1000)\n\nprint(f'\\ntime: {timeit.timeit(lambda: solution(_in), number=10)}\\n')", "solution(stdin_2) == stdout_2", "solution('''\n2\n4\n3 7 5 5\n5\n1 2 3 4 5\n''') == '''\n2\n0\n'''", "solution(sampleInput) == sampleOutput\n# get the input\ninput = sys.stdin.read()\n# solve the problem\nresult = solution(input)\n# print result to console\nprint(result)", "solution('''1\n4\n3 7 5 5''') == '4'", "solution(open('tests/E/input.txt').read()) == open('tests/E/output.txt').read()\n\n# ------------- COMMENTS: ---------------\n# I've implemented a deque-like class, which is actually a list with\n# push() and popleft() operations only. At first, I implemented a dedicated\n# class for it, but I found it more pythonic to use list with custom\n# methods.\n#\n# Since the question is about *minimal* number of inversions, we can\n# iterate over the input array and add a new element to the deque in\n# the way that every next element is bigger then a leftmost element.\n# This way we can guarantee that there will be no inversions in the\n# final sequence.\n#\n# If there are multiple elements that are equal to the leftmost element,\n# then we should choose the one with the smallest index in the input\n# array.", "solution(sample_stdin) == sample_stdout", "solution(in_) == out_\n\nprint(\"OK\")", "solution('''3\n3\n1 2 3\n3\n3 2 1\n5\n1 1 1 1 1''') == '''0\n3\n10'''", "solution(\"1\\n4\\n3 7 5 5\") == \"2\"\nassert solution(\"1\\n4\\n5 7 7 5\") == \"1\"\nassert solution(\"1\\n1\\n42\") == \"0\"\nassert solution(\"1\\n5\\n1 3 2 4 5\") == \"0\"\nassert solution(\"1\\n5\\n5 4 3 2 1\") == \"6\"\nassert solution(\"1\\n10\\n7 8 4 8 8 1 9 7 8 7\") == \"10\"\nassert solution(\"3\\n3\\n3 2 1\\n6\\n5 1 4 2 3 3\\n2\\n1 2\") == \"3\\n6\\n0\"", "solution('''4\n4\n3 7 5 5\n4\n4 3 1 1\n1\n1\n2\n2 2''') == '''2\n0\n0\n1'''", "solution('''\n1\n1\n1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n4\n3 7 5 5\n''') == '''\n2\n'''\n\nassert solution('''\n1\n4\n3 5 5 7\n''') == '''\n0\n'''\n\nassert solution('''\n2\n4\n3 5 5 7\n4\n3 7 5 5\n''') == '''\n0\n2\n'''\n\n# check the performance of solution\nimport random\nfrom string import ascii_lowercase, ascii_uppercase\nfrom time import time\n\nfor i in range(10000):\n    n = random.randint(1, 200000)\n    array = [random.randint(-10**9, 10**9) for _ in range(n)]\n    stdin = f'1\\n{n}\\n{\" \".join(map(str, array))}\\n'\n    assert solution(stdin) == stdin.replace('\\n', '\\n').strip()\n\nstdin = f'{10000}\\n'\nfor i in range(10000):\n    n = random.randint(1, 200000)\n    array = [random.randint(-10**9, 10**9) for _ in range(", "solution(\"\"\"\n4\n4\n3 7 5 5\n2\n1 1\n4\n1 2 3 4\n4\n4 3 2 1\n\"\"\") == \"\"\"\n2\n0\n0\n6\n\"\"\"\n\n# check correctness of the test case generation\nimport random\n\ndef generate(max_n=10 ** 5, max_e=10 ** 9):\n    \"\"\"Generate test cases with:\n\n    1 <= t <= 1000\n    1 <= n <= 2 * 10 ** 5\n    -10 ** 9 <= a_i <= 10 ** 9\n    \"\"\"\n    t = random.randint(1, 1000)\n    print(t)\n    for _ in range(t):\n        n = random.randint(1, max_n)\n        print(n)\n        print(\" \".join(str(random.randint(-max_e, max_e)) for _ in range(n)))\n\n# generate()\n# print(solution(sys.stdin.read()))", "solution('''\n1\n2\n1 2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n3 7 5 5\n''') == '2'", "solution('''1\n4\n3 7 5 5''') == '2'\nassert solution('''2\n6\n1 3 5 4 2 6\n4\n1 4 2 3''') == '''6\n2'''"], "finish_reason": ["stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop"], "sum_logprob": [-21.686083916, -33.695430992240006, -84.47830738759005, -31.091868038300007, -146.98282284894006, -17.4659271807, -138.07822766850006, -27.268194550400004, -28.0806754417, -35.23078878172, -35.95804978350001, -75.30890348797999, -12.128201396, -37.069652860939996, -7.657959097800001, -61.002549142700005, -33.74217986495, -23.3512714499, -24.2651558243, -88.46527106189743, -19.853108536399997, -64.88119802805099, -6.590667401000001, -13.8909350301, -32.48499976289, -6.417352772999999, -56.057716312943, -42.000617776050994, -46.81201073349902, -224.20569924450092, -176.05384419060022, -52.90224573689998, -71.20787631766098, -120.04821951457922, -8.224622777499999, -104.72834250421998, -11.777978672000001, -10.5905608217, -32.16328993449, -10.885365074200001, -288.2806400109598, -8.364610409500001, -19.394944325, -18.240637224299995, -104.42154325868398, -29.182813763229998, -91.68882350352496, -103.84233016332006, -17.083756680660002, -35.22756884399999], "mean_logprob": [-1.1413728376842105, -0.7019881456716667, -0.5089054661903012, -0.6096444713392157, -0.4899427428298, -0.49902649087714285, -1.2904507258738318, -0.5144942368, -0.5400129892634615, -0.37882568582494625, -0.6537827233363637, -0.5158144074519179, -1.0106834496666666, -0.5616614069839394, -0.4786224436125, -0.9242810476166666, -0.5817617218094828, -0.6868021014676471, -0.6740321062305555, -0.29488423687299165, -0.5672316724685714, -0.49527632082481676, -0.4707619572142857, -0.6314061377318182, -0.2707083313574167, -0.5833957066363636, -0.4557537911621382, -0.2876754642195274, -0.15604003577833, -0.7473523308150033, -0.586846147302, -0.6223793616105883, -0.2647132948611933, -0.4001607317152639, -0.632663290576923, -0.7222644310635862, -0.9059983593846155, -0.3025874520485714, -0.6843253177551064, -0.5729139512736843, -1.379333205794067, -0.6434315699615385, -1.2929962883333332, -0.4800167690605263, -0.652634645366775, -0.6786700875169768, -0.3056294116784167, -0.46566067337811656, -0.3486480955236735, -0.677453247]}
{"prompt": "'''\nCQXYM found a rectangle A of size n \u00d7 m. There are n rows and m columns of blocks. Each block of the rectangle is an obsidian block or empty. CQXYM can change an obsidian block to an empty block or an empty block to an obsidian block in one operation.\n\nA rectangle M size of a \u00d7 b is called a portal if and only if it satisfies the following conditions:\n\n  * a \u2265 5,b \u2265 4. \n  * For all 1 < x < a, blocks M_{x,1} and M_{x,b} are obsidian blocks. \n  * For all 1 < x < b, blocks M_{1,x} and M_{a,x} are obsidian blocks. \n  * For all 1<x<a,1<y<b, block M_{x,y} is an empty block. \n  * M_{1, 1}, M_{1, b}, M_{a, 1}, M_{a, b} can be any type. \n\nNote that the there must be a rows and b columns, not b rows and a columns.\n\nNote that corners can be any type\n\nCQXYM wants to know the minimum number of operations he needs to make at least one sub-rectangle a portal.\n\nInput\n\nThe first line contains an integer t (t \u2265 1), which is the number of test cases.\n\nFor each test case, the first line contains two integers n and m (5 \u2264 n \u2264 400, 4 \u2264 m \u2264 400). \n\nThen n lines follow, each line contains m characters 0 or 1. If the j-th character of i-th line is 0, block A_{i,j} is an empty block. Otherwise, block A_{i,j} is an obsidian block.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 400.\n\nIt is guaranteed that the sum of m over all test cases does not exceed 400.\n\nOutput\n\nOutput t answers, and each answer in a line.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n7 7\n0111110\n0111110\n0111110\n0111110\n0111110\n0111110\n0111110\n6 6\n001100\n001100\n001100\n001100\n001100\n001100\n''') == '''\n1\n4\n'''\n\n#\nassert solution('''\n3\n5 5\n01110\n01110\n01110\n01110\n01110\n5 5\n01110\n01110\n01110\n01110\n11110\n5 5\n01110\n01110\n01110\n01110\n11111\n''') == '''\n1\n2\n0\n'''\n\n#\nassert solution('''\n3\n5 5\n11111\n11111\n11111\n11111\n11111\n5 5\n01110\n01110\n01110\n01110\n01110\n5 5\n11110\n11110\n11110\n11110\n11110\n''') == '''\n1\n0\n1\n'''", "solution(my_input) == my_output\nassert solution(my_input2) == my_output2\nassert solution(my_input3) == my_output3", "solution(\"\"\"1\n5 4\n0110\n1010\n0110\n1010\n1110\"\"\") == \"1\"\nassert solution(\"\"\"1\n5 4\n0111\n1111\n1111\n1111\n1111\"\"\") == \"0\"\nassert solution(\"\"\"1\n5 4\n0111\n1111\n0111\n1111\n0111\"\"\") == \"0\"\nassert solution(\"\"\"1\n5 4\n0011\n1111\n0011\n1111\n0111\"\"\") == \"0\"\nassert solution(\"\"\"1\n5 4\n0000\n1111\n0111\n1111\n0000\"\"\") == \"2\"\nassert solution(\"\"\"1\n5 4\n0000\n1111\n0111\n1111\n0100\"\"\") == \"3\"\nassert solution(\"\"\"1\n5 4\n0000\n1111\n0111\n1111\n0110\"\"\") == \"2\"\nassert solution(\"\"\"1\n5 4\n0000\n1111\n0111\n1111\n0011\"\"\") == \"3\"\nassert solution(\"\"\"1\n5 4\n0000\n1111\n0111\n1111\n0010\"\"\") == \"3\"\nassert solution(\"\"\"1\n5 4\n0001\n1111\n0111\n1111\n0000\"\"\") == \"2\"\nassert solution(\"\"\"1\n5 4\n0000\n1111\n0111\n1110\n0000\"\"\") == \"3\"\nassert solution(\"\"\"", "solution('''\n1\n5 7\n1100000\n0100000\n1000000\n1000000\n1000000\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n10 10\n1001001100\n1001000100\n1001000100\n1001000100\n1001000100\n1001000100\n1001000100\n1001000100\n1001000100\n1001001100\n''') == '''\n3\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n10 10\n1001001100\n1001000100\n1001000100\n1001000100\n1001000100\n1001000100\n1001000100\n1001000100\n1001000100\n1001001100\n5 7\n1100000\n0100000\n1000000\n1000000\n1000000\n5 7\n1100000\n0100000\n1000000\n1000000\n1000000\n''') == '''\n3\n1\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n5 7\n1100000\n0100000\n1000000\n1000000\n1000000\n5 7\n1100000\n0100000\n1000000\n1000000\n1000000\n5 7\n1100000\n0100000\n1000000\n1000000\n1000000\n5 7\n1100000\n0100000\n1000000\n", "solution('''\n1\n10 10\n1111110000\n1111110000\n1100001111\n1100001111\n1111111111\n1111111111\n1111111111\n1111111111\n1111111111\n1111111111\n''') == '5'\nassert solution('''\n1\n3 3\n111\n111\n111\n''') == '-1'\nassert solution('''\n1\n5 5\n11111\n11111\n11111\n11111\n11111\n''') == '-1'\nassert solution('''\n1\n6 4\n1111\n1111\n0000\n0000\n1111\n1111\n''') == '5'\nassert solution('''\n1\n7 4\n1111\n1111\n0000\n0000\n1111\n1111\n1111\n''') == '3'\nassert solution('''\n1\n7 4\n1111\n1111\n1111\n1111\n1111\n1111\n1111\n''') == '-1'\nassert solution('''\n1\n7 4\n1111\n1111\n1111\n1111\n1111\n1111\n1110\n''') == '1'\nassert solution('''\n1\n6 4\n1111\n1111\n1111\n1111\n1111\n1111\n''') == '-1'\nassert solution('''\n1\n5 5\n11111\n11111\n11111\n11111\n11111", "solution(sample_input) == sample_output\n\n# check the performance of solution\n# from utils import get_current_time_ms\n# from random import randint\n# sample_input = \"\"\n# for i in range(randint(1, 10)):\n#     n = randint(5, 400)\n#     m = randint(4, 400)\n#     sample_input += f\"{n} {m}\\n\"\n#     for i in range(n):\n#         sample_input += \"\".join([str(randint(0, 1)) for j in range(m)]) + \"\\n\"\n# start = get_current_time_ms()\n# solution(sample_input)\n# print(f\"Performance: {get_current_time_ms() - start}ms\")", "solution(\"\") == \"\"\n\n# check the performance of solution\nassert solution(\"\") == \"\"", "solution('''\n2\n5 4\n0100\n0101\n1111\n0101\n0101\n5 5\n11111\n01111\n00111\n11111\n11111\n''') == '''\n2\n6\n'''", "solution(\"\"\"\n1\n5 5\n01011\n01000\n01011\n01011\n01011\n\"\"\") == \"\"\"\n6\n\"\"\", \"Sample 1\"\n\nassert solution(\"\"\"\n1\n9 5\n01100\n01100\n01100\n01100\n01100\n01100\n01100\n01100\n01100\n\"\"\") == \"\"\"\n5\n\"\"\", \"Sample 2\"\n\nassert solution(\"\"\"\n1\n4 5\n01110\n01110\n01110\n01110\n\"\"\") == \"\"\"\n-1\n\"\"\", \"Sample 3\"", "solution('''1\n8 8\n01010101\n01000101\n01010101\n01010101\n01010101\n01010101\n01010101\n01010101''') == '''2'''\n\nassert solution('''1\n5 5\n11111\n01010\n01010\n01010\n11111''') == '''0'''\n\nassert solution('''1\n6 6\n000000\n000001\n000001\n000001\n000001\n000000''') == '''5'''\n\nassert solution('''1\n5 5\n11111\n01010\n01010\n01010\n11111''') == '''0'''\n\n# get input\ndef get_input() -> str:\n    return open('input.txt', 'r').read()\n\n# get output\ndef get_output() -> str:\n    return open('output.txt', 'r').read()\n\n# assert output\ndef test_output(input: str, output: str) -> bool:\n    solution_output = solution(input)\n    return solution_output == output\n\n# assert all testcases\ndef test_all():\n    # get input\n    _input = get_input()\n    # get output\n    _output = get_output()\n    # get test", "solution('''\n2\n10 4\n1010\n1010\n0101\n0101\n1110\n1110\n0101\n0101\n1010\n1010\n6 5\n11111\n11111\n11111\n11111\n11111\n11111\n''') == '''\n2\n6\n'''", "solution('''\n1\n5 4\n1100\n0011\n0011\n1100\n0011\n''') == '''\n1\n'''\n\nassert solution('''\n2\n5 4\n1100\n0011\n0011\n1100\n0011\n5 4\n1111\n1111\n1100\n1111\n1111\n''') == '''\n1\n0\n'''", "solution(test_case_1) == test_result_1, f'expected {test_result_1}, but got {solution(test_case_1)}'", "solution(readfile(\"test1.txt\")) == readfile(\"ans1.txt\")\nassert solution(readfile(\"test2.txt\")) == readfile(\"ans2.txt\")\nassert solution(readfile(\"test3.txt\")) == readfile(\"ans3.txt\")\nassert solution(readfile(\"test4.txt\")) == readfile(\"ans4.txt\")\nassert solution(readfile(\"test5.txt\")) == readfile(\"ans5.txt\")\nassert solution(readfile(\"test6.txt\")) == readfile(\"ans6.txt\")\nassert solution(readfile(\"test7.txt\")) == readfile(\"ans7.txt\")\nassert solution(readfile(\"test8.txt\")) == readfile(\"ans8.txt\")\nassert solution(readfile(\"test9.txt\")) == readfile(\"ans9.txt\")\nassert solution(readfile(\"test10.txt\")) == readfile(\"ans10.txt\")\nassert solution(readfile(\"test11.txt\")) == readfile(\"ans11.txt\")\nassert solution(readfile(\"test12.txt\")) == readfile(\"ans12.txt\")\nassert solution(readfile(\"test13.txt\")) == readfile(\"ans13.txt\")\nassert solution(readfile(\"test14.txt\")) == readfile(\"ans14.txt\")\nassert solution(readfile(\"test", "solution(stdin='''\n1\n5 4\n0110\n0110\n1110\n1110\n0110\n''') == '''\n5\n'''\n\nassert solution(stdin='''\n1\n8 7\n1111110\n1011110\n1111110\n1011110\n1111110\n1110111\n1111110\n1000110\n''') == '''\n4\n'''\n\n# for more detail, check this below link\n# https://discuss.codechef.com/t/cqxym-problem-solution/39121\n\n# submission : https://www.codechef.com/viewsolution/28173580", "solution(\"\"\"\n2\n6 5\n00000\n00000\n00000\n00000\n00000\n00000\n5 6\n000000\n100000\n100100\n100100\n100000\n\"\"\") == \"\"\"\n2\n5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n17 17\n0100001000001000\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n0000010000010000\n0000010000010000\n0000010000010000\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n1000000000000000\n1000000000000000\n19 17\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n0000000001000000\n0000010000010000\n0000010000010000\n0000010000010000\n0000010000010000\n0000010000010000\n0000010000010000\n0000010000010000\n0000010000010000\n0000010000010000\n0000010000010000\n1000000000000000\n20 15\n000000000001000\n000000000001000\n000000000001000\n000000000001000\n000000000001000\n000000000001000\n000000000001000\n000000000001000\n000000000001000\n000000000001000\n000000000001000\n000000000001000\n000000000001000", "solution(\n'''\n3\n5 4\n0001\n0100\n0100\n0100\n0001\n5 7\n1111111\n1000000\n1000000\n1000000\n1111111\n5 7\n0100000\n0100000\n0100000\n0100000\n0100000\n'''\n) == '''\n1\n1\n10\n'''", "solution('''\n1\n7 8\n11111110\n11111110\n11011110\n10111110\n10111110\n11111110\n11111110\n''') == '6'\n\n# testcase for debugging\nDEBUG_INPUT = '''\n4\n5 4\n1001\n1010\n1100\n1010\n1100\n10 3\n110\n000\n010\n5 5\n01010\n11111\n11011\n11111\n01010\n5 5\n11111\n01010\n01010\n01010\n11111\n'''\n\ndef input():\n    return DEBUG_INPUT.strip()\n\ndef main():\n    # add stdin to sys.stdin\n    sys.stdin = io.StringIO(input())\n    stdin = sys.stdin.readlines()\n    res = solution(stdin)\n    print(res)\n\nif __name__ == '__main__':\n    main()", "solution('''\n1\n5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '''\n1\n'''\n\n# read input\nstdin = open('input.txt', 'r')\ninput = stdin.read().strip()\n\n# get solution\nanswer = solution(input)\n\n# write output\nwith open('output.txt', 'w') as f:\n    f.write(answer)", "solution('''\n1\n5 5\n00000\n00000\n11111\n00000\n00000\n''') == '2'\n\nassert solution('''\n1\n5 5\n11111\n01110\n01110\n01110\n11111\n''') == '0'\n\nassert solution('''\n1\n6 4\n1100\n1111\n1111\n1111\n1100\n1100\n''') == '3'\n\nassert solution('''\n1\n5 5\n00100\n00000\n00100\n00000\n00100\n''') == '10'\n\n# test for large inputs\nfrom random import randint\nt = 10\nprint(t)\nfor _ in range(t):\n    n = 400\n    m = 400\n    print(n, m)\n    grid = [[randint(0, 1) for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            print(grid[i][j], end='')\n        print()", "solution(\"3\\n5 5\\n01010\\n01010\\n01010\\n01010\\n01010\\n5 4\\n0101\\n0101\\n0101\\n0101\\n0101\\n5 5\\n01110\\n01110\\n01110\\n01110\\n01110\") == \"3\\n5\\n0\", \"check your logic\"\n# print(\"all test cases passed\")", "solution('''\n1\n5 5\n01010\n01010\n01010\n01010\n01010\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 4\n0101\n0101\n0101\n0101\n0101\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 5\n01010\n01010\n01010\n01010\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 5\n01010\n01010\n01010\n01010\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 6\n010010\n010010\n010010\n010010\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6 6\n101010\n101010\n101010\n101010\n101010\n101010\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6 6\n010101\n010101\n010101\n010101\n010101\n010101\n''", "solution(\"\"\"2\n5 4\n1110\n1100\n1111\n1100\n1110\n7 7\n1111111\n1000001\n1010001\n1010001\n1010001\n1000001\n1111111\"\"\") == \"\"\"3\n0\"\"\", \"Solution passed the test case\"\n\n# ========================================== #\n#               Test Case 3\n# ========================================== #\n\n'''\nSample Input\n4\n4 4\n1110\n1100\n1110\n1111\n7 7\n1111111\n1000001\n1010001\n1010001\n1010001\n1000001\n1111111\n4 4\n1111\n0000\n1111\n0000\n5 4\n0011\n1100\n1100\n1100\n1111\n\nSample Output\n3\n2\n5\n5\n'''\n\n# ========================================== #\n#              Test Case 4\n# ========================================== #\n\n'''\nSample Input\n3\n5 6\n100000\n100100\n100100\n100100\n100100\n6 6\n110000\n100100\n100100\n100100\n100100\n100000\n5 6\n111000\n100100\n100100\n100100\n111100\n\nSample Output\n4\n4\n4\n'''\n\n# ========================================== #\n#              Test Case 5\n# ========================================== #\n\n'''\nSample Input\n2\n5 6\n100000\n100100\n", "solution('''\n1\n5 7\n1 1 1 1 1 1 1\n1 0 0 0 0 0 1\n1 0 0 0 0 0 1\n1 0 0 0 0 0 1\n1 1 1 1 1 1 1\n''') == '''\n18\n'''\n\nassert solution('''\n1\n7 5\n1 1 1 1 1\n1 0 0 0 1\n1 0 0 0 1\n1 0 0 0 1\n1 1 1 1 1\n''') == '''\n18\n'''\n\nassert solution('''\n1\n1 1\n1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1 1\n0\n''') == '''\n1\n'''\n\nassert solution('''\n1\n4 4\n1 1 1 1\n1 0 0 1\n1 0 0 1\n1 1 1 1\n''') == '''\n6\n'''\n\nassert solution('''\n1\n4 4\n1 1 1 1\n1 0 0 1\n1 0 0 1\n1 1 1 0\n''') == '''\n9\n'''\n\nassert solution('''\n1\n4 5\n1 1 1 1 1\n1 0 0 0 1\n1 0 0 0 1\n1 1 1 1 1\n''') == '''\n12\n'''\n\nassert solution", "solution('''\n1\n5 4\n0100\n1110\n0110\n0110\n1100\n''') == '3'\n\nassert solution('''\n1\n5 4\n0110\n1110\n0110\n0110\n1100\n''') == '2'\n\nassert solution('''\n1\n5 4\n0110\n1110\n1110\n0110\n1100\n''') == '1'\n\nassert solution('''\n1\n5 4\n0110\n1110\n0110\n1110\n1100\n''') == '1'\n\nassert solution('''\n1\n5 4\n0110\n1110\n0110\n0110\n1110\n''') == '1'\n\nassert solution('''\n1\n5 4\n1110\n1110\n0110\n0110\n1100\n''') == '0'\n\n# test the performance of solution\nfrom utils import *\nwith Timer() as t:\n    for i in range(0, 100):\n        assert solution('''\n1\n5 4\n0110\n1110\n0110\n0110\n1100\n''') == '2'\n\ncProfile.run('solution(...)')", "solution(\"\") == \"\", \"not correct\"\nprint(\"passed all tests\")", "solution(\"\"\"\n5\n5 5\n11111\n10000\n10000\n10000\n11111\n3 5\n10101\n00100\n10101\n6 7\n1111111\n1000001\n1000001\n1000001\n1000001\n1111111\n6 5\n11111\n10000\n10000\n10000\n10000\n11111\n4 4\n0110\n0110\n0110\n0110\n\"\"\") == \"\"\"\n7\n6\n15\n2\n16\n\"\"\"", "solution(solution_input1) == solution_output1, 'Wrong Answer: Test 1'\nassert solution(solution_input2) == solution_output2, 'Wrong Answer: Test 2'\n\n# get the code\ncode = __import__('inspect').getsource(solution)\n\nprint(f'Your code:\\n{code}')\n\n# check the code format\nif not code.startswith('def solution'):\n    raise RuntimeError('Your solution should be a function named solution.')\n\nif not all(map(lambda x: x.startswith(' ' * 4), code.split('\\n')[1:])):\n    raise RuntimeError('Your code should be indented by 4 spaces.')\n\n# check the code size\nimport tokenize\nsource = tokenize.untokenize(tokenize.generate_tokens(lambda L=iter(code.split('\\n')): next(L)))\nsource = source.encode('utf-8')\nif len(source) > 5000:\n    raise RuntimeError('Your code should not exceed 5000 bytes.')\n\n# submit\ndef submit_solution(solution_output: str) -> bool:\n    from hashlib import md5\n    from requests import post\n    from urllib.parse import urlencode\n", "solution('''\n1\n4 5\n00000\n00000\n00000\n00000\n''') == '3'\nassert solution('''\n1\n6 9\n000000001\n100000000\n000000000\n000000000\n000000000\n000000001\n''') == '12'\nassert solution('''\n1\n3 4\n1111\n1111\n1111\n''') == '-1'\nassert solution('''\n1\n5 5\n00100\n00000\n00000\n00000\n00000\n''') == '2'\nassert solution('''\n1\n6 8\n00000001\n00001000\n00010000\n00100000\n01000000\n10000000\n''') == '13'\nassert solution('''\n1\n10 10\n0000000000\n0001010100\n0010101010\n0101010101\n0101010101\n0101010101\n0101010101\n0101010101\n0001010100\n0000000000\n''') == '12'\nassert solution('''\n1\n9 9\n000000001\n000000010\n000000100\n000001000\n000010000\n000100000\n001000000\n010000000\n100000000\n''') == '15'\nassert solution('''\n1\n15 16\n0100000000000001\n0011111111111100\n0011111111111100\n0011111111111100\n00", "solution('''\n1\n5 5\n11001\n11000\n11111\n11111\n11111\n''') == '''\n5\n'''\nassert solution('''\n2\n2 3\n110\n011\n5 5\n11011\n10011\n10011\n10011\n11111\n''') == '''\n3\n3\n'''\nassert solution('''\n1\n10 10\n1011100101\n1011101101\n1011101101\n1011101101\n1011101101\n1011101101\n1011101101\n1011101101\n1011101101\n1011101101\n''') == '''\n22\n'''\n\nprint(solution('''\n4\n6 4\n0111\n0111\n0111\n0111\n0111\n0111\n5 5\n11011\n10011\n10011\n10011\n11111\n5 5\n11001\n11000\n11111\n11111\n11111\n5 5\n11011\n10011\n10011\n10011\n11111\n'''))", "solution(\"\") == \"\", \"sample\"\nassert solution(\"\") == \"\", \"sample\"\nassert solution(\"\") == \"\", \"sample\"\nassert solution(\"\") == \"\", \"sample\"\nassert solution(\"\") == \"\", \"sample\"\n\n# check performance of solution\ndef test_perf(n: int = 10000) -> None:\n    from time import time\n    from random import randint\n    from itertools import product\n    from string import ascii_lowercase\n    from re import match\n\n    in_lines = list()\n    for _ in range(n):\n        a = randint(5, 400)\n        b = randint(4, 400)\n        in_lines.append(f\"{a} {b}\")\n        for _ in range(a):\n            in_lines.append(\"\".join([\"1\" if randint(0,1) else \"0\" for _ in range(b)]))\n\n    start = time()\n    out_lines = solution(\"\\n\".join(in_lines))\n    assert len(out_lines.splitlines()) == n\n    for line in out_lines.splitlines():\n        assert match(r\"^[0-9]+$\", line)\n    print(f\"Duration: {time() - start}\")\n\n# test solution performance", "solution('''\n2\n5 4\n0000\n0110\n0110\n0110\n0000\n5 4\n1000\n1110\n1110\n1110\n1000\n''') == '''\n5\n5\n'''\n\n#\n# auto-testing\n#\nimport pprint\nimport sys\n\n#\n# define some useful global variables\n#\nDEBUG = True\n\n#\n# define some useful functions\n#\n\ndef read_str_list(str, delimiter=None) -> list:\n    '''Read a list of strings from a delimiter separated string (e.g. str)\n       return a list of strings\n    '''\n    if delimiter == None:\n        return str.split()\n    else:\n        return str.split(delimiter)\n\ndef convert_int_list(str_list) -> list:\n    '''convert the string items in a list to an integer list\n    '''\n    return [int(x) for x in str_list]\n\ndef convert_float_list(str_list) -> list:\n    '''convert the string items in a list to a float list\n    '''\n    return [float(x) for x in str_list]\n\ndef debug(*argv, **kwargs):\n    '''\n    print debug information", "solution('''\n1\n5 5\n10000\n10000\n01000\n01000\n10000\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5 5\n10000\n10000\n01000\n01000\n10000\n5 5\n10000\n10000\n01000\n01000\n10000\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7 7\n0000000\n0000000\n0000000\n0000000\n0000000\n0000000\n0000000\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5 5\n11111\n10001\n10001\n10001\n11111\n5 5\n11111\n10001\n10001\n10001\n11111\n''') == '''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7 7\n1111111\n1111111\n1111111\n1111111\n1111111\n1111111\n1111111\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n7 7\n1111111\n1111111\n1111111\n1111111\n1111111\n1111111\n1111111\n7 7\n1111111\n1111111", "solution('''\n1\n5 5\n11011\n10001\n10001\n10001\n11011\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4 4\n1111\n0000\n0000\n1111\n4 4\n0111\n0000\n0000\n1011\n5 5\n11011\n10001\n10001\n10001\n11011\n''') == '''\n0\n1\n2\n'''", "solution(\"\"\"\n1\n6 5\n10001\n10001\n10001\n10001\n10001\n10001\n\"\"\") == \"2\"", "solution(\n'''\n1\n6 6\n000000\n000001\n010000\n010000\n000000\n000000\n'''\n) == '1'\n\nassert solution(\n'''\n1\n3 3\n000\n001\n010\n'''\n) == '1'\n\nassert solution(\n'''\n1\n7 7\n0000000\n0100000\n0100000\n0100000\n0000000\n0000000\n0000000\n'''\n) == '1'\n\nassert solution(\n'''\n1\n10 10\n0000000000\n0100000000\n0101000000\n0101000000\n0101000000\n0101000000\n0101000000\n0101000000\n0100000000\n0000000000\n'''\n) == '3'\n\nassert solution(\n'''\n1\n4 4\n0000\n0100\n1000\n0001\n'''\n) == '2'\n\nassert solution(\n'''\n1\n4 4\n0000\n0010\n0000\n0000\n'''\n) == '2'\n\nassert solution(\n'''\n1\n4 4\n0000\n0000\n0000\n0000\n'''\n) == '1'\n\nassert solution(\n'''\n1\n4 4\n1111\n0000\n0000\n0000\n'''\n) == '2'\n\nassert solution(\n'''\n1\n4 4\n1000\n0000\n0000\n0000", "solution(\"\"\"\n2\n6 5\n00000\n00000\n00000\n11000\n01100\n01110\n9 7\n0000000\n0100000\n0011100\n0011110\n0000000\n0000000\n0011110\n0000000\n0000000\n\"\"\") == \"\"\"\n6\n-1\n\"\"\"\n\n# check time limit\nfrom time import time\ntime_limit = 2.0\nassert time() - time() < time_limit, \"Time limit exceeded\"", "solution(\"1\\n5 4\\n0110\\n0110\\n0110\\n0110\\n0110\") == \"1\"\nassert solution(\"1\\n5 5\\n01100\\n01100\\n01100\\n01100\\n01100\") == \"2\"\nassert solution(\"1\\n5 5\\n01100\\n01100\\n01010\\n01010\\n01010\") == \"3\"\nassert solution(\"1\\n5 5\\n00000\\n11111\\n00000\\n11111\\n00000\") == \"15\"\nassert solution(\"1\\n9 9\\n111111111\\n000000001\\n000000001\\n000000001\\n000000001\\n000000001\\n000000001\\n000000001\\n111111111\") == \"18\"\nassert solution(\"1\\n10 13\\n0000000000000\\n0000000000000\\n0000000000000\\n0000000000000\\n0000000000000\\n0000000000000\\n0000000000000\\n0000000000000\\n0000000000000\\n0000000000000\") == \"19\"\nassert solution(\"1\\n5 5\\n01110\\n01110\\n01110\\n01110\\n01110\") == \"1\"\nassert solution(\"1\\n5 5\\n01010\\n01010\\n01010\\n01010\\n01010", "solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\n\n# get input from stdin\ndef get_input() -> str:\n    return stdin_data\n\nif __name__ == '__main__':\n    stdin_data = \"\"\"\n    \"\"\"\n    # print solution(get_input())", "solution('''2\n5 4\n0111\n1111\n1011\n1101\n1110\n5 4\n1110\n1101\n1011\n1111\n0111''') == '''2\n2'''", "solution(example1) == answer1\n\n# run the solution\nprint(solution(input))", "solution('''2\n9 5\n01010\n11010\n11110\n11110\n11010\n11010\n11110\n11110\n11010\n9 5\n11110\n11010\n11010\n11110\n11110\n11010\n11010\n11110\n11110\n''') == '''1\n0\n'''\n\n# print the solution\ndef main():\n    print(solution(stdin))\n\nif __name__ == '__main__':\n    main()", "solution('''\n3\n7 6\n001100\n001100\n001100\n001100\n001100\n001100\n001100\n11 11\n0110110111\n0011101110\n0011101110\n0011101110\n0011101110\n0011101110\n0011101110\n0011101110\n0011101110\n0110110111\n11 11\n00110011100\n00110011100\n00110011100\n11001100111\n11000011100\n00110011100\n11001100111\n11000011100\n00110011100\n00110011100\n''') == '''\n5\n6\n5\n'''\nprint('done')\n\n'''\nusing numpy to solve this is really quick\n'''\nimport numpy as np\ndef solution(stdin: str) -> str:\n    res = []\n    for _ in range(int(stdin.split('\\n')[0])):\n        rows, cols = stdin.split('\\n')[1].split()\n        rows, cols = int(rows), int(cols)\n        matrix = np.zeros((rows, cols))\n        for i in range(rows):\n            line = stdin.split('\\n')[i+2]\n            for j in range(cols", "solution(test_data) == test_output\n\n\n# get the input data\nwith open('../input.txt', 'r') as input_file:\n    input_data = input_file.read()\n\n# run the solution\nsolution(input_data)", "solution(solve_test_case()) == \"Case #1: 1\\nCase #2: 0\\nCase #3: 4\\nCase #4: 2\\nCase #5: 4\\nCase #6: 4\\nCase #7: 4\\nCase #8: 4\\nCase #9: 4\\nCase #10: 4\\nCase #11: 4\\nCase #12: 4\\nCase #13: 5\\nCase #14: 4\\nCase #15: 5\\nCase #16: 4\\nCase #17: 5\\nCase #18: 4\\nCase #19: 3\\nCase #20: 5\\nCase #21: 5\\nCase #22: 4\\nCase #23: 4\\nCase #24: 4\\nCase #25: 4\\nCase #26: 4\\nCase #27: 4\\nCase #28: 4\\nCase #29: 5\\nCase #30: 4\\nCase #31: 5\\nCase #32: 4\\nCase #33: 4\\nCase #34: 3\\nCase #35: 3\\nCase #36: 5\\nCase #37: 5\\nCase #38: 5\\nCase #39: 5\\nCase #40: 5\\nCase #41: 5\\nCase #", "solution('''1\n5 4\n0111\n1100\n1100\n1100\n0111''') == '2'\nassert solution('''1\n6 6\n011111\n100011\n101110\n111010\n100011\n011111''') == '4'\nassert solution('''1\n5 5\n01111\n10001\n10011\n10001\n01111''') == '6'\nassert solution('''1\n6 5\n01111\n10001\n10011\n10001\n10001\n01111''') == '3'\nassert solution('''1\n6 5\n01111\n11101\n11101\n11101\n11101\n01111''') == '2'\nassert solution('''1\n6 5\n01111\n11001\n11001\n11001\n11001\n01111''') == '0'\nassert solution('''1\n6 5\n01111\n11101\n11101\n11101\n11101\n01110''') == '1'\nassert solution('''1\n6 5\n11111\n11101\n11101\n11101\n11101\n01111''') == '1'\nassert solution('''1\n6 5\n01111\n11111\n11101\n11101\n11101\n01111''') == '1'\nassert solution(", "solution(EXAMPLE_INPUT) == EXAMPLE_OUTPUT", "solution(\"\"\"\n2\n8 5\n11110\n11111\n11010\n11010\n11010\n11010\n11111\n11110\n10 10\n1111111111\n1100000111\n1100000111\n1100000111\n1100000111\n1100000111\n1100000111\n1100000111\n1111111111\n1111111111\n\"\"\") == \"\"\"\n3\n0\n\"\"\"\n\n# # submit\n# def submit():\n#     from google.colab import files\n#     from os.path import basename\n#     from IPython.display import HTML\n\n#     # store local copy\n#     !pip install -U py-validate\n#     import py_validate\n#     import os\n#     import shutil\n#     DIR = \"/content/submission\"\n#     py_validate.clean_dir(DIR)\n#     py_validate.copy_dir(\"src\", DIR)\n#     stdin = py_validate.get_input(\"https://raw.githubusercontent.com/stomachacheGE/Codeforces/master/codeforces/%s/stdin.txt\" % py_validate.get_problem_slug())\n#     with open(os.path.join(DIR, \"stdin.txt\"), \"w", "solution(stdin='''\n1\n1 2\n01\n''') == '''\n0\n'''\n\nassert solution(stdin='''\n1\n2 2\n01\n11\n''') == '''\n2\n'''\n\nassert solution(stdin='''\n1\n5 4\n1000\n1111\n1000\n1111\n1000\n''') == '''\n4\n'''\n\nassert solution(stdin='''\n1\n5 4\n0000\n1111\n0000\n1111\n0000\n''') == '''\n2\n'''\n\nassert solution(stdin='''\n1\n5 4\n0000\n1110\n0110\n1110\n0000\n''') == '''\n4\n'''\n\nassert solution(stdin='''\n1\n5 4\n0000\n1110\n0110\n1110\n0000\n''') == '''\n4\n'''\n\nassert solution(stdin='''\n1\n5 4\n0000\n0000\n0000\n0000\n0000\n''') == '''\n2\n'''\n\nassert solution(stdin='''\n1\n5 4\n1111\n1111\n1111\n1111\n1111\n''') == '''\n7\n'''\n\nassert solution(stdin='''\n1\n7 4\n1111\n1111\n1000\n1111", "solution('''\n1\n5 5\n01110\n11110\n11110\n11110\n01110\n''') == '''\n5\n'''\n\nassert solution('''\n2\n5 5\n01110\n11110\n11110\n11110\n01110\n5 5\n11111\n11111\n11111\n11111\n11111\n''') == '''\n5\n20\n'''\n\nassert solution('''\n3\n5 5\n01110\n11110\n11110\n11110\n01110\n5 5\n11111\n11111\n11111\n11111\n11111\n5 10\n0111111110\n0111111110\n0111111110\n0111111110\n0111111110\n''') == '''\n5\n20\n0\n'''\n\nassert solution('''\n4\n6 4\n0111\n1111\n1111\n1111\n0111\n0111\n6 4\n1111\n1111\n1111\n1111\n1111\n1111\n6 5\n01111\n11111\n11111\n11111\n01111\n01111\n6 5\n11111\n11111\n11111\n11111\n11111\n11111\n''') == '''\n0\n5\n5\n20\n'''\n\nassert solution('''\n5\n5 5\n01110\n11110"], "finish_reason": ["stop", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length"], "sum_logprob": [-80.94349352901799, -16.82822309898, -96.95412685982994, -82.00465197795397, -89.75940658919652, -64.24072969831298, -10.554245671000002, -35.12570284726, -57.71402404096004, -124.21177969229804, -36.35064858979, -34.02710782156, -24.227011938829996, -24.329709072550028, -137.13560368926093, -116.07125871975397, -47.891470502983985, -136.55711858365402, -51.37627790709997, -92.68179014621002, -53.946569192053005, -58.24442000901501, -186.79771317313, -60.33307129605898, -91.35052045551004, -16.323084880000003, -65.09513846268999, -148.06947939760178, -138.66979045016, -106.6549119526029, -121.93442194614349, -199.27804458880007, -64.02448128038799, -45.42557001244999, -19.090513715260002, -112.87466103907404, -83.04326018812004, -92.573666319833, -47.455220947171995, -30.79756954087999, -21.554644725899998, -58.374331696719985, -153.42610297600405, -32.10322629669002, -77.6040394894611, -108.02108528710298, -8.99754979954, -201.71756656065787, -89.14667783874395, -78.77690234094095], "mean_logprob": [-0.34889436865956036, -0.43149289997384616, -0.3231804228661, -0.2733488399265133, -0.2991980219639883, -0.3453802671952312, -0.5025831271904762, -0.6504759786529629, -0.45089081282, -0.41403926564099336, -0.4912249809431081, -0.4003189155477647, -0.6212054343289743, -0.08109903024183333, -0.8847458302532968, -0.38690419573251333, -0.6471820338241081, -0.6351493887611814, -0.43539218565338983, -0.39439059636685103, -0.5341244474460694, -0.19414806669671666, -0.6226590439104334, -0.20111023765353, -0.3333960600566058, -0.8591097305263158, -0.6319916355600971, -0.49356493132534, -0.4622326348338667, -0.4371102948877172, -0.40644807315381165, -0.6642601486293334, -0.21341493760129335, -0.41674834873807337, -0.5614856975076471, -0.37624887013024666, -0.8304326018812, -0.30857888773277664, -0.5392638743996818, -0.6159513908176, -0.9371584663434782, -0.5120555411992983, -0.5114203432533466, -0.5262823983063935, -0.2586801316315367, -0.3600702842903433, -0.49986387775222224, -0.6723918885355267, -0.29715559279581333, -0.26258967446980336]}
{"prompt": "'''\nLet c_1, c_2, \u2026, c_n be a permutation of integers 1, 2, \u2026, n. Consider all subsegments of this permutation containing an integer x. Given an integer m, we call the integer x good if there are exactly m different values of maximum on these subsegments.\n\nCirno is studying mathematics, and the teacher asks her to count the number of permutations of length n with exactly k good numbers.\n\nUnfortunately, Cirno isn't good at mathematics, and she can't answer this question. Therefore, she asks you for help.\n\nSince the answer may be very big, you only need to tell her the number of permutations modulo p.\n\nA permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nA sequence a is a subsegment of a sequence b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains four integers n, m, k, p (1 \u2264 n \u2264 100, 1 \u2264 m \u2264 n, 1 \u2264 k \u2264 n, 1 \u2264 p \u2264 10^9).\n\nOutput\n\nOutput the number of permutations modulo p.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n4 2 2 10\n''') == '''\n15\n'''\n\nassert solution('''\n5 1 3 1000\n''') == '''\n134\n'''\n\nassert solution('''\n10 1 4 10**9+7\n''') == '''\n2654435701\n'''", "solution('''\n5 2 2 1000000007\n''') == '''\n41\n'''\n\nassert solution('''\n10 3 3 1000000007\n''') == '''\n226784947\n'''\n\nassert solution('''\n10 2 4 1000000007\n''') == '''\n754737003\n'''\n\nassert solution('''\n10 2 1 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n3 1 2 1000000007\n''') == '''\n6\n'''\n\nassert solution('''\n7 1 1 1000000007\n''') == '''\n1\n'''\n\nassert solution('''\n3 2 2 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n4 3 3 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n10 4 1 1000000007\n''') == '''\n1520\n'''\n\nassert solution('''\n50 15 1 1000000007\n''') == '''\n109357929\n'''\n\nassert solution('''\n50 25 1 1000000007\n''') == '''\n183899526\n'''\n\nassert solution('''\n50 50 1 1000000007\n", "solution('''\n4 1 2\n''') == '''\n5\n'''\n\nassert solution('''\n5 2 1\n''') == '''\n15\n'''\n\nassert solution('''\n5 3 2\n''') == '''\n8\n'''\n\nassert solution('''\n5 3 3\n''') == '''\n0\n'''\n\n# obtain a solution\nsolution(open('tests/0009/input.1.txt').read())", "solution(inp) == res\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n)\n\n# test cases\ntest('''\n''',\n'''\n'''\n", "\"87654321\" == solution(\"\")\n\n# check the correctness of solution\nassert \"123456789\" == solution(\"\")", "solution('''\n8 2 1 998244353\n''') == '155312'\n\n# import html_template\n# print(html_template.html_template(solution=solution, default_input=\"\"\"\n# 4 2 2 998244353\n# \"\"\"))", "int(solution('''4 2 2 1000000007''')) == 4\nassert int(solution('''4 1 1 1000000007''')) == 6\nassert int(solution('''3 1 1 1000000007''')) == 3\nassert int(solution('''3 1 2 1000000007''')) == 0\nassert int(solution('''3 1 3 1000000007''')) == 0\nassert int(solution('''3 2 1 1000000007''')) == 0\nassert int(solution('''3 2 2 1000000007''')) == 4\nassert int(solution('''3 2 3 1000000007''')) == 0\nassert int(solution('''3 3 1 1000000007''')) == 0\nassert int(solution('''3 3 2 1000000007''')) == 0\nassert int(solution('''3 3 3 1000000007''')) == 0\nassert int(solution('''4 1 1 1000000007''')) == 6\nassert int(solution('''5 1 1 1000000007''')) == 30\nassert int(solution('''5 2 1 1000000007''')) == 0\nassert int(solution('''5 2 2 1000000007''')) == 30\nassert", "solution(\"1 3 5 10\") == \"3\"\nassert solution(\"1 1 1 10\") == \"1\"\nassert solution(\"1 2 3 10\") == \"6\"\nassert solution(\"3 3 3 10\") == \"216\"\nassert solution(\"3 1 3 10\") == \"126\"\nassert solution(\"3 2 3 10\") == \"216\"\nassert solution(\"5 2 4 37\") == \"34\"\nassert solution(\"5 3 4 37\") == \"28\"\nassert solution(\"5 4 4 37\") == \"7\"\nassert solution(\"5 5 4 37\") == \"0\"\nassert solution(\"5 5 5 37\") == \"3\"\nassert solution(\"5 5 5 2\") == \"1\"\nassert solution(\"6 3 3 3\") == \"24\"\nassert solution(\"6 2 5 7\") == \"6\"\nassert solution(\"6 1 6 4\") == \"4\"\nassert solution(\"6 1 6 2\") == \"2\"\nassert solution(\"6 1 6 5\") == \"0\"\nassert solution(\"6 2 6 5\") == \"0\"\nassert solution(\"6 3 6 5\") == \"0\"\nassert solution(\"6 4 6 5\") == \"0\"\nassert solution(\"6 5 6 5\") == \"0\"\nassert solution(\"6 6 6 5\") == \"5\"\nassert solution(\"7 2 6 13\") == \"9\"\nassert solution", "solution('''\n...\n''') == '...'", "solution('''\n4 2 2 1000000007\n''') == '''\n3\n'''\n\nassert solution('''\n4 1 1 1000000007\n''') == '''\n4\n'''\n\nassert solution('''\n5 5 2 1000000007\n''') == '''\n7\n'''\n\nassert solution('''\n5 5 5 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n5 5 3 1000000007\n''') == '''\n8\n'''\n\nassert solution('''\n5 5 1 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n7 1 4 1000000007\n''') == '''\n6\n'''\n\nassert solution('''\n7 2 1 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n7 2 4 1000000007\n''') == '''\n24\n'''\n\nassert solution('''\n7 5 5 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n7 5 4 1000000007\n''') == '''\n120\n'''\n\nassert solution('''\n7 5 3 1000000007\n''') == '''\n45\n'''\n\nassert", "solution(\"\"\"10 5 5 999999017\"\"\") == \"437230652\"\n\n# it might be slow, try to optimize the solution\n\n# compile the solution\nsolution(\"\"\"10 5 5 999999017\"\"\")\n\n# put your input here\nsolution(\"\"\"10 5 5 999999017\"\"\")\n\n# use this command to put the output to a file\n# python3 interactive_runner.py python local_testing_tool.py 0 -- python3 solution.py", "solution(sample_input1) == sample_output1", "solution(\"\"\"a\nb\nc\"\"\") == \"a\"\n\n# get input and output\nstdin = sys.stdin.read()\nif stdin:\n    stdin = stdin.split(\"\\n\")\nelse:\n    stdin = []\n\n# parse input\nn, m, k, p = map(int, stdin[0].split(\" \"))\n\n# compute solution\nsolution = solution(stdin)\n\n# output solution\nprint(solution)", "solution('''5 1 1 1000000007''') == '5'\nassert solution('''6 1 2 1000000007''') == '30'\nassert solution('''10 2 1 1000000007''') == '90'\nassert solution('''10 3 2 1000000007''') == '2520'\nassert solution('''100 3 40 1000000007''') == '121553726'\nassert solution('''100 50 50 1000000007''') == '838642565'\nassert solution('''100 99 100 1000000007''') == '755811558'\nassert solution('''100 100 100 1000000007''') == '0'", "solution(stdin) == \"2\\n\"", "solution('''\n4 2 2 100\n''') == '''\n6\n'''\nassert solution('''\n3 1 2 100\n''') == '''\n2\n'''\nassert solution('''\n3 2 1 100\n''') == '''\n0\n'''\nassert solution('''\n1 1 1 1\n''') == '''\n1\n'''\nassert solution('''\n2 1 1 100\n''') == '''\n2\n'''\nassert solution('''\n2 2 1 100\n''') == '''\n0\n'''\nassert solution('''\n4 2 1 100\n''') == '''\n6\n'''\nassert solution('''\n4 1 1 100\n''') == '''\n24\n'''\nassert solution('''\n4 2 2 100\n''') == '''\n6\n'''\nassert solution('''\n4 3 2 100\n''') == '''\n36\n'''\nassert solution('''\n4 4 2 100\n''') == '''\n60\n'''\nassert solution('''\n4 4 1 100\n''') == '''\n0\n'''\nassert solution('''\n4 1 2 100\n''') == '''\n24\n'''\nassert solution('''\n4 1 2 100\n''') == '", "solution('''4 1 1 1000000007''') == '4'\nassert solution('''4 2 2 1000000007''') == '0'\nassert solution('''4 2 1 1000000007''') == '6'\nassert solution('''4 1 2 1000000007''') == '2'\nassert solution('''10 5 3 1000000007''') == '867'\nassert solution('''100 2 2 1000000007''') == '74956178'\nassert solution('''100 2 1 1000000007''') == '98987522'\nassert solution('''100 1 1 1000000007''') == '9191710'\nassert solution('''100 1 2 1000000007''') == '72719233'\nassert solution('''100 2 3 1000000007''') == '55695590'\nassert solution('''100 2 4 1000000007''') == '17461470'\nassert solution('''100 2 5 1000000007''') == '8783870'\nassert solution('''100 2 6 1000000007''') == '2666140'\nassert solution('''100 2 7 1000000007''') == '888720'\nassert solution('''100 2 8 1000000007''') == '266640'\nassert solution(''", "solution(\"\"\"INPUT\"\"\") == \"OUTPUT\"\n\n# get input\nip = [line.strip() for line in open('input.txt', 'r')]\n\n# open output file\nof = open('output.txt', 'w')\n\n# run solution function and write output\n# for i in range(int(ip[0])):\n#     of.write(solution(ip[i+1]) + '\\n')\n\nof.write(solution(ip[0]))\n\n# close output file\nof.close()", "solution(stdin=\"\"\"\n6 1 1 1000000007\n\"\"\") == \"\"\"\n6\n\"\"\"\nassert solution(stdin=\"\"\"\n6 1 2 1000000007\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(stdin=\"\"\"\n6 2 1 1000000007\n\"\"\") == \"\"\"\n15\n\"\"\"\nassert solution(stdin=\"\"\"\n6 2 2 1000000007\n\"\"\") == \"\"\"\n30\n\"\"\"\nassert solution(stdin=\"\"\"\n6 2 3 1000000007\n\"\"\") == \"\"\"\n12\n\"\"\"\nassert solution(stdin=\"\"\"\n6 2 4 1000000007\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(stdin=\"\"\"\n6 3 1 1000000007\n\"\"\") == \"\"\"\n60\n\"\"\"\nassert solution(stdin=\"\"\"\n6 3 2 1000000007\n\"\"\") == \"\"\"\n240\n\"\"\"\nassert solution(stdin=\"\"\"\n6 3 3 1000000007\n\"\"\") == \"\"\"\n480\n\"\"\"\nassert solution(stdin=\"\"\"\n6 3 4 1000000007\n\"\"\") == \"\"\"\n360\n\"\"\"\nassert solution(stdin=\"\"\"\n6 3 5 1000000007\n\"\"\") == \"\"\"\n120\n\"\"\"\nassert solution(stdin=\"\"\"\n6 3 6 1000000007\n\"\"\") == \"\"\"\n20\n\"\"\"\nassert solution(stdin=\"\"\"\n6 4 1 100000000", "solution(sample) == '1'\n\n# get input for running on a test server\n# def get_input() -> str:\n#     return input()\n\n# def put_output(s: str) -> None:\n#     print(s)\n\n# # run solution on a test server\n# if __name__ == '__main__':\n#     put_output(solution(get_input()))", "solution(\"\"\"2 2 1 3\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"3 1 1 100\"\"\" ) == \"\"\"3\"\"\"\nassert solution(\"\"\"100 50 10 1000\"\"\" ) == \"\"\"87467318\"\"\"\nassert solution(\"\"\"100 50 10 1000000007\"\"\" ) == \"\"\"87467318\"\"\"\nassert solution(\"\"\"100 50 10 998244353\"\"\" ) == \"\"\"4141611\"\"\"\nassert solution(\"\"\"10 10 10 1000000007\"\"\" ) == \"\"\"1\"\"\"\nassert solution(\"\"\"10 10 10 1000\"\"\" ) == \"\"\"1\"\"\"\nassert solution(\"\"\"5 2 1 1000000007\"\"\" ) == \"\"\"12\"\"\"\nassert solution(\"\"\"5 2 1 1000\"\"\" ) == \"\"\"12\"\"\"\nassert solution(\"\"\"5 5 1 1000000007\"\"\" ) == \"\"\"0\"\"\"\nassert solution(\"\"\"5 5 1 1000\"\"\" ) == \"\"\"0\"\"\"\nassert solution(\"\"\"5 5 5 1000000007\"\"\" ) == \"\"\"0\"\"\"\nassert solution(\"\"\"5 5 5 1000\"\"\" ) == \"\"\"0\"\"\"\nassert solution(\"\"\"2 1 1 1000000007\"\"\" ) == \"\"\"2\"\"\"\nassert solution(\"\"\"2 1 1 1000\"\"\" ) == \"\"\"2\"\"\"\nassert solution(\"\"\"3 2 1 1000000007\"\"\" ) == \"\"\"4\"\"\"\nassert solution(\"\"\"3 2 1 1000\"\"\" ) == \"\"\"4\"\"\"\nassert solution(\"\"\"4 3 1 1000000007\"\"\" ) == \"\"\"6\"\"\"\nassert solution(\"\"\"", "solution(\"\"\"\n1 1 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 1 1 10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 2 1 10\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2 2 10\n\"\"\") == \"16\"\nassert solution(\"\"\"\n3 3 3 10\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 1 1 1000\n\"\"\") == \"27\"\nassert solution(\"\"\"\n3 2 2 1000\n\"\"\") == \"2106\"\nassert solution(\"\"\"\n3 3 3 1000\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 1 1 1000\n\"\"\") == \"216\"\nassert solution(\"\"\"\n4 2 2 1000\n\"\"\") == \"222476\"\nassert solution(\"\"\"\n4 3 3 1000\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 1 1 1000\n\"\"\") == \"1890\"\nassert solution(\"\"\"\n5 2 2 1000\n\"\"\") == \"3561296\"\nassert solution(\"\"\"\n5 3 3 1000\n\"\"\") == \"0\"\nassert solution(\"\"\"\n6 1 1 1000\n\"\"\") == \"16320\"\nassert solution(\"\"\"\n6 2 2 1000\n\"\"\") == \"103315136\"\nassert solution(\"\"\"\n6 3 3 1000\n\"\"\") == \"0\"\nassert solution", "solution('''\n4 2 2 10\n''') == '4'\n\nassert solution('''\n3 1 2 10\n''') == '3'\n\nassert solution('''\n3 1 1 10\n''') == '2'\n\nassert solution('''\n3 2 2 10\n''') == '1'\n\n# submitted on https://atcoder.jp/contests/abc159/submissions/16615506\n# is_good = [[-1] * 101 for _ in range(101)]\n# def is_good_num(n, m, x):\n#     if is_good[n][x] != -1:\n#         return is_good[n][x]\n#     ret = 0\n#     for i in range(n):\n#         for j in range(i + 1, n + 1):\n#             if max(a[i:j]) == x:\n#                 ret += 1\n#     is_good[n][x] = ret\n#     return ret\n# from collections import Counter\n# n, m, k, p = map(int, input().split())\n# a = [int(input()) for _ in range(n)]\n# def is_perm(a):\n#     c = Counter(a)\n#     if not all(v == 1 for", "solution(test2) == \"1\"\nassert solution(test1) == \"5\"\nassert solution(test3) == \"1\"\nassert solution(test4) == \"1\"\nassert solution(test5) == \"0\"", "solution(\"\"\"input\"\"\") == \"output\"", "solution(r\"\"\"\n5 2 1 4\n\"\"\") == r\"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(r\"\"\"\n3 2 2 3\n\"\"\") == r\"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(r\"\"\"\n5 2 2 4\n\"\"\") == r\"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(r\"\"\"\n4 3 3 3\n\"\"\") == r\"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(r\"\"\"\n2 3 3 3\n\"\"\") == r\"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(r\"\"\"\n3 3 3 3\n\"\"\") == r\"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(r\"\"\"\n4 4 4 4\n\"\"\") == r\"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(r\"\"\"\n5 1 1 3\n\"\"\") == r\"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(r\"\"\"\n6 4 2 3\n\"\"\") == r\"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(r\"\"\"\n2 2 1 3\n\"\"\") == r\"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(r\"\"\"\n4 2 1 99999", "solution('''3 2 1 1''') == '1'\nassert solution('''3 2 1 2''') == '0'\nassert solution('''3 2 1 3''') == '1'\nassert solution('''4 2 1 1''') == '2'\nassert solution('''4 2 1 2''') == '0'\nassert solution('''4 2 1 3''') == '2'\nassert solution('''4 2 1 4''') == '0'\nassert solution('''4 2 1 5''') == '2'\nassert solution('''4 2 1 6''') == '0'\nassert solution('''4 2 1 7''') == '2'\nassert solution('''4 2 1 8''') == '0'\nassert solution('''4 2 1 9''') == '2'\nassert solution('''4 2 1 10''') == '0'\nassert solution('''4 2 1 11''') == '2'\nassert solution('''4 2 1 12''') == '0'\nassert solution('''4 2 1 13''') == '2'\nassert solution('''4 2 1 14''') == '0'\nassert solution('''4 2 1 15''') == '2'\nassert solution('''4 2 1 16''') == '", "solution(sample_input) == \"0\"", "solution(\"\") == \"\", \"\"\n\n# check the correctness of io\nassert get_io(solution) == \"\"\"\n\n\"\"\", \"\"", "solution(\"\"\"4 1 1 1000000007\"\"\") == \"\"\"4\"\"\", \"example 1 failed\"\nassert solution(\"\"\"4 2 2 1000000007\"\"\") == \"\"\"6\"\"\", \"example 2 failed\"\nassert solution(\"\"\"5 2 2 1000000007\"\"\") == \"\"\"12\"\"\", \"example 3 failed\"\nassert solution(\"\"\"8 3 2 1000000007\"\"\") == \"\"\"804\"\"\", \"example 4 failed\"\nassert solution(\"\"\"10 7 1 1\"\"\") == \"\"\"0\"\"\", \"example 5 failed\"\nassert solution(\"\"\"100 1 10 1000000007\"\"\") == \"\"\"1777777777\"\"\", \"example 6 failed\"\nassert solution(\"\"\"100 7 10 1000000007\"\"\") == \"\"\"0\"\"\", \"example 7 failed\"\nassert solution(\"\"\"2 2 3 1\"\"\") == \"\"\"0\"\"\", \"example 8 failed\"\nassert solution(\"\"\"2 1 1 1\"\"\") == \"\"\"1\"\"\", \"example 9 failed\"\nassert solution(\"\"\"3 1 1 1\"\"\") == \"\"\"2\"\"\", \"example 10 failed\"\nassert solution(\"\"\"3 2 1 1\"\"\") == \"\"\"1\"\"\", \"example 11 failed\"\nassert solution(\"\"\"3 2 1 1\"\"\") == \"\"\"1\"\"\", \"example 12 failed\"\nassert solution(\"\"\"3 3 1 1\"\"\") == \"\"\"0\"\"\", \"example 13 failed\"\nassert solution(\"\"\"4 1 1 1\"\"\") == \"\"\"", "solution(\"\"\"10 3 3 1000000000\"\"\") == \"4\"\nassert solution(\"\"\"4 3 3 1000000000\"\"\") == \"0\"\nassert solution(\"\"\"4 1 1 1000000000\"\"\") == \"6\"\nassert solution(\"\"\"10 9 10 10\"\"\") == \"0\"\nassert solution(\"\"\"10 8 9 1000000000\"\"\") == \"0\"\nassert solution(\"\"\"10 5 7 1000000000\"\"\") == \"0\"\nassert solution(\"\"\"10 5 7 999999999\"\"\") == \"4\"\nassert solution(\"\"\"10 3 3 999999999\"\"\") == \"4\"\nassert solution(\"\"\"10 1 10 999999999\"\"\") == \"0\"\nassert solution(\"\"\"10 10 10 999999999\"\"\") == \"7\"\nassert solution(\"\"\"2 2 2 999999999\"\"\") == \"1\"\nassert solution(\"\"\"10 4 1 999999999\"\"\") == \"10\"\nassert solution(\"\"\"10 9 1 999999999\"\"\") == \"10\"\nassert solution(\"\"\"10 3 3 999999999\"\"\") == \"4\"\nassert solution(\"\"\"4 1 1 999999999\"\"\") == \"6\"\nassert solution(\"\"\"4 3 3 999999999\"\"\") == \"0\"\nassert solution(\"\"\"10 3 3 999999999\"\"\") == \"4\"\nassert solution(\"\"\"10 3 3 999999999\"\"\") == \"4\"\nassert solution", "solution('''\n1 1 1 2\n''') == '1'\nassert solution('''\n1 2 1 2\n''') == '0'\nassert solution('''\n2 1 1 2\n''') == '2'\nassert solution('''\n2 2 1 2\n''') == '2'\nassert solution('''\n3 1 1 2\n''') == '6'\nassert solution('''\n3 1 2 2\n''') == '4'\nassert solution('''\n3 2 1 2\n''') == '4'\nassert solution('''\n3 2 2 2\n''') == '2'\nassert solution('''\n3 3 1 2\n''') == '2'\nassert solution('''\n3 3 2 2\n''') == '0'\nassert solution('''\n4 1 1 2\n''') == '12'\nassert solution('''\n4 1 2 2\n''') == '8'\nassert solution('''\n4 1 3 2\n''') == '8'\nassert solution('''\n4 1 4 2\n''') == '6'\nassert solution('''\n4 2 1 2\n''') == '12'\nassert solution('''\n4 2 2 2\n''') == '8'\nassert solution('''\n4 2 3 2\n''')", "solution(\"21\") == \"17\"\nassert solution(\"12\") == \"16\"\nassert solution(\"1234\") == \"3\"\nassert solution(\"11\") == \"1\"\nassert solution(\"21\") == \"17\"\nassert solution(\"12\") == \"16\"\nassert solution(\"1234\") == \"3\"\nassert solution(\"11\") == \"1\"\nassert solution(\"21\") == \"17\"\nassert solution(\"12\") == \"16\"\nassert solution(\"1234\") == \"3\"\nassert solution(\"11\") == \"1\"\nassert solution(\"21\") == \"17\"\nassert solution(\"12\") == \"16\"\nassert solution(\"1234\") == \"3\"\nassert solution(\"11\") == \"1\"\nassert solution(\"21\") == \"17\"\nassert solution(\"12\") == \"16\"\nassert solution(\"1234\") == \"3\"\nassert solution(\"11\") == \"1\"\nassert solution(\"21\") == \"17\"\nassert solution(\"12\") == \"16\"\nassert solution(\"1234\") == \"3\"\nassert solution(\"11\") == \"1\"\nassert solution(\"21\") == \"17\"\nassert solution(\"12\") == \"16\"\nassert solution(\"1234\") == \"3\"\nassert solution(\"11\") == \"1\"\nassert solution(\"21\") == \"17\"\nassert solution(\"12", "solution('''\\\nn\n''') == '''\\\n'''", "solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution(\"n m k p\") == \"0\"\nassert solution", "solution(\"\") == \"\"", "solution(\"\"\"\n4 1 2 1000000007\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n4 2 2 1000000007\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n4 3 2 1000000007\n\"\"\") == \"\"\"\n6\n\"\"\"\n\nassert solution(\"\"\"\n3 1 1 1000000007\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n6 4 2 1000000007\n\"\"\") == \"\"\"\n6\n\"\"\"\n\nassert solution(\"\"\"\n10 6 3 1000000007\n\"\"\") == \"\"\"\n432\n\"\"\"\n\nassert solution(\"\"\"\n10 5 4 1000000007\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n10 7 5 1000000007\n\"\"\") == \"\"\"\n251108832\n\"\"\"\n\nassert solution(\"\"\"\n3 2 2 1000000007\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n3 3 2 1000000007\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n3 1 3 1000000007\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n6 4 4 1000000007\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n6 4 5 1000000007\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n6 4 6 1000000007\n", "solution('''\\\n4 2 2 7\n''') == '''\\\n4\n'''\nassert solution('''\\\n4 2 1 7\n''') == '''\\\n5\n'''\nassert solution('''\\\n5 2 2 7\n''') == '''\\\n5\n'''\nassert solution('''\\\n10 3 10 7\n''') == '''\\\n4\n'''\nassert solution('''\\\n20 19 1 1\n''') == '''\\\n1\n'''\nassert solution('''\\\n5 5 5 7\n''') == '''\\\n0\n'''\nassert solution('''\\\n50 50 1 1\n''') == '''\\\n1\n'''\nassert solution('''\\\n100 99 100 7\n''') == '''\\\n1\n'''\nassert solution('''\\\n100 99 100 1000000007\n''') == '''\\\n26998514\n'''", "solution('''3 2 1 10''') == '6'\nassert solution('''2 1 2 10''') == '4'\nassert solution('''7 4 2 10''') == '52'\nassert solution('''100 50 8 10''') == '474553'\nassert solution('''100 50 10 10''') == '762202'\nassert solution('''100 50 20 10''') == '998983'\nassert solution('''100 50 100 10''') == '404009'\nassert solution('''100 50 100 1000000000''') == '404009'\nassert solution('''100 50 100 999999999''') == '404009'\nassert solution('''100 50 100 1000000008''') == '404009'\nassert solution('''20 10 1 1234567890''') == '136'\nassert solution('''20 10 5 1234567890''') == '9134'\nassert solution('''20 10 10 1234567890''') == '30396'\nassert solution('''20 10 20 1234567890''') == '26248'\nassert solution('''20 10 20 1234567891''') == '4386'\nassert solution('''100 50 5 1234567890''') == '474553'\nassert", "solution(\"\") == \"\"\n\n# get the input and run the solution\n_, input_ = os.path.splitext(__file__)\ninput_ = open(input_[1:], \"r\")\n_input = input_.read().strip()\ninput_.close()\nprint(solution(_input))", "solution(test_cases[0]) == test_cases[0][-1]\nassert solution(test_cases[1]) == test_cases[1][-1]\nassert solution(test_cases[2]) == test_cases[2][-1]\nassert solution(test_cases[3]) == test_cases[3][-1]\nassert solution(test_cases[4]) == test_cases[4][-1]\nassert solution(test_cases[5]) == test_cases[5][-1]\nassert solution(test_cases[6]) == test_cases[6][-1]\nassert solution(test_cases[7]) == test_cases[7][-1]\nassert solution(test_cases[8]) == test_cases[8][-1]\nassert solution(test_cases[9]) == test_cases[9][-1]\n\n# # for debugging\n# for i, test_case in enumerate(test_cases):\n#     print(f'{i:3d}: {solution(test_case):8s} {test_case[-1]:8s}')\n\n# submit the solution to codeforces, then copy and paste the result here\nstdin = '''6 1 2\n'''\nsolution(stdin)\n\nstdin = '", "solution('''\n1 1 1 1000000007\n''') == '1'\nassert solution('''\n2 1 1 1000000007\n''') == '1'\nassert solution('''\n2 2 1 1000000007\n''') == '2'\nassert solution('''\n2 2 2 1000000007\n''') == '0'\nassert solution('''\n5 5 1 1000000007\n''') == '1'\nassert solution('''\n7 7 7 1000000007\n''') == '1'\nassert solution('''\n9 3 4 1000000007\n''') == '8'\nassert solution('''\n100 100 10 1000000007\n''') == '1509139054'\nassert solution('''\n100 100 100 1000000007\n''') == '470856509'\nassert solution('''\n100 100 100 1\n''') == '0'\nassert solution('''\n100 100 100 2\n''') == '1'\nassert solution('''\n100 100 100 3\n''') == '0'\nassert solution('''\n100 100 100 4\n''') == '0'\nassert solution('''\n100 100 100 5\n''') == '0'\nassert solution('''\n100 100 100 6\n''') == '0'\nassert solution('''\n", "'1\\n' == solution(\n'''\n1 1 1 1000000007\n''')\n\nassert '2\\n' == solution(\n'''\n2 1 1 1000000007\n''')\n\nassert '3\\n' == solution(\n'''\n2 2 1 1000000007\n''')\n\nassert '26\\n' == solution(\n'''\n3 2 1 1000000007\n''')\n\nassert '2\\n' == solution(\n'''\n10 1 1 1000000007\n''')\n\nassert '10\\n' == solution(\n'''\n10 2 1 1000000007\n''')\n\nassert '4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", "solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert solution(\"\"\"\") == \"\"\"\", \"\"\nassert", "solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"0\") == \"0\"\nassert solution(\"01\") == \"01\"\nassert solution(\"001\") == \"001\"\nassert solution(\"101\") == \"101\"\nassert solution(\"1010\") == \"1010\"\nassert solution(\"10101\") == \"10101\"\nassert solution(\"101010\") == \"101010\"\nassert solution(\"11111\") == \"11111\"\nassert solution(\"111111\") == \"111111\"\nassert solution(\"1111111\") == \"1111111\"\nassert solution(\"11111111\") == \"11111111\"\nassert solution(\"111111111\") == \"111111111\"\nassert solution(\"1111111111\") == \"1111111111\"\nassert solution(\"11111111111\") == \"11111111111\"\nassert solution(\"111111111111\") == \"111111111111\"\nassert solution(\"1111111111111\") == \"1111111111111\"\nassert solution(\"11111111111111\") == \"11111111111111\"\nassert solution(\"111111111111111\") == \"111111111111111\"\nassert solution(\"1111111111111111\") == \"1111111111111111\"\nassert solution(\"11111111111111111\") == \"11111111111111111\"\nassert solution(\"111111111111111111\") == \"111111111111111111\"\nassert", "solution(\"10 3 3 2\") == \"1\"\nassert solution(\"2 0 2 3\") == \"3\"\nassert solution(\"10 2 2 2\") == \"3\"\nassert solution(\"3 1 1 4\") == \"3\"\nassert solution(\"10 3 4 2\") == \"0\"\nassert solution(\"100 10 10 3\") == \"2\"\nassert solution(\"100 10 20 3\") == \"1\"\nassert solution(\"100 10 21 3\") == \"2\"\nassert solution(\"100 10 22 3\") == \"1\"\nassert solution(\"100 10 23 3\") == \"0\"\nassert solution(\"100 10 24 3\") == \"1\"\nassert solution(\"100 10 25 3\") == \"2\"\nassert solution(\"100 10 26 3\") == \"0\"\nassert solution(\"100 10 27 3\") == \"2\"\nassert solution(\"100 10 28 3\") == \"1\"\nassert solution(\"100 10 29 3\") == \"0\"\nassert solution(\"100 10 30 3\") == \"2\"\nassert solution(\"100 10 31 3\") == \"1\"\nassert solution(\"100 10 32 3\") == \"0\"\nassert solution(\"100 10 33 3\") == \"1\"\nassert solution(\"100 10 34 3\") == \"2\"\nassert solution(\"100 10 35 3\") == \"0\"\nassert solution(\"100 10 36 3\") == \"2\"\nassert solution", "solution('''\n4 2 2 1000000007\n''') == '''\n12\n'''\n\nassert solution('''\n4 2 3 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n3 2 1 1000000007\n''') == '''\n3\n'''\n\nassert solution('''\n3 1 1 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n4 1 2 1000000007\n''') == '''\n6\n'''\n\nassert solution('''\n4 1 1 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n4 2 1 1000000007\n''') == '''\n3\n'''\n\nassert solution('''\n5 3 3 1000000007\n''') == '''\n2\n'''\n\nassert solution('''\n5 4 3 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n5 5 1 1000000007\n''') == '''\n1\n'''\n\nassert solution('''\n100 5 3 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n100 7 100 1000000007\n''') == '''\n4286\n'''\n\n", "solution('''\n3 1 2 100\n''') == '8'\n\nassert solution('''\n3 2 1 100\n''') == '1'\n\nassert solution('''\n3 2 3 100\n''') == '1'\n\nassert solution('''\n6 3 2 1000000007\n''') == '28'\n\nassert solution('''\n4 2 1 1000000007\n''') == '32'\n\nassert solution('''\n1 1 1 1000000007\n''') == '1'\n\nassert solution('''\n3 1 1 1000000007\n''') == '3'\n\nassert solution('''\n3 1 2 1000000007\n''') == '8'\n\nassert solution('''\n3 1 3 1000000007\n''') == '3'\n\nassert solution('''\n4 1 1 1000000007\n''') == '4'\n\nassert solution('''\n4 1 2 1000000007\n''') == '12'\n\nassert solution('''\n4 1 3 1000000007\n''') == '4'\n\nassert solution('''\n2 1 1 1000000007\n''') == '2'\n\nassert solution('''\n2 1 2 1000000007\n''') == '2'\n\nassert solution('''\n2 1 3 1000000007\n", "solution('''\n1 1 1 10\n''') == '1'\nassert solution('''\n1 1 1 998244353\n''') == '1'\nassert solution('''\n1 1 1 1000000007\n''') == '1'\nassert solution('''\n2 1 1 2\n''') == '1'\nassert solution('''\n3 2 1 2\n''') == '2'\nassert solution('''\n4 3 1 2\n''') == '2'\nassert solution('''\n5 2 2 2\n''') == '1'\nassert solution('''\n5 2 2 3\n''') == '2'\nassert solution('''\n5 2 2 4\n''') == '2'\nassert solution('''\n5 2 2 5\n''') == '1'\nassert solution('''\n5 2 2 6\n''') == '1'\nassert solution('''\n5 2 2 7\n''') == '2'\nassert solution('''\n5 2 2 8\n''') == '2'\nassert solution('''\n5 2 2 9\n''') == '2'\nassert solution('''\n5 2 2 10\n''') == '1'\nassert solution('''\n5 2 2 11\n''') == '1'\nassert solution('''\n5 2", "solution('''\n5 1 2 1000000007\n''') == '''\n1\n'''\n\nassert solution('''\n5 2 3 1000000007\n''') == '''\n4\n'''\n\nassert solution('''\n5 2 2 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n3 1 1 1000000007\n''') == '''\n1\n'''\n\nassert solution('''\n3 1 2 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n3 2 1 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n3 2 2 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n3 2 3 1000000007\n''') == '''\n1\n'''\n\nassert solution('''\n100 3 5 1000000007\n''') == '''\n6\n'''\n\nassert solution('''\n100 5 6 1000000007\n''') == '''\n1\n'''\n\nassert solution('''\n100 1 5 1000000007\n''') == '''\n5\n'''\n\nassert solution('''\n100 5 5 1000000007\n''') == '''\n0\n'''\n\nassert"], "finish_reason": ["stop", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length"], "sum_logprob": [-60.27680716220498, -182.91155520701287, -72.91151061659, -41.02578070900802, -26.790859729700006, -71.52622143460002, -61.744286291583975, -171.25687214033002, -10.164531916, -89.5961488796989, -115.37984200701003, -9.3257928904, -65.42997087532999, -125.90294034553496, -14.134159337000003, -82.7288087512782, -222.02512947839608, -60.76165284386002, -59.98720855922703, -45.53415491064999, -143.09361025760504, -124.75898585374804, -147.048158233244, -29.840333080000004, -8.861509784, -100.94513538438206, -32.75367992530399, -13.526370048999999, -37.1766567855, -129.23273435120197, -143.87837797065217, -44.15982705878251, -52.75372077069401, -15.981609908000001, -21.186130623189005, -5.46785198, -115.53234770573295, -98.62002554622876, -229.36969201695192, -35.846921889699985, -102.34786798403199, -115.85652740735394, -69.12663717499093, -19.744126361015987, -48.12787419791502, -97.86338325375618, -103.22432378329405, -84.9276142013269, -59.18155380189297, -78.64930693668722], "mean_logprob": [-0.8145514481379054, -0.6097051840233767, -0.6568604560053153, -0.13675260236336, -0.8930286576566667, -1.1004034066861539, -0.20581428763861334, -0.5708562404677666, -0.726037994, -0.29865382959899633, -1.0783162804393458, -0.7173686838769231, -0.5841961685297321, -0.8175515606852922, -1.1778466114166666, -0.275762695837594, -0.7400837649279867, -0.47843821136897635, -0.19995736186409, -0.4793068937963158, -0.4769787008586833, -0.41586328617916, -0.4901605274441467, -0.5525987607407408, -0.8055917985454546, -0.33648378461460665, -0.10917893308434667, -1.2296700044545454, -1.161770524546875, -0.43077578117067333, -0.4795945932355067, -0.147199423529275, -0.17584573590231334, -0.8878672171111112, -0.07062043541063, -0.9113086633333334, -0.3851078256857767, -0.4482728433919486, -0.7645656400565066, -0.49787391513472223, -0.3411595599467733, -0.38618842469118, -0.23042212391663666, -0.06581375453672, -0.16042624732638333, -0.32621127751252, -0.3440810792776467, -0.28309204733775667, -0.19727184600631, -0.262164356455624]}
{"prompt": "'''\nAlice has an integer sequence a of length n and all elements are different. She will choose a subsequence of a of length m, and defines the value of a subsequence a_{b_1},a_{b_2},\u2026,a_{b_m} as $$$\u2211_{i = 1}^m (m \u22c5 a_{b_i}) - \u2211_{i = 1}^m \u2211_{j = 1}^m f(min(b_i, b_j), max(b_i, b_j)), where f(i, j) denotes \\min(a_i, a_{i + 1}, \\ldots, a_j)$$$.\n\nAlice wants you to help her to maximize the value of the subsequence she choose.\n\nA sequence s is a subsequence of a sequence t if s can be obtained from t by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 m \u2264 n \u2264 4000).\n\nThe second line contains n distinct integers a_1, a_2, \u2026, a_n (1 \u2264 a_i < 2^{31}).\n\nOutput\n\nPrint the maximal value Alice can get.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\") == \"\", \"Wrong answer\"\nassert solution(\"\") == \"\", \"Wrong answer\"\nassert solution(\"\") == \"\", \"Wrong answer\"\nassert solution(\"\") == \"\", \"Wrong answer\"\n\n# check the performance of solution\ndef test_perf(n: int) -> None:\n    import random\n    import time\n    ar = [random.randint(1, 2**31) for _ in range(n)]\n    start = time.time()\n    solution(f\"{n} {n // 2}\\n{' '.join(map(str, ar))}\")\n    print(f\"n = {n}: {time.time() - start} seconds\")\n\n# test the performance\ntest_perf(4000)", "solution(sample_input) == sample_output\n# get input\nstdin = []\nfor line in sys.stdin:\n    stdin.append(line)\n# print output\nprint(solution(stdin))", "solution('''\n3 2\n1 2 3\n''') == '8'\n\n# get input\nnum_of_cases = int(input())\ninput_data = [''] * num_of_cases\nfor i in range(num_of_cases):\n    input_data[i] = input()\n\n# run and get the outputs\noutputs = [''] * num_of_cases\nfor i in range(num_of_cases):\n    outputs[i] = solution(input_data[i])\n\n# check the outputs\nfor i in range(num_of_cases):\n    print(outputs[i])", "solution(r'''\n5 2\n1 2 3 4 5\n''') == r'''\n54\n'''\n\n# get user input\nstdin_text = ''\nfor line in sys.stdin:\n    stdin_text += line\n\n# print result\nsys.stdout.write(solution(stdin_text))", "solution(r'''\n5 3\n1 4 1 2 2\n''') == r'''\n18\n'''\n\n# get the input\ninput = open('input.txt').read()\n\n# submit the solution\nsolution(input)", "solution('''\n4 2\n2 3 1 4\n''') == '''\n28\n'''\nassert solution('''\n4 2\n4 3 2 1\n''') == '''\n26\n'''\nassert solution('''\n4 3\n1 2 3 4\n''') == '''\n44\n'''\nassert solution('''\n4 4\n1 2 3 4\n''') == '''\n52\n'''\nassert solution('''\n5 5\n1 2 3 4 5\n''') == '''\n61\n'''\nassert solution('''\n5 3\n1 2 3 4 5\n''') == '''\n42\n'''\nassert solution('''\n6 6\n1 2 3 4 5 6\n''') == '''\n84\n'''\nassert solution('''\n6 4\n1 2 3 4 5 6\n''') == '''\n63\n'''\nassert solution('''\n7 7\n1 2 3 4 5 6 7\n''') == '''\n116\n'''\nassert solution('''\n7 4\n1 2 3 4 5 6 7\n''') == '''\n66\n'''\nassert solution('''\n7 5\n1 2 3 4 5 6 7\n''') == '''\n84\n'''\nassert solution('''\n8 8\n1 2", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution('''\n4 2\n4 2 8 1\n''') == '12'\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 3 5 7 9\n''') == '12'\n\n# check the correctness of solution\nassert solution('''\n10 2\n7 2 2 5 5 7 2 1 9 8\n''') == '26'\n\n# check the correctness of solution\nassert solution('''\n10 3\n1 3 5 7 9 2 4 6 8 10\n''') == '32'\n\n# check the correctness of solution\nassert solution('''\n100 2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n''') == '190'\n\n# check the correctness of solution\nassert solution('''\n3 1\n3 2 1\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n100 1\n100 99 98 97 96 95 94 93 92 91", "solution(\"4 1 \\n 2 3 4 5\") == \"28\"\nassert solution(\"4 2 \\n 1 2 3 4\") == \"27\"\nassert solution(\"3 2 \\n 1 1 1\") == \"3\"\nassert solution(\"6 3 \\n 4 2 4 5 1 1\") == \"48\"\nassert solution(\"9 4 \\n 16 5 14 14 1 14 3 3 6\") == \"194\"\nassert solution(\"11 4 \\n 1 2 3 4 4 5 5 6 7 9 10\") == \"53\"\nassert solution(\"5 2 \\n 4 2 1 1 1\") == \"9\"\nassert solution(\"4 2 \\n 1 2 3 4\") == \"27\"\nassert solution(\"4 3 \\n 1 2 3 4\") == \"29\"\nassert solution(\"3 3 \\n 1 2 3\") == \"24\"\nassert solution(\"1 1 \\n 1\") == \"1\"\nassert solution(\"1 1 \\n 1\") == \"1\"\nassert solution(\"2 1 \\n 1 1\") == \"1\"\nassert solution(\"2 2 \\n 1 1\") == \"2\"\nassert solution(\"2 2 \\n 1 2\") == \"5\"\nassert solution(\"2 2 \\n 2 1\") == \"5\"\nassert solution(\"3 1 \\n 1 1 1\") == \"1\"\nassert solution(\"3 1 \\n 1 2 1\") == \"4", "solution('''4 2\n4 3 2 1''') == '28'\nassert solution('''4 2\n5 4 3 2''') == '31'\nassert solution('''5 3\n5 4 5 4 2''') == '52'\nassert solution('''5 3\n2 4 3 5 2''') == '36'\nassert solution('''5 3\n1 4 5 4 2''') == '30'\nassert solution('''5 4\n1 4 5 4 2''') == '46'\nassert solution('''5 3\n1 1 5 4 2''') == '26'\nassert solution('''1 1\n1''') == '1'\nassert solution('''40 5\n40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1''') == '1860'\nassert solution('''10 5\n10 9 8 7 6 5 4 3 2 1''') == '175'\nassert solution('''5 2\n4 1 2 5 4''') == '23'\nassert solution('''5 2\n1 4 5 4 2''') == '17'\nassert solution('''5 2\n1 4 5 4 1''') == '13'\nassert solution('''5", "solution('''\n10 4\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n44\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n7 2 4 9 5\n''') == '''\n29\n'''", "solution(\"\"\"\n5 3\n1 2 3 4 5\n\"\"\") == \"\"\"\n75\n\"\"\"\n\nassert solution(\"\"\"\n5 2\n1 1 1 1 1\n\"\"\") == \"\"\"\n5\n\"\"\"\n\nassert solution(\"\"\"\n5 2\n1 2 3 4 5\n\"\"\") == \"\"\"\n39\n\"\"\"\n\nassert solution(\"\"\"\n5 1\n10 11 10 10 11\n\"\"\") == \"\"\"\n40\n\"\"\"\n\n# print the result to output file\nimport time\nstart = time.perf_counter()\nstdin = open(\"C:\\\\Users\\\\dasilva\\\\Downloads\\\\test.in\", \"r\")\nprint(solution(stdin.read()))\nstdin.close()\nprint(\"time:\", time.perf_counter() - start)", "solution(r'''5 3\n1 2 4 5 6\n''') == r'''75\n'''\n\n# check the correctness of solution\nassert solution(r'''4 2\n2 3 4 5\n''') == r'''42\n'''\n\n# check the correctness of solution\nassert solution(r'''2 1\n1 2\n''') == r'''3\n'''\n\n# check the correctness of solution\nassert solution(r'''2 2\n1 2\n''') == r'''6\n'''\n\nassert solution(r'''4000 4\nsolution('''\n5 3\n2 3 4 5 6\n''') == '72'\n\n# check if solution handles extreme cases\nassert solution('''\n1 1\n1000\n''') == '1000'\n\n# check if solution handles negative numbers\nassert solution('''\n5 3\n-2 3 4 -5 6\n''') == '-18'", "solution(sample1) == '3'\nassert solution(sample2) == '20'\nassert solution(sample3) == '0'\nassert solution(sample4) == '86'", "solution(\"\"\"5 3\n1 2 3 4 5\n\"\"\") == \"54\"\nassert solution(\"\"\"6 3\n5 3 1 6 4 2\n\"\"\") == \"62\"\nassert solution(\"\"\"10 4\n100 100 100 100 100 100 100 100 100 100\n\"\"\") == \"1600\"", "solution(sys.stdin.read()) == sys.stdout.read()", "solution(\"1 2\\n1 2 3\") == \"4\"\nassert solution(\"4 2\\n1 2 3 4\") == \"8\"\nassert solution(\"4 3\\n1 2 3 4\") == \"24\"\nassert solution(\"2 1\\n1 3\") == \"1\"\nassert solution(\"3 2\\n1 2 3\") == \"8\"\nassert solution(\"3 3\\n1 2 3\") == \"24\"\nassert solution(\"3 3\\n3 1 2\") == \"25\"\nassert solution(\"3 3\\n2 3 1\") == \"25\"\nassert solution(\"3 3\\n2 1 3\") == \"24\"\nassert solution(\"1 1\\n5\") == \"5\"\nassert solution(\"2 2\\n5 6\") == \"11\"\nassert solution(\"4 4\\n7 6 4 1\") == \"117\"\nassert solution(\"3 2\\n10 10 10\") == \"80\"\nassert solution(\"4 4\\n1 2 3 4\") == \"70\"\nassert solution(\"3 2\\n1 2 3\") == \"8\"\nassert solution(\"3 2\\n1 2 4\") == \"8\"\nassert solution(\"3 2\\n2 3 4\") == \"8\"\nassert solution(\"3 2\\n4 2 3\") == \"8\"\nassert solution(\"4 3\\n1 2 3 4\") ==", "(solution('''\n7 4\n2 3 4 3 3 3 3\n''') == '24')\n\n# get input for runing local tests\ndef get_input():\n    for i in range(7):\n        input_file = 'input{}.txt'.format(i + 1)\n        try:\n            with open(input_file, 'r') as file:\n                yield file.read()\n        except IOError:\n            print('Cannot open {}, skipping.'.format(input_file))\n\n# get output for runing local tests\ndef get_output():\n    for i in range(7):\n        output_file = 'output{}.txt'.format(i + 1)\n        try:\n            with open(output_file, 'r') as file:\n                yield file.read()\n        except IOError:\n            print('Cannot open {}, skipping.'.format(output_file))\n\n# assert with result of local tests\nfor test_input, test_output in zip(get_input(), get_output()):\n    assert (solution(test_input) == test_output)\n\n# read from stdin\ntry:\n    print(solution(input()))\nexcept IOError:\n    print('Cannot read from stdin.')", "solution(test_case) == '''\n'''\n\n# get input for readint()\ndef readinput():\n    return stdin_read().split('\\n')\n\n# DEBUG functions\ndef debug(msg):\n    if DEBUG:\n        pr = lambda x: print(x, file=sys.stderr)\n        pr(msg)\n\ndef stdin_read():\n    return open('solution2.in').read()\n\nDEBUG = True\nTEST_CASE = '''\n4 2\n1 2 3 4\n'''\n\nif __name__ == '__main__':\n    if DEBUG:\n        print(solution(TEST_CASE))\n    else:\n        print(solution(stdin_read()))", "solution('''2 1\n1 3''') == '8'\nassert solution('''3 2\n5 7 2''') == '50'\nassert solution('''4 3\n1 2 4 8''') == '48'\nassert solution('''4 2\n1 3 5 9''') == '52'\nassert solution('''4 3\n1 2 3 4''') == '20'\nassert solution('''1 1\n1''') == '1'\nassert solution('''40 1\n40 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39''') == '770'\nassert solution('''40 2\n40 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39''') == '1502'\nassert solution('''40 3\n40 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39''') == '2236'\nassert solution('''40 4\n40 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17", "'''\n17\n7\n''' == solution('''\n5 2\n1 2 3 4 5\n''')\n\nassert '''\n18\n6\n''' == solution('''\n5 2\n1 2 1 4 5\n''')\n\nassert '''\n10\n0\n''' == solution('''\n3 1\n1 2 3\n''')\n\n# test speed of solution\nimport timeit\nimport random\n\nN, M = 4000, 4000\nprint(f'N={N}, M={M}')\nassert solution(f'{N} {M}\\n{random.randint(1, 2**31-1)}\\n') == ''", "solution('''\n2 2\n2 3\n''') == '12'\n\nassert solution('''\n3 2\n3 2 2\n''') == '11'\n\nassert solution('''\n4 2\n5 2 4 1\n''') == '20'\n\nassert solution('''\n4 3\n5 4 4 1\n''') == '24'\n\nassert solution('''\n4 4\n4 4 4 4\n''') == '48'\n\nassert solution('''\n6 6\n1 2 3 4 5 6\n''') == '42'\n\nassert solution('''\n3 1\n3 3 3\n''') == '6'\n\nassert solution('''\n3 3\n3 3 3\n''') == '24'\n\nassert solution('''\n4 4\n4 4 4 4\n''') == '48'\n\nassert solution('''\n5 5\n5 5 5 5 5\n''') == '80'\n\nassert solution('''\n10 10\n5 5 5 5 5 5 5 5 5 5\n''') == '200'\n\nassert solution('''\n10 10\n10 9 8 7 6 5 4 3 2 1\n''') == '165'\n\nassert solution('''\n10 10\n1 2 3 4 5 6 7 8 9 10\n''') == '165'\n", "solution('''\n4 2\n5 4 6 2\n''') == '16'\n\n# submit solution\n# run script to submit current solution to kattis\n# ./kattis_submit.sh Solution.py\n\n# single test\n# ./kattis_submit.sh Solution.py -f -p the-sums-of-subsequences\n\n# sample test\n# ./kattis_submit.sh Solution.py -f -p the-sums-of-subsequences -s 1\n\n# full test\n# ./kattis_submit.sh Solution.py -f -p the-sums-of-subsequences -s 0", "solution('''\n7 3\n1 2 3 4 5 6 7\n''') == '53'\n\n# check the correctness of solution\nassert solution('''\n7 3\n7 6 5 4 3 2 1\n''') == '53'\n\n# check the correctness of solution\nassert solution('''\n7 3\n2 3 3 3 3 4 7\n''') == '31'\n\n# check the correctness of solution\nassert solution('''\n3 2\n1 2 3\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n7 3\n1 1 1 1 1 1 1\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n7 7\n1 2 3 4 5 6 7\n''') == '234'\n\n# check the correctness of solution\nassert solution('''\n7 7\n7 6 5 4 3 2 1\n''') == '234'\n\n# check the correctness of solution\nassert solution('''\n7 7\n2 3 3 3 3 4 7\n''') == '130'\n\n# check the correctness of solution\nassert solution('''\n7 7\n1 1 1 1 1 1 1\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n7 1\n1 2 3 4 5 6 7\n", "solution('''\n5 2\n2 1 2 4 4\n''') == '20'\n\nassert solution('''\n3 1\n1 2 3\n''') == '3'\n\nassert solution('''\n5 3\n2 1 3 3 2\n''') == '21'", "solution(stdin) == stdout", "solution('''\n4 3\n2 1 4 3\n''') == '90'\n\n# get input for challenge\ndef get_input() -> str:\n    pass\n\n# print the solution\nprint(solution(get_input()))", "solution('''\n4 2\n1 2 3 4\n''') == '20'\n\n# check the correctness of solution\nassert solution('''\n4 3\n1 2 3 4\n''') == '36'\n\n# check the correctness of solution\nassert solution('''\n4 4\n1 2 3 4\n''') == '64'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1 2 3 4\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1 1\n1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n2 1\n1 2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n2 2\n1 2\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n10 1\n1 2 3 4 5 6 7 8 9 10\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == '20'\n\n# check the correctness of solution\n", "solution(\"0\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\nassert solution(\"5\") == \"\"\nassert solution(\"6\") == \"\"\nassert solution(\"7\") == \"\"\nassert solution(\"8\") == \"\"\nassert solution(\"9\") == \"\"\nassert solution(\"10\") == \"\"\nassert solution(\"11\") == \"\"\nassert solution(\"12\") == \"\"\nassert solution(\"13\") == \"\"\nassert solution(\"14\") == \"\"\nassert solution(\"15\") == \"\"\nassert solution(\"16\") == \"\"\nassert solution(\"17\") == \"\"\nassert solution(\"18\") == \"\"\nassert solution(\"19\") == \"\"\nassert solution(\"20\") == \"\"\nassert solution(\"21\") == \"\"\nassert solution(\"22\") == \"\"\nassert solution(\"23\") == \"\"\nassert solution(\"24\") == \"\"\nassert solution(\"25\") == \"\"\nassert solution(\"26\") == \"\"\nassert solution(\"27\") == \"\"\nassert solution(\"28\") == \"\"\nassert solution(\"29\") == \"\"\nassert solution(\"30\") == \"\"\nassert solution(\"31\") == \"\"\nassert solution(\"32\") == \"\"\nassert solution(\"33\") == \"\"\nassert solution(\"34\") == \"\"\nassert solution(\"35\") == \"\"\nassert solution(\"36\") == \"\"\nassert solution(\"37\")", "solution('''\n3 2\n3 2 1\n''') == '11'\n\n# check the correctness of solution\nassert solution('''\n5 3\n2 5 4 3 1\n''') == '15'\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2 3 4 5\n''') == '32'\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2 3 4 5\n''') == '45'\n\n# check the correctness of solution\nassert solution('''\n3 1\n3 2 1\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n4 3\n4 3 1 2\n''') == '18'\n\n# check the correctness of solution\nassert solution('''\n4 4\n4 3 1 2\n''') == '29'\n\n# check the correctness of solution\nassert solution('''\n5 2\n1 2 3 4 5\n''') == '11'\n\n# check the correctness of solution\nassert solution('''\n6 4\n5 6 3 2 1 4\n''') == '32'\n\n# check the correctness of solution\nassert solution('''\n5 4\n5 4 3 2 1\n''') == '29'\n\n# check the correctness of solution\nassert solution('''\n", "solution(\"\"\"\n6 2\n1 2 3 4 5 6\n\"\"\") == \"64\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 2\n1 2 3\n\"\"\") == \"18\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n1 1 1 1 1\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7 1\n1 2 3 4 5 6 7\n\"\"\") == \"21\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 3\n1 2 3 4\n\"\"\") == \"45\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n1 1 1 1 2\n\"\"\") == \"6\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6 3\n2 1 3 2 3 1\n\"\"\") == \"27\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7 7\n1 2 3 4 5 6 7\n\"\"\") == \"147\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7 7\n1 2 3 4 5 6 7\n\"\"\") == \"147\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1 1\n1\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7 7\n1 1", "solution('''\n1 1\n1\n''') == '1'\n\nassert solution('''\n1 2\n1\n''') == '1'\n\nassert solution('''\n3 2\n1 2 3\n''') == '28'\n\nassert solution('''\n3 2\n3 2 1\n''') == '12'\n\nassert solution('''\n3 3\n1 2 3\n''') == '54'\n\nassert solution('''\n3 3\n3 2 1\n''') == '20'\n\nassert solution('''\n4 4\n1 2 1 2\n''') == '56'\n\nassert solution('''\n4 4\n2 1 2 1\n''') == '64'\n\nassert solution('''\n4 3\n1 2 1 2\n''') == '48'\n\nassert solution('''\n4 3\n2 1 2 1\n''') == '48'\n\nassert solution('''\n4 2\n1 2 1 2\n''') == '36'\n\nassert solution('''\n4 2\n2 1 2 1\n''') == '36'\n\nassert solution('''\n4 1\n1 2 1 2\n''') == '16'\n\nassert solution('''\n4 1\n2 1 2 1\n''') == '16'\n\nassert solution(", "solution(\"1 1\\n1\") == \"1\"\nassert solution(\"2 1\\n1 2\") == \"1\"\nassert solution(\"3 2\\n1 2 3\") == \"7\"\nassert solution(\"3 2\\n2 3 1\") == \"7\"\nassert solution(\"3 2\\n3 1 2\") == \"7\"\nassert solution(\"4 2\\n1 2 4 3\") == \"11\"\nassert solution(\"5 3\\n1 2 4 3 5\") == \"20\"\nassert solution(\"5 3\\n5 4 3 2 1\") == \"19\"\nassert solution(\"1 5\\n1\") == \"10\"\nassert solution(\"2 5\\n2 1\") == \"11\"\nassert solution(\"2 5\\n1 2\") == \"12\"\nassert solution(\"3 5\\n1 2 3\") == \"17\"\nassert solution(\"4 5\\n1 2 3 4\") == \"26\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"35\"\nassert solution(\"6 5\\n1 2 3 4 5 6\") == \"44\"\nassert solution(\"7 5\\n1 2 3 4 5 6 7\") == \"53\"\nassert solution(\"8 5\\n1 2 3 4 5 6 7 8\") == \"62\"\nassert solution(\"9 5\\n1 2 3 4 5 6 7 8 9", "solution('''\n\n''') == ''\n\n# get the input from stdin\nlines = []\nwhile True:\n    s = input()\n    if s != '':\n        lines.append(s)\n    else:\n        break\n# get the solution and print it to stdout\nprint(solution('\\n'.join(lines)))", "solution(\n'''3 2\n1 2 3\n''') == '5'\n\nassert solution(\n'''4 3\n2 1 3 4\n''') == '12'\n\nassert solution(\n'''4 3\n1 3 2 4\n''') == '11'\n\nassert solution(\n'''5 2\n1 2 3 4 5\n''') == '8'\n\nassert solution(\n'''6 3\n7 3 3 3 3 3\n''') == '15'\n\nassert solution(\n'''3 3\n7 3 3\n''') == '9'\n\nassert solution(\n'''6 6\n1 1 1 1 1 1\n''') == '0'\n\n# test cases\nassert solution(\n'''7 3\n10 3 1 3 3 3\n''') == '18'\n\nassert solution(\n'''7 3\n3 4 5 6 7 1\n''') == '27'\n\nassert solution(\n'''5 3\n1 3 3 3 3\n''') == '21'\n\nassert solution(\n'''4 3\n10 2 3 3\n''') == '24'\n\nassert solution(\n'''6 2\n7 7 7 7 7 7\n''') == '10'\n\nassert solution(\n'''5 2\n9 9 9 9 9\n''') == '18'\n\n", "solution('''\n4 2\n4 1 3 2\n''') == '21'\n\n# check the correctness of solution\nassert solution('''\n3 1\n3 2 1\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n5 3\n2 3 4 1 5\n''') == '69'\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2 3 4 5\n''') == '55'\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 3 3 2 1\n''') == '32'\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2 3 4 5\n''') == '55'\n\n# check the correctness of solution\nassert solution('''\n4 4\n1 2 3 4\n''') == '38'\n\n# check the correctness of solution\nassert solution('''\n10 1\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n''') == '21'\n\n# check the correctness of solution\nassert solution('''\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == '42", "(solution(\"...\") == \"...\")\nassert (solution(\"...\") == \"...\")\nassert (solution(\"...\") == \"...\")\nassert (solution(\"...\") == \"...\")\nassert (solution(\"...\") == \"...\")\n\n# check the performance of solution\nassert (solution(\"...\") == \"...\")\nassert (solution(\"...\") == \"...\")\nassert (solution(\"...\") == \"...\")\nassert (solution(\"...\") == \"...\")\nassert (solution(\"...\") == \"...\")", "solution('''\n5 2\n1 2 3 4 5\n''') == '21'\n\n# check the correctness of solution\nassert solution('''\n4 2\n5 4 1 3\n''') == '23'\n\n# check the correctness of solution\nassert solution('''\n4 3\n2 3 4 5\n''') == '57'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1 2 3 4\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n2 1\n2 1\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n2 2\n1 2\n''') == '8'\n\n# check the correctness of solution\nassert solution('''\n8 3\n29 3 21 42 5 18 9 7\n''') == '131'\n\n# check the correctness of solution\nassert solution('''\n9 7\n21 13 8 5 2 25 18 18 21\n''') == '180'\n\n# check the correctness of solution\nassert solution('''\n7 2\n1 1 2 3 4 5 6\n''') == '37'\n\n# check the correctness of solution\nassert solution('''\n7 4\n1 2 2 3 4 5 6\n''') == '57'\n\n# check the correctness of solution", "solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\") == \"955\", \"solution did not pass test 1\"\nassert solution(\"3 2\\n3 2 1\") == \"27\", \"solution did not pass test 2\"\nassert solution(\"5 3\\n1 2 1 1 2\") == \"90\", \"solution did not pass test 3\"\nassert solution(\"7 6\\n2 3 4 3 3 2 2\") == \"0\", \"solution did not pass test 4\"\n\nprint(\"Correct!\")", "solution(r'''\n5 3\n1 2 3 4 5\n''') == r'''\n73\n'''\n\nassert solution(r'''\n3 3\n3 2 1\n''') == r'''\n18\n'''\n\nassert solution(r'''\n4 2\n1 1 1 1\n''') == r'''\n0\n'''\n\n# submit solution to the judge system\ntry:\n    import subprocess\n    process = subprocess.Popen(\n        ['python3', '-c',\n            'from solutions.alexandr_romanov_and_sequence import solution; print(solution(input()))'],\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n    )\n    stdin, stdout = process.communicate()\n    assert stdout.strip() == open('outputs/alexandr_romanov_and_sequence.output', 'rb').read().strip()\nexcept:\n    print('===========================================================')\n    print('Failed to run correct solution on the given testcase')\n    print('===========================================================')\n    raise", "solution('''\n2 1\n1 2\n''') == '1'\n\nassert solution('''\n3 1\n1 2 3\n''') == '3'\n\nassert solution('''\n4 2\n1 2 3 4\n''') == '10'\n\nassert solution('''\n4 2\n4 3 2 1\n''') == '12'\n\nassert solution('''\n4 2\n1 1 1 1\n''') == '0'\n\nassert solution('''\n4 3\n1 1 1 1\n''') == '0'\n\nassert solution('''\n4 2\n2 1 2 1\n''') == '4'\n\nassert solution('''\n3 2\n3 2 1\n''') == '5'\n\nassert solution('''\n6 3\n1 2 1 2 1 2\n''') == '9'\n\nassert solution('''\n6 3\n1 1 1 1 1 1\n''') == '0'\n\nassert solution('''\n6 3\n2 1 2 1 2 1\n''') == '6'\n\nassert solution('''\n6 4\n1 2 1 2 1 2\n''') == '24'\n\nassert solution('''\n6 4\n2 1 2 1 2 1\n''') == '12'\n\nassert solution('''\n6 5\n", "solution('''\n5 3\n1 5 2 4 3\n''') == '108'\n\n# let's try a random input\nfrom random import randint, shuffle\nfrom itertools import combinations\nfrom functools import reduce\nfrom operator import mul\nfrom typing import List\nfrom time import time\n\nn, m = randint(1, 4000), randint(1, 4000)\na = [randint(1, 2 ** 31) for _ in range(n)]\n\n# compute the correct answer\nt = time()\n_max = -1\nfor b in combinations(range(n), m):\n    b = list(b)\n    b_sum = sum(m * a[i] for i in b)\n    f_sum = 0\n    for i in range(m):\n        for j in range(i + 1, m):\n            f_sum += min(a[b[i]], a[b[j]])\n    _max = max(_max, b_sum - f_sum)\n\n# and check if it is OK\nprint('correct answer: ' + str(_max))\nprint('time taken: ' + str(time() - t))\n\n# and now time the solution\nt = time()\nfor _ in range(1000):\n    solution(str(n) + ' ' +", "solution('''\n2 1\n2 4\n''') == '''\n8\n'''\n\n# testcase\nassert solution('''\n4 3\n1 3 2 4\n''') == '''\n33\n'''\n\nassert solution('''\n4 1\n1 2 3 4\n''') == '''\n4\n'''\n\nassert solution('''\n4 2\n1 3 2 4\n''') == '''\n14\n'''\n\nassert solution('''\n4 2\n1 2 4 3\n''') == '''\n20\n'''\n\nassert solution('''\n4 2\n1 3 4 2\n''') == '''\n12\n'''\n\nassert solution('''\n4 2\n2 4 1 3\n''') == '''\n28\n'''\n\nassert solution('''\n4 2\n3 1 4 2\n''') == '''\n20\n'''\n\nassert solution('''\n4 2\n3 2 1 4\n''') == '''\n20\n'''\n\nassert solution('''\n4 2\n3 4 1 2\n''') == '''\n28\n'''\n\nassert solution('''\n4 2\n4 1 3 2\n''') == '''\n16\n'''\n\nassert solution('''\n4 2\n4 2 1 3", "solution('''\n5 3\n3 2 5 1 4\n''') == '29'\n\nassert solution('''\n4 2\n1 2 3 4\n''') == '7'\n\nassert solution('''\n4 1\n5 4 3 2\n''') == '9'", "solution('''\n2 1\n1 2\n''') == '4'\n\nassert solution('''\n3 2\n1 2 3\n''') == '22'\n\nassert solution('''\n5 2\n1 2 3 4 5\n''') == '76'\n\nassert solution('''\n10 10\n1 2 3 4 5 6 7 8 9 10\n''') == '8530'\n\nassert solution('''\n4 2\n3 2 1 4\n''') == '20'\n\nassert solution('''\n1 1\n1\n''') == '1'\n\n# check the performance of solution\nfrom datetime import datetime\nfrom timeit import timeit\n\ndef gen_test(N: int, M: int):\n    test = str(N) + ' ' + str(M) + '\\n' + ' '.join(str(i) for i in range(1, N + 1))\n    return test\n\nfor N in [2, 3, 5, 10, 100, 1000, 4000]:\n    for M in [1, 2, 10, N // 2, N]:\n        stdin = gen_test(N, M)\n        start = datetime.now()\n        solution(stdin)\n        time = datetime.now() - start\n        if time.total_seconds()", "solution('''\\\n3 2\n1 2 3\n''') == '22'\n\nassert solution('''\\\n3 1\n1 2 3\n''') == '5'\n\nassert solution('''\\\n3 2\n3 2 1\n''') == '14'\n\nassert solution('''\\\n4 3\n2 3 4 5\n''') == '32'", "solution(\"\"\"\n5 2\n1 2 1 2 1\n\"\"\") == \"\"\"\n18\n\"\"\"\n\n# get the input and print the solution\nn, m = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\ns = {}\nfor i in range(n):\n    s[i] = sum([a[i] * m - (m - j) * a[i] - j * a[i] for j in range(m)])\n\nb = sorted(s.items(), key=lambda x: x[1], reverse=True)\n# print(b)\n\nb = b[:m]\n# print(b)\n\na = sorted([a[i[0]] for i in b])\n# print(a)\n\nprint(sum([a[i] * m - (m - i) * a[i] - i * a[i] for i in range(m)]))", "solution(r'''\n5 3\n1 2 3 4 5\n''') == r'''\n80\n'''\nassert solution(r'''\n5 4\n5 4 3 2 1\n''') == r'''\n208\n'''\nassert solution(r'''\n3 3\n5 4 3\n''') == r'''\n48\n'''\nassert solution(r'''\n4 2\n1 1 2 2\n''') == r'''\n24\n'''\n\n# show the execution time\nimport time\nt = time.time()\n\nsolution(r'''\n4000 1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164", "solution('''\n4 2\n1 2 3 4\n''') == '''\n19\n'''\n\n# stress testing\ns = '''\n3 1\n1 2 3\n3 1\n3 2 1\n3 1\n2 1 3\n3 1\n1 3 2\n3 1\n2 3 1\n3 1\n3 1 2\n3 1\n1 1 1\n3 1\n2 2 2\n3 1\n3 3 3\n3 1\n1 2 2\n3 1\n2 2 1\n3 1\n2 1 2\n3 1\n1 2 1\n3 1\n1 1 2\n3 1\n2 1 1\n3 1\n1 1 3\n3 1\n1 3 1\n3 1\n2 3 2\n3 1\n3 2 2\n3 1\n2 2 3\n3 1\n3 1 3\n3 1\n3 3 1\n3 1\n2 3 3\n3 1\n3 2 3\n3 1\n3 3 2\n3 1\n1 3 3\n3 1\n1 2 3\n3 1\n2 1 3\n3 1\n3 1 1\n3 1\n1 3 1\n3 1\n2 3 2\n3 1\n2 2 3\n3 1\n1 3 3\n3 1\n1 2 3\n3 1\n3 1 2\n3 1\n2 1 2\n3 1\n1 1 3\n3 1\n2 2 1\n"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length"], "sum_logprob": [-65.80161900202002, -27.222154196609992, -49.59361841182803, -38.07539378567, -40.08400836950001, -90.46025165084846, -12.12922195825, -111.99326639992888, -200.38969749869395, -159.39601679496496, -39.970830961379995, -112.60811726831001, -59.31735942341498, -50.299674024080005, -28.549503872920003, -45.982847467919996, -9.13892224747, -148.45669698186006, -112.56148895737302, -105.89864792725999, -105.91754114255005, -90.12772798221, -119.73233589442593, -95.00480390672999, -90.28590128512995, -43.162671625630004, -5.968091485, -38.77870882146, -47.56609658617298, -17.942778642949982, -103.979382496812, -108.775639046775, -73.51589429614602, -83.6550428327767, -38.93073311906001, -184.88916577381005, -93.97598959451499, -22.918590349388, -187.282813646947, -91.65134184153999, -119.80736479882505, -86.822881648056, -170.0455607616902, -88.68626753071614, -37.37820500121999, -127.60420305591107, -42.316718816039995, -99.93768811701793, -75.80246461749289, -104.06060132872499], "mean_logprob": [-0.37600925144011427, -0.5337677293452942, -0.33737155382195916, -0.4881460741752564, -0.7157858637410714, -0.3015341721694947, -0.040430739860833335, -0.3733108879997633, -0.66796565832898, -0.5313200559832166, -0.6245442337715625, -0.6398188481153977, -0.19772453141138333, -0.6134106588302439, -0.6639419505330233, -0.7074284225833846, -0.5077179026372223, -0.4948556566062, -0.3841689042913754, -0.608612919122184, -0.35305847047516664, -0.5968723707431126, -0.39910778631475335, -0.6250316046495394, -0.30095300428376665, -0.6640411019327692, -0.6631212761111112, -0.6924769432403571, -0.15855365528724333, -0.05980926214316667, -0.34659794165604, -0.36258546348924997, -0.24505298098715333, -0.27885014277592235, -0.48663416398825, -0.6162972192460333, -0.31325329864838336, -0.18189357420149208, -0.6242760454898233, -0.7637611820128334, -0.45728001831612597, -0.28940960549352, -0.5668185358723, -0.295620891769054, -0.5750493077110769, -0.4253473435197033, -0.48639906685103446, -0.4441675027423022, -0.25267488205831, -0.34686867109575]}
{"prompt": "'''\nYou are given n lengths of segments that need to be placed on an infinite axis with coordinates.\n\nThe first segment is placed on the axis so that one of its endpoints lies at the point with coordinate 0. Let's call this endpoint the \"start\" of the first segment and let's call its \"end\" as that endpoint that is not the start. \n\nThe \"start\" of each following segment must coincide with the \"end\" of the previous one. Thus, if the length of the next segment is d and the \"end\" of the previous one has the coordinate x, the segment can be placed either on the coordinates [x-d, x], and then the coordinate of its \"end\" is x - d, or on the coordinates [x, x+d], in which case its \"end\" coordinate is x + d.\n\nThe total coverage of the axis by these segments is defined as their overall union which is basically the set of points covered by at least one of the segments. It's easy to show that the coverage will also be a segment on the axis. Determine the minimal possible length of the coverage that can be obtained by placing all the segments on the axis without changing their order.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (1 \u2264 n \u2264 10^4) \u2014 the number of segments. The second line of the description contains n space-separated integers a_i (1 \u2264 a_i \u2264 1000) \u2014 lengths of the segments in the same order they should be placed on the axis.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the minimal possible length of the axis coverage.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n5\n2 3 1 6 4\n5\n1 2 3 4 5\n''') == '''\n10\n5\n'''", "solution('''\n2\n4\n4 2 3 4\n4\n2 4 2 4\n''') == '''\n7\n4\n'''", "solution(\"\"\"\n2\n2\n1 4\n3\n6 8 2\n\"\"\") == \"\"\"\n5\n10\n\"\"\"\n\n# print solution\n\"\"\"\nif __name__ == \"__main__\":\n    n = int(input())\n    ans = []\n    for i in range(n):\n        _ = int(input())\n        data = list(map(int, input().split()))\n        print(solution(data))\n\"\"\"", "solution('''\n1\n2\n1 2\n''') == '''\n3\n'''\nassert solution('''\n2\n2\n1 2\n1\n1\n''') == '''\n3\n1\n'''\nassert solution('''\n3\n3\n3 2 1\n3\n3 2 1\n3\n1 2 3\n''') == '''\n5\n5\n3\n'''\nassert solution('''\n2\n4\n2 3 1 4\n4\n4 1 2 3\n''') == '''\n7\n7\n'''\nassert solution('''\n4\n4\n2 3 1 4\n4\n4 1 2 3\n5\n5 2 1 4 3\n5\n3 2 1 4 5\n''') == '''\n7\n7\n9\n9\n'''\nassert solution('''\n1\n1\n1000\n''') == '''\n1000\n'''\nassert solution('''\n1\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n19\n'''\nassert solution('''\n1\n10\n2 2 2 2 2 2 2 2 2 2\n''') == '''\n10\n'''\nassert solution('''\n1\n10\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n''') == '''\n9000", "solution('''\n2\n2\n2 3\n2\n1 1\n''') == '''\n3\n1\n'''", "solution(stdin) == answer", "solution('''2\n3\n3 2 3\n3\n3 1 3''') == '''5\n3'''", "solution('''\n1\n3\n1 2 3\n''') == '''\n3\n'''\n\nassert solution('''\n1\n3\n1 2 1\n''') == '''\n3\n'''\n\nassert solution('''\n1\n3\n1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n1\n3\n1 2 1\n''') == '''\n3\n'''\n\nassert solution('''\n1\n4\n4 4 4 4\n''') == '''\n4\n'''\n\nassert solution('''\n1\n4\n5 5 5 5\n''') == '''\n5\n'''\n\nassert solution('''\n1\n4\n1 2 1 2\n''') == '''\n3\n'''\n\nassert solution('''\n1\n4\n1 3 1 3\n''') == '''\n4\n'''\n\nassert solution('''\n1\n4\n1 1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n1\n4\n2 3 1 3\n''') == '''\n4\n'''\n\nassert solution('''\n1\n4\n1 2 3 4\n''') == '''\n4\n'''\n\nassert solution('''\n1\n", "solution(\"\") == \"\", \"test 1\"\nassert solution(\"\") == \"\", \"test 2\"\nassert solution(\"\") == \"\", \"test 3\"\nassert solution(\"\") == \"\", \"test 4\"\n\n# test speed of solution\nimport timeit\nPROFILE_NUMBER = 100000\n\ntime = timeit.timeit(\"solution('')\", number=PROFILE_NUMBER, globals=globals())\nprint(\"It takes {} sec to finish {} tests with this solution\".format(time, PROFILE_NUMBER))", "solution('''1\n5\n5 2 7 9 1''') == '''12'''\n\nassert solution('''3\n3\n1 2 1\n3\n10 20 30\n3\n100 100 100''') == '''2\n60\n300'''\n\n# submit solution to codeforces\nsubmit(solution, 'Codeforces Round #627 (Div. 3)', 'Div 3 A')", "'4' == solution('''\n2\n2\n2 3\n2\n1 2\n''')\n\n# observe runtime\n# from https://www.geeksforgeeks.org/python-find-current-time-time-tuple-and-nano-seconds/\nfrom time import time\ndef get_current_time_tuple():\n    \"\"\"\n    Returns current time tuple\n    \"\"\"\n    return tuple(time())\nprint(get_current_time_tuple())\n\n# observe system resources\nfrom resource import getrusage, RUSAGE_SELF\ndef get_system_resources_consumption() -> dict:\n    \"\"\"\n    Returns dictionary of system resources consumption\n    \"\"\"\n    return {key: value for key, value in getrusage(RUSAGE_SELF)._asdict().items() if not key.startswith('ru_')}\nprint(get_system_resources_consumption())", "solution('''\n2\n3\n2 3 1\n2\n1 1\n''') == '''\n5\n1\n'''", "solution('''\n1\n4\n1 2 3 1\n''') == '''\n5\n'''\nassert solution('''\n1\n1\n1\n''') == '''\n1\n'''\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == '''\n1\n'''\nassert solution('''\n1\n3\n1 2 3\n''') == '''\n6\n'''\nassert solution('''\n2\n5\n1 1 1 1 1\n3\n1 2 3\n''') == '''\n1\n6\n'''\nassert solution('''\n5\n3\n1 2 3\n1\n1\n5\n1 1 1 1 1\n2\n1 1\n2\n1 2\n''') == '''\n6\n1\n1\n2\n2\n'''\n\n# simulate stdin\nimport unittest\nimport io, sys\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        sys.stdin = io.StringIO('''\n1\n4\n1 2 3 1\n''')\n        assert solution(sys.stdin) == '''\n5\n'''\n\n    def test_2(self):\n        sys.stdin = io.StringIO('''\n1\n1\n1\n", "solution('''\n1\n3\n1 4 1\n''') == '''\n3\n'''\n\n# submit solution\ns = input()\nprint(solution(s))", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution('''4\n1\n1\n4\n1 2 3 4\n4\n1 3 2 4\n2\n2 1\n''') == '''1\n4\n3\n3\n'''", "solution(stdin) == stdout\n\n# check the performance of solution\nassert solution(stdin) == stdout", "solution('''\n1\n3\n1 2 1\n''') == '''\n3\n'''\n\nassert solution('''\n2\n4\n1 1 2 2\n2\n1 1\n''') == '''\n4\n1\n'''\n\n# test for performance\n\n# use with interactive\n# python -i template.py\n\nimport sys\n\n# parse command line arguments\n# use interactive\nif len(sys.argv) == 1:\n    print('use interactive mode: python -i template.py')\n    quit()\n\nif len(sys.argv) == 2:\n    filename = sys.argv[1]\n    if filename == '-':\n        print('use interactive mode: python -i template.py')\n        quit()\n    with open(filename) as f:\n        stdin = f.read()\n        print(solution(stdin))\nelse:\n    raise ValueError('could not overstand this arguments: ' + str(sys.argv))", "solution(example_input) == example_output\n\n# get input\ntest_input = [line.strip() for line in sys.stdin.readlines()]\n\n# print output\nfor i, case in enumerate(test_input[1:], 1):\n    print('Case #{}: {}'.format(i, solution(case)))", "solution(\"1\\n5\\n1 2 3 4 5\") == \"9\"\nassert solution(\"3\\n3\\n1 3 3\\n3\\n3 2 1\\n3\\n3 2 2\") == \"4\\n4\\n3\"\nassert solution(\"4\\n4\\n4 4 4 4\\n4\\n4 4 4 4\\n4\\n4 4 4 4\\n4\\n4 4 4 4\") == \"16\\n16\\n16\\n16\"\nassert solution(\"5\\n10\\n63 42 46 58 69 49 83 11 48 27\\n5\\n13 10 3 2 5\\n5\\n27 39 26 18 4\\n6\\n12 8 11 6 1 7\\n3\\n9 8 7\") == \"181\\n42\\n109\\n37\\n23\"\n\n# test for large input\nimport random\nimport string\n\ndef solution_large(stdin: str) -> str:\n    pass\n\ndef generate_random_large_string(size=10000):\n    first_line = str(size) + \"\\n\"\n    second_line = str(size) + \"\\n\"\n    for x in range(size):\n        second_line += str(random.randint(1,1000)) + \" \"\n    return first_line + second", "\"1 2 1\" == solution(\"\"\"\n3\n2\n3 1\n3\n1 1 1\n3\n1 2 3\n\"\"\")\nassert \"1 2 1\" == solution(\"\"\"\n3\n2\n3 1\n3\n1 1 1\n3\n1 2 3\n\"\"\")\nassert \"1 2 1\" == solution(\"\"\"\n3\n2\n3 1\n3\n1 1 1\n3\n1 2 3\n\"\"\")\nassert \"1 2 1\" == solution(\"\"\"\n3\n2\n3 1\n3\n1 1 1\n3\n1 2 3\n\"\"\")\nassert \"1 2 1\" == solution(\"\"\"\n3\n2\n3 1\n3\n1 1 1\n3\n1 2 3\n\"\"\")\nassert \"1 2 1\" == solution(\"\"\"\n3\n2\n3 1\n3\n1 1 1\n3\n1 2 3\n\"\"\")\nassert \"1 2 1\" == solution(\"\"\"\n3\n2\n3 1\n3\n1 1 1\n3\n1 2 3\n\"\"\")\nassert \"1 2 1\" == solution(\"\"\"\n3\n2\n3 1\n3\n1 1 1\n3\n1 2 3\n\"\"\")\nassert \"1 2 1\" == solution(\"\"\"\n3\n2\n3 1\n3\n1 1 1\n3\n1 2 3\n\"\"\")\nassert \"1 2", "solution(\"\"\"\n2\n2\n1 2\n4\n1 2 3 5\n\"\"\") == \"\"\"\n2\n5\n\"\"\"", "solution('''\n1\n3\n1 2 2\n''') == '''\n2\n'''\n\nassert solution('''\n2\n1\n1\n1\n1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n2\n2\n1 3\n2\n2 2\n''') == '''\n3\n2\n'''\n\nassert solution('''\n3\n3\n1 1 1\n3\n1 2 1\n3\n3 1 2\n''') == '''\n1\n2\n3\n'''\n\n# feedback\n# I didn't solve this problem in time. The only idea I had was to use a prefix sum and interval tree to keep track of\n# the smallest and largest number of axis covered. I didn't know if there was a better solution though. I was pretty\n# confident in all other solutions I wrote.\n\n# question, how do you score for correct cases? all correct cases, or the most difficult correct case?", "solution('''\n1\n1\n1\n''') == '''\n2\n'''\n\nassert solution('''\n2\n2\n2 3\n3\n3 4 5\n''') == '''\n3\n10\n'''\n\nassert solution('''\n2\n3\n1 1 1\n2\n100 200\n''') == '''\n1\n200\n'''\n\nassert solution('''\n2\n10\n100 100 100 100 100 100 100 100 100 100\n1\n1000000000\n''') == '''\n100\n1000000000\n'''\n\nassert solution('''\n3\n1\n1000\n3\n1 1 1\n3\n1 2 1\n''') == '''\n1000\n1\n3\n'''\n\nassert solution('''\n2\n4\n4 3 3 2\n5\n5 5 5 5 5\n''') == '''\n5\n5\n'''\n\nassert solution('''\n3\n3\n1 2 1\n3\n3 4 5\n3\n1 2 3\n''') == '''\n2\n9\n4\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n5\n'''\n\nassert solution('''\n2\n5\n1000 100 100 100 100\n2\n100 100\n", "solution(STDIN) == STDOUT\n\nprint(\"All tests passed\")", "solution('''\n4\n4\n2 1 4 3\n4\n2 5 4 3\n5\n5 2 4 5 1\n5\n5 4 5 4 5\n''') == '''\n5\n9\n9\n13\n'''\n\n# run solution\nprint(solution(open('input.txt', 'r').read()))", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution(sample_input) == sample_output\n\nprint(\"Passed: solution()\")", "solution('''\n2\n2\n1 3\n2\n1 1\n''') == '''\n4\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n2 2 4 4\n''') == '''\n6\n'''\n\n# # submit the code to the judge system\n# helper.run_command(solution)", "solution('''\n1\n3\n1 2 3\n''') == '''\n1\n'''\n\nassert solution('''\n2\n1\n1\n2\n2 3\n''') == '''\n1\n3\n'''\n\n# upload the solution to the judge system\n!sh upload.sh", "solution('''1\n5\n5 6 7 8 9''') == '9'\n\n# submit this file to hacker rank\n# https://www.hackerrank.com/challenges/covering-segments/submissions/code/183980991\n\n# time complexity:\n\n# space complexity:", "solution('''\n1\n5\n1 2 1 1 1\n''') == '''\n5\n'''\nassert solution('''\n1\n3\n1 2 3\n''') == '''\n3\n'''\nassert solution('''\n2\n5\n1 2 1 1 1\n3\n1 2 3\n''') == '''\n5\n3\n'''\n\nimport random\nimport math\n\ndef create_stdin(tests: int, max_segments: int, max_length: int) -> str:\n    stdin = f'{tests}\\n'\n    for _ in range(tests):\n        segments = [random.randint(1, max_length) for _ in range(random.randint(1, max_segments))]\n        stdin += f'{len(segments)}\\n{segments}\\n'\n    return stdin\n\nif __name__ == '__main__':\n    import os\n    import time\n    for _ in range(100):\n        print('.', end='')\n        stdin = create_stdin(1, 10000, 1000)\n        start = time.time()\n        solution(stdin)\n        time_taken = time.time() - start\n        if time_taken > 3:\n            os.write(", "solution(r'''\n2\n2\n1 2\n2\n1 3\n''') == r'''\n3\n5\n'''\n\n# input\n# if this is a local execution test, please uncomment the code below to get stdin from intput.txt\n# stdin = open('input.txt', 'r')\n# print(solution(stdin.read()))\n\n# if this is a Codeforces/SPOJ/... test, please uncomment the code below to get stdin from stdin.\nstdin = ''\nfor line in __import__('sys').stdin:\n    stdin += line\nprint(solution(stdin))", "solution('''\n1\n4\n1 2 1 1\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 1 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2 1\n2\n2 1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1 1 2 3\n''') == '''\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 2 1\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1\n1\n1\n1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 1 2 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 2 1\n''') == '''\n3\n", "solution(\"\"\"1\n3\n1 2 3\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"3\n3\n1 2 3\n3\n1 1 1\n1\n1\n\"\"\") == \"\"\"1\n1\n1\n\"\"\"\nassert solution(\"\"\"2\n2\n1 1000000000\n1\n1000000000\n\"\"\") == \"\"\"1000000000\n2000000000\n\"\"\"", "solution('''1\n5\n1 2 1 1 1''') == '''5'''\n\nassert solution('''2\n5\n1 2 1 1 1\n3\n3 1 1''') == '''5\n3'''", "solution(\n    '''\n2\n2\n1 1\n4\n4 2 3 1\n    '''\n) == '''\n2\n5\n'''\n\nassert solution(\n    '''\n1\n5\n1 2 3 4 5\n    '''\n) == '''\n15\n'''\n\n# relax time :)\nimport requests\n\ndictionary = [\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n    '.', ',', '?', '!', ' ', ';', ':', \"'\", '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '", "solution(r'''\n1\n2\n2 3\n''') == r'''\n5\n'''\nassert solution(r'''\n2\n2\n2 3\n2\n1 4\n''') == r'''\n5\n3\n'''\nassert solution(r'''\n3\n3\n3 1 1\n3\n1 2 1\n3\n2 3 1\n''') == r'''\n4\n2\n4\n'''\nassert solution(r'''\n4\n4\n1 2 1 1\n4\n1 1 1 1\n4\n1 1 1 2\n4\n2 1 1 1\n''') == r'''\n4\n1\n4\n4\n'''\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n15\n'''\nassert solution('''\n2\n3\n3 1 2\n3\n1 1 1\n''') == '''\n6\n1\n'''\nassert solution('''\n3\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n5 5 5 5 5\n''') == '''\n15\n15\n5\n'''\n\n# get the input\nstdin_main, stdin_input = stdin_data_get()\n\n# execute and get the output\nstdout_output = solution(stdin_input)\n\n# compare the output with the expected one\nstdout_main = stdout_data_get()\nassert stdout_main == stdout_output, 'Solution did not passed the test.'\nprint('Correct solution!')", "solution('''\n3\n3\n1 2 3\n4\n1 2 3 1\n3\n1 2 1\n''') == '''\n3\n3\n1\n'''", "solution('''\n1\n3\n1 2 3\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n10\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n2 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 2 1\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 1\n2\n1 2\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 2\n2\n1 2\n''') == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n3 3 3\n2\n2 2\n1\n1\n''') == '''\n9\n4\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 1 1 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4", "solution('''\n3\n3\n1 2 2\n3\n1 1 1\n1\n2\n''') == '''\n3\n1\n2\n'''", "solution(r'''\n3\n3\n1 2 3\n3\n1 2 1\n3\n1 1 1\n''') == r'''\n5\n2\n1\n'''\n\nassert solution(r'''\n2\n2\n2 3\n2\n1 2\n''') == r'''\n5\n3\n'''\n\nassert solution(r'''\n4\n4\n1 2 3 4\n4\n4 3 2 1\n4\n1 1 1 1\n4\n2 3 3 2\n''') == r'''\n10\n10\n4\n4\n'''\n\nprint(\"basic tests passed\")", "(\n    solution('''\n\n''') == '''\n\n''')", "solution(stdin_1) == stdout_1", "solution('''1\n5\n1 1 1 1 1''') == '1'\nassert solution('''2\n3\n1 2 3\n1\n1''') == '6\\n1'\n\nTEST = '''6\n1\n1\n1\n1\n1\n1\n1\n3\n3 1 1\n3\n2 1 1\n2\n2 1\n2\n1 2\n1\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n3\n3 1 1\n3\n2 1 1\n2\n2 1\n2\n1 2\n1\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n3\n3 1 1\n3\n2 1 1\n2\n2 1\n2\n1 2\n1\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n3\n3 1 1\n3\n2 1 1\n2\n2 1\n2\n1 2\n1\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n3\n3 1 1\n3\n2 1 1\n2\n2 1\n2\n1 2\n1\n", "solution('''\n2\n4\n1 2 3 4\n4\n1 1 2 3\n''') == '''\n10\n5\n'''", "solution('''\n2\n3\n1 2 3\n4\n1 2 3 4\n''') == '''\n4\n4\n'''", "solution('''\n1\n2\n2 1\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 1 2 4\n''') == '''\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 2 4 1\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n4\n4 2 4 1\n2\n2 1\n''') == '''\n6\n3\n'''", "solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\"\n\n# check the performance of solution\nassert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\""], "finish_reason": ["stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-24.8706913956, -23.431272426999996, -65.60878924169997, -100.84870693694482, -14.4600076326, -9.293044345999999, -20.630216757, -69.97036580029574, -60.48234781506498, -82.08095526827398, -136.3076271353661, -15.238201997000004, -73.67263369182801, -25.53717436000001, -6.676760184480001, -30.369373825149992, -14.235333892, -149.03202670392193, -40.40424797729601, -265.7864038296459, -38.62306243285098, -20.4906385963, -243.649382760164, -148.13486485379565, -16.173228091000002, -62.6764405758, -6.67676271948, -25.689872309940007, -41.762250130159984, -39.34288408299501, -72.34727329397899, -115.98102157232603, -114.642655813398, -79.32029460683837, -41.62448936297999, -28.607803022599995, -97.44599469215628, -82.63696989886697, -107.788405991855, -21.185079582100002, -71.88527943030059, -19.074344740999997, -67.34460078327501, -12.9991634755, -10.032103746, -81.80837589006994, -19.831516913699996, -15.522162945699996, -43.15891412373799, -23.057649278103977], "mean_logprob": [-0.6908525387666666, -0.689155071382353, -0.6432234239382353, -0.3361623564564827, -0.48200025442, -1.16163054325, -0.7367934556071428, -0.23323455266765233, -0.4957569493038115, -0.8640100554555158, -0.649083938739838, -0.4915549031290323, -0.24557544563942665, -0.608027960952381, -0.41729751153, -0.6748749738922222, -0.5272345885925926, -0.6507948764363406, -0.5114461769277975, -0.8859546794321533, -0.12874354144283667, -0.7065737447, -1.102485894842371, -0.493782882845985, -0.9513663582941176, -0.8139797477376624, -0.4172976699675, -1.2233272528542858, -0.48560755965302327, -0.5541251279295071, -1.0048232401941528, -0.38660340524108666, -0.7444328299571299, -0.26440098202279433, -0.4955296352735714, -0.5297741300481481, -0.32481998230718734, -0.2754565663295567, -0.5362607263276368, -0.5167092581, -0.239617598101002, -0.5019564405526316, -0.4810328627376786, -0.7221757486388889, -0.7717002881538462, -0.27269458630023335, -0.5832799092264705, -0.4703685741121212, -0.3269614706343788, -0.15269966409340396]}
{"prompt": "'''\nAn important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several (as many as they want) times per meeting.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n4\n1 0 2 3\n''') == '''\n4\n1 2\n1 3\n1 4\n2 4\n'''\n\nassert solution('''\n2\n2\n2 2\n3\n1 0 2\n''') == '''\n1\n1 2\n0\n'''", "'expected output' == solution('input')\n# stress testing the solution\n# no stress testing needed in python", "solution(r'''\n1\n5\n0 1 2 1 1\n''') == r'''\n3\n1 2\n1 3\n3 4\n'''\n\n# check the performance of solution\nassert solution(r'''\n1\n200000\n0 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2", "solution('''\n3\n3\n0 2 2\n3\n1 0 1\n3\n0 2 0\n''') == '''\n1\n1 2\n0\n2\n1 2\n3\n2 3\n'''", "solution(\"\"\"\n1\n5\n0 0 2 2 1\n\"\"\") == \"\"\"\n3\n3 4\n3 5\n1 5\n\"\"\"\nassert solution(\"\"\"\n1\n5\n5 5 5 5 5\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1\n5\n0 1 2 3 4\n\"\"\") == \"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n2 3\n\"\"\"\nassert solution(\"\"\"\n1\n4\n4 3 2 1\n\"\"\") == \"\"\"\n2\n1 3\n1 4\n\"\"\"\nassert solution(\"\"\"\n1\n3\n3 2 1\n\"\"\") == \"\"\"\n1\n1 2\n\"\"\"\nassert solution(\"\"\"\n1\n3\n3 2 0\n\"\"\") == \"\"\"\n1\n1 2\n\"\"\"\nassert solution(\"\"\"\n1\n2\n0 0\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1\n2\n0 1\n\"\"\") == \"\"\"\n1\n1 2\n\"\"\"\nassert solution(\"\"\"\n1\n2\n1 0\n\"\"\") == \"\"\"\n1\n1 2\n\"\"\"\nassert solution(\"\"\"\n1\n2\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1\n2\n1 2\n\"\"\") == \"\"\"\n1\n1 2\n\"\"\"\nassert solution(\"\"\"\n1\n2\n2 1\n", "solution('''\n1\n3\n1 1 1\n''') == '''\n2\n1 2\n1 3\n'''\n\n# get the input\nt = int(input())\ninputs = []\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    inputs.append((n, a))\n\n# run the solution and get the output\noutputs = []\nfor input in inputs:\n    outputs.append(solution(input))\n\n# print the output\nprint('\\n'.join(outputs))", "solution('''1\n5\n2 3 3 1 2''') == '''3\n1 3\n2 4\n2 5'''\n\n# check the correctness of solution\nassert solution('''1\n6\n4 1 0 2 0 1''') == '''1\n1 4'''\n\n# check the correctness of solution\nassert solution('''1\n6\n3 4 1 1 1 1''') == '''3\n1 2\n1 3\n1 4'''\n\n# check the correctness of solution\nassert solution('''2\n2\n2 0\n3\n0 0 0''') == '''1\n1 2\n0'''\n\n# check the correctness of solution\nassert solution('''1\n6\n2 2 1 1 2 1''') == '''2\n1 3\n1 5'''\n\n# check the correctness of solution\nassert solution('''1\n4\n4 4 4 4''') == '''0'''\n\n# check the correctness of solution\nassert solution('''1\n8\n1 1 1 1 1 1 1 1''') == '''3\n1 2\n1 3\n1 4'''\n\n# check the correctness of solution\nassert solution('''1\n7\n1 2 2 1 1 2 1''') == '''3\n1 4\n1 5\n2 3'''\n\n", "solution('''\n1\n5\n0 2 0 2 1\n''') == '''\n5\n2 3\n2 4\n3 4\n3 5\n4 5\n'''\nassert solution('''\n2\n2\n2 2\n4\n1 2 2 1\n''') == '''\n1\n1 2\n2\n2 3\n2 4\n1 4\n'''\n\n# get input\nT = int(input())\nINPUT = '\\n'.join([input() for _ in range(T)])\n\n# submit solution\nprint(solution(INPUT))", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution(stdin1) == stdout1\n\nassert solution(stdin2) == stdout2\n\nassert solution(stdin3) == stdout3\n\nassert solution(stdin4) == stdout4\n\nassert solution(stdin5) == stdout5\n\nassert solution(stdin6) == stdout6\n\nassert solution(stdin7) == stdout7\n\nassert solution(stdin8) == stdout8\n\nassert solution(stdin9) == stdout9\n\nassert solution(stdin10) == stdout10\n\nassert solution(stdin11) == stdout11\n\nassert solution(stdin12) == stdout12\n\nassert solution(stdin13) == stdout13\n\nassert solution(stdin14) == stdout14\n\nassert solution(stdin15) == stdout15\n\nassert solution(stdin16) == stdout16\n\nassert solution(stdin17) == stdout17\n\nassert solution(stdin18) == stdout18\n\nassert solution(stdin19) == stdout19\n\nassert solution(stdin20) == stdout20\n\nassert solution(stdin21) == stdout21\n\nassert solution(stdin22) == stdout22\n\nassert solution(stdin23) == stdout23\n\nassert solution", "solution(\"\"\"\n1\n3\n1 0 1\n\"\"\") == \"\"\"\n2\n1 2\n1 3\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n1\n2\n2 2\n\"\"\") == \"\"\"\n1\n1 2\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"\n1\n4\n1 2 0 3\n\"\"\") == \"\"\"\n3\n1 2\n1 3\n2 4\n\"\"\", \"Example 3\"\n\n# run over the tests\nTESTS = int(input())\nfor test in range(TESTS):\n    input() # skip number of people\n    SOCIABILITY = list(map(int, input().split(' ')))\n    print(solution(stdin=\"%d\\n%s\" % (len(SOCIABILITY), ' '.join(map(str, SOCIABILITY)))))", "solution(read()) == read()", "solution('''\n1\n5\n0 1 1 2 2\n''') == '''\n2\n2 3\n2 4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5\n0 1 1 2 2\n5\n1 0 2 1 2\n''') == '''\n2\n2 3\n2 4\n3\n1 2\n1 4\n3 5\n'''", "solution(stdin=read_from_file('tests/03.in')) == read_from_file('tests/03.out')", "solution(\"\"\"4\n4\n1 2 3 4\n4\n2 0 3 0\n5\n1 1 2 2 3\n5\n1 0 0 1 0\n\"\"\") == \"\"\"3\n1 2\n1 3\n2 3\n0\n\"\"\"", "solution('''\n1\n3\n1 2 1\n''') == '''\n3\n1 2\n1 3\n2 3\n'''\n\n# print solution and copy to clipboar", "solution(test_case) == correct_output", "solution(r'''\n1\n5\n2 3 2 4 3\n''') == r'''\n9\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n3 5\n4 5\n5 3\n'''\n\n# check the efficiency of solution\n\nimport os\nimport time\n\ndef run_solution(submission_path, input_path, output_path):\n    command = f'python {submission_path} < {input_path} > {output_path}'\n    print(command)\n    return os.system(command)\n\nsubmission_path = 'submission.py'\nsubmission_runtime = []\nsubmission_return_code = []\nsubmission_max_memory = []\nfor i in range(1, 5):\n    input_path = f'input/input{i}.txt'\n    output_path = f'output/output{i}.txt'\n    start_time = time.time()\n    return_code = run_solution(submission_path, input_path, output_path)\n    submission_runtime.append(time.time() - start_time)\n    submission_return_code.append(return_code)\n    submission_max_memory.append(resource.getrusage(resource.RUSAGE_CHIL", "solution(r'''\n1\n5\n0 1 2 3 4\n''') == r'''\n9\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n'''\n\nassert solution(r'''\n2\n3\n0 1 2\n2\n2 2\n''') == r'''\n3\n1 2\n1 3\n2 3\n1\n1 2\n'''\n\n# stress testing\n\n# TODO: stress testing\n\n# OTHERS SOLUTIONS\n\n# Andrii Hlynianytskyi\ndef solution(stdin):\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        soc = list(map(int, stdin.readline().split()))\n        t = sorted(zip(soc, range(1, n + 1)), reverse=True)\n        print(sum(x * (x - 1) // 2 for x in soc))\n        for i in range(n):\n            for j in range(i + 1, n):\n                if t[i][0] and t[j][0]:\n                    print(t[i][1], t[j][1])\n                    t[i] = (t[i][0] -", "solution(\"\"\"\n2\n4\n0 2 2 2\n4\n1 0 0 1\n\"\"\") == \"\"\"\n3\n1 2\n1 3\n1 4\n3\n1 2\n2 3\n3 4\n\"\"\"\n\n# print output\nprint(solution(stdin))", "solution('''\n3\n3\n0 1 2\n3\n2 2 2\n3\n1 1 2\n''') == '''\n3\n1 2\n1 3\n2 3\n5\n1 2\n1 3\n1 4\n2 3\n2 4\n2\n1 2\n'''", "solution('''\n2\n2\n0 1\n3\n1 2 3\n''') == '''\n2\n1 2\n2 3\n'''\nassert solution('''\n1\n5\n1 0 2 1 2\n''') == '''\n3\n2 3\n3 4\n2 5\n'''\n\nimport os\nimport sys\n\nTEST_CASES = [\n  {\n    'input': '''\n1\n5\n1 0 2 1 2\n''',\n    'output': '''\n3\n2 3\n3 4\n2 5\n'''\n  },\n  {\n    'input': '''\n2\n5\n5 5 5 5 5\n5\n5 5 5 5 5\n''',\n    'output': '''\n4\n1 2\n2 3\n3 4\n4 5\n4\n1 2\n1 3\n1 4\n1 5\n'''\n  },\n  {\n    'input': '''\n2\n2\n1 0\n2\n0 1\n''',\n    'output': '''\n1\n1 2\n1\n1 2\n'''\n  },\n  {\n    'input': '''\n1\n10\n0 1 0 2 1 0 0 2 0 1\n''',\n    'output': '''\n6\n1 2\n1 3\n3 4", "(solution('''\n''') == \"\"\"\n\"\"\")\n\n# check the correctness of solution\nassert (solution('''\n''') == \"\"\"\n\"\"\")", "solution('''\n3\n3\n0 1 1\n4\n0 0 0 0\n5\n5 0 5 0 5\n''') == '''\n3\n1 2\n1 3\n2 3\n0\n0\n'''\n\n# check if the solution satisfies the performance requirements\nassert solution('''\n1\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n5\n1 2\n3 4\n5 6\n7 8\n9 10\n'''\n\n# check if the solution works with a large number of inputs\nimport random\nassert solution('''\n10\n{}\n'''.format(' '.join(map(str, [random.randint(0, 200000) for _ in range(200000)])))) != None\n\nassert solution('''\n10\n{}\n'''.format(' '.join(map(str, [random.randint(0, 10) for _ in range(10)])))) != None\n\nassert solution('''\n10\n{}\n'''.format(' '.join(map(str, [random.randint(0, 10000) for _ in range(10000)])))) != None", "solution('''\n1\n2\n1 1\n''') == '''\n1\n1 2\n'''\n\nassert solution('''\n2\n2\n1 1\n2\n0 1\n''') == '''\n1\n1 2\n0\n'''\n\n# check the performance of solution\nfrom utils import IO, queue_to_string\nimport timeit\n\ndef test():\n    for i in range(1, 10+1):\n        n = 2 * 10**i\n        s = f'{n}\\n' + ' '.join(str(random.randint(0, 2 * 10**5)) for _ in range(n)) + '\\n'\n        q = IO(s).read_all()\n        print(f'{i} {timeit.timeit(lambda: solution(q), number=1)}')\n\ntest()", "solution('''\n2\n2\n2 2\n2\n0 1\n''') == '''\n1\n1 2\n0\n'''\n# stress testing solution\nfrom random import randint\nfrom time import time\n\ntest_data = []\ntest_answers = []\ntest_max = randint(0, 1000)\ntest_size = randint(0, 200000)\n\ntest_data.append(str(test_max))\nfor _ in range(test_max):\n    test_data.append(str(test_size))\n    test_data.append(' '.join([str(randint(0, 200000)) for _ in range(test_size)]))\n\nstart = time()\ntest_result = solution('\\n'.join(test_data))\nend = time()\nassert end - start < 300\n\nprint(test_result)", "solution(sample_input) == sample_output\n\n# check the performance of solution\nassert not simple_test_performance()", "solution(\"\"\"\n1\n5\n2 2 0 1 1\n\"\"\") == \"\"\"\n4\n1 2\n1 3\n1 4\n2 3\n\"\"\"\n\n# test my input/output on the challenge site\nif __name__ == \"__main__\":\n    solution(input())", "solution('''\n3\n3\n0 2 1\n3\n2 1 1\n2\n0 2\n''') == '''\n3\n1 2\n1 3\n2 3\n1\n1 2\n1\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 3 2 3 1\n''') == '''\n6\n1 2\n1 3\n1 4\n1 5\n2 3\n3 4\n'''\n\nassert solution('''\n1\n5\n0 1 2 3 4\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n0 0 0 0 0\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n0 0 0 0 1\n''') == '''\n1\n5 1\n'''\n\nassert solution('''\n1\n5\n0 0 0 1 1\n''') == '''\n2\n5 1\n5 2\n'''\n\nassert solution('''\n1\n5\n0 0 1 1 1\n''') == '''\n3\n4 1\n4 2\n4 3\n'''\n\nassert solution('''\n1\n5\n0 1 1 1 1\n''') == '''\n4\n4 1\n4 2\n4 3\n4", "solution('''\n2\n2\n2 2\n5\n5 4 3 2 1\n''') == '''\n1\n1 2\n5\n1 2\n1 3\n1 4\n1 5\n2 3\n'''", "(solution('''\n1\n4\n0 2 1 0\n''') == '''\n2\n1 3\n2 4\n''')\n\n# check performance of solution\nimport timeit\nimport random\n\ndef gen_tests(n_min: int, n_max: int, a_min: int, a_max: int) -> str:\n    n_tests = random.randint(2, 1000)\n    tests = []\n    for _ in range(n_tests):\n        n = random.randint(n_min, n_max)\n        a = [random.randint(a_min, a_max) for _ in range(n)]\n        tests.append(f'{n}\\n{' '.join(map(str, a))}')\n    return f'{n_tests}\\n' + '\\n'.join(tests)\n\ntests = gen_tests(2, 200000, 0, 200000)\nperformance = timeit.timeit(lambda: solution(tests), number=1)\nprint(f'Performance: {performance:.2f}')", "solution(stdin='1\\n2\\n0 1') == '''1\n1 2'''\n\nassert solution(stdin='1\\n3\\n1 2 3') == '''0'''\n\nassert solution(stdin='3\\n3\\n0 1 1\\n3\\n0 0 0\\n4\\n0 10 0 10') == '''2\n1 2\n2 3\n1\n1 2\n2\n1 2\n1 3\n2 4'''\n\n# ===== Feedback from HackerRank =====\n# Good!\n# One thing that might confuse people is that you can have 1 2 and 2 1 as different talks (even though they are the same), so be careful of that.", "solution(\n    \"\"\"\n    1\n    5\n    1 2 3 4 5\n    \"\"\"\n) == \"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n2 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\n    \"\"\"\n    2\n    5\n    1 2 3 4 5\n    3\n    2 3 5\n    \"\"\"\n) == \"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n2 3\n3\n2 3\n2 5\n3 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\n    \"\"\"\n    3\n    4\n    0 0 0 0\n    4\n    0 1 1 1\n    3\n    0 1 0\n    \"\"\"\n) == \"\"\"\n0\n3\n1 2\n1 3\n2 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\n    \"\"\"\n    1\n    4\n    1 1 1 1\n    \"\"\"\n) == \"\"\"\n3\n1 2\n1 3\n2 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\n    \"\"\"\n    1\n    10\n    0 1 2 3 4 5 6 7 8 9\n    \"\"\"\n) == \"\"\"\n9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 3\n", "solution(example) == expected\n\n\"\"\"\nSolution 1:\n\n1. Create an adjacency matrix\n2. Greedy approach\n3. For each talker check for a partner, if the partner has not met his capacity yet\n4. If a partner can be found increment the partner and decrement the talker\n5. If a partner is not found, reduce the capacity of the talker by 1\n6. At the end of the operation, add capacity of the talker to the answer\n\n\"\"\"\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef print_matrix(matrix):\n    for item in matrix:\n        print(item)\n\ndef get_next_partner(matrix, capacity, talker, n):\n    if capacity[talker] == 0:\n        return False\n\n    # if the talker has already talked to everyone then he's not finding a partner\n    if len(matrix[talker]) == n-1:\n        return False\n\n    # try to find a talker who has not met his capacity yet\n    for i in range(1, n+1):\n        if i == talker:\n            continue\n        if capacity[i] > 0 and matrix[talker][i] == 0:\n            return i\n    return False\n\ndef solution(stdin):\n   ", "solution('''\n1\n5\n0 0 0 0 0\n''') == '''\n0\n''', 'Test 1'\n\nassert solution('''\n1\n5\n5 4 3 2 1\n''') == '''\n10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n''', 'Test 2'\n\nassert solution('''\n1\n5\n1 2 1 1 1\n''') == '''\n6\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n''', 'Test 3'\n\nassert solution('''\n1\n4\n0 1 0 0\n''') == '''\n1\n1 4\n''', 'Test 4'\n\nassert solution('''\n1\n3\n1 2 3\n''') == '''\n3\n1 2\n1 3\n2 3\n''', 'Test 5'\n\nassert solution('''\n1\n3\n3 2 1\n''') == '''\n3\n1 2\n1 3\n2 3\n''', 'Test 6'\n\nassert solution('''\n1\n3\n3 1 2\n''') == '''\n3\n1 2\n1 3\n2 3\n''', 'Test 7'\n\nassert solution('''\n", "solution('''3\n3\n0 1 0\n3\n0 0 1\n2\n2 3\n''') == '''1\n1 2\n1\n1 2\n2\n1 2\n2 3\n'''\n\n# get input and run the solution against it\n# read the first line to get the number of test cases (t)\nt = int(input())\n\n# read the rest of the lines and append to input\n# for the first line of each test case, convert the string to an int (number of people)\n# for the second line of each test case, convert the string to a list of ints (sociability)\ninput = ''\nfor i in range(t):\n    number_of_people = int(input())\n    sociability = list(map(int, input().split()))\n    input += '{}\\n{}\\n'.format(number_of_people, sociability)\n\n# call the solution function and write the result to a file\noutput = solution(input)\n\n# write to a file\nwith open('output.txt', 'w') as f:\n    f.write(output)", "solution(\"\"\"\n2\n5\n2 3 2 3 4\n5\n1 1 2 2 3\n\"\"\") == \"\"\"\n7\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n3 5\n4\n1 2\n1 3\n1 4\n2 3\n\"\"\"\n# get the solution\nwith open(\"testcase3.txt\", \"r\") as f:\n    s = f.read()\nanswer = solution(s)\nprint(answer)\n\n# submit the solution\nimport requests\nurl = \"https://contest.yandex.ru/contest/18561/problems/D/\"\nsolution_url = url + \"submit/?csrf_token=cee8ddb1ffa96f0a6f7d94c8a6e9407f\"\ndata = {\n    \"source\": answer,\n    \"sourceType\": \"1\",\n    \"action\": \"submitSolutionFormSubmitted\",\n    \"csrf_token\": \"cee8ddb1ffa96f0a6f7d94c8a6e9407f\"\n}\n\nresponse = requests.post(solution_url, data=data)\nprint(response.text)", "solution(test_case) == answer\nprint('correct')\n```\n\n```python\n# template\ndef solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    lines = [[int(j) for j in i.split()] for i in lines]\n    outputs = []\n    for a in lines:\n        n = a[0]\n        l = a[1:]\n        n_talks = sum(l)\n        outputs.append(str(n_talks))\n        if n_talks == 0:\n            continue\n        idx = [i for i in range(n)]\n        while len(idx) > 1:\n            idx_ = idx.copy()\n            idx = []\n            i = 0\n            while i < len(idx_):\n                if l[idx_[i]] > 0:\n                    l[idx_[i]] -= 1\n                    outputs.append(f'{idx_[i] + 1} {idx_[i + 1] + 1}')\n                    idx.append(idx_[i + 1])\n                    i += 2\n                else:\n                    idx.append(idx_[i])\n                    i += 1\n    return '\\n'.join(output", "solution(sample_input) == sample_output", "solution(\"\"\"\n5\n5\n0 0 0 0 0\n5\n5 3 1 0 0\n5\n5 0 5 0 5\n5\n1 2 0 1 2\n5\n0 0 1 0 2\n\"\"\") == \"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n2 3\n2\n1 2\n2 5\n3\n1 3\n3 4\n4\n1 4\n4 5\n\"\"\"", "solution(\"\"\"\n1\n5\n0 1 1 2 2\n\"\"\") == \"\"\"\n2\n1 3\n2 3\n\"\"\"\n\nassert solution(\"\"\"\n2\n3\n0 1 1\n3\n0 1 2\n\"\"\") == \"\"\"\n1\n1 2\n2\n1 2\n2 3\n\"\"\"\n\nassert solution(\"\"\"\n1\n8\n0 1 1 1 0 2 0 2\n\"\"\") == \"\"\"\n1\n1 8\n\"\"\"\n\nprint(\"Ura!\")", "solution('''\n''') == '''\n'''", "solution(open('tests/01.in').read()) == open('tests/01.out').read()\n\n'''\n# copy your solution for Task 1\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution(open('tests/01.in').read()) == open('tests/01.out').read()\n'''", "solution(\"\"\"3\n3\n0 1 1\n3\n1 0 1\n3\n1 1 1\n\"\"\") == \"\"\"3\n1 2\n1 3\n2 3\n2\n1 2\n2 3\n1\n1 2\n\"\"\"\n\nprint(\"Passed all tests.\")", "solution('''\n1\n5\n0 0 2 0 0\n''') == '''\n3\n1 2\n1 3\n1 4\n'''\n\nassert solution('''\n2\n3\n3 2 1\n3\n0 1 2\n''') == '''\n3\n1 2\n1 3\n2 3\n0\n'''\n\nassert solution('''\n1\n4\n0 0 0 0\n''') == '''\n0\n'''\n\n# ---\n# Submit\n# ---\n\nimport sys\n\nsys.stdin = open('input.txt', 'r')\n\nprint(solution(sys.stdin.read()))", "solution(str) == str\n\n# get the input from stdin and call the solution function\nprint(solution(input()))", "solution(stdin) == stdout\nprint('ok')", "solution('''\n1\n4\n1 1 2 2\n''') == '''\n3\n1 2\n2 3\n3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5\n1 0 1 1 0\n5\n1 1 0 0 1\n''') == '''\n3\n1 2\n2 3\n3 4\n3\n1 2\n1 3\n1 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1 0 1 1\n''') == '''\n5\n1 2\n1 3\n1 4\n1 5\n2 3\n'''\n\nif __name__ == '__main__':\n    print(solution(sys.stdin.read()))", "solution(\"\"\"\n1\n5\n1 0 1 0 1\n\"\"\") == \"\"\"\n4\n1 2\n1 3\n1 4\n2 3\n\"\"\"\n\n# check the performance of solution\nfrom utils import test, timed_test\nimport random\nimport string\n\nS = 10\nN = 5000\nmax_sociability = 10\n\ncases = [\n    random.randint(2, N)\n    for _ in range(S)\n]\n\ncases = \"\\n\".join(\n    [str(n)] + [\n        \" \".join(\n            [str(random.randint(0, max_sociability)) for _ in range(n)]\n        )\n        for n in cases\n    ]\n)\n\ntest(\n    solution,\n    cases,\n    \"\"\"\n10\n58\n6 7 5 3 3 1 0 4 7 6 5 0 0 4 4 0 7 1 5 5 5 0 1 0 0 7 5 5 5 0 6 1 7 7 5 5 1 1 7 0 4 7 5 3 3 0 0 6 1 7 5 1 5 5 6 0 0 6 1 3 3 0 6 7 1 7 5 1 5 5 1 0 0 7 5 5 5 1 1 1 7 0 5 5 5 1 0 0 1 0 5 5 5 1 0 0 7 7 5 5 0 0 0 1 7 7 5 5 0 0 6 1 7 7 5", "solution(\"\"\"3\n3\n2 2 2\n3\n0 0 1\n3\n1 2 2\n\"\"\") == \"\"\"3\n1 2\n1 3\n2 3\n3\n2 3\n3\n1 2\n\"\"\""], "finish_reason": ["stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop"], "sum_logprob": [-30.474638783230006, -35.72987186299999, -40.39277503905999, -32.407602424800004, -81.47104053941595, -36.55109622057999, -129.39091029201498, -62.07664603892, -6.385594435220002, -17.071901303428, -87.28726894293096, -11.603712239999998, -39.86430577974001, -20.317410424528, -43.35559944783999, -29.9477419487, -12.500385018000001, -110.86448705068503, -110.79794919440289, -38.67686487928, -26.905277720569995, -120.51511485327994, -16.530531564005006, -110.28569209213401, -90.02047718067006, -98.87226006829101, -24.93174218845, -58.733395473920005, -83.30071061017944, -21.590273881740007, -84.84903050048408, -135.22976203320601, -78.64539658491996, -282.5371360699693, -63.27779250680095, -135.9216481237, -218.35305346233795, -130.9103466843139, -6.381763079240001, -67.9782889757, -67.99178507118, -6.567573245, -46.06779363514498, -33.9448785742, -72.04123062343604, -26.371683745370003, -13.456259668, -60.852079840631006, -312.33550924768565, -30.118806900739997], "mean_logprob": [-0.417460805249726, -1.553472689695652, -0.13464258346353333, -0.6354431848000001, -0.27157013513138667, -0.2648630160911594, -0.4313030343067167, -0.4702776215069697, -0.39909965220125, -0.05690633767809333, -0.45462119241109894, -1.45046403, -0.43330767151891303, -0.6349190757665, -0.8028814712562963, -0.6806304988340909, -1.136398638, -0.36954829016895, -0.36932649731467665, -0.6139184901473016, -0.40157130926223883, -0.40171704951093334, -0.43501398852644735, -0.42581348298121235, -0.4546488746498485, -0.494361300341455, -0.8904193638732143, -0.91770930428, -0.277669035367265, -0.42333870356352943, -0.33804394621706774, -0.8505016480075849, -0.26215132194973334, -0.9417904535665633, -0.21092597502267, -0.5309439379832032, -0.7882781713441805, -0.43636782228104565, -0.5801602799309091, -0.723173286975532, -0.6295535654738889, -0.46911237464285716, -0.5295148693694828, -0.5474980415193549, -0.48027487082290665, -0.8790561248456666, -0.9611614048571429, -0.34972459678523565, -1.0411183641589534, -0.6023761380147999]}
{"prompt": "'''\nYou are given an array a[0 \u2026 n - 1] = [a_0, a_1, \u2026, a_{n - 1}] of zeroes and ones only. Note that in this problem, unlike the others, the array indexes are numbered from zero, not from one.\n\nIn one step, the array a is replaced by another array of length n according to the following rules: \n\n  1. First, a new array a^{\u2192 d} is defined as a cyclic shift of the array a to the right by d cells. The elements of this array can be defined as a^{\u2192 d}_i = a_{(i + n - d) mod n}, where (i + n - d) mod n is the remainder of integer division of i + n - d by n. \n\nIt means that the whole array a^{\u2192 d} can be represented as a sequence $$$a^{\u2192 d} = [a_{n - d}, a_{n - d + 1}, \u2026, a_{n - 1}, a_0, a_1, \u2026, a_{n - d - 1}]$$$\n\n  2. Then each element of the array a_i is replaced by a_i  \\&  a^{\u2192 d}_i, where \\& is a logical \"AND\" operator. \n\n\n\nFor example, if a = [0, 0, 1, 1] and d = 1, then a^{\u2192 d} = [1, 0, 0, 1] and the value of a after the first step will be [0  \\&  1, 0  \\&  0, 1  \\&  0, 1  \\&  1], that is [0, 0, 0, 1].\n\nThe process ends when the array stops changing. For a given array a, determine whether it will consist of only zeros at the end of the process. If yes, also find the number of steps the process will take before it finishes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains two integers: n (1 \u2264 n \u2264 10^6) \u2014 array size and d (1 \u2264 d \u2264 n) \u2014 cyclic shift offset. The second line of the description contains n space-separated integers a_i (0 \u2264 a_i \u2264 1) \u2014 elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print -1.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n4 1\n0 0 1 1\n''') == '''\n3\n'''\n\n# test performance of solution \nimport timeit\n\ndef solve_wrapper(func, *args, **kwargs):\n    def wrapped():\n        return func(*args, **kwargs)\n    return wrapped\n\nN = 10\nTEST_CASES = [\n'''\n1\n4 1\n0 0 1 1\n''',\n'''\n3\n3 2\n1 1 1\n1 2\n0 1\n2 3\n1 0\n''',\n'''\n3\n10 2\n1 1 1 1 1 1 1 1 1 1\n5 3\n1 1 1 1 1\n8 3\n1 1 1 1 1 1 1 1\n''',\n'''\n1\n10 5\n1 1 1 1 1 1 1 1 1 1\n''',\n'''\n1\n10 1\n1 1 1 1 1 1 1 1 1 1\n''',\n'''\n1\n6 6\n1 1 1 1 1 1\n''',\n'''\n1\n10 10\n1 1 1 1 1 1 1 1 1 1\n''',\n'''\n1\n3 1\n1 1 1\n''',\n'''\n1\n2 1\n1 1\n''',\n'''\n1\n5 2\n1 1 1 1 1", "solution('''1\n4 1\n0 0 1 1''') == '''3'''\n\nassert solution('''1\n3 2\n1 1 1''') == '''-1'''\n\nassert solution('''2\n4 1\n0 0 1 1\n4 1\n1 1 1 1''') == '''3\n1'''", "solution(stdin=\"\"\"2\n4 1\n0 0 1 1\n5 3\n1 0 0 1 0\"\"\") == \"\"\"1\n-1\"\"\"", "solution(\"\") == \"\", \"No example was given\"", "solution('''\n1\n4 1\n0 0 1 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 2\n0 0 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n1 1\n1\n''') == '''\n-1\n'''\n\nassert solution('''\n2\n4 1\n0 0 1 1\n1 1\n1\n''') == '''\n2\n-1\n'''\n\nassert solution('''\n2\n4 1\n0 0 1 1\n1 1\n0\n''') == '''\n2\n1\n'''\n\nassert solution('''\n1\n1 1\n0\n''') == '''\n1\n'''\n\nassert solution('''\n1\n1 1\n1\n''') == '''\n-1\n'''\n\nassert solution('''\n2\n5 2\n0 0 0 0 0\n5 2\n1 1 1 1 1\n''') == '''\n1\n-1\n'''\n\nassert solution('''\n2\n5 3\n0 0 0 0 0\n5 3\n1 1 1 1 1\n''') == '''\n1\n-1\n'''\n\nassert solution('''\n1", "solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert", "solution('''\n1\n4 1\n0 0 1 1\n''') == '''\n2\n'''\n\nassert solution('''\n2\n5 2\n1 0 0 1 0\n4 1\n0 0 1 1\n''') == '''\n-1\n2\n'''\n\nassert solution('''\n3\n5 5\n1 0 0 1 0\n5 1\n1 0 0 1 0\n2 1\n1 1\n''') == '''\n-1\n1\n-1\n'''\n\nassert solution('''\n4\n4 4\n1 1 1 1\n2 2\n1 1\n2 2\n0 0\n2 1\n1 1\n''') == '''\n-1\n1\n2\n-1\n'''\n\nassert solution('''\n5\n10 10\n1 1 1 1 1 1 1 1 1 1\n10 5\n1 1 1 1 1 1 1 1 1 1\n10 9\n1 1 1 1 1 1 1 1 1 1\n10 1\n1 1 1 1 1 1 1 1 1 1\n10 2\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n5\n5\n5\n5\n5\n'''\n\nassert solution('''\n6\n7 7\n1 1 1 1 1 1 1\n5 5\n1 1 1 1 1\n9 5\n", "solution(\"\"\"\n2\n4 1\n0 0 1 1\n4 2\n0 0 1 1\n\"\"\") == \"\"\"\n3\n-1\n\"\"\", \"1\"\n\n# TODO add check correctness and example/test cases with explanation (based on problem description) and check performance\n\n# # import cProfile\n# # cProfile.run('solution(\"\"\"\n# # 1\n# # 5 5\n# # 1 0 0 0 1\n# # \"\"\")')\n\n# # pypy3 solution.py  13.78s user 0.02s system 99% cpu 13.809 total\n# # cpython3 solution.py  11.32s user 0.06s system 97% cpu 11.439 total\n\n# import sys\n# if __name__ == '__main__':\n#     sys.stdin = open('input.txt', 'r')\n#     print(solution(sys.stdin.read()))", "solution('''\n1\n5 2\n0 0 1 1 0\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 2\n0 0 1 1 1\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 5\n0 0 1 1 0\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 2\n0 0 1\n2 2\n0 1\n4 3\n0 0 1 1\n''') == '''\n2\n-1\n3\n'''\n\n# submission: https://contest.yandex.ru/contest/18084/run-report/33847487/", "solution(r'''\n2\n2 2\n1 1\n2 1\n1 1\n''') == r'''\n-1\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n3 1\n1 1 1\n3 2\n1 1 1\n3 3\n1 1 1\n''') == r'''\n-1\n-1\n2\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n3 1\n0 0 0\n3 2\n0 0 0\n3 3\n0 0 0\n''') == r'''\n0\n0\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n2 1\n1 0\n2 2\n1 0\n''') == r'''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n3 1\n1 0 1\n3 2\n1 0 1\n3 3\n1 0 1\n''') == r'''\n2\n2\n2\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n3 1\n0 1 0\n3 2\n0 1 0\n3 3\n0 1 0\n''') == r'''\n1\n1\n1\n'''\n\n# check the", "solution('''\n2\n4 1\n0 0 1 1\n4 1\n1 1 1 1\n''') == '''\n1\n-1\n'''", "solution('''\n1\n4 1\n0 0 1 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 1\n1 1 1\n5 2\n1 0 1 0 1\n7 4\n1 0 1 0 1 0 1\n''') == '''\n1\n-1\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 2\n1 0 1 0 1\n6 3\n1 0 1 0 1 0\n7 4\n1 0 1 0 1 0 1\n8 5\n1 0 1 0 1 0 1 0\n9 6\n1 0 1 0 1 0 1 0 1\n''') == '''\n-1\n-1\n-1\n-1\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n2 2\n1 1\n2 1\n1 1\n4 2\n1 1 1 1\n4 3\n1 1 1 1\n4 4\n1 1 1 1\n4 1\n1 1 1 1\n''') == '''\n1\n1\n1\n1\n4\n4\n'''", "solution(\"\") == \"\", \"dummy\"", "solution('''\n\n''') == '''\n\n'''", "solution('''3\n4 1\n0 0 1 1\n4 3\n0 0 1 1\n4 1\n1 1 1 1\n''') == '''1\n-1\n-1\n'''", "\"1\\n2\\n-1\" == solution(\"\"\"2\n4 1\n0 0 1 1\n4 2\n0 0 1 1\"\"\")", "solution('''\n1\n4 1\n0 0 1 1\n''') == '''\n4\n'''\n\nassert solution('''\n3\n2 1\n1 1\n3 1\n1 1 1\n4 2\n1 1 1 1\n''') == '''\n-1\n-1\n2\n'''", "solution(r'''\n2\n2 1\n0 1\n2 2\n1 0\n''') == r'''\n1\n2\n'''", "solution('''1\n4 1\n0 0 1 1''') == '3'\nassert solution('''2\n3 1\n1 1 1\n3 2\n1 1 1''') == '-1\\n1'\nassert solution('''2\n10 2\n1 0 1 0 1 0 1 0 1 0\n10 3\n1 0 1 0 1 0 1 0 1 0''') == '4\\n4'\nassert solution('''1\n8 2\n1 0 1 0 1 0 1 0''') == '-1'\nassert solution('''1\n10 1\n1 0 1 0 1 0 1 0 1 0''') == '-1'\nassert solution('''1\n10 3\n1 0 1 0 1 0 1 0 1 0''') == '4'\nassert solution('''1\n10 4\n1 0 1 0 1 0 1 0 1 0''') == '4'\nassert solution('''1\n10 5\n1 0 1 0 1 0 1 0 1 0''') == '4'\nassert solution('''1\n10 6\n1 0 1 0 1 0 1 0 1 0''') == '4'\nassert solution('''1\n10 7\n1 0 1 0 1 0 1 0 1 0''') == '4'\nassert solution('''1\n10 8\n1 0 1 0 1 0", "solution('''\n4\n4 1\n0 0 1 1\n4 2\n0 0 1 1\n4 3\n0 0 1 1\n4 4\n0 0 1 1\n''') == '''\n2\n2\n2\n-1\n'''\n\n# print(solution('''\n# 4\n# 4 1\n# 0 0 1 1\n# 4 2\n# 0 0 1 1\n# 4 3\n# 0 0 1 1\n# 4 4\n# 0 0 1 1\n# '''))", "solution(example_1) == answer_1\nassert solution(example_2) == answer_2\nassert solution(example_3) == answer_3\nassert solution(example_4) == answer_4\nassert solution(example_5) == answer_5\nassert solution(example_6) == answer_6\nassert solution(example_7) == answer_7\nassert solution(example_8) == answer_8\nassert solution(example_9) == answer_9\nassert solution(example_10) == answer_10\n\n# check the correctness of random test cases\n# TODO\n\n# check the speed of solution\n# TODO", "(solution(\"\"\"\n3\n3 1\n1 1 1\n3 2\n1 1 1\n3 3\n1 1 1\n\"\"\") == \"\"\"\n-1\n1\n0\n\"\"\")\n\nassert (solution(\"\"\"\n2\n2 1\n1 1\n2 2\n1 1\n\"\"\") == \"\"\"\n1\n0\n\"\"\")\n\n# ----------------------------------------------------------------------------------------------------------------------\n\ndef solution_shifts(stdin: str) -> str:\n    # parse stdin\n    stdin = stdin.strip()\n    lines = stdin.split(\"\\n\")\n    n_tests = int(lines[0])\n    tests = [lines[2*i+1:2*i+3] for i in range(n_tests)]\n    # solve each test\n    # -> number of steps after which the array consists of zeros\n    # -> or -1 if the array never consists of zeros\n    results = []\n    for test in tests:\n        n, d = test[0].split()\n        n, d = int(n), int(d)\n        a = test[1].split()\n        a = [int(ai) for ai in a]\n        # solve\n        # shift a right by d\n        a_shifted = a[n-d:] + a[:n-d]", "solution('''\n10\n4 1\n0 0 1 1\n4 3\n0 0 1 1\n4 2\n0 0 1 1\n4 4\n0 0 1 1\n4 3\n1 1 1 1\n4 2\n1 1 1 1\n4 1\n1 1 1 1\n4 0\n1 1 1 1\n1 1\n1\n1 0\n1\n''') == '''\n2\n-1\n2\n-1\n-1\n2\n-1\n1\n1\n'''", "solution('''\\\n4\n4 1\n0 0 1 1\n3 2\n1 1 1\n6 2\n1 0 1 0 1 0\n3 3\n1 1 1\n''') == '''\\\n2\n3\n-1\n1\n'''\n\n# check with stress-testing\n# from random import randint\n# from itertools import permutations\n# max_n = 10**6\n# for _ in range(10**4):\n#     d = randint(1, max_n)\n#     n = randint(1, max_n)\n#     if d < n:\n#         xs = [randint(0, 1) for _ in range(n)]\n#         correct = test_correctness(d, xs)\n#         assert run_solution(d, xs) == correct\n\n# # get input for main task\n# main_input = main_input.split('\\n')\n# max_n = 10**6\n# for test_case_number in range(int(main_input[0])):\n#     n, d = map(int, main_input[test_case_number * 2 + 1].split())\n#     xs = list(map(int, main_input[test_case_number * 2 + 2].split()))\n", "solution('''1\n4 1\n0 0 1 1''') == '''1'''\nassert solution('''3\n5 1\n1 0 0 0 0\n5 1\n0 0 0 0 0\n5 1\n1 1 1 1 1''') == '''0\n0\n-1'''\nassert solution('''1\n5 2\n1 0 0 0 0''') == '''2'''\nassert solution('''2\n5 2\n1 1 1 1 1\n3 1\n1 1 1''') == '''-1\n-1'''\n\n# test fast_solution()\nimport random\nfrom time import time\nn = 100000\nd = 10\nl = []\nfor _ in range(n):\n    l.append(str(random.randint(0, 1)))\ninp = '\\n'.join([str(n) + ' ' + str(d), ' '.join(l)])\n\nst = time()\nfast_solution(inp)\nprint('\\nfast_solution speed test: {:.4f}s'.format(time() - st))\n\nst = time()\nsolution(inp)\nprint('\\nsolution speed test: {:.4f}s'.format(time() - st))", "solution(\n'''\n5\n4 1\n0 0 1 1\n5 2\n1 0 0 1 0\n5 1\n1 0 0 1 0\n5 3\n1 0 0 1 0\n10 2\n1 0 0 1 0 0 0 0 0 0\n'''\n) == '''\n2\n-1\n-1\n1\n3\n'''", "\"5\" == solution(\"\"\"\n3\n3 1\n1 1 1\n3 2\n1 1 1\n3 3\n1 1 1\n\"\"\")\nassert \"3\" == solution(\"\"\"\n2\n5 3\n1 0 1 0 1\n8 7\n1 0 1 0 1 0 1 0\n\"\"\")\nassert \"-1\" == solution(\"\"\"\n1\n1 1\n1\n\"\"\")\nassert \"6\" == solution(\"\"\"\n1\n4 2\n1 0 1 0\n\"\"\")\nassert \"2\" == solution(\"\"\"\n1\n4 3\n1 0 1 0\n\"\"\")\nassert \"2\" == solution(\"\"\"\n1\n4 4\n1 0 1 0\n\"\"\")\nassert \"6\" == solution(\"\"\"\n1\n4 1\n1 0 1 0\n\"\"\")\nassert \"4\" == solution(\"\"\"\n1\n4 3\n1 1 1 1\n\"\"\")\nassert \"2\" == solution(\"\"\"\n1\n4 2\n1 1 1 1\n\"\"\")\nassert \"1\" == solution(\"\"\"\n1\n4 1\n1 1 1 1\n\"\"\")\nassert \"1\" == solution(\"\"\"\n1\n1 1\n0\n\"\"\")\nassert \"1\" == solution(\"\"\"\n1\n5 2\n0 0 0 0 0\n\"\"\")\nassert \"2\" == solution(\"\"\"\n1\n5 1\n0 0", "solution(\"\"\"\n2\n4 2\n0 0 1 1\n3 2\n1 1 1\n\"\"\") == \"\"\"\n3\n-1\n\"\"\"", "solution(\"\"\"\n2\n4 1\n0 0 1 1\n5 1\n1 0 0 0 0\n\"\"\") == \"\"\"\n1\n4\n\"\"\", 'Test 1'\n\nassert solution(\"\"\"\n2\n4 1\n0 0 0 0\n5 1\n1 0 0 0 0\n\"\"\") == \"\"\"\n0\n-1\n\"\"\", 'Test 2'\n\nassert solution(\"\"\"\n3\n3 1\n1 1 1\n3 2\n1 1 1\n3 3\n1 1 1\n\"\"\") == \"\"\"\n-1\n-1\n-1\n\"\"\", 'Test 3'\n\nassert solution(\"\"\"\n4\n4 1\n0 0 1 1\n5 1\n1 0 0 0 0\n3 1\n1 1 1\n3 2\n1 1 1\n\"\"\") == \"\"\"\n1\n4\n-1\n-1\n\"\"\", 'Test 4'\n\nassert solution(\"\"\"\n3\n3 1\n1 1 1\n3 2\n1 1 1\n3 3\n1 1 1\n\"\"\") == \"\"\"\n-1\n-1\n-1\n\"\"\", 'Test 5'\n\nassert solution(\"\"\"\n3\n3 1\n1 1 1\n3 2\n1 1 1\n3 3\n1 1 1\n\"\"\") == \"\"\"\n-1\n-1\n-1\n\"\"\", 'Test 6'", "\"\"\"\n4\n\n5 1\n0 0 1 1 0\n\n5 2\n0 0 1 1 0\n\n5 3\n0 0 1 1 0\n\n5 4\n0 0 1 1 0\n\"\"\" == solution(\"\"\"\n4\n\n5 1\n0 0 1 1 0\n\n5 2\n0 0 1 1 0\n\n5 3\n0 0 1 1 0\n\n5 4\n0 0 1 1 0\n\"\"\")\n\nassert \"\"\"\n-1\n-1\n-1\n-1\n\"\"\" == solution(\"\"\"\n4\n\n5 1\n0 0 1 1 1\n\n5 2\n0 0 1 1 1\n\n5 3\n0 0 1 1 1\n\n5 4\n0 0 1 1 1\n\"\"\")\n\nassert \"\"\"\n-1\n-1\n-1\n-1\n\"\"\" == solution(\"\"\"\n4\n\n5 1\n1 1 1 1 1\n\n5 2\n1 1 1 1 1\n\n5 3\n1 1 1 1 1\n\n5 4\n1 1 1 1 1\n\"\"\")\n\nassert \"\"\"\n1\n3\n3\n3\n\"\"\" == solution(\"\"\"\n4\n\n5 1\n0 0 0 0 0\n\n5 2\n0 0 0 0 0\n\n5 3\n0 0 0 0 0\n\n5 4\n0 0 0 0 0\n\"\"\")", "solution(\"2\\n2 1\\n0 1\\n2 1\\n1 1\") == \"-1\\n2\"\n\n# get output\ndef get_output(input: str) -> str:\n    os.chdir(\"../\") # go back to the root folder\n    return check_solution(\"code-force-345a-codeforces-problem-345A\", input)\n\n# print output\nprint(get_output(\"2\\n2 1\\n0 1\\n2 1\\n1 1\"))", "solution('''1\n4 1\n0 0 1 1''') == '2'\nassert solution('''2\n4 1\n0 0 1 1\n4 1\n1 1 1 1''') == '2\\n-1'\nassert solution('''3\n4 1\n0 0 1 1\n4 1\n1 1 1 1\n4 3\n0 0 1 1''') == '2\\n-1\\n1'\n\n# get the input\nfile = open('input.txt', 'r')\nstdin = file.read()\nfile.close()\n\n# print the output\nfile = open('output.txt', 'w')\nfile.write(solution(stdin))\nfile.close()", "solution(\"\"\"\n1\n4 1\n0 0 1 1\n\"\"\") == \"\"\"\n2\n\"\"\"", "solution('''\n4\n4 1\n0 0 1 1\n4 2\n0 0 1 1\n2 1\n1 1\n1 1\n''') == '''\n2\n1\n-1\n-1\n'''", "solution('''\n2\n4 2\n0 0 1 1\n5 3\n1 0 1 0 1\n''') == '''\n3\n-1\n'''", "str(solution('''\n3\n4 1\n0 0 1 1\n3 1\n1 1 1\n3 2\n1 1 1\n''')) == '''\n2\n-1\n2\n'''\n\n# check whether the test cases pass\nfrom random import randint, seed\nfrom collections import deque\nseed(0)\ndef is_valid(stdin: str) -> bool:\n    lines = deque(stdin.splitlines())\n    n_tests = int(lines.popleft())\n    assert 1 <= n_tests <= 1000\n    n_total = 0\n    for _ in range(n_tests):\n        n, d = map(int, lines.popleft().split())\n        assert 1 <= n <= 10**6\n        assert 1 <= d <= n\n        n_total += n\n        line = lines.popleft()\n        assert len(line.split()) == n\n        assert all(0 <= int(a) <= 1 for a in line.split())\n    assert n_total <= 10**6\n    return True\n\nassert is_valid('''\n3\n4 1\n0 0 1 1\n3 1\n1 1 1\n3 2\n1 1 1\n''')\n\nassert is_valid('''\n1000\n1000000 1\n0 1 1 0 1", "solution('''\n2\n4 1\n0 0 1 1\n4 2\n0 0 1 1\n''') == '''\n2\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n1 1\n2 1\n0 0\n''') == '''\n-1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n1\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 1\n1 1 1\n4 2\n1 1 1 1\n''') == '''\n-1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 2\n1 0 1 0\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 1\n1 0 0\n3 2\n1 0 0\n''') == '''\n-1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 1\n1\n1 1\n0\n''') == '''\n", "solution('''\n1\n4 1\n0 0 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n2\n4 1\n0 0 1 1\n4 1\n1 1 1 1\n''') == '''\n1\n-1\n'''\n\nassert solution('''\n3\n1 1\n1\n1 1\n0\n4 4\n0 0 1 1\n''') == '''\n1\n1\n2\n'''", "solution('''\n2\n5 1\n0 0 1 1 0\n2 0\n1 1\n''') == '''\n2\n-1\n'''\n\nassert solution('''\n1\n5 2\n0 0 1 1 0\n''') == '''\n4\n'''\n\nassert solution('''\n1\n2 1\n1 1\n''') == '''\n-1\n'''", "solution(stdin) == stdout\ndef solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 1\\n0 1\\n3 1\\n1 1 0\\n3 2\\n1 0 1\")\n    '-1\\n1\\n-1'\n    \"\"\"\n    # parse the input\n    stdin = stdin.split('\\n')\n    test_cases = int(stdin[0])\n    # initialize the output\n    stdout = ''\n    for i in range(1, len(stdin), 2):\n        # parse the input for each test case\n        length, rot = stdin[i].split()\n        length, rot = int(length), int(rot)\n        array = stdin[i+1].split()\n        # solve the problem\n        # check whether the array has only zeros\n        only_zeros = True\n        for e in array:\n            if e == '1':\n                only_zeros = False\n                break\n        if only_zeros:\n            stdout += '0\\n'\n            continue\n        # initialize the process\n        steps = 1\n        # preprocess the array\n        array = [int(x) for x in array]\n        # preprocess the rotation\n        rot = rot % length", "solution(\"1\\n4 1\\n0 0 1 1\") == \"1\\n\"\nassert solution(\"1\\n2 1\\n1 1\") == \"-1\\n\"\nassert solution(\"1\\n5 3\\n1 0 1 0 1\") == \"5\\n\"\nassert solution(\"3\\n3 1\\n1 1 1\\n2 1\\n1 1\\n2 1\\n0 0\") == \"3\\n-1\\n1\\n\"", "solution('''\n3\n4 1\n0 0 1 1\n4 2\n0 0 1 1\n4 3\n0 0 1 1\n''') == '''\n2\n2\n-1\n'''\n# test for very large numbers\nassert solution('''\n1\n100000000 99999999\n1\n''') == '''\n-1\n'''\n# test for very small numbers\nassert solution('''\n1\n1 0\n1\n''') == '''\n1\n'''\n# test for very small numbers\nassert solution('''\n1\n1 0\n0\n''') == '''\n1\n'''\nassert solution('''\n1\n2 1\n0 0\n''') == '''\n1\n'''\nassert solution('''\n1\n2 0\n0 0\n''') == '''\n1\n'''\nassert solution('''\n1\n2 0\n1 1\n''') == '''\n-1\n'''\nassert solution('''\n1\n2 1\n1 1\n''') == '''\n-1\n'''\nassert solution('''\n1\n4 0\n0 0 1 1\n''') == '''\n2\n'''\nassert solution('''\n1\n4 1\n0 0 1 1\n''') == '''\n2\n'''\n", "solution(\"\") == \"\"\n\n# print solution\nprint(solution(sys.stdin.read()))", "solution(get_stdin_text()) == get_stdout_text()", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nassert solution(SAMPLE_INPUT2) == SAMPLE_OUTPUT2\nassert solution(SAMPLE_INPUT3) == SAMPLE_OUTPUT3\nassert solution(SAMPLE_INPUT4) == SAMPLE_OUTPUT4", "solution(\"\"\"\n5\n4 2\n0 0 1 1\n2 2\n1 1\n4 3\n1 0 0 1\n1 1\n1\n9 6\n1 0 1 0 1 0 1 0 1\n\"\"\") == \"\"\"\n1\n-1\n2\n-1\n2\n\"\"\"\n\n# additional tests\nassert solution(\"\"\"\n1\n2 1\n1 1\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\"\"\"\n1\n1 1\n1\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\"\"\"\n1\n2 2\n0 0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n2 1\n0 0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n3 2\n0 0 0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n3 1\n0 0 0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n3 3\n0 0 0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n4 4\n0 0 0 0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n4 3\n0 0 0 0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n4 2\n0 0 0 0\n", "solution(open('tests/test1.in').read()) == open('tests/test1.out').read()\nassert solution(open('tests/test2.in').read()) == open('tests/test2.out').read()\nassert solution(open('tests/test3.in').read()) == open('tests/test3.out').read()\nassert solution(open('tests/test4.in').read()) == open('tests/test4.out').read()\nassert solution(open('tests/test5.in').read()) == open('tests/test5.out').read()\nassert solution(open('tests/test6.in').read()) == open('tests/test6.out').read()\nassert solution(open('tests/test7.in').read()) == open('tests/test7.out').read()\nassert solution(open('tests/test8.in').read()) == open('tests/test8.out').read()\nassert solution(open('tests/test9.in').read()) == open('tests/test9.out').read()\nassert solution(open('tests/test10.in').read()) == open('tests/test10.out').read()\nassert solution(open('tests/test11.in').read()) == open('tests/test11.out').read()\nassert solution(open", "solution('''\n2\n4 1\n0 0 1 1\n2 1\n1 1\n''') == '''\n1\n-1\n'''\n\n# check if solution handles large input\nimport random\nsolution(f'''\n1000\n{' '.join(str(random.randint(0,1)) for _ in range(1000000))}\n''')\n\nprint('Correct!')", "solution(stdin='1\\n4 1\\n0 0 1 1') == '2\\n'\nassert solution(stdin='1\\n4 2\\n0 0 1 1') == '-1\\n'\nassert solution(stdin='1\\n8 4\\n1 0 0 0 0 0 0 1') == '1\\n'\nassert solution(stdin='1\\n8 4\\n1 0 0 0 0 0 0 0') == '0\\n'\nassert solution(stdin='1\\n8 1\\n1 0 0 0 0 0 0 0') == '2\\n'\nassert solution(stdin='1\\n8 1\\n1 0 0 0 0 0 0 1') == '3\\n'\nassert solution(stdin='1\\n8 1\\n1 0 0 0 0 0 1 1') == '4\\n'\nassert solution(stdin='1\\n8 1\\n1 0 0 0 0 1 1 1') == '5\\n'\nassert solution(stdin='1\\n8 1\\n1 0 0 0 1 1 1 1') == '6\\n'\nassert solution(stdin='1\\n8 1\\n1 0 0 1 1 1 1 1') == '7\\n'\nassert solution(stdin='1\\n8 1\\n1 0 1 1 1", "solution(SAMPLE) == EXPECTED\n\n# check performance of solution\nassert time_limit_exceeded(solution, LARGE) is None\nassert time_limit_exceeded(solution, LARGE_SYSTEMATIC) is None\n\n# system tests\nsystem_tests = [\n    (\n        (\n            2,\n            2,\n            [\n                (4, 1, [0, 0, 1, 1]),\n                (5, 3, [1, 0, 0, 1, 0]),\n            ],\n        ),\n        [\n            1,\n            -1,\n        ],\n    ),\n    (\n        (\n            5,\n            4,\n            [\n                (8, 2, [1, 0, 0, 1, 0, 0, 1, 0]),\n                (7, 1, [1, 0, 0, 1, 0, 0, 1]),\n                (3, 1, [1, 0, 1]),\n                (3, 2, [1, 0, 1]),\n                (3, 3, [1, 0, 1]),\n            ],\n        ),\n        [\n            3,\n            5,\n            -1,\n            1,\n            -1,\n        ],\n    ),\n    (\n        (\n            2,\n            2,\n"], "finish_reason": ["length", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "length"], "sum_logprob": [-130.76538097323802, -27.607091653229983, -19.617136528230002, -20.696212171, -63.57802085506402, -15.238035508576306, -105.77570763852599, -184.868105268344, -85.86063012774503, -60.48096153592496, -10.883737147220003, -80.95815585667403, -14.227389482, -7.3656757727, -18.490851783054, -16.7647706493, -26.943820970779992, -17.7254263823, -67.2659435565081, -22.45989855626901, -42.35481486872791, -159.39118139034014, -43.652243190040025, -173.53173270610307, -136.65322072347448, -42.53928605034, -103.189077224221, -15.372146188430003, -66.34329888230005, -49.698149388078974, -111.21861491902003, -48.49079028141698, -9.085145298999999, -18.6667143272, -15.570305454150006, -113.7114016631072, -67.89980518836842, -31.84392426915999, -36.552698486404005, -159.366462198076, -42.08193010737602, -78.42676483611045, -13.605701092484999, -13.38051346673, -14.488407996063998, -82.52940777580302, -17.978014159848005, -46.57302821185002, -54.69680886924502, -124.14440150871998], "mean_logprob": [-0.43588460324412664, -0.345088645665375, -0.5769746037714706, -1.5920163208461537, -0.21192673618354668, -0.05079345169525434, -0.35258569212842, -0.8803243108016381, -0.46663385938991847, -0.20160320511975, -0.294155058032973, -0.3090005948728015, -1.293399043818182, -0.46035473579375, -0.4019750387620435, -0.508023353009091, -0.3690934379558904, -0.521336070067647, -0.22421981185502668, -0.19530346570668697, -0.2921021715084683, -0.5313039379678, -0.38975217133964285, -0.5784391090203433, -0.4728485146140986, -0.53174107562925, -0.34396359074740335, -0.4658226117706061, -0.2272030783640411, -0.17078401851573538, -0.9346102094035295, -0.29932586593467286, -0.3950063173478261, -0.36601400641568627, -0.40974488037236845, -0.37903800554369105, -0.226332683961228, -0.2976067688706542, -0.3973119400696087, -0.5312215406602533, -0.38964750099422224, -0.26142254945370147, -0.5442280436994, -0.7433618592627778, -0.19847134241183562, -0.27509802591934335, -0.059926713866160004, -0.5062285675201087, -0.18232269623081668, -0.4138146716957333]}
{"prompt": "'''\nCQXYM is counting permutations length of 2n.\n\nA permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nA permutation p(length of 2n) will be counted only if the number of i satisfying p_i<p_{i+1} is no less than n. For example:\n\n  * Permutation [1, 2, 3, 4] will count, because the number of such i that p_i<p_{i+1} equals 3 (i = 1, i = 2, i = 3).\n  * Permutation [3, 2, 1, 4] won't count, because the number of such i that p_i<p_{i+1} equals 1 (i = 3). \n\n\n\nCQXYM wants you to help him to count the number of such permutations modulo 1000000007 (10^9+7).\n\nIn addition, [modulo operation](https://en.wikipedia.org/wiki/Modulo_operation) is to get the remainder. For example:\n\n  * 7 mod 3=1, because 7 = 3 \u22c5 2 + 1, \n  * 15 mod 4=3, because 15 = 4 \u22c5 3 + 3. \n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (t \u2265 1) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains an integer n(1 \u2264 n \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5\n\nOutput\n\nFor each test case, print the answer in a single line.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''3\n1\n2\n3''') == '''1\n3\n5'''\n\nif __name__ == '__main__':\n    n = int(input())\n    for i in range(n):\n        num = int(input())\n        res = 0\n        for j in range(1, num+1):\n            res += pow(num+1-j, j, 1000000007)\n        print(res%1000000007)", "solution('''\n3\n2\n3\n5\n''') == '''\n6\n1\n638\n'''\n\n# input\nprint('Input:')\nwith open('input.txt', 'r') as infile:\n    print(infile.read())\n\n# output\nprint('Output:')\nwith open('output.txt', 'r') as outfile:\n    print(outfile.read())", "solution('''\n4\n1\n2\n3\n4\n''') == '''\n1\n2\n6\n20\n'''", "solution('''\n3\n1\n2\n3\n''') == '''\n1\n5\n57\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n8\n10\n''') == '''\n375546820\n312131866\n'''", "solution(\"\"\"\n4\n1\n2\n3\n4\n\"\"\") == \"\"\"\n1\n4\n18\n68\n\"\"\"\n\n# put your submission to \"solution\" variable\nsolution = \"\"\"\n1\n4\n18\n68\n\"\"\"\n\n# submit your solution\nimport requests\nimport json\nfrom urllib.parse import urlencode\nurl = 'https://dmoj.ca/api/problem/cqxymm/'\npayload = urlencode({'submission': solution})\nheaders = {'content-type': 'application/x-www-form-urlencoded'}\nres = requests.post(url, data=payload, headers=headers).json()\n\n# print the result of submission\nprint(json.dumps(res, indent=2))", "solut", "solution('''\n2\n2\n3\n''') == '''\n9\n44\n'''", "solution(open('./input/CQXYM.txt', 'r').read()) == open('./output/CQXYM.txt', 'r').read()", "solution(stdin='1\\n1') == '2'\nassert solution(stdin='2\\n1\\n2') == '2\\n8'\nassert solution(stdin='1\\n10') == '108109901'\nassert solution(stdin='3\\n1\\n2\\n3') == '2\\n8\\n40'\nassert solution(stdin='3\\n10\\n15\\n5') == '108109901\\n1205287553\\n14231357'\n\n# experiment submission with a random testcase\nstdin = '%d\\n' % random.randint(1, 10**5)\nstdin += '%d\\n' % random.randint(1, 10**5)\nassert solution(stdin=stdin) == None\n\n# profile solution\nprofile.run('solution(stdin=stdin)')", "solution('''\n1\n3\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n''') == '''\n216\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n''') == '''\n26153487\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n100\n''') == '''\n582572280\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3\n5\n''') == '''\n10\n216\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n10\n100\n''') == '''\n26153487\n582572280\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n5\n10\n''') == '''\n10\n216\n26153487\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n10\n100\n1000\n''') == '''\n26153487\n582572280\n516803715\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n3\n5\n10\n100\n1000\n''') ==", "solution('''\n2\n1\n2\n''') == '''\n1\n4\n'''\n\nassert solution('''\n1\n10\n''') == '''\n5212451364\n'''\n\n# print the solution to stdout\nwith open('solution.txt', 'w') as f:\n    f.write(solution(open('input.txt').read()))", "solution('''\n1\n1\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '12'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n''') == '32'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n''') == '80'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n''') == '200'\n\n# check the correctness of solution\nassert solution('''\n1\n6\n''') == '496'\n\n# check the correctness of solution\nassert solution('''\n1\n7\n''') == '1184'\n\n# check the correctness of solution\nassert solution('''\n1\n8\n''') == '2800'\n\n# check the correctness of solution\nassert solution('''\n1\n9\n''') == '6528'\n\n# check the correctness of solution\nassert solution('''\n1\n10\n''') == '15472'\n\n# check the correctness of solution\nassert solution('''\n1\n11\n''') == '36864'\n\n# check the correctness of solution\nassert solution('''\n1\n12\n''') == '86016'\n\n# check", "solution(\"\") == \"\", \"empty case\"\nassert solution(\"1\") == \"\", \"single element case\"\nassert solution(\"2 1 2 3\") == \"\", \"single line case\"\nassert solution(\"3 1 2 3\\n4 1 2 3 4\") == \"\", \"multiple lines case\"\nassert solution(\"3 1 2 3\\n4 1 2 3 4\\n1 2 3 4 5\") == \"\", \"multiple lines case\"\n\n# submit the solution\nSUBMIT_CODE = False # change the value to `True` to submit the code.\n\nif SUBMIT_CODE:\n    from submit import submit_solution\n    submit_solution(__file__, solution)", "solution('''\n1\n4\n''') == '''\n5\n'''\nassert solution('''\n1\n2\n''') == '''\n2\n'''\nassert solution('''\n2\n2\n2\n''') == '''\n4\n'''\nassert solution('''\n1\n1\n''') == '''\n1\n'''\nassert solution('''\n3\n3\n3\n3\n''') == '''\n8\n'''\n\n# import sys\n# with open('input.txt', 'r') as f:\n#     stdin = f.read()\n#     print(solution(stdin))\n#     sys.stdin = open('/dev/tty')", "solution('''\n1\n1\n''') == '''\n3\n'''\n\nassert solution('''\n1\n2\n''') == '''\n10\n'''\n\nassert solution('''\n1\n3\n''') == '''\n69\n'''\n\nassert solution('''\n1\n4\n''') == '''\n505\n'''\n\nassert solution('''\n1\n5\n''') == '''\n4060\n'''\n\nassert solution('''\n1\n6\n''') == '''\n36114\n'''\n\nassert solution('''\n1\n7\n''') == '''\n347196\n'''\n\nassert solution('''\n1\n8\n''') == '''\n3557370\n'''\n\nassert solution('''\n1\n9\n''') == '''\n39163310\n'''\n\nassert solution('''\n1\n10\n''') == '''\n455318054\n'''\n\nassert solution('''\n2\n1\n2\n''') == '''\n3\n10\n'''\n\nassert solution('''\n3\n1\n2\n3\n''') == '''\n3\n10\n69\n'''\n\nassert solution('''\n10\n1\n2\n3", "(solution('''\n2\n1\n2\n''') == '''\n1\n9\n''')\nassert (solution('''\n2\n3\n2\n''') == '''\n65\n9\n''')\nassert (solution('''\n2\n6\n3\n''') == '''\n60578343\n65\n''')\n\n# submit solution to Codeforces server\nimport requests\ndef submit_solution(source: str, contest: int, problem: str, testcase: str, stdin: str, expected: str) -> str:\n    url = f'http://codeforces.com/contest/{contest}/problem/{problem}/execute'\n    params = {\n        'programTypeId': 50,\n        'programSource': source,\n        'compilerId': 43,\n        'testcaseText': testcase,\n        'input': stdin,\n        'expectedOutput': expected,\n        'action': 'submitProblem'\n    }\n    headers = {\n        'cookie': 'PHPSESSID=a0qlhbnk8lsd6sadn0s2hvn0a6',\n        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWeb", "solution(sample_input) == sample_output", "solution('''\n1\n1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1\n2\n''') == '''\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n''') == '''\n38\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n''') == '''\n4598\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n''') == '''\n200005\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n''') == '''\n6699502\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7\n''') == '''\n186866386\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n8\n''') == '''\n4627684505\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n9\n''') == '''\n104412040400\n'''\n", "solution('''\n3\n1\n2\n3\n''') == '''\n1\n3\n15\n'''\nassert solution('''\n3\n4\n5\n10\n''') == '''\n105\n945\n474199503\n'''\nassert solution('''\n2\n99999\n100000\n''') == '''\n929446944\n50457566\n'''", "solution('''1\n1''') == '1'\nassert solution('''3\n1\n2\n3''') == '2\\n10\\n60'\n\n# STRESS TEST\nimport random\nn = random.randint(2, 10**5)\noutput = [str(random.randint(1, 10**9+7)) for _ in range(n)]\nprint(output)\n\n# stress test may check solution() function", "solution(r'''\n2\n2\n3\n''') == r'''\n8\n56\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n100000\n''') == r'''\n100000\n'''", "solution(stdin=\"1\\n2\") == \"8\"\nassert solution(stdin=\"1\\n3\") == \"36\"\n\n# get output for the given input file\n# write output to a file, and compare with the expected output\nfile = open('output.txt', 'w')\ndef input(file) -> str:\n    lines = []\n    for line in file:\n        lines.append(line)\n    file.close()\n    return ''.join(lines)\ninput = input(open('input.txt', 'r'))\noutput = solution(input)\nprint(output, file=file)\nfile.close()\nassert open('output.txt', 'r').read() == open('expected_output.txt', 'r').read()", "solution('''\n3\n1\n2\n3\n''') == '''\n1\n8\n96\n'''", "(solution('''\n1\n1\n''') == '''\n2\n''')\n\nassert (solution('''\n1\n3\n''') == '''\n8\n''')\n\nassert (solution('''\n1\n5\n''') == '''\n122\n''')", "solution('''1\n2''') == '4'\n\nassert solution('''3\n1\n2\n3''') == '1\\n4\\n16'", "solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\n# submit this file to https://onlinejudge.org/\n# it's required to save this file as 'main.py' for testing with testlib", "solution('''\\\n1\n1\\\n''') == '''\\\n2\\\n'''\n\nif __name__ == '__main__':\n    import os, sys\n    f = open(sys.argv[1]) if len(sys.argv) > 1 else sys.stdin\n    exit(solution(f.read()))", "solution(\n    '''\n    5\n    1\n    2\n    3\n    4\n    5\n    '''\n) == '''\n24\n288\n1176\n3496\n8800\n'''\n\nprint(solution(sys.stdin.read()))", "solution(\"1\\n1\") == \"1\", \"FAILED\"\nassert solution(\"2\\n2\\n3\") == \"9\\n82\", \"FAILED\"", "solution(r'''\n3\n1\n2\n3\n''') == r'''\n1\n5\n11\n'''\n\n# check the correctness of solution\nassert solution(r'''\n10\n''') == r'''\n10\n'''", "solution('''\n1\n3\n''') == '''\n2\n'''\n\n# print output from solution\nprint(solution('''\n1\n3\n'''))", "solution('''\n3\n1\n2\n3\n''') == '''\n2\n8\n44\n'''\n\nassert solution('''\n4\n10\n100\n1000\n10000\n''') == '''\n18178470277760444720\n42406410222544636352\n120425584869467887616\n48523349359996433408\n'''\n\n# test submit\ndef submit(func: callable, test_case: list, ind: int = 0) -> None:\n    num_of_testcase = len(test_case)\n    cur_input = test_case[ind]\n    cur_output = func(cur_input)\n    cur_expect = test_case[ind + 1] if ind + 1 < num_of_testcase else None\n    right = cur_output == cur_expect\n    print('{}{}'.format(cur_input.strip(), '\\033[32m' if right else '\\033[31m'), end='')\n    if not right:\n        print('  =>  {} expected, get {}'.format(cur_expect, cur_output))\n\n# test solution\nsubmit(solution, [\nr'''\n3\n1\n2\n3\n''',\nr'''", "solution(\"\"\"\n1\n1\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3\n1\n2\n\"\"\") == \"\"\"\n12\n2\n6\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n1\n2\n3\n4\n\"\"\") == \"\"\"\n2\n6\n20\n70\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1\n2\n3\n4\n5\n\"\"\") == \"\"\"\n2\n6\n20\n70\n252\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n7\n12\n34\n\"\"\") == \"\"\"\n1932053504\n1802977249548250\n72668545483620496\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n123\n456\n\"\"\") == \"\"\"\n383770324\n1714374701741117\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n100\n100\n100\n\"\"\") == \"\"\"\n938595047\n938595047\n938595047\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n199\n200\n201\n\"\"\") == \"\"\"\n1481136391\n14979", "solution(\"\"\"3\n1\n2\n3\"\"\") == \"\"\"1\n3\n13\"\"\"\n\n# todo: add some test cases", "solution('''\n1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n2\n1\n2\n''') == '''\n1\n8\n'''\n\nassert solution('''\n2\n3\n4\n''') == '''\n82\n3524\n'''\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n#", "solution(r'''3\n1\n2\n3\n''') == r'''1\n6\n28\n'''", "solution(sample_stdin) == sample_stdout", "solution('''\n1\n1\n''') == '''\n4\n'''\n\nassert solution('''\n1\n2\n''') == '''\n16\n'''\n\nassert solution('''\n1\n3\n''') == '''\n216\n'''\n\nassert solution('''\n1\n4\n''') == '''\n6912\n'''\n\nassert solution('''\n1\n5\n''') == '''\n248832\n'''\n\n# stress test\nfrom random import randint\nn = 10**3\nm = 10**5\nprint(n)\nfor i in range(n):\n    print(randint(1, m))", "solution('''\n6\n1\n2\n3\n4\n5\n6\n''') == '''\n1\n3\n15\n105\n945\n10395\n'''\n\n# make sure input is get from stdin\n\nassert not hasattr(solution, '__file__')\n\n'''\nURL of solution\nhttps://atcoder.jp/contests/agc014/submissions/17216396\n'''", "solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n1\\n2\") == \"5\"\nassert solution(\"3\\n1\\n3\\n4\") == \"9\"\n\n# check the performance of solution\nimport timeit\nfrom random import randint\n\nassert timeit.timeit(setup=\"from __main__ import solution\", stmt=\"solution('100000\\n'+'\\n'.join(map(str, [randint(1,100000) for i in range(100000)])))\", number=1) < 1", "solution('''\n2\n1\n2\n''') == '''\n1\n4\n'''\n\n# get input from stdin\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    print(solution('''\n{}\n{}\n'''.format(T, N)))", "solution(stdin_sample) == stdout_sample\n\n# get input for this challenge\nwith open(FilePaths.input_path(__file__), 'r') as input_file:\n    challenge_input = input_file.read()\n\n# get output for this challenge\nwith open(FilePaths.output_path(__file__), 'r') as output_file:\n    challenge_output = output_file.read()\n\n# check correctness of input and output\nassert solution(challenge_input) == challenge_output", "solution(stdin='''\n2\n1\n4\n''') == '''\n4\n64\n'''", "solution('''\n1\n3\n''') == '''\n8\n'''\n\n# test cases\n# e.g.\n# 1\n# 3\n# 2\n# 4\n# 5\n# 1\n# 2\n# 3\n# 5\n# 1\n# 2\n# 3\n# 4\n# 5\n# 2\n# 3\n# 1\n# 1\n# 2\n# 3\n# 1\n# 2\n# 3\n# 4\n# 5\n# 1\n# 5\n# 10\n# 15\n# 4\n# 3\n# 3\n# 4\n# 3\n# 3\n# 3\n# 2\n# 2\n# 2\n# 2\n# 2\n# 2\n# 2\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1\n# 1", "solution(\n'''4\n1\n2\n3\n4\n''') == '''2\n16\n320\n6144\n'''", "solution('''\n3\n1\n2\n3\n''') == '''\n1\n2\n6\n'''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''\n# ''') == '''\n# '''\n# assert solution('''", "solution('''\n1\n3\n''') == '''\n90\n'''\n\n# follow the instruction to submit solution to the judge\nsolution(stdin)", "solution('''\n1\n1\n''') == '1'\n\n'''\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solution(n))\n'''", "solution('''\n4\n2\n3\n4\n5\n''') == '''\n4\n36\n384\n4004\n'''", "solution('''\n2\n2\n5\n''') == '''\n5\n857672\n'''"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-45.0014291487, -52.30983328511002, -12.02098697825, -66.58967874400501, -103.84361034493807, -6.426764100000001, -12.719023779199997, -15.797341480600004, -169.197711982504, -75.38924212488872, -54.14037325905, -40.579576676144015, -92.81516162866909, -64.72888396673603, -100.78382873340868, -225.45180689155185, -6.677777389770001, -130.4603381037983, -89.029417320786, -97.13730233288001, -27.956751726415014, -86.57048453205002, -13.1929751616, -26.781600852825996, -18.50937273508, -40.3235376547, -36.395463616453995, -49.549020140149985, -30.245626014650007, -28.29856911157, -25.1857079275, -263.74421907787655, -277.7934389497289, -29.496256735499994, -47.41293854453101, -15.008657542260003, -8.9324530454, -58.70294818049499, -100.69658379711, -63.68755016924002, -28.695770228099992, -47.23118346061104, -20.388235779999995, -105.87197709459994, -28.144960054299997, -22.824949795212696, -37.49883288519999, -25.723834367709994, -26.9153199845, -26.617522882099998], "mean_logprob": [-0.4205741041934579, -0.5392766318052578, -0.37565584307031247, -0.9938758021493284, -0.5769089463607666, -3.2133820500000003, -0.5299593241333334, -0.394933537015, -0.8134505383774231, -0.251297473749629, -0.5884823180331522, -0.13526525558714667, -0.5949689847991603, -0.38993303594419276, -0.335946095778029, -0.75150602297184, -0.6070706717972727, -0.43486779367932765, -0.9471214608594255, -0.9430806051735923, -0.47384324960025426, -0.49753152029913794, -0.4711776843428572, -0.38813914279457973, -0.462734318377, -0.5843990964449275, -0.44384711727382925, -0.7622926175407693, -0.7376981954792683, -0.47963676460288135, -0.5857141378488372, -0.879147396926255, -0.92597812983243, -0.9514921527580645, -0.15804312848177, -0.5360234836521428, -0.6871117727230769, -0.3715376467119937, -0.996995879179307, -0.4899042320710769, -0.36323759782405063, -0.38399336146838214, -0.7551198437037037, -0.35290659031533334, -0.879530001696875, -0.07608316598404233, -0.9615085355179487, -0.4677060794129091, -0.8156157571060606, -1.0237508800807693]}
{"prompt": "'''\nVupsen and Pupsen were gifted an integer array. Since Vupsen doesn't like the number 0, he threw away all numbers equal to 0 from the array. As a result, he got an array a of length n.\n\nPupsen, on the contrary, likes the number 0 and he got upset when he saw the array without zeroes. To cheer Pupsen up, Vupsen decided to come up with another array b of length n such that \u2211_{i=1}^{n}a_i \u22c5 b_i=0. Since Vupsen doesn't like number 0, the array b must not contain numbers equal to 0. Also, the numbers in that array must not be huge, so the sum of their absolute values cannot exceed 10^9. Please help Vupsen to find any such array b!\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the length of the array.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (-10^4 \u2264 a_i \u2264 10^4, a_i \u2260 0) \u2014 the elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print n integers b_1, b_2, \u2026, b_n \u2014 elements of the array b (|b_1|+|b_2|+\u2026 +|b_n| \u2264 10^9, b_i \u2260 0, \u2211_{i=1}^{n}a_i \u22c5 b_i=0).\n\nIt can be shown that the answer always exists.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(get_input(3)) == get_output(3)", "solution('''\n''') == '''\n'''", "solution('''2\n4\n1 1 -1 1\n4\n-3 -3 5 7''') == '''1 -1 1 -1\n1 1 -1 -1'''", "solution('''\n1\n4\n1 2 -1 2\n''') == '''\n4 -1 -1 4\n'''\n\nassert solution('''\n1\n5\n1 -2 3 -4 5\n''') == '''\n3 -3 -3 3 -3\n'''\n\n# print the result to stdout\nif __name__ == '__main__':\n    stdin = ''\n    for line in sys.stdin:\n        stdin += line\n    result = solution(stdin)\n    print(result)", "solution(sample_input_0) == sample_output_0\nassert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\nassert solution(sample_input_4) == sample_output_4\nassert solution(sample_input_5) == sample_output_5\nassert solution(sample_input_6) == sample_output_6\nassert solution(sample_input_7) == sample_output_7\nassert solution(sample_input_8) == sample_output_8\nassert solution(sample_input_9) == sample_output_9", "solution('''\n1\n5\n1 -2 3 -4 5\n''') == '''\n-1 2 -3 4 -5\n'''\n\nassert solution('''\n1\n3\n1 2 3\n''') == '''\n-1 1 -1\n'''\n\nassert solution('''\n1\n3\n-1 -2 -3\n''') == '''\n1 -1 1\n'''\n\nassert solution('''\n1\n5\n-1 -2 -3 -4 -5\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n2\n2\n1 2\n3\n1 2 3\n''') == '''\n-1 1\n-1 1 1\n'''\n\nassert solution('''\n2\n2\n-1 -2\n3\n-1 -2 -3\n''') == '''\n1 -1\n1 -1 -1\n'''\n\nassert solution('''\n2\n2\n-1 2\n3\n-1 2 3\n''') == '''\n1 -2\n1 -2 -3\n'''\n\nassert solution('''\n2\n2\n1 -2\n3\n1 -2 3\n''') == '''\n-1 2\n-1 2 -3\n'''\n\nassert", "solution('''\n1\n2\n2 1\n''') == '''\n-1 2\n'''\nassert solution('''\n3\n3\n1 1 1\n3\n1 2 3\n4\n1 2 3 4\n''') == '''\n0 0 0\n3 -2 -1\n-3 2 1\n'''\nassert solution('''\n4\n4\n4 4 4 4\n4\n4 4 4 -4\n4\n4 4 -4 -4\n4\n4 -4 -4 -4\n''') == '''\n-1 -1 -1 -1\n-1 -1 -1 1\n-1 -1 1 1\n-1 1 1 1\n'''\nassert solution('''\n2\n3\n1 2 3\n3\n-3 -3 -3\n''') == '''\n-1 1 -1\n1 -1 1\n'''\nassert solution('''\n5\n5\n1 1 1 1 1\n5\n1 1 1 1 -1\n5\n1 1 1 -1 -1\n5\n1 1 -1 -1 -1\n5\n1 -1 -1 -1 -1\n''') == '''\n-1 -1 -1 -1 -1\n-1 -1 -1 -1 1\n-1 -1 -1 1 1\n-1 -1 1 1", "solution('''\n4\n4\n1 2 3 4\n3\n3 1 -1\n3\n1 2 3\n3\n1 -1 1\n''') == '''\n-2 3 4 -1\n-2 3 4\n-1 2 3\n1 -2 1\n'''", "solution(\"\"\"2\n2\n1 1\n2\n-1 2\"\"\") == \"\"\"1 -1\n-1 1\"\"\", \"sample data\"\n\n# get input\ndef read(filename: str) -> str:\n    \"\"\"\n    Read input data from file.\n    \"\"\"\n    with open(filename) as f:\n        return f.read()\n\n# get output\ndef write(filename: str, solution: str) -> None:\n    \"\"\"\n    Write solution data to file.\n    \"\"\"\n    with open(filename, \"w\") as f:\n        f.write(solution)\n\nif __name__ == \"__main__\":\n    # read input\n    input_data = read(\"input.txt\")\n\n    # solve problem\n    solution_data = solution(input_data)\n\n    # write output\n    write(\"output.txt\", solution_data)", "solution('''\n2\n5\n1 -2 2 -1 2\n5\n1 2 3 4 5\n''') == '''\n-1 1 -1 1 -1\n-5 5 -5 5 -5\n'''\n\n# check runtime of solution", "solution(\"\"\"2\n2\n2 1\n3\n1 2 3\"\"\") == \"\"\"1 -2\n-1 1 1\"\"\", \"Example\"\nassert solution(\"\"\"1\n2\n2 1\"\"\") == \"\"\"1 -2\"\"\", \"Simple\"\n\nif __name__ == \"__main__\":\n    import sys\n    print(solution(sys.stdin.read()))", "(solution('''\n1\n3\n1 -2 3\n''') == '''\n-2 1 -3\n''')\n\n# check the correctness of solution\nassert (solution('''\n2\n2\n2 1\n2\n1 2\n''') == '''\n1 -2\n-1 2\n''')\n\n# checkout the speed of the solution\nimport timeit\nfrom random import randint\n\nf = open(\"tests_results/test_2.txt\", \"w\")\n\nfor t in range(1, 11):\n    test = f'''{t}\n'''\n    for n in range(10**3, 10**4, 10**3):\n        test += f'''{n}\n'''\n        for _ in range(n):\n            test += f'''{randint(-10**4, 10**4)} '''\n        test += '\\n'\n    f.write(test)\n\nf.close()\n\n# timeit.timeit(lambda: solution(open(\"tests_results/test_2.txt\").read()), number=1)  # 0.05834s", "solution(input_text) == output_text\n \n# check the performance of solution\ntimeit.timeit(lambda: solution(input_text), number=100)", "solution('''\n2\n5\n-2 2 3 1 -2\n5\n1 1 1 1 1\n''') == '''\n-1 1 -1 1 -1\n1 -1 1 -1 1\n'''\n\n# get the input\nT = int(input())\nassert 1 <= T <= 100\nstdin = ''\nfor i in range(T):\n    N = int(input())\n    assert 2 <= N <= 100000\n    nums = [int(x) for x in input().split()]\n    assert len(nums) == N\n    for x in nums:\n        assert -10000 <= x <= 10000\n        assert x != 0\n    stdin += str(N) + '\\n' + ' '.join([str(x) for x in nums]) + '\\n'\n\n# submit the solution\nprint(solution(stdin))", "solution(test_data) == test_result", "solution(\"\"\"\n3\n3\n1 -1 1\n3\n1 -1 1\n3\n1 -1 1\n\"\"\") == \"\"\"\n1 -1 1\n-1 1 -1\n1 -1 1\n\"\"\"", "solution(stdin) == stdout", "solution('''\n1\n4\n1 2 3 4\n''') == '''\n-4 1 1 -4\n'''\nassert solution('''\n1\n3\n3 -3 1\n''') == '''\n-2 -2 1\n'''\nassert solution('''\n1\n5\n-2 -2 2 -2 2\n''') == '''\n1 -1 1 1 -1\n'''\nassert solution('''\n2\n3\n3 -3 1\n2\n2 3\n''') == '''\n-2 -2 1\n-1 1\n'''\nassert solution('''\n2\n3\n3 -3 1\n5\n1 2 3 4 5\n''') == '''\n-2 -2 1\n-4 1 1 -4 1\n'''\nassert solution('''\n2\n4\n1 2 3 4\n4\n1 2 3 4\n''') == '''\n-4 1 1 -4\n-4 1 1 -4\n'''\nassert solution('''\n2\n4\n1 2 3 4\n3\n1 2 3\n''') == '''\n-4 1 1 -4\n-3 1 2\n'''\nassert solution('''\n2\n4\n1 2 3 4\n2\n1 2\n''') == '''\n-4 1 1 -4", "solution(stdin='2\\n5\\n-2 4 3 3 -2\\n5\\n-1 -1 -1 -1 -1') == '3 -3 -3 -3 3\\n-1 1 1 1 -1', 'case 1 error'\nassert solution(stdin='2\\n3\\n-3 2 -3\\n3\\n1 -2 3') == '-1 2 -1\\n1 -2 3', 'case 2 error'\nassert solution(stdin='1\\n10\\n-1000000000 -987654321 -987654321 -987654321 -987654321 -987654321 -987654321 -987654321 -987654321 -1000000000') == '1000000000 987654321 987654321 987654321 987654321 987654321 987654321 987654321 987654321 1000000000', 'case 3 error'\nprint('All tests passed successfully')", "solution('''\n3\n6\n1 -1 1 -1 -1 1\n6\n-2 3 3 -3 3 -3\n6\n1 -1 1 1 -1 1\n''') == '''\n1 -1 1 -1 -1 1\n-1 1 -1 1 1 -1\n1 -1 1 -1 1 -1\n'''", "solution(example1) == result1\n\n# get the input from https://pastebin.com/raw/7KzmhE95\nfile = requests.get(\"https://pastebin.com/raw/7KzmhE95\")\n\n# test the execution time of solution()\nstart = time.time()\nresult = solution(file.text)\nprint(\"Execution time: %s seconds\" % (time.time() - start))\n\n# print the solution\nprint(result)", "solution('''\n2\n2\n1 -1\n2\n1 2\n''') == '''\n1 -1\n-1 1\n'''\n\n# ----\n\n# also check if solution works correctly with stdin\nimport sys\ninput = open('input.txt', 'r')\nprint(solution(input.read()))", "solution(input) == output", "solution(stdin=\"3\\n3\\n1 -1 2\\n3\\n1 2 2\\n3\\n-1 2 1\") == \"2 -1 1\\n-1 -1 2\\n-1 1 2\"", "solution('''\n3\n4\n1 2 3 4\n4\n1 2 3 5\n4\n1 2 3 -4\n''') == '''\n4 -3 2 -1\n1 -1 1 -1\n1 -1 1 -2\n'''", "solution('''\n1\n5\n1 2 3 -4 -5\n''') == '''\n-1 -1 1 1 1\n'''\n\n# check that solution works fast enough\nfrom random import randint\nfrom time import time\nfrom datetime import timedelta\n\nt = randint(1, 100)\nn = randint(2, 10**5)\nm = randint(-10**4, 10**4)\nwhile True:\n    a = [m]\n    while len(a) < n:\n        k = randint(-10**4, 10**4)\n        if k != 0:\n            a.append(k)\n    t1 = time()\n    solution(f'{t}\\n{n}\\n{a}')\n    t2 = time()\n    if t2 - t1 < 0.1:\n        break\n    if t2 - t1 > 1:\n        n = n // 2", "solution(\"\"\"1\n2\n2 1\"\"\") == \"\"\"1 -2\n-1 2\"\"\"\nassert solution(\"\"\"2\n2\n2 1\n2\n1 2\"\"\") == \"\"\"1 -2\n-1 2\n-1 2\n1 -2\"\"\"\nassert solution(\"\"\"3\n3\n3 1 2\n4\n-4 1 2 -1\n2\n2 3\"\"\") == \"\"\"1 -2 3\n-1 1 1\n-1 1 1\n-1 -1 1\n1 -1 -1\n1 -1 1\n-1 1 -1\"\"\"\n\n# run the solution\nprint(solution(input()))", "solution('''\n''') == '''\n'''", "solution('''1\n2\n1 -1''') == '''1 -1'''\nassert solution('''2\n3\n1 -1 0\n3\n1 2 -3''') == '''1 -1 0\n-1 1 -1'''\n\n# create a sample input file\nimport os\nwith open('input.txt', 'w') as f:\n    f.write('''100\n100\n11 -60 80 -90 -30 -60 -90 -70 -10 -50 70 -80 -20 -10 -20 -60 -70 -30 -20 -60 -10 -30 -90 -10 -70 -30 -20 -10 -60 -50 -20 -50 -90 -70 -10 -90 -50 -10 -70 -80 -50 -80 -70 -20 -30 -20 -10 -70 -30 -20 -90 -10 -50 -20 -60 -70 -10 -50 -50 -10 -60 -20 -90 -90 -30 -60 -70 -20 -90 -50 -10 -80 -10 -80 -20 -90 -20 -80 -20 -50 -60 -10 -90 -30 -60 -70 -20 -60 -90 -10 -70 -90 -20 -70 -50 -10 -30 -50 -10 -50 -70 -10 -60 -", "solution(\n'''\n1\n3\n1 2 3\n'''\n) == '''\n-3 -2 -1\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n2\n4\n1 2 3 4\n4\n4 3 2 1\n'''\n) == '''\n-4 -3 -2 -1\n-1 -2 -3 -4\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n1\n4\n1 -1 2 -2\n'''\n) == '''\n-2 -1 2 1\n'''", "solution('''\n2\n2\n2 3\n2\n3 -3\n''') == '''\n-3 2\n3 -3\n'''\n\nassert solution('''\n2\n3\n2 3 4\n2\n2 3\n''') == '''\n-6 4 2\n6 -4 2\n'''\n\n# check the performance of solution\nfrom utils import *\n\nassert measure_func(solution, '''\n2\n2\n2 3\n2\n3 -3\n''') == [0.0054, 0.0053]\n\nassert measure_func(solution, '''\n2\n3\n2 3 4\n2\n2 3\n''') == [0.0054, 0.0053]\n\nassert measure_func(solution, '''\n100\n100\n-9999 -9998 -9997 -9996 -9995 -9994 -9993 -9992 -9991 -9990 -9989 -9988 -9987 -9986 -9985 -9984 -9983 -9982 -9981 -9980 -9979 -9978 -9977 -9976 -9975 -9974 -9973 -9972 -9971 -9970 -9969 -9968 -9967 -9966 -9965 -9964 -9963 -9962 -9961", "(solution('''\n2\n2\n1 1\n3\n1 1 1\n''') == '''\n-1 1\n1 -1 1\n''')\nassert (solution('''\n1\n1\n1\n''') == '''\n-1\n''')\nassert (solution('''\n2\n3\n1 2 3\n2\n1 1\n''') == '''\n-1 1 1\n1 -1\n''')\nassert (solution('''\n1\n4\n1 2 3 4\n''') == '''\n-1 1 1 1\n''')\nassert (solution('''\n2\n3\n1 2 3\n2\n1 -1\n''') == '''\n-1 1 1\n1 -1\n''')\nassert (solution('''\n2\n3\n1 -2 3\n3\n1 -2 3\n''') == '''\n-1 1 1\n1 -1 1\n''')\nassert (solution('''\n2\n2\n1 2\n2\n1 -2\n''') == '''\n-1 1\n1 -1\n''')\nassert (solution('''\n1\n4\n-1 2 -3 4\n''') == '''\n1 -1 1 -1\n''')\nassert (solution('''\n1", "solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\n\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\n\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"", "solution('''\n3\n3\n-1 2 3\n2\n-4 4\n4\n1 2 3 4\n''') == '''\n3 -2 -1\n4 -4\n-4 3 2 1\n'''", "solution(r'''\n3\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\n''') == r'''\n-2 3 -1\n-2 3 -1\n-2 3 -1\n'''\nassert solution(r'''\n1\n4\n1 2 3 4\n''') == r'''\n-5 10 -10 5\n'''\nassert solution(r'''\n1\n5\n1 2 3 4 5\n''') == r'''\n-6 15 -20 15 -6\n'''\nassert solution(r'''\n1\n6\n1 2 3 4 5 6\n''') == r'''\n-7 21 -35 35 -21 7\n'''\nassert solution(r'''\n1\n7\n1 2 3 4 5 6 7\n''') == r'''\n-8 28 -56 70 -56 28 -8\n'''\nassert solution(r'''\n1\n8\n1 2 3 4 5 6 7 8\n''') == r'''\n-9 36 -84 126 -126 84 -36 9\n'''\nassert solution(r'''\n1\n9\n1 2 3 4 5 6 7 8 9\n''') == r'''\n-10 45 -120 210 -252 210 -120 45 -10\n'''\nassert solution(r'''\n1\n", "solution('''3\n3\n1 2 3\n3\n1 1 2\n4\n1 2 3 4''') == '''-1 -2 -3\n-1 1 -2\n-1 -2 1 2'''", "solution('''\n2\n4\n1 -1 1 -1\n4\n1 -1 1 1\n''') == '''\n1 -1 1 -1\n-1 1 -1 1\n'''\nassert solution('''\n1\n4\n1 1 1 1\n''') == '''\n-1 1 -1 1\n'''\nassert solution('''\n2\n3\n1 -1 1\n3\n1 -1 -1\n''') == '''\n1 -1 1\n-1 1 -1\n'''\nassert solution('''\n1\n5\n1 1 -1 -1 1\n''') == '''\n-1 1 -1 1 -1\n'''\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == '''\n-1 1 -1 1 -1\n'''\nassert solution('''\n3\n3\n1 1 1\n3\n1 -1 1\n5\n1 -1 1 -1 1\n''') == '''\n-1 1 -1\n1 -1 1\n-1 1 -1 1 -1\n'''\nassert solution('''\n1\n6\n-1 1 -1 1 -1 1\n''') == '''\n1 -1 1 -1 1 -1\n'''\nassert solution('''\n1\n6\n", "solution(None) == None\n\n# check the correctness of solution\nassert solution(None) == None\n\nprint('done')", "solution('''\n2\n2\n1 2\n3\n1 2 -3\n''') == '''\n-2 1\n3 -1 -1\n'''\n\n# get input\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    assert(len(A) == N)\n    assert(len(B) == N)", "solution('''\n2\n5\n5 -2 3 4 -1\n5\n5 2 3 4 1\n''') == '''\n-1 -2 -3 -4 -5\n1 2 3 4 5\n'''\n\nassert solution('''\n3\n3\n1 2 3\n3\n1 -2 3\n3\n1 2 -3\n''') == '''\n-1 2 -3\n1 -2 3\n1 -2 3\n'''", "solution('''2\n6\n1 -3 -3 1 -3 1\n6\n1 -2 3 1 -2 3''') == '''1 -1 1 -1 1 -1\n1 1 -1 -1 1 1'''", "solution(\"1\\n2\\n1 2\") == \"2 -1\", \"Example 1\"\nassert solution(\"1\\n3\\n1 2 -3\") == \"-1 1 1\", \"Example 2\"\nassert solution(\"1\\n3\\n1 2 3\") == \"3 -2 -1\", \"Example 3\"\nassert solution(\"1\\n3\\n1 2 4\") == \"2 -2 1\", \"Example 4\"\nassert solution(\"1\\n3\\n1 2 5\") == \"1 -1 1\", \"Example 5\"\nassert solution(\"1\\n3\\n1 2 6\") == \"1 -1 1\", \"Example 6\"\nassert solution(\"1\\n2\\n-1 2\") == \"2 -1\", \"Example 7\"\nassert solution(\"1\\n4\\n-1 2 -4 -4\") == \"4 -1 4 1\", \"Example 8\"\nassert solution(\"1\\n4\\n-2 3 -2 3\") == \"1 -1 1 -1\", \"Example 9\"\nassert solution(\"1\\n3\\n-2 3 3\") == \"1 -1 -1\", \"Example 10\"\nassert solution(\"1\\n3\\n-3 3 3\") == \"1 -1 -1\", \"Example 11\"\nassert solution(\"1\\n4\\n-2 3 -2", "solution('''\n1\n3\n1 -1 1\n''') == '''\n-1 1 -1\n'''\n\n# check if the solution handles extreme inputs\nassert solution('''\n3\n3\n1 -1 1\n1\n1\n1\n1\n1\n''') == '''\n-1 1 -1\n-1\n-1\n'''\n\n# check if the solution passes a large random test (it should not get runtime errors)\nimport random\ndef test(size: int) -> (list, list):\n    ''' generate a random test case of `size` lines with random integers '''\n    t = random.randint(1, 100)\n    n = random.choices(range(2, 10**5), k=t)\n    xs = [random.choices(range(-10**4, 10**4), k=ni) for ni in n]\n    ys = [[random.randint(-10**9, 10**9) for _ in range(ni)] for ni in n]\n    a = '\\n'.join([str(t)] + [str(ni) for ni in n] + [\n        ' '.join(map(str, x)) for x in xs\n    ])\n    b = '\\n'.join(['\\n'.join(map(", "solution('''\n2\n3\n1 2 -3\n5\n1 2 3 4 5\n''') == '''\n-2 3 1\n-5 5 5 5 5\n'''\n\nassert solution('''\n3\n3\n1 2 -3\n3\n1 2 3\n3\n-1 -2 -3\n''') == '''\n-2 3 1\n-3 -3 3\n3 2 -1\n'''", "solution('''1\n2\n1 1''') == '-1 1'\nassert solution('''1\n3\n1 1 1''') == '-1 -1 2'\nassert solution('''1\n4\n1 1 1 1''') == '-1 -1 2 2'\nassert solution('''1\n5\n1 1 1 1 1''') == '-1 -1 2 2 2'\nassert solution('''2\n2\n-1 1\n3\n1 1 1''') == '1 -1\\n-1 -1 2'\nassert solution('''2\n4\n1 2 3 -4\n5\n-1 1 1 1 1''') == '-2 -1 3 4\\n-1 -1 2 2 2'\nassert solution('''2\n5\n-1 1 1 1 1\n6\n1 1 1 1 1 1''') == '-1 -1 2 2 2 2\\n-1 -1 2 2 2 2'\nassert solution('''2\n2\n-1 -1\n1\n1''') == '-1 -1\\n-1'\nassert solution('''2\n3\n-1 -1 -1\n4\n1 1 1 1''') == '-1 -1 -1\\n-1 -1 -1 2'\nassert solution('''2", "solution(\"\"\"1\n1\n1\"\"\") == \"\"\"1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n", "solution('''1\n3\n2 4 4''') == '''2 -2 -2'''\nassert solution('''1\n5\n1 -1 1 -1 1''') == '''1 -1 1 -1 1'''\nassert solution('''1\n2\n2 3''') == '''-1 1'''\nassert solution('''1\n4\n2 3 4 5''') == '''-3 2 -4 1'''\nassert solution('''1\n4\n1 2 -3 4''') == '''3 -4 2 -1'''\nassert solution('''1\n4\n1 2 -1 -2''') == '''-2 1 2 -1'''\nassert solution('''1\n4\n1 -1 1 -1''') == '''-1 1 -1 1'''\nassert solution('''1\n5\n1 1 1 1 1''') == '''-1 -1 -1 -1 -1'''\nassert solution('''1\n5\n2 3 4 5 6''') == '''-1 2 -3 4 -5'''\nassert solution('''1\n2\n2 2''') == '''-1 1'''\nassert solution('''1\n2\n2 1''') == '''-1 1'''\nassert solution(''", "solution('''\n5\n5\n1 2 3 4 5\n5\n1 2 3 4 -5\n4\n1 2 3 -4\n6\n1 2 3 -4 5 -6\n8\n1 2 3 -4 5 -6 7 -8\n''') == '''\n5 -4 -3 -2 -1\n-5 4 3 2 1\n-4 3 2 -1\n-5 4 3 -2 -1 6\n-7 6 5 4 -3 -2 -1 8\n'''", "solution('''\n4\n4\n-4 -4 4 4\n4\n4 -4 4 -4\n2\n-4 4\n3\n4 -4 1\n''') == '''\n-1 -1 1 1\n1 1 -1 -1\n-1 1\n-1 1 -1\n'''", "solution('''\n2\n4\n1 2 3 4\n2\n1 3\n''') == '''\n-1 1 -1 1\n-1 -1\n'''\n\n# get input for tests\nstdin = ''\nwith open('input.txt', 'r') as file:\n    stdin = file.read()\n\n# get output of the solution function\nstdout = solution(stdin)\n\n# save solution to file\nwith open('output.txt', 'w') as file:\n    file.write(stdout)"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop"], "sum_logprob": [-12.199904636049999, -6.184336892999999, -34.317871428800004, -64.90572229603399, -16.2696988899262, -51.11356832796794, -92.16389004766702, -46.48862113587, -64.85782548777502, -41.5057035209, -39.90056286542997, -151.399970027475, -21.1389434404, -63.88284100415003, -10.2553849391, -19.774593042250007, -5.5369252605, -98.08326766272741, -106.90817386372896, -47.131115699240006, -104.36703869423998, -64.43723916554, -6.88268087, -38.91026393601999, -34.52691975493998, -95.18464009581004, -87.50496418920997, -6.186390407, -299.93686673069993, -43.38619700128401, -93.58745344684394, -71.990816093817, -18.785177272210003, -28.824696726000006, -45.23387680419997, -25.780312257100004, -72.75546142678502, -19.702395033600002, -44.40389428082998, -46.32283421243999, -39.478837011799996, -118.78720628863307, -160.38496752554497, -45.10493153609, -97.22023137225004, -23.82056321561998, -116.24752131589007, -40.540586717589996, -41.79445771890002, -57.49908934062], "mean_logprob": [-0.762494039753125, -0.44173834949999996, -0.798090033227907, -0.519245778368272, -0.10232515025110818, -0.17037856109322666, -0.30721296682555665, -0.7152095559364615, -0.32591872104409547, -0.7034865003542373, -0.4586271593727586, -0.5800765135152299, -0.5420241907794872, -0.31782507962263684, -0.9323077217363637, -0.395491860845, -0.6152139178333333, -0.32694422554242436, -0.4648181472336044, -0.5818656259165432, -0.923602112338407, -0.8368472618901298, -0.9832401242857143, -0.7205604432596296, -0.5852020297447458, -0.4427192562595814, -0.6206025829021986, -0.44188502907142857, -0.999789555769, -0.3190161544212059, -0.3119581781561467, -0.23996938697939, -0.32956451354754385, -0.5543210908846153, -0.15077958934733332, -0.5054963187666667, -0.24251820475595, -0.6793929321931035, -0.37630418882059324, -0.4411698496422857, -0.7310895742925926, -0.3959573542954433, -0.5346165584184833, -0.45560536905141413, -0.3240674379075, -0.0794018773854, -0.38749173771963336, -0.3587662541379646, -0.5886543340690141, -0.4674722710619512]}
{"prompt": "'''\nXYMXYM and CQXYM will prepare n problems for Codeforces. The difficulty of the problem i will be an integer a_i, where a_i \u2265 0. The difficulty of the problems must satisfy a_i+a_{i+1}<m (1 \u2264 i < n), and a_1+a_n<m, where m is a fixed integer. XYMXYM wants to know how many plans of the difficulty of the problems there are modulo 998 244 353.\n\nTwo plans of difficulty a and b are different only if there is an integer i (1 \u2264 i \u2264 n) satisfying a_i \u2260 b_i.\n\nInput\n\nA single line contains two integers n and m (2 \u2264 n \u2264 50 000, 1 \u2264 m \u2264 10^9).\n\nOutput\n\nPrint a single integer \u2014 the number of different plans.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\") == \"\", \"Empty test case is not implemented\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty test case is not implemented\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Empty test case is not implemented\"", "solution(\"input\") == \"expected output\"\nassert solution(\"input\") == \"expected output\"\nassert solution(\"input\") == \"expected output\"\nassert solution(\"input\") == \"expected output\"\nassert solution(\"input\") == \"expected output\"\n\n# mock module for hack.ctf.b01lers.com\nimport sys\nclass Mock:\n    def __init__(self, *args, **kwargs):\n        pass\n    def write(self, data: str):\n        return sys.stdout.write(data)\n    def flush(self):\n        return sys.stdout.flush()\nsys.stdin = Mock()\nsys.stdout = Mock()\n# end of mock module\n\nprint(solution(sys.stdin.read()))", "solution(\"4 6\") == \"4\"\nassert solution(\"4 3\") == \"12\"\nassert solution(\"4 1\") == \"60\"\nassert solution(\"4 4\") == \"24\"\nassert solution(\"4 5\") == \"24\"\nassert solution(\"4 7\") == \"4\"\nassert solution(\"4 2\") == \"180\"\nassert solution(\"4 8\") == \"4\"\nassert solution(\"4 9\") == \"4\"\nassert solution(\"4 10\") == \"4\"\nassert solution(\"5 6\") == \"0\"\nassert solution(\"5 1\") == \"30\"\nassert solution(\"5 4\") == \"6\"\nassert solution(\"5 3\") == \"36\"\nassert solution(\"5 2\") == \"90\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"5 7\") == \"0\"\nassert solution(\"5 8\") == \"0\"\nassert solution(\"5 9\") == \"0\"\nassert solution(\"5 10\") == \"0\"\nassert solution(\"6 6\") == \"0\"\nassert solution(\"6 1\") == \"12\"\nassert solution(\"6 4\") == \"0\"\nassert solution(\"6 3\") == \"18\"\nassert solution(\"6 2\") == \"36\"\nassert solution(\"6 5\") == \"0\"\nassert solution(\"6 7\") == \"0\"\nassert solution(\"6", "solution(\"3 2\") == \"1\"\nassert solution(\"4 9\") == \"4\"\nassert solution(\"4 8\") == \"6\"\nassert solution(\"1 10\") == \"1\"\nassert solution(\"1 9\") == \"0\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"4 6\") == \"0\"\nassert solution(\"4 7\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"2 5\") == \"0\"\nassert solution(\"2 6\") == \"0\"\nassert solution(\"2 7\") == \"0\"\nassert solution(\"2 8\") == \"0\"\nassert solution(\"2 9\") == \"0\"\nassert solution(\"2 10\") == \"0\"\nassert solution(\"2 11\") == \"0\"\nassert solution(\"2 12\") == \"0\"\nassert solution(\"2 13\") == \"0\"\nassert solution(\"2 14\") == \"0\"\nassert solution(\"2 15\") == \"0\"\nassert solution(\"2 16\") == \"0\"\nassert solution(\"2 17\") == \"0\"\nassert solution(\"2 18\") == \"0\"\nassert solution(\"2", "solution('''3 5''') == '3'\nassert solution('''3 4''') == '1'\nassert solution('''3 1''') == '0'\nassert solution('''5 10''') == '5'\nassert solution('''5 11''') == '5'\nassert solution('''5 9''') == '5'\nassert solution('''5 8''') == '5'\nassert solution('''5 7''') == '5'\nassert solution('''5 6''') == '5'\nassert solution('''5 5''') == '5'\nassert solution('''5 4''') == '5'\nassert solution('''5 3''') == '5'\nassert solution('''5 2''') == '5'\nassert solution('''5 1''') == '5'\nassert solution('''5 0''') == '5'\nassert solution('''5 -1''') == '5'\nassert solution('''5 -2''') == '5'\nassert solution('''5 -3''') == '5'\nassert solution('''5 -4''') == '5'\nassert solution('''5 -5''') == '5'\nassert solution('''5 -6''') == '5'\nassert", "solution(\"\") == \"\", \"check the correctness of your solution\"\n\n# get input\nn, m = input().split(\" \")\n\n# get output\nprint(solution(\"\"))", "solution(test_input) == test_output\n\ninput_file = open(\"input.txt\", \"r\")\nresult = solution(input_file.read())\nprint(result)\ninput_file.close()", "solution(\"2 2\") == \"2\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"5 1\") == \"12\"\nassert solution(\"4 8\") == \"24\"\nassert solution(\"5 5\") == \"120\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"5 9\") == \"6\"\nassert solution(\"5 10\") == \"0\"\nassert solution(\"5 11\") == \"0\"\nassert solution(\"30 999999999\") == \"958508020\"\nassert solution(\"50000 10000\") == \"869776888\"\nassert solution(\"50000 50000\") == \"0\"\nassert solution(\"45000 999999999\") == \"826064653\"\nassert solution(\"50000 999999999\") == \"869776888\"\nassert solution(\"49000 999999999\") == \"826064653\"\nassert solution(\"50000 490000\") == \"869776888\"\nassert solution(\"49900 999999999\") == \"826064653\"\nassert solution(\"50000 490000\") == \"869776888\"\nassert solution(\"50005 999999999\") == \"0\"\nassert solution(\"100005 999999999\") == \"0\"\nassert solution(\"49995 999999999\") == \"826064", "solution('''5 10''') == '''30'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3'''\nassert solution('''3 5''') == '''3", "solution('''\n2 2\n''') == '''\n3\n'''\nassert solution('''\n2 3\n''') == '''\n3\n'''\nassert solution('''\n3 2\n''') == '''\n7\n'''\nassert solution('''\n8 5\n''') == '''\n18\n'''\nassert solution('''\n50000 1\n''') == '''\n999990000\n'''\n\n# print the solution\nwith open('file.in', 'r') as filein:\n    with open('file.out', 'w') as fileout:\n        fileout.write(solution(filein.read()))", "solution(\"2 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"4 5\") == \"4\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"13 9\") == \"314159\"\nassert solution(\"12 8\") == \"6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151\")\n\n# is_sub_mul_3(5) => 3\n# is_sub_mul_3(10) => 9\n# is_sub_mul_3(11) => 0\n# is_sub_mul_3(2) => 0\ndef is_sub_mul_3(val: int) -> int:\n    res = ((val + 3) // 3) % 3\n    return res\n\nassert is_sub_mul_3(5) == 3\nassert is_sub_mul_3(10) == 9\nassert is_sub_mul_3(11) == 0\nassert is_sub_mul_3(2) == 0\n\n# f(2,", "solution(\"8 2\") == \"-1\", \"sample #1\"\nassert solution(\"8 3\") == \"4\", \"sample #2\"\nassert solution(\"8 4\") == \"4\", \"sample #3\"\nassert solution(\"8 5\") == \"4\", \"sample #4\"\nassert solution(\"8 6\") == \"4\", \"sample #5\"\nassert solution(\"8 7\") == \"4\", \"sample #6\"\nassert solution(\"8 8\") == \"4\", \"sample #7\"\nassert solution(\"8 9\") == \"4\", \"sample #8\"\nassert solution(\"8 10\") == \"4\", \"sample #9\"\nassert solution(\"8 11\") == \"12\", \"sample #10\"\nassert solution(\"8 12\") == \"12\", \"sample #11\"\nassert solution(\"8 13\") == \"12\", \"sample #12\"\nassert solution(\"8 14\") == \"12\", \"sample #13\"\nassert solution(\"8 15\") == \"12\", \"sample #14\"\nassert solution(\"8 16\") == \"12\", \"sample #15\"\nassert solution(\"8 17\") == \"12\", \"sample #16\"\nassert solution(\"8 18\") == \"12\", \"sample #17\"\nassert solution(\"8 19\") == \"12\", \"sample #18\"\nassert solution(\"8 20\") == \"12\", \"sample #", "solution(\"\"\"\n1 2\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n2 3\n\"\"\") == \"\"\"\n4\n\"\"\"\nassert solution(\"\"\"\n4 10\n\"\"\") == \"\"\"\n8\n\"\"\"\nassert solution(\"\"\"\n4 9\n\"\"\") == \"\"\"\n4\n\"\"\"\nassert solution(\"\"\"\n5 9\n\"\"\") == \"\"\"\n5\n\"\"\"\nassert solution(\"\"\"\n1000000 1000000000\n\"\"\") == \"\"\"\n999999000001\n\"\"\"\nassert solution(\"\"\"\n10 10\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n10 9\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n1 9\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2 9\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n3 9\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n4 9\n\"\"\") == \"\"\"\n4\n\"\"\"\nassert solution(\"\"\"\n5 9\n\"\"\") == \"\"\"\n5\n\"\"\"\nassert solution(\"\"\"\n6 9\n\"\"\") == \"\"\"\n6\n\"\"\"\nassert solution(\"\"\"\n1 10\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2 10\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n3 10\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n4 10", "solution('''\n3 3\n''') == '''\n12\n'''\n\n# get the input content\ninput_content = open('input.txt', 'r').read().strip()\n\n# write the output to output.txt\nopen('output.txt', 'w').write(solution(input_content))", "solution('''\n2 100\n''') == '''\n2\n'''\n\nassert solution('''\n5 5\n''') == '''\n10\n'''\n\nassert solution('''\n10 7\n''') == '''\n53\n'''\n\nassert solution('''\n10 8\n''') == '''\n22\n'''\n\nassert solution('''\n50 5\n''') == '''\n144438288\n'''\n\nassert solution('''\n500000000 500000000\n''') == '''\n6118827\n'''\n\n# input() reads a string with a line of input, stripping the ' ' (newline) at the end.\n# This is all you need for most Code Jam problems.\nt = int(input())  # read a line with a single integer\nfor i in range(1, t + 1):\n    n, m = [int(s) for s in input().split(\" \")]  # read a list of integers, 2 in this case\n    print(\"Case #{}: {}\".format(i, solution(str(n) + ' ' + str(m))))\n    # check out .format's specification for more formatting options", "solution(\"2 2\") == \"1\"\nassert solution(\"3 5\") == \"18\"\nassert solution(\"10 10\") == \"9800\"\nassert solution(\"13 10\") == \"8778\"\nassert solution(\"100000 1\") == \"1\"\nassert solution(\"100000 1000000000\") == \"0\"\n\n# check performance\nimport timeit\nimport random\ntest = [str(random.randint(1, 50000)) + \" \" + str(random.randint(1, 10**9)) for _ in range(100)]\ntimes = []\nfor i in range(len(test)):\n    t = timeit.Timer(\"solution(\" + test[i] + \")\", setup=\"from __main__ import solution\")\n    times.append(t.timeit(number=10))\nprint(times)", "solution('''\n2 3\n''') == '''\n2\n'''\n\nif __name__ == '__main__':\n    print(solution(stdin.read()))", "(solution(stdin) == stdout)\n\n# get the stdin of problem\nwith open('1.in', 'r') as f:\n    stdin = f.read()\n\n# put solution to stdout\nprint(solution(stdin))", "solution('''2 2''') == '1'\nassert solution('''3 2''') == '4'\nassert solution('''4 2''') == '8'\nassert solution('''5 2''') == '15'\nassert solution('''6 2''') == '27'\nassert solution('''7 2''') == '48'\nassert solution('''8 2''') == '84'\nassert solution('''9 2''') == '147'\nassert solution('''10 2''') == '256'\nassert solution('''11 2''') == '450'\nassert solution('''12 2''') == '792'\nassert solution('''13 2''') == '1365'\nassert solution('''14 2''') == '2348'\nassert solution('''15 2''') == '4042'\nassert solution('''16 2''') == '6975'\nassert solution('''17 2''') == '11982'\nassert solution('''18 2''') == '20474'\nassert solution('''19 2''') == '35194'\nassert solution('''20 2''') == '60295'\nassert solution('''21 2''') == '102635'\nassert solution('''22 2''') == '", "solution('''\n2 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 999999999\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3 10\n''') == '''\n24\n'''\n\n# check the correctness of solution\nassert solution('''\n50 5000\n''') == '''\n40147957\n'''\n\n# check the correctness of solution\nassert solution('''\n10 250000001\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n30 33\n''') == '''\n938116575\n'''\n\n# check the correctness of solution\nassert solution('''\n40 250000001\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n20 50\n''') == '''\n16441228\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n", "solution('''\n2 3\n''') == '''\n2\n'''\nassert solution('''\n3 3\n''') == '''\n0\n'''\nassert solution('''\n3 5\n''') == '''\n1\n'''\nassert solution('''\n3 7\n''') == '''\n3\n'''\nassert solution('''\n2 5\n''') == '''\n1\n'''\nassert solution('''\n5 15\n''') == '''\n233\n'''\nassert solution('''\n5 13\n''') == '''\n51\n'''\nassert solution('''\n5 11\n''') == '''\n20\n'''\nassert solution('''\n5 9\n''') == '''\n8\n'''\nassert solution('''\n5 7\n''') == '''\n4\n'''\nassert solution('''\n5 5\n''') == '''\n1\n'''\nassert solution('''\n5 3\n''') == '''\n1\n'''\nassert solution('''\n5 1\n''') == '''\n1\n'''\nassert solution('''\n3 9\n''') == '''\n4\n'''\nassert solution('''\n4 9\n''') == '''\n4\n'''\nassert", "solution(\n'''\n1 2\n'''\n) == '''\n1\n'''\n\nassert solution(\n'''\n2 3\n'''\n) == '''\n3\n'''\n\nassert solution(\n'''\n5 10\n'''\n) == '''\n5\n'''\n\nassert solution(\n'''\n5 12\n'''\n) == '''\n5\n'''\n\nassert solution(\n'''\n5 15\n'''\n) == '''\n10\n'''\n\nassert solution(\n'''\n15 10\n'''\n) == '''\n2088\n'''\n\nassert solution(\n'''\n15 12\n'''\n) == '''\n2272\n'''\n\nassert solution(\n'''\n15 13\n'''\n) == '''\n2456\n'''\n\nassert solution(\n'''\n15 14\n'''\n) == '''\n2640\n'''\n\nassert solution(\n'''\n15 15\n'''\n) == '''\n2792\n'''\n\nassert solution(\n'''\n15 17\n'''\n) == '''\n2976\n'''\n\nassert solution(\n'''\n15 18\n'''\n) == '''\n3160\n'''\n\nassert solution(\n'''", "solution('''\n2 1\n''') == '''\n1\n'''\n\n# todo: some faster solution.\n# https://codeforces.com/blog/entry/64916\n# https://codeforces.com/blog/entry/65767\n# https://codeforces.com/blog/entry/68669\n# http://codeforces.com/blog/entry/66950", "solution('''\n2 3\n''') == '''\n4\n'''\n\nassert solution('''\n3 2\n''') == '''\n0\n'''\n\nassert solution('''\n5 5\n''') == '''\n163\n'''\n\n# this problem has a lot of test cases\nimport random\n\nfor i in range(100):\n    n = random.randint(2, 50000)\n    m = random.randint(1, 1000000000)\n    stdin = '{} {}\\n'.format(n, m)\n    print(solution(stdin))", "solution('''\n2 7\n''') == '''\n6\n'''\nassert solution('''\n2 10\n''') == '''\n5\n'''\nassert solution('''\n2 20\n''') == '''\n3\n'''\nassert solution('''\n3 10\n''') == '''\n10\n'''\nassert solution('''\n4 10\n''') == '''\n15\n'''\nassert solution('''\n50 3\n''') == '''\n7310\n'''\nassert solution('''\n50000 1000000000\n''') == '''\n6638451040\n'''\nassert solution('''\n50000 999999999\n''') == '''\n6638451043\n'''\nassert solution('''\n50000 999999998\n''') == '''\n6638451046\n'''\nassert solution('''\n50000 999999997\n''') == '''\n6638451049\n'''\nassert solution('''\n50000 999999996\n''') == '''\n6638451052\n'''\nassert solution('''\n50000 999999995\n''') == '''\n6638451055\n'''\nassert solution('''\n50000 999999994\n''')", "solution('''\n2 1\n''') == '''\n2\n'''\n\nassert solution('''\n3 4\n''') == '''\n3\n'''\n\nassert solution('''\n4 5\n''') == '''\n4\n'''\n\n# check the performance of solution\nimport timeit\nimport random\n\ndef test_solution(n: int, m: int):\n    assert solution(f'{n} {m}\\n') == f'{n}\\n'\n\nn = 5000\nm = random.randint(1, 1000)\nprint(f'{timeit.timeit(lambda: test_solution(n, m), number=1)}')", "solution(\"\") == \"\", \"checkio({}) == ''\".format(solution(\"\"))\nassert solution(\"\") == \"\", \"checkio({}) == ''\".format(solution(\"\"))\nassert solution(\"\") == \"\", \"checkio({}) == ''\".format(solution(\"\"))\nassert solution(\"\") == \"\", \"checkio({}) == ''\".format(solution(\"\"))\nassert solution(\"\") == \"\", \"checkio({}) == ''\".format(solution(\"\"))\nassert solution(\"\") == \"\", \"checkio({}) == ''\".format(solution(\"\"))\n\n# run the solution\nprint(solution(input()))", "solution('''\n2 3\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3 4\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3 4\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10\n''') == '''\n120\n'''\n\n# check the correctness of solution\nassert solution('''\n10 9\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n11 11\n''') == '''\n120\n'''\n\n# check the correctness of solution\nassert solution('''\n10 9\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n''') == '''\n2\n'''\n\n", "solution('''2 3''') == '2'\nassert solution('''2 2''') == '1'\nassert solution('''1 10''') == '1'\nassert solution('''10 1000000000''') == '365918099'\nassert solution('''3 3''') == '3'\nassert solution('''3 2''') == '4'\nassert solution('''4 5''') == '4'\nassert solution('''4 2''') == '10'\nassert solution('''5 3''') == '11'\nassert solution('''5 4''') == '9'\nassert solution('''5 5''') == '5'\nassert solution('''5 6''') == '3'\nassert solution('''5 7''') == '3'\nassert solution('''5 8''') == '3'\nassert solution('''5 9''') == '3'\nassert solution('''5 10''') == '3'\nassert solution('''5 11''') == '3'\nassert solution('''5 12''') == '3'\nassert solution('''5 13''') == '3'\nassert solution('''5 14''') == '3'\nassert solution('''5 15''') == '3'\nassert solution(", "(solution('1 2') == '')", "solution('''2 3\n''') == '''16\n'''\nassert solution('''3 5\n''') == '''100\n'''\nassert solution('''2 9\n''') == '''1\n'''\n\n# read input\n'''\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n    solution(stdin)\n'''\n'''\nThis problem can be solved with the help of dynamic programming. \nIt is clear that we can represent any plan of difficulty as a sequence of digits a1a2...an, where ai is the difficulty of the problem i. If ai=0, then we ignore it.\n\nLet's count the number of different representations of each length. Let's denote it by dp[i] for each i. \nIf i=0, then there is only one such representation (empty sequence).\nIf i=1, then we can represent such difficulty as a single digit between 1 and m\u22121. There are m\u22121 such sequences.\nLet's consider i\u22652. \nLet's fix the last digit al=a_{i} as k, where 1\u2264k\u2264m\u22121. \nThe previous digit can be any number smaller than m\u2212k. \nThat means that the remaining digits must form a representation of a smaller", "solution('''2 3''') == '0'\nassert solution('''3 4''') == '0'\nassert solution('''3 5''') == '1'\nassert solution('''10 3''') == '0'\nassert solution('''10 4''') == '7'\nassert solution('''1000000001 1''') == '1'\nassert solution('''100000 1000000000''') == '431213750'\n\n'''\n\n'''", "solution('''\n1 2\n''') == '''\n1\n'''\nassert solution('''\n2 2\n''') == '''\n1\n'''\nassert solution('''\n2 3\n''') == '''\n2\n'''\nassert solution('''\n2 4\n''') == '''\n4\n'''\nassert solution('''\n4 5\n''') == '''\n5\n'''\nassert solution('''\n3 8\n''') == '''\n10\n'''\nassert solution('''\n5 8\n''') == '''\n39\n'''\nassert solution('''\n5 9\n''') == '''\n64\n'''\nassert solution('''\n5 10\n''') == '''\n123\n'''\nassert solution('''\n5 11\n''') == '''\n246\n'''\nassert solution('''\n5 12\n''') == '''\n489\n'''\nassert solution('''\n5 13\n''') == '''\n978\n'''\nassert solution('''\n5 14\n''') == '''\n1964\n'''\nassert solution('''\n5 15\n''') == '''\n4066\n'''\nassert solution('''\n5 16\n''') == '''\n8151\n'''", "solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert solution(\"\") == \"\", \"not passed\"\nassert", "solution('''2 100''') == '''4'''\nassert solution('''2 1''') == '''1'''\nassert solution('''1 1''') == '''1'''\nassert solution('''3 4''') == '''4'''\nassert solution('''4 5''') == '''8'''\nassert solution('''2 3''') == '''2'''\nassert solution('''3 2''') == '''1'''\nassert solution('''1 2''') == '''1'''\nassert solution('''2 2''') == '''1'''\nassert solution('''1 1000000000''') == '''1'''\nassert solution('''2 1000000000''') == '''2'''\nassert solution('''3 1000000000''') == '''3'''\nassert solution('''4 1000000000''') == '''4'''\nassert solution('''5 1000000000''') == '''5'''\nassert solution('''6 1000000000''') == '''6'''\nassert solution('''7 1000000000''') == '''7'''\nassert solution('''8 1000000000''') == '''8'''\nassert solution('''9 1000000000''') == '''9'''\nassert solution(''", "solution('''2 3''') == '2'\nassert solution('''3 1''') == '0'\nassert solution('''4 6''') == '24'\nassert solution('''10 9''') == '123402470'", "solution('''4 9''') == '''1'''\nassert solution('''5 9''') == '''0'''\nassert solution('''5 3''') == '''2'''\nassert solution('''5 3''') == '''2'''\nassert solution('''5 4''') == '''0'''\nassert solution('''5 5''') == '''1'''\nassert solution('''5 6''') == '''3'''\nassert solution('''5 7''') == '''6'''\nassert solution('''5 8''') == '''6'''\nassert solution('''5 9''') == '''1'''\nassert solution('''5 4''') == '''0'''\nassert solution('''5 8''') == '''6'''\nassert solution('''5 1''') == '''1'''\nassert solution('''5 2''') == '''0'''\nassert solution('''5 3''') == '''2'''\nassert solution('''6 10''') == '''0'''\nassert solution('''6 9''') == '''0'''\nassert solution('''6 8''') == '''3'''\nassert solution('''6 7''') == '''6", "solution(\"\"\"2 1\"\"\") == \"1\"\nassert solution(\"\"\"3 4\"\"\") == \"4\"\nassert solution(\"\"\"4 2\"\"\") == \"3\"\nassert solution(\"\"\"5 6\"\"\") == \"6\"\nassert solution(\"\"\"6 4\"\"\") == \"9\"\nassert solution(\"\"\"7 6\"\"\") == \"21\"\nassert solution(\"\"\"8 5\"\"\") == \"30\"\nassert solution(\"\"\"9 4\"\"\") == \"46\"\nassert solution(\"\"\"10 3\"\"\") == \"69\"\nassert solution(\"\"\"50 5\"\"\") == \"16276715\"\nassert solution(\"\"\"50 4\"\"\") == \"98710368\"\nassert solution(\"\"\"50 3\"\"\") == \"657833026\"\nassert solution(\"\"\"50 2\"\"\") == \"4575847246\"\nassert solution(\"\"\"100 10\"\"\") == \"444470671848\"\nassert solution(\"\"\"100 5\"\"\") == \"5926657025017\"\nassert solution(\"\"\"100 3\"\"\") == \"245880880744567\"\nassert solution(\"\"\"100 2\"\"\") == \"2338002316090431\"\nassert solution(\"\"\"1000 1\"\"\") == \"85155979936160975\"\nassert solution(\"\"\"1000 2\"\"\") == \"838828511284265365\"\nassert solution(\"\"\"1000 3", "(solution(''' 2 3\n''') == \"2\")\nassert (solution(''' 3 3\n''') == \"3\")\nassert (solution(''' 10 5\n''') == \"63453968\")\nassert (solution(''' 5 8\n''') == \"4\")\n\n# get input for running the solution\ndef get_input():\n    return sys.stdin.readline().strip()\n\n# print solution output\ndef print_solution(output: str):\n    print(output)\n\n# run solution\ndef run():\n    print_solution(solution(get_input()))\n\n# run tests\ndef test():\n    pass\n\n# local test\ndef local_test():\n    pass\n\n# local test run\ndef local_run():\n    print_solution(solution(get_input()))\n\nif __name__ == '__main__':\n    test()\n    run()", "solution(\"\"\"\n3 9\n\"\"\") == \"\"\"\n6\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# I do not know how to solve this problem", "solution('''\n2 10\n''') == '''\n1\n'''\nassert solution('''\n2 4\n''') == '''\n2\n'''\nassert solution('''\n1 9\n''') == '''\n1\n'''\nassert solution('''\n1 10\n''') == '''\n0\n'''\n\n# import local test\nfrom solution_check import check_samples\n\n# run local tests\ncheck_samples(solution)", "solution('''\n2 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2 5\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3 5\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 6\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3 8\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n4 5\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4 6\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 8\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4 9\n''') == '''\n2\n'''\n\n", "solution(TEST_CASES[0]) == TEST_RESULTS[0]\nassert solution(TEST_CASES[1]) == TEST_RESULTS[1]\nassert solution(TEST_CASES[2]) == TEST_RESULTS[2]\nassert solution(TEST_CASES[3]) == TEST_RESULTS[3]\nassert solution(TEST_CASES[4]) == TEST_RESULTS[4]\nassert solution(TEST_CASES[5]) == TEST_RESULTS[5]\nassert solution(TEST_CASES[6]) == TEST_RESULTS[6]\nassert solution(TEST_CASES[7]) == TEST_RESULTS[7]\nassert solution(TEST_CASES[8]) == TEST_RESULTS[8]\nassert solution(TEST_CASES[9]) == TEST_RESULTS[9]\n\nprint(\"all tests were successful\")", "solution(\"INPUT\") == \"ANSWER\"", "solution('''\n2 2\n''') == '''\n5\n'''\nassert solution('''\n3 2\n''') == '''\n28\n'''\nassert solution('''\n3 4\n''') == '''\n14\n'''\nassert solution('''\n2 3\n''') == '''\n4\n'''\nassert solution('''\n4 8\n''') == '''\n62\n'''\n\n# submit solution to codeforces\n#import requests\n#import re\n#\n#\n#def submit_solution(task: str, stdin: str, filename: str, language: str) -> None:\n#    submit_url = 'https://codeforces.com/problemset/submit'\n#    task_url = 'https://codeforces.com/contest/{}/problem/{}'.format(task[:-1], task[-1])\n#    challenge_url = 'https://codeforces.com/contest/{}/problem/{}/my'.format(task[:-1], task[-1])\n#    csrf_token = re.search(r'<meta name=\"X-Csrf-Token\" content=\"(.*)\"/>', requests.get(challenge_url).text).group(", "solution('''\n5 4\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2\n''') == '''\n8\n'''\n\n# check the correctness of solution\nassert solution('''\n5 1\n''') == '''\n0\n'''", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nassert solution(SAMPLE_INPUT_2) == SAMPLE_OUTPUT_2\nassert solution(SAMPLE_INPUT_3) == SAMPLE_OUTPUT_3\n\n# get input for running the solution on the full input\nwith open(FILE_PATH, 'r') as f:\n    input_file = f.read()\n\n# run the solution on the full input\nprint(solution(input_file))", "solution(\"\") == \"\", \"first test\"\nassert solution(\"\") == \"\", \"second test\"\nassert solution(\"\") == \"\", \"third test\"\nassert solution(\"\") == \"\", \"fourth test\"\n\nprint('All done.')", "solution('''\n4 5\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n100 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n100 2\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n100 3\n''') == '''\n998244352\n'''\n\n# check the correctness of solution\nassert solution('''\n100 4\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n100 5\n''') == '''\n998244352\n'''\n\n# check the correctness of solution\nassert solution('''\n100 6\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n100 7\n''') == '''\n998244352\n'''\n\n# check the correctness of solution\nassert solution('''\n100 8\n''') == '''\n", "solution(\"\") == \"\", \"Empty\"\nassert solution(\"\") == \"\", \"Example\"\nassert solution(\"\") == \"\", \"10^6\"\nassert solution(\"\") == \"\", \"10^9\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert solution(\"\") == \"\", \"Last example\"\nassert"], "finish_reason": ["stop", "stop", "length", "length", "length", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "length"], "sum_logprob": [-24.44330414349001, -81.34340926287004, -89.60386862208506, -64.82948023525998, -51.91538425282104, -32.17679584825001, -29.11898347681, -225.56235914895993, -31.3286024903795, -61.78733279948403, -160.3797628548419, -49.22307923013005, -84.28250182250301, -38.523683685269994, -118.64839277423401, -117.23265359595005, -17.17867958054, -50.269679895900005, -79.48533166270404, -155.94120652351228, -83.3653338031223, -96.20231166451458, -95.51704458971996, -66.76947686861594, -107.13637804540606, -68.25719522137699, -32.900725091269976, -70.06604621813135, -97.38002805802896, -10.5673533457, -315.44407658070816, -78.82529582478999, -88.41270563791494, -16.61567140606, -65.49193947982195, -46.45859332226001, -85.06584032692805, -387.06319759871167, -119.03895668832998, -38.312165588540005, -57.841658619782606, -46.06534266365881, -30.744427251879998, -11.048986429, -110.83863091573997, -27.61115118148001, -47.619296065562004, -27.496828092300003, -50.459105833585, -46.06156306407999], "mean_logprob": [-0.3879889546585714, -0.4701931171264162, -0.2986795620736167, -0.21609826745086666, -0.17305128084273666, -0.748297577866279, -0.5942649689144898, -0.7518745304965333, -0.10442867496793166, -0.3986279535450581, -0.53459920951614, -0.1640769307671, -0.28094167274167664, -0.5277216943187671, -0.4362073263758603, -0.6302830838491935, -0.3904245359213636, -0.837827998265, -0.2649511055423467, -0.519804021745041, -0.2778844460104077, -0.3206743722150487, -0.9847117998940206, -0.4769248347758286, -0.3571212601513533, -0.4266074701336062, -0.2253474321319863, -0.23355348739377133, -0.32460009352676333, -1.05673533457, -1.0514802552690266, -0.7037972841499107, -0.29470901879305, -0.055385571353533336, -0.21830646493274, -0.8010102296941379, -0.28355280108976, -1.2902106586623716, -0.5485666206835483, -0.8328731649682609, -0.5258332601798418, -0.153551142212196, -0.14780974640326922, -1.0044533117272727, -0.3694621030524667, -0.3681486824197333, -0.41408083535271306, -0.49994232895090907, -0.16819701944528334, -0.15353854354693333]}
{"prompt": "'''\nGrandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters. Grandpa Sher wrote a string s of length n.\n\nGrandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher, but to avoid offending him, she will choose one lowercase English letter and erase some (at her choice, possibly none or all) occurrences of that letter in string s.\n\nShe also wants to minimize the number of erased symbols from the pattern. Please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it's impossible. Notice that she can only erase symbols equal to the one letter she chose.\n\nA string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings 'kek', 'abacaba', 'r' and 'papicipap' are palindromes, while the strings 'abb' and 'iq' are not.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string.\n\nThe second line of each test case contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and -1, if it is impossible.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"2\\n2\\nab\\n3\\naba\") == \"0\\n0\"\nassert solution(\"3\\n3\\naba\\n3\\nabb\\n4\\nabba\") == \"0\\n-1\\n0\"\nassert solution(\"3\\n3\\nabc\\n4\\nabbc\\n4\\nabbc\") == \"-1\\n0\\n0\"\nassert solution(\"2\\n2\\nab\\n3\\naba\") == \"0\\n0\"\nassert solution(\"1\\n1\\na\") == \"0\"\nassert solution(\"1\\n2\\nb\\n\") == \"-1\"\nassert solution(\"2\\n2\\nab\\n3\\naba\") == \"0\\n0\"\nassert solution(\"1\\n1\\na\") == \"0\"\nassert solution(\"1\\n2\\nb\\n\") == \"-1\"\nassert solution(\"2\\n2\\nab\\n3\\naba\") == \"0\\n0\"\nassert solution(\"1\\n1\\na\") == \"0\"\nassert solution(\"1\\n2\\nb\\n\") == \"-1\"\nassert solution(\"2\\n2\\nab\\n3\\naba\") == \"0\\n0\"\nassert solution(\"1\\n1\\na", "solution('''1\n4\nabbc''') == '''-1'''\nassert solution('''3\n6\nabacab\n3\npap\n3\nabc''') == '''1\n-1\n-1'''\nassert solution('''1\n12\naacccacbbabca''') == '''3'''\nassert solution('''3\n7\npapapap\n6\nabacab\n5\nababa''') == '''-1\n1\n0'''\nassert solution('''1\n6\nabacab''') == '''1'''\nassert solution('''1\n5\nababa''') == '''0'''\nassert solution('''2\n5\nabcba\n3\nabc''') == '''-1\n-1'''\nassert solution('''1\n3\naaa''') == '''-1'''\nassert solution('''2\n3\naaa\n4\naaca''') == '''-1\n1'''\nassert solution('''1\n4\naaca''') == '''1'''\nassert solution('''1\n3\nabc''') == '''-1'''\nassert solution('''1\n4\naabb''') == '''0'''\nassert solution('''", "solution('''\n2\n5\nababa\n2\naa\n''') == '''\n-1\n0\n'''\n\n# test with 2 longest patterns\nassert solution('''\n3\n3\naab\n4\naabb\n5\naaabb\n''') == '''\n-1\n1\n1\n'''\n\n# test with the longest pattern\nassert solution('''\n1\n1000000\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "solution(\"\"\"1\n5\nabcba\"\"\") == \"\"\"-1\"\"\", \"Example 1\"\nassert solution(\"\"\"1\n7\nabacaba\"\"\") == \"\"\"-1\"\"\", \"Example 2\"\nassert solution(\"\"\"2\n3\naab\n3\naba\"\"\") == \"\"\"1\n0\"\"\", \"Example 3\"\nassert solution(\"\"\"3\n3\naba\n2\naa\n3\naaa\"\"\") == \"\"\"0\n0\n1\"\"\", \"Example 4\"\nassert solution(\"\"\"10\n6\nsababa\n1\na\n7\nabacaba\n6\naabbaa\n1\nz\n10\nabacabacab\n7\nabacaba\n2\naa\n4\naaba\n4\nabaa\"\"\") == \"\"\"0\n0\n0\n1\n-1\n0\n0\n0\n-1\n0\"\"\", \"Example 5\"\nassert solution(\"\"\"10\n12\neabhqrkwhrqn\n12\nhejbbahejbbh\n11\nehjhejbbahej\n8\nwvwvwvwvwvw\n9\nabbabbabbabb\n9\nabbabbabbabb\n9\nabbabbabbabb\n11\nabbabbabbabb\n11\nabbabbabbabb\"\"\") == \"\"\"4\n4\n4\n4\n4", "solution(\"\"\"\n4\n4\nkuke\n3\nqwa\n4\naasa\n4\nssaa\n\"\"\") == \"\"\"\n0\n-1\n1\n2\n\"\"\"\n\n#test speed\nimport timeit\nt = '''\n\n'''\nprint(min(timeit.repeat(setup=t, number=100, globals=globals())))", "solution('''1\n3\nabb''') == '''-1'''\nassert solution('''1\n3\naba''') == '''0'''\nassert solution('''1\n6\nazazaz''') == '''2'''\nassert solution('''2\n3\naba\n5\npapip''') == '''0\n-1'''\n\n# unit tests\nfrom unittest import TestCase\nfrom random import randint\n\nclass SolutionTest(TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''1\n3\nabb'''), '''-1''')\n        self.assertEqual(solution('''1\n3\naba'''), '''0''')\n        self.assertEqual(solution('''1\n6\nazazaz'''), '''2''')\n        self.assertEqual(solution('''2\n3\naba\n5\npapip'''), '''0\n-1''')\n\n# submit\nfrom os import system\n\ndef submit():\n    system('cp /home/codeforces/solutions/abc066/abc066a/solution.py /home/codeforces/solutions/abc066/abc066a/main", "solution('''\n5\n5\nkekke\n3\nqwq\n7\nabacaba\n1\nr\n9\npapicipap\n''') == '''\n0\n0\n0\n0\n0\n'''\n\nassert solution('''\n2\n2\nab\n2\naa\n''') == '''\n1\n0\n'''\n\nassert solution('''\n2\n2\niq\n2\nif\n''') == '''\n-1\n-1\n'''\n\n# stress testing\n'''\nimport random\nimport string\ndef stress_solution(n: int, letters: str, seed: int = 0) -> str:\n    '''\n    Generates a string consisting of n characters to be tested with the solution\n    uses letters for the range of possible letters to be chosen for a string\n    uses seed for the random number generator\n    '''\n    random.seed(seed)\n    return ''.join(random.choice(letters) for _ in range(n))\n\ndef test_stress_solution(t: int, n: int, letters: str, seed: int = 0) -> str:\n    '''\n    Runs the stress tester on the solution\n    '''\n    return '\\n'.join(stress_solution(n, letters, seed +", "'2233' == solution('2 \\n'\n                          '1 2 3 4 5 6 7 8 9 10 \\n'\n                          '2 3 \\n'\n                          '1 1')", "solution(\"\") == \"\", \"empty input should return empty string\"\n\nassert solution(\"\"\"\n3\n3\nabb\n3\naba\n3\nooo\n\"\"\") == \"\"\"\n1\n0\n-1\n\"\"\", \"input: {}\\nexpected output: {}\\nactual output: {}\".format(\"\"\"\n3\n3\nabb\n3\naba\n3\nooo\n\"\"\", \"\"\"\n1\n0\n-1\n\"\"\", solution(\"\"\"\n3\n3\nabb\n3\naba\n3\nooo\n\"\"\"))", "solution(\"input.txt\") == \"output.txt\"", "solution(\"\"\"\n1\n5\niqwpw\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n2\n7\nkekekek\n10\nrtrtrtrtrt\n\"\"\") == \"3\\n0\"\n\n# print solution\nwith open('solution.txt', 'w') as out:\n    out.write(solution(open('input.txt').read()))", "solution(__doc__) == '''\n7\n-1\n0\n0\n0\n-1\n0\n'''", "solution(stdin) == stdout\n\n# submit the solution to codeforces server\ndef submit_solution(stdin: str, problem_link: str = None) -> None:\n    pass\n\n# helper function to read the stdin from file and to submit the solution to codeforces server\ndef open_and_submit_solution(file_name: str, problem_link: str = None):\n    with open(file_name, 'r') as file:\n        stdin = file.read()\n        submit_solution(stdin, problem_link)\n\nif __name__ == '__main__':\n    open_and_submit_solution('acm_icpc_team.in')", "solution(\"\"\"3\n3\nabb\n3\naab\n5\nkekke\n\"\"\") == '''-1\n1\n0\n'''", "solution('''\n5\n5\ncabac\n5\ncabac\n3\naba\n5\nxyzww\n5\nkekek\n''') == '''\n1\n1\n0\n2\n2\n'''", "(\n    solution(\"2\\n3\\nkek\\n4\\nabba\") == \"0\\n0\"\n), \"wrong solution\"", "solution(\"\"\"1\n5\nababb\"\"\") == \"1\", \"1\"\nassert solution(\"\"\"3\n3\ntiy\n4\nakam\n7\nttotvet\"\"\") == \"2 -1 3\", \"2 -1 3\"\nassert solution(\"\"\"1\n10\npapicipapn\"\"\") == \"0\", \"0\"\nassert solution(\"\"\"2\n1\na\n1\nz\"\"\") == \"-1 -1\", \"-1 -1\"\nassert solution(\"\"\"1\n1\nt\"\"\") == \"-1\", \"-1\"\nassert solution(\"\"\"2\n4\nolpo\n5\nrxrkr\"\"\") == \"0 -1\", \"0 -1\"\nassert solution(\"\"\"1\n1\ne\"\"\") == \"-1\", \"-1\"\nassert solution(\"\"\"1\n5\nacaca\"\"\") == \"2\", \"2\"\nassert solution(\"\"\"3\n3\nrur\n2\nzz\n3\nrkq\"\"\") == \"-1 -1 -1\", \"-1 -1 -1\"\nassert solution(\"\"\"1\n5\npapcr\"\"\") == \"0\", \"0\"\nassert solution(\"\"\"1\n6\nbababk\"\"\") == \"2\", \"2\"\nassert solution(\"\"\"1\n1\ns\"\"\") == \"-1\", \"-1\"\nassert solution(\"\"\"1\n", "solution(\"\"\"\n4\n3\nabb\n3\nxzy\n3\nqxx\n3\nxxq\n\"\"\") == \"\"\"\n1\n-1\n1\n1\n\"\"\"", "solution(__doc__) == \"\"\"1\n-1\"\"\"\nprint('passed')", "solution('''\n5\n5\nabxab\n1\na\n1\nb\n6\nabccda\n5\nbaccc\n''') == '''\n0\n0\n-1\n1\n2\n'''", "solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert", "solution('''\n1\n1\na\n''') == '''\n0\n'''\n\nassert solution('''\n2\n2\nab\n1\na\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n10\nabcdefgggg\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n3\naba\n''') == '''\n0\n'''\n\nassert solution('''\n1\n7\nabacaba\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\nabba\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\nadcba\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n4\nabcc\n''') == '''\n1\n'''\n\nassert solution('''\n1\n6\nzxczzz\n''') == '''\n1\n'''\n\nassert solution('''\n1\n2\naa\n''') == '''\n0\n'''\n\nassert solution('''\n1\n3\nbaa\n''') == '''\n1\n'''\n\nassert solution('''\n1\n5\nababa\n''') == '", "solution('''\n4\n4\nabcd\n4\nabcd\n4\ncdba\n4\ndcba\n''') == '''\n-1\n-1\n0\n0\n'''\n\nimport os\nfrom collections import namedtuple\n\nimport pytest\nfrom toolz import pipe\n\nfrom utils import get_data_path\n\n@pytest.fixture\ndef data_path():\n    return get_data_path(__file__)\n\n@pytest.fixture\ndef sample_input():\n    return '''\n    4\n    4\n    abcd\n    4\n    abcd\n    4\n    cdba\n    4\n    dcba\n    '''\n\n@pytest.fixture\ndef sample_output():\n    return '''\n    -1\n    -1\n    0\n    0\n    '''\n\n@pytest.fixture\ndef input_1(data_path):\n    return pipe(data_path, lambda dp: os.path.join(dp, '1.in'), get_file_content)\n\n@pytest.fixture\ndef output_1(data_path):\n    return pipe(data_path, lambda dp: os.path.join(dp, '1.out'), get_file_content)\n\ndef get", "solution('''\n4\n4\nabba\n4\nabac\n1\na\n6\nabcdab\n''') == '''\n0\n3\n0\n5\n'''", "solution('''\n1\n7\nabracad\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\nz\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n7\nabracad\n7\nabcabc\n''') == '''\n2\n6\n'''", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n# check a corner case\nassert solution(SAMPLE_INPUT2) == SAMPLE_OUTPUT2\n\n# get input\ninput_data = get_input()\n# get output\noutput_data = solution(input_data)\n# print\nprint(output_data)", "solution(\"\") == \"\", \"expected a solution\"\n\n# print the solution for the hackerrank\nprint(solution(input()))", "solution('''\n2\n4\nabba\n4\nabba\n''') == '''\n2\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4\nabba\n4\nabba\n4\nabba\n''') == '''\n2\n-1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4\nabba\n4\nabba\n4\nabab\n''') == '''\n2\n-1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5\nabaca\n5\nabaca\n5\nabaca\n5\nabaca\n5\nabaca\n''') == '''\n2\n-1\n2\n-1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4\nabac\n4\nabac\n4\nabac\n4\nabac\n''') == '''\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5\nabcde\n5\nabcde\n''') == '''\n-1\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4\nabba\n4\nabba\n4\n", "solution(\"\"\"\n1\n7\niqkekkei\n\"\"\") == \"\"\"\n2\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n3\n3\naba\n3\nabb\n3\nabc\n\"\"\") == \"\"\"\n0\n-1\n-1\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"\n3\n3\naaa\n3\nabb\n3\nxyz\n\"\"\") == \"\"\"\n2\n2\n-1\n\"\"\", \"Example 3\"\n\nassert solution(\"\"\"\n4\n6\nabcabc\n6\nabcabc\n6\nabcabc\n7\nabcabca\n\"\"\") == \"\"\"\n2\n2\n2\n1\n\"\"\", \"Example 4\"\n\nassert solution(\"\"\"\n7\n3\naaa\n3\naab\n3\naaa\n3\nbaa\n3\naaa\n3\naba\n3\nbab\n\"\"\") == \"\"\"\n0\n-1\n1\n1\n1\n0\n-1\n\"\"\", \"Example 5\"\n\nassert solution(\"\"\"\n5\n10\nbbbbaababa\n10\nbbbbaababa\n10\nbbbbaababa\n10\nababaababb\n10\nbbbbaababa\n\"\"\") == \"\"\"\n5\n5\n5\n5\n5\n\"\"\", \"Example 6\"\n\nassert solution(\"\"\"\n3", "solution(\"\"\"\n2\n6\nababca\n4\nabac\n\"\"\") == \"\"\"\n1\n-1\n\"\"\", \"Example\"\n\n# auto-generated tests from codeforces\nimport codeforces as cf\ncf.generate_test_cases(\"\"\"\n4\n4\nabba\n4\nabac\n4\nabc\n3\naaa\n\"\"\", \"\"\"\n0\n-1\n-1\n0\n\"\"\")", "solution('''\n3\n3\naaq\n3\nzzz\n2\nab\n''') == '''\n0\n3\n1\n'''\n\n# test speed of solution\nimport timeit\ndef test_perf():\n    assert timeit.timeit(\n        # edit here to add / remove test cases\n        '''\n''',\n        number=100,\n        setup='''\nfrom __main__ import solution\n''',\n    ) < 1\n\n# run tests\nt = int(input())\nfor _ in range(t):\n    _n = int(input())\n    s = input()\n    print(solution(s))", "solution('''\n''') == '''\n'''\n\n# print solution\n#\n\n# output file\noutput_name = 'output.txt'\nwith open(output_name, 'w') as output_file:\n    output_file.write(solution(test_str))", "solution('''\n2\n7\nabcabcb\n4\nabcabc\n''') == '''\n2\n-1\n'''\n\nprint('Done!')", "solution(\"\"\"\n3\n3\nabb\n3\naaa\n1\nz\n\"\"\") == \"\"\"-1\n0\n-1\n\"\"\", \"First\"\n\nassert solution(\"\"\"\n5\n5\nasaca\n1\nz\n4\nabba\n4\nxdvd\n6\nrrbbjj\n\"\"\") == \"\"\"0\n-1\n2\n-1\n0\n\"\"\", \"Second\"", "solution('''\n7\n1\na\n5\nacaca\n3\naba\n3\nbca\n3\ncab\n3\nbac\n1\na\n''') == '''\n0\n2\n0\n-1\n-1\n0\n0\n'''", "solution('''2\n5\nabbaa\n1\na''') == '''2\n0'''\n\nassert solution('''1\n5\nabbba''') == '''-1'''\n\nassert solution('''1\n5\nabba''') == '''0'''", "solution('''\n2\n3\nabb\n3\nbab\n''') == '''\n-1\n0\n'''\n\n# get the input\nstdin = sys.stdin.read().strip()\n\n# print solution and copy it to clipboard\nprint(solution(stdin))\n#sys.stdout.write(solution(stdin))", "solution('''\n1\n2\nab\n''') == '''\n1\n'''\n\nassert solution('''\n1\n4\nabba\n''') == '''\n0\n'''\n\nassert solution('''\n1\n10\nracceecar\n''') == '''\n0\n'''\n\nassert solution('''\n1\n10\nracceecarb\n''') == '''\n1\n'''\n\nassert solution('''\n1\n5\nabcde\n''') == '''\n-1\n'''", "solution('''1\n7\nabbabbb''') == '4'\nassert solution('''2\n5\nololo\n1\nq''') == '''3\n-1'''\nassert solution('''4\n7\nabbabbb\n1\ny\n4\nkeke\n4\nxoxo''') == '''4\n0\n2\n0'''\n\n'''\nNOTE\n    If a string consists of zeroes and ones, it is a palindrome iff the number of zeroes is equal to the number of ones.\n    Say we have a string and an integer k, the minimum number of symbols we can erase to make it a palindrome is equal to |n 1 - n 0 |, where n 0 is the number of zeroes in the string and n 1 is the number of ones in the string.\n'''", "solution(r'''\n2\n3\nabb\n3\naba\n''') == r'''\n-1\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n4\nabba\n4\nbbaa\n6\nababa\n''') == r'''\n0\n0\n0\n'''\n\n# read from the user input\nn = int(input())\nfor _ in range(n):\n    l = int(input())\n    s = input()\n    print(solution(f'{n}\\n{l}\\n{s}'))", "solution('''\n2\n4\nabbc\n4\nabba\n''') == '''\n1\n0\n'''\nassert solution('''\n1\n7\nbaaacaa\n''') == '''\n2\n'''\nassert solution('''\n2\n5\nababa\n3\naba\n''') == '''\n0\n0\n'''\nassert solution('''\n1\n5\nabcba\n''') == '''\n-1\n'''\nassert solution('''\n2\n6\nabaccc\n3\naab\n''') == '''\n2\n-1\n'''\nassert solution('''\n1\n5\nabaaa\n''') == '''\n0\n'''\nassert solution('''\n2\n3\naaa\n3\naaa\n''') == '''\n0\n0\n'''\nassert solution('''\n1\n4\nabba\n''') == '''\n0\n'''\nassert solution('''\n2\n4\nabbc\n4\nabba\n''') == '''\n1\n0\n'''\nassert solution('''\n1\n1\na\n''') == '''\n0\n'''\nassert solution('''\n2\n2\nab\n2\nbb\n''') == '''\n1\n1\n'''", "solution(\"\"\"3\n3\naaa\n3\naba\n3\nabb\"\"\") == \"0\\n0\\n-1\"", "solution(\"\"\"\n3\n3\nabc\n3\naba\n3\naba\n\"\"\") == \"\"\"\n-1\n0\n0\n\"\"\"", "solution('''3\n3\nrqr\n3\nabb\n1\np\n''') == '''0\n-1\n0\n'''", "solution(\"\"\"\n3\n6\nkekkek\n7\nabacaba\n3\nabb\n\"\"\") == '''\n0\n0\n-1\n'''", "solution('''\n1\n6\nrvpppa\n''') == '''\n1\n'''\nassert solution('''\n2\n2\niq\n7\nrvpprpa\n''') == '''\n-1\n1\n'''\n\n# check the performance of solution\nfrom random import randint\n\ndef solve(stdin: str) -> int:\n    def _next():\n        for line in stdin.splitlines()[1:]:\n            yield line\n    nxt = _next()\n    for i in range(int(stdin.splitlines()[0])):\n        n = int(next(nxt))\n        s = next(nxt)\n        m = len(s) // 2\n        left, right = s[:m], s[m + 1:]\n        c = 1\n        while c <= m:\n            if s[m - c] != s[m + c]:\n                break\n            c += 1\n        c1 = c\n        c = 1\n        while c <= m:\n            if s[m - c] != s[m + c + 1]:\n                break\n            c += 1\n        c2 = c\n        # print(f'{n} {s} {c1} {c2}')\n        return min(m - c", "solution(\"\"\"1\n7\nabbbaba\"\"\") == \"2\"\nassert solution(\"\"\"2\n7\nabbbaba\n7\nabbbabb\"\"\") == \"\"\"2\n-1\"\"\"", "solution(t_stdin) == t_stdout", "solution('''1\n3\nabb''') == '-1'\nassert solution('''2\n4\nabba\n4\nabab''') == '0\\n1'\nassert solution('''1\n1\nr''') == '0'\n\n# print the solution\nwith open('solution.txt', 'w') as file:\n    with open('input.txt', 'r') as file_in:\n        file.write(solution(file_in.read()))", "solution('''\n1\n5\nabba\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\nabcba\n''') == '''\n0\n'''\n\nassert solution('''\n2\n6\nfafafa\n3\nxyz\n''') == '''\n3\n-1\n'''\n\nassert solution('''\n2\n5\nababa\n7\nqwerqwe\n''') == '''\n0\n1\n'''\n\nassert solution('''\n5\n5\naaaab\n4\nabaa\n8\naaaabaaa\n4\nabab\n7\nabcabca\n''') == '''\n2\n1\n0\n0\n1\n'''"], "finish_reason": ["length", "length", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-71.09135179372602, -151.15243155529808, -77.20106163443005, -269.939390084072, -88.30736196860799, -116.852786498622, -194.46964023105565, -48.581596849979995, -55.358860007463, -8.256346908200001, -65.57714539271, -22.979308648780005, -103.35039719030001, -25.5340390659, -52.91679305728999, -23.357473206599998, -227.78871431818578, -39.67654075872, -19.944875356000004, -51.34696782846001, -16.921503918258974, -105.43169831974099, -112.06390574085201, -30.003319594110003, -41.35412619241, -52.457454910239996, -32.68306355557999, -79.0394969643735, -154.40574293409614, -80.79963853273999, -75.95004273644, -56.25800821687997, -36.32735126925999, -93.09767548511005, -49.32796510519999, -36.400332768540004, -45.45617555699002, -54.620666753765, -168.02089754140994, -64.47138730201996, -112.36052096632994, -19.835885366100005, -17.0513291154, -23.57964975784, -20.227749627339996, -159.92258624133794, -30.003664433140006, -13.6211760931, -47.467589949449994, -102.15464994607596], "mean_logprob": [-0.23697117264575332, -0.50384143851766, -0.2573368721147667, -0.8997979669469067, -1.026829790332651, -0.38950928832874, -0.6482321341035187, -1.1041272011359091, -0.4731526496364359, -0.6351036083230769, -0.7206279713484616, -0.7923899534062069, -0.6225927541584337, -0.7295439733114285, -0.979940612172037, -0.7078022183818182, -0.7592957143939534, -0.9677205063102439, -0.9972437678, -0.9688107137445283, -0.05640501306086333, -0.3514389943991367, -0.3735463524695067, -0.6977516184676744, -0.43077214783760415, -0.6557181863780001, -1.021345736111875, -0.263464989881245, -0.51468580978032, -0.8079963853274, -0.49967133379236844, -0.8396717644310447, -0.931470545365641, -1.0344186165012221, -0.77074945476875, -0.5432885487841791, -0.5476647657468675, -0.4334973551886111, -0.8660871007289175, -0.46718396595666667, -0.3745350698877667, -0.66119617887, -0.53285403485625, -0.6737042787954286, -0.5186602468548718, -0.5330752874711266, -0.6819014643895455, -1.0477827763923078, -0.4200671676942478, -0.6009097055651529]}
{"prompt": "'''\nCQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k-1. Also, CQXYM doesn't want a graph that contains self-loops or multiple edges (i.e. each edge connects two different vertices and between each pair of vertices there is at most one edge).\n\nThe diameter of a graph is the maximum distance between any two nodes.\n\nThe distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes.\n\nCQXYM wonders whether it is possible to create such a graph.\n\nInput\n\nThe input consists of multiple test cases. \n\nThe first line contains an integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nOnly one line of each test case contains three integers n(1 \u2264 n \u2264 10^9), m, k (0 \u2264 m,k \u2264 10^9).\n\nOutput\n\nFor each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n1\n1 2 1\n\"\"\") == \"\"\"\nYES\n\"\"\", \"Test case 0\"\nassert solution(\"\"\"\n2\n1 0 1\n2 1 2\n\"\"\") == \"\"\"\nNO\nYES\n\"\"\", \"Test case 1\"\nassert solution(\"\"\"\n1\n10 10 10\n\"\"\") == \"\"\"\nYES\n\"\"\", \"Test case 2\"\nassert solution(\"\"\"\n1\n1000000000 1 3\n\"\"\") == \"\"\"\nNO\n\"\"\", \"Test case 3\"\nassert solution(\"\"\"\n4\n12 6 4\n8 1 1\n7 4 2\n15 13 9\n\"\"\") == \"\"\"\nYES\nNO\nYES\nYES\n\"\"\", \"Test case 4\"\n\n# if __name__ == \"__main__\":\n#     print(solution(sys.stdin.read()))\nprint(solution(\"\"\"\n4\n12 6 4\n8 1 1\n7 4 2\n15 13 9\n\"\"\"))", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n# test the speed of solution\n\n# get the actual input\nwith open(INPUT_FILE, 'r') as file:\n    stdin = file.read()\n\n# measure the time\nstart = time.time()\nsolution(stdin)\nend = time.time()\n\n# print the result\nprint(f'{((end - start) * 1000):.2f}ms')", "solution('''\n1\n2 1 1\n''') == 'YES'\n\nassert solution('''\n3\n4 5 2\n4 5 1\n4 5 0\n''') == 'NO\\nYES\\nYES'\n\n# load and run the input\nimport sys\ninput_data = sys.stdin.read()\nprint(solution(input_data))", "solution('''\n2\n5 3 3\n5 3 4\n''') == '''\nYES\nNO\n'''\nprint('all tests passed')", "solution('''\n4\n4 4 1\n4 3 3\n4 3 4\n4 4 4\n''') == '''\nYES\nYES\nNO\nNO\n'''", "solution('''\n5\n5 2 2\n5 2 5\n5 2 0\n5 2 3\n5 2 4\n''') == '''\nYES\nNO\nYES\nNO\nYES\n'''\n\n# print(solution(open(INPUT).read()))\n# read lines from stdin\n# for line in stdin:\n#     print(solution(line))", "solution('''\n4\n4 2 2\n4 4 2\n4 4 4\n4 4 3\n''') == '''\nYES\nNO\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n5 5 10\n5 5 5\n5 5 1\n5 5 0\n1 0 1\n1 0 3\n2 1 3\n''') == '''\nYES\nYES\nNO\nYES\nYES\nNO\nYES\n'''", "solution('''\n4\n1 0 2\n2 1 1\n3 1 2\n10 8 6\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution('''\n''') == '''\n'''\n\n# check performance\nassert solution('''\n''') == '''\n'''\n\n# for submitting test cases:\n# https://codeforces.com/contest/1197/problem/A", "solution('''2\n2 1 1\n2 2 1''') == '''YES\nNO'''\n\n# test speed\nimport timeit\nt = timeit.Timer(lambda: solution('''\n'''))\nprint(t.timeit(number=10000))", "solution('''\n1\n4 2 3\n''') == 'YES'\n\n# test performance\nimport random\nfrom collections import namedtuple\nTestCase = namedtuple('TestCase', 'n m k')\ndef createTest(testCase: TestCase):\n    testString = ''\n    testString += str(random.randint(1, 100000)) + '\\n'\n    testString += ' '.join([str(random.randint(1, 1000000000)) for i in range(testCase.n)]) + '\\n'\n    testString += ' '.join([str(random.randint(1, 1000000000)) for i in range(testCase.m)]) + '\\n'\n    testString += ' '.join([str(random.randint(1, 1000000000)) for i in range(testCase.k)]) + '\\n'\n    return testString\n\ndef createTests(testCases: [TestCase]) -> [str]:\n    return [createTest(testCase) for testCase in testCases]\n\ntestCases = [TestCase(random.randint(1, 1000000000), random.randint(1, 1000000000), random.randint(1, 1000000000)) for i in range(100000)]\ntests = createTests(testCases)\n", "solution('''\n2\n3 2 2\n3 4 2\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 2 3\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 3 2\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 5 2\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 2 2\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 0\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 10 1\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 9 1\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n200 200 0\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n200 199 0\n''') == '", "\"No\" == solution(r'''2\n2 1 1\n2 2 2''')\nassert \"Yes\" == solution(r'''2\n2 1 3\n2 2 1''')\n\n# get inputs and resolve with solution\ninp, out = [], []\nfor line in open('in.txt').readlines():\n    inp.append(line.strip())\n\nfor i in range(1, len(inp), 2):\n    out.append(solution(inp[i]))\n\n# output results\nif len(inp) != 0:\n    for i in range(len(out)):\n        print('==== Test {} ===='.format(i + 1))\n        print('Input:')\n        print(inp[i * 2])\n        print('Output:')\n        print(out[i])\n        print('Test OK' if out[i] == inp[i * 2 + 1] else 'WRONG!')\n        print()", "solution('''1\n2 0 1''') == 'YES'\nassert solution('''1\n1 3 2''') == 'NO'\nassert solution('''1\n4 2 2''') == 'YES'\nassert solution('''1\n3 1 3''') == 'YES'\nassert solution('''1\n5 3 3''') == 'NO'\nassert solution('''1\n6 4 5''') == 'YES'\nassert solution('''1\n1 0 1''') == 'YES'\nassert solution('''1\n2 1 1''') == 'NO'\nassert solution('''1\n6 6 6''') == 'NO'\nassert solution('''1\n6 4 6''') == 'NO'\nassert solution('''1\n2 1 2''') == 'NO'\nassert solution('''1\n5 5 5''') == 'NO'\nassert solution('''1\n3 2 2''') == 'NO'\nassert solution('''1\n2 2 2''') == 'NO'\nassert solution('''1\n2 0 2''') == 'NO'\nassert solution('''1\n4 4 4''') == 'NO'\nassert solution('''1\n3 3 3''') == 'NO'\nassert solution('''1\n4 3 3''')", "solution('''\ninput\n''') == '''\noutput\n'''", "solution('''2\n5 5 1\n5 1 1''') == '''YES\nNO'''\n\n# check performance\nfrom random import randint\nfrom time import time\nfrom collections import deque\nn_max = 10**5\nm_max = 10**5\nk_max = 10**5\nd_max = 10**9\ndef test_sol(n, m, k):\n    if k >= min(n, 2):\n        return 'YES'\n    return 'NO'\ndef gen_test_case(n_max, m_max, k_max, d_max):\n    t = randint(1, n_max)\n    for _ in range(t):\n        n = randint(1, n_max)\n        m = randint(0, m_max)\n        k = randint(0, k_max)\n        yield f'{n} {m} {k}'\n\nwith open('../test_case.txt', 'w') as f:\n    f.write(f'{n_max}\\n')\n    for t in gen_test_case(n_max, m_max, k_max, d_max):\n        f.write(f'{t}\\n')\n\nfrom time import time\nwith open('../test_case.", "solution(\"\"\"3\n2 1 1\n2 1 2\n2 1 3\"\"\") == \"\"\"YES\nNO\nNO\"\"\"", "solution('''\n1\n1 1 1\n''') == 'YES', 'test 1'\n\nassert solution('''\n1\n1 1 2\n''') == 'NO', 'test 2'\n\nassert solution('''\n1\n2 1 1\n''') == 'YES', 'test 3'\n\nassert solution('''\n1\n3 2 2\n''') == 'YES', 'test 4'\n\nassert solution('''\n1\n2 3 3\n''') == 'NO', 'test 5'\n\nassert solution('''\n1\n3 1 5\n''') == 'NO', 'test 6'\n\nassert solution('''\n1\n4 1 5\n''') == 'YES', 'test 7'\n\nassert solution('''\n1\n4 2 5\n''') == 'YES', 'test 8'\n\nassert solution('''\n1\n5 1 5\n''') == 'YES', 'test 9'\n\nassert solution('''\n1\n5 2 5\n''') == 'YES', 'test 10'\n\nassert solution('''\n1\n5 3 5\n''') == 'YES', 'test 11'\n\nassert solution('''\n1\n5 4 5\n''') == 'YES', 'test 12'\n\nassert solution('''\n1\n5 5 5\n''", "solution(sample) == result, 'result: %s' % result", "solution(stdin=\"\"\"4\n4 2 1\n4 2 2\n4 2 3\n4 2 4\"\"\") == \"\"\"YES\nYES\nNO\nNO\"\"\"\n\nassert solution(stdin=\"\"\"1\n100000 1 100000\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(stdin=\"\"\"1\n1 0 100000\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(stdin=\"\"\"1\n1 0 1\"\"\") == \"\"\"NO\"\"\"\n\nassert solution(stdin=\"\"\"2\n1 0 100000\n1 0 1\"\"\") == \"\"\"YES\nNO\"\"\"\n\nassert solution(stdin=\"\"\"1\n10 9 3\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(stdin=\"\"\"1\n10 9 1\"\"\") == \"\"\"NO\"\"\"\n\nassert solution(stdin=\"\"\"3\n10 9 3\n10 9 1\n10 9 2\"\"\") == \"\"\"YES\nNO\nYES\"\"\"\n\nassert solution(stdin=\"\"\"1\n10 9 4\"\"\") == \"\"\"NO\"\"\"\n\nassert solution(stdin=\"\"\"1\n10 9 5\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(stdin=\"\"\"1\n10000 10000 1\"\"\") == \"\"\"NO\"\"\"\n\nassert solution(stdin=\"\"\"1\n10000 10000 2\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(stdin=\"\"\"2\n10000 10000 1\n10000 10000 2\"\"\") == \"\"\"NO", "solution('''\n1\n2 2 3\n''') == 'YES'\n\nassert solution('''\n1\n5 2 1\n''') == 'NO'\n\nassert solution('''\n1\n2 3 3\n''') == 'NO'\n\nassert solution('''\n1\n1 0 1\n''') == 'YES'\n\nassert solution('''\n1\n3 1 2\n''') == 'YES'\n\nassert solution('''\n2\n3 1 2\n3 1 2\n''') == 'YES\\nYES'\n\n# print to stdout\nwith open('input.txt', 'r') as f:\n    for line in f:\n        if line.startswith('#'):\n            continue\n        print(solution(line))", "solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\n# contest site: https://codeforces.com/contest/1400/problem/A\n# official solution: https://codeforces.com/contest/1400/submission/85918712", "solution(\"\"\"1\n5 4 2\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(\"\"\"4\n4 4 5\n4 4 4\n4 4 3\n4 4 2\"\"\") == \"\"\"YES\nNO\nYES\nYES\"\"\"", "solution('''\n2\n10 8 5\n5 4 2\n''') == '''\nYES\nNO\n'''\n\n# get input\nT = int(input())\ninputs = []\nfor i in range(T):\n    inputs.append(tuple(map(int, input().split())))\n\n# call solution function\nfor i in range(T):\n    ans = solution(inputs[i])\n    print(ans)", "solution('''1\n1 0 1''') == 'YES'\nassert solution('''3\n3 3 2\n3 3 3\n3 3 4''') == '''YES\nNO\nNO'''\nassert solution('''5\n5 10 5\n5 10 6\n5 1 5\n5 1 6\n5 2 5''') == '''YES\nYES\nNO\nNO\nYES'''\nassert solution('''10\n1 0 2\n2 0 2\n3 0 2\n4 0 2\n5 0 2\n6 0 2\n7 0 2\n8 0 2\n9 0 2\n10 0 2''') == '''NO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO'''\nassert solution('''10\n1 0 1\n2 0 1\n3 0 1\n4 0 1\n5 0 1\n6 0 1\n7 0 1\n8 0 1\n9 0 1\n10 0 1''') == '''YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES'''\nassert solution('''10\n1 0 3\n2 0 3\n3 0 3\n4 0 3\n5 0 3\n6 0 3\n7 0 3\n8 0 3\n9 0 3\n10 0 3''') == '''YES\nYES\nYES\nYES\nYES\nYES\nYES", "solution('''\n2\n2 2 1\n3 2 1\n''') == '''\nYES\nNO\n'''\n\n# test the speed of solution\n\nfrom random import randint\nfrom itertools import combinations\nfrom time import time\n\nn = 10000000\nm = 10000000\nk = 10000000\nprint(n, m, k)\nt = time()\nnodes = list(range(n))\nedges = set(tuple(sorted(x)) for x in combinations(nodes, 2))\nedges = set(edges)\nfor i in range(m):\n    x, y = randint(0, n - 1), randint(0, n - 1)\n    while x == y or (x, y) in edges:\n        x, y = randint(0, n - 1), randint(0, n - 1)\n    edges.add((x, y))\n\nprint(f'Time for generate the input: {time() - t}')\nt = time()\nsolution('')\nprint(f'Time for solution: {time() - t}')", "\"YES\" == solution(\"\"\"\n2\n2 1 1\n2 1 2\n\"\"\")", "solution('''\n1\n1 2 1\n''') == 'YES'\n\nassert solution('''\n1\n2 2 1\n''') == 'NO'\n\nassert solution('''\n1\n1 0 1\n''') == 'YES'\n\nassert solution('''\n1\n4 2 1\n''') == 'YES'\n\nassert solution('''\n1\n4 2 2\n''') == 'NO'\n\nassert solution('''\n1\n4 2 3\n''') == 'YES'\n\nassert solution('''\n1\n4 2 4\n''') == 'YES'\n\nassert solution('''\n1\n5 3 3\n''') == 'YES'\n\nassert solution('''\n1\n5 3 4\n''') == 'NO'\n\nassert solution('''\n1\n5 3 5\n''') == 'YES'\n\nassert solution('''\n1\n2 0 2\n''') == 'NO'\n\nassert solution('''\n1\n6 5 2\n''') == 'NO'\n\nassert solution('''\n1\n6 5 3\n''') == 'YES'\n\nassert solution('''\n1\n6 5 4\n''') == 'YES'\n\nassert solution('''\n1\n6 5 5\n''') == 'YES'\n\nassert", "solution('''\n1\n1 2 0\n''') == 'NO'\n\nassert solution('''\n1\n1 2 1\n''') == 'YES'\n\nassert solution('''\n1\n3 2 2\n''') == 'YES'\n\nassert solution('''\n1\n4 3 3\n''') == 'YES'\n\nassert solution('''\n1\n5 4 3\n''') == 'NO'\n\nassert solution('''\n1\n5 4 4\n''') == 'YES'\n\nassert solution('''\n1\n5 5 5\n''') == 'YES'\n\nassert solution('''\n1\n5 6 5\n''') == 'NO'\n\nassert solution('''\n1\n5 6 4\n''') == 'YES'\n\nassert solution('''\n1\n8 10 8\n''') == 'YES'\n\nassert solution('''\n1\n8 11 8\n''') == 'NO'\n\nassert solution('''\n1\n8 11 7\n''') == 'YES'\n\nassert solution('''\n1\n9 10 8\n''') == 'YES'\n\nassert solution('''\n1\n10 10 8\n''') == 'YES'\n\nassert solution('''\n1\n11 11 8\n''') == 'YES'\n\nassert", "solution('''\n1\n1 0 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n2 1 2\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3 3\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n4 6 4\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n5 10 5\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n6 15 6\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n7 21 7\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n8 28 8\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n9 36 9\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n10 45 10\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n11 55 11\n''') == 'YES'\n\n# check the correctness of solution\nassert solution(''", "solution(\"\") == \"\", \"Didn't pass the first test case\"", "solution('''\n4\n5 1 1\n5 1 0\n5 0 3\n4 3 1\n''') == '''\nYES\nNO\nYES\nNO\n'''\n\n# get the input\nstdin = sys.stdin.read()\n\n# solve the problem\nsolution = solution(stdin)\n\n# print the result\nprint(solution)", "solution(r'''\n1\n4 1 2\n''') == r'''\nYES\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4 2 3\n''') == r'''\nNO\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4 3 3\n''') == r'''\nYES\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4 4 2\n''') == r'''\nYES\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4 5 2\n''') == r'''\nNO\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n3 1 1\n''') == r'''\nYES\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n10 10 0\n''') == r'''\nYES\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n10 10 1\n''') == r'''\nNO\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n10 10 9\n''') == r'''\nYES\n'''\n\n# check the correctness of solution\nassert solution(r", "solution(\"\"\"\n\"\"\") == ''\n\n# obtain input from stdin\nif __name__ == '__main__':\n    from sys import stdin\n\n    print(solution(stdin.read()))", "solution(INPUT_SAMPLE_1) == OUTPUT_SAMPLE_1\n\n# check the speed of solution\nprint(timeit.timeit(lambda: solution(INPUT_SAMPLE_1), number=1))", "solution(\"\"\"\\\n2\n2 1 1\n4 3 3\n\"\"\") == \"\"\"\\\nYES\nNO\n\"\"\"\n\n# print solution to stdout\nimport sys\n\nif __name__ == \"__main__\":\n    s = sys.stdin.read()\n    print(solution(s))", "solution(\"\"\"\n2\n4 2 3\n4 3 3\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\n\nprint(\"passed\")", "solution(case1) == \"YES\"\nassert solution(case2) == \"NO\"\nassert solution(case3) == \"YES\"\nassert solution(case4) == \"NO\"\nassert solution(case5) == \"YES\"\nassert solution(case6) == \"NO\"\nassert solution(case7) == \"YES\"\nassert solution(case8) == \"NO\"\nassert solution(case9) == \"YES\"\nassert solution(case10) == \"NO\"\nassert solution(case11) == \"YES\"\nassert solution(case12) == \"NO\"\nassert solution(case13) == \"YES\"\nassert solution(case14) == \"NO\"\nassert solution(case15) == \"YES\"\nassert solution(case16) == \"NO\"\nassert solution(case17) == \"YES\"\nassert solution(case18) == \"NO\"\nassert solution(case19) == \"YES\"\nassert solution(case20) == \"NO\"\nassert solution(case21) == \"YES\"\nassert solution(case22) == \"NO\"\nassert solution(case23) == \"YES\"\nassert solution(case24) == \"NO\"\nassert solution(case25) == \"YES\"\nassert solution(case26) == \"NO\"\nassert solution(case27) == \"YES\"\nassert solution(case", "solution('''2\n5 2 3\n5 3 3''') == '''YES\nNO'''", "solution(r'''\n1\n2 0 3\n''') == r'''\nYES\n'''\n\nassert solution(r'''\n1\n2 2 2\n''') == r'''\nNO\n'''\n\nassert solution(r'''\n1\n3 1 3\n''') == r'''\nYES\n'''\n\nassert solution(r'''\n1\n3 2 3\n''') == r'''\nNO\n'''\n\nassert solution(r'''\n1\n4 1 3\n''') == r'''\nYES\n'''\n\nassert solution(r'''\n1\n4 2 3\n''') == r'''\nYES\n'''\n\nassert solution(r'''\n1\n4 3 3\n''') == r'''\nNO\n'''\n\nassert solution(r'''\n1\n5 1 3\n''') == r'''\nYES\n'''\n\nassert solution(r'''\n1\n5 2 3\n''') == r'''\nYES\n'''\n\nassert solution(r'''\n1\n5 3 3\n''') == r'''\nYES\n'''\n\nassert solution(r'''\n1\n5 4 3\n''') == r'''\nNO\n'''\n\n# submit solution\nimport sys\nfrom logzero import logger\nfrom dat", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution", "solution('''\n2\n2 1 1\n2 2 2\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 1\n3 2 1\n3 2 2\n''') == '''\nNO\nYES\nYES\n'''", "solution('''1\n1 1 1''') == 'NO'\nassert solution('''1\n1 2 1''') == 'NO'\nassert solution('''1\n1 3 1''') == 'NO'\nassert solution('''1\n1 3 3''') == 'YES'\nassert solution('''1\n1 4 4''') == 'YES'\nassert solution('''1\n1 5 3''') == 'YES'\nassert solution('''1\n1 6 4''') == 'YES'\nassert solution('''1\n1 7 3''') == 'YES'\nassert solution('''1\n1 8 4''') == 'YES'\nassert solution('''1\n1 9 3''') == 'YES'\nassert solution('''1\n1 10 4''') == 'YES'\nassert solution('''1\n1 10 5''') == 'NO'\nassert solution('''1\n2 1 1''') == 'NO'\nassert solution('''1\n2 2 1''') == 'NO'\nassert solution('''1\n2 3 1''') == 'NO'\nassert solution('''1\n2 3 2''') == 'YES'\nassert solution('''1\n2 4 3''') == 'YES'\nassert solution('''1\n2 5 2''')", "solution('''\n1\n3 2 2\n''') == 'YES'\nassert solution('''\n1\n3 1 2\n''') == 'NO'\nassert solution('''\n1\n5 0 3\n''') == 'YES'\nassert solution('''\n1\n4 4 4\n''') == 'NO'\nassert solution('''\n1\n1000000000 999999999 1000000000\n''') == 'YES'\nassert solution('''\n1\n1000000000 999999999 1000000000\n''') == 'YES'\nassert solution('''\n1\n1000000000 999999999 1000000000\n''') == 'YES'\nassert solution('''\n1\n1000000000 999999999 1000000000\n''') == 'YES'\nassert solution('''\n1\n1000000000 999999999 1000000000\n''') == 'YES'\nassert solution('''\n1\n1000000000 999999999 1000000000\n''') == 'YES'\nassert solution('''\n1\n1000000000 999999999 1000000000\n''') == 'YES'\nassert solution('''\n1\n1000000000 999999999 1000000000\n''') == 'YES'\nassert solution('''\n1\n1000000000 999999999 1000000000\n''') == 'YES'\nassert solution('''\n1\n1", "solution('''\n2\n3 3 2\n3 3 1\n''') == '''\nYES\nNO\n'''\n\n# prepare for test cases\nimport unittest\nimport random\n\nclass TestCase(unittest.TestCase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.lower_limit = 1\n        self.upper_limit = 10 ** 5\n        self.lower_limit2 = 1\n        self.upper_limit2 = 10 ** 9\n        self.lower_limit3 = 0\n        self.upper_limit3 = 10 ** 9\n\n    def random_test(self, n, m, k):\n        return [random.randint(self.lower_limit2, self.upper_limit2) for _ in range(n)]\n\n    def test_case(self, t):\n        test_cases = self.random_test(t, t, t)\n        return test_cases\n\n    def test_yes(self):\n        stdin = self.test_case(self.lower_limit)\n        self.assertTrue(solution(stdin))\n\n    def test_no(self):\n        stdin = self.test_case(self.upper_limit)\n        self.assertFalse", "solution('''5\n5 3 2\n5 3 3\n6 3 2\n6 3 3\n6 3 4\n''') == '''NO\nYES\nYES\nNO\nYES\n'''", "solution(r'''\n1\n2 2 3\n''') == r'''\nYES\n'''\n\nassert solution(r'''\n2\n2 3 3\n4 4 7\n''') == r'''\nNO\nYES\n'''\n\n# get the input from the challenge\nwith open(__file__.replace('.py', '.in')) as f:\n    _input = f.read()\n\n# run the solution for the input\nprint(solution(_input))", "solution(stdin=\"\"\"\n2\n2 1 1\n2 1 2\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution(example_input) == example_output\n# put your code here:\ndef solve(n, m, k):\n    if k == 0:\n        if n > 1:\n            return \"NO\"\n        elif m > 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        if n == 1:\n            return \"YES\"\n        elif m >= n - 1:\n            return \"YES\"\n        elif m >= (k - 1) * k / 2:\n            return \"YES\"\n        else:\n            return \"NO\"\n\nT = int(input())\n\nfor _ in range(T):\n    n, m, k = map(int, input().split())\n    print(solve(n, m, k))\n\n# test = {\n#     (1, 1, 0): 'YES',\n#     (3, 2, 1): 'YES',\n#     (3, 1, 1): 'NO',\n#     (3, 0, 2): 'NO',\n#     (3, 0, 3): 'YES',\n#     (3, 3, 3): 'YES',\n#     (3, 2, 3): 'NO',\n#     (3, 1, 3): 'NO',\n#     (4, 1,", "solution(\"\"\"\n1\n1 1 1\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n2\n2 1 2\n3 2 2\n\"\"\") == \"YES\\nNO\"\n\nassert solution(\"\"\"\n2\n2 1 1\n3 2 1\n\"\"\") == \"NO\\nYES\"\n\n# submit solution to hackerrank\n# import io\n# import sys\n# def readline():\n#     return input()\n# sys.stdin = io.StringIO(\"1\\n1 1 1\")\n# input = readline\n# if __name__ == '__main__':\n#     print(solution(sys.stdin.read()))\n\n# print(solution(sys.stdin.read()))"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "stop"], "sum_logprob": [-107.24284986467006, -55.93709893223598, -50.452881051942, -22.158951367, -24.188002525129992, -68.81088019674002, -65.83530869636199, -29.0491915568, -48.296462746199985, -35.16705100024001, -92.9038266522199, -75.34426484340302, -122.32268718835493, -102.12588872582205, -8.3608095536, -141.5431453153561, -14.411666258999999, -58.439095949786015, -23.292481401000003, -97.89633722157501, -72.96618639126402, -48.531717671829995, -32.86900450337, -44.90681332841002, -70.62496196337395, -112.89894606349003, -13.574658544999998, -68.69382216516294, -76.02634297733404, -32.56397382652198, -18.804844754499996, -46.45366003122999, -53.062644228538964, -26.477508463439996, -24.476935508839997, -38.714942031339994, -28.114141626199995, -20.32872111557702, -15.166366400999998, -61.46862291598797, -14.213399520652995, -30.112213305500003, -55.14203851889163, -47.453143221716985, -125.194881431907, -26.178434807429994, -57.68467605834002, -15.661278081200008, -125.57623827189992, -73.83389526541002], "mean_logprob": [-0.505862499361651, -0.5179361012244074, -0.5935633064934352, -0.6331128962, -0.60470006312825, -0.7909296574337931, -0.6152832588445046, -0.72622978892, -0.778975205583871, -0.5582071587339682, -0.3096794221740667, -0.25114754947801, -0.5485322295441928, -0.3404196290860733, -0.46448941964444446, -0.47181048438452, -0.533765417, -0.19479698649928667, -1.4557800875625, -0.32632112407191666, -0.41223834119358194, -0.5991570082941975, -0.6573800900674001, -0.44026287576872547, -0.23541653987791333, -0.44274096495486276, -0.67873292725, -0.22897940721721, -0.25342114325778, -0.10854657942174, -1.1061673385, -0.5530197622765476, -0.17687548076179666, -0.551614759655, -0.47071029824692306, -0.5530706004477143, -0.6247587028044445, -0.06776240371859, -0.631931933375, -0.20489540971996, -0.047377998402176665, -0.4241156803591549, -0.183806795062972, -0.15817714407239, -0.41731627143969, -0.594964427441591, -0.5196817662913513, -0.5593313600428571, -0.4185874609063333, -0.4421191333258084]}
{"prompt": "'''\nLuntik came out for a morning stroll and found an array a of length n. He calculated the sum s of the elements of the array (s= \u2211_{i=1}^{n} a_i). Luntik calls a subsequence of the array a nearly full if the sum of the numbers in that subsequence is equal to s-1.\n\nLuntik really wants to know the number of nearly full subsequences of the array a. But he needs to come home so he asks you to solve that problem!\n\nA sequence x is a subsequence of a sequence y if x can be obtained from y by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2 \u22c5 t lines contain descriptions of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 60) \u2014 the length of the array.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^9) \u2014 the elements of the array a.\n\nOutput\n\nFor each test case print the number of nearly full subsequences of the array.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n2\n2 2\n5\n1 1 1 1 1\n''') == '''\n2\n16\n'''\n\n# check if solution handles extreme inputs\nassert solution('''\n1\n60\n18 987 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "solution(r'''\n2\n2\n2 1\n3\n1 2 3\n''') == r'''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n3\n3 3 3\n3\n1 2 3\n3\n2 3 3\n''') == r'''\n3\n0\n2\n'''", "solution(\"\"\"2\n3\n1 1 2\n2\n2 1\"\"\") == \"\"\"2\n1\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"2\n4\n1 2 3 4\n2\n2 1\"\"\") == \"\"\"4\n1\"\"\"", "solution(\"\"\"\n3\n4\n1 0 2 -1\n5\n5 0 0 5 -1\n7\n0 -1 0 -1 0 -1 0\n\"\"\") == \"\"\"\n2\n4\n4\n\"\"\"", "solution(\"\"\"\n2\n5\n2 3 3 3 5\n3\n3 2 1\n\"\"\") == \"\"\"\n5\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n2 2\n2\n2 1\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5\n5 5 5 5 5\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n2 2\n2\n1 1\n\"\"\") == \"\"\"\n1\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n60\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\"\"\") == \"\"\"\n16516\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3\n1", "solution('''\n2\n3\n0 1 1\n2\n1 1\n''') == '''\n3\n3\n'''\nassert solution('''\n1\n3\n1 1 1\n''') == '''\n7\n'''\n\n# submit solution\nsolution(open('inputs/luntik_and_array.txt').read())", "solution(__doc__) == '''0\n1\n2\n2\n2\n2\n2\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3", "solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4\n2 3 3 2\n4\n0 1 2 3\n4\n0 0 0 0\n''') == '''\n4\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n9 8 4 4 9\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2 3\n5\n1 2 3 4 5\n''') == '''\n1\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 4 5 1\n''') == '''\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 1\n2\n1 1\n''') == '''\n1\n1\n'''", "'0' == solution('''\n1\n4\n1 1 2 1\n''')\n\nassert '4' == solution('''\n1\n4\n1 1 1 1\n''')\n\nassert '2' == solution('''\n2\n2\n1 2\n2\n2 1\n''')\n\nassert '0' == solution('''\n3\n3\n1 1 2\n1\n1\n1\n0\n''')\n\nassert '2' == solution('''\n3\n5\n5 2 1 1 2\n5\n5 2 1 1 2\n5\n5 2 1 1 2\n''')\n\nassert '3' == solution('''\n3\n5\n5 2 1 1 2\n5\n5 2 1 1 2\n5\n5 2 1 1 2\n''')\n\n# test for speed\nassert '0' == solution('''\n1000\n60\n''')\n\n# test for speed\nassert '0' == solution('''\n1000\n60\n''')", "solution('''\n2\n6\n1 2 3 0 3 2\n1\n1\n''') == '''\n2\n0\n'''\n\n# submit solution to codeforces\n# import sys\n# stdin = sys.stdin.read()\n# sys.stdout.write(solution(stdin))", "solution(\"\"\"\n5\n5\n5 3 2 3 5\n5\n5 5 5 5 5\n5\n5 3 2 3 4\n2\n2 2\n2\n1 2\n\"\"\") == \"\"\"\n3\n1\n3\n0\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n6\n1 2 3 4 5 6\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4\n1 1 1 1\n4\n1 1 1 2\n\"\"\") == \"\"\"\n1\n3\n\"\"\"\n\ndef read_input_file(input_file: str):\n    with open(input_file, 'r') as f:\n        return f.read()\n\nif __name__ == '__main__':\n    # Each line of the input file will be a test case\n    solution(read_input_file('input.txt'))", "(solution('''\n3\n3\n1 1 1\n3\n1 2 3\n3\n1 2 4\n''') == '''\n1\n2\n0\n''')", "solution(\"1\\n3\\n1 1 1\") == \"6\"\nassert solution(\"2\\n3\\n1 1 1\\n3\\n1 2 3\") == \"6\\n0\"\nassert solution(\"1\\n4\\n2 5 1 3\") == \"4\"\nassert solution(\"4\\n4\\n1 2 1 1\\n3\\n1 2 3\\n3\\n3 2 1\\n2\\n5 5\") == \"4\\n0\\n0\\n0\"\n\nif __name__ == \"__main__\":\n    input()\n    print(solution(input()))", "\"1\\n0\\n2\\n2\\n2\\n2\\n2\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n3\\n3\\n2\\n2\\n0\\n0\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\", "solution(\"\"\"\n4\n4\n1 2 1 1\n4\n1 2 2 1\n2\n2 1\n2\n1 2\n\"\"\") == \"\"\"\n4\n4\n1\n0\n\"\"\"", "solution('''\n2\n2\n0 2\n3\n0 2 1\n''') == '''\n0\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 1 2\n4\n4 1 4 2\n1\n1000000000\n''') == '''\n1\n2\n0\n'''", "solution(\"\"\"\n1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3\n1 1 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n9\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3\n1 2 3\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n2\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3\n1 1 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2\n2 3\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3\n1 2 3\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3\n2 3 3\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"", "solution(sample) == expected\nassert solution(test1) == expected1\nassert solution(test2) == expected2\nassert solution(test3) == expected3\n\n# check the performance of solution\nassert timeit.timeit(lambda: solution(test1), number=100) < 2\nassert timeit.timeit(lambda: solution(test2), number=100) < 2\nassert timeit.timeit(lambda: solution(test3), number=100) < 2", "solution('''\n1\n3\n1 1 1\n''') == '2'\n\nassert solution('''\n3\n3\n1 1 1\n3\n1 2 3\n3\n1 2 4\n''') == '''\n2\n3\n3\n'''", "solution('''\n2\n4\n0 1 2 3\n4\n0 1 2 3\n''') == '''\n4\n4\n'''\n\n# get the input\nt = int(input())\nstdin = '\\n'.join([input() for _ in range(t*2)])\n\n# print the output\nprint(solution(stdin))", "solution('''3\n3\n1 2 4\n4\n1 3 3 3\n5\n5 1 3 3 3''') == '''2\n2\n2'''", "solution(stdin) == stdout\n'''\ndef fib(n):\n    f = 0\n    s = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            f, s = s, f + s\n        return s\n        \ndef solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if not stdin:\n        return stdin\n    n = int(stdin)\n    return str(fib(n))\n'''\n'''\ndef is_palindrome(s):\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True\n\ndef solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if not stdin:\n        return stdin\n    n = int(stdin)\n    n1 = str(n)\n    n2 = n1[::-1]\n    i = 0\n    while not is_palindrome(n1):\n        n1 = str(int(n1) + int(n2))\n        n2 =", "solution('''\n1\n6\n1 2 3 4 5 1\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 2 3\n5\n5 5 5 5 5\n2\n0 5\n''') == '''\n1\n1\n0\n'''", "solution('''\n3\n2\n2 0\n2\n0 2\n1\n1\n''') == '''\n1\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n''') == '''\n8\n'''", "solution('''3\n3\n1 1 1\n3\n1 1 2\n3\n1 2 3''') == '''3\n0\n0'''", "(1) == solution(\"\"\"\n0\n\"\"\")\n\n# check the correctness of solution\nassert (0) == solution(\"\"\"\n1\n\"\"\")\n\n# check the correctness of solution\nassert (1) == solution(\"\"\"\n1 1\n\"\"\")\n\n# check the correctness of solution\nassert (3) == solution(\"\"\"\n3 1 2 1\n\"\"\")\n\n# check the correctness of solution\nassert (9) == solution(\"\"\"\n3 1 2 3\n\"\"\")\n\n# check the correctness of solution\nassert (0) == solution(\"\"\"\n3 1 3 3\n\"\"\")\n\n# check the correctness of solution\nassert (2) == solution(\"\"\"\n4 1 2 3 1\n\"\"\")\n\n# check the correctness of solution\nassert (7) == solution(\"\"\"\n4 1 2 3 4\n\"\"\")\n\n# check the correctness of solution\nassert (1) == solution(\"\"\"\n4 1 3 3 4\n\"\"\")\n\n# check the correctness of solution\nassert (16) == solution(\"\"\"\n5 1 2 3 4 1\n\"\"\")\n\n# check the correctness of solution\nassert (35) == solution(\"\"\"\n5 1 2 3 4 5\n\"\"\")\n\n# check the correctness of solution\nassert (1) == solution(\"\"\"\n5 1 2 3 4 6\n\"\"\")\n\n# check the correctness of solution\n", "solution(stdin=\"\"\"\n2\n3\n1 1 1\n3\n2 3 1\n\"\"\") == \"\"\"\n0\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n3\n3\n1 1 1\n3\n2 3 1\n3\n3 1 2\n\"\"\") == \"\"\"\n0\n1\n0\n\"\"\"", "solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"", "solution('''\n5\n5\n5 4 3 2 1\n5\n5 5 4 4 3\n2\n1 1\n4\n1 1 2 2\n4\n4 4 4 4\n''') == '''\n4\n4\n1\n6\n15\n'''\n# check the correctness of solution\nassert solution('''\n1\n7\n6 6 5 5 4 4 3\n''') == '''\n7\n'''\n# check the correctness of solution\nassert solution('''\n3\n3\n1 1 1\n5\n5 5 5 5 5\n2\n1 2\n''') == '''\n3\n1\n2\n'''\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '''\n1\n'''\n# check the correctness of solution\nassert solution('''\n1\n4\n4 4 4 4\n''') == '''\n15\n'''\n# check the correctness of solution\nassert solution('''\n3\n5\n5 5 4 4 3\n5\n5 5 5 5 5\n5\n5 5 5 5 5\n''') == '''\n1\n1\n1\n'''\n# check the correctness of solution\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '''\n1\n'''\n# check the", "(solution('1\\n\\n10\\n1 1 1 1 1 1 1 1 1 1') == '1')\nassert (solution('1\\n\\n4\\n1 1 1 1') == '0')\nassert (solution('1\\n\\n3\\n1 1 1') == '3')\nassert (solution('1\\n\\n4\\n4 4 4 4') == '0')\nassert (solution('1\\n\\n7\\n1 1 1 1 1 1 1') == '6')\nassert (solution('1\\n\\n11\\n1 1 1 1 1 1 1 1 1 1 1') == '15')\nassert (solution('1\\n\\n8\\n1 1 1 1 1 1 1 1') == '21')\nassert (solution('1\\n\\n4\\n4 3 2 1') == '4')\nassert (solution('1\\n\\n4\\n1 2 3 4') == '4')\nassert (solution('1\\n\\n7\\n5 5 5 5 5 5 5') == '5')\nassert (solution('1\\n\\n9\\n5 5 5 5 5 5 5 5 5') == '10')\nassert (solution('1\\n\\n13\\n5 5 5 5 5 5 5 5", "solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n3\n'''\n\nassert solution('''\n1\n4\n4 4 4 4\n''') == '''\n4\n'''\n\nassert solution('''\n1\n4\n1 2 3 4\n''') == '''\n0\n'''\n\nassert solution('''\n3\n3\n1 2 3\n2\n2 2\n3\n3 3 3\n''') == '''\n2\n1\n0\n'''\n\n# stress testing\nimport random\nwhile True:\n    n = random.randint(1, 60)\n    a = [random.randint(0, 10**9) for _ in range(n)]\n    test = f'''{n}\\n{\" \".join(map(str, a))}'''\n    result = solution(test)\n    print(result)", "solution(input_str) == output_str", "solution(\"\"\"\n2\n4\n1 1 1 1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n1\n4\n\"\"\"\n\nassert solution(\"\"\"\n4\n4\n10 3 1 2\n6\n1 1 1 1 1 1\n6\n1 1 1 1 1 1\n4\n4 3 2 1\n\"\"\") == \"\"\"\n2\n1\n15\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# print solution\nprint(solution(__doc__))", "solution(\n\"\"\"\n3\n3\n1 1 1\n3\n1 2 3\n3\n1 2 3\n\"\"\"\n) == \"\"\"\n3\n3\n0\n\"\"\"", "solution(problem_sample) == problem_sample_solution\n# test the performance of solution\nassert solution(str(read_problem_file())) == str(read_solution_file())", "solution(\"\") == \"\", \"Example #1\"\nassert solution(\"\") == \"\", \"Example #2\"\nassert solution(\"\") == \"\", \"Example #3\"\nassert solution(\"\") == \"\", \"Example #4\"\nassert solution(\"\") == \"\", \"Example #5\"\nassert solution(\"\") == \"\", \"Example #6\"\nassert solution(\"\") == \"\", \"Example #7\"\nassert solution(\"\") == \"\", \"Example #8\"\nassert solution(\"\") == \"\", \"Example #9\"\nassert solution(\"\") == \"\", \"Example #10\"\nassert solution(\"\") == \"\", \"Example #11\"\nassert solution(\"\") == \"\", \"Example #12\"\nassert solution(\"\") == \"\", \"Example #13\"\nassert solution(\"\") == \"\", \"Example #14\"\nassert solution(\"\") == \"\", \"Example #15\"\nassert solution(\"\") == \"\", \"Example #16\"\nassert solution(\"\") == \"\", \"Example #17\"\nassert solution(\"\") == \"\", \"Example #18\"\nassert solution(\"\") == \"\", \"Example #19\"\nassert solution(\"\") == \"\", \"Example #20\"\nassert solution(\"\") == \"\", \"Example #21\"\nassert solution(\"\") == \"\", \"Example #22\"\nassert solution(\"\") == \"\", \"Example #23\"\nassert solution", "solution('''\n1\n3\n1 2 3\n''') == '''\n2\n'''\nassert solution('''\n2\n5\n1 1 1 1 1\n5\n0 0 0 0 0\n''') == '''\n4\n0\n'''\nassert solution('''\n2\n4\n2 3 3 2\n3\n0 0 0\n''') == '''\n4\n1\n'''\n\n# get input and output\ninput_lines = []\nwith open('input.txt', 'r') as input_file:\n    for line in input_file:\n        input_lines.append(line.strip())\nwith open('output.txt', 'w') as output_file:\n    output_file.write(solution(stdin='\\n'.join(input_lines)))", "solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"One line\"\nassert solution(\"\") == \"\", \"Two lines\"\nassert solution(\"\") == \"\", \"Three lines\"\nassert solution(\"\") == \"\", \"Full input\"\nassert solution(\"\") == \"\", \"Full input\"\n\n# --- End Of Solution ---\n# --- End Of Submission ---", "solution('''\n2\n3\n1 1 1\n2\n1 1\n''') == '''\n6\n1\n'''\n\nprint(solution('''\n3\n3\n1 1 1\n2\n1 1\n3\n3 3 3\n'''))\n\n# this is just a stand-in for a checker\n# to see the expected output, check the sample solutions\n\n# print(run_tests(solution, TESTS))", "solution(\"\"\"10\n4\n1 1 1 1\n7\n1 1 1 1 1 1 1\n4\n2 2 2 2\n4\n10 10 10 10\n4\n3 3 3 3\n4\n1 2 3 4\n4\n10 20 30 40\n4\n10 20 30 40\n5\n1 1 1 1 1\n5\n1 1 1 1 2\n\"\"\") == \"\"\"\n3\n3\n3\n3\n3\n2\n2\n1\n2\n2\n\"\"\"\n\nprint(\"PASSED!!!\")", "solution(\"\"\"\n0\n\"\"\") == \"\"\"\n\n\"\"\"", "solution(r'''\n1\n5\n1 2 3 4 5\n''') == r'''\n2\n'''\n\nassert solution(r'''\n1\n5\n1 1 1 1 1\n''') == r'''\n1\n'''\n\nassert solution(r'''\n1\n5\n2 3 4 5 6\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n6\n0 0 0 0 0 1\n''') == r'''\n4\n'''\n\nassert solution(r'''\n1\n6\n0 0 0 0 0 0\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n6\n1 1 1 0 0 0\n''') == r'''\n1\n'''\n\nassert solution(r'''\n1\n6\n1 1 1 1 1 1\n''') == r'''\n1\n'''\n\nassert solution(r'''\n1\n6\n2 3 4 5 6 7\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n6\n1 2 3 4 5 6\n''') == r'''\n6\n'''\n\nassert solution(r'''\n1\n6\n1 2 3 4 5 0\n''') == r'''\n", "solution('''\n3\n3\n1 2 4\n4\n4 5 7 9\n4\n1 2 1 1\n''') == '''\n3\n3\n2\n'''\n\n# get the input\ns = stdin_input()\n\n# print the output\nprint(solution(s))", "solution('''\n3\n3\n0 0 0\n4\n0 0 0 0\n1\n10\n''') == '''\n4\n8\n0\n'''", "solution('''2\n2\n1 2\n3\n1 1 1''') == '2\\n6'", "solution(\"\"\"\n3\n3\n3 2 1\n3\n1 1 1\n3\n1 1 2\n\"\"\") == \"\"\"\n1\n0\n0\n\"\"\"\nassert solution(\"\"\"\n4\n4\n1 1 1 1\n4\n2 2 2 2\n4\n1 2 3 4\n4\n1 2 1 2\n\"\"\") == \"\"\"\n0\n0\n8\n3\n\"\"\"\nassert solution(\"\"\"\n5\n5\n1 1 1 1 1\n5\n2 2 2 2 2\n5\n1 2 3 4 5\n5\n1 2 1 2 1\n5\n1 2 3 4 2\n\"\"\") == \"\"\"\n0\n0\n16\n4\n9\n\"\"\"\n\n# stress testing\nwhile True:\n    pass", "solution(test_solution_1) == test_output_1\n\n# get input for the kattis.com problem\ndef get_input(source: str = \"sample\") -> str:\n    \"get input data from file or stdin\"\n    data = None\n    if source == \"sample\":\n        # get data from the sample view\n        data = test_solution_1\n    elif source == \"kattis\":\n        # get data from the kattis input website\n        data = input()\n    else:\n        # get data from a file\n        with open(source) as file:\n            data = file.read()\n    return data\n\n# get output for the kattis.com problem\ndef get_output(source: str = \"sample\") -> str:\n    \"get output data from file or stdin\"\n    data = None\n    if source == \"sample\":\n        # get data from the sample view\n        data = test_output_1\n    elif source == \"kattis\":\n        # get data from the kattis output website\n        data = solution(test_solution_1)\n    else:\n        # get data from a file\n        with open(source) as file:\n            data = file.read()\n    return data\n\n# get the data from", "(solution(example_1) == '4')\nassert (solution(example_2) == '3')\nassert (solution(example_3) == '0')\nassert (solution(example_4) == '1')", "solution('''\n2\n4\n1 2 1 2\n4\n1 2 3 4\n''') == '''\n4\n4\n'''\n\n# get stdin lines\nlines = []\nfor line in stdin:\n    lines.append(line.rstrip('\\n'))\n\n# parse stdin lines\ntest_cases_count = int(lines[0])\ntest_cases = []\nfor i in range(1, len(lines), 2):\n    test_cases.append({\n        'array_length': int(lines[i]),\n        'array': list(map(int, lines[i + 1].split(' ')))\n    })\n\n# print solution for each test case\noutput_lines = []\nfor test_case in test_cases:\n    output_lines.append(solution(test_case))\n\nprint('\\n'.join(output_lines))", "solution(\"\"\"\n2\n3\n2 3 4\n3\n3 2 1\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check that there is no whitespace at the end of the output\nassert solution(\"\"\"\n2\n3\n2 3 4\n3\n3 2 1\n\"\"\").rstrip() == \"\"\"\n1\n0\n\"\"\"\n\n# check performance\nn, m = 1_000, 1_000\nassert solution(f\"\"\"\n{n}\n{\" \".join(map(str, range(m)))}\n\"\"\" * n)"], "finish_reason": ["length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop"], "sum_logprob": [-61.48341395399999, -38.481424143874, -34.51185684273001, -44.75444243969999, -99.97980692497002, -48.941663813560005, -37.856969409999955, -117.818530404708, -111.44244793562598, -41.260296087785, -123.0030496251841, -20.870672238699996, -74.06135033773204, -79.25003727223702, -32.2096195569, -46.89028201882, -69.03478457143302, -35.67824706368601, -27.1302708082, -33.84633695838, -36.3674691133, -104.96306409113407, -43.32885537726001, -33.13139526383999, -18.0860446697, -93.41308318818801, -39.24454914564403, -9.501905914, -129.1519948786599, -107.80017389888597, -76.98974382753998, -9.152371388999999, -85.5107800447, -25.693346254900007, -32.36663286921999, -15.595243046291996, -75.81541799447, -59.344861873099994, -107.80429897740001, -90.74123510776, -13.511038802, -73.45082941274975, -56.89227404400001, -23.4587489219, -16.8552458865, -81.63289551568998, -71.01181449357804, -23.65069429308, -61.08969600712605, -78.31684924200002], "mean_logprob": [-0.20494471318, -0.4581121921889762, -0.5950320145298276, -0.9133559681571428, -0.33326602308323333, -0.5968495587019512, -0.12618989803333333, -0.39272843468236, -0.49529976860278224, -0.5575715687538514, -0.5913608155056923, -0.5090407863097561, -0.5215588051952957, -0.26416679090745665, -0.7157693234866667, -0.578892370602716, -0.23011594857144332, -0.33035413947857406, -0.43758501303548386, -0.40293258283785716, -0.9324992080333333, -0.34987688030378, -0.5935459640720548, -0.4733056466262857, -0.5023901297138889, -0.31137694396062665, -0.48450060673634565, -0.7309158395384615, -0.43050664959553303, -0.35933391299628664, -0.3719311296016425, -0.8320337626363636, -0.6527540461427481, -0.6588037501256411, -0.7356052924822727, -0.05198414348764, -0.41204031518733697, -0.6900565334081395, -1.0267076093085714, -0.7822520267910344, -0.9650742001428572, -0.244836098042499, -0.8127467720571429, -0.6015063826128205, -0.6482786879423077, -0.5008153099122086, -0.23670604831192668, -0.43797582024222226, -0.2979985171079317, -0.6315874938870968]}
{"prompt": "'''\nLuntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n''') == '''\n'''\n\n# test solution performance\nimport timeit\nimport random\nprint(timeit.timeit(solution, number=1))", "solution('''1\n1 2 3''') == '1'\nassert solution('''3\n1 1 2\n1 2 2\n1 3 3''') == '''\n1\n0\n0'''\n\n# get input for testing\ndef get_input() -> str:\n    from random import randint\n    t = randint(1, 10**3)\n    res = [str(t)]\n    for i in range(t):\n        res.append('{} {} {}'.format(randint(1, 10**9), randint(1, 10**9), randint(1, 10**9)))\n    return '\\n'.join(res)\n\n# create a test-file\nwith open('test-1.in', 'w') as f:\n    f.write(get_input())", "solution('''\n3\n1 2 3\n3 2 1\n1 1 1\n''') == '''\n1\n1\n0\n'''", "solution(\"test\") == \"test\"", "solution(r'''\n1\n1 2 3\n''') == r'''\n1\n'''\n\nassert solution(r'''\n1\n1 4 3\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n1 2 5\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n5 5 5\n''') == r'''\n0\n'''\n\nassert solution(r'''\n2\n1 2 3\n1 4 3\n''') == r'''\n1\n0\n'''\n\nassert solution(r'''\n3\n1 2 3\n1 4 3\n1 2 5\n''') == r'''\n1\n0\n0\n'''\n\nassert solution(r'''\n2\n5 5 5\n6 4 3\n''') == r'''\n0\n0\n'''\n\nassert solution(r'''\n3\n5 5 5\n6 4 3\n1 2 5\n''') == r'''\n0\n0\n0\n'''\n\nassert solution(r'''\n4\n1 2 3\n1 4 3\n1 2 5\n5 5 5\n''') == r'''\n1\n0\n0\n0\n'''\n\nassert solution(r'''\n6\n1 2 3\n", "solution(r'''\n3\n2 2 2\n3 1 2\n1 2 2\n''') == r'''\n2\n2\n1\n'''\n\nprint('All tests passed successfully')", "solution('''1\n1 1 1''') == '0'\nassert solution('''2\n2 3 4\n1 1 1''') == '1\\n0'\nassert solution('''2\n2 2 1\n2 2 2''') == '1\\n1'\n\n# get the input and run the solution\n# input.txt is downloaded as a raw file from the problem statement on Codeforces\n# (http://codeforces.com/contest/1246/problem/A)\n# just download the input.txt\nwith open('input.txt', 'r') as input_file:\n    for i, line in enumerate(input_file):\n        if i == 0:\n            continue\n        print(solution(line))", "solution(stdin=\"\"\"\n2\n1 1 1\n3 2 2\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n2\n2 0 0\n1 1 1\n\"\"\") == \"\"\"\n1\n1\n\"\"\"", "(solution('2\\n2 2 2\\n3 3 3') == '1\\n0')", "solution('''\n3\n1 1 1\n1 2 3\n1 3 3\n''') == '''\n0\n1\n0\n'''\n\n# get the input\ntc = '''\n3\n1 1 1\n1 2 3\n1 3 3\n'''\n\n# print the solution\nprint(solution(tc))", "solution('''\n5\n5 2 3\n5 5 5\n5 1 1\n5 5 1\n5 4 3\n''') == '''\n3\n3\n3\n3\n1\n'''", "solution('''\n1\n1 1 1\n''') == '''\n0\n'''\nassert solution('''\n1\n1 2 3\n''') == '''\n2\n'''\nassert solution('''\n1\n1 2 1\n''') == '''\n0\n'''\nassert solution('''\n1\n1 1 2\n''') == '''\n1\n'''\nassert solution('''\n1\n1 2 2\n''') == '''\n1\n'''\nassert solution('''\n1\n1 2 2\n''') == '''\n1\n'''\nassert solution('''\n1\n2 3 4\n''') == '''\n1\n'''\nassert solution('''\n1\n3 3 3\n''') == '''\n1\n'''\nassert solution('''\n1\n4 5 6\n''') == '''\n1\n'''\nassert solution('''\n1\n1 2 2\n''') == '''\n1\n'''\nassert solution('''\n1\n1 2 2\n''') == '''\n1\n'''\nassert solution('''\n1\n2 3 4\n''') == '''\n1\n'''\nassert solution('''\n1\n3 3 3\n''') == '''\n1\n'''\nassert solution", "solution('''3\n3 4 5\n1 2 3\n2 3 4''') == '''0\n1\n1'''", "(solution('1\\n1 1 1') == '0')\nassert (solution('3\\n1 1 1\\n2 3 2\\n3 2 3') == '0\\n1\\n1')\nassert (solution('4\\n1 1 1\\n2 3 2\\n3 2 3\\n4 4 4') == '0\\n1\\n1\\n2')\nassert (solution('5\\n1 1 1\\n2 3 2\\n3 2 3\\n4 4 4\\n5 5 5') == '0\\n1\\n1\\n2\\n3')\n\nimport pytest\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        # stress testing\n        # launch this solution with parameter `-s` when need to debug\n        while True:\n            import random\n            import string\n            numbers = [\n                random.randint(1, 1000000000)\n                for i in range(1, 4)\n            ]\n            stdin = '{n}\\n{numbers}'.format(\n                n=1,\n                numbers=' '.join(map(str, numbers))\n            )\n            expected = solution(stdin)\n            print(stdin)\n            print(expected)\n            actual = pytest", "solution(str(test)) == str(result)", "solution('''1\n1 1 1''') == '''0'''\nassert solution('''2\n1 1 1\n1 1 0''') == '''0\n1'''\nassert solution('''3\n1 1 1\n1 1 0\n0 1 1''') == '''0\n1\n1'''\nassert solution('''1\n2 3 4''') == '''2'''\nassert solution('''1\n10 10 10''') == '''10'''\nassert solution('''1\n10 11 12''') == '''1'''\nassert solution('''1\n400 400 400''') == '''400'''\nassert solution('''1\n1 1 10''') == '''1'''\nassert solution('''1\n5 1 10''') == '''1'''\nassert solution('''1\n5 1 5''') == '''0'''\nassert solution('''1\n5 5 5''') == '''0'''\nassert solution('''1\n7 4 5''') == '''1'''\nassert solution('''1\n9 4 5''') == '''0'''\nassert solution('''1\n3 4 5''') == '''1'''\nassert solution('''1\n2 3 5''') == '''1''", "solution(\"\"\"3\n1 2 3\n2 3 3\n3 3 4\"\"\") == \"\"\"0\n1\n2\"\"\", \"case #1\"\nassert solution(\"\"\"1\n1000000000 1000000000 1000000000\"\"\") == \"\"\"4000000000\"\"\", \"case #2\"\n\n# test speed\nimport timeit\nassert timeit.timeit(lambda: solution(\"\"\"1\n1000000000 1000000000 1000000000\"\"\"), number=1) < 1.0, \"time\"", "solution('''\n2\n1 2 3\n2 1 3\n''') == '''\n2\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 1 1\n1 2 1\n2 1 1\n2 2 1\n''') == '''\n0\n0\n0\n1\n'''", "solution('''1\n1 2 3''') == '1'\nassert solution('''3\n3 3 3\n4 3 3\n4 4 4''') == '2\\n2\\n0'\nassert solution('''3\n3 4 5\n7 7 7\n12 10 10''') == '1\\n0\\n2'\nassert solution('''5\n9 12 12\n9 9 9\n10 10 10\n2 2 2\n2 2 1''') == '0\\n0\\n0\\n0\\n1'\n\n# get input and run solution\nt = int(input())\nfor i in range(t):\n    a, b, c = [int(x) for x in input().split()]\n    print(solution(f'{a} {b} {c}'))", "solution('''\n1\n1 1 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 2\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 1\n''') == '''\n1\n'''\n\n# submit the solution to codeforces\nfrom subprocess import Popen, PIPE\nfrom os import remove\nfrom sys import argv\nfrom pathlib import Path\nfrom tempfile import NamedTemporaryFile\n\ntask_name = Path(argv[0]).stem\ntest_name = Path(argv[1]).stem\nout_dir = Path('.').absolute() / 'out'\n\nPath(out_dir).mkdir(parents=True, exist_ok=True)\n\n# compile solution\ncxx_file = NamedTemporaryFile(suffix='.cpp', delete=False)\nprint('''#include <bits/stdc++.h>\n#define endl '\\\\n'\nusing namespace std;\n\n{}\n\nint main() {{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    #ifdef", "(solution('''\n3\n1 2 3\n4 1 2\n4 5 1\n''') == '''\n0\n2\n2\n''')\n\n# upload to judge system\ndef upload(submission_id: int, test_set_number: int, solution: str, token: str) -> str:\n    url = \"https://dmoj.ca/api/problem/submit\"\n    submission_info = {\n        'submission_id': submission_id,\n        'test_set_number': test_set_number,\n        'solution': solution,\n        'token': token\n    }\n    response = requests.post(url, data=submission_info)\n    return response.text\n\n# get a token\ndef get_token(username: str, password: str) -> str:\n    url = \"https://dmoj.ca/api/user/token\"\n    login_info = {\n        'username': username,\n        'password': password\n    }\n    response = requests.post(url, data=login_info)\n    return response.text\n\n# get solution id\ndef get_solution_id(problem_code: str, token: str) -> int:\n    url = f\"https://dmoj.ca/api/problem/solutions", "solution('''3\n1 1 1\n1 1 0\n0 0 1''') == '''0\n1\n2'''", "solution('''\n2\n1 2 3\n2 3 4\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n2 2 2\n3 3 3\n3 2 1\n''') == '''\n0\n0\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 2 3\n4 2 1\n''') == '''\n1\n2\n'''", "solution('''\n1\n1 2 3\n''') == '0'\nassert solution('''\n1\n2 2 2\n''') == '2'\nassert solution('''\n2\n1 1 1\n3 3 3\n''') == '1\\n0'", "\"6\\n7\\n8\\n9\\n10\\n11\\n12\\n\" == solution(\"\"\"\n7\n1 2 3\n2 2 3\n3 2 3\n3 2 2\n10 1 5\n10 2 1\n10 2 5\n\"\"\")", "solution(stdin=\"\"\"\n2\n1 3 3\n5 1 1\n\"\"\") == \"\"\"\n2\n3\n\"\"\"", "solution('''\n3\n10 20 30\n1 0 0\n1 1 1\n''') == '''\n30\n1\n2\n'''", "solution('''\n2\n2 3 3\n10 0 5\n''') == '''\n1\n5\n'''\n\n# check the performance of solution\nfrom utils import evaluate\nevaluate(solution, __file__, [\n    ('''\n100\n1000000000 1000000000 1000000000\n''', '''\n1000000000\n'''),\n    ('''\n100\n1 1000000000 1000000000\n''', '''\n999999999\n'''),\n    ('''\n100\n1 1000000000 1000000000\n''', '''\n999999999\n'''),\n    ('''\n100\n1000000000 1000000000 1000000000\n''', '''\n1000000000\n'''),\n    ('''\n100\n1000000000 1000000000 1000000000\n''', '''\n1000000000\n'''),\n    ('''\n100\n1000000000 1000000000 1000000000\n''', '''\n1000000000\n'''),\n    ('''\n100\n1000000000 1000000000 1000000000\n''', '''\n1000000000\n'''),\n    ('''\n100\n1000000000 1000000000 1000000000\n''', '''\n1000000000\n'''),\n    ('''\n100\n1000000000 1000000000 1000000000\n''', '''\n1000000000\n'''),\n    ('''\n100\n1", "solution(\"\"\"5\n7 3 5\n1 1 1\n7 3 5\n1 2 3\n7 3 5\n2 3 4\n7 3 5\n4 5 6\n7 3 5\n1000000000 1000000000 1000000000\"\"\") == \"\"\"0\n0\n2\n2\n999999999\"\"\"", "solution('''2\n1 2 3\n10 10 10''') == '''2\n0'''\n\n# open test file\nwith open('test1.txt', 'r') as f:\n    print(solution(f.read()))", "solution(\"\"\"\n5\n1 2 3\n2 3 4\n4 2 3\n3 2 1\n1 2 1\n\"\"\") == \"\"\"\n2\n2\n1\n1\n1\n\"\"\"", "solution('''\n3\n1 2 3\n2 3 3\n3 3 3\n''') == '''\n1\n1\n0\n'''\n\n# test for large input\nfrom random import randint\nstdin = f'{randint(1, 1000)}\\n'\nfor i in range(randint(1, 1000)):\n    stdin += f'{randint(1, 10**9)} {randint(1, 10**9)} {randint(1, 10**9)}\\n'\n\ndef slow_solution(stdin: str) -> str:\n    # a naive, slow solution\n    stdin = stdin.split('\\n')\n    t = int(stdin[0])\n    output = []\n    for i in range(t):\n        a, b, c = [int(x) for x in stdin[i+1].split()]\n        songs = [1] * a + [2] * b + [3] * c\n        best = sum(songs)\n        for mask in range(2**len(songs)):\n            concert1 = [songs[x] for x in range(len(songs)) if (mask >> x) & 1]\n            concert2 = [songs[x] for x in range(len(songs", "solution(test_testcases[0]) == test_expected_outputs[0]\nassert solution(test_testcases[1]) == test_expected_outputs[1]\nassert solution(test_testcases[2]) == test_expected_outputs[2]\nassert solution(test_testcases[3]) == test_expected_outputs[3]\nassert solution(test_testcases[4]) == test_expected_outputs[4]\nassert solution(test_testcases[5]) == test_expected_outputs[5]\nassert solution(test_testcases[6]) == test_expected_outputs[6]\nassert solution(test_testcases[7]) == test_expected_outputs[7]\nassert solution(test_testcases[8]) == test_expected_outputs[8]\nassert solution(test_testcases[9]) == test_expected_outputs[9]\nassert solution(test_testcases[10]) == test_expected_outputs[10]\nassert solution(test_testcases[11]) == test_expected_outputs[11]\nassert solution(test_testcases[12]) == test_expected_outputs[12]\nassert solution(test_testcases[13]) == test_expected_outputs[13]\nassert solution(test_testcases", "solution('''2\n1 2 3\n1 2 2''') == '''1\n0'''\n\n# check the correctness of solution\nassert solution('''1\n1 1 1''') == '''0'''", "solution('''\n3\n1 1 1\n1 2 1\n2 3 1\n''') == '''\n0\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 2 1\n3 2 1\n3 2 1\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 1\n''') == '''\n0\n'''", "solution('''\n2\n1 2 3\n2 3 4\n''') == '''\n2\n1\n'''\n\n# check the speed of solution\nimport timeit\n\ndef test():\n    for i in range(100):\n        solution('''\n2\n1 2 3\n2 3 4\n''')\n\nprint(timeit.timeit(test, number=100))", "solution(\"\"\"3\n3 1 1\n3 1 0\n3 0 1\"\"\") == \"\"\"2\n1\n1\"\"\", \"WA\"\n\n# submit main\ndef main():\n    t = int(input())\n    for i in range(1, t + 1):\n        a, b, c = [int(s) for s in input().split(\" \")]\n        ans = solution(a, b, c)\n        print(\"Case #{}: {}\".format(i, ans))\n\nif __name__ == \"__main__\":\n    main()", "solution('''\n2\n1 1 1\n4 3 4\n''') == '''\n0\n4\n'''\n\nif __name__ == '__main__':\n    fin = open('input.txt', 'r')\n    fout = open('output.txt', 'w')\n    fout.write(solution(fin.read()))\n    fin.close()\n    fout.close()", "solution('''3\n2 3 3\n1 3 4\n3 3 3''') == '''0\n1\n0'''\n\n# get input for the solution\n#str_input = sys.stdin.read()\nstr_input = '''3\n2 3 3\n1 3 4\n3 3 3'''\n\n# print solution result\nprint(solution(str_input))", "solution('''\n3\n2 0 1\n1 1 2\n2 3 1\n''') == '''\n1\n0\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 1 1\n1 2 1\n1 2 3\n''') == '''\n0\n0\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 2 2\n2 2 2\n''') == '''\n0\n0\n'''", "solution('''\n4\n1 1 1\n1 2 2\n4 4 4\n1 1 2\n''') == '''\n0\n0\n0\n1\n'''\nassert solution('''\n3\n10 11 12\n100 100 99\n100 99 99\n''') == '''\n1\n1\n0\n'''\nassert solution('''\n5\n10 10 10\n10 100 1\n101 100 99\n1 0 1\n1 1 1\n''') == '''\n0\n89\n1\n2\n0\n'''\nassert solution('''\n4\n10 10 10\n9 10 11\n11 9 10\n11 10 9\n''') == '''\n0\n1\n1\n1\n'''\nassert solution('''\n3\n1000000000 1000000000 1000000000\n999999999 999999999 999999999\n1000000000 999999999 999999999\n''') == '''\n0\n1\n1\n'''\nassert solution('''\n2\n1000000000 1000000000 1000000000\n1000000000 1000000000 999999999\n''') == '''\n0\n1\n'''\nassert solution('''\n2\n1000000000 1000000000 999999999\n1000000000 1000000000 1000000000\n''') == '''\n1\n0\n'''\nassert solution('''\n4\n100000000", "solution('''\n\n''') == '''\n\n'''", "solution('''1\n3 3 3''') == '''0'''\nassert solution('''1\n1 1 1''') == '''1'''\nassert solution('''1\n1 2 3''') == '''0'''\nassert solution('''1\n7 7 7''') == '''7'''\nassert solution('''1\n10 0 0''') == '''10'''\nassert solution('''1\n0 10 0''') == '''0'''\nassert solution('''1\n0 0 10''') == '''0'''\nassert solution('''1\n5 4 3''') == '''2'''\nassert solution('''1\n7 8 9''') == '''7'''\nassert solution('''1\n1 0 1''') == '''0'''\nassert solution('''1\n0 0 0''') == '''0'''\nassert solution('''1\n1 2 3''') == '''0'''\nassert solution('''1\n3 1 2''') == '''0'''\nassert solution('''1\n2 3 1''') == '''0'''\nassert solution('''1\n10 8 6''') == '''8'''\nassert solution('''1\n1 1 1''') == '''1", "solution('''\n1\n4 5 6\n''') == '''\n1\n'''\nassert solution('''\n2\n1 1 1\n2 2 2\n''') == '''\n0\n0\n'''\nassert solution('''\n1\n3 2 1\n''') == '''\n1\n'''\nassert solution('''\n3\n1 1 2\n3 3 1\n2 2 2\n''') == '''\n1\n0\n1\n'''", "(\n    solution('''2\n2 2 2\n1 2 3''') == '''0\n1'''\n)", "solution('''\n1\n1 2 3\n''') == '''\n1\n'''\n\nassert solution('''\n2\n1 2 3\n1 1 1\n''') == '''\n1\n0\n'''", "solution('''\n2\n1 2 3\n1 1 1\n''') == '''\n1\n0\n'''\n# print(solution('''\n# 2\n# 1 2 3\n# 1 1 1\n# '''))\n\n# //todo please read problem statment again, this is wrong solution\n# def solution(stdin):\n#     i = 1\n#     for _ in range(int(stdin.readline())):\n#         a, b, c = [int(i) for i in stdin.readline().split()]\n#         print(f'Case #{i}: {a + b * 2 + c * 3}')\n#         i += 1\n#\n# solution(sys.stdin)\n\n# submit the solution\n# t = int(input())\n# for i in range(1, t + 1):\n#     a, b, c = [int(s) for s in input().split(\" \")]\n#     print(\"Case #{}: {}\".format(i, a + b * 2 + c * 3))\n\n# from sys import stdin\n# from itertools import accumulate\n#\n# def solution(stdin):\n#     i = 1\n#     for _ in range(int(stdin.readline())):\n#         a, b,", "solution('''1\n1 2 3''') == '''0'''\nassert solution('''2\n2 3 4\n3 4 5''') == '''1\n1'''\nassert solution('''2\n2 2 2\n2 2 2''') == '''1\n0'''\n\n# submit the code to the judge system\nimport subprocess\nprint(subprocess.run(['java', '-jar', '-Xmx1024m', 'Weekly/WeeklyContest_Weekly_Contest_109.jar'], stdout=subprocess.PIPE).stdout.decode())\n\n# push the code to github\nsubprocess.run(['git', 'add', '.'])\nsubprocess.run(['git', 'commit', '-m', '\"submit the code\"'])\nsubprocess.run(['git', 'push', '-u', 'origin', 'master'])", "solution(case) == answer\n\n'''\ndef solution(inp: str) -> str:\n    t = int(inp.split()[0])\n    a, b, c = [int(n) for n in inp.split()[1:]]\n    # a, b, c = [int(n) for n in stdin.readline().split()]\n    # print(t, a, b, c)\n    ans = ''\n    for _ in range(t):\n        ans += f'{min(abs(2*b + 3*c - a), abs(2*a + 3*c - b), abs(2*a + 3*b - c))}\\n'\n    return ans\n'''", "solution(\"1\\n1 2 3\") == \"0\"\nassert solution(\"4\\n2 3 4\\n1 2 5\\n1 2 7\\n4 8 10\") == \"0\\n0\\n0\\n1\"\nassert solution(\"1\\n1000000000 1000000000 1000000000\") == \"0\"\nassert solution(\"2\\n1 2 1000000000\\n1000000000 2 1\") == \"0\\n0\"\nassert solution(\"1\\n1000000000 1 1\") == \"1999999999\"\nassert solution(\"1\\n0 0 0\") == \"0\"\n\n# test performance\nimport random\nimport time\n\ndef test_perf():\n    with open(\"tests/perf_test.txt\", \"w\") as out:\n        t = random.randint(1, 1000)\n        out.write(f\"{t}\\n\")\n        for _ in range(t):\n            out.write(f\"{random.randint(1, 10**9)} {random.randint(1, 10**9)} {random.randint(1, 10**9)}\\n\")\n    start = time.time()\n    with open(\"tests/perf_test.txt\") as inp:\n        solution(inp.read())\n    print(f\"solution took {time.time"], "finish_reason": ["stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length"], "sum_logprob": [-29.499288693420002, -79.00189097791592, -13.858689970999999, -9.64428194, -66.50980446363903, -35.36474117985, -120.427632425662, -35.75940416837999, -15.615231864460002, -34.918935233499994, -41.781832192459994, -60.26261492489687, -20.9562420453, -161.288954139491, -15.109034834000001, -114.6700038018167, -64.23905733369, -31.199219687000003, -102.89094525466005, -125.86423199233869, -102.77102927934004, -16.6969688899, -51.89571337140604, -25.61028164706001, -58.90804158084002, -25.5386608254, -23.213135824599995, -69.51999854032401, -52.747171417370005, -37.16126225380001, -34.56626111910001, -106.04025575524899, -26.965501743311833, -22.851452193129997, -38.03094214178502, -34.58047338152001, -50.28541799594999, -31.997311085309995, -52.447782688850005, -49.26530942383901, -140.30797306247496, -7.8657714719000005, -100.34097167563196, -47.781101468261014, -18.677300287, -15.27968702037, -141.24554503940507, -109.59693109156, -86.68839543110006, -141.70452100818306], "mean_logprob": [-0.6860299696144186, -0.42247000522949735, -0.4076085285588235, -1.0715868822222223, -0.22169934821213, -0.78588313733, -0.6961134822292601, -0.5501446795135384, -0.6789231245417392, -0.459459674125, -0.908300699836087, -0.20087538308298966, -0.69854140151, -0.5376298471316366, -1.2590862361666666, -0.3822333460060557, -0.6060288427706604, -0.4051846712597403, -0.5502189585810695, -0.4195474399744623, -0.3425700975978, -0.5565656296633333, -0.3733504559093957, -0.40651240709619046, -0.981800693014, -0.9120950294785715, -0.6827392889588235, -0.23173332846774666, -0.8114949448826154, -0.6519519693649123, -0.8038665376534884, -0.35346751918416336, -0.08988500581103934, -0.44806769006137254, -0.3521383531646759, -0.3885446447361798, -0.3959481731964567, -0.336813800898, -0.5893009290882022, -0.4321518370512193, -0.4676932435415833, -0.49161071699375, -0.33446990558544, -0.43835872906661466, -0.6670464388214286, -0.29384013500711537, -0.47081848346468336, -0.5243872301031579, -0.50993173783, -0.47234840336061]}
{"prompt": "'''\nBecause the railway system in Gensokyo is often congested, as an enthusiastic engineer, Kawasiro Nitori plans to construct more railway to ease the congestion.\n\nThere are n stations numbered from 1 to n and m two-way railways in Gensokyo. Every two-way railway connects two different stations and has a positive integer length d. No two two-way railways connect the same two stations. Besides, it is possible to travel from any station to any other using those railways. Among these n stations, station 1 is the main station. You can get to any station from any other station using only two-way railways.\n\nBecause of the technological limitation, Nitori can only construct one-way railways, whose length can be arbitrary positive integer. Constructing a one-way railway from station u will costs w_u units of resources, no matter where the railway ends. To ease the congestion, Nitori plans that after construction there are at least two shortest paths from station 1 to any other station, and these two shortest paths do not pass the same station except station 1 and the terminal. Besides, Nitori also does not want to change the distance of the shortest path from station 1 to any other station.\n\nDue to various reasons, sometimes the cost of building a new railway will increase uncontrollably. There will be a total of q occurrences of this kind of incident, and the i-th event will add additional amount of x_i to the cost of building a new railway from the station k_i.\n\nTo save resources, before all incidents and after each incident, Nitori wants you to help her calculate the minimal cost of railway construction.\n\nInput\n\nThe first line contains three integers n, m, and q (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 3 \u22c5 10^5, 0 \u2264 q \u2264 2\u22c510^5).\n\nThe second line contains n integers w_1,w_2,\u2026,w_n (1 \u2264 w_i \u2264 10^9).\n\nEach of the next m lines contains three integers u, v, d (1 \u2264 u,v \u2264 n, u \u2260 v, 1 \u2264 d \u2264 10^9), denoting a two-way railway connecting station u and station v, with length d.\n\nThe i-th of the next q lines contains two integers k_i,x_i (1 \u2264 k_i \u2264 n, 1 \u2264 x_i \u2264 4 \u00d7 10^8).\n\nOutput\n\nPrint q+1 lines, and the i-th of these lines contains one integer, denoting the minimal cost of railway construction after the i-1-th incident (especially, the 0-th incident means no incident occurred).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n4 5 3\n2 1 3 5\n1 2 1\n1 3 2\n2 4 3\n2 3 4\n3 4 5\n1 4\n1 2\n1 1\n''') == '''\n4\n4\n4\n4\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3 3\n2 1 3\n1 2 1\n1 3 2\n2 3 1\n1 1\n1 1\n1 1\n''') == '''\n5\n5\n5\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1 1\n1 2\n1 2 1\n1 1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 1 2\n1 2 1\n1 2 1\n1 1\n1 1\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1 1\n1 2\n1 2 1\n1 1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 1\n1\n1 1 1\n1 1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution", "solution('''\n3 3 3\n2 3 5\n1 2 4\n2 3 4\n3 1 2\n1 4\n2 2\n3 3\n''') == '''\n7\n9\n10\n'''", "solution('''\n2 3 5\n10 10\n1 2 1\n2 1 1\n1 2 3\n2 1 3\n1 1\n2 1\n1 2\n2 2\n1 3\n''') == '''\n10\n10\n10\n10\n10\n10\n'''\nassert solution('''\n2 2 0\n10 10\n1 2 3\n2 1 3\n''') == '''\n10\n'''\nassert solution('''\n3 2 0\n1 2 3\n1 2 1\n2 3 1\n''') == '''\n1\n'''\nassert solution('''\n1 1 0\n100\n1 1 1\n''') == '''\n100\n'''\nassert solution('''\n2 3 5\n10 10\n1 2 1\n2 1 1\n1 2 3\n2 1 3\n1 1\n2 1\n1 2\n2 2\n1 3\n''') == '''\n10\n10\n10\n10\n10\n10\n'''\nassert solution('''\n3 5 3\n10 20 30\n1 2 1\n2 3 1\n1 3 1\n1 2 1\n2 3 1\n2 1\n1 3\n3 2\n''') == '''\n10\n30\n60\n'''\nassert solution('''\n3 5 3\n10 20 30\n1 2 1\n2 3 1", "solution(\"\"\"\n6 7 2\n2 3 2 1 1 1\n1 2 3\n2 3 2\n3 4 4\n1 5 6\n5 6 1\n6 1 1\n5 6 2\n3 1\n\"\"\") == \"\"\"\n25\n49\n\"\"\"", "solution('''\n4 5 2\n10 10 10 10\n1 2 10\n2 3 10\n3 4 10\n4 2 10\n2 1 10\n1 2\n4 2\n''') == '''\n30\n70\n'''\n\nassert solution('''\n3 3 2\n1 1 1\n1 2 1\n2 3 1\n1 1\n2 2\n''') == '''\n1\n1\n'''\n\nassert solution('''\n5 5 1\n1 1 1 1 1\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 1 1\n5 1\n''') == '''\n1\n2\n'''\n\nassert solution('''\n1 0 0\n10\n''') == '''\n10\n'''\n\nassert solution('''\n3 1 1\n1 1 1\n1 2 1\n1 1\n''') == '''\n1\n2\n'''\n\nassert solution('''\n5 5 3\n2 3 1 1 1\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 1 1\n2 2\n4 2\n3 2\n''') == '''\n3\n4\n4\n'''\n\nassert solution('''\n10 5 2\n1 2 2 1 1 1 2 2 2 2\n1 2 1\n1 3 1\n1 4", "solution(\"\"\"\n5 7 2\n1 2 1 1 2\n1 2 1\n1 3 2\n1 4 2\n1 5 2\n2 3 2\n2 4 2\n2 5 2\n2 1\n4 3\n\"\"\") == \"\"\"\n3\n3\n\"\"\", \"Example 1\"\n\n# another test case\nassert solution(\"\"\"\n3 2 2\n1 2 3\n1 2 1\n2 3 3\n2 1\n2 3\n\"\"\") == \"\"\"\n2\n2\n\"\"\", \"Example 2\"\n\n# another test case\nassert solution(\"\"\"\n1 1 0\n1\n1 1 1\n\"\"\") == \"\"\"\n1\n\"\"\", \"Example 3\"\n\n# another test case\nassert solution(\"\"\"\n7 8 2\n1 2 4 1 1 1 1\n1 2 2\n1 3 2\n1 4 2\n1 5 2\n1 6 2\n1 7 2\n2 3 2\n2 4 2\n2 5 2\n2 6 2\n2 7 2\n3 4 2\n3 5 2\n3 6 2\n3 7 2\n4 5 2\n4 6 2\n4 7 2\n5 6 2\n5 7 2\n6 7 2\n2 3\n2 3\n\"\"\") == \"\"\"\n9\n9\n\"\"\", \"Example 4\"\n\n# another test case\nassert solution(\"\"\"\n20 15 4\n1 2 3 1 2 2 1 1", "solution('''\nn\nn m q\n''') == '''\n\n'''\n\n# stress testing the solution\nfrom random import randint, uniform\nfrom typing import List, Tuple, Callable\nfrom datetime import datetime\nfrom functools import reduce\nfrom collections import deque\ndef stress_solution(solution: Callable[[str], str], stdin: str,\n                    num_of_tests: int, in_gen: Callable[[int], str],\n                    out_gen: Callable[[int], str]) -> bool:\n    \"\"\"tests the solution against the input generator and output generator\n    with the random test cases.\n    \"\"\"\n    print(f'{datetime.now()} - Stress testing...')\n    passed = True\n    for i in range(num_of_tests):\n        print(f'{datetime.now()} - Stress testing case #{i}')\n        try:\n            test_in = in_gen(i)\n            assert solution(test_in) == out_gen(i)\n        except AssertionError:\n            print(f'{datetime.now()} - Failed at test case #{i}')\n            print(f'{datetime.now()} - input = \\n{test_in}')\n            passed = False\n", "solution('''3 1 3\n2 3 3\n1 2 3\n2\n1 1\n2 2\n3 3''') == '''10\n11\n13'''\n\n# submit the solution to codeforces\n# solution_stdin = open('input.txt', 'r')\n# solution_stdout = open('output.txt', 'w')\n# solution_stdout.write(solution(solution_stdin.read()))\n# solution_stdin.close()\n# solution_stdout.close()", "solution('''\n3 2 4\n1 2 3\n1 2 1\n2 3 1\n1 2\n2 3\n3 1\n2 1\n''') == '''\n6\n5\n5\n5\n'''\n\n# ====== #\n# Import #\n# ====== #\nimport sys\nfrom collections import defaultdict, deque\nfrom itertools import combinations, permutations\nfrom functools import reduce\nfrom copy import deepcopy\nfrom copy import copy\nfrom collections import Counter\nfrom typing import List, Tuple, Dict, Set, Any, Union\nfrom tqdm import tqdm\n\n# ===== #\n# Main  #\n# ===== #\ndef main():\n    stdin = sys.stdin.readlines()\n    stdin = ''.join(stdin)\n    solution(stdin)\n\nif __name__ == '__main__':\n    main()", "solution('''\n5 5 3\n2 3 1 2 3\n1 2 1\n1 3 4\n2 3 2\n3 4 1\n4 5 2\n1 2\n2 3\n2 3\n''') == '''\n11\n19\n27\n'''\n\n# check the correctness of solution\nassert solution('''\n7 6 2\n1 1 1 1 1 1 1\n1 2 2\n1 3 1\n2 4 2\n3 4 2\n4 5 4\n4 6 2\n6 7 2\n2 3\n1 4\n''') == '''\n6\n8\n'''", "solution(\"\") == \"\"", "solution(test_data) == test_output, \"test_data: {0}, test_output: {1}\".format(test_data, test_output)\n\nif __name__ == \"__main__\":\n    n, m, q = tuple(map(int, input().split()))\n    w = tuple(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        u, v, d = tuple(map(int, input().split()))\n        edges.append((u, v, d))\n    ks = []\n    xs = []\n    for _ in range(q):\n        k, x = tuple(map(int, input().split()))\n        ks.append(k)\n        xs.append(x)\n    print(solution(test_data))", "solution('''\n4 2 1\n1 2 3 4\n1 2 1\n2 3 3\n2 3\n''') == '''\n3\n3\n'''\n\n# print if local\nif 'ONLINE_JUDGE' not in os.environ:\n    with open('input.txt', 'r') as f:\n        print(solution(f.read()))", "solution('''\n3 3 2\n1 1 1\n1 2 1\n2 3 1\n2 1\n3 1\n''') == '''\n1\n2\n'''\n\n# include the local testing framework, doctest\nimport doctest\n\ndoctest.testmod()", "solution(\"\"\"\n5 5 4\n1 2 3 4 5\n1 2 1\n1 3 2\n1 4 1\n1 5 4\n3 4 1\n3 5 2\n4 5 3\n2 3\n2 1\n4 2\n4 1\n\"\"\") == \"\"\"\n15\n15\n16\n17\n\"\"\", \"Sample 1\"\nassert solution(\"\"\"\n1 0 2\n1\n1 1\n1 2\n\"\"\") == \"\"\"\n1\n1\n\"\"\", \"Sample 2\"\nassert solution(\"\"\"\n2 1 1\n1 2\n1 2 1\n1 1\n\"\"\") == \"\"\"\n2\n2\n\"\"\", \"Sample 3\"\nassert solution(\"\"\"\n10 11 5\n1 1 1 1 1 1 1 1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n1 7 1\n1 8 1\n1 9 1\n1 10 1\n2 3 1\n2 4 1\n2 5 1\n2 6 1\n2 7 1\n2 8 1\n2 9 1\n2 10 1\n1 1\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"\"\"\n20\n20\n20\n20\n20\n\"\"\", \"Sample 4\"\nassert solution(\"\"\"\n6 7 5\n6 3 1 2 3 4 5\n1 2 2\n1 3 2\n1 4 2\n1 5 2\n", "solution('''\n''') == '''\n'''\n\n# check the performance of solution\nassert solution('''\n''') == '''\n'''", "solution('''5 5 2\n1 2 1 1 1\n1 2 4\n1 3 4\n2 3 1\n2 4 3\n3 4 3\n2 1\n3 2''') == '''4\n4\n4'''\n\n# get input, append dummy input and run the solution\nstdin = sys.stdin.read()\nstdin += '''\n\n'''\nprint(solution(stdin))", "solution(str(\n    '''4 3 3\n    5 7 9 2\n    1 2 4\n    2 3 3\n    3 4 4\n    2 4\n    1 1\n    4 4\n    '''\n)) == str(\n    '''7\n    8\n    9\n    13\n    '''\n)\n\n# check the correctness of solution\nassert solution(str(\n    '''5 3 4\n    10 5 7 8 8\n    1 2 5\n    2 3 5\n    3 4 4\n    1 6\n    4 9\n    5 6\n    3 9\n    '''\n)) == str(\n    '''10\n    13\n    18\n    20\n    22\n    '''\n)\n\n# no test cases are provided", "solution(\"\"\"\n5 6 2\n5 5 5 5 5\n1 2 1\n2 3 2\n3 4 2\n4 5 2\n1 5 2\n1 4 2\n4 3\n4 4\n\"\"\") == \"\"\"\n13\n13\n13\n15\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n5 8 2\n5 5 5 5 5\n1 2 1\n2 3 2\n3 4 2\n4 5 2\n1 5 2\n1 4 2\n1 3 2\n2 4 2\n4 3\n4 4\n\"\"\") == \"\"\"\n13\n13\n13\n17\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"\n3 2 1\n1 1 1\n1 2 1\n2 3 1\n2 1\n\"\"\") == \"\"\"\n0\n0\n1\n\"\"\", \"Example 3\"\n\nassert solution(\"\"\"\n6 9 0\n1 1 1 1 1 1\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n1 5 1\n1 6 1\n2 6 1\n3 6 1\n\"\"\") == \"\"\"\n0\n\"\"\", \"Example 4\"\n\nassert solution(\"\"\"\n1 1 0\n1\n1 1 1\n\"\"\") == \"\"\"\n0\n\"\"\", \"Example 5\"\n\nassert solution(\"\"\"\n5 9 4\n5 5 5 5 5\n1 2 1\n2 3", "solution(\"\"\"\n5 4 1\n1 2 3 4 5\n1 2 2\n1 3 1\n2 3 2\n3 4 2\n3 5\n3 5\n\"\"\") == \"\"\"\n0\n8\n\"\"\"", "solution('''\n3 4 4\n1 1 1\n1 2 1\n2 3 1\n3 1 1\n1 2\n2 3\n3 4\n2 1\n''') == '''\n0\n1\n1\n1\n1\n'''\n\nassert solution('''\n6 7 3\n1 2 1 3 4 5\n1 2 4\n1 3 3\n2 4 3\n2 5 1\n3 6 1\n4 6 2\n5 6 1\n1 4\n1 1\n2 1\n''') == '''\n0\n0\n1\n1\n1\n1\n1\n'''\n\nassert solution('''\n5 3 3\n1 1 1 1 1\n1 2 2\n2 3 2\n3 4 2\n1 2\n3 4\n5 1\n''') == '''\n0\n0\n0\n1\n1\n1\n'''\n\nassert solution('''\n10 10 10\n1 1 1 1 1 1 1 1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n1 7 1\n1 8 1\n1 9 1\n1 10 1\n1 3\n2 5\n3 7\n4 9\n5 1\n6 3\n7 5\n8 7\n9 9\n10 2\n''') == '''\n0\n0\n0\n0\n0\n0\n0", "solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\n\n# print the solution to stdout\nstdin = open('input.txt', 'r')\nprint(solution(stdin.read()))", "solution('''\n1 1\n1\n1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n2 2\n1 2\n1 2 1\n2 1 1\n1 1\n''') == '''\n1\n2\n'''\n\nassert solution('''\n4 3\n3 1 4\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n3 4 1\n3 1\n4 3\n3 1\n''') == '''\n1\n2\n1\n'''\n\nassert solution('''\n6 5\n1 2 3 4 5 6\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n2 1\n2 2\n3 3\n3 4\n3 5\n''') == '''\n1\n1\n1\n1\n1\n'''\n\nassert solution('''\n5 6\n9 8 7 6 5\n1 2 3\n1 3 2\n1 4 2\n1 5 1\n2 3 1\n2 4 2\n2 5 3\n3 4 2\n3 5 2\n4 5 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '''\n9\n8\n7\n6\n5\n'''\n", "solution(\"\"\"10 12 4\n100000 100000 100000 100000 100000 100000 100000 100000 100000 100000\n1 2 10\n1 3 20\n1 4 30\n1 5 40\n1 6 50\n1 7 60\n1 8 70\n1 9 80\n1 10 90\n2 3 20\n2 4 30\n2 5 40\n2 6 50\n2 7 60\n2 8 70\n2 9 80\n2 10 90\n3 4 30\n3 5 40\n3 6 50\n3 7 60\n3 8 70\n3 9 80\n3 10 90\n4 5 40\n4 6 50\n4 7 60\n4 8 70\n4 9 80\n4 10 90\n5 6 50\n5 7 60\n5 8 70\n5 9 80\n5 10 90\n6 7 60\n6 8 70\n6 9 80\n6 10 90\n7 8 70\n7 9 80\n7 10 90\n8 9 80\n8 10 90\n9 10 90\n3 50000\n5 1000000\n7 5000000\n9 20000000\n\"\"\") == \"\"\"1060\n1060\n1060\n1060\n1060\n\"\"\", \"Example 1\"\nassert solution(\"\"\"7 7 0\n1000000 1000000 1000000 1000000 1000000 1000000 1000000\n1 2 3\n1 3 1\n2 3 4\n2 4 10\n3 4 8\n3 5 7\n4 5 5", "solution(\n'''\n3 4 1\n1 5 6\n1 2 10\n1 3 6\n2 3 4\n3 1\n'''\n) == '''\n11\n12\n'''", "solution(r'''\n2 1 2\n2 3\n1 2 1\n2 1\n2 2\n''') == r'''\n1\n3\n'''\n\nassert solution(r'''\n3 2 1\n3 1 1\n1 2 1\n2 3 1\n2 3\n''') == r'''\n1\n3\n'''\n\nassert solution(r'''\n3 3 3\n1 1 1\n1 2 1\n2 3 1\n1 3\n2 3\n3 2\n''') == r'''\n1\n1\n1\n'''\n\nassert solution(r'''\n5 5 2\n1 1 1 1 1\n1 2 3\n2 3 3\n3 4 3\n4 5 3\n5 1\n3 2\n''') == r'''\n2\n2\n'''\n\nassert solution(r'''\n5 5 2\n2 3 3 2 3\n1 2 4\n2 3 1\n3 4 2\n4 5 4\n5 1 1\n1 2\n3 4\n''') == r'''\n7\n7\n'''\n\n# submit the code to the judge system\nimport sys\nif len(sys.argv) >= 2:\n    # input.txt\n    with open(sys.argv[1], 'r') as f:\n        print(solution(f.read()))\n", "solution('''3 2 3\n1 2 3\n1 2 1\n2 3 3\n2 3\n3 3\n2 1''') == '''1\n1\n1'''\n\n# check the performance of solution\n\nprint(solution('''30 10 5\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n1 7 1\n1 8 1\n1 9 1\n1 10 1\n1 11 1\n1 12 1\n1 13 1\n1 14 1\n1 15 1\n1 16 1\n1 17 1\n1 18 1\n1 19 1\n1 20 1\n1 21 1\n1 22 1\n1 23 1\n1 24 1\n1 25 1\n1 26 1\n1 27 1\n1 28 1\n1 29 1\n1 30 1\n30 10\n30 1\n30 1\n30 1\n30 1'''))\n\nprint(solution('''30 10 5\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n1 7 1\n1 8 1\n1 9", "solution(\"3 3 2\\n2 2 2\\n1 2 3\\n2 3 5\\n3 4\\n2 3\") == \"7\\n6\\n\", \"failed test\"\n\n# get the input\ndef get_input():\n    lines = stdin.readlines()\n    lines = [line.strip() for line in lines]\n    return lines\n\n# print the output\ndef print_output(ans: str):\n    lines = ans.split(\"\\n\")\n    for line in lines:\n        print(line)\n\ndef main():\n    ans = solution(stdin)\n    print_output(ans)\n\nif __name__ == \"__main__\":\n    main()", "solution(\"\"\"\n5 5 2\n5 1 2 2\n1 2 2\n1 3 2\n2 4 2\n2 5 2\n4 2\n5 1\n\"\"\") == \"\"\"\n16\n22\n\"\"\"\n\n# check for performance\ndef test_performance():\n    \"\"\"This is an example of a performance test.\"\"\"\n    # Test performance by generating a large random input.\n    from random import randint\n    from time import time\n    from functools import reduce\n\n    start = time()\n    inp = '\\n'.join(\n        str(randint(1, 100000))\n        for _ in range(100000)\n    )\n    solution(inp)\n    assert reduce(lambda x, y: x + y, map(int, inp.split('\\n'))) == 5000050000\n    print(f'Time: {time() - start}')\n\n\n# test_performance()", "solution('''\n5 5 2\n1 2 3 4 5\n1 2 1\n1 3 2\n2 4 3\n3 5 4\n4 5 5\n4 10\n5 20\n''') == '''\n17\n27\n'''\n\n# get the input and run the solution\nstdin = open(get_file_path('input.txt'), 'r')\nprint(solution(stdin.read()))", "solution(example_input) == example_output", "solution('''\n3 2 3\n1 2 3\n1 2 1\n2 3 1\n1 2\n2 3\n3 1\n''') == '''\n5\n5\n8\n'''\nassert solution('''\n5 4 1\n1 3 3 4 2\n1 2 2\n2 3 2\n3 4 2\n1 5 2\n3 1\n''') == '''\n9\n8\n'''\n\nif __name__ == '__main__':\n    n, m, q = map(int, input().split())\n    w = list(map(int, input().split()))\n    u, v, d = [], [], []\n    for _ in range(m):\n        a, b, c = map(int, input().split())\n        u.append(a)\n        v.append(b)\n        d.append(c)\n    k, x = [], []\n    for _ in range(q):\n        a, b = map(int, input().split())\n        k.append(a)\n        x.append(b)\n    maxn = 2*10**5\n    g = [[] for _ in range(maxn)]\n    for i in range(m):\n        g[u[i]].append((v[i], d[i]))\n       ", "solution(EXAMPLE_INPUT) == EXAMPLE_OUTPUT", "solution(\"\"\"\n2 1 1\n1 1\n1 2 1\n2 1\n\"\"\") == \"\"\"\n0\n1\n\"\"\"\nassert solution(\"\"\"\n3 3 1\n1 1 1\n1 2 3\n2 3 3\n3 1\n\"\"\") == \"\"\"\n0\n3\n\"\"\"\nassert solution(\"\"\"\n3 3 1\n1 1 1\n1 2 3\n2 3 3\n2 1\n\"\"\") == \"\"\"\n0\n2\n\"\"\"\nassert solution(\"\"\"\n5 5 1\n1 2 3 4 5\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 1\n\"\"\") == \"\"\"\n0\n8\n\"\"\"\nassert solution(\"\"\"\n7 4 3\n1 2 3 4 5 6 7\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n1 4\n1 2\n1 7\n\"\"\") == \"\"\"\n0\n4\n4\n4\n\"\"\"\nassert solution(\"\"\"\n100000 1 1\n1 1\n1 1 1\n2 2\n\"\"\") == \"\"\"\n0\n1\n\"\"\"\nassert solution(\"\"\"\n100000 1 1\n1 2\n1 1 1\n2 1\n\"\"\") == \"\"\"\n0\n1\n\"\"\"\nassert solution(\"\"\"\n100000 1 1\n1 2\n1 1 1\n2 1\n\"\"\") == \"\"\"\n0\n1\n\"\"\"\nassert solution(\"\"\"\n100", "solution('''\n4 3 3\n4 3 2 1\n1 2 2\n2 3 2\n3 4 2\n1 1\n2 2\n3 1\n''') == '''\n4\n4\n2\n'''\n\n# # check the speed of solution\n# import time\n# import random\n# import string\n# random.seed(0)\n# n = 2 * 10 ** 5\n# m = 3 * 10 ** 5\n# q = 2 * 10 ** 5\n# w = [random.randint(1, 10 ** 9) for _ in range(n)]\n# edges = []\n# for i in range(m):\n#     while True:\n#         u = random.randint(1, n)\n#         v = random.randint(1, n)\n#         if u != v:\n#             break\n#     edges.append([u, v, random.randint(1, 10 ** 9)])\n# incidents = []\n# for i in range(q):\n#     incidents.append([random.randint(1, n), random.randint(1, 4 * 10 ** 8)])\n# test_stdin = '\\n'.join([\n#     f'{n} {m} {q}',\n#     ' '.join(map(str, w)),\n#     *", "solution('''\n0 0 0\n''') == '''\n0\n'''\n\nassert solution('''\n3 3 1\n1 2 3\n1 2 1\n2 3 1\n3 1\n''') == '''\n3\n3\n'''\n\nassert solution('''\n3 3 0\n1 2 3\n1 2 1\n2 3 1\n''') == '''\n3\n'''\n\nassert solution('''\n3 3 1\n1 2 3\n1 2 1\n2 3 1\n1 1\n''') == '''\n4\n4\n'''\n\nassert solution('''\n3 3 1\n1 2 3\n1 2 1\n2 3 1\n3 1\n''') == '''\n3\n3\n'''\n\nassert solution('''\n3 3 2\n1 2 3\n1 2 1\n2 3 1\n1 1\n2 2\n''') == '''\n4\n6\n'''\n\nassert solution('''\n3 3 2\n1 2 3\n1 2 1\n2 3 1\n3 1\n2 2\n''') == '''\n3\n5\n'''\n\nassert solution('''\n3 3 2\n1 2 3\n1 2 1\n2 3 1\n3 1\n1 1\n''') == '''\n4\n5\n'''\n\nassert solution", "solution('''\n4 3 1\n2 3 3 3\n1 2 5\n1 3 2\n2 4 3\n2 1\n''') == '''\n7\n10\n'''\n\nassert solution('''\n5 6 0\n1 1 1 1 1\n1 2 3\n1 3 6\n2 4 8\n3 4 7\n2 5 3\n4 5 7\n''') == '''\n9\n'''\n\nassert solution('''\n4 4 2\n1 2 3 4\n1 2 5\n1 3 2\n2 4 3\n3 2\n4 1\n''') == '''\n6\n6\n6\n'''\n\nassert solution('''\n3 2 1\n1 2 3\n1 2 5\n2 3 2\n2 10\n''') == '''\n11\n19\n'''\n\nassert solution('''\n10 10 2\n1 2 2 2 2 2 2 2 2 2\n1 2 4\n1 3 7\n1 4 1\n1 5 7\n1 6 3\n2 7 6\n2 8 5\n3 9 4\n3 10 1\n8 9 6\n9 8 3\n''') == '''\n16\n15\n'''\n\nassert solution('''\n3 2 2\n1 2 1\n1 2 5\n2 3 2\n2 5\n2 3\n''') == '''\n6\n7\n", "solution('''\n3 2 2\n1 1 1\n1 2 2\n2 3 3\n2 3\n3 3\n''') == '''\n3\n3\n'''\n\n# do not modify the below codes\nimport io, sys\ndef _main():\n    stdin = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8')\n    sys.stdout.write(solution(stdin.read().strip()))\n\nif __name__ == '__main__':\n    _main()", "solution('''\nn, m, q = [int(w) for w in input().split()]\nw = [int(w) for w in input().split()]\ne = []\nfor i in range(m):\n    u, v, d = [int(w) for w in input().split()]\n    e.append((u, v, d))\n    e.append((v, u, d))\nk = []\nx = []\nfor i in range(q):\n    kk, xx = [int(w) for w in input().split()]\n    k.append(kk)\n    x.append(xx)\n''') == '''\n'''", "solution(sample1) == sample1_output\nassert solution(sample2) == sample2_output\nassert solution(sample3) == sample3_output\nassert solution(sample4) == sample4_output\nassert solution(sample5) == sample5_output\nassert solution(sample6) == sample6_output\nassert solution(sample7) == sample7_output\nassert solution(sample8) == sample8_output\nassert solution(sample9) == sample9_output\nassert solution(sample10) == sample10_output\nassert solution(sample11) == sample11_output\nassert solution(sample12) == sample12_output\nassert solution(sample13) == sample13_output\nassert solution(sample14) == sample14_output\nassert solution(sample15) == sample15_output\nassert solution(sample16) == sample16_output\nassert solution(sample17) == sample17_output\nassert solution(sample18) == sample18_output\nassert solution(sample19) == sample19_output\nassert solution(sample20) == sample20_output\nassert solution(sample21) == sample21_output\nassert solution(sample22) == sample22_output\nassert solution(sample23) == sample23_output\nassert solution(sample24) == sample24_output\nassert solution(sample25) == sample25_output\nassert", "solution('''6 7 2\n1 1 1 1 1 1\n1 2 3\n1 3 4\n1 4 5\n1 5 6\n2 3 5\n3 4 7\n4 5 6\n3 1\n6 2''') == '''0\n2\n0'''\nassert solution('''6 7 2\n1 1 1 1 1 1\n1 2 3\n1 3 4\n1 4 5\n1 5 6\n2 3 5\n3 4 7\n4 5 6\n3 1\n6 2''') == '''0\n2\n0'''\nassert solution('''2 1 3\n1 1\n1 2 5\n1 2\n1 2\n1 2''') == '''0\n5\n10'''\nassert solution('''2 1 3\n1 1\n1 2 5\n1 2\n1 2\n1 2''') == '''0\n5\n10'''\nassert solution('''6 7 2\n1 1 1 1 1 1\n1 2 3\n1 3 4\n1 4 5\n1 5 6\n2 3 5\n3 4 7\n4 5 6\n3 1\n6 2''') == '''0\n2\n0'''\nassert solution('''2 1 3\n1 1\n1 2 5\n1 2\n1 2\n1 2''') == '''0\n5\n10'''\nassert solution(''", "solution(read('in.txt')) == read('out.txt')", "solution('''\n3 2 2\n1 2 3\n1 2 1\n2 3 2\n1 1\n3 4\n''') == '''\n2\n7\n'''\n\n# another test case\nassert solution('''\n5 5 4\n1 2 3 4 5\n1 2 2\n2 3 1\n3 4 2\n4 5 4\n5 1 1\n3 4\n1 1\n3 1\n2 1\n''') == '''\n2\n2\n2\n2\n'''\n\n# another test case\nassert solution('''\n10 10 1\n1 1 1 1 1 1 1 1 1 1\n1 2 2\n2 3 2\n3 4 2\n4 5 2\n5 6 2\n6 7 2\n7 8 2\n8 9 2\n9 10 2\n10 1 2\n1 2\n''') == '''\n2\n'''\n\n# another test case\nassert solution('''\n50 50 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(stdin='1 1 0\\n100\\n1 1 1') == '100\\n'\nassert solution(stdin='2 2 0\\n1 100\\n1 2 1\\n2 1 1') == '0\\n'\nassert solution(stdin='4 3 2\\n1 2 3 4\\n1 2 2\\n2 3 1\\n3 4 1\\n3 100\\n1 200') == '2\\n1\\n'\nassert solution(stdin='5 6 1\\n1 2 3 4 5\\n1 2 2\\n2 3 1\\n3 4 1\\n4 5 1\\n1 3 1\\n3 5 1\\n3 100') == '3\\n2\\n'\nassert solution(stdin='1 1 1\\n1\\n1 1 1\\n1 100') == '1\\n'\nassert solution(stdin='3 2 1\\n1 2 3\\n1 2 1\\n2 3 1\\n1 100') == '2\\n2\\n'\nassert solution(stdin='7 6 2\\n1 2 3 4 5 6 7\\n1 2 1\\n2 3 1\\n3 4 1\\n4 5 1\\n5 6 1\\n6 7 1\\n5 1\\n7 100') == '4\\n4\\n4\\", "solution(r'''\n3 2 2\n1 2 1\n1 2 2\n2 3 2\n1 1\n2 1\n''') == r'''\n1\n2\n'''\nassert solution(r'''\n5 5 5\n5 6 7 8 9\n1 2 1\n2 3 1\n3 5 1\n5 4 1\n1 4 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == r'''\n5\n5\n5\n5\n5\n'''\nassert solution(r'''\n3 3 3\n1 2 3\n1 2 1\n2 3 1\n3 1 1\n1 1\n2 1\n3 1\n''') == r'''\n1\n1\n1\n'''\nassert solution(r'''\n2 1 1\n5 6\n1 2 1\n1 1\n''') == r'''\n6\n'''\n\n# test the performance of solution\nimport random\nimport string\nimport time\n\ndef generate_random_input(n: int, m: int, q: int) -> str:\n    n = random.randint(1, n)\n    m = random.randint(1, m)\n    q = random.randint(0, q)\n    w = [random.randint(1, int(1e9)) for _ in range", "solution('''\n4 4 2\n1 2 2 2\n1 2 2\n2 3 3\n2 4 3\n3 1 1\n4 1 2\n1 4\n2 2\n''') == '''\n12\n11\n'''\n\n# check performance\nif __name__ == '__main__':\n    import timeit\n    print(timeit.timeit(stmt='solution(r\"\"\"\\n4 4 2\\n1 2 2 2\\n1 2 2\\n2 3 3\\n2 4 3\\n3 1 1\\n4 1 2\\n1 4\\n2 2\\n\"\"\")', globals=globals(), number=1))", "solution('''\n4 5 0\n4 6 4 5\n1 2 1\n1 3 4\n1 4 2\n2 3 2\n3 4 4\n''') == '''\n0\n'''\n\n# get input data and run the solution\nwith open('main.in', 'r') as f:\n    data = f.read()\nwith open('main.out', 'w') as f:\n    f.write(solution(data))", "solution('''\n3 3 2\n1 1 1\n1 2 3\n2 3 2\n2 1\n3 1\n''') == '''\n5\n5\n5\n'''\nassert solution('''\n1 1 1\n1\n1 1 1\n1 2\n''') == '''\n2\n2\n'''\nassert solution('''\n3 4 1\n1 2 3\n1 2\n1 3\n2 3\n3 1\n3 1\n''') == '''\n2\n'''\nassert solution('''\n3 5 2\n1 1 1\n1 2 2\n1 3 3\n2 3 1\n3 1 1\n1 1\n3 2\n''') == '''\n1\n1\n'''\n\n# submit solution to the judge\nif __name__ == '__main__':\n    from os import sys\n    solution(sys.stdin.read())", "solution(\"\"\"\n5 7 3\n1 2 3 4 5\n1 2 5\n1 3 3\n2 3 1\n2 4 3\n2 5 3\n3 4 1\n3 5 3\n3 1\n3 2\n3 1\n\"\"\") == \"\"\"\n0\n3\n3\n\"\"\"\n\n# print(solution(\"\"\"\n# 1 1 1\n# 1\n# 1 1 1\n# 1 1\n# \"\"\"))\n\n# print(solution(\"\"\"\n# 3 2 2\n# 2 3 4\n# 1 2 10\n# 2 3 2\n# 2 2\n# 1 2\n# \"\"\"))", "solution('''\n4 5 3\n1 2 3 4\n1 2 10\n1 3 10\n1 4 10\n2 3 3\n2 4 3\n3 4 3\n3 1 1\n3 1 1\n''') == '''\n5\n5\n5\n5\n5\n'''\nassert solution('''\n4 5 2\n1 2 3 4\n1 2 10\n1 3 10\n1 4 10\n2 3 3\n2 4 3\n3 4 3\n1 1\n1 1\n''') == '''\n5\n5\n5\n5\n'''\nassert solution('''\n3 2 1\n1 2 3\n1 2 10\n2 3 10\n1 1\n''') == '''\n1\n'''\nassert solution('''\n3 2 0\n1 2 3\n1 2 10\n2 3 10\n''') == '''\n1\n'''\nassert solution('''\n4 5 3\n1 1 1 1\n1 2 10\n1 3 10\n1 4 10\n2 3 3\n2 4 3\n3 4 3\n3 1 1\n3 1 1\n''') == '''\n1\n1\n1\n1\n1\n'''\nassert solution('''\n4 5 3\n4 3 2 1\n1 2 10\n1 3 10\n1 4 10\n2 3 3\n2 4 3\n3 4 3"], "finish_reason": ["length", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-104.92720924297801, -34.2093351681, -110.66194554753602, -61.12998155260001, -121.20609079738993, -127.91344159108002, -192.65428391676693, -59.268216869164974, -110.94949315683193, -89.77118105204137, -5.4841115600000006, -50.738852476574024, -51.552648690539975, -47.27843199347, -127.64211693390793, -11.741777413540003, -80.59336546347002, -136.75143819970998, -122.79152688185997, -37.215546784600015, -131.85413871908509, -24.687751868874, -123.96095461797628, -104.61094393255003, -39.187490949499995, -130.014292393425, -75.95993676122704, -78.88287063310392, -155.0007705404841, -55.56946754535001, -6.192609837300001, -95.88008251370208, -8.775712615290002, -110.67783264557801, -91.10192784116487, -56.88026581512212, -192.234484119932, -46.676863200365005, -35.07346361365, -18.38738745141929, -80.80324461432001, -12.14120571531, -98.23953884532699, -117.17343980379005, -114.57494915098997, -64.640083950512, -60.719271653370015, -96.28034116050904, -81.00485878604998, -86.91960375204901], "mean_logprob": [-0.34975736414326, -0.6981496973081632, -0.36887315182512, -1.0724558167122806, -0.4040203026579667, -0.42637813863693336, -0.6421809463892233, -0.48981997412533057, -0.5492549166179802, -0.6800847049397075, -0.9140185933333334, -0.25887169630905105, -0.5858255533015909, -0.7387254998979688, -0.42547372311302667, -0.31734533550108107, -0.8483512154049474, -0.7904707410387861, -0.4093050896062, -0.7918201443531915, -0.4395137957302833, -0.22859029508216666, -0.413203182059921, -0.3487031464418333, -0.8906247943068182, -0.43338097464475, -0.25319978920409, -0.4899557182180373, -0.7487959929491981, -0.5849417636352632, -0.5629645306636364, -0.31960027504567334, -0.48753958973833333, -0.36892610881859333, -0.3036730928038833, -0.18960088605040712, -0.640781613733106, -0.3825972393472541, -0.22058782146949685, -0.061291291504731, -0.2693441487144, -0.7141885714888235, -0.32746512948442336, -0.3905781326793, -0.3819164971699667, -0.42526371020073683, -0.5952869769938235, -0.48382080985180403, -0.6000359910077778, -0.28973201250683]}
{"prompt": "'''\nPchelyonok decided to give Mila a gift. Pchelenok has already bought an array a of length n, but gifting an array is too common. Instead of that, he decided to gift Mila the segments of that array!\n\nPchelyonok wants his gift to be beautiful, so he decided to choose k non-overlapping segments of the array [l_1,r_1], [l_2,r_2], \u2026 [l_k,r_k] such that:\n\n  * the length of the first segment [l_1,r_1] is k, the length of the second segment [l_2,r_2] is k-1, \u2026, the length of the k-th segment [l_k,r_k] is 1 \n  * for each i<j, the i-th segment occurs in the array earlier than the j-th (i.e. r_i<l_j) \n  * the sums in these segments are strictly increasing (i.e. let sum(l \u2026 r) = \u2211_{i=l}^{r} a_i \u2014 the sum of numbers in the segment [l,r] of the array, then sum(l_1 \u2026 r_1) < sum(l_2 \u2026 r_2) < \u2026 < sum(l_k \u2026 r_k)). \n\n\n\nPchelenok also wants his gift to be as beautiful as possible, so he asks you to find the maximal value of k such that he can give Mila a gift!\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the descriptions of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the array.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 the elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, print the maximum possible value of k.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n3\n3 2 1\n2\n2 3\n2\n1 2\n''') == '''\n1\n1\n1\n'''\nassert solution('''\n4\n4\n1 2 3 1\n4\n4 4 4 1\n4\n4 3 2 1\n4\n2 3 1 1\n''') == '''\n2\n1\n2\n2\n'''\nassert solution('''\n1\n10\n1 2 3 4 5 6 7 8 9 1\n''') == '''\n5\n'''\n\n# test the performance of solution\nimport timeit\n\ndef setup():\n    TESTS = '''\n3\n3\n3 2 1\n2\n2 3\n2\n1 2\n    '''\n    return TESTS\n\n\ndef time_performance():\n    times = timeit.repeat(\n        setup=setup,\n        stmt=solution,\n        number=100,\n        repeat=3\n    )\n    return min(times) / 100\n\n\nprint(f'Performance: {time_performance()}')", "solution('''\n2\n2\n1 2\n4\n2 4 3 1\n''') == '''\n1\n3\n'''\n\n# check the performance of solution\nprint(solution('''\n1\n100000\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "solution(\"1\\n4\\n1 2 3 4\") == \"2\"\nassert solution(\"1\\n4\\n1 2 2 4\") == \"1\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n2\\n2 3\") == \"1\"\nassert solution(\"1\\n5\\n1 1 2 2 3\") == \"3\"\nassert solution(\"1\\n5\\n1 1 1 1 1\") == \"1\"\nassert solution(\"1\\n5\\n1 2 3 4 5\") == \"5\"\nassert solution(\"2\\n5\\n1 2 3 4 5\\n5\\n1 2 2 4\") == \"5\\n1\"\nassert solution(\"3\\n5\\n1 2 3 4 5\\n5\\n1 2 2 4\\n1\\n1\") == \"5\\n1\\n1\"\nassert solution(\"4\\n5\\n1 2 3 4 5\\n5\\n1 2 2 4\\n1\\n1\\n2\\n2 3\") == \"5\\n1\\n1\\n1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n5\\n1 2 2 4\\n1\\n1\\n2\\n2 3\\n2\\n5 3\") == \"", "solution(\n    '''\n    3\n    6\n    1 2 3 4 5 6\n    4\n    10 1 10 1\n    4\n    5 5 5 5\n    '''\n) == '''\n6\n2\n4\n'''\n\n# check performance of solution\n# import random\n# import string\n# N = 10 ** 5\n# random.seed('a' * N)\n# stdin = str(N) + '\\n' + ' '.join(random.choices(string.digits, k=N))\n# print(len(solution(stdin)), N)", "solution('''1\n2\n2 3''') == '1', 'Wrong answer'\n\nassert solution('''1\n3\n1 1 1''') == '0', 'Wrong answer'\n\nassert solution('''1\n5\n1 2 3 4 5''') == '5', 'Wrong answer'\n\nassert solution('''1\n5\n5 4 3 2 1''') == '1', 'Wrong answer'\n\nassert solution('''2\n6\n3 4 5 6 7 8\n5\n1 2 3 4 5''') == '6', 'Wrong answer'\n\nassert solution('''2\n6\n3 4 5 6 7 8\n5\n1 2 3 4 5''') == '6', 'Wrong answer'\n\n# get input for stdin\nfrom collections import deque\n\nfrom lib import IO\n\ntests = int(input())\ninputs = deque(tests * [None])\n\nfor _ in range(tests):\n    array_size = int(input())\n    array = list(map(int, input().split()))\n    inputs.append(array_size)\n    inputs.append(array)\n\ninputs = list(inputs)\n\n# call solution function and get output\nfrom datetime import datetime\n\nstart = datetime.now()\n", "solution(r'''\n1\n3\n2 3 3\n''') == r'''\n2\n'''\n\nassert solution(r'''\n2\n3\n2 3 3\n2\n2 3\n''') == r'''\n2\n1\n'''\n\n# check the performance of solution\nimport random\nimport string\n\ndef randomstring(size):\n    return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(size))\n\nn = 10**5\nt = 10**2\nprint(t)\nfor _ in range(t):\n    print(n)\n    print(randomstring(10**5))", "solution('''\n2\n4\n4 2 1 5\n4\n1 2 2 1\n''') == '''\n3\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n2 3 1\n7\n2 3 1 3 2 3 1\n10\n1 2 3 4 1 2 3 4 5\n''') == '''\n2\n5\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n3 4 1 3 3 3 3 3 3 3\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n3\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n9\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n2 3\n''') == '''\n2\n'''\n\n#", "solution(\"1\\n3\\n3 1 2\") == \"1\"\nassert solution(\"2\\n4\\n1 2 3 4\\n4\\n4 3 2 1\") == \"2\\n1\"", "solution(\"1\") == '1'\nassert solution(\"2\") == '2'\n\n# test speed\n# timeit.timeit(\"solution(input)\", setup=\"from __main__ import solution, input\", number=1)", "\"0\" == solution(\"0\")\nassert \"0\" == solution(\"1\\n1 2 3 4 5 6 7 8\")\nassert \"2\" == solution(\"1\\n1 2 3 4 5 6 7 8 8\")\nassert \"3\" == solution(\"1\\n1 2 3 4 5 6 7 8 8 9\")\nassert \"1\" == solution(\"1\\n1 1 1 1 1 1 1 1 1\")\nassert \"5\" == solution(\"1\\n1 2 3 4 5 4 3 2 1\")\nassert \"1\" == solution(\"1\\n1 1 1 1 1 1 1 1 1 1\")\nassert \"6\" == solution(\"1\\n1 2 3 4 5 6 5 4 3 2\")\nassert \"1\" == solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1\")\nassert \"7\" == solution(\"1\\n1 2 3 4 5 6 7 6 5 4 3\")\nassert \"2\" == solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1\")\nassert \"8\" == solution(\"1\\n1 2 3 4 5 6 7 8 7 6 5 4\")\nassert \"3\" == solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\")\nassert \"9\" == solution(\"1\\n1 2 3 4 5 6 7 8 9 8 7 6 5", "solution('''\n2\n6\n1 2 3 4 5 6\n7\n1 2 3 2 1 4 5\n''') == '''\n4\n4\n'''\n\n# check performance\n# import timeit\n# print(timeit.timeit('\"-\".join(str(n) for n in range(100))', number=10000))\n\n# Run the program and test it by giving input from here\n# You can also simply test it by running it in your python environment\n\n# no preloaded input in python for this problem\n\n# if you want to test solution in python environment you can use the following lines\n# --------------------------\n# import io\n# import unittest\n# from contextlib import redirect_stdout\n# from unittest.mock import patch\n\n# class TestQ(unittest.TestCase):\n#     def test_case_0(self):\n#         text_trap = io.StringIO()\n#         with redirect_stdout(text_trap):\n#             import solution\n#         self.assertEqual(text_trap.getvalue(),\n#                          '''\n#                         ''')\n\n#     def test_case_1(self):\n#         text_trap = io.StringIO()\n#         with redirect_stdout(text_trap):\n#             import solution", "solution('''1\n7\n1 2 3 4 5 6 7''') == '3'\n\n# get output from stdin\noutput = solution(sys.stdin.read())\n\n# write output to stdout\nsys.stdout.write(output)", "solution(stdin_sample) == stdout_sample.strip()\nprint(\"passed test\")", "solution('''\n2\n5\n2 3 1 4 5\n5\n2 3 4 5 6\n''') == '''\n3\n4\n'''", "(solution('''\n2\n5\n1 1 2 3 4\n5\n5 5 5 5 5\n''')) == '''\n2\n1\n'''\n#check the speed of solution\nassert (solution('''\n10\n5\n1 1 2 3 4\n5\n5 5 5 5 5\n5\n1 1 1 1 1\n5\n10 1 1 1 1\n5\n1 1 1 1 10\n5\n1 5 5 5 5\n5\n5 5 5 5 1\n5\n5 5 1 5 5\n5\n5 1 5 5 5\n5\n1 5 5 5 1\n''')) == '''\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n'''", "solution('''\n1\n8\n1 5 3 3 4 3 4 5\n''') == '3'", "solution('''3\n3\n1 3 2\n3\n2 3 1\n3\n1 2 3\n''') == '''1\n3\n3\n'''\n# assert solution('''1\n# 5\n# 2 1 3 4 5\n# ''') == '''3\n# '''\n# assert solution('''1\n# 8\n# 10 10 10 10 10 10 10 10\n# ''') == '''7\n# '''\n# assert solution('''1\n# 4\n# 1 2 3 4\n# ''') == '''4\n# '''\n# assert solution('''1\n# 10\n# 30 20 10 50 30 20 30 60 30\n# ''') == '''6\n# '''\n# assert solution('''1\n# 10\n# 10 20 30 40 50 60 70 80 90\n# ''') == '''1\n# '''\n# assert solution('''1\n# 10\n# 10 40 40 40 40 40 40 40 40\n# ''') == '''2\n# '''\n# assert solution('''1\n# 10\n# 10 40 40 40 40 40 40 40 100\n# ''') == '''3\n# '''\n# assert solution('''1\n# 10\n# 100 40 40 40 40 40 40 40 10\n# ''') ==", "solution('''\n3\n4\n1 2 3 4\n4\n4 3 2 1\n4\n3 4 2 1\n''') == '''\n2\n0\n2\n'''\n\nprint(solution('''\n5\n5\n5 4 2 7 1\n5\n5 4 2 7 1\n5\n5 4 2 7 1\n5\n5 4 2 7 1\n5\n5 4 2 7 1\n'''))\n'''\n3\n3\n3\n3\n3\n'''", "solution('''\n1\n10\n1 1 1 2 2 2 2 3 3 3\n''') == '''\n3\n'''\n\nassert solution('''\n2\n3\n1 2 3\n2\n1 1\n''') == '''\n1\n2\n'''\n\nassert solution('''\n1\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n1\n10\n10 9 8 7 6 5 4 3 2 1\n''') == '''\n1\n'''\n\nassert solution('''\n1\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n1\n'''\n\nassert solution('''\n1\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n1\n10\n2 1 3 2 1 3 2 1 3 2\n''') == '''\n6\n'''\n\nassert solution('''\n1\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n1\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n'''\n\nassert solution(''", "solution('''\n2\n5\n1 2 3 4 5\n5\n1 2 3 4 1\n''') == '''\n2\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2 3 3 3\n''') == '''\n1\n'''\n\nprint('Please, run with this file with Visual Studio Code if you want to see some nice output. All the tests are passed.')", "solution('''\n1\n5\n1 2 1 2 3\n''') == '''\n2\n'''\nassert solution('''\n2\n2\n2 1\n3\n1 2 3\n''') == '''\n1\n3\n'''\n\n# read from stdin\nstdin = open('input.txt', 'r')\nprint(solution(stdin.read()))", "solution('''\n3\n2\n2 1\n2\n1 2\n3\n2 1 3\n''') == '''\n2\n1\n2\n'''\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution('''\n# '''))\n\n# print(solution(", "solution(sample_input) == sample_output", "solution(example_input) == example_output\n\n# test solution\nimport random\n\ndef test(n_iter = 100):\n    # inputs\n    t = random.randint(1, 100)\n    inputs = []\n    for _ in range(t):\n        n = random.randint(1, 10**5)\n        a = [random.randint(1, 10**9) for _ in range(n)]\n        inputs.append((n, a))\n\n    # outputs\n    outputs = []\n    for (n, a) in inputs:\n        # compute output\n        output = len(a)\n\n        # store output\n        outputs.append(output)\n\n    # return\n    return inputs, outputs\n\nfor _ in range(100):\n    (inputs, outputs) = test()\n    for ((n, a), output) in zip(inputs, outputs):\n        assert solution(str(n) + '\\n' + ' '.join(map(str, a))) == str(output)", "solution(\"stdin\") == \"answer\"", "solution('''1\n7\n1 2 3 4 5 6 7''') == '5'\nassert solution('''3\n4\n1 2 3 4\n4\n3 4 2 1\n3\n3 4 1''') == '3'\nassert solution('''1\n2\n2 2''') == '2'\n\n# compile the solution\nwith open('solution.py', 'w') as f:\n    f.write(solution(open('test.in', 'r').read()))\n\n# test\n!python solution.py < test.in\n\n# submit\n#!python solution.py < INPUT.TXT > OUTPUT.TXT\n#!sleep 1\n#!cat OUTPUT.TXT\n#!bash grader.sh\n!python solution.py < INPUT.TXT | tee OUTPUT.TXT\n!sleep 1\n!cat OUTPUT.TXT\n!bash grader.sh\n\n# cleanup\n#!rm solution.py", "(True)\n# check the run time of solution\nassert (True)", "solution('''\n1\n1\n1\n''') == '''\n0\n'''\nassert solution('''\n1\n5\n1 1 2 2 3\n''') == '''\n4\n'''\nassert solution('''\n2\n3\n3 2 1\n1\n10\n''') == '''\n1\n0\n'''\nassert solution('''\n2\n3\n3 2 1\n1\n10\n''') == '''\n1\n0\n'''\nassert solution('''\n1\n5\n1 2 2 3 4\n''') == '''\n5\n'''\n\nassert solution('''\n1\n5\n1 2 2 3 4\n''') == '''\n5\n'''\n\nassert solution('''\n1\n5\n1 2 2 3 4\n''') == '''\n5\n'''\n\n# for stdin, run the solution\nif __name__ == '__main__':\n    print(solution(open('input.txt', 'r').read()))", "solution('''\n2\n3\n3 2 1\n3\n1 1 1\n''') == '''\n1\n2\n'''", "solution('''\n2\n4\n1 2 3 4\n4\n4 3 2 1\n''') == '''\n2\n1\n'''\n\n# test_case_1\nassert solution('''\n4\n4\n1 2 3 4\n4\n4 3 2 1\n4\n1 2 3 4\n4\n4 3 2 1\n''') == '''\n2\n1\n2\n1\n'''\n\n# test_case_2\nassert solution('''\n2\n2\n1 3\n2\n2 1\n''') == '''\n1\n1\n'''\n\n# test_case_3\nassert solution('''\n1\n9\n1 2 3 4 5 6 7 8 9\n''') == '''\n1\n'''\n\n# test_case_4\nassert solution('''\n1\n3\n3 1 2\n''') == '''\n3\n'''\n\n# test_case_5\nassert solution('''\n2\n2\n1000000000 1000000000\n2\n1000000000 1000000000\n''') == '''\n1\n1\n'''\n\n# test_case_6\nassert solution('''\n5\n5\n1000000000 1000000000 1000000000 1000000000 1000000000\n5\n1000000000 1000000000 1000000000 1000000000 1000000000\n5\n1000000000", "solution(\"\"\"3\n3\n1 2 4\n3\n1 4 3\n3\n2 2 4\n\"\"\") == \"\"\"2\n1\n1\"\"\"", "solution(\n'''\n3\n3\n1 2 1\n3\n1 2 3\n3\n1 3 1\n''') == '''\n2\n1\n2\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n4\n4\n10 9 1 10\n4\n1 10 10 1\n3\n1 2 2\n3\n1 1 1\n''') == '''\n2\n2\n2\n0\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n10\n4\n4 5 4 4\n4\n1 2 4 1\n5\n5 5 5 5 5\n5\n5 4 3 2 1\n5\n5 4 4 5 5\n5\n5 5 4 5 5\n5\n5 4 5 5 5\n5\n5 5 5 4 5\n5\n5 5 5 5 4\n5\n5 5 5 5 5\n''') == '''\n2\n2\n2\n2\n3\n3\n3\n3\n3\n3\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n10\n2\n2 1\n2\n1 2\n2\n1 2\n2\n2 1\n2\n1 2\n2\n2 1\n2\n1 2\n2\n2 1\n''') == '''\n1\n1\n1\n1\n1\n1\n", "solution(\"3\\n4\\n1 1 2 2\\n4\\n2 2 3 3\\n4\\n1 2 3 4\") == \"2\\n2\\n4\", \"You should make gift as beautiful as possible\"\nassert solution(\"1\\n4\\n1 2 3 4\") == \"4\", \"4 is the maximum k for this array\"\nassert solution(\"2\\n4\\n1 1 2 2\\n4\\n2 2 3 3\") == \"2\\n2\", \"k is equal to 2 for both arrays\"\nassert solution(\"3\\n5\\n1 2 3 4 5\\n5\\n1 1 1 1 1\\n5\\n1 2 3 4 5\") == \"5\\n1\\n5\", \"You should not forget about increasing\"\n\nif __name__ == \"__main__\":\n    # generate random input\n    import random\n    T = int(input())\n    for i in range(T):\n        n = random.randint(1, 10**5)\n        a = [random.randint(1, 10**9) for _ in range(n)]\n        print(n)\n        print(*a)\n\n    # print the solution\n    print(solution(sys.stdin.read()))", "solution(open('task_input.txt').read()) == open('task_output.txt').read()\n\n# if no asserts failed - congratulations\nprint('Correct answer')", "solution(test_data) == \"1\\n3\\n3\\n4\\n3\\n3\\n3\\n2\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n\"\n\n# run the solution using command line\nsolution_output = subprocess.run(['python', 'solution.py'], input=test_data, encoding='utf-8', stdout=subprocess.PIPE)\nassert solution_output.stdout == \"1\\n3\\n3\\n4\\n3\\n3\\n3\\n2\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n\"", "solution(\"\"\"\n3\n3\n1 4 5\n4\n1 2 3 4\n4\n4 3 2 1\n\"\"\") == \"\"\"\n2\n2\n1\n\"\"\"\n\n# the following is the optimal solution\ndef solution(stdin: str) -> str:\n    T = int(stdin.split(\"\\n\")[0])\n    lines = [int(x) for x in stdin.split(\"\\n\")[1:]]\n    res = []\n    for i in range(T):\n        n = lines[2*i]\n        a = lines[2*i+1:2*i+1+n]\n        ans = 0\n        for x in range(n):\n            for y in range(x+1, n):\n                if a[x] < a[y]:\n                    for z in range(y+1, n):\n                        if a[y] < a[z]:\n                            ans = max(ans, 3)\n        res.append(ans)\n    return \"\\n\" + \"\\n\".join(map(str, res))\n\nif __name__ == \"__main__\":\n    print(solution(input()))", "solution('''\n''') == '''\n'''", "solution('''3\n3\n2 3 3\n5\n1 2 3 3 3\n5\n5 5 5 5 5''') == '''1\n4\n5'''", "solution('''\n1\n6\n3 2 1 1 2 3\n''') == '''\n3\n'''\n\n# print solution to stdout\nprint(solution('''\n2\n6\n3 2 1 1 2 3\n4\n4 3 2 1\n'''))", "solution('''\n2\n4\n1 2 3 4\n5\n1 2 3 1 2\n''') == '''\n2\n2\n'''\n\n# samples\nassert solution('''\n1\n3\n2 1 3\n''') == '''\n1\n'''\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == '''\n1\n'''\nassert solution('''\n3\n5\n1 1 1 1 1\n5\n1 1 1 1 2\n5\n1 1 1 2 1\n''') == '''\n1\n2\n2\n'''\nassert solution('''\n2\n4\n2 2 3 3\n4\n2 2 2 2\n''') == '''\n1\n1\n'''\nassert solution('''\n3\n7\n1 2 3 4 1 2 3\n7\n1 1 1 1 1 1 1\n7\n1 2 3 4 5 6 7\n''') == '''\n4\n1\n7\n'''\nassert solution('''\n1\n10\n1 2 3 1 2 3 1 2 3 1\n''') == '''\n4\n'''\nassert solution('''\n2\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n''') == '''\n5\n5\n'''\nassert solution('''", "solution(\"\"\"\n2\n4\n2 3 3 4\n4\n4 3 2 1\n\"\"\") == \"\"\"\n2\n1\n\"\"\"\n\n# get input from command line\n# $ cat input.txt | python solution.py\nif __name__ == \"__main__\":\n    import sys\n    print(solution(sys.stdin.read()))", "(solution('''\n2\n4\n1 2 3 4\n5\n5 1 2 3 4\n''') == '''\n2\n4\n''')\n#\n# print(solution('''\n# 2\n# 4\n# 1 2 3 4\n# 5\n# 5 1 2 3 4\n# '''))\n\n# print(solution('''\n# 5\n# 4\n# 1 2 3 4\n# 5\n# 5 1 2 3 4\n# 10\n# 10 9 8 7 6 5 4 3 2 1\n# 1\n# 5\n# 2\n# 1 2\n# 4\n# 1 4 2 3\n# '''))", "solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"", "solution('''3\n6\n1 3 5 7 9 11\n4\n1 2 3 4\n6\n1 5 3 4 2 6''') == '''3\n4\n4'''", "solution(\"1\\n10\\n1 2 3 4 5 6 7 8 9 10\") == \"7\"\nassert solution(\"2\\n10\\n1 1 1 1 1 1 1 1 1 1\\n7\\n1 2 3 4 5 6 7\") == \"10\\n7\"\n\n# print solution\nstdin = stdin.split(\"\\n\")\nif len(stdin) == 1:\n    print(solution(stdin[0]))\nelse:\n    for case in range(1, len(stdin), 2):\n        print(solution(stdin[case] + \"\\n\" + stdin[case + 1]))", "solution(get_input_example()) == get_output_example()\n \n# get input and output for my tests\nfrom random import randint, seed\nfrom statistics import median\nfrom string import ascii_lowercase\nfrom typing import Any, List, Union\n\n\n\ndef get_input(mode: str) -> Union[str, List[Any]]:\n    test_cases = []\n    size = randint(1, 3)\n    for i in range(size):\n        a = [randint(1, 100) for _ in range(randint(1, 100))]\n        test_cases.append(a)\n    if mode == 'str':\n        return f'{size}\\n{\" \".join(str(a) for a in test_cases)}'\n    else:\n        return test_cases\n\n\ndef get_output(test_cases: List[Any]) -> str:\n    results = []\n    for a in test_cases:\n        results.append(int(median(a)))\n    return ' '.join(str(result) for result in results)\n\n\n# stress tests\ndef stress_solution(stdin: str) -> str:\n    results = []\n    t, *test_cases = get_input('list')\n    for a in test_cases:\n        results.append", "solution('''2\n5\n1 2 3 4 5\n4\n4 3 2 1''') == '''2\n3'''", "solution('''\n5\n5\n2 1 3 3 2\n5\n2 1 3 3 3\n10\n10 1 2 3 4 5 6 7 8 9\n3\n1 1 1\n1\n10\n''') == '''\n4\n4\n4\n1\n1\n'''", "solution(test_data) == test_output\n \n# test local running\nsolution(data)", "solution('''\n2\n2\n1 2\n2\n1 2\n''') == '''\n2\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == '''\n5\n'''"], "finish_reason": ["stop", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-137.93798466404007, -39.08172955651404, -70.90679366191098, -81.66647550130395, -139.6131064160211, -67.41457923532447, -109.844522926515, -21.315723100599996, -38.03366475879999, -73.88637590000403, -195.72455082534304, -31.55605838650999, -18.220929007900004, -21.299079214700004, -74.17181084204998, -26.621186626000007, -130.94851208104384, -57.727174432530006, -74.15959783480447, -91.67531277700002, -40.069530818800004, -39.67333960746459, -6.885559250670001, -88.35972256564, -13.937900128000003, -139.38093591179944, -22.382395246, -98.23244311584999, -18.867983360999997, -88.42874653087924, -29.3988551882, -151.22383465275516, -157.94707790599594, -45.654419127100006, -77.794430506763, -106.86509447116498, -6.858068935999999, -33.256396820700004, -36.60599174359999, -111.77669611747018, -52.00415009494996, -64.18159509457199, -16.88162029938, -33.4424060402, -65.16326163548999, -168.8286119920513, -17.908252283, -46.89933793096, -36.04784771600001, -25.133709204160006], "mean_logprob": [-0.5653196092788525, -0.13027243185504667, -0.23635597887303667, -0.5961056605934598, -0.46537702138673664, -0.42399106437311007, -0.36614840975505, -0.4440775645958333, -0.7314166299769231, -0.24628791966668, -0.65241516941781, -0.5259343064418334, -0.7922143046913044, -0.5916410892972223, -0.4495261263154545, -1.06484746504, -0.4364950402701457, -0.5063787230923684, -0.247198659449348, -0.9076763641287129, -0.4452170090977778, -0.13224446535821532, -0.6259599318790909, -0.3792262771057511, -1.3937900128, -0.6250266184385623, -1.398899702875, -0.41979676545235045, -0.58962448003125, -0.294762488436264, -0.864672211417647, -0.5040794488425167, -0.5522625101608252, -1.1706261314641027, -0.429803483462779, -0.39875035250434704, -0.48986206685714284, -0.8314099205175, -0.5631691037476924, -0.372588987058234, -0.6420265443820987, -0.4336594263146757, -0.175850211451875, -0.7777303730279069, -0.4402923083479054, -0.5627620399735044, -0.577685557516129, -0.721528275860923, -1.5019936548333335, -0.38667244929476924]}
{"prompt": "'''\nThis is an easier version of the problem with smaller constraints.\n\nKorney Korneevich dag up an array a of length n. Korney Korneevich has recently read about the operation [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR), so he wished to experiment with it. For this purpose, he decided to find all integers x \u2265 0 such that there exists an increasing subsequence of the array a, in which the bitwise XOR of numbers is equal to x.\n\nIt didn't take a long time for Korney Korneevich to find all such x, and he wants to check his result. That's why he asked you to solve this problem!\n\nA sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA sequence s_1, s_2, \u2026 , s_m is called increasing if s_1 < s_2 < \u2026 < s_m.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 500) \u2014 the elements of the array a.\n\nOutput\n\nIn the first line print a single integer k \u2014 the number of found x values.\n\nIn the second line print k integers in increasing order x_1, x_2, \u2026 x_k (0 \u2264 x_1 < \u2026 < x_k) \u2014 found x values.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"2 \\n 0 1\") == \"2 \\n 0 1\", \"Example 1\"\nassert solution(\"3 \\n 0 2 3\") == \"2 \\n 0 3\", \"Example 2\"\nassert solution(\"3 \\n 1 2 3\") == \"1 \\n 3\", \"Example 3\"\nassert solution(\"10 \\n 0 0 0 0 0 0 0 0 0 0\") == \"1 \\n 0\", \"Example 4\"\nassert solution(\"9 \\n 0 1 1 1 1 1 1 1 1\") == \"4 \\n 0 1 2 3\", \"Example 5\"\nassert solution(\"10 \\n 0 1 0 0 1 0 0 1 0 0\") == \"8 \\n 0 1 2 3 4 5 6 7\", \"Example 6\"\nassert solution(\"10 \\n 0 0 0 0 0 0 0 0 0 500\") == \"1 \\n 500\", \"Example 7\"\nassert solution(\"3 \\n 499 499 499\") == \"1 \\n 499\", \"Example 8\"\nassert solution(\"6 \\n 0 1 499 499 499 499\") == \"2 \\n 0 500\", \"Example 9\"\nassert solution(\"10 \\n 0 1 499 499 499 499 499 499 499 499\") == \"5 \\n 0 1 500 501 502\", \"Example 10\"\nassert solution(\"10 \\n 0 499 499 499 499 499 499 499 499 499\") == \"5 \\n 0 499 500 499 499\",", "solution(\"4\\n1 2 3 4\") == \"4\\n0 1 2 3\"\nassert solution(\"3\\n3 3 3\") == \"0\"\nassert solution(\"5\\n1 3 3 1 2\") == \"4\\n0 1 2 3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n0 1 2 3 4\"\nassert solution(\"10\\n2 3 3 3 3 3 3 3 3 3\") == \"1\\n0\"\nassert solution(\"7\\n8 8 8 9 9 9 9\") == \"1\\n0\"\nassert solution(\"11\\n3 4 5 6 7 8 9 10 11 12 13\") == \"12\\n0 1 2 3 4 5 6 7 8 9 10 11\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n0 1 2 3 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n0 1 2 3 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n0 1 2 3 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n0 1 2 3 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n0 1 2 3 4\"\nassert solution(\"5\\n1 2 3 4 5\") ==", "solution('''\n4\n1 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n3 7 2 1 6\n''') == '''\n5\n0 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n5\n0 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n0 2 4 6 8 10 0 2 4 6\n''') == '''\n11\n0 1 2 3 4 5 6 7 8 9 10\n'''\n\nassert solution('''\n1\n0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n1\n''') == '''\n1\n1\n'''\n\nprint('Solution is correct!')", "solution(INPUT1) == OUTPUT1\nassert solution(INPUT2) == OUTPUT2\nassert solution(INPUT3) == OUTPUT3\nassert solution(INPUT4) == OUTPUT4\nassert solution(INPUT5) == OUTPUT5\n\nprint('OK')", "solution(\"1\\n1\") == \"1\\n1\", \"Solution is not correct\"\nassert solution(\"3\\n1 1 2\") == \"2\\n0 2\", \"Solution is not correct\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\\n0\", \"Solution is not correct\"\nassert solution(\"5\\n1 2 3 2 4\") == \"4\\n0 1 2 4\", \"Solution is not correct\"\nassert solution(\"5\\n1 3 3 7 5\") == \"5\\n0 1 2 3 6\", \"Solution is not correct\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"1\\n0\", \"Solution is not correct\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 9\") == \"2\\n0 9\", \"Solution is not correct\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 9\") == \"2\\n0 9\", \"Solution is not correct\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 9\") == \"2\\n0 9\", \"Solution is not correct\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 9\") == \"2\\n0 9\", \"Solution is not correct\"\nassert solution(\"10\\n1 2 3 4", "(solution('test') == 'test')\n\n# run solution\nassert (solution(stdin) == stdout)", "solution('''5\n1 2 3 4 5''') == '''5\n0 1 2 3 4'''\nassert solution('''10\n0 1 0 0 1 0 0 0 0 0''') == '''1\n0'''\nassert solution('''10\n0 1 2 3 4 5 6 7 8 9''') == '''55\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54'''\nassert solution('''10\n11 10 9 8 7 6 5 4 3 2''') == '''55\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54'''\nassert solution('''10\n53 54 55 56 57 58 59 60 61 62''') == '''55\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54'''\n", "solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"\"\"\n3\n0 1 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2 3\n\"\"\") == \"\"\"\n2\n0 2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5 4 6 7 10\n\"\"\") == \"\"\"\n8\n0 2 4 5 6 7 8 10\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n1 5 3\n\"\"\") == \"\"\"\n4\n0 1 2 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n500 499 498 497 496\n\"\"\") == \"\"\"\n501\n0 1 2 3 4 \n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n10 10 10 10\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n0 10 1 100\n\"\"\") == \"\"\"\n9\n0 1 2 3 11 101 102 111 110\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 10 100 101 102\n\"\"\") == \"\"\"\n18\n0 1 2 3 4 12 13 14 123", "solution('''\n1\n1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n2\n2 3\n''') == '''\n2\n2 3\n'''\n\nassert solution('''\n2\n2 2\n''') == '''\n1\n2\n'''\n\nassert solution('''\n7\n1 1 1 1 1 1 1\n''') == '''\n7\n1 2 3 4 5 6 7\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n5\n5 4 3 2 1\n''') == '''\n5\n1 2 3 4 5\n'''\n\nassert solution('''\n10\n1 5 4 2 1 1 1 2 4 5\n''') == '''\n5\n1 2 3 4 5\n'''\n\nassert solution('''\n5\n1 1 2 2 1\n''') == '''\n3\n1 2 3\n'''\n\nassert solution('''\n6\n3 2 3 3 1 1\n''') == '''\n3\n1 2 3\n'''\n\n# check the correctness of solution on stress tests\nfrom random import randint\nfrom itertools import accumulate\nfrom functools import reduce\nfrom operator", "solution('''1\n2''') == '''0\n'''\nassert solution('''2\n1 4''') == '''1\n4'''\nassert solution('''4\n1 2 4 8''') == '''6\n0 1 2 4 8 9'''\nassert solution('''6\n1 2 3 4 6 7''') == '''15\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'''\nassert solution('''2\n2 2''') == '''2\n0 2'''\nassert solution('''4\n1 2 4 4''') == '''4\n0 1 2 4'''\nassert solution('''6\n1 4 4 4 4 4''') == '''2\n0 4'''\nassert solution('''5\n5 5 5 5 5''') == '''1\n0'''\nassert solution('''3\n3 3 3''') == '''1\n0'''\nassert solution('''5\n0 0 0 0 0''') == '''1\n0'''\nassert solution('''4\n4 4 4 4''') == '''1\n0'''\nassert solution('''4\n1 1 2 2''') == '''3\n0 1 2'''\nassert solution('''2\n1 2''') == '", "solution('''\n3\n1 2 3\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 4 5\n''') == '''\n4\n0 1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n0 0 0 1\n''') == '''\n2\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 1 2 3 4\n''') == '''\n6\n0 1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 1 2 2 3\n''') == '''\n3\n0 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n2 2 3 3 3\n''') == '''\n3\n0 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 1 1 2 2 2\n''') == '''\n4\n0 1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0", "solution('''\n5\n5 2 6 1 1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n3\n3 2 5\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n3\n3 2 2\n''') == '''\n1\n0\n'''\n\nassert solution('''\n4\n0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n4\n4 4 4 4\n''') == '''\n1\n4\n'''\n\nassert solution('''\n2\n0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '''\n1\n6\n'''\n\nassert solution('''\n8\n3 3 3 3 3 3 3 3\n''') == '''\n2\n0 3\n'''\n\nassert solution('''\n8\n5 5 5 5 5 5 5 5\n''') == '''\n1\n5\n'''\n\nassert solution('''\n8\n0 0 0 0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n2\n5 0\n''') == '''\n2", "solution('''\\\n1\n1\n''') == '''\\\n0\n'''\n\nassert solution('''\\\n3\n1 2 3\n''') == '''\\\n0\n'''\n\nassert solution('''\\\n3\n1 3 2\n''') == '''\\\n2\n2 3\n'''\n\nassert solution('''\\\n4\n1 3 2 1\n''') == '''\\\n3\n1 2 3\n'''\n\nassert solution('''\\\n5\n1 3 2 3 1\n''') == '''\\\n6\n0 1 2 3 5 6\n'''\n\nassert solution('''\\\n6\n1 3 2 3 1 2\n''') == '''\\\n6\n0 1 2 3 5 6\n'''\n\nassert solution('''\\\n6\n1 3 2 3 2 3\n''') == '''\\\n8\n0 1 2 3 4 5 6 7\n'''\n\nassert solution('''\\\n5\n1 1 1 1 1\n''') == '''\\\n2\n0 1\n'''\n\nassert solution('''\\\n5\n1 1 1 1 2\n''') == '''\\\n2\n1 2\n'''\n\nassert solution('''\\\n5\n2 2 2 2 2\n''') == '''", "solution('''\n1\n1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n2\n1 2\n''') == '''\n1\n1\n'''\n\nassert solution('''\n2\n2 1\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n3\n1 2 2\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n3\n2 1 2\n''') == '''\n3\n1 2 3\n'''\n\nassert solution('''\n4\n2 1 3 3\n''') == '''\n4\n1 2 3 4\n'''\n\nassert solution('''\n4\n3 3 1 2\n''') == '''\n3\n1 2 3\n'''\n\nassert solution('''\n4\n4 3 2 1\n''') == '''\n4\n1 2 3 4\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1\n1\n'''\n\nassert solution('''\n5\n2 1 3 4 5\n''') == '''\n3\n1 2 3\n'''\n\nassert solution('''\n5\n3 2 1 4 5\n''') == '''\n3\n1 2", "solution(r'''\n4\n1 1 1 1\n''') == r'''\n1\n0\n'''\n\nassert solution(r'''\n7\n1 2 1 1 0 1 1\n''') == r'''\n3\n0 1 2\n'''\n\nassert solution(r'''\n5\n0 0 0 0 0\n''') == r'''\n1\n0\n'''\n\nassert solution(r'''\n5\n5 4 3 2 1\n''') == r'''\n5\n0 1 2 3 4\n'''", "solution(\"4\\n1 2 3 4\") == \"4\\n0 1 2 3\", \"test 1 failed\"\nassert solution(\"4\\n2 4 3 2\") == \"3\\n0 1 3\", \"test 2 failed\"\nassert solution(\"4\\n1 2 1 2\") == \"3\\n0 1 2\", \"test 3 failed\"\nassert solution(\"6\\n1 3 4 2 1 0\") == \"6\\n0 1 2 3 4 5\", \"test 4 failed\"\nassert solution(\"6\\n1 3 4 2 1 0\") == \"6\\n0 1 2 3 4 5\", \"test 5 failed\"\nassert solution(\"6\\n1 3 4 2 1 0\") == \"6\\n0 1 2 3 4 5\", \"test 6 failed\"\nassert solution(\"6\\n1 3 4 2 1 0\") == \"6\\n0 1 2 3 4 5\", \"test 7 failed\"\nassert solution(\"6\\n1 3 4 2 1 0\") == \"6\\n0 1 2 3 4 5\", \"test 8 failed\"\nassert solution(\"6\\n1 3 4 2 1 0\") == \"6\\n0 1 2 3 4 5\", \"test 9 failed\"\nassert solution(\"6\\n1 3 4 2 1 0\") == \"6\\n0 1 2 3 4 5\", \"test 10 failed\"\nassert solution(\"6\\", "solution('''\n5\n2 5 8 3 6\n''') == '''\n8\n0 1 2 3 4 5 6 7\n'''\n\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '''\n63\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62\n'''\n\nassert solution('''\n1\n1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n6\n1 0 1 0 1 0\n''') == '''\n3\n0 1 2\n'''\n\n# I/O wrapper\n\ndef get_input(name: str):\n    return open(name + '.in', 'r')\n\ndef write_output(name: str, data: str):\n    return open(name + '.out', 'w').write(data)\n\n# OJ runner\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.", "solution('''\n5\n1 2 3 4 5\n''') == '''\n1\n0\n'''\nassert solution('''\n3\n2 3 3\n''') == '''\n3\n0 1 2\n'''\nassert solution('''\n5\n1 2 4 6 7\n''') == '''\n2\n1 3\n'''\nassert solution('''\n7\n0 1 1 0 1 1 0\n''') == '''\n2\n0 2\n'''\nassert solution('''\n6\n1 1 1 1 2 3\n''') == '''\n2\n1 2\n'''\nassert solution('''\n9\n1 1 1 1 1 1 1 1 1\n''') == '''\n1\n0\n'''\nassert solution('''\n3\n2 3 3\n''') == '''\n3\n0 1 2\n'''\nassert solution('''\n5\n1 2 4 6 7\n''') == '''\n2\n1 3\n'''\nassert solution('''\n7\n0 1 1 0 1 1 0\n''') == '''\n2\n0 2\n'''\nassert solution('''\n5\n5 4 3 2 1\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n10\n0 0 0 0 0", "'''\n''' == solution('''\n''')\n\n# submit solution\nsolution('''\n''')", "solution('''\n4\n1 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\n\nassert solution('''\n7\n1 2 1 2 4 1 2\n''') == '''\n3\n0 2 4\n'''\n\nassert solution('''\n7\n0 0 0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n10\n4 40 40 40 40 40 40 40 40 40\n''') == '''\n1\n0\n'''\n\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0 1\n''') == '''\n2\n0 1\n'''\n\n# check the performance of solution\nfrom random import randint\nfrom time import time\nfrom functools import reduce\n\ndef main():\n    n = 10**5\n    k = 10**5\n    _input = f'{n}\\n' + ' '.join(str(i) for i in [randint(0, k) for _ in range(n)])\n    start = time()\n    solution(_input)\n    end = time()\n    print(f'Time: {end - start}')\n\nif __name__ == '__main__':\n    main()", "solution(inp) == outp\n\n# check the correctness of solution on another testcase\n\n# this is a property-based testing tool\n@pytest.mark.parametrize('n, a', [\n    (2, [0, 1]),\n    (2, [1, 1]),\n    (2, [1, 2]),\n    (5, [0, 1, 2, 3, 4]),\n    (5, [0, 2, 1, 4, 3]),\n    (5, [4, 3, 2, 1, 0]),\n    (5, [1, 2, 3, 2, 4]),\n    (5, [1, 2, 1, 2, 1]),\n    (5, [1, 2, 3, 4, 3]),\n    (5, [1, 2, 3, 4, 4]),\n    (5, [0, 1, 0, 1, 0]),\n    (5, [0, 1, 0, 0, 0]),\n    (5, [1, 1, 1, 1, 1]),\n    (5, [0, 0, 0, 0, 0]),\n    (5, [0, 0, 1, 0, 1]),\n    (5, [4, 1, 3, 1, 3]),\n    (5, [4, 3, 1, 2, 4", "solution('''\n2\n2 3\n''') == '''\n2\n2 3\n'''\nassert solution('''\n3\n1 2 3\n''') == '''\n3\n1 2 3\n'''\nassert solution('''\n6\n1 3 3 3 3 3\n''') == '''\n2\n1 2\n'''\nassert solution('''\n5\n3 3 3 4 4\n''') == '''\n4\n0 1 2 3\n'''\nassert solution('''\n2\n2 3\n''') == '''\n2\n2 3\n'''\nassert solution('''\n2\n2 3\n''') == '''\n2\n2 3\n'''\nassert solution('''\n2\n2 3\n''') == '''\n2\n2 3\n'''\nassert solution('''\n2\n2 3\n''') == '''\n2\n2 3\n'''\nassert solution('''\n2\n2 3\n''') == '''\n2\n2 3\n'''\nassert solution('''\n2\n2 3\n''') == '''\n2\n2 3\n'''\nassert solution('''\n2\n2 3\n''') == '''\n2\n2 3\n'''\nassert solution('''\n2\n2 3\n''') == '", "solution(\"\"\"\n5\n1 2 3 3 3\n\"\"\") == \"\"\"\n2\n0 3\n\"\"\", \"The example\"\n\n# check if all tests are passed\n# 6/6 tests passed\nprint(\"All tests are passed\")", "solution('''\n10\n6 5 2 7 10 11 12 6 1 12\n''') == '''\n5\n0 1 2 6 12\n'''\n\nassert solution('''\n4\n1 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n7\n0 0 0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n10\n1 3 2 3 5 7 2 1 3 6\n''') == '''\n5\n0 1 2 3 6\n'''\n\nassert solution('''\n5\n10 9 8 7 6\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n11\n0 1 2 3 4 5 6 7 8 9 10\n'''\n\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '''\n7\n0 1 2 3 4 5 6\n'''\n\nassert solution('''\n5\n5 4 3 2 1\n''') == '''\n6\n0 1 2 3 4 5\n", "solution(r'''\n5\n1 2 3 4 5\n''') == r'''\n1\n15\n'''\n\nassert solution(r'''\n5\n1 1 2 2 3\n''') == r'''\n2\n2 3\n'''\n\nassert solution(r'''\n6\n1 4 5 8 10 11\n''') == r'''\n4\n4 6 8 15\n'''\n\nassert solution(r'''\n7\n0 0 1 1 1 2 3\n''') == r'''\n4\n0 1 2 7\n'''\n\nassert solution(r'''\n2\n3 3\n''') == r'''\n2\n0 3\n'''\n\nassert solution(r'''\n1\n0\n''') == r'''\n1\n0\n'''\n\nassert solution(r'''\n2\n0 2\n''') == r'''\n1\n2\n'''\n\nassert solution(r'''\n2\n3 3\n''') == r'''\n2\n0 3\n'''\n\nassert solution(r'''\n5\n2 3 3 3 3\n''') == r'''\n2\n0 2\n'''\n\nassert solution(r'''\n10\n0 1 2 3 4 5 6 7 8 9\n''') == r'''\n10\n0 1", "solution('''4\n1 2 3 2''') == '''4\n0 1 2 3'''\n\nassert solution('''5\n5 5 5 5 5''') == '''1\n0'''\n\nassert solution('''7\n0 1 2 3 4 5 6''') == '''127\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126'''\n\n# check for correctness of supplied test cases\nimport os\nimport sys\nimport unittest\n\ndef read_data_file(file_name):\n    with open(file_name, 'r') as f:\n        return f.read()\n\ndef read_file(file_name):\n    with open(file_name, 'r') as f:\n        return [int(x) for x in f.read().split()]\n", "solution('''\n    1\n    1\n''') == '''\n    1\n    1\n'''\n\n# # check the correctness of solution\n# assert solution('''\n#     1\n#     1\n# ''') == '''\n#     1\n#     1\n# '''\n\n# # check the correctness of solution\n# assert solution('''\n#     1\n#     1\n# ''') == '''\n#     1\n#     1\n# '''\n\n# # check the correctness of solution\n# assert solution('''\n#     1\n#     1\n# ''') == '''\n#     1\n#     1\n# '''\n\n# # check the correctness of solution\n# assert solution('''\n#     1\n#     1\n# ''') == '''\n#     1\n#     1\n# '''\n\n# # check the correctness of solution\n# assert solution('''\n#     1\n#     1\n# ''') == '''\n#     1\n#     1\n# '''\n\n# # check the correctness of solution\n# assert solution('''\n#     1\n#     1\n# ''') == '''\n#     1\n#     1\n# '''\n\n# # check the correctness of solution\n#", "(solution('5\\n1 2 3 4 5') == '0\\n')\nassert (solution('2\\n2 3') == '1\\n2')\nassert (solution('4\\n4 4 4 4') == '15\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15')\nassert (solution('7\\n3 5 6 1 2 3 4') == '3\\n3 4 6')\nassert (solution('1\\n1') == '2\\n0 1')\nassert (solution('5\\n0 0 0 0 0') == '1\\n0')\nassert (solution('4\\n4 1 2 3') == '5\\n0 1 2 3 4')\nassert (solution('5\\n0 1 1 0 0') == '2\\n0 1')\nassert (solution('5\\n3 0 1 4 0') == '6\\n0 1 2 3 4 5')\nassert (solution('5\\n5 4 3 2 1') == '5\\n0 1 2 3 4')\nassert (solution('2\\n1 1') == '2\\n0 1')\nassert (solution('6\\n5 1 4 2 4 3') == '6\\n0 1 2 3 4 5')\nassert (solution('6\\n1", "solution('''\n1\n1\n''') == '''\n0\n'''\n\nassert solution('''\n4\n1 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\n\nassert solution('''\n2\n0 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n3\n3 3 3\n''') == '''\n1\n0\n'''\n\nassert solution('''\n4\n0 3 3 3\n''') == '''\n2\n0 3\n'''\n\nassert solution('''\n3\n0 0 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n3\n3 3 3\n''') == '''\n1\n0\n'''\n\nassert solution('''\n5\n0 3 3 3 3\n''') == '''\n3\n0 3 6\n'''\n\nassert solution('''\n6\n0 3 3 3 3 3\n''') == '''\n4\n0 3 6 9\n'''\n\nassert solution('''\n6\n3 3 3 3 3 3\n''') == '''\n2\n0 3\n'''\n\nassert solution('''\n2\n1 0\n''') == '''\n2\n0 1\n'''", "solution('''\n3\n1 2 3\n''') == '''\n4\n0 1 2 3\n'''\n\nassert solution('''\n4\n0 1 3 6\n''') == '''\n4\n0 1 2 7\n'''\n\nassert solution('''\n5\n1 5 7 9 10\n''') == '''\n1\n0\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n10\n17 18 2 19 0 20 15 10 5 4\n''') == '''\n12\n0 1 2 3 4 5 6 7 8 9 10 19\n'''\n\nassert solution('''\n10\n0 1 2 3 4 5 6 7 8 9\n''') == '''\n10\n0 1 2 3 4 5 6 7 8 9\n'''\n\n# submit\nprint(solution('''\n10\n0 1 2 3 4 5 6 7 8 9\n'''))", "solution(\"7\\n1 2 3 4 5 6 7\") == \"7\\n0 1 2 3 4 5 6\"\nassert solution(\"2\\n1 1\") == \"1\\n0\"\nassert solution(\"3\\n0 0 0\") == \"1\\n0\"\nassert solution(\"3\\n0 1 2\") == \"3\\n0 1 2\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1\\n0\"\nassert solution(\"5\\n2 3 3 4 4\") == \"4\\n0 1 2 3\"\nassert solution(\"10\\n162410 507753 342847 534289 3851053 7262476 2181675 131342 6383482 3417663\") == \"10\\n0 1 2 3 4 5 6 7 8 9\"\nassert solution(\"10\\n4275354 4721560 7658069 8743785 7356778 4792886 7832490 5827154 9749322 7004745\") == \"10\\n0 1 2 3 4 5 6 7 8 9\"\nassert solution(\"10\\n7900902 713706 2186618 3407807 9692292 6190555 3946076 1630982 9983295 6226388\") == \"10\\n0 1 2 3 4 5 6 7 8 9\"\nassert", "solution('''\n5\n0 1 2 3 4\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1\n1\n'''\n\nassert solution('''\n5\n1 2 1 3 4\n''') == '''\n3\n0 1 3\n'''\n\nassert solution('''\n5\n1 2 3 4 4\n''') == '''\n4\n0 1 2 3\n'''\n\nassert solution('''\n5\n1 2 3 4 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n5\n5 4 3 2 1\n''') == '''\n0\n'''\n\nassert solution('''\n5\n0 0 0 0 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n5\n0 0 0 0 4\n''') == '''\n2\n0 4\n'''\n\nassert solution('''\n5\n0 0 0 0 2\n''') == '''\n2\n0 2\n'''\n\nassert solution('''\n4\n0 0 0", "solution('''\n3\n1 2 3\n''') == '''\n3\n0 1 3\n'''\n\nassert solution('''\n3\n3 2 1\n''') == '''\n3\n0 1 3\n'''\n\nassert solution('''\n5\n5 0 4 0 2\n''') == '''\n7\n0 1 2 3 4 5 6\n'''\n\nassert solution('''\n5\n5 0 0 0 2\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n5\n5 0 0 0 0\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n5\n2 3 3 3 3\n''') == '''\n4\n0 1 2 3\n'''\n\nassert solution('''\n5\n4 4 4 4 4\n''') == '''\n1\n0\n'''\n\nassert solution('''\n4\n0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n4\n10 10 10 10\n'''\n) == '''\n1\n0\n'''\n\nassert solution('''\n4\n0 10 10 10\n'''\n) == '''\n2\n0 1\n'''\n\nassert solution('''", "solution(\"input\") == \"output\"", "solution('''\n\n''') == '''\n\n'''", "solution('''\n5\n2 3 3 3 3\n''') == '''\n5\n0 2 3 4 5\n'''\n\n# check performance\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    print(len(set(a)))\n    print(*sorted(set(a)))", "solution(\"\"\"\n3\n1 0 1\n\"\"\") == \"\"\"\n2\n0 1\n\"\"\"\n\nassert solution(\"\"\"\n3\n3 1 2\n\"\"\") == \"\"\"\n3\n1 2 3\n\"\"\"\n\nassert solution(\"\"\"\n1\n0\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"\"\"\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 0 1 1\n\"\"\") == \"\"\"\n2\n0 1\n\"\"\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 1\n\"\"\") == \"\"\"\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n3\n2 3 3\n\"\"\") == \"\"\"\n3\n2 3 4\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"\"\"\n4\n1 2 3 4\n\"\"\"\n\nassert solution(\"\"\"\n4\n0 1 2 3\n\"\"\") == \"\"\"\n4\n0 1 2 3\n\"\"\"\n\nassert solution(\"\"\"\n1\n2\n\"\"\") == \"\"\"\n2\n2 3\n\"\"\"\n\nassert solution(\"\"\"\n3\n3 2 1\n\"\"\") == \"\"\"\n3\n2 3 4\n\"\"\"\n\nassert solution(\"\"\"\n7\n0 1 2 3 4 5 6\n\"\"\") == \"\"\"\n7\n0 1 2 3 4 5 6\n\"\"\"\n\nassert solution", "solution('''\n6\n0 1 1 3 3 3\n''') == '''\n2\n0 2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n0 1 2 3 3 3 3\n''') == '''\n3\n0 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 3 3\n''') == '''\n1\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n500\n''') == '''\n1\n500\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n499\n''') == '''\n1\n499\n'''\n\n# check the correctness of solution\n", "solution('''\n4\n1 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\nassert solution('''\n4\n4 3 2 1\n''') == '''\n4\n0 1 2 3\n'''\nassert solution('''\n4\n1 1 1 1\n''') == '''\n1\n0\n'''\nassert solution('''\n5\n1 2 4 8 16\n''') == '''\n9\n0 1 2 3 4 5 6 7 8\n'''\nassert solution('''\n3\n3 3 3\n''') == '''\n1\n0\n'''\nassert solution('''\n5\n0 0 1 1 0\n''') == '''\n3\n0 1 2\n'''\nassert solution('''\n5\n1 2 3 4 1\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n1\n10\n''') == '''\n2\n0 10\n'''\nassert solution('''\n10\n1 2 4 8 16 32 64 128 256 512\n''') == '''\n1025\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44", "(solution('''\n4\n1 1 2 3\n''') == '''\n3\n2 4 5\n''')\n\n# check the correctness of solution\nassert (solution('''\n3\n1 1 2\n''') == '''\n2\n2 3\n''')\n\n# check the correctness of solution\nassert (solution('''\n4\n1 2 3 4\n''') == '''\n1\n0\n''')\n\n# check the correctness of solution\nassert (solution('''\n3\n1 2 3\n''') == '''\n1\n0\n''')\n\n# check the correctness of solution\nassert (solution('''\n3\n1 1 1\n''') == '''\n1\n1\n''')\n\n# check the correctness of solution\nassert (solution('''\n2\n1 1\n''') == '''\n1\n1\n''')\n\n# check the correctness of solution\nassert (solution('''\n1\n1\n''') == '''\n1\n0\n''')\n\n# check the correctness of solution\nassert (solution('''\n1\n2\n''') == '''\n1\n0\n''')\n\n# check the correctness of solution\nassert (solution('''\n3\n0 0 0\n''') == '''\n1", "solution('''\n4\n1 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\n\n# submit solution on codeforces\nimport sys\nfrom urllib.request import urlopen\nfrom urllib.parse import urlencode, quote_plus\nfrom json import loads\nfrom base64 import b64encode\n\nurl = 'https://codeforces.com/api/user.solution'\nraw = '''\n4\n1 2 3 4\n'''\n\ndata = {\n    'competetionId': 1291,\n    'contestId': 1291,\n    'index': 1,\n    'programTypeId': 1,\n    'source': b64encode(solution(raw).encode()).decode(),\n    'verdict': 'OK',\n    'testset': 'TESTS',\n    'passedTestCount': 0,\n    'timeConsumedMillis': 0,\n    'memoryConsumedBytes': 0,\n}\ndata = urlencode(data, quote_via=quote_plus)\ndata = data.encode()\n\nwith urlopen(url, data) as response:\n    print(response.read().decode())", "solution('''5\n5 7 5 4 1''') == '''5\n0 1 2 3 4'''\nassert solution('''4\n4 5 2 3''') == '''4\n0 1 2 3'''\nassert solution('''6\n2 3 4 1 2 3''') == '''6\n0 1 2 3 4 5'''\nassert solution('''6\n3 5 4 1 2 1''') == '''5\n0 1 2 3 4'''\nassert solution('''6\n2 1 1 2 2 2''') == '''3\n0 1 2'''\nassert solution('''2\n7 7''') == '''1\n0'''\nassert solution('''2\n2 3''') == '''2\n0 1'''\nassert solution('''6\n4 1 1 5 2 6''') == '''5\n0 1 2 3 4'''\nassert solution('''2\n2 2''') == '''1\n0'''\nassert solution('''1\n1''') == '''1\n0'''\nassert solution('''10\n2 8 3 4 8 9 7 5 1 2''') == '''8\n0 1 2 3 4 5 6 7'''\nassert solution('''5\n1 2 1 2 1''') == '''4\n0 1 2 3", "solution('''\n3\n1 4 6\n''') == '''\n2\n1 5\n'''\n\nassert solution('''\n3\n0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n7\n0 1 2 3 0 0 1\n''') == '''\n7\n0 1 2 3 4 5 6\n'''", "solution('''\n7\n1 0 2 1 4 2 2\n''') == '''\n7\n0 1 2 3 4 5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 1 2 2 3\n''') == '''\n3\n0 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n2\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n0 1 2 3 4 5 6 7 8 9\n''') == '''\n10\n0 1 2 3 4 5 6 7 8 9\n'''\n\n# use function to run with one line of stdin\nsolution(stdin)", "solution('''\n5\n1 2 3 4 5\n''') == '''\n1\n1\n'''\n\nassert solution('''\n6\n2 3 3 3 3 3\n''') == '''\n0\n'''\n\nassert solution('''\n5\n0 1 0 0 1\n''') == '''\n3\n0 2 3\n'''\n\nassert solution('''\n5\n2 3 3 3 3\n''') == '''\n1\n2\n'''\n\nassert solution('''\n5\n2 2 2 2 2\n''') == '''\n1\n0\n'''\n\nassert solution('''\n5\n2 3 3 3 4\n''') == '''\n3\n2 3 4\n'''\n\nassert solution('''\n5\n2 3 3 3 5\n''') == '''\n3\n2 3 5\n'''\n\nassert solution('''\n5\n2 3 3 4 5\n''') == '''\n4\n2 3 4 5\n'''\n\nassert solution('''\n5\n2 3 3 5 5\n''') == '''\n4\n2 3 5 6\n'''\n\nassert solution('''\n5\n2 3 4 5 5\n''') == '''\n5\n2 3 4 5 6\n'''\n\nassert solution('''\n", "solution('''\n4\n1 2 4 7\n''') == '''\n3\n1 2 8\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 5 7\n''') == '''\n3\n0 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 1 1 1\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n0 1 2 3 4 5 6 7 8 9\n''') == '''\n11\n0 1 2 3 4 5 6 7 8 9 10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n500 500 500 500 500 500 500 500 500 500\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\n", "solution(sample_input_str) == '\\n'.join(sample_output)\n\n# run", "solution('''\n4\n1 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\n\n# check whether \"Run\" button works\nprint('If \"Run\" button works correctly, this line will be printed.')", "solution('''\n4\n4 2 0 1\n''') == '''\n4\n0 1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 5 5 5 5\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 2 1\n''') == '''\n2\n0 2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n0 3\n''') == '''\n2\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 3 4\n''') == '''\n2\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 0 1\n''') == '''\n3\n0 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n''') == '''\n2\n0 2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n0 1\n''') == '''\n2\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 2\n''') == '''\n2\n0 1\n'''\n\n", "solution(\"\"\"3\n1 1 1\"\"\") == \"\"\"0\n\"\"\"\nassert solution(\"\"\"3\n1 2 3\"\"\") == \"\"\"3\n0 1 2\"\"\"\nassert solution(\"\"\"3\n1 2 2\"\"\") == \"\"\"1\n0\"\"\"\nassert solution(\"\"\"4\n1 1 1 1\"\"\") == \"\"\"0\n\"\"\"\nassert solution(\"\"\"5\n1 2 3 4 5\"\"\") == \"\"\"31\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\"\"\nassert solution(\"\"\"6\n1 3 3 4 5 6\"\"\") == \"\"\"6\n0 3 4 5 6 7\"\"\"\nassert solution(\"\"\"6\n1 3 4 6 5 7\"\"\") == \"\"\"5\n0 3 4 5 7\"\"\"\nassert solution(\"\"\"7\n1 1 2 2 3 3 4\"\"\") == \"\"\"1\n0\"\"\"\nassert solution(\"\"\"7\n1 2 3 4 5 6 7\"\"\") == \"\"\"127\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85"], "finish_reason": ["length", "length", "stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "length"], "sum_logprob": [-115.994300859354, -97.65514980622095, -72.20720690684303, -17.915030851048996, -82.66935889638413, -24.51558818389999, -58.611210679430044, -134.57780150388805, -118.49848286358844, -112.63778922328001, -74.09147017289685, -102.52764736347002, -82.33357982609857, -59.90419822756218, -43.55221372338401, -65.27101587241165, -100.57040626774395, -96.71704988902997, -20.457832057999997, -120.33739581127702, -157.74389803346546, -57.05053631235303, -53.93353494359999, -121.42802577840403, -111.73855649843904, -91.99972182346795, -27.162920480368026, -135.6746734917819, -78.080154333388, -102.98518155203101, -543.926750122284, -75.50763467450602, -91.20971377943503, -8.171662816000001, -7.373018347100001, -46.39156666442001, -91.65840349240895, -67.772249293704, -71.66627411965744, -59.226130396617016, -112.54540877381025, -164.74446704836396, -37.847500360195, -87.43969734564195, -80.02737176261833, -62.354013744871054, -29.4514490786, -40.096832785099984, -84.34300277965694, -82.17875521262802], "mean_logprob": [-0.38664766953118, -0.32551716602073666, -0.3390009713936291, -0.2756158592469077, -0.2755645296546133, -0.8755567208535714, -0.19537070226476666, -0.4485926716796267, -0.39499494287862835, -0.3754592974109333, -0.24697156724298933, -0.3417588245449, -0.274445266086995, -0.19968066075854066, -0.348417709787072, -0.2175700529080389, -0.33523468755914665, -0.32239016629676664, -0.7576974836296296, -0.4149565372802655, -0.525812993444885, -0.19016845437451, -1.0176138668603774, -0.4047600859280133, -0.37246185499479667, -0.30666573941156, -0.09054306826789334, -0.45224891163927333, -0.2602671811112933, -0.45168939277206577, -1.81308916707428, -0.2516921155816867, -0.3040323792647833, -0.9079625351111111, -0.46081364669374997, -0.5097974358727473, -0.30552801164136334, -0.22590749764568, -0.23888758039885832, -0.19742043465539, -0.3976869567979159, -0.5491482234945466, -0.43502873977235634, -0.39565473912055205, -0.26675790587539433, -0.20784671248290332, -1.2271437116083332, -0.7160148711625001, -0.28114334259885665, -0.2739291840420933]}
{"prompt": "'''\nThis is a harder version of the problem with bigger constraints.\n\nKorney Korneevich dag up an array a of length n. Korney Korneevich has recently read about the operation [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR), so he wished to experiment with it. For this purpose, he decided to find all integers x \u2265 0 such that there exists an increasing subsequence of the array a, in which the bitwise XOR of numbers is equal to x.\n\nIt didn't take a long time for Korney Korneevich to find all such x, and he wants to check his result. That's why he asked you to solve this problem!\n\nA sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA sequence s_1, s_2, \u2026 , s_m is called increasing if s_1 < s_2 < \u2026 < s_m.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 5000) \u2014 the elements of the array a.\n\nOutput\n\nIn the first line print a single integer k \u2014 the number of found x values.\n\nIn the second line print k integers in increasing order x_1, x_2, \u2026 x_k (0 \u2264 x_1 < \u2026 < x_k) \u2014 found x values.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n1 1 2\n''') == '''\n2\n1 2\n'''\n\n# submit solution\nprint(solution('''\n5\n1 1 1 2 3\n'''))", "solution(\"\"\"\n5\n1 3 4 6 7\n\"\"\") == \"\"\"\n3\n4 7 13\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n1 1 1 1 1 0\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n0 0 0 0 0 5\n\"\"\") == \"\"\"\n1\n5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 2 2 2 1\n\"\"\") == \"\"\"\n2\n1 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 2 2 2 1\n\"\"\") == \"\"\"\n2\n1 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7\n1 2 3 5 5 6 7\n\"\"\") == \"\"\"\n4\n4 7 10 12\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n8\n1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n8\n1 3 1 3 1 3 1 3\n\"\"\") == \"\"\"\n3\n1 2 4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7\n1 1 2 2 2 1 1\n\"\"\") == \"\"\"\n2\n1 2\n\"\"\"", "solution(solution_explanation) == \"\"\"\n\"\"\"", "solution('''\n2\n2 7\n''') == '''\n3\n1 5 6\n'''\n\nassert solution('''\n3\n1 1 2\n''') == '''\n3\n0 1 2\n'''\n\nassert solution('''\n3\n1 1 3\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n1\n1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n10\n''') == '''\n1\n10\n'''\n\nassert solution('''\n3\n5 5 5\n''') == '''\n1\n0\n'''\n\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n6\n1 1 1 1 1 2\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n6\n1 1 1 1 1 3\n''') == '''\n3\n0 1 2\n'''\n\nassert solution('''\n6\n1 1 1 1 1 4\n''') == '''\n4\n0 1 2 3\n", "solution(\"\"\"1\n1\n\"\"\") == \"\"\"0\n\"\"\"\n\nassert solution(\"\"\"3\n1 2 3\n\"\"\") == \"\"\"1\n1\n\"\"\"\n\nassert solution(\"\"\"4\n4 3 2 1\n\"\"\") == \"\"\"5\n0 1 2 3 4\n\"\"\"\n\nassert solution(\"\"\"3\n2 2 2\n\"\"\") == \"\"\"1\n0\n\"\"\"\n\nassert solution(\"\"\"6\n3 2 4 1 2 4\n\"\"\") == \"\"\"5\n0 1 2 3 4\n\"\"\"\n\nassert solution(\"\"\"7\n1 2 3 4 5 6 7\n\"\"\") == \"\"\"8\n0 1 2 3 4 5 6 7\n\"\"\"\n\nassert solution(\"\"\"7\n2 1 3 3 4 6 5\n\"\"\") == \"\"\"8\n0 1 2 3 4 5 6 7\n\"\"\"\n\nassert solution(\"\"\"7\n2 2 1 1 1 2 2\n\"\"\") == \"\"\"3\n0 1 2\n\"\"\"\n\nassert solution(\"\"\"3\n3 4 2\n\"\"\") == \"\"\"3\n0 1 2\n\"\"\"\n\nassert solution(\"\"\"8\n3 4 3 3 3 3 3 3\n\"\"\") == \"\"\"1\n0\n\"\"\"\n\nassert solution(\"\"\"9\n4 2 1 4 4 1 1 4 2\n\"\"\") == \"\"\"7\n0 1 2 3 4 5 6\n\"\"\"\n\n# not sure about this one\nassert solution(\"\"\"10\n1 2", "solution('''\n3\n3 1 2\n''') == '''\n2\n1 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 3 4\n''') == '''\n5\n0 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 3 5\n''') == '''\n3\n0 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 4 8 16\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n9 13 15 13 5 8\n''') == '''\n3\n0 2 8\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 0 2 3\n''') == '''\n3\n0 1 3\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n1 2 2 2 4 4 4\n''') == '''\n5\n0 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n1 2 2 2 4 4 4\n''') == '''\n5\n0 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n# get the input\nn = int(input())\na = list(map(int, input().split()))\n\n# solve the problem\nresult = solve(n, a)\n\n# format the output\noutput = str(len(result)) + '\\n' + ' '.join(map(str, result))\n\n# print to stdout (you can also write to a file)\nprint(output)", "solution('''\n3\n1 2 3\n''') == '''\n1\n0\n'''\n\nassert solution('''\n4\n2 2 3 3\n''') == '''\n2\n0\n2\n'''\n\nassert solution('''\n4\n1 1 1 1\n''') == '''\n2\n0\n1\n'''\n\nassert solution('''\n5\n1 2 2 2 2\n''') == '''\n3\n0\n1\n2\n'''\n\n# let's try another example\nassert solution('''\n''') == '''\n'''\n\n# let's try another example\nassert solution('''\n''') == '''\n'''\n\n# let's try another example\nassert solution('''\n''') == '''\n'''\n\n# let's try another example\nassert solution('''\n''') == '''\n'''\n\n# let's try another example\nassert solution('''\n''') == '''\n'''\n\n# let's try another example\nassert solution('''\n''') == '''\n'''\n\n# let's try another example\nassert solution('''\n''') == '''\n'''\n\n# let's try another example\nassert solution('''\n''') == '''\n'''\n\n#", "solution('''\n5\n0 1 1 1 1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n5\n1 0 1 1 1\n''') == '''\n3\n0 1 2\n'''\n\nassert solution('''\n5\n1 0 1 1 0\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n5\n1 0 1 1 3\n''') == '''\n6\n0 1 2 3 4 6\n'''\n\n# test on a local machine\nimport os\n\ncwd = os.getcwd()\ninput_file = open(f'{cwd}/input.txt', 'r')\n\nstdin = input_file.read()\n\ninput_file.close()\n\nprint(solution(stdin))", "solution('''\n4\n1 2 4 5\n''') == '''\n4\n0 1 3 6\n'''\n\nassert solution('''\n3\n1 1 3\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n7\n2 3 5 7 9 11 13\n''') == '''\n7\n0 1 2 3 4 5 6\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n2\n''') == '''\n1\n2\n'''\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '''\n1\n5\n'''\n\nassert solution('''\n5\n3 2 3 3 3\n''') == '''\n4\n0 1 2 3\n'''\n\n# stress testing\n\ndef run(func, test_cases, max_time_limit=5, min_case_limit=100, max_case_limit=100, case_limit_step=100, max_case_time_limit=5):\n    import random\n    import time\n\n    results = []\n    for i in range(min_case_limit, max_case_limit, case_limit_step):\n        start", "solution(r'''\n2\n2 3\n''') == r'''\n4\n0 1 2 3\n'''\n\n# check the correctness of solution\nassert solution(r'''\n4\n1 2 3 4\n''') == r'''\n7\n0 1 2 3 4 5 6\n'''\n\n# check the correctness of solution\nassert solution(r'''\n4\n2 3 1 4\n''') == r'''\n7\n0 1 2 3 4 5 6\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n3 2\n''') == r'''\n4\n0 1 2 3\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n3\n''') == r'''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n2 2\n''') == r'''\n2\n0 1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n2 4\n''') == r'''\n3\n0 1 2\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n1 1 1\n''') == r'''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution(r", "solution('''\n5\n1 1 2 1 5\n''') == '''\n3\n0 1 2\n'''\nassert solution('''\n3\n3 2 1\n''') == '''\n1\n3\n'''\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '''\n1\n0\n'''\nassert solution('''\n7\n1 1 1 1 1 1 1\n''') == '''\n1\n0\n'''\nassert solution('''\n6\n5 1 4 2 3 6\n''') == '''\n4\n1 2 3 5\n'''\n\n# print the solution with time\nimport time\nimport os\n\nstart = time.time()\ninput_path = os.path.abspath('') + '/input.txt'\nanswer = solution(open(input_path, 'r').read())\nwith open('output.txt', 'w') as f:\n    f.write(str(answer))\nend = time.time()\nprint('Time: {0}'.format(end - start))", "solution('''\n5\n1 2 4 7 9\n''') == '''\n3\n3 6 10\n'''\n\nassert solution('''\n4\n4 4 4 4\n''') == '''\n1\n0\n'''\n\nassert solution('''\n2\n0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n3\n1 1 1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n5\n0 1 2 3 4\n''') == '''\n5\n0 1 2 3 4\n'''\n\n# print solution\nwith open('solution.txt', 'w+') as file:\n    file.write(solution(open('input.txt', 'r').read()))", "solution('''\n5\n1 5 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\nassert solution('''\n4\n0 1 0 0\n''') == '''\n1\n0\n'''\nassert solution('''\n6\n1 5 4 3 4 5\n''') == '''\n4\n0 1 3 5\n'''\nassert solution('''\n8\n1 5 4 1 4 1 4 2\n''') == '''\n8\n0 1 2 3 4 5 6 7\n'''\n\n# let's try to solve more advanced problem of given x find maximal length of increasing subsequence with XOR=x\n# XOR is associative and commutative\n# so let's build the prefix xor array\n# prefix_xor_array[i] = XOR(a[0], a[1], ..., a[i])\n# then sequence (a[i], a[j]) has XOR value x \n# iff prefix_xor_array[j] ^ prefix_xor_array[i-1] = x\n# we need to find all such pairs (i, j)\n# but we can't precompute all possible pairs \n# and test them for condition\n# we will sort prefix_xor_array\n# then for each prefix_xor_", "solution('''\n5\n1 2 3 4 5\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n7\n1 1 2 2 3 4 5\n''') == '''\n7\n0 1 2 3 4 5 6\n'''\nassert solution('''\n4\n4 3 2 1\n''') == '''\n4\n0 1 2 3\n'''\nassert solution('''\n7\n1 1 2 2 3 4 5\n''') == '''\n7\n0 1 2 3 4 5 6\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n6\n1 2 3 4 5 5\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n4\n4 3 2 1\n''') == '''\n4\n0 1 2 3\n'''\nassert solution('''\n2\n0 0\n''') == '''\n1\n0\n'''\nassert solution('''\n6\n2 3 4 4 3 3\n''') == '''\n4\n0 2 3 5\n'''\nassert solution('''\n8\n0 1 0 1 0 1 1 0\n''') == '''\n2", "solution('''\n3\n1 2 3\n''') == '''\n3\n0 1 3\n'''\nassert solution('''\n4\n1 2 3 4\n''') == '''\n6\n0 1 2 3 4 5\n'''\nassert solution('''\n3\n2 3 4\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n4\n1 2 4 8\n''') == '''\n9\n0 1 2 3 4 5 6 7 8\n'''\nassert solution('''\n4\n2 3 7 8\n''') == '''\n7\n0 1 2 3 4 5 6\n'''\nassert solution('''\n4\n2 4 7 8\n''') == '''\n7\n0 1 2 3 4 5 6\n'''\nassert solution('''\n4\n2 7 9 11\n''') == '''\n3\n0 1 2\n'''\nassert solution('''\n4\n2 3 11 12\n''') == '''\n4\n0 1 2 3\n'''\nassert solution('''\n4\n2 4 11 12\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n4\n2 3 7 13\n''') == '''\n5\n0 1 2 3 4\n'''", "solution('''\n3\n1 2 3\n''') == '''\n3\n0 1 3\n'''\n\nassert solution('''\n3\n1 1 1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n6\n1 1 1 1 2 3\n''') == '''\n1\n0\n'''\n\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n6\n1 1 2 1 1 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n6\n1 2 1 1 1 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n6\n1 1 1 2 1 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n6\n1 1 1 1 2 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n6\n1 1 1 1 1 2\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n6\n1 2 1 1 1 2\n''') == '''\n3\n0 1 2\n'''\n\nassert solution('''\n6\n", "solution('''\n5\n1 2 2 3 4\n''') == '''\n3\n0 1 2\n'''\n\n# get the input\nstdin = open('input.txt', 'r')\ninput = stdin.read()\n\n# solve the problem\noutput = solution(input)\n\n# print the result\nprint(output)", "solution('''\n5\n1 2 3 4 5\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n5\n1 2 3 4 6\n''') == '''\n5\n0 1 2 3 7\n'''\n\nassert solution('''\n3\n3 5 7\n''') == '''\n3\n0 3 4\n'''\n\nassert solution('''\n10\n1000 999 998 997 996 995 994 993 992 991\n''') == '''\n10\n0 1 2 3 4 5 6 7 8 9\n'''\n\nassert solution('''\n10\n1000 999 998 997 996 995 994 993 992 1\n''') == '''\n10\n0 1 2 3 4 5 6 7 8 1001\n'''\n\n# print(solution('''\n# 1\n# 0\n# '''))\n\n# print(solution('''\n# 2\n# 0 2\n# '''))\n\n# print(solution('''\n# 3\n# 0 1 2\n# '''))\n\n# print(solution('''\n# 4\n# 0 1 2 3\n# '''))\n\n# print(solution('''\n# 5\n# 0 1 2 3 4\n", "solution('''\n4\n4 2 1 6\n''') == '''\n4\n0 1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 3\n''') == '''\n3\n0 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 2 1\n''') == '''\n2\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n0 1\n''') == '''\n2\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 1 1\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n0 0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 0 1\n''') == '''\n2\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n2 2 2\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution", "solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"\"\"\n4\n0 1 2 3\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2 1 4\n\"\"\") == \"\"\"\n4\n0 1 2 3\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 3 3 3\n\"\"\") == \"\"\"\n2\n0 3\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2 4 5\n\"\"\") == \"\"\"\n5\n0 1 2 3 4\n\"\"\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# # Stress Testing\nfrom random import randint\ndef stress(n: int) -> str:\n    input = str(n) + \"\\n\"\n    input += \" \".join([str(randint(0, 5000)) for _ in range(n)]) + \"\\n\"\n    return input\n\nwhile True:\n    input = stress(randint(1, 1000000))\n    print(input)\n    solution(input)", "solution(\n'''\n4\n1 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\nassert solution(\n'''\n4\n4 3 2 1\n''') == '''\n1\n0\n'''\nassert solution(\n'''\n4\n1 2 4 3\n''') == '''\n3\n0 1 3\n'''\nassert solution(\n'''\n2\n0 4\n''') == '''\n3\n0 4\n'''\nassert solution(\n'''\n3\n0 1 5\n''') == '''\n3\n0 1 5\n'''\nassert solution(\n'''\n6\n0 0 1 2 3 4\n''') == '''\n6\n0 1 2 3 4 5\n'''\nassert solution(\n'''\n7\n0 1 2 3 4 5 6\n''') == '''\n7\n0 1 2 3 4 5 6\n'''\nassert solution(\n'''\n1\n4\n''') == '''\n1\n4\n'''\nassert solution(\n'''\n1\n0\n''') == '''\n1\n0\n'''\nassert solution(\n'''\n2\n2 3\n''') == '''\n2\n2 3\n'''\nassert solution(\n'''\n10\n0 1 2 3 4 5 6 7", "solution(sample) == expected\n# run the tests\nfrom runner import run_solution\nfrom subprocess import run\n\nout, err, exit_code = run_solution(solution, sample)\nassert exit_code == 0\nassert out == expected\nassert err == ''", "solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"\"\"\n3\n0 1 2\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\nassert solution(\"\"\"\n5\n1 3 2 4 1\n\"\"\") == \"\"\"\n4\n0 1 2 5\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2 4 8\n\"\"\") == \"\"\"\n4\n0 1 2 9\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 1 1 1\n\"\"\") == \"\"\"\n2\n0 1\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 1 2 2\n\"\"\") == \"\"\"\n3\n0 1 2\n\"\"\"\n\n# simulate stdin\nimport sys\nfrom io import StringIO\nstdin = StringIO(\"\"\"\n4\n1 1 2 2\n\"\"\")\nsys.stdin = stdin\n\n# run the solution\nfrom main import solution\nsolution()", "solution(test_in) == test_out, \"Something goes wrong!\"\n\n# performance test\nimport timeit\n\nprint(\n    timeit.timeit(\n        stmt=\"solution(test_in)\", setup=\"from __main__ import solution, test_in\", number=1\n    )\n)", "solution(data_for_tests.tasks_test_data[\"8b\"][\"input\"]) == data_for_tests.tasks_test_data[\"8b\"][\"output\"]", "solution('''\n3\n1 2 3\n''') == '''\n3\n0 1 3\n'''\n\nassert solution('''\n3\n2 3 3\n''') == '''\n1\n0\n'''\n\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n8\n1 1 1 0 1 0 0 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n5\n5 4 3 2 1\n''') == '''\n1\n5\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n5\n0 1 2 3 4\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n5\n4 3 2 1 0\n''') == '''\n1\n4\n'''\n\nassert solution('''\n7\n0 0 0 0 1 1 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n7\n0 0 0 0 1 0 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n6\n", "solution('''\n3\n1 2 3\n''') == '''\n3\n0 1 3\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 1 2 4 5\n''') == '''\n6\n0 1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 4 3 2 1\n''') == '''\n6\n0 1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 1 1 1 1\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n10 0 10 0 10\n''') == '''\n3\n0 10 10\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 10 0 10 0\n''') == '''\n2\n0 10\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n7\n0 1 2 3 4 5 6\n'''\n\n# check the correctness of solution\nassert solution", "solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\") == \"\", \"example\"\nassert solution(\"\")", "solution('''\n3\n3 2 1\n''') == '''\n3\n0 1 3\n'''\n\nassert solution('''\n4\n1 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\n\nassert solution('''\n5\n0 1 1 0 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n6\n0 0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n3\n3 2 1\n''') == '''\n3\n0 1 3\n'''\n\nassert solution('''\n9\n0 1 2 3 4 5 6 7 8\n''') == '''\n9\n0 1 2 3 4 5 6 7 8\n'''\n\nassert solution('''\n2\n0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n3\n1 2 3\n''') == '''\n3\n0 1 3\n'''\n\nassert solution('''\n1\n0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8", "solution('''5\n1 2 3 4 5''') == '''5\n0 1 2 3 4'''\nassert solution('''6\n1 3 5 3 7 9''') == '''5\n0 1 3 5 6'''\nassert solution('''1\n1''') == '''1\n0'''\nassert solution('''2\n1 1''') == '''1\n0'''\nassert solution('''3\n1 1 1''') == '''1\n0'''\nassert solution('''4\n1 2 1 2''') == '''3\n0 1 3'''\nassert solution('''3\n2 3 5''') == '''3\n0 1 7'''\nassert solution('''4\n0 0 2 4''') == '''4\n0 1 2 4'''\nassert solution('''10\n0 0 1 2 3 4 5 6 7 8''') == '''10\n0 1 2 3 4 5 6 7 8 9'''\nassert solution('''10\n0 0 2 4 6 8 10 12 14 16''') == '''9\n0 1 2 4 6 8 10 14 16'''\nassert solution('''15\n0 0 2 4 6 8 10 12 14 16 18 20 22 24 26''') == '''9\n0 1 2 4 6 8 10 14 16'''\n", "solution('''\n5\n1 2 3 4 5\n''') == '''\n5\n0 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 0 0 2\n''') == '''\n3\n0 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n0 0 0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 2 1 1\n''') == '''\n2\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 4 8\n''') == '''\n6\n0 1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n0 0 0 0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n0 5000\n''') == '''\n2\n0 5000\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n1 4 5 2 1 1 1\n''') ==", "solution(r'''\n5\n1 2 4 8 16\n''') == r'''\n7\n0 1 2 3 4 8 17\n'''\n\nassert solution(r'''\n5\n3 2 4 8 16\n''') == r'''\n8\n0 1 2 3 4 6 8 12\n'''\n\nassert solution(r'''\n6\n1 2 3 4 5 6\n''') == r'''\n6\n0 1 2 3 4 5\n'''\n\nassert solution(r'''\n6\n4 2 1 8 16 32\n''') == r'''\n12\n0 1 2 3 4 5 6 7 8 9 10 15\n'''\n\nassert solution(r'''\n4\n0 0 0 0\n''') == r'''\n1\n0\n'''\n\nassert solution(r'''\n3\n3 4 5\n''') == r'''\n3\n0 1 2\n'''\n\nassert solution(r'''\n1\n100\n'''\n) == r'''\n1\n0\n'''\n\nassert solution(r'''\n6\n0 0 0 0 0 0\n''') == r'''\n1\n0\n'''\n\nassert solution(r'''\n5\n0 0 0 0 0\n''') == r'''\n1\n0\n'''\n\nassert solution", "solution(\"\"\"\n2\n1 5\n\"\"\") == \"\"\"\n4\n0 1 2 3\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"\"\"\n8\n0 1 2 3 4 5 6 7\n\"\"\"\n\nassert solution(\"\"\"\n7\n1 2 3 2 3 4 5\n\"\"\") == \"\"\"\n16\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\"\"\"\n\n# check the performance of solution\nimport timeit\n\nt = timeit.Timer(lambda: solution(\"\"\"\n7\n1 2 3 2 3 4 5\n\"\"\"))\nprint(t.timeit(1))", "solution('''\n2\n2 2\n''') == '''\n0\n'''\n\nassert solution('''\n3\n1 2 2\n''') == '''\n3\n0 1 2\n'''\n\nassert solution('''\n4\n0 1 0 0\n''') == '''\n3\n0 1 2\n'''\n\nassert solution('''\n4\n1 1 1 1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n4\n0 2 0 2\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n5\n0 1 2 3 4\n''') == '''\n11\n0 1 2 3 4 5 6 7 8 9 10\n'''\n\nassert solution('''\n7\n0 0 1 1 1 1 0\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n5\n5 5 5 5 5\n'''\n) == '''\n1\n0\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n'''\n) == '''\n1\n0\n'''\n\nassert solution('''\n1\n0\n'''\n) == '''\n1\n0\n'''\n\nassert solution('''", "solution('''\n4\n1 2 3 4\n''') == '''\n4\n0 1 2 3\n'''\nassert solution('''\n4\n4 3 2 1\n''') == '''\n1\n0\n'''\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\n1\n0\n'''\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n6\n1 2 4 5 6 8\n''') == '''\n4\n0 1 2 6\n'''\nassert solution('''\n3\n1 2 1\n''') == '''\n3\n0 1 2\n'''\nassert solution('''\n1\n1\n''') == '''\n1\n0\n'''\nassert solution('''\n10\n6 9 2 5 3 1 3 3 7 9\n''') == '''\n6\n0 1 2 3 6 7\n'''\n\n# run with fileIO\nwith open('test_case.in', 'r') as f:\n    with open('test_case.out', 'w') as o:\n        o.write(solution(f.read()))", "solution('''\n3\n1 2 4\n''') == '''\n4\n0 1 2 5\n'''\nassert solution('''\n4\n2 3 4 5\n''') == '''\n8\n0 1 2 3 4 5 6 7\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n16\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n'''\nassert solution('''\n10\n1 0 1 1 0 1 0 1 0 1\n''') == '''\n3\n0 2 3\n'''\n\n# print('done')", "solution(sample_input1) == sample_output1\nassert solution(sample_input2) == sample_output2\nassert solution(sample_input3) == sample_output3\nassert solution(sample_input4) == sample_output4\nassert solution(sample_input5) == sample_output5\nassert solution(sample_input6) == sample_output6\nassert solution(sample_input7) == sample_output7\nassert solution(sample_input8) == sample_output8\nassert solution(sample_input9) == sample_output9\nassert solution(sample_input10) == sample_output10\nassert solution(sample_input11) == sample_output11\nassert solution(sample_input12) == sample_output12\nassert solution(sample_input13) == sample_output13\nassert solution(sample_input14) == sample_output14\nassert solution(sample_input15) == sample_output15\nassert solution(sample_input16) == sample_output16\nassert solution(sample_input17) == sample_output17\nassert solution(sample_input18) == sample_output18\nassert solution(sample_input19) == sample_output19\nassert solution(sample_input20) == sample_output20\nassert solution(sample_input21) == sample_output21\nassert solution(sample_input22", "solution('''\n5\n1 3 2 4 7\n''') == '''\n3\n2 3 6\n'''\n\nassert solution('''\n5\n1 2 4 8 16\n''') == '''\n4\n1 3 5 9\n'''\n\nassert solution('''\n4\n0 5000 1 5000\n''') == '''\n2\n0 5000\n'''\n\nassert solution('''\n1\n0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n8\n0 0 1 2 3 1 4 7\n''') == '''\n5\n0 1 2 4 7\n'''\n\nassert solution('''\n6\n0 0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n9\n1101 1010 0101 1101 0101 1010 0101 1101 1010\n''') == '''\n4\n1 2 3 11\n'''\n\nassert solution('''\n4\n4 4 4 4\n''') == '''\n1\n4\n'''\n\nassert solution('''\n7\n1000 1000 1000 1000 1000 1000 1000\n''') == '''\n1\n1000\n'''\n\nassert solution('''\n3\n1 2 4\n''') == '''\n3\n1 2 4", "solution(\"5\\n1 2 3 4 5\") == \"1\\n0\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\\n0\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\\n0\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\\n0\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\\n0\"\n\n# get the output of the program for local testing\ndef local_testing(file_name: str) -> str:\n    with open(file_name, \"r\") as file:\n        return solution(file.read())\n\n# get the output of the program for local testing\noutput = local_testing(\"data/input.txt\")\n\n# output the solution\nprint(output)", "solution(solution_example1) == solution_example1_solution\nassert solution(solution_example2) == solution_example2_solution\nassert solution(solution_example3) == solution_example3_solution\nassert solution(solution_example4) == solution_example4_solution\nassert solution(solution_example5) == solution_example5_solution\nassert solution(solution_example6) == solution_example6_solution\nassert solution(solution_example7) == solution_example7_solution\nassert solution(solution_example8) == solution_example8_solution\nassert solution(solution_example9) == solution_example9_solution\nassert solution(solution_example10) == solution_example10_solution\nassert solution(solution_example11) == solution_example11_solution\nassert solution(solution_example12) == solution_example12_solution\nassert solution(solution_example13) == solution_example13_solution\nassert solution(solution_example14) == solution_example14_solution\nassert solution(solution_example15) == solution_example15_solution\nassert solution(solution_example16) == solution_example16_solution\nassert solution(solution_example17) == solution_example", "solution(\"\"\"3\n1 2 3\"\"\") == \"\"\"3\n1 2 3\"\"\"\nassert solution(\"\"\"5\n2 3 1 5 4\"\"\") == \"\"\"4\n1 2 3 4\"\"\"\nassert solution(\"\"\"7\n7 6 5 4 3 2 1\"\"\") == \"\"\"8\n0 1 2 3 4 5 6 7\"\"\"\nassert solution(\"\"\"1\n1\"\"\") == \"\"\"1\n1\"\"\"\nassert solution(\"\"\"5\n1 2 3 4 5\"\"\") == \"\"\"2\n1 2\"\"\"\nassert solution(\"\"\"10\n1 1 1 1 1 1 1 1 1 1\"\"\") == \"\"\"1\n1\"\"\"\nassert solution(\"\"\"8\n2 3 4 2 3 4 2 3 4\"\"\") == \"\"\"7\n1 2 3 4 5 6 7\"\"\"\nassert solution(\"\"\"9\n2 3 4 5 2 3 4 5 2\"\"\") == \"\"\"8\n1 2 3 4 5 6 7 8\"\"\"\nassert solution(\"\"\"5\n5 4 3 2 1\"\"\") == \"\"\"1\n0\"\"\"\nassert solution(\"\"\"8\n3 2 1 4 3 2 1 4\"\"\") == \"\"\"3\n1 2 3\"\"\"\nassert solution(\"\"\"6\n2 3 4 5 6 3\"\"\") == \"\"\"7\n1 2 3 4 5 6 7\"\"\"\nassert solution(\"\"\"10\n1 2 3 4 5 6 7 8 9 10\"\"\") == \"\"\"2\n1 2\"\"\"\nassert solution(\"\"\"7\n1 2", "solution('''5\n5 1 2 4 3''') == '''5\n0 1 2 3 4'''\nassert solution('''2\n0 0''') == '''1\n0'''\nassert solution('''8\n0 0 0 0 0 0 0 0''') == '''1\n0'''\nassert solution('''2\n0 1''') == '''2\n0 1'''\nassert solution('''3\n1 2 3''') == '''4\n0 1 2 3'''\nassert solution('''4\n3 0 1 2''') == '''4\n0 1 2 3'''\nassert solution('''4\n1 0 2 1''') == '''4\n0 1 2 3'''\nassert solution('''4\n2 1 0 3''') == '''4\n0 1 2 3'''\nassert solution('''5\n1 2 3 4 5''') == '''5\n0 1 2 3 4'''\nassert solution('''5\n5 4 3 2 1''') == '''5\n0 1 2 3 4'''\nassert solution('''5\n2 3 4 5 1''') == '''5\n0 1 2 3 4'''\nassert solution('''5\n1 2 3 0 4''') == '''5\n0 1 2 3 4'''\n", "solution('''\n3\n1 2 3\n''') == '''\n3\n0 1 3\n'''\n\n# test the speed of solution\nimport timeit\nimport random\n\nn = 100000\na = [random.randint(0, 5000) for _ in range(n)]\nstdin = '\\n'.join([str(n), ' '.join(map(str, a))])\n\nprint(timeit.timeit('solution(stdin)', globals=globals(), number=1))", "solution(\"123\\nabc\") == \"23\\nab\", \"error\"\nassert solution(\"5\\n1 2 3 4 5\") == \"32\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\", \"error\"\nassert solution(\"6\\n5 4 3 2 1 1\") == \"30\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\", \"error\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1\\n0\", \"error\"\nassert solution(\"6\\n1000 1000 1000 1000 1000 1000\") == \"1\\n1000\", \"error\"\nassert solution(\"6\\n1000 1000 1000 1000 1000 2000\") == \"1042\\n1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042\", \"error\"\n\n# simple testing function\ndef test(n: int, func, *args):\n    for", "solution('''\n5\n3 2 4 5 3\n''') == '''\n2\n0 1\n'''\nassert solution('''\n8\n0 2 0 0 2 2 2 2\n''') == '''\n6\n0 1 2 3 4 5\n'''\nassert solution('''\n10\n0 1 2 3 4 5 6 7 8 9\n''') == '''\n1\n0\n'''\nassert solution('''\n11\n7 6 5 4 3 2 1 0 1 2 3\n''') == '''\n6\n0 1 2 3 4 5\n'''\nassert solution('''\n10\n0 0 1 1 1 1 2 2 2 2\n''') == '''\n4\n0 1 2 3\n'''\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1\n0\n'''\nassert solution('''\n1\n5000\n''') == '''\n1\n0\n'''\nassert solution('''\n9\n0 2 0 0 2 2 2 2 1\n''') == '''\n6\n0 1 2 3 4 5\n'''\nassert solution('''\n8\n2 3 3 1 3 3 0 3\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n10\n1 1 1 0 2", "solution(example1) == example1_output\nassert solution(example2) == example2_output\nassert solution(example3) == example3_output\nassert solution(example4) == example4_output\nassert solution(example5) == example5_output\nassert solution(example6) == example6_output\nassert solution(example7) == example7_output\nassert solution(example8) == example8_output\nassert solution(example9) == example9_output\nassert solution(example10) == example10_output\n\n# display the output\nprint(solution(stdin))", "solution(r'''\n5\n1 5 2 4 3\n''') == r'''\n7\n0 1 2 3 4 5 6\n'''\n\n# get the input & run the solution\nwith open('input.txt', 'r') as infile:\n    with open('output.txt', 'w') as outfile:\n        outfile.write(solution(infile.read()))", "solution('''\n5\n1 2 2 1 3\n''') == '''\n3\n1 2 3\n'''\nassert solution('''\n3\n1 2 3\n''') == '''\n3\n0 1 2\n'''\nassert solution('''\n3\n3 2 1\n''') == '''\n3\n0 1 2\n'''\nassert solution('''\n4\n1 1 1 1\n''') == '''\n1\n0\n'''\nassert solution('''\n4\n2 3 4 5\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n4\n0 0 0 0\n''') == '''\n1\n0\n'''\nassert solution('''\n4\n4 3 2 1\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n4\n1 2 3 4\n''') == '''\n5\n0 1 2 3 4\n'''\nassert solution('''\n10\n1 1 1 2 3 3 4 4 5 5\n''') == '''\n6\n0 1 2 3 4 5\n'''\nassert solution('''\n3\n1 2 4\n''') == '''\n4\n0 1 2 3\n'''\nassert solution('''\n8\n1 2 4", "solution(\"1\\n1\") == \"1\\n1\"\nassert solution(\"1\\n0\") == \"1\\n0\"\nassert solution(\"2\\n1 1\") == \"2\\n0 1\"\nassert solution(\"3\\n1 2 3\") == \"3\\n0 1 3\"\nassert solution(\"4\\n1 2 2 3\") == \"4\\n0 1 2 3\"\nassert solution(\"4\\n3 3 3 3\") == \"1\\n0\"\nassert solution(\"5\\n1 2 3 4 5\") == \"7\\n0 1 2 3 4 5 6\"\nassert solution(\"6\\n2 3 3 3 3 3\") == \"2\\n0 1\"\nassert solution(\"7\\n5 5 5 5 5 5 5\") == \"1\\n0\"\nassert solution(\"10\\n0 0 0 0 0 0 0 0 0 0\") == \"1\\n0\"\nassert solution(\"3\\n3 2 1\") == \"1\\n0\"\nassert solution(\"6\\n0 1 1 2 2 3\") == \"6\\n0 1 2 3 4 5\"\nassert solution(\"8\\n2 3 5 8 12 16 24 30\") == \"32\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30"], "finish_reason": ["stop", "length", "stop", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "length", "length", "stop", "stop", "length", "length"], "sum_logprob": [-26.52452502721, -117.05809128348002, -22.063423346, -74.43183876350014, -153.82545554493296, -109.33041261821198, -32.10584178966, -60.01085108515901, -83.12295183985503, -160.90393220355006, -65.28248658407502, -119.64275855840998, -64.08167579527404, -270.10246984714905, -96.10995270311498, -91.30130975908597, -55.27299303279295, -29.09263803604, -83.69167973886557, -61.058557574423006, -91.31342779472597, -90.50933304718, -52.99401398647, -92.14411250254501, -48.93046768438, -38.987347160340015, -83.28268960599007, -67.48304765663431, -19.517817064509998, -75.97130760478498, -109.26426110075904, -86.71342307751101, -103.80509117223201, -58.762285972899996, -90.42071836504775, -128.71234908147497, -59.286589921767, -14.219984045473304, -146.11138429197695, -62.528000799069, -21.653598101418506, -127.785852094627, -88.723411711379, -40.905022769093996, -124.82024845745505, -137.59533410648206, -31.086366493263995, -37.62479392423999, -81.37897630103703, -115.02858601499302], "mean_logprob": [-0.5304905005442, -0.3901936376116, -1.5759588104285713, -0.248106129211667, -0.51275151848311, -0.3644347087273733, -0.2918712889969091, -0.20003617028386333, -0.4306888696365544, -0.5363464406785, -0.21760828861358333, -0.4863526770667073, -0.3560093099737444, -0.9003415661571633, -0.3203665090103833, -0.3043376991969533, -0.18424331010931, -0.36826124096253166, -0.27897226579621864, -0.20352852524807666, -0.4058374568654489, -0.30169777682393334, -0.8411748251820635, -0.4430005408776202, -0.6891615166814085, -0.866385492452, -0.2776089653533, -0.224943492188781, -0.06505939021503333, -0.25323769201595, -0.36421420366919666, -0.28904474359170335, -0.3460169705741067, -0.4080714303673611, -0.3014023945501593, -0.45004317860655596, -0.4145915379144545, -0.04739994681824433, -0.4870379476399233, -0.3361720473068226, -0.07217866033806167, -0.42595284031542335, -0.29574470570459666, -0.34087518974245, -0.41606749485818334, -0.4586511136882733, -0.23198780965122387, -0.4134592738927472, -0.27126325433679, -0.3834286200499767]}
{"prompt": "'''\nA bow adorned with nameless flowers that bears the earnest hopes of an equally nameless person.\n\nYou have obtained the elegant bow known as the Windblume Ode. Inscribed in the weapon is an array of n (n \u2265 3) positive distinct integers (i.e. different, no duplicates are allowed).\n\nFind the largest subset (i.e. having the maximum number of elements) of this array such that its sum is a composite number. A positive integer x is called composite if there exists a positive integer y such that 1 < y < x and x is divisible by y.\n\nIf there are multiple subsets with this largest size with the composite sum, you can output any of them. It can be proven that under the constraints of the problem such a non-empty subset always exists.\n\nInput\n\nEach test consists of multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (3 \u2264 n \u2264 100) \u2014 the length of the array.\n\nThe second line of each test case contains n distinct integers a_{1},a_{2},...,a_{n} (1 \u2264 a_{i} \u2264 200) \u2014 the elements of the array.\n\nOutput\n\nEach test case should have two lines of output.\n\nThe first line should contain a single integer x: the size of the largest subset with composite sum. The next line should contain x space separated integers representing the indices of the subset of the initial array.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n3\n2 3 4\n10\n1 2 3 4 5 6 7 8 9 10\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n1\n9\n3 4 5 6 7 8 9 10\n0\n'''", "solution(stdin) == stdout\n \n# run my solution\nsolution(stdin)\n\n'''\n# Sample Input\n5\n5\n1 2 3 4 5\n5\n1 2 3 4 6\n5\n1 4 6 8 12\n8\n1 4 6 8 12 14 15 16\n12\n1 4 6 8 12 14 15 16 18 20 21 24\n\n# Sample Output\n4\n1 2 3 4\n4\n1 2 3 5\n4\n1 2 3 6\n4\n1 2 3 4\n4\n1 2 3 4\n'''", "solution('''\n1\n8\n2 4 3 5 5 3 3 6\n''') == '''\n5\n1 2 3 5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3\n2 3 5\n3\n2 4 5\n''') == '''\n1\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n2 3 4\n3\n2 3 6\n3\n2 3 5\n''') == '''\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n6\n2 3 4 5 6 7\n6\n2 3 4 5 6 8\n6\n2 3 4 5 6 9\n6\n2 3 4 5 6 10\n''') == '''\n4\n1 2 4 5\n4\n1 2 4 5\n4\n1 2 4 5\n4\n1 2 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n8\n2 3 4 5 6 7 8 9\n8\n2 3 4 5 6 7 8 10\n8\n2 3 4 5 6 7 8 11\n8\n2 3 4 5 6 7 8 12\n8\n2 3 4 5 6 7 8 13\n''') == '''\n5\n1 2 4", "solution(__file__) == ''\nprint('OK')", "solution('''\n3\n3\n3 1 2\n3\n1 2 3\n3\n1 2 5\n''') == '''\n2\n1 2\n0\n1 2\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n18 5 7 9 11 10 8 1 2 3\n''') == '''\n5\n0 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution('''\n1\n5\n1 2 4 6 12\n''') == '''\n4\n1 2 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3\n1 2 3\n4\n1 2 3 4\n''') == '''\n1\n2\n2\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 4 8\n''') == '''\n4\n1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 2 3\n''') == '''\n1\n2\n2\n1 2\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n2\n1 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(''", "(solution(\"\"\"\n1\n7\n1 2 4 6 8 10 12\n\"\"\") == \"\"\"\n4\n2 3 5 6\n\"\"\")\n\nassert (solution(\"\"\"\n2\n4\n4 6 8 10\n3\n3 6 9\n\"\"\") == \"\"\"\n3\n1 2 3\n2\n1 2\n\"\"\")", "solution('''\n5\n5\n5 7 8 3 5\n5\n5 7 9 3 5\n5\n5 7 9 10 5\n5\n5 7 9 10 5\n5\n5 7 9 10 5\n''') == '''\n2\n1 3\n2\n2 3\n2\n2 3\n1\n1\n'''\n\n# submit solution\nsolution(stdin=open('../inputs/solve_d_input.txt', 'r'))", "solution('''\n2\n6\n5 3 4 8 2 6\n4\n4 3 5 2\n''') == '''\n4\n1 3 4 6\n3\n2 3 4\n'''", "solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n1\n4\n\"\"\"\nassert solution(\"\"\"\n1\n5\n1 2 3 5 7\n\"\"\") == \"\"\"\n2\n2 3\n\"\"\"\nassert solution(\"\"\"\n2\n3\n1 2 3\n3\n1 2 4\n\"\"\") == \"\"\"\n0\n\n1\n3\n\"\"\"\n\nassert solution(\"\"\"\n1\n6\n1 2 4 6 12 24\n\"\"\") == \"\"\"\n2\n2 3\n\"\"\"\n\nassert solution(\"\"\"\n1\n8\n1 2 3 4 5 6 7 8\n\"\"\") == \"\"\"\n2\n2 3\n\"\"\"\n\nassert solution(\"\"\"\n1\n9\n1 2 3 4 5 6 7 8 9\n\"\"\") == \"\"\"\n3\n3 4 5\n\"\"\"\n\nassert solution(\"\"\"\n1\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\n4\n4 5 6 7\n\"\"\"\n\nassert solution(\"\"\"\n2\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 4 5 6 7 8\n\"\"\") == \"\"\"\n2\n2 3\n\n2\n2 3\n\"\"\"\n\nassert solution(\"\"\"\n1\n8\n1 2 3 4 5 6 7 8\n\"\"\") == \"\"\"\n2\n2 3\n\"\"\"\n\nassert solution(\"\"\"\n1\n", "solution(\"1\\n4\\n4 5 6 12\") == \"3\\n1 2 3\", \"TEST 1\"\nassert solution(\"2\\n4\\n4 5 6 12\\n5\\n6 5 4 3 2\") == \"3\\n1 2 3\\n4\\n1 2 3 4\", \"TEST 2\"\nassert solution(\"1\\n10\\n5 7 3 4 6 8 9 2 4 1\") == \"3\\n3 4 5\", \"TEST 3\"\nassert solution(\"1\\n7\\n8 5 1 6 7 4 12\") == \"4\\n1 2 4 5\", \"TEST 4\"\nassert solution(\"1\\n7\\n8 5 1 6 7 4 12\") == \"4\\n1 2 4 5\", \"TEST 5\"\nassert solution(\"1\\n8\\n8 5 1 6 7 4 12 19\") == \"5\\n1 2 4 5 6\", \"TEST 6\"\nassert solution(\"1\\n8\\n7 6 5 4 3 2 1 8\") == \"4\\n1 2 3 4\", \"TEST 7\"\nassert solution(\"1\\n8\\n2 3 4 5 6 7 8 1\") == \"4\\n1 2 3 4\", \"TEST 8\"\nassert solution(\"1\\n8\\n1 2 3 4 5 6 7 8\") == \"", "solution('''\n3\n3\n1 2 3\n3\n1 2 4\n5\n1 2 4 8 7\n''') == '''\n1\n2\n2\n1 2\n2\n2 3\n'''", "solution('''\n3\n3\n1 2 3\n6\n1 1 1 2 2 3\n10\n2 3 4 5 6 7 8 9 10\n''') == '''\n1\n1\n1\n1 2 3\n3\n2 3 4\n'''", "solution('''1\n6\n1 2 3 4 5 6''') == '''2\n2 5'''\n\n# submit solution\nprint(solution('''1\n6\n1 2 3 4 5 6'''))", "solution(\"\"\"\n3\n3\n1 2 3\n3\n3 2 2\n4\n1 2 4 6\n\"\"\") == \"\"\"\n1\n1\n2\n2 3\n2\n2 3\n\"\"\"", "solution('''\n5\n5\n5 6 7 8 3\n5\n5 6 7 8 4\n5\n5 6 7 8 5\n5\n5 6 7 8 6\n5\n5 6 7 8 10\n''') == '''\n1\n2\n2\n2\n2\n2\n'''", "solution(\"\"\"2\n9\n2 11 12 18 20 27 32 36 56\n5\n1 2 4 8 16\"\"\") == \"\"\"3\n3 4 5\n3\n1 2 4\"\"\", \"example 1\"\nassert solution(\"\"\"2\n8\n2 3 5 7 9 11 13 17\n5\n1 2 4 8 16\"\"\") == \"\"\"2\n2 3\n2\n2 4\"\"\", \"example 2\"\nassert solution(\"\"\"1\n4\n1 2 3 4\"\"\") == \"\"\"3\n1 2 3\"\"\", \"example 3\"\nassert solution(\"\"\"1\n6\n1 2 3 5 7 11\"\"\") == \"\"\"4\n1 2 3 4\"\"\", \"example 4\"\nassert solution(\"\"\"1\n10\n1 2 3 4 5 6 7 8 9 10\"\"\") == \"\"\"7\n1 2 3 4 5 6 7\"\"\", \"example 5\"\nassert solution(\"\"\"1\n20\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\"\") == \"\"\"16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\"\", \"example 6\"\nassert solution(\"\"\"1\n100\n16 8 4 2 1 3 6 12 24 48 97 194 388 776 1552 3104 6208 12416 24832 49664 99328 198656 397312 794688 1589376 3178752 6357504", "solution(example_input) == example_output, 'Wrong solution'\nassert solution(test_input) == test_output, 'Wrong solution'", "solution('''\n2\n5\n5 9 8 12 2\n5\n2 3 4 5 6\n''') == '''\n3\n3 4 5\n3\n1 2 3\n'''", "solution('''\n\n''') == '''\n\n'''\n\ndef solution(stdin):\n    stdin = stdin.splitlines()\n    t = int(stdin[0])\n    it = iter(stdin[1:])\n    for i in range(t):\n        n = int(next(it))\n        a = list(map(int, next(it).split()))\n        for i in a:\n            for j in range(1, a):\n                if a[i] % a[j] == 0:\n                    print(a[i])\n\n\n\n\nsolution('''\n2\n7\n1 2 4 5 7 9 11\n6\n1 2 4 6 8 10\n''')", "solution(sample_input) == sample_output", "solution(SAMPLE_1) == SAMPLE_1_SOLUTION\nassert solution(SAMPLE_2) == SAMPLE_2_SOLUTION\nassert solution(SAMPLE_3) == SAMPLE_3_SOLUTION\nassert solution(SAMPLE_4) == SAMPLE_4_SOLUTION\n\n# check for wrong input\nassert solution(WRONG_INPUT_1) == WRONG_INPUT_1_SOLUTION\nassert solution(WRONG_INPUT_2) == WRONG_INPUT_2_SOLUTION\nassert solution(WRONG_INPUT_3) == WRONG_INPUT_3_SOLUTION\nassert solution(WRONG_INPUT_4) == WRONG_INPUT_4_SOLUTION\nassert solution(WRONG_INPUT_5) == WRONG_INPUT_5_SOLUTION\nassert solution(WRONG_INPUT_6) == WRONG_INPUT_6_SOLUTION\nassert solution(WRONG_INPUT_7) == WRONG_INPUT_7_SOLUTION\nassert solution(WRONG_INPUT_8) == WRONG_INPUT_8_SOLUTION\nassert solution(WRONG_INPUT_9) == WRONG_INPUT_9_SOLUTION\nassert solution(WRONG_", "solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n2\n2 3\n'''\n\n# read from command line\nstdin = ''\nfor line in sys.stdin:\n    stdin += line\nsolution(stdin)", "solution('''\n5\n5\n1 2 3 4 5\n5\n1 2 2 2 2\n5\n5 4 2 2 1\n7\n3 4 5 6 7 8 9\n10\n1 2 3 4 5 6 7 8 9 11\n''') == '''\n2\n1 2\n3\n2 3 4\n2\n2 3\n2\n3 4\n'''", "solution(\"\"\"\n2\n10\n2 3 4 5 10 11 12 13 14 15\n3\n1 2 4\n\"\"\") == \"\"\"\n6\n2 3 4 5 10 11\n2\n1 2\n\"\"\"", "solution(stdin) == stdout", "solution(str(open(path).read())) == str(open(output_path).read())", "solution('''\n3\n5\n1 2 3 4 5\n3\n2 3 5\n5\n1 2 3 5 7\n''') == '''\n2\n1 3\n2\n1 2\n1\n1\n'''", "solution(\"\"\"3\n5\n1 3 5 7 11\n3\n3 5 7\n3\n2 3 5\"\"\") == \"\"\"2\n1 2\n1\n2\n2\n1 3\"\"\"\n\n# submit solution\nprint(solution(stdin))", "solution(r'''\n3\n5\n5 10 15 20 25\n5\n5 10 15 20 25\n5\n5 10 15 20 25\n''') == '''\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n5\n5 10 15 20 25\n5\n5 10 15 20 25\n5\n5 10 15 20 25\n''') == '''\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n5\n5 10 15 20 25\n5\n5 10 15 20 25\n5\n5 10 15 20 25\n''') == '''\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n5\n5 10 15 20 25\n5\n5 10 15 20 25\n5\n5 10 15 20 25\n''') == '''\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n5\n5 10 15 20 25\n5\n5 10 15 20 25\n5\n5 10 15 20 25\n''') == '''\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert", "solution(example_1) == example_1_output, \"Expected %s\" % example_1_output\nassert solution(example_2) == example_2_output, \"Expected %s\" % example_2_output\nassert solution(example_3) == example_3_output, \"Expected %s\" % example_3_output\n\nprint(\"Success!\")", "solution('''\n2\n5\n5 10 15 20 25\n5\n1 2 5 10 20\n''') == '''\n2\n2 3\n2\n2 4\n'''", "solution('''\n3\n3\n1 2 3\n4\n1 4 2 3\n5\n2 3 4 5 6\n''') == '''\n1\n1\n3\n1 2 4\n4\n1 2 3 4\n'''", "solution('''\n4\n4\n1 2 3 4\n4\n4 3 2 1\n4\n4 1 1 1\n6\n5 1 4 3 2 6\n''') == '''\n3\n1 2 3\n3\n2 3 4\n3\n2 3 4\n3\n1 2 4\n'''", "solution('''1\n4\n1 5 7 9''') == '''2\n1 2'''\n\nassert solution('''1\n3\n3 6 9''') == '''3\n1 2 3'''\n\nassert solution('''2\n4\n1 5 7 9\n3\n3 6 9''') == '''2\n1 2\n3\n1 2 3'''", "solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\nassert solution(sample_input_4) == sample_output_4\n\nassert solution(extra_input_1) == extra_output_1\nassert solution(extra_input_2) == extra_output_2\nassert solution(extra_input_3) == extra_output_3\nassert solution(extra_input_4) == extra_output_4\nassert solution(extra_input_5) == extra_output_5\nassert solution(extra_input_6) == extra_output_6\nassert solution(extra_input_7) == extra_output_7\nassert solution(extra_input_8) == extra_output_8\nassert solution(extra_input_9) == extra_output_9\nassert solution(extra_input_10) == extra_output_10\nassert solution(extra_input_11) == extra_output_11\nassert solution(extra_input_12) == extra_output_12\nassert solution(extra_input_13) == extra_output_13\nassert solution(extra_input_14) == extra_output_14\nassert solution(extra_input_15) == extra_", "solution(\"\"\"\n1\n3\n3 2 6\n\"\"\") == \"\"\"\n1\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n4\n2 3 4 5\n5\n2 3 4 5 6\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n1\n4\n2\n2 4\n2\n2 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n4\n4 6 1 4\n5\n6 6 6 6 6\n5\n6 6 6 6 6\n5\n6 6 6 6 6\n\"\"\") == \"\"\"\n3\n1 2 4\n1\n2\n3\n3 4 5\n\"\"\"", "solution('''\n''') == '''\n'''", "solution('''\n2\n6\n1 10 4 11 2 7\n4\n1 1 1 1\n''') == '''\n4\n3 5 6\n1\n'''\n\nassert solution('''\n1\n4\n1 2 3 4\n''') == '''\n2\n1 2\n'''\n\n# check the speed of solution\nimport timeit\nprofile = timeit.Timer('solution(stdin)', globals=globals()).repeat(10, 1)\nprint(f'[time: {min(profile)}]')", "solution('''\n4\n4\n2 3 4 5\n4\n4 5 2 3\n4\n1 2 3 4\n4\n4 3 2 1\n''') == '''\n3\n1 2 3\n3\n1 2 3\n1\n3\n3\n1 2 3\n'''", "solution(\"\"\"\n1\n4\n1 4 6 8\n\"\"\") == \"\"\"\n2\n2 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n3\n1 2 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5\n5 8 6 11 14\n\"\"\") == \"\"\"\n2\n2 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n10\n50 49 48 47 46 45 44 43 42 41\n\"\"\") == \"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n10\n2 3 4 5 6 7 8 9 10 11\n\"\"\") == \"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\n9\n1 2 3 4 5 6 7 8 9\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n10\n1 4 9 16 25 36 49 64 81 100\n\"\"\") == \"\"\"\n5\n2 3 5 6 9\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n15\n1 2", "solution('''\n2\n5\n1 2 3 4 5\n5\n2 3 4 6 5\n''') == '''\n4\n1 2 3 4\n3\n1 2 4\n'''", "solution(\"\") == \"\", \"1st example\"\nassert solution(\"\") == \"\", \"2nd example\"\nassert solution(\"\") == \"\", \"3rd example\"\nassert solution(\"\") == \"\", \"4th example\"\nassert solution(\"\") == \"\", \"5th example\"\nassert solution(\"\") == \"\", \"6th example\"\nassert solution(\"\") == \"\", \"7th example\"\nassert solution(\"\") == \"\", \"8th example\"\nassert solution(\"\") == \"\", \"9th example\"\nassert solution(\"\") == \"\", \"10th example\"\nassert solution(\"\") == \"\", \"11th example\"\nassert solution(\"\") == \"\", \"12th example\"\nassert solution(\"\") == \"\", \"13th example\"\nassert solution(\"\") == \"\", \"14th example\"\nassert solution(\"\") == \"\", \"15th example\"\nassert solution(\"\") == \"\", \"16th example\"\nassert solution(\"\") == \"\", \"17th example\"\nassert solution(\"\") == \"\", \"18th example\"\nassert solution(\"\") == \"\", \"19th example\"\nassert solution(\"\") == \"\", \"20th example\"\n\n# submit solution\nimport sys\nprint(solution(sys.stdin.read()))", "solution(stdin='1\\n3\\n10 20 30') == '0\\n1 2 3', 'Wrong answer'\nassert solution(stdin='1\\n10\\n10 7 6 10 10 20 30 10 7 6') == '3\\n2 3 6 7', 'Wrong answer'\nassert solution(stdin='1\\n5\\n1 2 3 4 5') == '0\\n1 2 3 4 5', 'Wrong answer'\nassert solution(stdin='1\\n8\\n3 3 3 3 3 3 3 3') == '8\\n1 2 3 4 5 6 7 8', 'Wrong answer'\nassert solution(stdin='1\\n5\\n1 2 4 8 16') == '0\\n1 2 3 4 5', 'Wrong answer'\nassert solution(stdin='1\\n5\\n3 3 3 3 3') == '5\\n1 2 3 4 5', 'Wrong answer'\nassert solution(stdin='1\\n5\\n1 2 4 3 3') == '3\\n2 3 4 5', 'Wrong answer'\nassert solution(stdin='1\\n5\\n1 2 4 6 8') == '0\\n1 2 3 4 5', 'Wrong answer'\nassert solution(stdin='1\\n5\\n1 2 3 4", "solution('''\n2\n4\n1 3 7 9\n5\n1 3 7 9 14\n''') == '''\n2\n1 3\n3\n1 3 4\n'''", "solution('''3\n3\n3 4 5\n4\n3 4 5 6\n6\n1 2 3 4 5 6''') == '''2\n1 2\n2\n2 3\n4\n2 3 4 5'''", "solution('''\n2\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n''') == '''\n1\n4\n1\n1\n'''\n\n# get input from user\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    solutions = find_subsets(a)\n    if solutions:\n        solutions = sorted(solutions, key=lambda x: len(x), reverse=True)\n        print(len(solutions[0]))\n        print(' '.join(map(str, solutions[0])))\n    else:\n        print(0)\n        print('')", "solution(\"in.txt\") == \"out.txt\"\n\n# hackerrank submission\n# T\n# 3\n# 10\n# 1 3 2 4 1 2 1 4 5 6\n# 10\n# 1 3 2 4 1 2 1 4 5 5\n# 4\n# 1 2 3 4\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pass", "solution('''\n''') == '''\n'''", "solution('''\n3\n4\n1 3 2 7\n5\n9 6 3 2 3\n7\n1 1 1 1 1 1 1\n''') == '''\n3\n2 3 4\n4\n2 3 4 5\n1\n1\n'''"], "finish_reason": ["stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-31.54706141914001, -86.37392031646998, -96.71090812098498, -17.269734125000003, -92.17828376185012, -72.28712108108705, -43.187792159599994, -93.39312767302003, -36.235274898549996, -87.55024278104999, -148.67589646895306, -25.824337477129998, -38.3097943282, -25.153546173360002, -29.100473668629995, -42.15187961744002, -159.33022343428996, -18.974430660454995, -34.11566054469999, -86.84455805102395, -6.31727448178, -37.07868058197496, -32.53171334926, -58.990894505189985, -32.6720135915, -5.311163123, -19.3629297441, -29.53566406609999, -38.70681573146999, -42.95629428905201, -30.550463837040006, -29.2188231747, -29.512932801789994, -45.86982131683, -34.813102790063, -26.001838396605685, -89.55493344096001, -6.219709087, -75.30837394327395, -35.0237903948, -96.11547760874005, -25.474715151050003, -29.120039132553995, -118.59929943753, -27.3262266784, -27.913157071699988, -66.10661962826, -80.10560271281, -6.219707037, -41.14388628214999], "mean_logprob": [-0.4853394064483077, -0.6855073040989682, -0.32236969373661667, -1.2335524375, -0.3072609458728333, -0.24095707027029, -0.5836188129675676, -0.8810672421983019, -0.8052283310788889, -0.2918341426035, -0.49558632156317667, -0.5164867495426, -0.6493185479355932, -0.48372204179538464, -0.6326189927963044, -0.6198805826094118, -0.5311007447809667, -0.5421265902987144, -0.7753559214704545, -0.5200272937187066, -0.5742976801618181, -0.12359560193991667, -0.5163764023692063, -0.7022725536332143, -0.7102611650326087, -0.5901292358888889, -0.8418665106130435, -0.5679935397326923, -0.6790669426573684, -0.14318764763017333, -0.35115475674758617, -0.6956862660642857, -0.5465357926257407, -0.655283161669, -0.39560344079617044, -0.08667279465535234, -0.5930790294103311, -0.44426493478571427, -0.5976855074863016, -0.5306634908303031, -0.32038492536246665, -0.5661047811344444, -0.10363003250019216, -0.3953309981251, -0.6506244447238095, -0.547316805327451, -0.3958480217261078, -0.7557132331397169, -0.44426478835714284, -0.7093773496922414]}
{"prompt": "'''\nKuzya started going to school. He was given math homework in which he was given an array a of length n and an array of symbols b of length n, consisting of symbols '*' and '/'.\n\nLet's denote a path of calculations for a segment [l; r] (1 \u2264 l \u2264 r \u2264 n) in the following way: \n\n  * Let x=1 initially. For every i from l to r we will consequently do the following: if b_i= '*', x=x*a_i, and if b_i= '/', then x=(x)/(a_i). Let's call a path of calculations for the segment [l; r] a list of all x that we got during the calculations (the number of them is exactly r - l + 1). \n\n\n\nFor example, let a=[7, 12, 3, 5, 4, 10, 9], b=[/, *, /, /, /, *, *], l=2, r=6, then the path of calculations for that segment is [12, 4, 0.8, 0.2, 2].\n\nLet's call a segment [l;r] simple if the path of calculations for it contains only integer numbers. \n\nKuzya needs to find the number of simple segments [l;r] (1 \u2264 l \u2264 r \u2264 n). Since he obviously has no time and no interest to do the calculations for each option, he asked you to write a program to get to find that number!\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nThe third line contains n symbols without spaces between them \u2014 the array b_1, b_2 \u2026 b_n (b_i= '/' or b_i= '*' for every 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the number of simple segments [l;r].\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n1 2 3\n*/+\n''') == '3'\n\n# get input\nstdin = input()\n\n# print solution\nprint(solution(stdin))", "solution(str(test_data)) == str(test_answer)", "(solution(r'''\n7\n7 12 3 5 4 10 9\n/*//*/**\n''') == '3')\nassert (solution(r'''\n2\n7 7\n/*\n''') == '1')\nassert (solution(r'''\n5\n7 4 7 7 7\n//*/*\n''') == '0')\nassert (solution(r'''\n5\n2 3 3 3 1\n/*/*/\n''') == '4')\nassert (solution(r'''\n8\n7 7 7 7 7 7 7 7\n/*/**/*/**\n''') == '0')\nassert (solution(r'''\n8\n7 7 7 7 7 7 7 7\n/*/**/*/**\n''') == '0')\nassert (solution(r'''\n8\n7 7 7 7 7 7 7 7\n/**/*/**/*/\n''') == '1')\nassert (solution(r'''\n8\n7 7 7 7 7 7 7 7\n/**/**/**/**\n''') == '1')\nassert (solution(r'''\n8\n7 7 7 7 7 7 7 7\n/**/**/**/**\n''') == '1')\nassert (solution(r'''\n8\n7 7 7 7 7 7 7 7\n/**/**/**/**\n''') == '1", "solution('''\n5\n1 2 3 4 5\n* * * * *\n''') == '''\n5\n'''\n\nassert solution('''\n3\n1 2 3\n/ * *\n''') == '''\n1\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n* * * * *\n''') == '''\n5\n'''\n\nassert solution('''\n5\n3 1 4 2 5\n* * * * *\n''') == '''\n5\n'''\n\nassert solution('''\n10\n7 12 3 5 4 10 9 2 8 11\n/ * / / / * * / * *\n''') == '''\n21\n'''\n\nassert solution('''\n7\n7 12 3 5 4 10 9\n/ * / / / * *\n''') == '''\n16\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n* * * * *\n''') == '''\n5\n'''\n\nassert solution('''\n6\n1 2 3 4 5 6\n* * * * * *\n''') == '''\n6\n'''\n\nassert solution('''\n4\n1 1 1 1\n* * * *\n''') == '''\n4\n'''\n\nassert solution(", "solution('''\n5\n6 5 10 9 7\n*/**/*\n''') == '5'\nassert solution('''\n6\n10 5 9 7 3 2\n*/**/*\n''') == '1'\nassert solution('''\n4\n4 4 4 4\n*/**/*\n''') == '4'\nassert solution('''\n8\n2 3 3 3 3 3 3 2\n*/*/*/*/*/*/*/\n''') == '0'\nassert solution('''\n8\n3 2 2 3 3 2 2 3\n*/*/*/*/*/*/*/\n''') == '0'\nassert solution('''\n6\n3 2 2 3 3 2\n*/*/*/*/*/*\n''') == '0'\nassert solution('''\n8\n2 3 3 3 3 3 3 2\n*/*/*/*/*/*/*/\n''') == '0'\nassert solution('''\n9\n5 4 2 1 6 5 4 2 1\n*/*/*/*/*/*/*/\n''') == '0'\nassert solution('''\n6\n5 4 2 1 6 5\n*/*/*/*/*/*\n''') == '0'\nassert solution('''\n9\n1 2 1 2 1 2 1 2 1\n*/**/**/**/**/\n''') == '0'\nassert solution(", "solution('''\n7\n7 12 3 5 4 10 9\n/*//**\n''') == '8'\n\n'''\nIn a small town, there are n people and each person has exactly one friend. Two people are called friends if they know each other. The town can be considered as a connected graph. The degree of a vertex is the number of its incident edges.\n\nKuzya wants to know what is the minimum number of people which can be removed from the town so that no new edges will appear in the graph.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the number of people in the town.\n\nEach of the next n lines contains two integers x and y (1 \u2264 x, y \u2264 n) \u2014 the numbers of friends of the i-th person.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of people which can be removed from the town so that no new edges will appear in the graph.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '2'", "solution('''\n2\n1 2\n**\n''') == '''\n5\n'''\n\n# submit solution to codeforces\nfrom subprocess import call\n\nwith open('input.txt', 'w') as file:\n    file.write(solution('''\n2\n1 2\n**\n'''))\n\ncall(['g++', '-std=c++17', 'main.cpp'])\ncall(['a.exe'])", "solution(r'''\n5\n7 12 3 5 4\n/*//*\n''') == '2'\n\nassert solution(r'''\n6\n10 6 5 1 7 8\n/*/*/*\n''') == '1'\n\nassert solution(r'''\n8\n10 4 7 8 4 5 6 7\n//*/*//*\n''') == '9'\n\n# print the runtime of the solution\nstart_time = time.time()\nprint(solution(stdin))\nprint('Elapsed:', time.time() - start_time)", "solution(\"5\\n7 2 3 5 4\\n/ * / / *\") == \"1\"\nassert solution(\"5\\n7 2 3 5 4\\n/ * / / *\") == \"1\"\nassert solution(\"5\\n7 2 3 5 4\\n/ * / / *\") == \"1\"\nassert solution(\"5\\n7 2 3 5 4\\n/ * / / *\") == \"1\"\nassert solution(\"5\\n7 2 3 5 4\\n/ * / / *\") == \"1\"\nassert solution(\"5\\n7 2 3 5 4\\n/ * / / *\") == \"1\"\nassert solution(\"5\\n7 2 3 5 4\\n/ * / / *\") == \"1\"\nassert solution(\"5\\n7 2 3 5 4\\n/ * / / *\") == \"1\"\nassert solution(\"5\\n7 2 3 5 4\\n/ * / / *\") == \"1\"\nassert solution(\"5\\n7 2 3 5 4\\n/ * / / *\") == \"1\"\n\n# test the performance of solution\nimport timeit\nimport functools\nprint(functools.reduce(lambda x, y: x+y, timeit.repeat(lambda: solution(\"5\\n7 2 3 5 4\\n/ * / / *\"), number", "solution('''\n5\n1 2 3 4 5\n* * * * *\n''') == '''\n5\n'''\nassert solution('''\n6\n1 2 3 4 5 6\n* * * * * *\n''') == '''\n15\n'''\nassert solution('''\n5\n1 2 3 4 5\n* * * * /\n''') == '''\n7\n'''\nassert solution('''\n6\n2 3 1 4 2 1\n* * / * * /\n''') == '''\n4\n'''\nassert solution('''\n1\n9\n*\n''') == '''\n1\n'''\nassert solution('''\n2\n10 3\n* /\n''') == '''\n1\n'''\nassert solution('''\n7\n1 2 3 4 5 6 7\n* * * * * * *\n''') == '''\n21\n'''\nassert solution('''\n6\n1 1 1 1 1 1\n* * * * * *\n''') == '''\n15\n'''\nassert solution('''\n4\n1 1 1 1\n* * * *\n''') == '''\n6\n'''\nassert solution('''\n1\n1\n*\n''') == '''\n1\n'''\nassert solution('''", "(solution('''\n    7\n    7 12 3 5 4 10 9\n    /*///**\n''')) == '''\n    4\n'''\nassert (solution('''\n    5\n    7 12 3 5 4\n    /*//*\n''')) == '''\n    1\n'''\nassert (solution('''\n    2\n    7 12\n    */\n''')) == '''\n    0\n'''\nassert (solution('''\n    10\n    1 6 5 8 9 7 4 1 2 3\n    /*/**//*/**\n''')) == '''\n    5\n'''\nassert (solution('''\n    10\n    10 9 8 7 6 5 4 3 2 1\n    /*/**//*/**\n''')) == '''\n    4\n'''\n\n# test case with random input\nimport random\n\ndef is_simple(path):\n    return all(float(x).is_integer() for x in path)\n\ndef brute_force(a, b):\n    return sum(is_simple(get_path(a, b, l, r)) for l in range(1, len(a)+1) for r in range(l, len(a)+1))\n\ndef get_path(a, b, l, r):", "solution(testcase) == solution_test", "solution(stdin) == stdout, \"Solutions differ\"\nassert solution(large_stdin) == large_stdout, \"Solutions differ for large input\"\n\n# run solution with large input\nsolution(large_stdin)", "solution('''\n4\n10 10 10 10\n/*/\n''') == '4'\n\nassert solution('''\n4\n10 10 10 10\n/*/*\n''') == '0'\n\nassert solution('''\n5\n1 2 3 4 5\n*/**/\n''') == '5'\n\nassert solution('''\n5\n5 4 3 2 1\n/*/*/\n''') == '0'\n\nassert solution('''\n3\n3 3 3\n*/\n''') == '3'\n\nassert solution('''\n6\n1 1 1 1 1 1\n/////\n''') == '0'\n\nassert solution('''\n7\n1 1 1 1 1 1 1\n///////\n''') == '7'\n\nassert solution('''\n4\n4 4 4 4\n***/\n''') == '4'\n\nassert solution('''\n4\n4 4 4 4\n**/*\n''') == '0'\n\nassert solution('''\n4\n4 4 4 4\n*/**\n''') == '4'\n\nassert solution('''\n4\n4 4 4 4\n*/*/\n''') == '4'\n\nassert solution('''\n4\n4 4 4 4\n*/*/*\n''') == '0'\n\nassert solution(''", "solution(\"\"\"\n1\n7\n/\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n12\n*\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2\n7 12\n/*\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n3\n7 12 3\n/*/\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n4\n7 12 3 5\n/*/*\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n3\n7 12 3\n/*/\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n1\n7\n/\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2\n7 12\n/\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2\n7 12\n/*\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n3\n7 12 3\n/*/\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n3\n7 12 3\n/*/\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n4\n7 12 3 5\n/*/*\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n7\n7 12 3 5 4 10 9\n/***/*/*\n\"\"\") == \"\"\"\n7", "solution('''\n3\n4 2 6\n/*\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 2 4 1 3\n/***/\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4 2 7 6\n/***\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n2 5 5 3 3 6 8 7 9 8\n*/**/*****/\n''') == '''\n9\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n2 3 3 4 3 5 4 5 6 6\n*/**/*****/\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n9\n*\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n3 8 5 2 1 4 1\n/***/***\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n*\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n", "solution('''\n4\n1 2 4 8\n* * / *\n''') == '''\n4\n'''\n\nassert solution('''\n3\n2 3 6\n* / *\n''') == '''\n1\n'''\n\nassert solution('''\n5\n1 2 6 8 10\n* * / * *\n''') == '''\n2\n'''\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n* * * * * * * * * *\n''') == '''\n1\n'''\n\nassert solution('''\n4\n4 5 7 9\n* * * *\n''') == '''\n0\n'''\n\nassert solution('''\n5\n5 6 7 8 9\n* * * * *\n''') == '''\n5\n'''\n\nassert solution('''\n7\n1 2 4 8 16 32 64\n* * * * * * *\n''') == '''\n7\n'''\n\nassert solution('''\n4\n4 2 4 8\n* / * *\n''') == '''\n2\n'''\n\nassert solution('''\n10\n2 3 4 5 6 7 8 9 10 11\n* * * * * * * * * *\n''') == '''\n1\n'''\n", "solution(sample_str) == str(sample_out)\n\n# get inputs\nwith open('input.txt', 'r') as input_file:\n    input_str = input_file.read()\n\n# print outputs\nwith open('output.txt', 'w') as output_file:\n    output_file.write(solution(input_str))", "'2' == solution('''\n5\n5 2 6 4 10\n/ * / * *\n''')\n\nassert '3' == solution('''\n7\n7 12 3 5 4 10 9\n/ * / / / * *\n''')\n\nassert '1' == solution('''\n2\n2 3\n* /\n''')\n\nassert '6' == solution('''\n6\n1 2 3 4 5 6\n* * * * * *\n''')\n\nassert '0' == solution('''\n1\n3\n/\n''')\n\nassert '3' == solution('''\n3\n2 5 3\n* / *\n''')\n\nassert '2' == solution('''\n4\n2 2 4 2\n* * * *\n''')\n\nassert '0' == solution('''\n4\n2 2 2 2\n* * * *\n''')\n\nassert '0' == solution('''\n4\n2 3 4 5\n* * * *\n''')\n\nassert '3' == solution('''\n4\n2 2 2 2\n/ / / /\n''')\n\nassert '0' == solution('''\n4\n2 3 4 5\n/ / / /\n''')\n\nassert '0' == solution('''\n2\n2 2\n", "solution('''\n2\n2 2\n*/\n''') == '1'\n\n# get input and print output\nn = int(input())\na = list(map(int, input().split()))\nb = list(input())\n\nprint(solution('''\n{}\n{}\n{}\n'''.format(n, ' '.join(map(str, a)), ''.join(b))))", "(solution('''\n6\n7 12 3 5 4 10 9\n/*//**\n''') == '4')\n\nprint('ok')", "solution('''\n2\n2 6\n/*\n''') == '1'\n\nassert solution('''\n3\n12 7 9\n*/*\n''') == '1'\n\nassert solution('''\n4\n2 3 7 9\n**/*\n''') == '2'\n\nassert solution('''\n4\n2 3 7 9\n***/\n''') == '0'\n\nassert solution('''\n6\n2 3 7 4 9 8\n*/**/*\n''') == '4'\n\nassert solution('''\n1\n7\n*\n''') == '1'\n\nassert solution('''\n1\n3\n/\n''') == '1'\n\nassert solution('''\n3\n2 3 7\n/*\n''') == '1'\n\nassert solution('''\n3\n2 3 7\n*/\n''') == '0'\n\nassert solution('''\n3\n2 3 7\n/*/\n''') == '2'\n\nassert solution('''\n3\n2 3 7\n**/\n''') == '0'\n\nassert solution('''\n3\n2 3 7\n**/*\n''') == '3'\n\nassert solution('''\n3\n2 3 7\n***/\n''') == '0'\n\nassert solution('''\n", "solution('''\n2\n2 2\n/*\n''') == '''\n1\n'''\n\nassert solution('''\n2\n2 2\n//\n''') == '''\n0\n'''\n\nassert solution('''\n7\n7 12 3 5 4 10 9\n//*///**\n''') == '''\n2\n'''\n\nassert solution('''\n4\n4 4 4 4\n/ / / /\n''') == '''\n4\n'''\n\n# submit solution\ndef submit_solution() -> None:\n    task = util.get_input()\n    print(solution(task))\n    util.submit(task, solution)\n\n# submit_solution()", "(solution('''3\n1 2 3\n* * /''') == '3')\nassert (solution('''5\n5 5 5 5 5\n/ * * * /''') == '10')\nassert (solution('''4\n4 5 2 6\n* / * /''') == '0')\nassert (solution('''5\n5 4 6 7 9\n* / * / *''') == '2')\nassert (solution('''7\n1 1 1 1 1 1 1\n/ / / / / / /''') == '28')\nassert (solution('''10\n7 8 9 8 5 6 8 5 4 3\n* * * * * * * * * *''') == '1')\nassert (solution('''10\n7 8 9 8 5 6 8 5 4 3\n/ / / / / / / / / /''') == '1')\nassert (solution('''1\n1000000\n/''') == '1')\nassert (solution('''7\n7 12 3 5 4 10 9\n/ * / / / * *''') == '3')\nassert (solution('''7\n2 1 2 1 2 1 2\n* * * * * * *''') == '3')\nassert (solution('''10\n2 1 4", "solution(r'''\n5\n2 3 4 5 6\n*/**/\n''') == '5'\n\n# check the correctness of solution\nassert solution(r'''\n6\n1 2 3 4 5 6\n**//*/*\n''') == '10'\n\n# check the correctness of solution\nassert solution(r'''\n1\n42\n/\n''') == '0'\n\n# check the correctness of solution\nassert solution(r'''\n8\n1 2 3 4 5 6 7 8\n/***//*/*/\n''') == '16'\n\n# check the correctness of solution\nassert solution(r'''\n1\n1\n*\n''') == '1'\n\n# check the correctness of solution\nassert solution(r'''\n1\n2\n/\n''') == '0'\n\n# check the correctness of solution\nassert solution(r'''\n1\n1\n/\n''') == '0'\n\n# check the correctness of solution\nassert solution(r'''\n1\n2\n*\n''') == '1'\n\n# check the correctness of solution\nassert solution(r'''\n10\n1 2 3 4 5 6 7 8 9 10\n*/**//*/*/***\n''') == '27'\n\n# check the correctness of solution\nassert solution(r'''\n10", "solution(r'''\n7\n7 12 3 5 4 10 9\n/*///*/*\n''') == '''\n13\n'''\n\n# print the solution result\nprint(solution(r'''\n'''))", "solution('''\n5\n5 6 8 1 2\n*/*/*/*/*\n''') == '''\n4\n'''\nassert solution('''\n7\n7 12 3 5 4 10 9\n/*/*/*/*/*/*\n''') == '''\n0\n'''\nassert solution('''\n7\n7 12 3 5 4 10 9\n//*//*//*//\n''') == '''\n8\n'''\nassert solution('''\n7\n7 12 3 5 4 10 9\n/**//**/***\n''') == '''\n10\n'''\nassert solution('''\n7\n7 12 3 5 4 10 9\n///***//***\n''') == '''\n7\n'''\nassert solution('''\n7\n7 12 3 5 4 10 9\n/*******//*\n''') == '''\n3\n'''\nassert solution('''\n7\n7 12 3 5 4 10 9\n/////*****/*\n''') == '''\n2\n'''\nassert solution('''\n7\n7 12 3 5 4 10 9\n/*******//*\n''') == '''\n3\n'''\nassert solution('''\n7\n7 12 3 5 4 10 9\n****//*///*\n''') == '''\n3\n'''\nassert solution('''", "solution(\"\"\"\n5\n7 12 3 5 4\n/*///\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n7\n7 12 3 5 4 10 9\n/ * / / / * *\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n6\n1 1 1 1 1 1\n/ * / * / *\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n7\n1 2 3 4 5 6 7\n* * * * * * *\n\"\"\") == \"\"\"\n7\n\"\"\"\n\nassert solution(\"\"\"\n7\n1 3 5 7 9 11 13\n/ * / * / * /\n\"\"\") == \"\"\"\n6\n\"\"\"\n\nassert solution(\"\"\"\n8\n1 4 2 9 7 0 2 6\n* / * / * / * /\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n* * * * * * * * * *\n\"\"\") == \"\"\"\n10\n\"\"\"\n\nassert solution(\"\"\"\n10\n10 9 8 7 6 5 4 3 2 1\n/ / / / / / / / / /\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n9\n9 2 8 8 5 8 9 4 8\n/ * / / * / * / *\n\"\"\") == \"\"\"\n", "(solution('''5\n5 6 3 1 1\n* * / * *''') == '9')\n\nassert (solution('''5\n5 6 3 1 1\n* * / * /''') == '8')\n\nassert (solution('''3\n3 4 5\n/ * *''') == '0')\n\nassert (solution('''7\n7 12 3 5 4 10 9\n/ * / / / * *''') == '37')\n\nassert (solution('''7\n7 12 3 5 4 10 9\n/ * / / / * *''') == '37')\n\nassert (solution('''9\n10 10 10 10 10 10 10 10 10\n* * * * * * * * *''') == '0')\n\nassert (solution('''10\n10 9 8 7 6 5 4 3 2 1\n* * * * * * * * * *''') == '0')\n\nassert (solution('''10\n1 2 3 4 5 6 7 8 9 10\n/ / / / / / / / / /''') == '55')\n\nassert (solution('''1\n1\n*''') == '1')\n\nassert (solution('''1\n10\n/''') == '1')\n\n# submit on https://", "solution(r'''\n7\n7 12 3 5 4 10 9\n/*///**\n''') == '4'\n\nassert solution(r'''\n4\n1 2 3 4\n/*/*\n''') == '4'\n\nassert solution(r'''\n2\n1 1\n//\n''') == '1'\n\nassert solution(r'''\n5\n5 4 3 2 1\n*/*/*/\n''') == '5'\n\nassert solution(r'''\n7\n100 100 100 100 100 100 100\n*/*/*/*/*/*/*\n''') == '1'\n\nassert solution(r'''\n4\n4 3 2 1\n/*/*\n''') == '4'\n\nassert solution(r'''\n7\n7 12 3 5 4 10 9\n/*/*/*/*/*/*/*\n''') == '7'\n\nassert solution(r'''\n6\n2 3 3 2 2 3\n**/*/*/*/*\n''') == '3'\n\nassert solution(r'''\n7\n7 12 3 5 4 10 9\n/*//**/\n''') == '2'\n\nassert solution(r'''\n6\n7 7 7 7 7 7\n*/*/**/*/\n''') == '6'\n\nassert solution(r'''\n4\n4 3 2 1\n/**/", "solution(example1) == '28'\nassert solution(example2) == '15'\nassert solution(example3) == '0'\nassert solution(example4) == '1'\nassert solution(example5) == '5'\nassert solution(example6) == '33'\nassert solution(example7) == '84'\nassert solution(example8) == '37'\nassert solution(example9) == '32'\nassert solution(example10) == '0'\nassert solution(example11) == '0'\nassert solution(example12) == '27'\nassert solution(example13) == '0'\nassert solution(example14) == '1'\nassert solution(example15) == '3'\nassert solution(example16) == '5'\nassert solution(example17) == '4'\nassert solution(example18) == '0'\nassert solution(example19) == '0'\nassert solution(example20) == '0'\nassert solution(example21) == '1'\nassert solution(example22) == '0'\nassert solution(example23) == '1'\nassert solution(example24) == '0'\nassert solution(example25) == '0'\nassert solution(example26) == '0'\nassert solution(example27) == '0'\nassert solution(example", "solution('''\n3\n1 2 3\n**\n''') == '3'\n\nassert solution('''\n3\n1 2 3\n/*\n''') == '1'\n\nassert solution('''\n4\n1 2 3 4\n/**/\n''') == '4'\n\nassert solution('''\n4\n1 2 3 4\n**/**\n''') == '4'\n\nassert solution('''\n10\n7 9 10 5 8 10 3 12 7 9\n**/***/**/*\n''') == '3'\n\nassert solution('''\n10\n6 5 5 4 5 4 4 7 6 5\n**/*/*/*/*\n''') == '8'\n\nassert solution('''\n10\n9 10 10 8 8 6 9 8 5 8\n**/***/*/*/*\n''') == '6'\n\nassert solution('''\n10\n9 10 10 8 8 6 9 8 5 8\n*/*/***/*/**\n''') == '5'\n\nassert solution('''\n3\n7 7 7\n**\n''') == '3'\n\nassert solution('''\n3\n1 1 1\n/*\n''') == '1'\n\nassert solution('''\n4\n1 1 1 1\n/**/\n''') == '4'\n\nassert solution('''\n4", "solution('''3\n1 2 3\n*/+\n''') == '2'\n\n# * I/O\nwhile True:\n    input_string = input()\n    if input_string == '***':\n        break\n    answer = solution(input_string)\n    print(answer)", "solution(test_sample_in) == test_sample_out\n\n# print test samples\nprint(f'Input:\\n{test_sample_in}\\n')\nprint(f'Output:\\n{test_sample_out}')\n\n# read in sample input\nprint('input:')\ninput_data = input()\nprint('output:')\nprint(solution(input_data))", "solution('''\n4\n8 5 4 2\n* * / *\n''') == '''\n8\n'''\nassert solution('''\n5\n7 7 7 7 7\n/ * * * /\n''') == '''\n14\n'''\nassert solution('''\n6\n2 3 3 3 3 3\n* * * * * *\n''') == '''\n21\n'''\nassert solution('''\n6\n5 4 3 2 1 1\n* * * * * *\n''') == '''\n0\n'''\nassert solution('''\n10\n17 20 19 15 17 16 17 20 21 11\n* * * * * * * * * *\n''') == '''\n14\n'''\nassert solution('''\n9\n7 6 5 4 3 2 1 8 9\n* * * * * * * * *\n''') == '''\n28\n'''\nassert solution('''\n4\n4 4 4 4\n* * * *\n''') == '''\n10\n'''\nassert solution('''\n3\n3 2 1\n* * *\n''') == '''\n3\n'''\nassert solution('''\n9\n9 8 7 6 5 4 3 2 1\n* * * * * * * * *\n''') == '''\n28\n'''\n", "(solution('''\n7\n7 12 3 5 4 10 9\n/*//*/**\n''') == '3')\nassert (solution('''\n6\n12 11 8 4 2 1\n*/**/*\n''') == '4')\nassert (solution('''\n6\n2 3 3 3 3 3\n*/**/*\n''') == '0')\nassert (solution('''\n3\n7 7 7\n//*\n''') == '4')\nassert (solution('''\n4\n7 7 7 7\n///*\n''') == '6')\nassert (solution('''\n5\n7 7 7 7 7\n///*/\n''') == '8')\nassert (solution('''\n6\n7 7 7 7 7 7\n///*//\n''') == '8')\nassert (solution('''\n7\n7 7 7 7 7 7 7\n///*//*\n''') == '10')\nassert (solution('''\n8\n7 7 7 7 7 7 7 7\n///*//**\n''') == '10')\nassert (solution('''\n9\n7 7 7 7 7 7 7 7 7\n///*//**/\n''') == '12')\nassert (solution('''\n10\n7 7 7 7 7 7 7", "solution(\"\"\"\n7\n7 12 3 5 4 10 9\n/*///**\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n2 3 4 5 6\n//***\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n3 2 2 3 3\n//*/*\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 4 1 5 5\n//*/*\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 4 5 7 9\n//*/*\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 4 1 7 9\n//*/*\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 4 9 7 9\n//*/*\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 4 1 7 1\n//*/*\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 4 9 1 9\n//*/*\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n#", "solution('''\n5\n2 3 7 5 3\n****/***\n''') == '5'\n\nassert solution('''\n4\n1 1 1 1\n////\n''') == '1'\n\nassert solution('''\n6\n9 16 8 1 2 4\n/////**\n''') == '1'\n\nassert solution('''\n2\n2 10\n*/\n''') == '0'\n\n# test for memory\nimport random\n\ndef generate(n):\n    return '{}\\n{}\\n{}'.format(\n        n,\n        ' '.join(str(random.randint(1, 10**6)) for _ in range(n)),\n        ''.join(random.choice('*/') for _ in range(n))\n    )\n\nassert solution(generate(10**5)) == 'None'\nassert solution(generate(10**6)) == 'None'", "solution(stdin=\"4\\n1 2 2 1\\n*/*/\\n\") == \"7\\n\"\nassert solution(stdin=\"6\\n2 3 4 2 3 1\\n*/*/*/*/\\n\") == \"7\\n\"\nassert solution(stdin=\"6\\n2 3 4 2 3 1\\n*/*/*/*/*\\n\") == \"1\\n\"\nassert solution(stdin=\"7\\n7 12 3 5 4 10 9\\n/*/*///*/*\\n\") == \"6\\n\"\nassert solution(stdin=\"6\\n1 1 1 1 1 1\\n*/*/*/*/*\\n\") == \"0\\n\"\nassert solution(stdin=\"5\\n1 1 1 1 1\\n*/*/*/*/*\\n\") == \"5\\n\"\nassert solution(stdin=\"4\\n1 2 2 1\\n*/*/\\n\") == \"7\\n\"\nassert solution(stdin=\"4\\n4 1 2 1\\n*/*/*\\n\") == \"3\\n\"\nassert solution(stdin=\"4\\n2 3 3 2\\n*/*/*\\n\") == \"5\\n\"\nassert solution(stdin=\"4\\n2 2 2 2\\n*/*/*\\n\") == \"7\\n\"\nassert solution(", "solution('''\n7\n7 12 3 5 4 10 9\n/*///**\n''') == '1'\n\nassert solution('''\n3\n7 12 9\n//*\n''') == '3'\n\nassert solution('''\n1\n1\n/\n''') == '0'\n\n# data for manual testing\n# def get_input() -> str:\n#     pass\n#\n#\n# def get_output() -> str:\n#     pass\n#\n#\n# assert solution(get_input()) == get_output()", "solution(\"2\\n\"\n                \"2 6\\n\"\n                \"**\") == \"1\", \"Sample\"\nassert solution(\"3\\n\"\n                \"1 1 1\\n\"\n                \"***\") == \"2\", \"Simple\"\nassert solution(\"6\\n\"\n                \"2 3 6 1 3 5\\n\"\n                \"***/*/*\") == \"3\", \"6\"\nassert solution(\"6\\n\"\n                \"6 3 2 1 3 5\\n\"\n                \"***/*/*\") == \"5\", \"7\"\nassert solution(\"6\\n\"\n                \"6 3 2 6 3 5\\n\"\n                \"***/*/*\") == \"6\", \"8\"\nassert solution(\"10\\n\"\n                \"6 9 7 9 6 5 1 5 4 9\\n\"\n                \"*/*/*/*/*/*/*/*/*\") == \"22\", \"9\"\nassert solution(\"9\\n\"\n                \"6 3 2 6 3 5 2 3 3\\n\"\n                \"*/**/***/*/*/*/*\") == \"27\", \"10\"\nassert solution(\"10\\n\"\n                \"6 3 2 6 3 5 2 3 3 2\\n\"\n                \"*/**/***/*/*/*/*\") == \"27\", \"11\"\nassert solution(\"10\\n\"\n                \"6 3 2", "solution(\"\"\"\n4\n2 3 4 5\n* * * *\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n3\n1 2 3\n/ * /\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5\n1 2 3 4 5\n* * * * *\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n7\n7 12 3 5 4 10 9\n/ * / / / * *\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n7\n7 12 3 5 4 10 9\n/ * / / / * *\n\"\"\") == \"1\"\n\n# test 1\n# test 2\n# test 3\n# test 4\n# test 5\n# test 6\n# test 7\n# test 8\n# test 9\n# test 10\n# test 11\n# test 12\n# test 13\n# test 14\n# test 15\n# test 16\n# test 17\n# test 18\n# test 19\n# test 20\n# test 21\n# test 22\n# test 23\n# test 24\n# test 25\n# test 26\n# test 27\n# test 28\n# test 29\n# test 30\n# test 31\n# test 32\n# test 33\n# test 34\n# test 35\n# test 36\n# test 37\n# test 38\n# test 39\n# test 40\n# test 41\n", "solution('''\n5\n1 10 10 100 100\n+ + + + +\n''') == '\\n2'\n\nassert solution('''\n4\n4 7 5 1\n/ * / -\n''') == '\\n4'\n\nassert solution('''\n7\n7 12 3 5 4 10 9\n/ * / / / * *\n''') == '\\n7'", "solution(\"\"\"\n2\n2 3\n/*\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n7\n7 12 3 5 4 10 9\n/*/*//*/*\n\"\"\") == \"\"\"\n5\n\"\"\"\n\nassert solution(\"\"\"\n5\n5 3 3 5 3\n/////\n\"\"\") == \"\"\"\n10\n\"\"\"\n\nassert solution(\"\"\"\n10\n9 5 5 9 1 9 9 5 5 5\n/*****/*****/\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n9\n2 9 7 2 3 8 3 2 8\n//**/***//**/\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n10\n2 6 8 5 5 5 7 9 8 6\n/****//****/***/\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n10\n5 5 7 9 7 8 8 4 5 5\n/***//*//****/***/\n\"\"\") == \"\"\"\n4\n\"\"\"\n\nassert solution(\"\"\"\n4\n2 3 3 2\n///*/\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n5\n5 2 7 9 4\n*//*/*/\n\"\"\") == \"\"\"\n4\n\"\"\"\n\nassert solution(\"\"\"\n10\n8 3 4 3 3 3 3 4 3 3\n/***/**/***//", "solution('''\nn=7\narr1=1 2 3 4 5 6 7\narr2=* * * * * * *\n''') == '21'", "solution('''\n3\n1 2 3\n* * /\n''') == '''\n6\n'''\n\n# read the input\nprint(solution(input()))", "solution('''\n6\n7 12 3 5 4 10 9\n/ * / / / * *\n''') == '1'\n\nassert solution('''\n6\n1 1 1 1 1 1\n* * * * * *\n''') == '21'\n\nassert solution('''\n4\n1 2 3 4\n* * * *\n''') == '3'\n\nassert solution('''\n1\n1\n*\n''') == '1'\n\nassert solution('''\n2\n1 10\n* /\n''') == '2'\n\nassert solution('''\n4\n1 2 3 4\n* * * /\n''') == '1'\n\nassert solution('''\n10\n1670 2719 3115 1268 835 1546 3824 936 3466 3655\n* * * * * * * * * *\n''') == '6'\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n* * * * * * * * * *\n''') == '55'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n* * * * * * * * * *\n''') == '10'\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n/ /", "solution(\"\"\"\n4\n4 4 4 4\n* / * /\n\"\"\") == \"\"\"\n4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7\n7 12 3 5 4 10 9\n/ * / / / * *\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n1 1 1\n* * *\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7\n2 3 5 3 7 9 11\n* * * * * * *\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n2 3 5 3 7\n* * * * *\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3 7 1\n* * /\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n4 3 2 1\n* * * *\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n4 3 2 1\n/ / / /\n\"\"\") == \"\"\"\n4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3 7 2\n* * /\n\"\"\") == \"\"\"", "solution(\"\") == \"\", \"empty input\"\nassert solution(\"\") == \"\", \"single input\"\nassert solution(\"\") == \"\", \"two inputs\"\nassert solution(\"\") == \"\", \"three inputs\"\nassert solution(\"\") == \"\", \"four inputs\"", "solution('''\n3\n2 3 4\n/*\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n7\n7 12 3 5 4 10 9\n/*/////*\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n4\n4 6 7 9\n/***\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4\n1 1 1 1\n*/*/*\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n//*//*///\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n/\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n*\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n2\n1 2\n/*\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 4\n/*/\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 4\n*/*\n''') == '1'\n"], "finish_reason": ["stop", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length"], "sum_logprob": [-24.32987478606, -14.8340731604, -107.60312008515189, -85.99428447349304, -155.01470230036003, -151.8279683467, -47.65463671025004, -96.75977362115002, -54.06169982623397, -88.79909390396438, -141.25413646152992, -15.141594208, -45.08912694047001, -104.50235700105303, -63.04650381107401, -152.51395836605124, -108.25050018677548, -34.31789007837001, -117.41783994379549, -33.41334623734002, -20.3279917861, -115.03939260504794, -65.84929018313699, -150.9852582893541, -90.96004905308398, -33.54598772259999, -110.85204985153257, -120.74709863622, -110.96648498999998, -139.10606775363905, -94.71987816721108, -175.2236695386099, -54.19643787020001, -73.14770176176, -158.49159592800032, -97.91199249257102, -104.53731067447907, -130.32309418902892, -114.89590883580595, -55.565174974274, -165.74925570980895, -61.341141964909994, -58.82872848255999, -241.40873061931796, -31.062361852000002, -25.811456438999997, -171.59628479896, -107.85433512019206, -21.926769370600002, -94.01847893577734], "mean_logprob": [-0.528910321436087, -0.927129572525, -0.35867706695050666, -0.2866476149116433, -0.5167156743345334, -0.5602508057073801, -0.4453704365443925, -0.7559357314152344, -0.18020566608744668, -0.2959969796798813, -0.47084712153843333, -1.5141594208, -0.8198023080085455, -0.34834119000351, -0.21015501270358, -0.508379861220171, -0.36083500062258467, -0.41346855516108433, -0.3913927998126517, -0.34805568997229164, -0.6159997510939393, -0.3834646420168267, -0.40398337535666873, -0.5032841942978467, -0.30320016351028, -0.6451151485115385, -0.369506832838442, -0.4024903287874, -0.3698882833, -0.46368689251213, -0.3157329272240367, -0.584078898462033, -0.797006439267647, -0.8127522417973333, -0.5283053197600013, -0.32637330830857, -0.34845770224826333, -0.6265533374472548, -0.38298636278602, -0.44099345217677777, -0.5524975190326966, -0.20447047321636666, -0.6536525386951111, -0.80469576873106, -0.8174305750526316, -0.6295477180243902, -0.5719876159965334, -0.35951445040064, -0.3716401588237288, -0.31339492978592465]}
{"prompt": "'''\nLord Omkar would like to have a tree with n nodes (3 \u2264 n \u2264 10^5) and has asked his disciples to construct the tree. However, Lord Omkar has created m (1 \u2264 m < n) restrictions to ensure that the tree will be as heavenly as possible. \n\nA tree with n nodes is an connected undirected graph with n nodes and n-1 edges. Note that for any two nodes, there is exactly one simple path between them, where a simple path is a path between two nodes that does not contain any node more than once.\n\nHere is an example of a tree: \n\n<image>\n\nA restriction consists of 3 pairwise distinct integers, a, b, and c (1 \u2264 a,b,c \u2264 n). It signifies that node b cannot lie on the simple path between node a and node c. \n\nCan you help Lord Omkar and become his most trusted disciple? You will need to find heavenly trees for multiple sets of restrictions. It can be shown that a heavenly tree will always exist for any set of restrictions under the given constraints.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains two integers, n and m (3 \u2264 n \u2264 10^5, 1 \u2264 m < n), representing the size of the tree and the number of restrictions.\n\nThe i-th of the next m lines contains three integers a_i, b_i, c_i (1 \u2264 a_i, b_i, c_i \u2264 n, a, b, c are distinct), signifying that node b_i cannot lie on the simple path between nodes a_i and c_i. \n\nIt is guaranteed that the sum of n across all test cases will not exceed 10^5.\n\nOutput\n\nFor each test case, output n-1 lines representing the n-1 edges in the tree. On each line, output two integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v) signifying that there is an edge between nodes u and v. Given edges have to form a tree that satisfies Omkar's restrictions.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''3\n3 1\n1 2 3\n3 1\n1 2 3\n3 1\n1 2 3''') == '''1 2\n1 3\n2 3'''\nassert solution('''3\n3 1\n1 2 3\n3 1\n1 2 3\n3 1\n1 2 3''') == '''1 2\n1 3\n2 3'''\nassert solution('''3\n3 1\n1 2 3\n3 1\n1 2 3\n3 1\n1 2 3''') == '''1 2\n1 3\n2 3'''", "solution(stdin) == stdout\n \n# generate random input for stress testing\nfrom random import randint\ntests = [randint(1, 10**5) for i in range(randint(1, 10**5))]\ntests = str(len(tests)) + '\\n' + '\\n'.join(str(test) for test in tests) + '\\n'\n\n# generate input in the format that is required\ntests = tests.split('\\n')\ntests = [t.split(' ') for t in tests]\ntests = [' '.join(t) for t in tests]\ntests = '\\n'.join(tests)\n\n# test if your solution is correct\nassert solution(tests) == stdout", "solution('''2\n4 2\n1 2 3\n1 3 4\n6 1\n1 2 3\n''') == '''1 2\n1 3\n2 4\n3 5\n4 6\n'''", "solution('''\n2\n10 2\n1 3 2\n5 6 2\n5 1\n1 2 3\n''') == '''\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n1 2\n1 3\n1 4\n1 5\n'''", "solution('''\n1\n5 2\n1 2 3\n1 3 2\n''') == '''\n1 2\n1 4\n2 3\n2 5\n3 5\n'''\n\nassert solution('''\n1\n5 2\n1 2 3\n3 4 5\n''') == '''\n1 2\n1 4\n2 3\n3 5\n4 5\n'''\n\nassert solution('''\n1\n4 1\n1 2 3\n''') == '''\n1 2\n1 3\n1 4\n'''\n\nassert solution('''\n1\n4 1\n1 2 4\n''') == '''\n1 2\n1 3\n2 4\n'''\n\nassert solution('''\n1\n5 2\n1 2 3\n1 3 4\n''') == '''\n1 2\n1 4\n2 3\n3 5\n4 5\n'''\n\nassert solution('''\n1\n6 3\n1 2 3\n1 3 4\n1 4 5\n''') == '''\n1 2\n1 5\n2 3\n3 4\n4 6\n5 6\n'''\n\nassert solution('''\n1\n5 3\n1 2 3\n2 3 4\n1 3 5\n''') == '''\n1 2\n1 4\n2 3\n3 5\n4 5\n'''\n\nassert solution", "solution(sys.stdin.read()) == '''\n4\n4 2\n1 2 3\n1 3 2\n1 2 3\n1 3 2\n1 4 2\n2 3 4\n2 4 3\n4 2\n1 2 3\n1 3 2\n1 2 3\n1 3 2\n1 4 2\n2 3 4\n2 4 3\n4 2\n1 2 3\n1 3 2\n1 2 3\n1 3 2\n1 4 2\n2 3 4\n2 4 3\n4 2\n1 2 3\n1 3 2\n1 2 3\n1 3 2\n1 4 2\n2 3 4\n2 4 3\n'''", "solution('''\n1\n5 4\n1 2 3\n1 3 4\n2 3 5\n2 4 5\n''') == '''\n1 3\n3 4\n3 5\n1 2\n'''\n\n# simulate stdin, stdout for testing\nimport sys\nimport io\n\ndef simulate_stdin(input: str):\n    sys.stdin = io.StringIO(input)\n\ndef simulate_stdout():\n    return sys.stdout.getvalue()\n\nsimulate_stdin('''\n1\n5 4\n1 2 3\n1 3 4\n2 3 5\n2 4 5\n''')\n\n# run the code\nsolution('')\n\nsimulate_stdin('''\n''')\n\n# run the code\nsolution('')\n\nprint('If you got here, you cleared all the tests!')", "solution('''\n1\n8 5\n1 2 3\n1 4 5\n1 7 8\n4 2 6\n4 3 7\n''') == '''\n1 2\n1 4\n4 2\n4 3\n4 7\n'''", "solution(\"\"\"\n1\n3 1\n1 2 3\n\"\"\") == \"\"\"\n1 2\n1 3\n\"\"\", \"sample1\"\n\nassert solution(\"\"\"\n1\n5 3\n2 4 5\n3 5 1\n1 4 2\n\"\"\") == \"\"\"\n1 2\n1 3\n1 4\n1 5\n\"\"\", \"sample2\"\n\nassert solution(\"\"\"\n2\n3 1\n1 2 3\n5 3\n2 4 5\n3 5 1\n1 4 2\n\"\"\") == \"\"\"\n1 2\n1 3\n1 4\n1 5\n\"\"\", \"multiple tests\"\n\n# test for performance\nimport random\nimport string\n\ndef random_str(n: int = 10**5) -> str:\n    return ''.join(random.choice(string.ascii_lowercase) for _ in range(n))\n\ndef random_edge() -> str:\n    return ' '.join(str(random.randint(1, 10**5)) for _ in range(2))\n\nprint(solution(random_str()))", "solution(\"\"\"\n2\n5 3\n1 3 2\n2 3 4\n1 3 5\n8 3\n1 2 3\n4 2 6\n4 2 8\n\"\"\") == \"\"\"\n1 2\n1 3\n3 4\n3 5\n\n1 2\n1 3\n3 4\n3 5\n3 6\n3 7\n3 8\n\"\"\"\n\nassert solution(\"\"\"\n1\n10 7\n2 8 3\n5 6 7\n5 6 10\n5 10 7\n5 10 8\n5 8 7\n5 8 10\n\"\"\") == \"\"\"\n1 2\n1 3\n1 4\n1 5\n2 6\n2 7\n2 8\n2 9\n2 10\n\"\"\"", "solution('''\n3\n3 1\n1 2 3\n4 2\n1 2 3\n1 2 4\n9 5\n1 2 3\n1 2 4\n1 2 5\n1 2 6\n1 2 7\n''') == '''\n1 2\n1 3\n2 3\n1 2\n2 3\n1 3\n2 4\n2 5\n1 6\n1 7\n'''", "solution('''\n''') == '''\n'''", "solution(\"1\\n\") == \"1\"", "solution(\"\"\"\n3\n3 2\n1 2 3\n2 3 1\n5 4\n1 2 3\n2 3 4\n3 4 5\n4 5 1\n8 2\n1 2 3\n1 5 6\n\"\"\") == \"\"\"\n1 2\n1 3\n2 3\n1 2\n1 3\n2 4\n3 5\n2 3\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n3 8\n\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"\n3\n3 3\n1 2 3\n2 3 1\n3 1 2\n5 4\n1 2 3\n2 3 4\n3 4 5\n4 5 1\n8 2\n1 2 3\n1 5 6\n\"\"\") == \"\"\"\n1 2\n1 3\n2 3\n1 2\n1 3\n2 4\n3 5\n2 3\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n3 8\n\"\"\", \"Wrong Answer\"\n\n# submit solution to hackerrank\n# test_case = input()\n# for i in range(int(test_case)):\n#     n, m = input().split()\n#     n, m = int(n), int(m)\n#     for j in range(m):\n#         a, b, c = input().split()\n#         a, b", "solution('''<input>''') == '''<output>'''", "solution('''\n3\n3 2\n1 2 3\n1 3 2\n5 5\n1 2 3\n1 3 2\n2 4 5\n2 5 4\n1 4 5\n1 5 4\n5 3\n2 3 4\n2 4 3\n1 5 4\n''') == '''\n1 2\n1 3\n2 4\n2 5\n3 4\n'''", "solution('''3\n3 1\n1 2 3\n3 1\n1 2 3\n3 2\n1 2 3\n1 3 2''') == '''1 2\n1 3\n2 3'''\nassert solution('''1\n4 2\n1 2 3\n1 2 4''') == '''1 2\n1 3\n2 4\n3 4'''\nassert solution('''2\n4 1\n1 2 3\n4 2\n1 2 3\n1 2 4''') == '''1 2\n1 3\n2 4\n3 4'''\n\n# send the answer to the hackerrank server\n# s = solution('''3\n# 3 1\n# 1 2 3\n# 3 1\n# 1 2 3\n# 3 2\n# 1 2 3\n# 1 3 2''')\n# print(s)\n# headers = {'Content-Type': 'application/json'}\n# r = requests.post('https://api.hackerrank.com/checker/submission.json',\n#                   data=json.dumps({\n#                       'source': 'solution.py',\n#                       'lang': 'PYTH3',\n#                       'testcases': [{'stdin': stdin} for stdin in stdins],\n#                       'api_key': 'hackerrank|291527", "True", "solution(\"\"\"\n1\n4 2\n1 2 3\n2 3 4\n\"\"\") == \"\"\"\n1 2\n1 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n8 3\n1 2 3\n2 3 4\n3 4 5\n\"\"\") == \"\"\"\n1 2\n1 3\n1 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4 2\n1 2 3\n2 3 4\n8 3\n1 2 3\n2 3 4\n3 4 5\n\"\"\") == \"\"\"\n1 2\n1 3\n1 5\n1 2\n1 3\n1 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n8 3\n1 2 3\n2 3 4\n3 4 5\n8 3\n1 2 3\n2 3 4\n3 4 5\n\"\"\") == \"\"\"\n1 2\n1 3\n1 5\n1 2\n1 3\n1 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4 2\n1 2 3\n2 3 4\n4 2\n1 2 3\n2 3 4\n\"\"\") == \"\"\"\n1 2\n1 3\n1 2\n1 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n8 3\n1 2 3\n2 3 4\n3 4 5\n8 3", "solution(stdin='1\\n3 1\\n1 2 3') == '1 2\\n1 3'\nassert solution(stdin='1\\n3 2\\n1 2 3\\n1 3 2') == '1 2\\n2 3'\nassert solution(stdin='2\\n3 1\\n1 2 3\\n5 4\\n1 2 3\\n1 3 2\\n1 4 5\\n1 5 4') == '1 2\\n1 3\\n1 2\\n1 3\\n2 3'\nassert solution(stdin='4\\n3 1\\n1 2 3\\n3 1\\n1 2 3\\n3 1\\n1 2 3\\n3 1\\n1 2 3') == '1 2\\n1 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\\n1 3'\nassert solution(stdin='10\\n5 3\\n1 2 3\\n1 3 2\\n1 4 5\\n4 1\\n1 2 4\\n4 1\\n1 2 4\\n4 1\\n1 2 4\\n4 1\\n1 2 4\\n4 1\\n1 2 4\\n4 1\\n1 2 4\\n4 1\\n1 2 4\\n4 1\\n1 2 4\\n4", "solution('''\n1\n4 3\n1 2 3\n1 3 4\n2 3 4\n''') == '''\n1 2\n1 3\n2 4\n'''\n\n# check the performance of solution\n# assert solution(...)", "solution('''5\n5 4\n1 2 3\n1 2 4\n1 2 5\n3 4 5\n10 8\n1 2 3\n1 2 4\n1 2 5\n3 4 5\n6 7 8\n6 7 9\n6 7 10\n8 9 10\n10 14\n1 2 3\n1 2 4\n1 2 5\n3 4 5\n6 7 8\n6 7 9\n6 7 10\n8 9 10\n1 5 6\n1 5 7\n1 5 8\n1 5 9\n1 5 10\n10 15\n1 2 3\n1 2 4\n1 2 5\n3 4 5\n6 7 8\n6 7 9\n6 7 10\n8 9 10\n1 5 6\n1 5 7\n1 5 8\n1 5 9\n1 5 10\n2 5 11\n''') == '''1 2\n1 3\n1 4\n2 3\n2 4\n'''\n\n# get the input\nwith open('in.txt', 'r') as f:\n    stdin = f.read()\n# solve the problem\nwith open('out.txt', 'w') as f:\n    f.write(solution(stdin))", "solution(r'''2\n4 1\n1 2 3\n5 1\n1 2 3\n''') == r'''1 2\n1 3\n1 4\n2 4\n1 2\n1 3\n1 4\n2 5\n3 5\n4 5\n'''\n# test case\n# stdin = r'''1\n# 6 1\n# 1 2 3\n# '''\n# print(solution(stdin))\n\n# submit code\n\"\"\"\n# read from stdin, write to stdout\nimport sys\ndef readline():\n    return sys.stdin.readline().strip()\n\ndef main():\n    for line in sys.stdin:\n        pass\n\"\"\"\n\n# if __name__ == '__main__':\n#     main()", "solution('''\n1\n3 2\n1 2 3\n2 3 1\n''') == '''\n1 2\n1 3\n'''\nassert solution('''\n1\n4 2\n1 2 3\n2 3 4\n''') == '''\n1 2\n1 3\n2 4\n'''\nassert solution('''\n1\n5 2\n1 2 3\n3 4 5\n''') == '''\n1 2\n1 3\n2 4\n2 5\n'''\nassert solution('''\n1\n10 3\n2 3 1\n4 1 3\n6 5 2\n''') == '''\n1 2\n1 4\n1 6\n2 3\n3 7\n4 5\n5 8\n6 9\n9 10\n'''\nassert solution('''\n1\n10 3\n2 3 1\n4 1 3\n6 5 2\n''') == '''\n1 2\n1 4\n1 6\n2 3\n3 7\n4 5\n5 8\n6 9\n9 10\n'''\nassert solution('''\n1\n10 5\n2 3 1\n4 1 3\n6 5 2\n8 7 6\n10 9 8\n''') == '''\n1 2\n1 4\n1 6\n1 8\n1 10\n2 3\n3 7\n4 5\n5 9\n6 11\n9 12\n10 13", "solution('''\n''') == '''\n'''", "solution('''\n2\n4 2\n1 2 3\n3 4 2\n3 1\n1 2 3\n''') == '''\n1 2\n1 3\n1 4\n'''\nassert solution('''\n2\n4 3\n1 2 3\n3 4 2\n2 4 1\n3 1\n1 2 3\n''') == '''\n1 2\n1 3\n2 4\n'''\n\n# read the input for the solution\nprint(solution(input()))", "solution('''\n\n''') == '''\n\n'''", "solution(r'''\n1\n9 1\n1 5 9\n''') == r'''\n1 2\n1 3\n1 4\n1 6\n1 7\n1 8\n1 9\n'''\nassert solution(r'''\n2\n5 3\n2 1 5\n2 3 5\n2 4 5\n2 3\n2 1 3\n2 4 3\n''') == r'''\n1 2\n1 3\n1 4\n1 5\n'''\nassert solution(r'''\n1\n7 4\n1 2 7\n1 3 7\n1 4 7\n1 5 7\n''') == r'''\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n'''\nassert solution(r'''\n2\n4 3\n2 1 4\n2 3 4\n2 4 4\n7 4\n1 2 7\n1 3 7\n1 4 7\n1 5 7\n''') == r'''\n1 2\n1 3\n1 4\n'''\nassert solution(r'''\n1\n6 3\n1 2 6\n1 3 6\n1 4 6\n''') == r'''\n1 2\n1 3\n1 4\n1 5\n1 6\n'''\nassert solution(r'''\n1\n4 2\n1 2 4\n1 3 4\n''') == r'''\n1 2\n", "solution('''\n3\n3 1\n1 2 3\n4 3\n1 2 3\n2 3 4\n3 4 5\n10 4\n1 2 3\n1 2 4\n1 2 5\n1 2 6\n''') == '''\n1 2\n1 3\n2 3\n1 2\n1 3\n2 4\n3 4\n2 3\n2 4\n3 4\n'''\n\nassert solution('''\n1\n5 2\n1 2 3\n1 3 4\n''') == '''\n1 2\n1 3\n1 4\n4 5\n'''\n\nassert solution('''\n2\n4 3\n1 2 3\n2 3 4\n3 4 5\n5 3\n1 2 3\n1 2 4\n1 2 5\n''') == '''\n1 2\n1 3\n2 3\n2 4\n3 4\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n'''", "solution('''\n1\n4 2\n1 2 3\n2 3 4\n''') == '''\n1 2\n1 3\n1 4\n'''\n\nif __name__ == '__main__':\n    import os\n    from datetime import datetime\n\n    samples = []\n    for input_file in ['sample-1.in', 'sample-2.in', 'sample-3.in']:\n        with open(os.path.join(os.path.dirname(__file__), input_file), 'r') as file:\n            samples.append(file.read())\n\n    start = datetime.now()\n    for sample in samples:\n        print(solution(sample))\n        print(datetime.now() - start)", "solution(\"\") == \"\"", "solution(stdin) == expected_stdout\n\n# check if the solution contains the given set of restrictions\n\n# check if the solution has n-1 edges\n\n# check if the solution has connected components\n\n# check if the solution is a tree", "solution('''\n1\n4 2\n1 2 3\n1 3 4\n''') == '''\n1 2\n1 3\n2 4\n'''\nassert solution('''\n1\n5 4\n1 2 3\n1 2 4\n1 2 5\n3 5 4\n''') == '''\n1 3\n3 4\n1 5\n2 4\n'''\nassert solution('''\n1\n8 3\n1 2 3\n1 2 4\n1 2 5\n''') == '''\n1 2\n1 4\n1 5\n2 3\n2 6\n2 7\n2 8\n'''\n\n# add test cases to test the correctness of solution\n\n# add test cases to test the performance of solution", "solution(SAMPLE) == '''\n3\n'''", "solution(example) == example_out\n\n# check if the solution is fast enough\nimport timeit\nassert timeit.timeit(lambda: solution(example), number=1000) < 20", "solution('''\n1\n4 1\n1 2 3\n''') == '''\n1 2\n1 3\n1 4\n'''\n\nassert solution('''\n2\n5 3\n1 2 3\n2 3 4\n1 4 5\n5 3\n1 2 3\n2 3 4\n3 4 5\n''') == '''\n1 2\n1 3\n1 4\n1 5\n3 4\n3 5\n'''\n\nassert solution('''\n1\n8 6\n1 2 3\n2 3 4\n3 4 5\n4 5 6\n2 5 7\n5 6 8\n''') == '''\n1 2\n1 3\n1 4\n2 3\n2 5\n2 6\n2 7\n2 8\n'''\n\nassert solution('''\n1\n10 4\n1 2 3\n3 4 5\n4 5 6\n1 5 7\n''') == '''\n1 2\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n'''\n\nassert solution('''\n1\n15 8\n1 2 3\n2 3 4\n1 4 5\n4 5 6\n6 7 8\n7 8 9\n6 10 11\n8 12 13\n''') == '''\n1 2\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1", "solution(\"\") == \"\", \"empty input\"\nassert solution(\"2\\n3 2\\n1 2 3\\n1 3 2\\n3 2\\n1 2 3\\n1 3 2\") == \"1 2\\n1 3\\n2 3\\n1 2\\n1 3\\n2 3\", \"two small test cases\"", "solution('''\n4\n5 2\n1 2 3\n3 4 5\n3 1\n1 2 3\n5 5\n2 3 1\n3 4 1\n4 5 1\n1 5 2\n2 3 3\n8 5\n1 2 3\n3 4 5\n5 6 7\n1 4 8\n1 7 8\n''') == '''\n1 2\n1 3\n2 4\n2 5\n3 5\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n3 6\n3 7\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n3 6\n3 7\n'''", "solution('''2\n4 2\n2 3 4\n4 1 3\n4 2\n2 3 4\n4 1 2\n''') == '''1 2\n1 3\n2 4\n1 2\n1 3\n1 4\n'''\n\n# check the correctness of solution\nassert solution('''2\n4 3\n2 3 4\n4 1 3\n1 2 3\n4 2\n2 3 4\n4 1 2\n''') == '''1 2\n1 3\n2 4\n1 2\n1 3\n1 4\n'''\n\n# check the correctness of solution\nassert solution('''1\n5 4\n1 2 3\n2 3 4\n2 3 5\n1 2 4\n''') == '''1 2\n1 3\n2 4\n2 5\n'''", "solution('''\n2\n3 1\n1 2 3\n4 2\n1 2 3\n1 3 4\n''') == '''\n1 2\n1 3\n2 3\n2 4\n3 4\n'''\nprint('OK')", "solution(__file__.replace('.py', '_input.txt')) == __file__.replace('.py', '_output.txt')", "solution('''\n''') == '''\n'''", "solution(stdin='''1\n3 1\n1 2 3\n''') == '''1 2\n1 3\n'''\nassert solution(stdin='''1\n3 2\n1 2 3\n1 3 2\n''') == '''1 2\n1 3\n'''\nassert solution(stdin='''2\n3 1\n1 2 3\n4 2\n1 2 3\n1 3 4\n''') == '''1 2\n1 3\n1 2\n1 3\n1 4\n'''\nassert solution(stdin='''2\n4 2\n1 2 3\n1 3 4\n5 3\n1 2 3\n1 3 4\n1 4 5\n''') == '''1 2\n1 3\n1 4\n1 2\n1 3\n1 4\n1 5\n'''\n\n# print('\\ninput:\\n{0}'.format(stdin))\n# print('\\noutput:\\n{0}'.format(solution(stdin=stdin)))", "solution('''\n1\n3 2\n1 2 3\n1 3 2\n''') == '''\n1 2\n1 3\n'''\n\nassert solution('''\n1\n4 2\n1 2 3\n1 4 3\n''') == '''\n1 2\n1 3\n3 4\n'''\n\nassert solution('''\n1\n4 3\n1 2 3\n1 4 3\n1 3 4\n''') == '''\n1 2\n1 3\n3 4\n'''\n\nassert solution('''\n1\n4 2\n1 2 3\n1 4 3\n''') == '''\n1 2\n1 3\n3 4\n'''\n\nassert solution('''\n1\n4 2\n1 2 3\n1 4 3\n''') == '''\n1 2\n1 3\n3 4\n'''\n\nassert solution('''\n1\n4 3\n1 2 3\n1 4 3\n1 3 4\n''') == '''\n1 2\n1 3\n3 4\n'''\n\nassert solution('''\n1\n4 2\n1 2 3\n1 4 3\n''') == '''\n1 2\n1 3\n3 4\n'''\n\nassert solution('''\n1\n4 3\n1 2 3\n1 4 3\n1 3 4\n''') == '''\n1", "solution('''1\n4 2\n1 2 3\n1 3 4\n''') == '''1 2\n1 3\n2 4\n'''\n\ndef solution2(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution2('''1\n5 2\n1 2 3\n1 4 5\n''') == '''1 2\n1 3\n2 4\n2 5\n'''\n\n# Some useful code to read input\nt = int(input())\nfor i in range(t):\n    n, m = map(int, input().split())\n    restrictions = []\n    for j in range(m):\n        a, b, c = map(int, input().split())\n        restrictions.append((a, b, c))\n    print(solution(n, m, restrictions))", "solution('''\n1\n3 1\n1 2 3\n''') == '''\n1 2\n1 3\n'''\n\nassert solution('''\n1\n4 2\n1 2 3\n2 3 4\n''') == '''\n1 2\n1 3\n1 4\n'''\n\nassert solution('''\n1\n10 4\n1 2 6\n3 2 7\n3 2 8\n3 2 9\n''') == '''\n1 3\n1 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n'''", "solution('''\n1\n5 2\n1 2 3\n1 4 5\n''') == '''\n1 2\n1 3\n2 4\n2 5\n'''\n\n# print solution to STDOUT\n# if __name__ == '__main__':\n#     with open(sys.argv[1], 'r') as handle:\n#         print(solution(handle.read()))", "solution('''\n''') == '''\n'''", "solution('''3\n3 2\n1 2 3\n2 3 1\n5 2\n2 3 1\n3 4 5\n5 1\n3 4 5''') == '''1 2\n1 3\n2 3\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5'''", "solution('''\n2\n3 2\n1 2 3\n1 3 2\n5 2\n1 2 3\n3 4 5\n''') == '''\n1 2\n1 3\n1 4\n1 5\n2 3\n'''"], "finish_reason": ["stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-21.694913558013983, -106.80018491331003, -21.784896961700003, -38.90156218505001, -67.17659162013003, -45.829114951720015, -82.77806525504397, -32.11653797830001, -91.84665239284503, -92.44407580521003, -33.94411938694, -5.118119382000001, -13.0567599, -97.527630405461, -8.987677312599999, -42.76159144439998, -106.05728042926194, -4.257627, -53.58634990472001, -63.909216290131, -25.257468160199995, -82.72093810723999, -100.51025359193, -85.68919445986305, -5.113754139, -44.639194082159996, -6.3885929298, -91.88183322251406, -69.07248908289998, -33.914373289595034, -5.348808774, -56.70808559699999, -76.51181204639998, -17.166509569, -33.49322005759999, -105.75934819970003, -33.1568501585, -79.50461468146008, -58.89613282358002, -22.4472944983, -13.962587965789997, -5.113724906000001, -66.88942864170998, -44.685911415850015, -71.30460746312997, -47.354795663649995, -44.323637967149985, -5.113723616000001, -38.59691217259999, -21.78684403], "mean_logprob": [-0.16949151217198438, -0.6395220653491617, -0.463508445993617, -0.5256967862844595, -0.2239219720671, -0.32274024613887325, -0.4223370676277755, -0.5947507033018519, -0.38591030417161765, -0.6162938387014, -0.39016229180390805, -0.36557995585714287, -1.1869781727272728, -0.32509210135153666, -0.49931540625555554, -0.5090665648142857, -0.35352426809754, -4.257627, -0.17862116634906666, -0.21303072096710332, -0.46773089185555555, -0.3218713545028794, -0.580984124808844, -0.2856306481995433, -0.3652681527857143, -0.40953389066201834, -0.3992870581125, -0.30627277740838, -0.33049037838708134, -0.19603683982424855, -0.891468129, -1.0126443856607144, -0.4752286462509317, -1.2261792549285715, -0.7789120943627907, -0.35253116066566664, -0.4362743441907895, -0.49381748249354035, -0.33654933042045715, -0.4156906388574074, -0.3989310847368572, -0.36526606471428574, -0.29861352072191966, -0.14895303805283333, -0.37332255216298427, -0.36995934112226564, -0.48707294469395607, -0.36526597257142857, -0.5215798942243244, -0.4110725288679245]}
{"prompt": "'''\nIt turns out that the meaning of life is a permutation p_1, p_2, \u2026, p_n of the integers 1, 2, \u2026, n (2 \u2264 n \u2264 100). Omkar, having created all life, knows this permutation, and will allow you to figure it out using some queries.\n\nA query consists of an array a_1, a_2, \u2026, a_n of integers between 1 and n. a is not required to be a permutation. Omkar will first compute the pairwise sum of a and p, meaning that he will compute an array s where s_j = p_j + a_j for all j = 1, 2, \u2026, n. Then, he will find the smallest index k such that s_k occurs more than once in s, and answer with k. If there is no such index k, then he will answer with 0.\n\nYou can perform at most 2n queries. Figure out the meaning of life p.\n\nInteraction\n\nStart the interaction by reading single integer n (2 \u2264 n \u2264 100) \u2014 the length of the permutation p.\n\nYou can then make queries. A query consists of a single line \"? \\enspace a_1 \\enspace a_2 \\enspace \u2026 \\enspace a_n\" (1 \u2264 a_j \u2264 n).\n\nThe answer to each query will be a single integer k as described above (0 \u2264 k \u2264 n).\n\nAfter making a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nTo output your answer, print a single line \"! \\enspace p_1 \\enspace p_2 \\enspace \u2026 \\enspace p_n\" then terminate.\n\nYou can make at most 2n queries. Outputting the answer does not count as a query.\n\nHack Format\n\nTo hack, first output a line containing n (2 \u2264 n \u2264 100), then output another line containing the hidden permutation p_1, p_2, \u2026, p_n of numbers from 1 to n.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(stdin='''\n''') == '''\n'''\n\n# stress testing\nwhile True:\n    pass", "solution('''\n''') == '''\n'''", "solution('''\n''') == '''\n'''", "solution(\"\"\"\n4\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n? 1 1 1 1\n", "solution('''3\n? 1 2 3\n? 2 3 1\n! 1 2 3''') == '''2\n0\n'''\n\n# get input\nn = int(input())\nassert 2 <= n <= 100\nqueries = []\nfor _ in range(2 * n):\n    queries.append(list(map(int, input().split())))\n\n# send queries and check the answer\nquery_id = 0\nanswer = ''\nfor line in solution(f'{n}\\n' + '\\n'.join([' '.join(map(str, q)) for q in queries])).splitlines():\n    if line.startswith('!'):\n        answer = line[2:]\n        break\n    expected = queries[query_id][0]\n    found = int(line)\n    assert expected == found\n    query_id += 1\n\n# check if the answer is correct\np = list(map(int, answer.split()))\nassert len(p) == n\nassert all(1 <= x <= n for x in p)\nassert len(set(p)) == n\nassert all(p[i - 1] + p[i] != x + y for i in range(n) for x, y in zip(queries[i], p))", "solution('''\n3\n? 1 2 3\n? 2 1 3\n? 3 2 1\n? 3 2 1\n? 1 2 3\n''') == '''\n! 1 2 3\n'''\n\nassert solution('''\n1\n? 1\n''') == '''\n! 1\n'''\n\nassert solution('''\n5\n? 2 2 2 2 2\n? 1 2 3 4 5\n? 3 4 2 1 5\n? 1 3 5 2 4\n? 2 1 4 5 3\n? 1 2 3 4 5\n? 2 1 4 5 3\n? 1 2 3 4 5\n? 2 1 4 5 3\n? 1 3 2 4 5\n? 1 2 3 4 5\n? 2 1 4 5 3\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 2 1 4 5 3\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3", "solution(r'''\n2\n? 1 2\n! 1 2\n''') == r'''\n? 1 2\n! 1 2\n'''\n\nassert solution(r'''\n4\n? 2 1 4 3\n? 4 1 2 3\n? 4 1 3 2\n! 2 4 1 3\n''') == r'''\n? 2 1 4 3\n? 4 1 2 3\n? 4 1 3 2\n! 2 4 1 3\n'''\n\nassert solution(r'''\n4\n? 4 1 2 3\n? 2 1 4 3\n? 4 1 3 2\n! 2 4 1 3\n''') == r'''\n? 4 1 2 3\n? 2 1 4 3\n? 4 1 3 2\n! 2 4 1 3\n'''\n\nassert solution(r'''\n10\n? 1 2 3 4 5 6 7 8 9 10\n? 10 1 2 3 4 5 6 7 8 9\n? 10 9 8 7 6 5 4 3 2 1\n? 1 2 3 4 5 6 7 8 9 10\n? 10 1 2 3 4 5 6 7 8 9\n? 10 9 8 7 6 5 4 3 2 1\n? 1 2 3 4 5 6 7 8 9 10\n? 10 1 2 3 4 5 6 7 8 9\n? 10 9 8 7 6 5 4 3 2 1\n! 1 10 2 9 3 8 4 7 5 6\n", "solution(\"2\\n\") == \"1 2\\n\", \"Example\"\n\n# get the inputs from Intenet\nfrom urllib.request import urlopen\nfrom urllib.error import URLError\n\nclass Response:\n    def __init__(self, content: bytes, status_code: int):\n        self.content = content\n        self.status_code = status_code\n\nif __name__ == \"__main__\":\n    response = Response(urlopen(\"https://www.codingame.com/services/PuzzleInputService/getInput?action=getPuzzleInput&puzzleId=12&sessionToken=9c9f1ebb05a6f5ae14812458d75b3a2f99770156\").read(), 200)\n    if response.status_code == 200:\n        print(solution(response.content.decode()))\n    else:\n        print(\"ERROR\")", "solution(\"\"\"\n2\n? 1 2\n? 1 1\n\"\"\") == \"\"\"\n! 1 2\n\"\"\"\n\nassert solution(\"\"\"\n3\n? 1 2 3\n? 1 1 1\n? 2 2 2\n\"\"\") == \"\"\"\n! 2 1 3\n\"\"\"\n\nassert solution(\"\"\"\n4\n? 1 2 3 4\n? 1 1 1 1\n? 1 2 3 4\n? 1 1 1 1\n? 1 2 3 4\n? 1 1 1 1\n? 2 2 2 2\n? 1 1 1 1\n? 2 2 2 2\n? 1 1 1 1\n? 2 2 2 2\n? 1 1 1 1\n? 3 3 3 3\n? 1 1 1 1\n? 3 3 3 3\n? 1 1 1 1\n? 3 3 3 3\n? 1 1 1 1\n? 4 4 4 4\n? 1 1 1 1\n? 4 4 4 4\n? 1 1 1 1\n? 4 4 4 4\n? 1 1 1 1\n? 1 2 3 4\n? 1 1 1 1\n? 1 2 3 4\n? 1 1 1 1\n? 1 2 3 4\n? 1 1 1 1\n? 2 2 2 2\n? 1 1 1 1\n? 2 2 2 2\n? 1 1 1 1\n? 2 2 2 2\n? 1 1 1 1\n? 3 3 3 3\n? 1 1 1 1\n? 3 3 3", "solution('''\n2\n? 1 2\n? 2 1\n! 1 2\n''') == '''\n! 1 2\n'''\n\n# STRESS TEST\nimport random, string\n\ndef gen_query(n):\n    return '? ' + ' '.join(map(str, random.sample(range(1, n + 1), n)))\n\ndef gen_answer(n):\n    return '! ' + ' '.join(map(str, random.sample(range(1, n + 1), n)))\n\ndef stress_test(N: int, M: int):\n    print(N)\n    for _ in range(M):\n        print(gen_query(N))\n    print(gen_answer(N))\n\nif __name__ == '__main__':\n    stress_test(2, 3)\n    print()\n    stress_test(10, 1000)\n    print()\n    stress_test(100, 10000)", "(solution('''2\n? 1 2\n? 2 1\n''') == '''! 1 2\n''')\nassert (solution('''2\n? 1 2\n? 1 2\n! 1 2\n''') == 'Accepted')\nassert (solution('''3\n? 1 2 3\n? 1 2 3\n? 1 2 3\n? 1 2 3\n? 1 2 3\n! 2 1 3\n''') == 'Accepted')\nassert (solution('''4\n? 1 2 3 4\n? 2 1 4 3\n? 4 3 2 1\n? 4 3 2 1\n? 4 3 2 1\n! 2 4 1 3\n''') == 'Accepted')\nassert (solution('''4\n? 1 2 3 4\n? 1 2 3 4\n? 1 2 3 4\n? 1 2 3 4\n? 1 2 3 4\n! 1 2 3 4\n''') == 'Accepted')\nassert (solution('''3\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n! 1 1 1\n''') == 'Accepted')\nassert (solution('''2\n? 1 1\n? 1 1\n? 1 1\n? 1 1\n! 1 1\n''') == 'Accepted')\nassert (solution('''3\n? 1", "solution(\"2\\n? 1 2\\n? 2 1\\n! 1 2\") == \"2\\n1 2\"\nassert solution(\"3\\n? 1 2 3\\n? 2 3 1\\n? 1 3 2\\n! 1 2 3\") == \"1 2 3\"\nassert solution(\"4\\n? 1 2 3 4\\n? 2 3 4 1\\n? 3 4 1 2\\n? 4 1 2 3\\n! 2 3 4 1\") == \"2 3 4 1\"\nassert solution(\"5\\n? 1 2 3 4 5\\n? 2 3 4 5 1\\n? 3 4 5 1 2\\n? 4 5 1 2 3\\n? 5 1 2 3 4\\n! 3 4 5 1 2\") == \"3 4 5 1 2\"\nassert solution(\"6\\n? 1 2 3 4 5 6\\n? 2 3 4 5 6 1\\n? 3 4 5 6 1 2\\n? 4 5 6 1 2 3\\n? 5 6 1 2 3 4\\n? 6 1 2 3 4 5\\n! 4 5 6 1 2 3\") == \"4 5 6 1 2 3\"\nassert solution(\"7\\n? 1 2 3 4 5 6 7\\n? 2 3 4 5 6 7 1\\n? 3 4 5 6 7 1 2\\n? 4 5 6 7 1 2 3\\n? 5", "solution(\"\"\"\n3\n? 3 1 2\n! 1 2 3\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2\n? 2 1\n? 1 2\n! 1 2\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2\n? 1 2\n? 2 1\n! 1 2\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n2\n? 1 2\n? 2 1\n! 2 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n3\n? 3 1 2\n? 2 3 1\n? 1 2 3\n! 1 2 3\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n3\n? 3 1 2\n? 2 3 1\n? 1 2 3\n! 1 3 2\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# auto-testing\nif __name__ == '__main__':\n    for t in range(1, 10):\n        with open(f'{t}.in', 'r') as inp:\n            with open(f'{t}.out', 'r') as out:\n                assert solution(inp.read()) == out.read()", "solution(\"\"\"\n3\n? 1 2 3\n? 2 1 3\n? 3 2 1\n? 1 1 1\n! 1 2 3\n\"\"\") == '''\n1\n2\n3\n0\n'''", "solution('''3\n? 1 2 2\n? 1 2 3\n! 1 2 3''') == '2\\n3\\n1 2 3'\nassert solution('''2\n? 1 1\n? 1 2\n! 1 2''') == '1\\n1 2'\nassert solution('''5\n? 1 1 1 1 1\n? 1 1 1 1 1\n? 1 1 1 1 1\n? 1 1 1 1 1\n? 1 1 1 1 1\n! 1 2 3 4 5''') == '1\\n1\\n1\\n1\\n1\\n1 2 3 4 5'\nassert solution('''3\n? 1 1 1\n? 1 1 1\n? 1 1 1\n! 1 2 3''') == '1\\n1\\n1\\n1 2 3'\nassert solution('''3\n? 1 1 1\n? 1 1 1\n? 1 1 1\n! 1 2 3''') == '1\\n1\\n1\\n1 2 3'\nassert solution('''3\n? 1 1 1\n? 1 1 1\n? 1 1 1\n! 1 2 3''') == '1\\n1\\n1\\n1 2 3'\nassert solution('''3\n? 1 1 1\n? 1 1 1\n? 1 1 1\n! 1 2 3''') == '", "solution(get_file_contents('example.in')) == get_file_contents('example.out')\n# start the solution\nassert solution(get_file_contents('input1.in')) == get_file_contents('output1.out')\n# test\n# ???\n# ?????\n# ??????????\n# ??????????????????\n# ???????????????????????????\n# ????????????????????????????????????????\n# ????????????????????????????????????????????????????????????\n# ????????????????????????????????????????????????????????????????????????????????\n# ??????????????????????????????????????????????????????????????????????????????????????????????????????????\n# ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n# ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n# ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n# ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n# ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\n# ????????????????????????????????????????????????????????????????????????????????????????????????????????", "solution(sample_input) == sample_output", "solution('''\n4\n''') == '''\n! 1 2 3 4\n'''\n\nassert solution('''\n3\n''') == '''\n! 1 2 3\n'''\n\n# check the correctness of interaction\nfrom interaction import interaction\ninteraction(solution, checker)", "solution('''\n3\n? 2 3 1\n? 1 3 2\n! 1 2 3\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n? 3 2 1 3 5\n? 3 3 2 3 3\n? 3 1 1 2 3\n? 2 1 2 2\n? 1 1 2\n! 2 3 4 1 5\n''') == '''\n3\n3\n3\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n? 10 8 9 7 5 3 4 6 2 1\n? 10 8 9 7 5 3 4 6 2 1\n? 10 8 9 7 5 3 4 6 2 1\n? 10 8 9 7 5 3 4 6 2 1\n? 10 8 9 7 5 3 4 6 2 1\n? 10 8 9 7 5 3 4 6 2 1\n? 10 8 9 7 5 3 4 6 2 1\n? 10 8 9 7 5 3 4 6 2 1\n? 10 8 9 7 5 3 4 6 2 1\n? 10 8 9 7 5 3 4 6 2 1\n! 2 8 1 9 4 5 6 3 7 10\n''') == '''\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n'''", "solution('''\n5\n? 1 1 1 1 1\n? 1 2 3 4 5\n? 5 4 3 2 1\n''') == '''\n! 1 2 3 4 5\n'''\nassert solution('''\n3\n? 1 1 1\n? 1 2 3\n? 3 2 1\n''') == '''\n! 1 2 3\n'''\nassert solution('''\n10\n? 1 1 1 1 1 1 1 1 1 1\n? 1 2 3 4 5 6 7 8 9 10\n? 10 9 8 7 6 5 4 3 2 1\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6 7 8 9 10\n? 1 2 3 4 5 6", "solution(\n'''\n7\n? 2 1 1 1 2 2\n? 2 1 1 1 2 3\n? 2 1 1 1 2 1\n? 2 1 1 1 2 2\n! 1 2 3 1 2 2\n''') == '''\n1\n1\n1\n0\n'''\n\n# get input and run the solution\ninput()\nsolution(input())", "solution('''\n5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5", "solution('''\n3\n? 2 1 1\n? 1 2 1\n? 1 1 2\n? 2 1 2\n? 1 2 2\n? 1 2 3\n? 2 1 3\n? 2 3 1\n? 3 2 1\n? 3 1 2\n? 2 3 2\n? 1 3 2\n? 3 1 3\n? 1 3 3\n! 2 1 3\n''') == '''\n3\n! 2 1 3\n'''\n\nassert solution('''\n10\n? 4 3 2 1 5 6 7 8 9 10\n? 1 5 4 3 2 6 7 8 9 10\n? 1 6 2 4 5 3 7 8 9 10\n? 1 3 4 2 5 6 7 8 9 10\n? 1 2 4 6 5 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n? 1 2 4 5 6 3 7 8 9 10\n?", "solution('''\n3\n? 1 2 3\n? 2 1 3\n? 3 2 1\n? 3 1 2\n? 1 3 2\n? 2 3 1\n''') == '''\n! 1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n? 1 2 3 4\n? 2 1 3 4\n? 3 2 1 4\n? 4 3 2 1\n? 1 3 2 4\n? 2 3 1 4\n? 3 1 2 4\n? 4 1 3 2\n? 1 4 3 2\n? 2 4 1 3\n? 3 4 2 1\n? 4 2 3 1\n? 1 2 4 3\n? 2 1 4 3\n? 3 2 4 1\n? 4 3 1 2\n? 1 3 4 2\n? 2 3 4 1\n? 3 1 4 2\n? 4 1 2 3\n? 1 4 2 3\n? 2 4 3 1\n? 3 4 1 2\n? 4 2 1 3\n''') == '''\n! 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n? 1 2 3 4 5\n? 2 1 3 4 5\n? 3 2 1 4 5\n? 4 3 2 1 5\n? 5 4 3 2 1\n? 1 4 3 2 5\n? 2 4 1 3 5\n? 3 4 2 1 5\n? 4", "solution(\"\"\"1\n! 1\"\"\") == \"\"\"1\n1\"\"\"\nassert solution(\"\"\"2\n? 1 2\n! 1 2\"\"\") == \"\"\"2\n1 2\"\"\"\nassert solution(\"\"\"3\n? 1 2 3\n? 1 1 3\n! 1 2 3\"\"\") == \"\"\"3\n1 2 3\"\"\"\nassert solution(\"\"\"3\n? 1 2 3\n? 2 1 3\n! 1 2 3\"\"\") == \"\"\"3\n1 2 3\"\"\"\nassert solution(\"\"\"2\n? 1 2\n? 1 2\n! 1 2\"\"\") == \"\"\"2\n1 2\"\"\"\nassert solution(\"\"\"4\n? 1 2 3 4\n? 4 3 2 1\n? 1 3 2 4\n! 1 2 3 4\"\"\") == \"\"\"4\n1 2 3 4\"\"\"\nassert solution(\"\"\"3\n? 1 2 3\n? 1 2 3\n? 1 1 3\n! 1 2 3\"\"\") == \"\"\"3\n1 2 3\"\"\"\nassert solution(\"\"\"3\n? 1 2 3\n? 1 2 3\n? 1 1 3\n? 1 1 1\n! 1 2 3\"\"\") == \"\"\"3\n1 2 3\"\"\"\nassert solution(\"\"\"1\n? 1\n! 1\"\"\") == \"\"\"1\n1\"\"\"\nassert solution(\"\"\"2\n? 1 2\n? 1 2\n? 1 2\n! 1 2\"\"\") == \"\"\"2\n1 2\"\"\"\nassert solution(\"", "solution(\"\"\"\n3\n? 1 1 1\n! 1 2 3\n\"\"\") == \"0\\n\"\n\nassert solution(\"\"\"\n5\n? 1 3 4 5 2\n? 1 1 1 1 1\n? 5 4 3 2 1\n! 5 4 3 2 1\n\"\"\") == \"0\\n2\\n0\\n\"\n\nassert solution(\"\"\"\n3\n? 1 1 1\n? 2 1 1\n? 1 1 1\n? 1 1 1\n! 1 2 3\n\"\"\") == \"0\\n1\\n0\\n0\\n\"\n\nassert solution(\"\"\"\n3\n? 1 2 3\n? 2 3 1\n? 1 3 2\n? 1 1 1\n? 1 2 1\n? 2 2 1\n? 1 2 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n", "solution(SAMPLE_PROBLEM) == SAMPLE_SOLUTION\n\n# get input for running on the website\n# TAKES TOO LONG TO RUN ON WEBSITE\n'''\nwith open('input.txt', 'r') as f:\n    problem = f.read()\nprint(solution(problem))\n'''", "(solution(TEST1) == TEST1_ANS)\nprint(\"Success!\")", "solution('''\n3\n? 1 1 1\n? 1 1 2\n? 1 2 1\n? 1 2 2\n? 2 1 1\n? 2 1 2\n? 2 2 1\n? 2 2 2\n? 3 1 1\n? 3 1 2\n? 3 2 1\n? 3 2 2\n? 1 3 1\n? 1 3 2\n? 1 3 3\n? 2 3 1\n? 2 3 2\n? 2 3 3\n? 3 3 1\n? 3 3 2\n? 3 3 3\n? 1 1 3\n? 1 2 3\n? 1 3 3\n? 2 1 3\n? 2 2 3\n? 2 3 3\n? 3 1 3\n? 3 2 3\n? 3 3 3\n''') == '''\n! 1 2 3\n'''\nassert solution('''\n4\n? 1 1 1 1\n? 1 1 1 2\n? 1 1 1 3\n? 1 1 1 4\n? 1 1 2 1\n? 1 1 2 2\n? 1 1 2 3\n? 1 1 2 4\n? 1 1 3 1\n? 1 1 3 2\n? 1 1 3 3\n? 1 1 3 4\n? 1 1 4 1\n? 1 1 4 2\n? 1 1 4 3\n? 1 1 4 4\n? 1 2 1 1\n? 1 2 1 2\n? 1 2 1 3\n? 1 2 1 4\n?", "solution(\"2\") == \"! 2 1\"\nassert solution(\"3\") == \"! 3 2 1\"\nassert solution(\"4\") == \"! 4 3 2 1\"\nassert solution(\"5\") == \"! 5 4 3 2 1\"\nassert solution(\"6\") == \"! 6 5 4 3 2 1\"\nassert solution(\"7\") == \"! 7 6 5 4 3 2 1\"\nassert solution(\"8\") == \"! 8 7 6 5 4 3 2 1\"\nassert solution(\"9\") == \"! 9 8 7 6 5 4 3 2 1\"\nassert solution(\"10\") == \"! 10 9 8 7 6 5 4 3 2 1\"\n\nprint(\"All tests passed.\")", "solution('''2\n? 1 2\n? 1 1\n! 1 2''') == '1 2\\n'\nassert solution('''3\n? 1 2 3\n? 3 2 1\n? 3 3 3\n! 1 2 3''') == '1 2 3\\n'\nassert solution('''3\n? 1 2 1\n? 2 1 2\n? 1 2 1\n! 2 1 3''') == '2 1 3\\n'\nassert solution('''5\n? 1 2 3 4 5\n? 5 4 3 2 1\n? 1 2 3 4 5\n? 5 4 3 2 1\n? 1 2 3 4 5\n! 1 2 3 4 5''') == '1 2 3 4 5\\n'\nassert solution('''2\n? 1 1\n? 1 1\n! 1 2''') == '1 2\\n'\nassert solution('''3\n? 2 3 1\n? 3 1 2\n? 1 3 2\n! 1 2 3''') == '1 2 3\\n'\nassert solution('''6\n? 1 2 3 4 5 6\n? 6 5 4 3 2 1\n? 1 2 3 4 5 6\n? 6 5 4 3 2 1\n? 1 2 3 4 5 6\n! 1 2 3 4 5 6''') == '1 2 3 4 5 6\\n'\nassert solution('''", "solution(\"\"\"\n5\n? 1 2 3 4 5\n? 1 1 1 1 1\n? 3 4 1 5 2\n? 1 1 1 1 1\n? 5 4 3 2 1\n? 5 5 5 5 5\n? 1 5 5 5 5\n\"\"\") == \"\"\"\n! 3 2 5 4 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n? 1 2 3 4 5 6 7 8 9 10\n? 10 10 10 10 10 10 10 10 10 10\n? 1 2 3 4 5 6 7 8 9 10\n? 10 10 10 10 10 10 10 10 10 10\n? 3 4 1 5 2 6 7 8 9 10\n? 1 1 1 1 1 1 1 1 1 1\n? 3 4 1 5 2 6 7 8 9 10\n? 4 3 2 1 5 6 7 8 9 10\n? 1 5 5 5 5 5 5 5 5 5\n? 4 3 2 1 5 6 7 8 9 10\n? 4 5 6 7 8 9 10 1 2 3\n? 4 5 6 7 8 9 10 1 2 3\n? 4 5 6 7 8 9 10 1 2 3\n? 4 5 6 7 8 9 10 1 2 3\n? 4 5 6 7 8 9 10 1 2 3\n? 10 10 10 10 10 10 10 10 10 10\n? 10 10 10 10 10 10 10 10 10 10\n? 10 10 10 10 10 10 10 10 10 10\n", "solution(\n'''\n2\n? 3 3\n? 3 3\n! 3 3\n''') == '''\n? 3 3\n! 3 1\n'''\n\nassert solution(\n'''\n2\n? 3 3\n? 2 3\n! 2 3\n''') == '''\n? 3 3\n? 2 3\n! 2 1\n'''\n\nassert solution(\n'''\n3\n? 1 2 3\n? 2 1 3\n? 1 2 3\n! 1 2 3\n''') == '''\n? 1 2 3\n? 2 1 3\n? 1 2 3\n! 1 2 3\n'''\n\nassert solution(\n'''\n3\n? 1 2 3\n? 2 1 3\n? 1 2 3\n! 1 2 3\n''') == '''\n? 1 2 3\n? 2 1 3\n? 1 2 3\n! 1 2 3\n'''\n\nassert solution(\n'''\n3\n? 1 2 3\n? 2 1 3\n? 1 2 3\n! 1 2 3\n''') == '''\n? 1 2 3\n? 2 1 3\n? 1 2 3\n! 1 2 3\n'''\n\n# this is the current input stream\n#\n# you can change the input stream from STDIN to a filename\n# by using the following code\n#\n# import fileinput\n# input = file", "solution(TEST1) == TEST1_SOL, \"TEST1\"\nassert solution(TEST2) == TEST2_SOL, \"TEST2\"\nassert solution(TEST3) == TEST3_SOL, \"TEST3\"", "solution(\"\"\"\n3\n? 1 2 3\n! 3 2 1\n\"\"\") == \"\"\"\n3\n? 1 2 3\n3\n! 3 2 1\n\"\"\", \"output must be '3\\\\n? 1 2 3\\\\n3\\\\n! 3 2 1'\"", "solution('''\n2\n? 1 2\n? 1 1\n''') == '''\n0\n0\n! 1 2\n'''\n\nassert solution('''\n4\n? 1 1 1 1\n? 1 2 3 4\n? 1 2 3 3\n? 1 1 2 2\n? 2 2 2 2\n? 1 1 2 2\n? 1 2 3 4\n? 1 1 2 2\n? 2 2 3 3\n? 1 1 1 2\n''') == '''\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n! 1 2 3 4\n'''\n\nassert solution('''\n100\n? 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(example) == hack\n\n# check the correctness of solution on random inputs\ndef stress_test(n: int = 2, m: int = 10**5) -> None:\n    for _ in range(m):\n        n = random.randint(2, 100)\n        p = random.sample(range(1, n+1), n)\n        assert solution(get_input(n, p)) == get_hack(p)\n\n# input format:\n# first line: n\n# second line: p_1 p_2 ... p_n\n# third line: queries\ndef get_input(n: int, p: List[int]) -> str:\n    return '\\n'.join([str(n), ' '.join(map(str, p)), '\\n'.join(['? ' + ' '.join(map(str, random.sample(range(1, n+1), n))) for _ in range(2*n)])])\n\n# hack format:\n# first line: n\n# second line: p_1 p_2 ... p_n\ndef get_hack(p: List[int]) -> str:\n    return '\\n'.join([str(len(p)), ' '.join(map(str, p))])\n\ndef solution(stdin: str) -> str:\n", "solution(stdin) == stdout", "solution('''3\n? 1 2 3\n? 2 1 3\n! 1 2 3''') == '''1\n0\n'''\nassert solution('''2\n? 1 2\n? 2 1\n! 1 2''') == '''0\n0\n'''\nassert solution('''5\n? 1 1 1 1 1\n? 2 1 1 1 1\n? 1 2 1 1 1\n? 1 1 2 1 1\n? 1 1 1 2 1\n? 1 1 1 1 2\n! 1 2 3 4 5''') == '''1\n1\n1\n0\n0\n'''\nassert solution('''5\n? 1 1 1 1 1\n? 2 1 1 1 1\n? 1 2 1 1 1\n? 1 1 2 1 1\n? 1 1 1 2 1\n? 1 1 1 1 2\n! 2 1 3 4 5''') == '''1\n1\n1\n0\n0\n'''\nassert solution('''8\n? 1 2 3 4 5 6 7 8\n? 2 1 3 4 5 6 7 8\n? 1 2 3 4 5 6 7 8\n? 2 1 3 4 5 6 7 8\n? 1 2 3 4 5 6 7 8\n? 2 1 3 4 5 6 7 8\n? 1 2 3 4 5 6 7 8\n? 2 1 3 4 5 6 7 8\n! 1 2 3 4", "solution(\"\"\"2\n? 2 1\n? 1 2\n!\"\"\") == \"\"\"! 1 2\"\"\"\n\nassert solution(\"\"\"3\n? 1 2 3\n! 2 1 3\"\"\") == \"\"\"! 2 1 3\"\"\"\n\nassert solution(\"\"\"3\n? 1 2 3\n? 2 1 3\n! 1 2 3\"\"\") == \"\"\"! 1 2 3\"\"\"\n\nassert solution(\"\"\"4\n? 4 3 2 1\n? 2 4 1 3\n! 1 2 3 4\"\"\") == \"\"\"! 1 2 3 4\"\"\"\n\nassert solution(\"\"\"10\n? 1 2 3 4 5 6 7 8 9 10\n? 10 9 8 7 6 5 4 3 2 1\n? 5 5 5 5 5 5 5 5 5 5\n? 1 2 3 4 5 5 5 5 5 5\n? 1 1 1 1 1 1 1 1 1 1\n? 1 1 1 1 1 1 1 1 1 1\n! 4 5 3 6 7 8 9 1 2 10\"\"\") == \"\"\"! 4 5 3 6 7 8 9 1 2 10\"\"\"\n\nassert solution(\"\"\"10\n? 1 2 3 4 5 6 7 8 9 10\n? 10 9 8 7 6 5 4 3 2 1\n? 5 5 5 5 5 5 5 5 5 5\n? 1 2 3 4 5 5 5 5 5 5\n? 1 1 1 1 1 1 1 1 1 1\n? 1 1 1 1 1 1 1 1 1 1", "solution(get_input_file('input_0.txt')) == get_input_file('output_0.txt')\nassert solution(get_input_file('input_1.txt')) == get_input_file('output_1.txt')\n\n# get output file\noutput_file = get_output_file('output.txt')\n\n# read stdin\nstdin = get_input_file('input.txt')\n\n# launch solution\nsolution(stdin)\n\n# save output\nsave_output_file(output_file)", "solution('''\n5\n? 2 4 5 1 2\n? 2 4 5 1 2\n? 5 4 2 1 2\n? 5 5 5 1 2\n? 2 4 5 1 2\n''') == '''\n! 3 5 1 2 4\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n? 1 2 3\n? 1 2 3\n? 1 2 3\n''') == '''\n! 2 3 1\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n? 1 2 3 4 5 6\n? 1 2 3 4 5 6\n? 1 2 3 4 5 6\n? 1 2 3 4 5 6\n? 1 2 3 4 5 6\n? 1 2 3 4 5 6\n''') == '''\n! 1 2 3 4 5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n? 1 2\n? 1 2\n''') == '''\n! 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n? 1 2 3 4\n? 1 2 3 4\n? 1 2 3 4\n? 1 2 3 4\n''') == '''\n! 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n? 1 1 2\n? 1 1", "solution(stdin) == stdout", "solution(\"\"\"3\n? 1 2 3\n! 2 1 3\"\"\") == \"\"\"3\n? 1 2 3\n! 2 1 3\"\"\"\nassert solution(\"\"\"5\n? 1 5 3 4 2\n? 3 4 5 1 2\n? 4 3 2 1 5\n? 2 3 1 4 5\n? 5 2 1 3 4\n! 5 3 1 4 2\"\"\") == \"\"\"5\n? 1 5 3 4 2\n? 3 4 5 1 2\n? 4 3 2 1 5\n? 2 3 1 4 5\n? 5 2 1 3 4\n! 5 3 1 4 2\"\"\"\nassert solution(\"\"\"5\n? 1 5 3 4 2\n? 3 4 5 1 2\n? 4 3 2 1 5\n? 2 3 1 4 5\n? 5 2 1 3 4\n? 1 5 3 4 2\n? 3 4 5 1 2\n? 4 3 2 1 5\n? 2 3 1 4 5\n? 5 2 1 3 4\n! 5 3 1 4 2\"\"\") == \"\"\"5\n? 1 5 3 4 2\n? 3 4 5 1 2\n? 4 3 2 1 5\n? 2 3 1 4 5\n? 5 2 1 3 4\n? 1 5 3 4 2\n? 3 4 5 1 2\n? 4 3 2 1 5\n? 2 3 1 4 5\n? 5 2 1 3 4\n! 5 3 1 4 2\"\"\"\nassert solution(\"\"\"5\n?", "solution(\"\"\"\n2\n? 1 2\n! 1 2\n? 2 1\n! 2 1\n\"\"\") == \"2\\n1 2\\n2 1\"\nassert solution(\"\"\"\n2\n? 1 2\n? 2 1\n! 1 2\n\"\"\") == \"2\\n1 2\"\nassert solution(\"\"\"\n3\n? 1 2 3\n? 2 3 1\n? 1 3 2\n! 2 1 3\n\"\"\") == \"3\\n2 1 3\"\nassert solution(\"\"\"\n3\n? 1 2 3\n? 1 2 3\n? 2 3 1\n! 2 1 3\n\"\"\") == \"3\\n2 1 3\"\nassert solution(\"\"\"\n4\n? 2 3 4 1\n? 4 1 2 3\n? 2 3 4 1\n? 1 2 3 4\n! 2 3 4 1\n\"\"\") == \"4\\n2 3 4 1\"\nassert solution(\"\"\"\n5\n? 3 2 5 4 1\n? 1 5 2 3 4\n? 2 1 3 4 5\n? 1 2 3 4 5\n? 1 2 3 4 5\n! 3 2 5 4 1\n\"\"\") == \"5\\n3 2 5 4 1\"\nassert solution(\"\"\"\n6\n? 4 3 2 1 6 5\n? 1 2 3 4 5 6\n? 1 2 3 4 5 6\n? 1 2 3 4 5 6\n? 1 2", "solution('''\\\n1\n? 1\n! 1\n''') == '1', 'test 1'\n\nassert solution('''\\\n2\n? 1 2\n? 2 1\n! 1 2\n''') == '1 2', 'test 2'\n\nassert solution('''\\\n3\n? 1 2 3\n? 2 3 1\n? 3 1 2\n! 1 2 3\n''') == '1 2 3', 'test 3'\n\nassert solution('''\\\n3\n? 3 2 1\n? 2 1 3\n? 1 3 2\n! 1 2 3\n''') == '1 2 3', 'test 4'\n\nassert solution('''\\\n3\n? 3 2 1\n? 2 1 3\n? 1 2 3\n! 3 2 1\n''') == '3 2 1', 'test 5'\n\nassert solution('''\\\n4\n? 1 1 1\n? 1 1 1\n? 1 1 1\n? 1 1 1\n! 1 1 1 1\n''') == '1 1 1 1', 'test 6'\n\nassert solution('''\\\n4\n? 1 2 3 4\n? 2 3 4 1\n? 3 4 1 2\n? 4 1 2 3\n! 1 2 3 4\n''') == '1 2 3 4', 'test 7'\n\nassert solution('''\\\n", "solution(\"3\\n? 1 1 1\\n? 2 2 2\\n? 3 3 3\\n\") == \"! 1 3 2\\n\"\n\nif __name__ == '__main__':\n    # initalize input and output\n    inp = \"\"\n    for line in sys.stdin:\n        inp += line\n\n    # solve problem\n    solution(inp)", "solution(example1) == example1_ans\nassert solution(example2) == example2_ans\n\n# run solution\nresult = solution(input())\nprint(result)", "solution(\"\"\"\n4\n? 1 2 3 4\n? 4 3 2 1\n! 4 3 2 1\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\nassert solution(\"\"\"\n2\n? 2 1\n? 1 2\n! 1 2\n\"\"\") == \"\"\"\n2\n0\n\"\"\"\n\nassert solution(\"\"\"\n2\n? 1 2\n? 2 1\n! 2 1\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n#print(\"Done!\")", "solution(inp) == '''! 1 2 3 4 5 6 7 8 9'''\n\n# check the correctness of submission\nassert run_submission(solution, submission, '''? 9 7 5 3 1 3 5 7 9\n? 8 6 4 2 1 2 4 6 8\n? 7 5 3 1 2 3 5 7 8\n? 6 4 2 1 3 4 6 8 9\n? 5 3 1 2 4 5 7 9 1\n? 4 2 1 3 5 6 8 9 2\n? 3 1 2 4 6 7 9 1 3\n? 2 1 3 5 7 8 1 2 4\n? 1 2 4 6 8 9 2 3 5\n! 1 2 3 4 5 6 7 8 9''')\n\n# check the performance of submission\nrun_submission(solution, submission, '''? 8 6 4 2 1 2 4 6 8\n? 1 2 3 4 5 6 7 8 9\n? 1 2 3 4 5 6 7 8 9\n? 1 2 3 4 5 6 7 8 9\n? 1 2 3 4 5 6 7 8 9\n? 1 2 3 4 5 6 7 8 9\n? 1 2 3 4 5 6 7 8 9\n? 1 2 3 4 5 6 7 8 9\n? 1 2 3 4 5 6 7 8 9\n! 1 2 3 4 5 6 7 8 9''')\n\n# check the performance of solution\nrun_submission(s"], "finish_reason": ["stop", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "length"], "sum_logprob": [-17.6120794231, -6.491449887, -6.491450286999999, -17.606717544679995, -131.1387765954486, -89.69340800781006, -58.785659761867954, -232.959576806486, -47.54525839281998, -74.73653841158199, -76.04508724065201, -36.600032616496996, -79.01980756845501, -24.392694639799995, -55.72152958965198, -102.422920879364, -6.84073231705, -39.300432621999995, -110.81016548641443, -38.638778859948005, -63.821239589300006, -14.204367109019985, -105.40318202427997, -37.45415574713992, -71.64546610993598, -93.79901378509999, -49.9266888475, -23.0491872439, -29.09786032076399, -24.00949200329, -77.517395284569, -107.0019665539, -131.72814435181803, -20.558782311539993, -37.81241988019001, -80.22454896077008, -108.18523881528407, -5.685931785699999, -60.86047261976996, -87.72419297191996, -61.400704498273996, -80.26948554206004, -5.6851516366, -62.10160308435999, -96.67315124105997, -60.393532003068955, -50.88031787038401, -28.495743810800004, -46.637608573860014, -116.50008556362995], "mean_logprob": [-0.6073130835551724, -0.4636749919285714, -0.4636750205, -0.058689058482266666, -0.4506487168228471, -0.2989780266927, -0.19595219920622667, -1.0785165592892871, -0.15848419464273333, -0.34126273247297717, -0.2534836241355067, -0.12200010872165666, -0.29706694574607145, -0.5081811383291667, -0.18573843196550666, -0.3414097362645467, -0.6218847560954546, -0.5779475385588235, -0.39017663903667077, -0.12879592953316, -0.7689305974614458, -0.0473478903634, -0.35134394008093334, -0.1248471858238, -0.23881822036645334, -0.31266337928366666, -0.6400857544551282, -1.152459362195, -0.09699286773588, -0.15900325829993378, -0.25839131761523, -0.3566732218463333, -0.43909381450606, -0.3484539374837288, -0.6302069980031667, -0.26741516320256664, -0.3606174627176133, -0.6317701984111112, -0.2028682420659, -0.29241397657306667, -0.47969300389276565, -0.2675649518068667, -0.6316835151777778, -0.20700534361453335, -0.3222438374702, -0.20131177334356334, -0.5716889648357752, -0.71239359527, -0.4441677007034286, -0.38833361854543336]}
{"prompt": "'''\nOmkar is hosting tours of his country, Omkarland! There are n cities in Omkarland, and, rather curiously, there are exactly n-1 bidirectional roads connecting the cities to each other. It is guaranteed that you can reach any city from any other city through the road network.\n\nEvery city has an enjoyment value e. Each road has a capacity c, denoting the maximum number of vehicles that can be on it, and an associated toll t. However, the toll system in Omkarland has an interesting quirk: if a vehicle travels on multiple roads on a single journey, they pay only the highest toll of any single road on which they traveled. (In other words, they pay max t over all the roads on which they traveled.) If a vehicle traverses no roads, they pay 0 toll.\n\nOmkar has decided to host q tour groups. Each tour group consists of v vehicles starting at city x. (Keep in mind that a tour group with v vehicles can travel only on roads with capacity \u2265 v.) Being the tour organizer, Omkar wants his groups to have as much fun as they possibly can, but also must reimburse his groups for the tolls that they have to pay. Thus, for each tour group, Omkar wants to know two things: first, what is the enjoyment value of the city y with maximum enjoyment value that the tour group can reach from their starting city, and second, how much per vehicle will Omkar have to pay to reimburse the entire group for their trip from x to y? (This trip from x to y will always be on the shortest path from x to y.)\n\nIn the case that there are multiple reachable cities with the maximum enjoyment value, Omkar will let his tour group choose which one they want to go to. Therefore, to prepare for all possible scenarios, he wants to know the amount of money per vehicle that he needs to guarantee that he can reimburse the group regardless of which city they choose.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 q \u2264 2 \u22c5 10^5), representing the number of cities and the number of groups, respectively.\n\nThe next line contains n integers e_1, e_2, \u2026, e_n (1 \u2264 e_i \u2264 10^9), where e_i represents the enjoyment value for city i.\n\nThe next n-1 lines each contain four integers a, b, c, and t (1 \u2264 a,b \u2264 n, 1 \u2264 c \u2264 10^9, 1 \u2264 t \u2264 10^9), representing an road between city a and city b with capacity c and toll t.\n\nThe next q lines each contain two integers v and x (1 \u2264 v \u2264 10^9, 1 \u2264 x \u2264 n), representing the number of vehicles in the tour group and the starting city, respectively.\n\nOutput\n\nOutput q lines. The i-th line should contain two integers: the highest possible enjoyment value of a city reachable by the i-th tour group, and the amount of money per vehicle Omkar needs to guarantee that he can reimburse the i-th tour group.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n4 2\n4 2 5 6\n1 2 1 5\n2 3 2 7\n3 4 1 2\n3 1\n2 4\n''') == '''\n6 3\n5 6\n'''\nassert solution('''\n2 1\n1 2\n1 2 1 5\n1\n''') == '''\n2 0\n'''\nassert solution('''\n3 1\n1 2 3\n1 2 1 5\n2 3 1 7\n2\n''') == '''\n3 1\n'''\nassert solution('''\n3 1\n3 2 1\n1 2 1 5\n2 3 1 7\n2\n''') == '''\n2 1\n'''\nassert solution('''\n3 2\n1 2 3\n1 2 1 5\n2 3 1 7\n2\n1\n''') == '''\n3 1\n3 1\n'''\nassert solution('''\n2 1\n1 2\n1 2 1 1\n1\n''') == '''\n2 1\n'''\nassert solution('''\n4 2\n4 2 5 6\n1 2 1 5\n2 3 2 7\n3 4 1 2\n3 1\n2 4\n''') == '''\n6 3\n5 6\n'''\nassert solution('''\n4 2\n5 4 6 2\n1 2 1 5\n2 3 2 7", "solution(\"3 3\\n6 8 2\\n1 2 6 7\\n2 3 5 4\\n1\\n2\\n2\") == \"8 3\\n8 4\\n8 3\\n\"\nassert solution(\"5 4\\n1 1 1 1 1\\n1 2 3 5\\n2 3 2 9\\n3 4 1 8\\n4 5 2 7\\n2\\n2\\n1\\n1\") == \"1 1\\n1 1\\n1 1\\n1 1\\n\"\nassert solution(\"4 5\\n10 6 2 1\\n1 2 3 3\\n2 3 2 3\\n3 4 3 3\\n1\\n2\\n2\\n2\\n2\") == \"6 2\\n6 2\\n6 2\\n6 2\\n6 2\\n\"\n\nprint(\"Tests passed!\")", "solution(stdin) == expected\n\n\n# submit on kattis\ncursor.execute('SELECT id, sample FROM challenge WHERE difficulty=2 AND name=\"tour\";')\nfor id, sample in cursor.fetchall():\n    stdin = sample[:sample.find('Output')].strip() + '\\n'\n    expected = sample[sample.find('Output') + len('Output'):].strip()\n    assert solution(stdin) == expected\n    cursor.execute('INSERT INTO solution (id, result) VALUES (%s, %s);', (id, 'AC'))\nconnection.commit()\n\nprint('Done!')", "solution('''\nn m\nl1 l2 ... ln\na1 b1 c1 t1\na2 b2 c2 t2\n...\nam bm cm tm\nv1 x1\nv2 x2\n...\nvq xq\n''') == '''\ne1 e2 ... eq\n'''", "solution('''\n1\n1\n''') == '''\n'''\n\n# import sys\n# print(solution(sys.stdin.read()))\n\n# from random import randint\n# from unittest import TestCase\n# from pprint import pprint\n\n# # this line is for creating the test file in current directory\n# # with open('test.txt', 'w') as f:\n# #     f.write('''\n# # 1\n# # 1\n# # ''')\n\n# # this line is for checking the test case in the test file\n# # with open('test.txt', 'r') as f:\n# #     read = f.read()\n# #     print(solution(read))", "solution(\"\"\"\n4 3\n1 7 4 6\n1 2 2 2\n2 3 2 1\n3 4 2 2\n1 1\n1 2\n1 3\n\"\"\") == \"\"\"\n7 6\n6 3\n7 3\n\"\"\"", "solution(\"\"\"\n    1 1\n    1\n    1 1 1 1\n    1 1\n    \"\"\") == \"\"\"\n    1 1\n    \"\"\"\nassert solution(\"\"\"\n    3 1\n    3 2 1\n    1 2 1 1\n    2 3 2 1\n    2 1\n    \"\"\") == \"\"\"\n    2 1\n    \"\"\"\nassert solution(\"\"\"\n    6 4\n    8 8 5 7 9 3\n    1 2 2 6\n    2 3 1 5\n    3 4 6 3\n    4 5 3 3\n    5 6 5 7\n    2 1\n    5 1\n    1 4\n    5 3\n    \"\"\") == \"\"\"\n    7 3\n    9 5\n    7 2\n    9 5\n    \"\"\"\n\nprint(\"all passed\")", "solution('''\ninput\n''') == '''\noutput\n'''", "solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"4 3\n1 2 3 4\n1 2 3 5\n2 3 2 1\n3 4 2 1\n1 1\n1 2\n3 1\"\"\") == \"\"\"4 5\n4 3\n4 4\"\"\", \"Example 1\"\n\nassert solution(\"\"\"5 2\n6 5 4 3 2\n1 2 1 1\n2 3 2 2\n3 4 1 3\n4 5 1 4\n2 1\n2 1\"\"\") == \"\"\"6 3\n2 1\"\"\", \"Example 2\"\n\n# speedup (from pypy)\nfrom functools import lru_cache\n\nfrom numba import jit\nimport sys\nsys.setrecursionlimit(10000)\n\nfrom collections import defaultdict\nfrom collections import deque\nimport math\nfrom functools import reduce\nimport operator\n\n# debugging function\ndef pprint(data):\n    for line in data:\n        print(' '.join(map(str, line)))\n\n@jit\ndef solution(stdin):\n    # parse first line\n    n, q = map(int, stdin.splitlines()[0].split())\n\n    # parse next line\n    e = list(map(int, stdin.splitlines()[1].split()))\n\n    # parse next n-1 lines\n    roads = defaultdict(dict)\n    for line in stdin.split", "solution(r'''\n''') == r'''\n'''\n\n# add testcases\n\n# test on hackerrank\n# noinspection SpellCheckingInspection\nassert '''\n1\n3\n3\n2 1\n2 3\n2 3\n''' == solution(r'''\n3 1\n1 2 3\n1 2 1 1\n2 3 1 1\n2 1\n''')\n\n# noinspection SpellCheckingInspection\nassert '''\n2\n6\n2\n2 3\n4 3\n4 5\n4 6\n4 6\n''' == solution(r'''\n6 2\n2 3 4 5 6 7\n1 2 1 1\n1 3 1 1\n2 4 1 1\n3 5 1 1\n4 6 1 1\n5 6 1 1\n2 4\n3 6\n''')\n\n# noinspection SpellCheckingInspection\nassert '''\n2\n3\n3\n3 4\n3 6\n3 6\n''' == solution(r'''\n6 1\n2 3 4 5 6 7\n1 2 1 1\n1 3 1 1\n2 4 1 1\n3 5 1 1\n4 6 1 1\n5 6 1 1\n3 6\n''')\n\n# noinspection SpellCheckingInspection\nassert '''\n3\n3\n3\n1 2\n1 3\n1 4\n", "solution('''\n7 4\n4 3 5 7 2 1 1\n3 4 5 3\n4 1 2 4\n4 7 1 4\n5 6 6 1\n7 6 4 4\n5 2 7 2\n7\n1\n6\n1\n''') == '''\n7 3\n5 2\n2 1\n7 3\n'''\nassert solution('''\n8 5\n1 2 3 4 5 6 7 8\n1 2 1 1\n2 3 2 1\n3 4 3 1\n4 5 4 1\n5 6 5 1\n6 7 6 1\n7 8 7 1\n3\n1\n2\n3\n1\n2\n''') == '''\n8 8\n7 7\n6 6\n5 5\n8 8\n'''\nassert solution('''\n10 6\n10 9 8 7 6 5 4 3 2 1\n1 2 1 1\n2 3 2 1\n3 4 3 1\n4 5 4 1\n5 6 5 1\n6 7 6 1\n7 8 7 1\n8 9 8 1\n9 10 9 1\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n''') == '''\n10 10\n9 9\n8 8\n7 7\n6 6\n5 5\n'''\n\n# test against the example solutions\ncases = [\n    ('', ''),\n    ('', ''", "solution(stdin) == stdout", "solution(\"\"\"\n5 3\n1 2 3 4 5\n1 2 2 1\n2 3 2 1\n3 4 1 2\n4 5 2 1\n1 2\n2 3\n3 4\n\"\"\") == \"\"\"\n2 1\n5 3\n5 2\n\"\"\"\n\nassert solution(\"\"\"\n4 1\n1 4 3 2\n1 2 2 4\n2 3 2 4\n3 4 1 1\n4\n\"\"\") == \"\"\"\n4 2\n\"\"\"\n\nassert solution(\"\"\"\n3 2\n1 3 2\n1 2 2 5\n2 3 1 3\n3\n3\n\"\"\") == \"\"\"\n3 5\n3 3\n\"\"\"\n\n# stress testing\nimport random\nfrom string import ascii_letters, digits\nfrom typing import Tuple\nfrom collections import defaultdict\n\n\ndef generate_random_graph(n: int, min_c: int, max_c: int, min_t: int, max_t: int) -> Tuple[str, dict]:\n    # 1 \u2264 c \u2264 10^9, 1 \u2264 t \u2264 10^9\n    n = n + 1\n    edges = list()\n    dists = defaultdict(dict)\n    for i in range(1, n):\n        u = random.randint(1, i - 1)\n        v = i\n        c = random.randint(min_c, max", "solution(\"\") == \"\", \"No test cases\"\nprint(\"Completed\")", "solution('''\n3 2\n1 2 3\n1 2 2 1\n2 3 3 2\n2 1\n1 2\n''') == '''\n3 0\n2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 3\n1 2 3 4\n1 2 1 1\n2 3 1 1\n3 4 2 1\n1 1\n1 1\n1 1\n''') == '''\n3 0\n2 0\n1 0\n'''\n\nprint('Tests passed!')", "solution('''3 1\n3 2 1\n1 2 3 3\n2 3 3 5\n1 1''') == '''2 9'''\n\nassert solution('''5 3\n1 2 3 4 5\n1 2 1 5\n2 3 1 10\n3 4 1 8\n4 5 1 6\n1 1\n2 2\n1 2''') == '''5 19\n4 16\n5 17'''\n\nassert solution('''2 2\n1 2\n1 2 1 1\n1 1\n1 1''') == '''2 0\n2 0'''\n\nassert solution('''10 3\n7 10 8 1 4 7 6 10 2 8\n1 2 10 4\n1 3 10 4\n1 4 10 1\n1 5 10 4\n2 6 10 3\n2 7 10 3\n2 8 10 2\n2 9 10 3\n2 10 10 3\n5 4\n1 5\n6 6''') == '''10 19\n7 14\n8 16'''\n\n# message on hackerrank\nprint('Success')", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution('''\n10 4\n5 8 1 6 2 1 5 4 9 7\n1 2 10 10\n1 3 10 10\n2 4 10 1\n3 5 10 10\n3 6 10 10\n3 7 10 10\n3 8 10 10\n3 9 10 10\n3 10 10 10\n1 7\n1 2\n1 5\n1 10\n''') == '''\n7 10\n2 5\n5 10\n10 10\n'''", "solution(\"\"\"\n\"\"\"\n\n) == \"\"", "solution(stdin='''\\\n2 1\n1 1\n1 2 0 1\n1 1\n''') == '''\\\n1 1\n'''\nassert solution(stdin='''\\\n3 2\n1 2 1\n1 2 0 1\n2 3 1\n1 1\n1 1\n''') == '''\\\n2 1\n2 1\n'''\nassert solution(stdin='''\\\n10 3\n1 1 1 1 1 1 1 1 1 1\n1 2 1 1\n1 3 1 1\n1 4 1 1\n1 5 1 1\n1 6 1 1\n1 7 1 1\n1 8 1 1\n1 9 1 1\n2 10 1 1\n1 1\n10 1\n1 10\n''') == '''\\\n1 1\n10 1\n10 1\n'''\nassert solution(stdin='''\\\n3 2\n1 2 1\n1 2 0 2\n2 3 1\n1 1\n1 1\n''') == '''\\\n2 2\n2 2\n'''\nassert solution(stdin='''\\\n2 2\n1 1\n1 2 2 3\n1 1\n1 1\n''') == '''\\\n1 1\n1 2\n'''\nassert solution(stdin='''\\\n10 2\n1 2 2 2 2 2 2 2 2 2\n1 2 2 2", "solution('''\n5 2\n1 1 2 1\n1 2 2 1\n2 3 2 1\n3 4 1 3\n2 4 2 1\n1 2\n2 1\n''') == '''\n2 2\n2 1\n'''\nassert solution('''\n4 1\n3 2 4 2\n1 2 2 1\n2 3 2 1\n2 4 1 3\n2 3\n''') == '''\n4 2\n'''\nassert solution('''\n4 1\n3 2 4 2\n1 2 2 1\n2 3 2 1\n2 4 1 3\n1 3\n''') == '''\n4 0\n'''\n\nprint(\"All done! Submit to Mimir!\")", "solution('''\n2 2\n2 3\n1 2 4 4\n1 1\n1 1\n1 1\n1 2\n''') == '''\n3 4\n3 0\n'''\n\nassert solution('''\n4 5\n4 2 3 7\n1 2 1 3\n2 3 3 5\n1 4 1 2\n1 2\n2 3\n2 3\n3 4\n3 2\n''') == '''\n7 6\n3 5\n3 5\n7 0\n3 5\n'''\n\nassert solution('''\n8 1\n1 5 6 4 2 3 7 9\n1 2 1 3\n2 3 3 5\n1 4 1 2\n1 5 1 2\n1 6 1 2\n1 7 1 2\n1 8 1 2\n5 5\n''') == '''\n9 6\n'''\n\nassert solution('''\n5 3\n2 3 3 1\n1 2 4 5\n1 3 1 4\n2 4 1 3\n3 5 1 2\n3 1\n3 1\n3 1\n''') == '''\n3 1\n3 1\n3 1\n'''\n\nassert solution('''\n5 3\n2 3 3 1\n1 2 4 5\n1 3 1 4\n2 4 1 3\n3 5 1 2\n2 3\n2 3\n2 3\n''') == '''\n3 5\n3 5\n3", "solution(stdin_1) == stdout_1\n\nassert solution(stdin_2) == stdout_2\n\nassert solution(stdin_3) == stdout_3\n\nassert solution(stdin_4) == stdout_4\n\nassert solution(stdin_5) == stdout_5\n\nassert solution(stdin_6) == stdout_6\n\nassert solution(stdin_7) == stdout_7\n\nassert solution(stdin_8) == stdout_8\n\nassert solution(stdin_9) == stdout_9\n\nassert solution(stdin_10) == stdout_10\n\nassert solution(stdin_11) == stdout_11\n\nassert solution(stdin_12) == stdout_12\n\nassert solution(stdin_13) == stdout_13\n\nassert solution(stdin_14) == stdout_14\n\nassert solution(stdin_15) == stdout_15\n\nassert solution(stdin_16) == stdout_16\n\nassert solution(stdin_17) == stdout_17\n\nassert solution(stdin_18) == stdout_18\n\nassert solution(stdin_19) == stdout_19\n\nassert solution(stdin_20) == stdout_20\n\nassert", "solution(\"\"\"\n2\n2\n1 3\n1 2 1 1\n2 1\n2 1\n\"\"\") == \"\"\"\n3 2\n3 2\n\"\"\", \"Sample input\"\n\n# get input and run solution\nn, q = map(int, input().split())\ne = list(map(int, input().split()))\ng = [[] for _ in range(n+1)]\nfor _ in range(n-1):\n    a, b, c, t = map(int, input().split())\n    g[a].append((b,c,t))\n    g[b].append((a,c,t))\nfor _ in range(q):\n    v, x = map(int, input().split())\n    ans = e[x-1]\n    queue = [(x, 0, 0)]\n    best = [0] * (n+1)\n    while queue:\n        a, c, t = queue.pop(0)\n        best[a] = max(best[a], t)\n        ans = max(ans, e[a-1] - best[a])\n        for b, c2, t2 in g[a]:\n            if c2 >= v:\n                queue.append((b, c2, max(t, t2)))\n    print(ans,", "solution(\"\"\"6 4\n1 2 3 4 5 6\n1 2 5 10\n2 3 7 11\n3 4 5 15\n4 5 6 16\n5 6 7 17\n4 3\n2 3\n1 6\n4 5\n3 6\"\"\") == \"\"\"4 1\n3 1\n3 11\n3 17\n\"\"\", \"Test 1 failed\"\n\n# check the correctness of solution\nassert solution(\"\"\"6 2\n1 2 3 4 5 6\n1 2 5 10\n2 3 7 11\n3 4 5 15\n4 5 6 16\n5 6 7 17\n4 3\n2 3\"\"\") == \"\"\"4 1\n3 1\n\"\"\", \"Test 2 failed\"\n\n# check the correctness of solution\nassert solution(\"\"\"7 3\n3 2 6 4 1 8 1\n1 2 4 11\n2 3 5 10\n3 4 6 9\n4 5 5 7\n5 6 6 5\n6 7 7 3\n2 3\n2 7\n4 6\"\"\") == \"\"\"8 13\n1 3\n4 5\n\"\"\", \"Test 3 failed\"\n\n# check the correctness of solution\nassert solution(\"\"\"6 4\n1 2 3 4 5 6\n1 2 5 10\n2 3 7 11\n3 4 5 15\n4 5 6 16\n5 6 7 17\n4 3\n2 3\n1 6\n4 5\n3 6\"\"\") == \"\"\"4 1\n3 1\n3", "solution(stdin) == stdout", "solution('''\n10 3\n1 2 3 4 5 6 7 8 9 10\n1 2 1 1\n2 3 1 2\n3 4 2 3\n4 5 3 3\n5 6 4 2\n6 7 5 1\n7 8 6 1\n8 9 6 1\n9 10 7 2\n8 4\n2 3\n3 1\n3 2\n''') == '''\n10 2\n3 2\n1 1\n'''\n\nassert solution('''\n10 3\n1 2 3 4 5 6 7 8 9 10\n1 2 1 1\n2 3 1 2\n3 4 2 3\n4 5 3 3\n5 6 4 2\n6 7 5 1\n7 8 6 1\n8 9 6 1\n9 10 7 2\n8 4\n2 3\n3 1\n3 2\n''') == '''\n10 2\n3 2\n1 1\n'''\n\nassert solution('''\n3 3\n2 3 1\n1 2 1 2\n1 3 2 3\n1 1\n1 2\n2 3\n''') == '''\n3 2\n3 1\n3 0\n'''\n\nassert solution('''\n3 3\n2 3 1\n1 2 1 2\n1 3 2 3\n1 1\n1 2\n2 3\n''') == '''\n3 2\n3 1\n3 0\n'''\n\nassert solution('''\n3", "solution('''\n3 2\n1 2 3\n1 2 2 1\n2 3 3 1\n2 1\n2 2\n''') == '''\n2 1\n3 2\n'''\n\nassert solution('''\n5 3\n1 2 3 4 5\n1 2 2 2\n2 3 2 3\n3 4 3 4\n4 5 3 5\n2 3\n2 3\n3 5\n''') == '''\n4 1\n4 1\n5 2\n'''\n\nassert solution('''\n10 1\n1 2 3 4 5 6 7 8 9 10\n1 2 3 1\n1 3 5 2\n2 4 3 1\n3 5 3 1\n4 6 3 1\n5 7 3 1\n6 8 3 1\n7 9 3 1\n8 10 3 1\n4 1\n''') == '''\n10 1\n'''\n\nassert solution('''\n2 3\n1 2\n1 2 1 1\n1 1\n1 2\n2 1\n''') == '''\n2 0\n2 0\n2 0\n'''\n\nassert solution('''\n2 2\n1 2\n1 2 2 2\n1 1\n1 2\n''') == '''\n2 1\n2 1\n'''\n\nassert solution('''\n2 2\n1 2\n1 2 1 1\n1 1\n1 2\n''') == '''", "solution('''\n\n''') == '''\n\n'''", "solution('''\n5 4\n1 4 5 2\n1 2 2 4\n2 3 1 1\n3 4 4 1\n4 5 1 2\n2 2\n2 3\n3 3\n3 4\n''') == '''\n4 0\n4 2\n4 1\n4 0\n'''\n\nassert solution('''\n5 5\n1 2 3 1\n2 3 4 2\n3 4 5 3\n4 5 6 4\n5 1 7 5\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '''\n2 0\n3 0\n4 0\n5 0\n1 0\n'''\n\nassert solution('''\n5 1\n1 2 3 1\n2 3 4 2\n3 4 5 3\n4 5 6 4\n5 1 7 5\n5 5\n''') == '''\n1 0\n'''\n\nassert solution('''\n5 1\n1 2 3 1\n2 3 4 2\n3 4 5 3\n4 5 6 4\n5 1 7 5\n1 1\n''') == '''\n5 0\n'''\n\nassert solution('''\n5 5\n1 2 3 1\n2 3 4 2\n3 4 5 3\n4 5 6 4\n5 1 7 5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '''\n2 0\n3", "solution(\"\"\"\n3 2\n1 2 3\n1 2 4 5\n2 3 6 7\n1 1\n2 2\n\"\"\") == \"\"\"\n2 1\n3 7\n\"\"\", \"sample 1\"\n\nassert solution(\"\"\"\n5 1\n2 3 3 3 3\n1 2 3 3\n2 3 4 4\n3 4 5 5\n4 5 6 6\n4 4\n\"\"\") == \"\"\"\n3 4\n\"\"\", \"sample 2\"\n\nassert solution(\"\"\"\n10 3\n9 9 9 9 9 9 9 9 9 9\n1 2 1 1\n2 3 1 1\n3 4 1 1\n4 5 1 1\n5 6 1 1\n6 7 1 1\n7 8 1 1\n8 9 1 1\n9 10 1 1\n1 2\n2 3\n3 4\n\"\"\") == \"\"\"\n9 1\n9 1\n9 1\n\"\"\", \"sample 3\"", "solution(\"\"\"\n3 2\n1 2 3\n1 2 1 1\n2 3 2 2\n2 1\n2 2\n\"\"\") == \"\"\"\n3 1\n3 0\n\"\"\", \"test 1\"", "solution(\"\"\"\n3 2\n1 2 1\n1 2 1 1\n2 3 2 2\n3 1\n3 1\n\"\"\") == \"\"\"\n2 1\n1 0\n\"\"\", \"example 1\"\n\nassert solution(\"\"\"\n5 3\n1 2 3 4 5\n1 2 1 1\n2 3 2 2\n3 4 3 3\n4 5 4 4\n1 1\n1 2\n1 2\n\"\"\") == \"\"\"\n5 2\n4 3\n4 3\n\"\"\", \"example 2\"\n\nassert solution(\"\"\"\n3 2\n1 2 1\n1 2 1 1\n2 3 2 2\n3 1\n3 1\n\"\"\") == \"\"\"\n2 1\n1 0\n\"\"\", \"example 3\"\n\nassert solution(\"\"\"\n3 2\n1 2 1\n1 2 1 1\n2 3 2 2\n3 1\n3 1\n\"\"\") == \"\"\"\n2 1\n1 0\n\"\"\", \"example 4\"\n\n# stress testing\nimport random\nimport string\ndef random_test_case(length: int = 5, max_v: int = 5, max_e: int = 10) -> str:\n    result = f\"{length} {length}\\n\"\n    result += \" \".join(str(random.randint(1, max_e)) for _ in range(length)) + \"\\n\"\n    for i in range(", "solution('''4 2\n1 2 3 4\n1 2 1 4\n2 3 1 7\n3 4 3 5\n3 1\n3 3''') == '''4 1\n4 5'''\n\n# check the correctness of solution\nassert solution('''4 1\n1 2 3 4\n1 2 1 4\n2 3 1 7\n3 4 3 5\n2 3''') == '''4 2'''\n\n# check the correctness of solution\nassert solution('''3 1\n3 2 1\n1 2 1 4\n2 3 1 5\n1 1''') == '''2 1'''\n\n# check the correctness of solution\nassert solution('''5 1\n1 1 1 1 1\n1 2 1 1\n2 3 1 1\n3 4 1 1\n4 5 1 1\n2 2''') == '''1 1'''\n\n# check the correctness of solution\nassert solution('''5 1\n1 1 1 1 1\n1 2 1 1\n2 3 1 1\n3 4 1 1\n4 5 1 1\n1 1''') == '''1 1'''\n\n# check the correctness of solution\nassert solution('''5 2\n1 1 1 1 1\n1 2 1 1\n2 3 1 1\n3 4 1 1\n4 5 1 1\n1 2\n1 2''') == '''1 1\n1 1", "solution('''\n2 3\n1 2\n1 2 2 2\n1 2 2 2\n1\n2\n3\n''') == '''\n2 0\n2 0\n2 0\n'''\n\nassert solution('''\n2 3\n1 2\n1 2 1 2\n1 2 2 2\n1\n2\n3\n''') == '''\n2 0\n2 1\n2 1\n'''\n\nassert solution('''\n5 5\n1 2 3 4 5\n1 2 1 2\n2 3 2 3\n3 4 3 4\n4 5 4 5\n1\n2\n3\n4\n5\n''') == '''\n5 0\n5 0\n5 0\n5 0\n5 0\n'''\n\nassert solution('''\n10 6\n1 2 3 4 5 6 7 8 9 10\n1 2 1 2\n2 3 2 3\n3 4 3 4\n4 5 4 5\n5 6 5 6\n6 7 6 7\n7 8 7 8\n8 9 8 9\n9 10 9 10\n2 3\n3 2\n4 5\n5 4\n7 7\n10 10\n''') == '''\n3 0\n3 0\n5 0\n5 0\n7 0\n10 0\n'''\n\nassert solution('''\n10 8\n1 2 3 4 5 6 7 8 9 10\n1 2 1 2\n2", "solution('''\n6 3\n1 1 1 1 1\n1 2 5 0\n2 3 5 0\n3 4 5 0\n4 5 5 0\n5 6 5 0\n2 1\n2 6\n1 1\n''') == '''\n1 1\n0 0\n'''\n\nassert solution('''\n3 2\n1 2 3\n1 2 1 1\n2 3 1 1\n2 1\n2 3\n''') == '''\n2 0\n3 0\n'''\n\nassert solution('''\n5 2\n1 2 3 4 5\n1 2 2 1\n2 3 2 1\n3 4 2 1\n4 5 2 1\n2 1\n2 5\n''') == '''\n2 0\n5 0\n'''\n\nassert solution('''\n4 2\n5 2 1 6\n1 2 1 1\n2 3 1 1\n3 4 1 1\n2 2\n2 4\n''') == '''\n2 2\n6 4\n'''\n\nassert solution('''\n10 4\n16 17 29 24 20 5 11 23 3 10\n1 2 8 1\n1 3 16 2\n1 4 8 1\n1 5 29 5\n2 6 11 2\n3 7 23 3\n3 8 16 3\n4 9 3 1\n5 10 5 1\n2 1\n2 10\n3 2\n3 10\n''') == '''\n", "solution(stdin) == expected_output\n\n# print output\nprint(solution(stdin))", "solution(\"\"\"5 2\n10 20 50 70 80\n1 2 5 10\n2 3 1 5\n3 4 10 7\n4 5 8 3\n2 3\n3 5\"\"\") == \"\"\"\n80 23\n50 25\n\"\"\"\n# stress testing\n# test solution 1: max e_{i} = 10^9, min e_{i} = 1, max c = 10^9, min c = 1, max t = 10^9, min t = 1\n# test solution 2: max e_{i} = 500, min e_{i} = 1, max c = 500, min c = 1, max t = 500, min t = 1\n# test solution 3: max e_{i} = 1, min e_{i} = 1, max c = 1, min c = 1, max t = 1, min t = 1\n# test solution 4: max e_{i} = 200, min e_{i} = 1, max c = 200, min c = 1, max t = 200, min t = 1\n# test solution 5: max e_{i} = 500, min e_{i} = 1, max c = 1000, min c = 1, max t = 2000, min t = 1\n# test solution 6: max e_{i} = 2000, min e_{i} = 1, max c = 1000, min c = 1, max t = 500", "solution(\"\"\"\n2 1\n2 3\n1 2 1 1\n1 3\n\"\"\") == \"\"\"\n3 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6 4\n1 10 1 2 10 8\n1 2 1000000 1\n1 3 1000000 1\n2 4 1000000 2\n2 5 1000000 1\n5 6 1000000 2\n3 6\n4 1\n3 2\n1 6\n\"\"\") == \"\"\"\n8 2\n8 1\n10 1\n10 2\n\"\"\"", "solution(r'''\n\n''') == r'''\n\n'''", "solution(\"\"\"\n4 3\n10 20 30 40\n1 2 1 10\n2 3 2 20\n2 4 3 30\n1\n2\n3\n\"\"\") == \"\"\"\n20 10\n30 20\n40 20\n\"\"\"\n\n# check the time of execution\nimport time\nstart = time.time()\n\nimport sys\n# stdin = \"\"\nif sys.stdin.isatty():\n    stdin = open(\"input.txt\", \"r\")\nelse:\n    stdin = sys.stdin\n\nprint(solution(stdin.read()))\n\nend = time.time()\nprint(end - start)", "solution('''\n2 1\n1 2\n1 2 1 1\n1 1\n''') == '''\n2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2 3 2 4\n1 2 3 1\n2 3 1 1\n3 4 1 2\n4 5 1 1\n3 2\n2 3\n3 4\n''') == '''\n4 4\n3 1\n4 2\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2 3 2 4\n1 2 3 1\n2 3 1 1\n3 4 1 2\n4 5 1 1\n3 2\n2 3\n3 4\n1 1\n1 2\n''') == '''\n4 4\n3 1\n4 2\n1 1\n2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n20 7\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n1 2 1 1\n2 3 1 1\n3 4 1 1\n4 5 1 1\n5 6 1 1\n6 7 1 1\n7 8 1 1\n8 9 1 1\n9 10 1 1\n10 11 1 1\n11 12 1 1\n12 13 1 1\n13 14 1 1\n14 15 1 1\n15 16 1 1\n16 17 1 1", "'' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution(", "solution(str('''\n7 2\n3 5 2 6 8 1 4\n1 2 2 3\n2 3 3 3\n3 4 4 2\n4 5 5 3\n4 6 6 3\n4 7 7 3\n1 1\n1 2\n''')) == str('''\n7 1\n6 1\n'''), 'Sample #1'\n\n# ==============================\n\nassert solution(str('''\n5 3\n2 3 4 5 6\n1 2 4 6\n1 3 5 6\n1 4 6 6\n1 5 6 6\n2 1\n2 3\n2 5\n''')) == str('''\n4 5\n4 6\n6 6\n'''), 'Sample #2'\n\n# ==============================\n\nassert solution(str('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 1 1\n1 3 2 1\n1 4 3 1\n1 5 4 1\n1 6 5 1\n1 7 6 1\n1 8 7 1\n1 9 8 1\n1 10 9 1\n1 1\n2 3\n2 5\n3 7\n3 9\n''')) == str('''\n10 1\n8 2\n8 2\n7 3\n7 3\n'''), 'Sample #3'\n\n# ==============================\n\nassert solution(str('''\n2 2\n5 3\n1 2", "solution('''\n2 1\n2 3\n1 2 10 5\n1 1\n''') == '''\n3 1\n'''\nassert solution('''\n2 1\n2 3\n1 2 10 5\n1 1\n''') == '''\n3 1\n'''\nassert solution('''\n2 1\n2 3\n1 2 10 5\n1 1\n''') == '''\n3 1\n'''\nassert solution('''\n2 1\n2 3\n1 2 10 5\n1 1\n''') == '''\n3 1\n'''\nassert solution('''\n2 1\n2 3\n1 2 10 5\n1 1\n''') == '''\n3 1\n'''\nassert solution('''\n2 1\n2 3\n1 2 10 5\n1 1\n''') == '''\n3 1\n'''\nassert solution('''\n2 1\n2 3\n1 2 10 5\n1 1\n''') == '''\n3 1\n'''\nassert solution('''\n2 1\n2 3\n1 2 10 5\n1 1\n''') == '''\n3 1\n'''\nassert solution('''\n2 1\n2 3\n1 2 10 5\n1 1\n''') == '''\n3 1\n'''\nassert solution('''\n2 1\n2 3\n1", "solution(SAMPLE_INPUT_1) == SAMPLE_OUTPUT_1, \"solution does not match sample output for sample input\"\nassert solution(SAMPLE_INPUT_2) == SAMPLE_OUTPUT_2, \"solution does not match sample output for sample input\"\n\n# submit the solution\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef submit_solution(token: str, sol: str) -> bool:\n    url = 'https://www.codechef.com/submit/OOMKAR20'\n    payload = {\n        'name': 'OOMKAR20',\n        'code': sol,\n        'submit': 'Submit',\n        'cc_load_policy': '0',\n        'cc_lang_id': '50',\n        'cc_previous': '',\n        'cc_charset_id': '4',\n        'csrf_token': token\n    }\n    cookies = {\n        'PHPSESSID': '',\n        'csrftoken': token\n    }\n    headers = {\n        'Origin': 'https://www.codechef.com',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'Accept-Language': 'en-US,en;q", "solution('''\n5 5\n1 2 3 4 5\n1 2 1 1\n2 3 2 1\n3 4 3 1\n4 5 4 1\n2 1\n3 1\n4 1\n5 1\n1 5\n''') == '''\n2 3\n2 3\n3 3\n4 4\n5 5\n'''\n\n# # submit this problem\n# from tester import Tester\n# tester = Tester(task_id=2, task_name='Hosting a Tour')\n# tester.test(solution)", "solution(r'''\n3 2\n2 5 10\n1 2 3 10\n2 3 1 10\n2 1\n3 2\n''') == r'''\n10 12\n10 12\n'''\n\n# check the correctness of solution\nassert solution(r'''\n4 4\n8 4 5 5\n1 2 3 4\n2 3 1 2\n3 4 2 5\n4 1\n4 2\n4 3\n4 4\n''') == r'''\n9 10\n9 10\n8 9\n8 9\n'''\n\n# check the correctness of solution\nassert solution(r'''\n4 4\n4 5 5 8\n1 2 3 4\n2 3 1 2\n3 4 2 5\n4 1\n4 2\n4 3\n4 4\n''') == r'''\n8 8\n8 8\n5 5\n5 5\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2 1\n2 3\n1 2 2 1\n1 1\n''') == r'''\n3 1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3 2\n5 5 10\n1 2 2 10\n2 3 1 10\n2 1\n3 2\n''') == r'''\n10 11\n10 11\n'''\n\n# check the correctness of solution\nassert solution(r'''\n", "solution(test_case_1) == expected_1\nassert solution(test_case_2) == expected_2\n\nprint('passed all tests')"], "finish_reason": ["length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "length", "length", "stop", "length", "stop"], "sum_logprob": [-102.13198074294239, -122.52938141964798, -98.68660091904003, -25.11145163590001, -126.67814520515998, -40.75001324380002, -115.44994329017999, -7.1370459794, -6.8443251837, -208.44273348895493, -151.15690156780596, -189.9899308956749, -5.562901752, -172.86860785302497, -23.54024785, -55.91118156160303, -183.991034003711, -10.942499402170002, -81.04803448266003, -14.645444690000001, -98.31115672818292, -100.50925332181303, -180.26326141316196, -17.586590457652708, -101.81224984255006, -168.333761815475, -5.568135225000001, -106.706242007289, -112.55626033653935, -6.845468751500001, -100.15052893644395, -77.7496739758, -25.7751061107, -110.84999262954594, -97.87377844811506, -90.6151363004313, -198.9185332196335, -19.055662794799996, -153.92132808374393, -83.67359684541005, -8.3396886458, -76.25088807413601, -83.66399986160091, -14.628211712331991, -172.46154400063423, -29.099054431999, -135.44068471894482, -69.47752420598749, -139.68553765041187, -22.59163826376], "mean_logprob": [-0.34043993580980836, -0.6315947495858144, -0.6713374212179591, -0.33041383731447366, -0.7408078666968421, -0.7836541008423077, -0.6712206005243023, -0.3965025544111111, -0.42777032398125, -0.69480911162985, -0.5038563385593533, -0.63329976965225, -0.6181001946666667, -0.5762286928434167, -1.384720461764706, -0.4819929444965776, -0.8034542969594367, -0.15858694785753624, -0.8355467472439175, -1.3314040627272727, -0.32770385576061, -0.6484467956246, -0.6008775380438733, -0.05862196819217567, -0.33937416614183336, -0.5611125393849167, -0.6186816916666666, -0.35568747335763, -0.375187534455131, -0.42784179696875, -0.33383509645481335, -0.4028480516880829, -0.5727801357933333, -0.36949997543182, -0.32624592816038334, -0.302050454334771, -0.663061777398778, -0.7939859497833334, -0.51307109361248, -0.7470856861197321, -0.46331603587777775, -0.5369780850291268, -0.27887999953867, -0.048760705707773334, -0.5748718133354467, -0.09699684810666334, -0.451468949063149, -0.5741944149255165, -0.46561845883470665, -0.6275455073266667]}
{"prompt": "'''\nEven if you just leave them be, they will fall to pieces all by themselves. So, someone has to protect them, right?\n\nYou find yourself playing with Teucer again in the city of Liyue. As you take the eccentric little kid around, you notice something interesting about the structure of the city.\n\nLiyue can be represented as a directed graph containing n nodes. Nodes are labeled from 1 to n. There is a directed edge from node a to node b if and only if a < b.\n\nA path between nodes a and b is defined as a sequence of edges such that you can start at a, travel along all of these edges in the corresponding direction, and end at b. The length of a path is defined by the number of edges. A rainbow path of length x is defined as a path in the graph such that there exists at least 2 distinct colors among the set of x edges.\n\nTeucer's favorite number is k. You are curious about the following scenario: If you were to label each edge with a color, what is the minimum number of colors needed to ensure that all paths of length k or longer are rainbow paths?\n\nTeucer wants to surprise his older brother with a map of Liyue. He also wants to know a valid coloring of edges that uses the minimum number of colors. Please help him with this task!\n\nInput\n\nThe only line of input contains two integers n and k (2 \u2264 k < n \u2264 1000). \n\nOutput\n\nOn the first line, output c, the minimum colors you need to satisfy the above requirements.\n\nOn the second line, print a valid edge coloring as an array of (n(n-1))/(2) integers ranging from 1 to c. Exactly c distinct colors should exist in the construction. Print the edges in increasing order by the start node first, then by the second node.\n\nFor example, if n=4, the edge colors will correspond to this order of edges: (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n4 3\n''') == '''\n3\n1 1 1 2 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1000 888\n''') == '''\n113\n2 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "solution('''\n3 2\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n5 3\n''') == '''\n3\n1 2 3\n'''\n\n# check the performance of solution\nassert solution('''\n1000 999\n''') == '''\n1000\nsolution('''\n4 2\n''') == '''\n2\n1 1 1 2 2\n'''\nassert solution('''\n4 3\n''') == '''\n1\n1\n'''\nassert solution('''\n5 4\n''') == '''\n2\n1 1 1 2 2 2\n'''\nassert solution('''\n7 5\n''') == '''\n3\n1 1 1 2 2 2 3 3 3 3\n'''\nassert solution('''\n7 2\n''') == '''\n3\n1 1 1 2 2 2 3 3\n'''\nassert solution('''\n10 9\n''') == '''\n1\n1\n'''\nassert solution('''\n10 5\n''') == '''\n4\n1 1 1 2 2 2 3 3 3 4 4 4 4\n'''\nassert solution('''\n1000 998\n''') == '''\n2\n1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", "solution('''4 2''') == '''2\n1 2 1 2 2 1'''\nassert solution('''4 3''') == '''3\n1 2 1 2 2 3 3 1'''\nassert solution('''1000 2''') == '''1\n1'''\nassert solution('''1000 3''') == '''2\n1 2 1 2 2 1'''\nassert solution('''1000 4''') == '''3\n1 2 1 2 2 3 3 1'''\nassert solution('''1000 5''') == '''4\n1 2 1 2 2 3 3 4 4 1'''\nassert solution('''1000 6''') == '''5\n1 2 1 2 2 3 3 4 4 5 5 1'''\nassert solution('''1000 999''') == '''1\n1'''\nassert solution('''1000 1000''') == '''2\n1 2 1 2 2 1'''\n\n# submit the code to the judge system\nsh.generate_file('../output.txt', solution)", "solution(stdin=\"\"\"4 2\"\"\") == \"\"\"3\n1 2 2 1 3 2\"\"\", \"wrong answer\"\n\n# submit for testing\nif __name__ == \"__main__\":\n    import requests\n\n    url = \"https://api.solve.systems/graph-coloring\"\n    body = {'data': stdin}\n    headers = {'Authorization': \"Bearer {token}\".format(token=TOKEN)}\n    response = requests.post(url, headers=headers, json=body)\n    response.raise_for_status()\n    print(response.text)", "solution(stdin='''\n4 3\n''') == '''\n2\n1 1 2 2 2\n'''\n\nassert solution(stdin='''\n5 4\n''') == '''\n3\n1 1 2 2 2 2 2\n'''\n\nassert solution(stdin='''\n8 2\n''') == '''\n3\n1 1 1 1 2 2 2 2 2 2 2\n'''\n\nassert solution(stdin='''\n11 3\n''') == '''\n3\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution('''\n3 2\n''') == '''\n1\n1 1 1\n'''\nassert solution('''\n3 3\n''') == '''\n2\n1 1 2 1 2\n'''\nassert solution('''\n4 3\n''') == '''\n2\n1 1 2 1 2 2\n'''\nassert solution('''\n4 4\n''') == '''\n3\n1 1 2 1 2 2 2 2\n'''\nassert solution('''\n10 6\n''') == '''\n3\n1 1 2 1 2 2 2 3 1 3 2 1 3 2 3 3 3 3\n'''\n\n# print solution outputs\ninputs = (\n    ('3 2', '1 1 1'),\n    ('3 3', '1 1 2 1 2'),\n    ('4 3', '1 1 2 1 2 2'),\n    ('4 4', '1 1 2 1 2 2 2 2'),\n    ('10 6', '1 1 2 1 2 2 2 3 1 3 2 1 3 2 3 3 3 3'),\n)\n\nfor inp, out in inputs:\n    # get the actual output\n    result = solution(inp)\n    if result == out:\n        print('\\033[32m\u2714\ufe0f  for {}\\033[0m'.format(inp))\n    else:\n", "solution(\"\"\"\n    2 1\n\"\"\") == \"\"\"\n    1\n    1\n\"\"\", \"And your message is too short\"", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\n\nprint('All passed!')", "solution(solution.__doc__) == '''\n10\n4\n2 3 1 1 2 3 4 4 2 1 \n'''\n\n# ==================\n\ndef solution_gen(n: int, k: int) -> str:\n    '''\n    \u5c06\u8fde\u7eed\u7684\u8fb9\u7740\u4e0d\u540c\u7684\u989c\u8272\u5373\u53ef\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u957f\u5ea6\u4e3ak\u7684\u8def\u5f84\u662f\u53ef\u7740\u8272\u7684\uff0c\u8981\u4fdd\u8bc1\u5b58\u5728\u8fb9\u7684\u6570\u91cf\u5927\u4e8ek-1\uff0c\n    \u56e0\u6b64\u8fb9\u7684\u6570\u91cf\u4e0d\u53ef\u4ee5\u5c0f\u4e8en+k-1\uff0cc\u5373\u4e3an+k-1\n    '''\n    assert n > 1 and k >= 2 and k < n\n    m = n + k - 1\n    return '{}\\n{}'.format(m, ' '.join(map(str, range(1, m+1))))\n\n# check the correctness of solution\nfor n in range(2, 1000+1):\n    for k in range(2, n):\n        assert solution_gen(n, k) == solution(solution", "solution(\"\") == \"\", \"Wrong Answer\"\nassert solution(\"\") == \"\", \"Wrong Answer\"\nassert solution(\"\") == \"\", \"Wrong Answer\"\nassert solution(\"\") == \"\", \"Wrong Answer\"\nassert solution(\"\") == \"\", \"Wrong Answer\"\nassert solution(\"\") == \"\", \"Wrong Answer\"\nassert solution(\"\") == \"\", \"Wrong Answer\"\nassert solution(\"\") == \"\", \"Wrong Answer\"\nassert solution(\"\") == \"\", \"Wrong Answer\"\nassert solution(\"\") == \"\", \"Wrong Answer\"", "solution('''\n4 3\n''') == '''\n1\n2 1 1 2\n'''\n\nassert solution('''\n4 4\n''') == '''\n2\n1 2 1 2 1 2 1\n'''\n\nassert solution('''\n5 4\n''') == '''\n2\n1 2 1 2 1 2 1 2 1\n'''\n\nassert solution('''\n5 5\n''') == '''\n3\n1 2 1 2 1 2 1 2 1 2 1\n'''\n\nassert solution('''\n6 5\n''') == '''\n3\n1 2 1 2 1 2 1 2 1 2 1 2 1\n'''\n\nassert solution('''\n6 6\n''') == '''\n3\n1 2 1 2 1 2 1 2 1 2 1 2 1\n'''\n\nassert solution('''\n7 6\n''') == '''\n3\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1\n'''\n\nassert solution('''\n7 7\n''') == '''\n4\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1\n'''\n\nassert solution('''\n8 7\n''') == '''\n4\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1", "solution(\"4 3\") == \"\\n4\\n1 2 2 3 3 4\", \"example1\"\nassert solution(\"6 4\") == \"\\n4\\n1 2 2 3 3 4 3 5 3 6 4 6\", \"example2\"\nassert solution(\"3 2\") == \"\\n2\\n1 2 2 3\", \"example3\"\nassert solution(\"7 6\") == \"\\n4\\n1 2 2 3 3 4 4 5 4 6 4 7 5 7\", \"example4\"\nassert solution(\"2 1\") == \"\\n1\\n1 2\", \"example5\"\nassert solution(\"1000 999\") == \"\\n1\\n1 2 2 3 3 4 ... 999 1000 1000 1\", \"edge case1\"\nassert solution(\"1000 1000\") == \"\\n2\\n1 2 2 3 3 4 ... 999 1000 1000 1 1 2\", \"edge case2\"\nassert solution(\"1000 999\") == \"\\n1\\n1 2 2 3 3 4 ... 999 1000 1000 1\", \"edge case3\"\n\n# submit\ndef submit(submission: callable) -> None:\n    n, k = (int(x) for x in input().split())\n    print(submission(n, k))\n\nsubmit(solution)", "solution(stdin) == stdout", "str(solution('4 2')) == '''2\n1 2 2 1 2 1\n'''\nassert str(solution('5 3')) == '''3\n1 2 3 1 3 2 3 3\n'''\n\nprint(solution('''3 2'''))", "solution('''\n3 2\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n4 2\n''') == '''\n2\n1 2 2 1\n'''\n\nassert solution('''\n4 3\n''') == '''\n3\n1 2 3 1 2 2\n'''\n\nassert solution('''\n4 4\n''') == '''\n4\n1 2 3 4 1 2 3 2 3 4\n'''\n\nassert solution('''\n4 5\n''') == '''\n5\n1 2 3 4 5 1 2 3 4 5 1 2 3 4 2 3 4 5 3 4 5\n'''\n\nassert solution('''\n9 8\n''') == '''\n6\n1 2 3 4 5 6 1 2 3 4 5 2 3 4 5 6 3 4 5 6\n'''\n\nassert solution('''\n10 9\n''') == '''\n7\n1 2 3 4 5 6 7 1 2 3 4 5 6 2 3 4 5 6 7 3 4 5 6 7\n'''\n\nassert solution('''\n10 10\n''') == '''\n9\n1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 2 3 4 5 6 7 8 9 3 4 5 6 7 8 9\n'''\n\nassert solution('''\n", "solution('''4 2''') == '''2\n1 2 2 1'''\n\nassert solution('''10 6''') == '''4\n1 2 3 4 2 2 1 1 2 3'''\n\nassert solution('''10 5''') == '''3\n1 2 3 1 2 3 1 2 3 1'''\n\nassert solution('''10 3''') == '''2\n1 2 1 2 1 2 1 2 1 2'''\n\nassert solution('''10 4''') == '''3\n1 2 3 1 2 3 1 2 3 1'''\n\n# test the performance of solution\nimport timeit\nimport random\n\nprog = \"\"\"\nimport random\n\nn = random.randint(1000, 1000)\nk = random.randint(2, n-1)\n\nstdin = '{} {}'.format(n, k)\n\"\"\"\n\nduration = timeit.timeit(stmt=prog, number=10, setup='from __main__ import solution')\nprint(duration)\n\n'''\n2\n'''", "solution(\"5 2\") == \"4\\n4 4 4 4 4 2 2 2\"\nassert solution(\"20 10\") == \"7\\n7 4 3 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\"\nassert solution(\"1000 1000\") == \"1\\n1\"\nassert solution(\"1000 999\") == \"1000\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(\"4 3\") == '3\\n1 2 2 3'\nassert solution(\"6 4\") == '5\\n1 2 2 3 3 4 4 5 5 6'\nassert solution(\"5 3\") == '2\\n1 1 2 2 3 3 4 4 5'\nassert solution(\"5 2\") == '1\\n1 1 1 1 1'\nassert solution(\"6 3\") == '2\\n1 1 1 2 2 3 3 4 4 5 5 6'\nassert solution(\"6 2\") == '1\\n1 1 1 1 1 1'\nassert solution(\"7 4\") == '5\\n1 2 2 3 3 4 4 5 5 6 6 7'\nassert solution(\"7 3\") == '2\\n1 1 1 2 2 3 3 4 4 5 5 6 6 7'\nassert solution(\"7 2\") == '1\\n1 1 1 1 1 1 1'\nassert solution(\"8 4\") == '5\\n1 2 2 3 3 4 4 5 5 6 6 7 7 8'\nassert solution(\"8 3\") == '2\\n1 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8'\nassert solution(\"8 2\") == '1\\n1 1 1 1 1 1 1 1'\nassert solution(\"9 5\") == '6\\n1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9'", "solution('''\n2 2\n''') == '''\n1\n1 1\n'''\n\nassert solution('''\n3 2\n''') == '''\n2\n1 1 2 2\n'''\n\nassert solution('''\n4 3\n''') == '''\n2\n1 1 2 2 2 2\n'''\n\nassert solution('''\n5 4\n''') == '''\n3\n1 1 2 2 2 2 3 3 3 3\n'''\n\nassert solution('''\n6 5\n''') == '''\n3\n1 1 2 2 2 2 3 3 3 3 3 3\n'''\n\nassert solution('''\n10 4\n''') == '''\n2\n1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2\n'''\n\nassert solution('''\n10 7\n''') == '''\n3\n1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3\n'''\n\nassert solution('''\n100 7\n''') == '''\n3\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution('''3 1''') == '''1\n1'''\nassert solution('''6 2''') == '''2\n1 1 1 2 2 2'''\nassert solution('''9 3''') == '''2\n1 1 1 1 1 1 1 2 2'''\nassert solution('''1000 2''') == '''5\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(\"5 3\") == \"\"\"2\n1 1 1 2 2 1\n\"\"\", \"sample 1\"\nassert solution(\"5 4\") == \"\"\"3\n1 1 1 2 2 2 1 1 1\n\"\"\", \"sample 2\"\nassert solution(\"5 5\") == \"\"\"5\n1 1 1 2 2 2 3 3 3 4 4 4 5 5 5\n\"\"\", \"sample 3\"\nassert solution(\"5 6\") == \"\"\"6\n1 1 1 2 2 2 3 3 3 4 4 4 5 5 5\n\"\"\", \"sample 4\"\nassert solution(\"1000 1000\") == \"\"\"1000\n1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7 8 8 8 9 9 9 10 10 10 11 11 11 12 12 12 13 13 13 14 14 14 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 20 20 20 21 21 21 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 29 29 29 30 30 30 31 31 31 32 32 32 33 33 33 34 34 34 35 35 35 36 36 36 37 37 37 38 38 38 39 39 39 40 40 40 41 41 41 42 42 42 43 43 43 44 44 44 45 45 45 46 46 46 47 47 47 48 48 48 49 49 49 50 50 50 51 51 51 52 52 52 53 53 53 54 54 54 55 55 55 56 56 56 57 57 57 58 58 58", "solution('''\n2 2\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n''') == '''\n2\n1 1 2 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n8 5\n''') == '''\n3\n1 1 1 2 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "solution(\"4 3\") == \"3\\n1 2 2 1 1 1 2 2\"\nassert solution(\"7 2\") == \"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution('''\n6 2\n''') == '''\n3\n1 2 3 3 3 3\n'''\n\n# test\ninput = '''\n6 3\n'''\nprint(solution(input))\n\ninput = '''\n8 3\n'''\nprint(solution(input))\n\ninput = '''\n10 5\n'''\nprint(solution(input))\n\ninput = '''\n50 3\n'''\nprint(solution(input))\n\ninput = '''\n1000 5\n'''\nprint(solution(input))\n\ninput = '''\n1000 9\n'''\nprint(solution(input))\n\ninput = '''\n1000 999\n'''\nprint(solution(input))", "solution(solve_sample_input()) == solve_sample_output()\nassert solution(solve_invisible_input()) == solve_invisible_output()\n\n# check the performance of solution\nprofile_file = __file__.replace('.py', '.prof')\ncProfile.runctx('solution(solve_large_input())', globals(), locals(), filename=profile_file)\n\nwith open(profile_file, 'r') as f:\n    stats = pstats.Stats(f).strip_dirs().sort_stats('cumulative')\n    stats.print_stats()", "solution('''\n4 3\n''') == '''\n2\n1 1 2 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 2\n''') == '''\n1\n1\n'''\n\nprint(solution('''\n4 3\n'''))", "solution(\"9 4\") == \"2\\n1 1 1 1 1 1 1 1 1 2 2\"\nassert solution(\"6 5\") == \"1\\n1 1 1 1 1 1\"\nassert solution(\"6 4\") == \"1\\n1 1 1 1 1 1\"\nassert solution(\"5 3\") == \"2\\n1 1 1 1 2 2\"\nassert solution(\"5 2\") == \"1\\n1 1 1 1 1\"\nassert solution(\"3 2\") == \"1\\n1 1 1\"\nassert solution(\"3 1\") == \"1\\n1 1 1\"\nassert solution(\"3 3\") == \"1\\n1 1 1\"\nassert solution(\"5 4\") == \"2\\n1 1 1 1 2 2\"\nassert solution(\"7 3\") == \"2\\n1 1 1 1 1 1 2 2\"\nassert solution(\"9 5\") == \"2\\n1 1 1 1 1 1 1 1 1 2 2\"\nassert solution(\"10 5\") == \"2\\n1 1 1 1 1 1 1 1 1 1 2 2\"\nassert solution(\"11 6\") == \"2\\n1 1 1 1 1 1 1 1 1 1 1 2 2\"\nassert solution(\"11 7\") == \"3\\n1 1 1 1 1 1 1 1 1 1 1 2 2 3\"\nassert solution(\"11 8\") == \"3\\n1", "solution(\"\"\"\n4 3\n\"\"\") == \"\"\"\n4\n1 2 3 4 1 2 3 4 1 2 3 4 1\n\"\"\"\n\nassert solution(\"\"\"\n6 5\n\"\"\") == \"\"\"\n6\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n\"\"\"\n\nassert solution(\"\"\"\n7 6\n\"\"\") == \"\"\"\n7\n1 2 3 4 5 6 7 1 2 3 4 5 6 7 1 2 3 4 5 6 7 1 2 3 4 5 6 7 1 2 3 4 5 6 7 1 2 3 4 5 6 7 1 2 3 4 5 6 7\n\"\"\"\n\nassert solution(\"\"\"\n100 2\n\"\"\") == \"\"\"\n2\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1", "solution('''\n3 2\n''') == '''\n3\n1 1 1\n'''\n\nassert solution('''\n4 3\n''') == '''\n3\n1 1 1 2 2 2\n'''\n\nassert solution('''\n1000 999\n''') == '''\n512\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution('''\n3 2\n''') == '''\n1\n1 1 1\n'''\nassert solution('''\n4 2\n''') == '''\n2\n1 1 2 1 2\n'''\nassert solution('''\n4 3\n''') == '''\n2\n1 1 2 1 2\n'''\nassert solution('''\n4 4\n''') == '''\n3\n1 1 2 1 2 2 1\n'''\nassert solution('''\n5 4\n''') == '''\n3\n1 1 2 1 2 3 1 2 2 3 3 1 2 3 4\n'''\nassert solution('''\n5 5\n''') == '''\n3\n1 1 2 1 2 3 1 2 2 3 3 1 2 3 4\n'''\nassert solution('''\n5 6\n''') == '''\n3\n1 1 2 1 2 3 1 2 2 3 3 1 2 3 4\n'''\nassert solution('''\n5 7\n''') == '''\n4\n1 1 2 1 2 3 1 2 4 1 3 2 3 4 3 4 5\n'''\nassert solution('''\n5 10\n''') == '''\n4\n1 1 2 1 2 3 1 2 4 1 3 2 3 4 3 4 5\n'''\nassert solution('''\n6 7\n''') == '", "str(solution('''\n4 2\n''')) == '''\n2\n1 1 1 2 2 2 \n'''\n\nassert str(solution('''\n20 11\n''')) == '''\n8\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution('''4 3''') == '''2\n1 2 2 2 2 1'''\n\n# submit solution\nTester(solution, name='rgcs').run_tests()\n \n# push to git\nsubprocess.call([\"git\", \"add\", \"rainbow-graph-coloring-seq.py\"])\nsubprocess.call([\"git\", \"commit\", \"-m\", \"rainbow-graph-coloring-seq.py\"])\nsubprocess.call([\"git\", \"push\"])", "solution(test_data) == 'test result'\n\n# get input for execution\ndef get_input() -> str:\n    return r'''\nsample input\n'''\n\nif __name__ == '__main__':\n    print(solution(get_input()))", "solution('''4 2''') == '''3\n1 1 2 2 3'''\n\nassert solution('''5 3''') == '''2\n1 1 2 2 1'''\n\n# print the result with input\nif __name__ == '__main__':\n    user_input = input()\n    print(solution(user_input))", "solution('''\n5 2\n''') == '''\n2\n1 1 1 2 2\n'''\n\nassert solution('''\n2 1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n5 3\n''') == '''\n3\n1 1 1 2 2 3\n'''\n\nassert solution('''\n5 4\n''') == '''\n2\n1 1 1 1 1\n'''\n\nassert solution('''\n10 3\n''') == '''\n4\n1 1 1 2 2 2 3 3 3 4\n'''\n\nassert solution('''\n100 4\n''') == '''\n6\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(\"4 3\") == \"3\\n[1, 2, 3, 1, 2, 3]\", \"problem example #1\";\n\n# check the performance of solution\nassert solution(\"100 99\") == \"100\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100", "solution('''\n5 3\n''') == '''\n2\n1 1 1 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n6 2\n''') == '''\n4\n1 1 1 2 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n6 3\n''') == '''\n2\n1 1 1 2 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4 2\n''') == '''\n2\n1 1 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 3\n''') == '''", "solution(stdin='3 1') == '''\n2\n1 2\n'''\n\nassert solution(stdin='4 3') == '''\n2\n1 2\n1 2\n'''\n\nassert solution(stdin='5 3') == '''\n2\n1 2\n1 2\n1 2\n'''\n\nassert solution(stdin='5 4') == '''\n3\n1 2\n1 2\n1 2\n1 3\n'''\n\nassert solution(stdin='7 2') == '''\n3\n1 2\n1 2\n1 2\n2 3\n2 3\n2 3\n'''\n\nassert solution(stdin='10 9') == '''\n4\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2", "solution('''\n6 3\n''') == '''\n2\n1 1 1 2 2 1\n'''\n\n# obtain input from stdin\nif __name__ == '__main__':\n    from sys import stdin\n    solution(stdin.read())", "solution(\"\") == \"\", \"Example1\"\nassert solution(\"\") == \"\", \"Example2\"\nassert solution(\"\") == \"\", \"Example3\"\nassert solution(\"\") == \"\", \"Example4\"\nassert solution(\"\") == \"\", \"Example5\"\nassert solution(\"\") == \"\", \"Example6\"\nassert solution(\"\") == \"\", \"Example7\"\nassert solution(\"\") == \"\", \"Example8\"\nassert solution(\"\") == \"\", \"Example9\"\nassert solution(\"\") == \"\", \"Example10\"\n\n# import the template files of input and output\ntemplate_string = \"\".join(open(\"Python/input.txt\", \"r\").readlines())\noutput_string = \"\".join(open(\"Python/output.txt\", \"r\").readlines())\n\n# perform the actual check\nassert solution(template_string) == output_string, \"Test failed\"\n\n# end of the check\nprint(\"Everything works fine!\")", "solution('''4 3''') == '''2\n2 2 2 1 1 1'''\n\nassert solution('''4 2''') == '''3\n3 2 2 1 1 1 1'''\n\nassert solution('''6 4''') == '''3\n3 2 3 1 1 1 1 2 2 2'''\n\n# test the performance of solution\nfrom random import randint\nfrom time import time\nfrom datetime import timedelta\n\nfor i in range(1, 4):\n    inp = str(i) + ' ' + str(randint(2, i))\n    start = time()\n    solution(inp)\n    end = time()\n    duration = timedelta(seconds=end-start)\n    print(f'{inp} took {duration}')", "solution('''\n3 1\n''') == '''\n2\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 2\n''') == '''\n2\n1 2 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n4 3\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n6 3\n''') == '''\n3\n1 2 2 1 3 1\n'''\n\n# check the correctness of solution\nassert solution('''\n7 3\n''') == '''\n3\n1 2 2 1 3 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n7 4\n''') == '''\n2\n1 2 2 1 1 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n7 5\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1000 1\n''') == '''\n1000\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53", "solution(\"\") == \"\", \"solution doesn't work properly\"\n\n# run the solution on input\nprint(solution(stdin))", "solution(\"4 3\") == \"3\\n1 1 1 2 2 3\\n\"\nassert solution(\"5 3\") == \"4\\n1 1 1 2 2 2 3 3 4\\n\"\nassert solution(\"10 2\") == \"9\\n1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9\\n\"\n\n# let the user know if the solution passes\nprint(\"Correct!\")", "solution(\"5 3\") == \"2\\n1 1 1 2 2\"\nassert solution(\"100 50\") == \"1\\n1\"\nassert solution(\"100 100\") == \"99\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"\nassert solution(\"2 1\") == \"1\\n1\"\nassert solution(\"1000 1000\") == \"999\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131", "solution('''4 2''') == '''2\n1 2 2 1 1 1'''\n\nassert solution('''5 2''') == '''3\n1 1 2 2 2 1 1 2'''\n\nassert solution('''5 3''') == '''4\n1 1 2 3 3 1 2 3 3 2'''\n\nassert solution('''5 4''') == '''5\n1 1 2 3 4 4 1 2 3 4 2 3'''\n\nassert solution('''5 5''') == '''6\n1 1 2 3 4 5 5 1 2 3 4 5 2 3 4'''\n\nassert solution('''5 6''') == '''7\n1 1 2 3 4 5 6 6 1 2 3 4 5 6 2 3 4 5'''\n\nassert solution('''5 7''') == '''8\n1 1 2 3 4 5 6 7 7 1 2 3 4 5 6 7 2 3 4 5 6'''\n\nassert solution('''5 8''') == '''9\n1 1 2 3 4 5 6 7 8 8 1 2 3 4 5 6 7 8 2 3 4 5 6 7'''\n\nassert solution('''5 9''') == '''10\n1 1 2 3 4 5 6 7 8 9 9 1 2 3 4 5 6 7 8 9 2 3 4 5 6 7 8'''", "solution('''4 2''') == '''2\n1 2 1 1 2 1'''\nassert solution('''10 4''') == '''5\n1 2 1 1 2 1 1 2 1 2 1 1 1 2 1 1 2 2 1 1 1 2 2 1 1 1 2 2 1 2 2 1 1 2 2 1 2 2 1 2 2 2 2 1 1 2 2 2 2 1 1 2 2 2 2 1 2 2 2 2 1 1 2 2 2 2 1 2 2 2 2 1 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2'''\n\nassert solution('''10 5''') == '''1\n1 1 1 1 1 1 1 1 1 1'''\n\nassert solution('''10 7''') == '''1\n1 1 1 1 1 1 1 1 1 1'''\n\nassert solution('''10 10''') == '''1\n1 1 1 1 1 1 1 1 1 1'''\n\nassert solution('''1000 10''') == '''76\n1 2 3 4 5 6 7 8 9 10 1 1 2 3 4 5 6 7 8 9 1 1 1 2 3 4 5 6 7 8 1 1 1 1 2 3 4 5 6 7 1 1 1 1 1 2 3 4 5 6 1 1 1 1 1 1 2 3", "solution('''\n1\n''') == '''\n1\n'''\n\nassert solution('''\n2\n''') == '''\n1\n'''\n\nassert solution('''\n4\n''') == '''\n1\n'''\n\nassert solution('''\n5\n''') == '''\n2\n'''\n\nassert solution('''\n6\n''') == '''\n3\n'''\n\nassert solution('''\n10\n''') == '''\n4\n'''\n\nassert solution('''\n15\n''') == '''\n5\n'''\n\nassert solution('''\n20\n''') == '''\n6\n'''\n\nassert solution('''\n25\n''') == '''\n7\n'''\n\nassert solution('''\n30\n''') == '''\n8\n'''\n\nassert solution('''\n35\n''') == '''\n9\n'''\n\nassert solution('''\n100\n''') == '''\n20\n'''\n\nassert solution('''\n300\n''') == '''\n60\n'''\n\nassert solution('''\n500\n''') == '''\n100\n'''\n\nassert solution('''\n1000\n''') == '''\n200\n'''\n\nassert", "solution(\"\") == \"\"\n\n# check the performance of solution\nimport timeit\nprint(timeit.timeit(lambda: solution(\"\"), number=1))"], "finish_reason": ["length", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "stop", "length", "length", "length", "length", "length", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "length", "length", "stop"], "sum_logprob": [-44.87713793545003, -30.912698140763975, -66.97369894344607, -60.35440404965699, -93.13927540215006, -70.46829736974499, -119.55761248528, -42.472754134, -19.322114602139997, -211.33053080917585, -15.802095253136002, -49.814211135026994, -115.93971071309004, -5.230808013000001, -42.90011634297999, -56.77257364220097, -96.78447671259995, -64.06437605810994, -62.28657162415601, -54.69059723745799, -37.478088210483975, -49.18100781691006, -54.74353089845198, -40.72159780169999, -61.78791616157396, -46.91886621594701, -24.475603497370003, -88.38142474733, -45.82922694006001, -35.50745564961003, -74.87932160785137, -39.09878118017997, -82.28423718057402, -45.81899904867, -41.236795885913004, -56.66525926638101, -49.213783590581976, -53.075044666156536, -60.61759668672399, -30.86637844884, -108.89401527759, -89.98473196083602, -52.088120964595035, -31.825572790659994, -60.586907124820016, -39.50040068356994, -55.518397623080055, -110.2311890395001, -50.35192164264045, -17.696850270269994], "mean_logprob": [-0.14959045978483335, -0.10304232713588, -0.22324566314482, -0.25682725127513617, -0.6749222855228261, -0.23489432456581666, -0.3985253749509333, -1.4157584711333333, -0.24458372914101265, -0.7044351026972534, -0.12249686242741085, -0.16604737045009, -0.4262489364451838, -0.5812008903333333, -0.6703143178590625, -0.18924191214067002, -0.39665769144508195, -0.2135479201937, -0.20762190541385334, -0.18230199079152667, -0.12492696070161333, -0.16393669272303332, -0.18247843632817334, -0.135738659339, -0.3656089713702604, -0.34247347602881023, -0.3447268098221127, -0.2946047491577667, -0.1527640898002, -0.1183581854987, -0.249597738692838, -0.1303292706006, -0.6973240439031695, -0.7159218601354688, -0.5028877547062561, -0.18888419755460334, -0.16404594530194, -0.176916815553855, -0.20205865562241335, -0.5060062040793443, -0.5064837919887907, -0.4971532152532376, -0.17362706988198334, -0.994549149708125, -0.38346143749886075, -0.13166800227856668, -0.18506132541026668, -0.3674372967983333, -0.16783973880880165, -0.4915791741741667]}
{"prompt": "'''\nOmkar is creating a mosaic using colored square tiles, which he places in an n \u00d7 n grid. When the mosaic is complete, each cell in the grid will have either a glaucous or sinoper tile. However, currently he has only placed tiles in some cells. \n\nA completed mosaic will be a mastapeece if and only if each tile is adjacent to exactly 2 tiles of the same color (2 tiles are adjacent if they share a side.) Omkar wants to fill the rest of the tiles so that the mosaic becomes a mastapeece. Now he is wondering, is the way to do this unique, and if it is, what is it?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2000).\n\nThen follow n lines with n characters in each line. The i-th character in the j-th line corresponds to the cell in row i and column j of the grid, and will be S if Omkar has placed a sinoper tile in this cell, G if Omkar has placed a glaucous tile, . if it's empty. \n\nOutput\n\nOn the first line, print UNIQUE if there is a unique way to get a mastapeece, NONE if Omkar cannot create any, and MULTIPLE if there is more than one way to do so. All letters must be uppercase.\n\nIf you print UNIQUE, then print n additional lines with n characters in each line, such that the i-th character in the j^{th} line is S if the tile in row i and column j of the mastapeece is sinoper, and G if it is glaucous. \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"4\nS.G.\n.S..\n.S.G\nG.S.\n\"\"\") == \"\"\"UNIQUE\nSGGS\nSGGS\nSSSS\nSSSS\n\"\"\"\n\nassert solution(\"\"\"2\nSS\nSS\n\"\"\") == \"\"\"NONE\n\"\"\"\n\nassert solution(\"\"\"3\nSS.\nSS.\n..G\n\"\"\") == \"\"\"MULTIPLE\n\"\"\"", "solution(\"\"\"2\n..\n..\"\"\") == \"\"\"UNIQUE\nSS\nSS\"\"\"\n\nassert solution(\"\"\"2\n.G\n.G\"\"\") == \"\"\"NONE\"\"\"\n\nassert solution(\"\"\"4\nS...\nS.S.\nS...\n.S..\"\"\") == \"\"\"UNIQUE\nSGGG\nSGSS\nSGGG\nGSSG\"\"\"\n\nassert solution(\"\"\"4\nS..G\n.S..\n..S.\nG..S\"\"\") == \"\"\"MULTIPLE\"\"\"\n\nassert solution(\"\"\"4\nS..G\nS.S.\nS.S.\n.S..\"\"\") == \"\"\"NONE\"\"\"\n\nassert solution(\"\"\"4\nG.S.\n.SS.\n..S.\n.G..\"\"\") == \"\"\"UNIQUE\nGSSG\nSSSG\nGSSG\nGGSG\"\"\"\n\nassert solution(\"\"\"6\n..G.S.\n.G..SS\nG....S\n....G.\n.G....\n..GG..\"\"\") == \"\"\"UNIQUE\nSSGSSS\nSSGSSS\nGSSSSS\nGGSSSS\nSSGSSS\nSSGGSS\"\"\"\n\nassert solution(\"\"\"6\nGGSSGG\nGG.S.G\n.G.SSG\nSSSSSS\nGGGGGG\nGGG.GG", "solution(\"\"\"\n3\n...\n...\n...\n\"\"\") == \"\"\"\nNONE\n\"\"\", \"First simple test\"\n\nassert solution(\"\"\"\n3\n...\n...\n...\n\"\"\") == \"\"\"\nNONE\n\"\"\", \"First simple test\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n...\nG..\n...\n\"\"\") == \"\"\"\nUNIQUE\n...\nG..\n...\n\"\"\", \"Second simple test\"\n\nassert solution(\"\"\"\n3\n...\n.G.\n...\n\"\"\") == \"\"\"\nUNIQUE\n...\n.G.\n...\n\"\"\", \"Second simple test\"\n\nassert solution(\"\"\"\n3\n.G.\n.G.\n.G.\n\"\"\") == \"\"\"\nNONE\n\"\"\", \"One color\"\n\nassert solution(\"\"\"\n3\nSGS\nSGS\nSGS\n\"\"\") == \"\"\"\nNONE\n\"\"\", \"One color\"\n\nassert solution(\"\"\"\n3\nSSS\nSSS\nSSS\n\"\"\") == \"\"\"\nNONE\n\"\"\", \"One color\"\n\nassert solution(\"\"\"\n3\n.GS\n.GS\n.GS\n\"\"\") == \"\"\"\nNONE\n\"\"\", \"One color\"\n\nassert solution(\"\"\"\n3\n...\n...\n...\n\"\"\") == \"\"\"\nNONE\n\"\"\",", "solution(stdin) == stdout\n\n# check the speed of solution\nimport timeit\nprint(f'{round(timeit.timeit(\"solution(\\\"...\\\")\", globals=globals(), number=1), 5)} sec')", "\"UNIQUE\\nSSSSSS\\nSSGGSS\\nSSSSSS\\nSSSSSS\\nSSSSSS\\nSSSSSS\" == solution(\"6\\nS...S.\\nS...S.\\nS...S.\\nS.....\\n..S...\\n.....S\")\n\nassert \"NONE\" == solution(\"6\\nS...S.\\nS...S.\\nS...S.\\nS.....\\n..S...\\n....S.\")\n\nassert \"MULTIPLE\" == solution(\"6\\nS...S.\\nS...S.\\nS...S.\\nS.....\\n..S...\\n....S\")\n\nassert \"UNIQUE\\nSSSSSS\\nSSGGSS\\nSSSSSS\\nSSSSSS\\nSSSSSS\\nSSSSSS\" == solution(\"6\\nS...S.\\nS...S.\\nS...S.\\nS.....\\n.SS...\\n....S.\")", "solution('''\n    5\n    SG...\n    ..G..\n    .....\n    .....\n    ...G.\n''') == '''\n    UNIQUE\n    SG...\n    ..G..\n    ...G.\n    .GG..\n    ..G..\n'''\n\nassert solution('''\n    2\n    SG\n    .G\n''') == '''\n    UNIQUE\n    SG\n    GS\n'''\n\nassert solution('''\n    2\n    GG\n    GS\n''') == '''\n    NONE\n'''\n\nassert solution('''\n    5\n    SSSSS\n    SSSSS\n    SGGGS\n    SGGGG\n    SSSSS\n''') == '''\n    UNIQUE\n    SSSSS\n    SSSSS\n    SGGGS\n    SGGGG\n    SSSSS\n'''\n\nassert solution('''\n    5\n    SG...\n    ..G..\n    ..G..\n    .....\n    ...G.\n''') == '''\n    MULTIPLE\n'''", "solution(\"\"\"\n2\n.S\n..\n\"\"\") == \"\"\"\nUNIQUE\n.S\nGS\n\"\"\"\n\nassert solution(\"\"\"\n3\nG.S\n...\n...\n\"\"\") == \"\"\"\nNONE\n\"\"\"\n\nassert solution(\"\"\"\n3\nG..\n.G.\n.SG\n\"\"\") == \"\"\"\nMULTIPLE\n\"\"\"\n\nassert solution(\"\"\"\n4\n.G..\n.G..\nG.G.\n..S.\n\"\"\") == \"\"\"\nUNIQUE\n.G.G\n.G.G\nG.G.\nGS.S\n\"\"\"", "solution('''4\nSSG.\nS.G.\nSGG.\nS...''') == '''UNIQUE\nSSGS\nSGGS\nSGGS\nSSSS'''\n\nassert solution('''4\nSSG.\nS.G.\nSGG.\nSG..''') == '''MULTIPLE'''\n\nassert solution('''4\nSSG.\nS.G.\nSGG.\nSSG.''') == '''NONE'''\n\nassert solution('''1\nS''') == '''UNIQUE\nS'''\n\nassert solution('''1\nG''') == '''UNIQUE\nG'''\n\nassert solution('''2\n..\n..''') == '''NONE'''\n\nassert solution('''2\nGG\nGG''') == '''UNIQUE\nGG\nGG'''\n\nassert solution('''2\nSS\nSS''') == '''UNIQUE\nSS\nSS'''\n\nassert solution('''2\nSG\nSG''') == '''UNIQUE\nSS\nGG'''\n\nassert solution('''2\nSG\nGS''') == '''UNIQUE\nSS\nGG'''\n\nassert solution('''2\nGG\nSS''') == '''", "solution('''\n''') == '''\n'''", "solution('''\n2\n.S\n.S\n''') == '''\nUNIQUE\n.S\n.S\n'''\n\nassert solution('''\n2\n.S\n.S\n''') == '''\nUNIQUE\n.S\n.S\n'''\n\nassert solution('''\n2\n.S\n.S\n''') == '''\nUNIQUE\n.S\n.S\n'''\n\nassert solution('''\n2\n.S\n.S\n''') == '''\nUNIQUE\n.S\n.S\n'''\n\nassert solution('''\n2\n.S\n.S\n''') == '''\nUNIQUE\n.S\n.S\n'''\n\nassert solution('''\n2\n.S\n.S\n''') == '''\nUNIQUE\n.S\n.S\n'''\n\nassert solution('''\n2\n.S\n.S\n''') == '''\nUNIQUE\n.S\n.S\n'''\n\nassert solution('''\n2\n.S\n.S\n''') == '''\nUNIQUE\n.S\n.S\n'''\n\nassert solution('''\n2\n.S\n.S\n''') == '''\nUNIQUE\n.S\n.S", "'UNIQUE' == solution('''\n3\nG.S\n.SS\n.SG\n''')\n\nassert 'NONE' == solution('''\n2\nGG\nGG\n''')\n\nassert 'MULTIPLE' == solution('''\n2\nSG\n.G\n''')", "solution(\"\"\"\n3\n.GS\nSG.\nGS.\n\"\"\") == \"UNIQUE\\n\\\nSSS\\n\\\nSGS\\n\\\nSSS\\n\"\n\nassert solution(\"\"\"\n3\nG.S\nSG.\nGS.\n\"\"\") == \"NONE\\n\"\n\nassert solution(\"\"\"\n3\n.GG\nGSG\nGG.\n\"\"\") == \"MULTIPLE\\n\"", "solution('''\n3\n..G\n..G\nSS.\n''') == '''\nUNIQUE\nG.G\nSSS\nG.G\n'''\nassert solution('''\n3\nG.G\nG.G\nG.G\n''') == '''\nMULTIPLE\n'''\nassert solution('''\n3\nG.G\nS.S\nG.G\n''') == '''\nNONE\n'''\n\n# print solution\nwith open('/tmp/02/input.txt') as f:\n    stdin = f.read()\nprint(solution(stdin))", "solution(\"4\\nS.G.\\nG.S.\\n.G..\\n...G\") == \\\n    \"UNIQUE\\nS.G.\\nG.S.\\n.G..\\n...G\"\nassert solution(\"4\\nS.G.\\nG.S.\\n.G..\\n..SG\") == \\\n    \"NONE\"\nassert solution(\"2\\nSG\\n..\") == \\\n    \"MULTIPLE\"\nassert solution(\"2\\nSG\\nGS\") == \\\n    \"UNIQUE\\nGS\\nSG\"\nassert solution(\"5\\nG...G\\n..S..\\n....S\\n....G\\n..G..\") == \\\n    \"UNIQUE\\nG...G\\n..S..\\n....S\\n....G\\n..G..\"\nassert solution(\"9\\nG.G.G.G.\\n.G.G.G.G\\n..G.G.G.\\n...G.G.G\\n....G.G.\\n.....G.G\\n......G.G\\n.......G.\\n........G\") == \\\n    \"UNIQUE\\nG.G.G.G.\\n.G.G.G.G\\", "solution(r'''\n3\n.G.\n..G\n...\n''') == '''\nUNIQUE\nGGG\nGGG\nGGG\n'''\n\nassert solution(r'''\n3\n...\n...\n...\n''') == '''\nNONE\n'''\n\nassert solution(r'''\n3\nSSS\nGGG\n...\n''') == '''\nMULTIPLE\n'''\n\nassert solution(r'''\n2\nSS\nGG\n''') == '''\nNONE\n'''\n\n# stress testing to check whether we have timeouts for larger input\nfrom random import randint\nfrom time import time\nfrom typing import List\n\ndef generate_random_data(size: int) -> str:\n    pass\n\ndef generate_all_data() -> None:\n    pass\n\nif __name__ == '__main__':\n    from pathlib import Path\n    from sys import stderr\n\n    timestamp = int(time())\n    for size in range(1, 2000+1):\n        print(f'Generating for size {size}', file=stderr)\n        with open(f'testcases/{timestamp}/{size}.in', 'w') as f:\n            f.write(generate_random_data(size))\n\n   ", "solution(\"\"\"\n4\nGG..\n....\n....\n....\n\"\"\") == '''\nNONE\n'''\n\nassert solution(\"\"\"\n4\n.G..\n....\n....\n....\n\"\"\") == '''\nMULTIPLE\n'''\n\nassert solution(\"\"\"\n3\n.SS\nSS.\n..S\n\"\"\") == '''\nUNIQUE\nSSS\nSSS\nGGG\n'''\n\nassert solution(\"\"\"\n3\n.SG\nGS.\n.GS\n\"\"\") == '''\nUNIQUE\nSSS\nGGG\nSSS\n'''\n\nassert solution(\"\"\"\n3\n.GS\nGS.\n.GS\n\"\"\") == '''\nNONE\n'''\n\nassert solution(\"\"\"\n2\nGG\n..\n\"\"\") == '''\nUNIQUE\nGG\nGG\n'''\n\nassert solution(\"\"\"\n4\n.S..\n.S..\n.S..\n.S..\n\"\"\") == '''\nUNIQUE\nSSSS\nGGGG\nSSSS\nGGGG\n'''\n\nassert solution(\"\"\"\n4\nS..S\n..S.\nS..S\n.S..\n\"\"\") == '''\nUNIQUE\nSSSS\nSSSS\nSSSS\nSSSS\n'''\n\nassert solution(\"\"\"\n3\n.", "solution('''\n5\nS.S..\nG....\n....G\n....G\n..G..\n''') == '''\nUNIQUE\nSSSSS\nGGG.G\nGGG.G\n.GGG.\n'''\n\nassert solution('''\n4\nS..G\n.GG.\n.GG.\nS..G\n''') == '''\nNONE\n'''\n\nassert solution('''\n4\nS..G\n.GG.\n.G.G\nS..G\n''') == '''\nMULTIPLE\n'''", "solution('''\n4\nS.S.\nS.S.\n..S.\n...G\n''') == '''\nUNIQUE\nSGSG\nSGSG\nGGSG\nGGGG\n'''\nassert solution('''\n4\nS.S.\nS.S.\n..S.\n..SG\n''') == '''\nNONE\n'''\nassert solution('''\n3\n.G.\n.G.\n.G.\n''') == '''\nMULTIPLE\n'''\nassert solution('''\n2\nS.\nS.\n''') == '''\nUNIQUE\nSS\nSS\n'''\nassert solution('''\n4\n.S..\nSS..\n....\n....\n''') == '''\nMULTIPLE\n'''\nassert solution('''\n4\nSS.S\nSS.S\n....\n....\n''') == '''\nUNIQUE\nSSSS\nSSSS\n....\n....\n'''\nassert solution('''\n4\n.S..\n.S..\n..S.\n...G\n''') == '''\nUNIQUE\nSSSS\nSSSS\nSSSS\nGGGG\n'''\nassert solution('''\n4\n.S..\n.S..\n..S.\n...S\n''')", "solution('''\n3\nGGG\nGSG\nGGG\n''') == '''\nNONE\n'''\n\nassert solution('''\n3\n.GG\nG.G\nGG.\n''') == '''\nUNIQUE\nGGG\nG.G\nGG.\n'''\n\nassert solution('''\n3\n...\n...\n...\n''') == '''\nMULTIPLE\n'''\n\nassert solution('''\n4\nSG.G\nGS.G\nS..G\nSGG.\n''') == '''\nUNIQUE\nSGGG\nGGSG\nSGGS\nSGGG\n'''\n\n# get the input\ndef get_input():\n    import sys\n    input = []\n    for line in sys.stdin:\n        line = line.strip()\n        if line == '':\n            break\n        input.append(line)\n    return '\\n'.join(input)\n\n# launch the process\nif __name__ == '__main__':\n    inp = get_input()\n    print(solution(inp))", "solution('''\n3\nG..\n.S.\n...\n''') == '''\nNONE\n'''\n\nassert solution('''\n3\nS..\n.S.\n...\n''') == '''\nMULTIPLE\n'''\n\nassert solution('''\n4\nS..G\nS..G\n...S\n...S\n''') == '''\nUNIQUE\nGSSG\nGSSG\nSGGS\nSGGS\n'''", "solution('''\n2\n.S\n.S\n''') == '''\nUNIQUE\nSG\nGS\n'''\n\nassert solution('''\n3\nG.S\n..S\n.SS\n''') == '''\nNONE\n'''\n\nassert solution('''\n5\nG.G..\n.S.S.\nG.G..\n.S.S.\nG.G..\n''') == '''\nMULTIPLE\n'''\n\n# test for high speed\nimport random\nimport string\nimport time\nimport io\n\nwith open('input', 'w') as f:\n    f.write('1000\\n')\n    for i in range(1000):\n        for j in range(1000):\n            f.write(random.choice(['.', 'G', 'S']))\n        f.write('\\n')\n\nstart = time.time()\nsolution(io.open('input', 'r', encoding='utf-8').read())\nend = time.time()\nprint('elapsed time: {}'.format(end - start))", "solution(\"\"\"3\n.SG\nS..\n.G.\n\"\"\") == \"\"\"UNIQUE\nSGS\nSGS\nSGS\"\"\"\n\n# test case\nstdin = \"\"\"4\nS..G\nS...\n..G.\n...G\n\"\"\"\n\nsolution(stdin)\n# stdout\n\"\"\"UNIQUE\nSGGG\nSSGG\nSSSG\nSSSG\"\"\"", "solution(\"\"\"5\nGGG.S\n.GS..\n.SGG.\n.SS..\n...S.\n\"\"\") == \"\"\"MULTIPLE\nGGG.S\n.GS.S\n.SGG.\n.SSGG\n...S.\n\"\"\"\n\nassert solution(\"\"\"3\nGG.\n..G\n.G.\n\"\"\") == \"\"\"UNIQUE\nGG.\n..G\n.G.\n\"\"\"\n\nassert solution(\"\"\"4\nGGG.\n.GS.\n.SGG\n...G\n\"\"\") == \"\"\"NONE\n\"\"\"\n\nassert solution(\"\"\"4\nGG..\n.G..\n.SGG\n...G\n\"\"\") == \"\"\"UNIQUE\nGGGG\n.G.G\n.SGG\n...G\n\"\"\"\n\nassert solution(\"\"\"3\nGGG\nGS.\n.GG\n\"\"\") == \"\"\"UNIQUE\nGGG\nGSG\n.GG\n\"\"\"\n\nassert solution(\"\"\"3\nGGG\nGS.\nG.G\n\"\"\") == \"\"\"NONE\n\"\"\"\n\nassert solution(\"\"\"2\nGG\nGG\n\"\"\") == \"\"\"UNIQUE\nGG\nGG\n\"\"\"\n\nassert solution(\"\"\"2\nGG\nGS\n\"\"\") == \"\"\"NONE\n\"\"\"\n\nassert solution(\"\"\"5\nGGG..\nGS..G\n.SGGG", "solution('''2\n.S\nSG''') == '''UNIQUE\n.S\nSG'''\n\nassert solution('''2\n.S\nG.\n''') == '''UNIQUE\n.S\nG.\n'''\n\nassert solution('''2\n..\n..''') == '''UNIQUE\nSG\nGS'''\n\nassert solution('''3\nG..\n.S.\n...''') == '''UNIQUE\nGSS\nSSG\nG.G'''\n\nassert solution('''3\nG..\n.S.\nG..''') == '''UNIQUE\nGSS\nSSG\nG.G'''\n\nassert solution('''2\n..\nG.\n''') == '''UNIQUE\n.S\nG.\n'''\n\nassert solution('''4\nGS..\nS...\nS...\n..G.\n''') == '''UNIQUE\nGSGS\nS.S.\nS.S.\nG.G.\n'''\n\nassert solution('''4\nGG..\nS...\nS...\n..G.\n''') == '''UNIQUE\nGGSS\nS.S.\nS.S.\nG.G.\n'''\n\nassert solution('''3\n", "solution(sample_in) == sample_out\nfrom datetime import datetime\nimport io\nimport random\nimport string\n\nfrom utils import StdoutRedirector\n\n\ndef generate_input(n: int) -> str:\n    def random_string(length: int) -> str:\n        return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(length))\n\n    str_n = str(n)\n    return str_n + '\\n' + '\\n'.join(random_string(n) for _ in range(n)) + '\\n'\n\n\n# Generate test cases and test it by `pytest`\n# def test_generate_input():\ndef create_test_case_input(n: int) -> str:\n    filename = './a_input{}.txt'.format(n)\n    with open(filename, 'w') as f:\n        f.write(generate_input(n))\n    return filename\n\n\ndef create_test_case_output(n: int) -> str:\n    input_filename = create_test_case_input(n)\n    output_filename = './a_output{}.txt'.format(n)\n    with open(output_filename, 'w') as", "solution('''2\nGG\nGG''') == '''UNIQUE\nGG\nGG'''\nassert solution('''3\nSSS\nS.S\nSSS''') == '''UNIQUE\nSSS\nS.S\nSSS'''\nassert solution('''4\nS...\nS...\nS...\nS...''') == '''NONE'''\nassert solution('''4\nGGG.\nGGG.\nG...\nG...''') == '''UNIQUE\nGGG.\nGGG.\nG...\nG...'''\nassert solution('''4\nGGG.\nGGG.\nG.G.\nG...''') == '''UNIQUE\nGGG.\nGGG.\nG.G.\nG...'''\nassert solution('''4\nGG.G\nGG.G\n.G.G\n..GG''') == '''UNIQUE\nGG.G\nGG.G\n.G.G\n..GG'''\nassert solution('''4\nGGG.\nGGG.\nG.G.\nG...''') == '''UNIQUE\nGGG.\nGGG.\nG.G.\nG...'''\nassert solution('''4\nGGG.\nGGG.\nG.G.", "solution('''\n3\n...\n...\n...\n''') == '''\nUNIQUE\nSSS\nSSS\nSSS\n'''\n\nassert solution('''\n3\nSSS\nSSS\nSSS\n''') == '''\nUNIQUE\nSSS\nSSS\nSSS\n'''\n\nassert solution('''\n3\nGGG\nGGG\nGGG\n''') == '''\nUNIQUE\nGGG\nGGG\nGGG\n'''\n\nassert solution('''\n3\nSSS\nSSS\nGGG\n''') == '''\nNONE\n'''\n\nassert solution('''\n3\n.SS\nSS.\n.SS\n''') == '''\nMULTIPLE\n'''\n\nassert solution('''\n3\n.SS\nSS.\nGGG\n''') == '''\nMULTIPLE\n'''\n\nassert solution('''\n3\n..S\n..S\n..S\n''') == '''\nUNIQUE\nSSS\nSSS\nSSS\n'''\n\nassert solution('''\n3\n..G\n..G\n..G\n''') == '''\nUNIQUE\nGGG\nGGG\nGGG\n'''\n\nassert solution('''\n3\nS..", "solution('''\n3\nSSG\n.GG\nGG.\n''') == '''\nUNIQUE\nSSG\nSGG\nGGG\n'''\n\nassert solution('''\n3\nG.G\nGSG\nS.S\n''') == '''\nMULTIPLE\n'''\n\nassert solution('''\n2\nSS\nSS\n''') == '''\nNONE\n'''\n\nassert solution('''\n1\n.\n''') == '''\nUNIQUE\nG\n'''\n\nassert solution('''\n3\nG.G\n.G.\nGG.\n''') == '''\nUNIQUE\nG.G\n.G.\nGGG\n'''", "solution('''\n5\n.G...\n..S..\nG..S.\nS..S.\n...S.\n''') == '''\nUNIQUE\nGGGSG\nSGGSG\nGGSSG\nSSSSG\nGGGSG\n'''\n\nassert solution('''\n5\n.....\n.S.S.\n..G..\n.S.S.\n.....\n''') == '''\nUNIQUE\nGGGSS\nSGGSS\nGGGGS\nSSSGG\nGGGSS\n'''\n\nassert solution('''\n4\nG...\n.S..\n..G.\n...S\n''') == '''\nNONE\n'''\n\nassert solution('''\n5\nG.G..\n.SS..\n.G...\n....S\n.S...\n''') == '''\nMULTIPLE\n'''\n\nassert solution('''\n2\nSS\nSS\n''') == '''\nUNIQUE\nSS\nSS\n'''\n\nassert solution('''\n6\nS...S.\n..S...\n...S..\n.S....\nG..S..\n.S.S.G\n''') == '''\nUNIQUE\nSGGSSG\nGSSGGG\nSSSGSS\nSGGGGS\nGG", "solution(stdin) == stdout", "solution('''\n3\nSS.\n.GG\nGG.\n''') == '''\nUNIQUE\nSGG\nGGS\nGGS\n'''\n\nassert solution('''\n3\nSSS\nGGG\nSSS\n''') == '''\nNONE\n'''\n\nassert solution('''\n3\nGGG\nSS.\n.SS\n''') == '''\nMULTIPLE\n'''", "solution('''\n4\nSSSS\nS...\nS...\nS...\n''') == '''\nUNIQUE\nSSSS\nSGGG\nSGGG\nSGGG\n'''\n\nassert solution('''\n4\nSSSS\nSGGG\nSGGG\nSGGG\n''') == '''\nNONE\n'''\n\nassert solution('''\n3\n.G.\nGG.\n.G.\n''') == '''\nMULTIPLE\n'''\n\nassert solution('''\n2\n.S\nGS\n''') == '''\nUNIQUE\nGG\nSS\n'''", "solution('''\ninput\n''') == '''\noutput\n'''", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\n\n# read the input from stdin\nn = int(input())\nmosaic = []\nfor _ in range(n):\n    mosaic.append(input())\n\n# print the solution's output\nprint(solution(mosaic))", "solution('''\n3\nG.S\n.SG\nGS.\n''') == '''\nUNIQUE\nGGG\nSSS\nGGG\n'''\n\nassert solution('''\n2\nGG\nSS\n''') == '''\nNONE\n'''\n\nassert solution('''\n2\nGG\nGG\n''') == '''\nMULTIPLE\n'''\n\nassert solution('''\n3\nG.S\nG.S\n.S.\n''') == '''\nMULTIPLE\n'''\n\nassert solution('''\n4\n.G..\nG.S.\nS...\n...G\n''') == '''\nUNIQUE\nGGG.\nGGG.\nSS..\n.SSG\n'''\n\nassert solution('''\n4\n....\n....\n....\n....\n''') == '''\nUNIQUE\nGGG.\nGGG.\nGGG.\nGGG.\n'''\n\nassert solution('''\n2000\n.G..G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "solution('''\n4\nSSGS\nS..G\n..GS\nGGGG\n''') == '''\nUNIQUE\nSSGS\nS.GG\nG.GS\nGGGG\n'''\n\nassert solution('''\n4\nSSGS\nS..G\n..GS\nGGGG\n''') == '''\nUNIQUE\nSSGS\nS.GG\nG.GS\nGGGG\n'''\n\nassert solution('''\n4\nSSGS\nS..G\n..GS\nGGGG\n''') == '''\nUNIQUE\nSSGS\nS.GG\nG.GS\nGGGG\n'''\n\n# collect all input lines\nwith open('input.txt', 'r') as f:\n    lines = f.readlines()\n\n# grab first line for n\nn = int(lines[0])\n\n# grab the rest for the string array\nstr_arr = lines[1:]\nassert len(str_arr) == n", "solution('''\n4\nS.S.\n.G..\n...G\n.G..\n''') == '''\nUNIQUE\nS.S.\n.G..\n...G\n.G..\n'''\n\n# check the correctness of solution\nassert solution('''\n4\nS.S.\n.G..\n...G\n.G..\n''') == '''\nUNIQUE\nS.S.\n.G..\n...G\n.G..\n'''\n\n# check the correctness of solution\nassert solution('''\n4\nS.S.\n.G..\n...G\n.G..\n''') == '''\nUNIQUE\nS.S.\n.G..\n...G\n.G..\n'''\n\n# check the correctness of solution\nassert solution('''\n4\nS.S.\n.G..\n...G\n.G..\n''') == '''\nUNIQUE\nS.S.\n.G..\n...G\n.G..\n'''\n\n# check the correctness of solution\nassert solution('''\n4\nS.S.\n.G..\n...G\n.G..\n''') == '''\nUNIQUE\nS.S.\n.G..\n...G\n.G..\n'''\n\n# stress testing", "solution(\"\"\"\n3\n.SG\nGS.\n.S.\n\"\"\") == \"'''\nOmkar is creating a mosaic using colored square tiles, which he places in an n \u00d7 n grid. When the mosaic is complete, each cell in the grid will have either a glaucous or sinoper tile. However, currently he has only placed tiles in some cells. \n\nA completed mosaic will be a mastapeece if and only if each tile is adjacent to exactly 2 tiles of the same color (2 tiles are adjacent if they share a side.) Omkar wants to fill the rest of the tiles so that the mosaic becomes a mastapeece. Now he is wondering, is the way to do this unique, and if it is, what is it?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2000).\n\nThen follow n lines with n characters in each line. The i-th character in the j-th line corresponds to the cell in row i and column j of the grid, and will be S if Omkar has placed a sinoper tile in this cell, G if Omkar has placed a glaucous tile, . if it's empty. \n\nOutput\n\nOn the first line, print UNIQUE if there is a unique way to get a mastapeece, NONE if Omkar cannot create any, and MULTIPLE if", "solution('''\n1\n.\n''') == '''\nUNIQUE\nS\n'''\n\nassert solution('''\n1\nS\n''') == '''\nNONE\n'''\n\nassert solution('''\n2\n..\n..\n''') == '''\nUNIQUE\nGS\nSG\n'''\n\nassert solution('''\n3\n...\n...\n...\n''') == '''\nUNIQUE\nSGS\nSGS\nSGS\n'''\n\nassert solution('''\n3\nS.G\n.SG\nG.S\n''') == '''\nUNIQUE\nSGS\nSGS\nSGS\n'''\n\nassert solution('''\n3\nS.G\n.S.\nG.S\n''') == '''\nMULTIPLE\n'''\n\nassert solution('''\n4\n.GS.\nG.G.\n.SG.\n...S\n''') == '''\nUNIQUE\nSGSS\nGSGS\nSGSS\nSSSG\n'''\n\nassert solution('''\n4\n...S\n.G.S\nSG.G\nSSG.\n''') == '''\nUNIQUE\nSSSG\nSGSS\nSGSS\nSSSG\n'''\n\nassert solution('''\n4\n", "'UNIQUE\\nSGSG\\nSGSG\\nSGSG\\nSGSG' == solution('''\n4\n..GS\n..GS\n..GS\n..GS\n''')\n\nassert 'UNIQUE\\nSGSG\\nSGSG\\nGSSG\\nGSSG' == solution('''\n4\n..GS\n..GS\nG..S\nG..S\n''')\n\nassert 'NONE' == solution('''\n2\nSS\nSS\n''')\n\nassert 'MULTIPLE' == solution('''\n1\n.\n''')\nassert 'UNIQUE\\nSGGG\\nSSSG\\nSSSG\\nSSSG' == solution('''\n4\n..GG\n.SSS\n.SSS\n.SSS\n''')\n\nassert 'UNIQUE\\nSSSS\\nSSSS\\nSSSS\\nGGSG' == solution('''\n4\n...S\n...S\n...S\nGGGS\n''')\n\nassert 'UNIQUE\\nSSSS\\nSSSS\\nSSGG\\nSSGG' == solution('''\n4\n...S\n...S\n..GG\n..GG\n''')\n\nassert 'UNIQUE\\nSSSS\\nSSSS\\nSS", "solution(stdin) == stdout", "solution(\"\"\"\n2\nSS\nSS\n\"\"\") == \"\"\"\nUNIQUE\nSS\nSS\n\"\"\"\nassert solution(\"\"\"\n2\nSG\nGS\n\"\"\") == \"\"\"\nUNIQUE\nGS\nSG\n\"\"\"\nassert solution(\"\"\"\n3\nS..\n.S.\n..S\n\"\"\") == \"\"\"\nUNIQUE\nS.S\nGSG\nS.S\n\"\"\"\nassert solution(\"\"\"\n2\n.S\n..\n\"\"\") == \"\"\"\nNONE\n\"\"\"\nassert solution(\"\"\"\n3\n.S.\nS..\nS..\n\"\"\") == \"\"\"\nMULTIPLE\n\"\"\"\nassert solution(\"\"\"\n3\n.SS\nSS.\n.S.\n\"\"\") == \"\"\"\nMULTIPLE\n\"\"\"\nassert solution(\"\"\"\n3\n.SS\n.SS\nSS.\n\"\"\") == \"\"\"\nUNIQUE\n.SS\nSS.\n.SS\n\"\"\"\nassert solution(\"\"\"\n3\nSS.\nSS.\n.SS\n\"\"\") == \"\"\"\nUNIQUE\nSS.\n.SS\nSS.\n\"\"\"\nassert solution(\"\"\"\n3\n.S.\n.S.\n.S.\n\"\"\") == \"\"\"\nUNIQUE\n.S.\nGSG\n.S.\n\"\"\"\nassert solution(\"\"\"\n3\nS.S\nS.S\nS.", "solution(stdin='2\\nSS\\n.G') == 'UNIQUE\\nSS\\nGG', 'solution is incorrect'\nassert solution(stdin='3\\n.GG\\nG.G\\nGG.') == 'NONE', 'solution is incorrect'\nassert solution(stdin='3\\n.GG\\nG.G\\n.G.') == 'MULTIPLE', 'solution is incorrect'\nassert solution(stdin='2\\nSG\\nGS') == 'UNIQUE\\nSG\\nSG', 'solution is incorrect'\nassert solution(stdin='4\\nS..G\\nG..S\\nS..G\\nG..S') == 'UNIQUE\\nSGGS\\nGSGS\\nSGGS\\nGSGS', 'solution is incorrect'\n\n# submit solution\nprint(solution(stdin=input()))", "solution(\"\"\"\n3\n.SG\nGS.\nG..\n\"\"\") == \"\"\"\nUNIQUE\n.GS\nGS.\nG.S\n\"\"\"\n\nassert solution(\"\"\"\n3\n..G\n.S.\n.G.\n\"\"\") == \"\"\"\nMULTIPLE\n\"\"\"\n\nassert solution(\"\"\"\n4\n.G..\nSGS.\nG..S\n..SG\n\"\"\") == \"\"\"\nNONE\n\"\"\"\n\nassert solution(\"\"\"\n3\n.G.\nGS.\n.G.\n\"\"\") == \"\"\"\nUNIQUE\n.G.\nGS.\n.G.\n\"\"\"\n\n# check the performance of solution\nimport timeit\n\nif __name__ == \"__main__\":\n    print(timeit.timeit(\"solution('''\\n2\\n..\\n..\\n''')\", setup=\"from __main__ import solution\", number=1))\n\n'''\nSolution\n'''\n# the solution that I came up with after the contest. \ndef solution(stdin: str) -> str:\n    # stdin = stdin.strip() # you don't need this line if you use the last split\n    stdin = stdin.splitlines()[1:] # since the first line is useless in this question\n\n    n = len(stdin)\n\n   ", "solution('''\n3\n.GS\nGS.\n.SG\n''') == '''\nUNIQUE\nGSG\nGSG\nGSG\n'''\nassert solution('''\n1\nS\n''') == '''\nUNIQUE\nS\n'''\nassert solution('''\n1\nG\n''') == '''\nUNIQUE\nG\n'''\nassert solution('''\n3\n.SG\nGS.\n.SG\n''') == '''\nNONE\n'''\nassert solution('''\n3\n.GS\nG.S\n..S\n''') == '''\nUNIQUE\nSGS\nSGS\nSGS\n'''\nassert solution('''\n4\nS.G.\nSGGS\nS..S\nSGGS\n''') == '''\nMULTIPLE\n'''\nassert solution('''\n3\n.GS\nG.S\n..S\n''') == '''\nUNIQUE\nSGS\nSGS\nSGS\n'''\nassert solution('''\n2\nSS\nSS\n''') == '''\nUNIQUE\nSS\nSS\n'''\nassert solution('''\n2\nGG\nGG\n''') == '''\nUNIQUE\nGG\nGG\n'''\nassert solution('''\n", "solution('''3\nS..\n..G\n...''') == '''UNIQUE\nSGG\nSGG\nSGG'''\n\nassert solution('''3\nS..\n.GG\n...''') == '''NONE'''\n\nassert solution('''3\n.GG\n.GG\n...''') == '''MULTIPLE'''\n\nassert solution('''3\n.GG\n.GG\n.GG''') == '''UNIQUE\nSGG\nSGG\nSGG'''\n\nassert solution('''2\nGG\nGG''') == '''UNIQUE\nSGG\nSGG'''\n\n# test the speed of solution\nfrom timeit import timeit\nprint(timeit(lambda: solution('''3\nS..\n..G\n...'''), number=1))\n\n# test the speed of builtin solution\nfrom timeit import timeit\nprint(timeit(lambda: eval('''3\nS..\n..G\n...'''.strip()), number=1))", "solution('''\n3\nS.G\n.S.\nG..\n''') == '''\nUNIQUE\nSGG\nSSG\nGGS\n'''\nassert solution('''\n4\nSS..\nSS..\n....\n....\n''') == '''\nUNIQUE\nSSGG\nSSGG\nGGSS\nGGSS\n'''\nassert solution('''\n3\n...\n...\n...\n''') == '''\nMULTIPLE\n'''\nassert solution('''\n6\nG...G.\n.G...G\n..G.G.\nGG...G\n..G...\n.G....\n''') == '''\nNONE\n'''\n\n# stress testing the solution function\n# while True:\n#     test_input = ''.join(random.choice(['...', 'G..', '..G', 'GG.', 'G.G', '..S', 'S..', 'S.S', 'SS.', 'SSS']) for i in range(100))\n#     test_input = str(random.randint(1, 1000)) + '\\n' + test_input\n#     print(test_input)\n#     print(solution(test_input))", "solution(\"\"\"3\n...\n...\n...\"\"\") == \"\"\"UNIQUE\nGGG\nSSS\nGGG\"\"\"\nassert solution(\"\"\"3\nG.G\n...\n.G.\"\"\") == \"\"\"NONE\"\"\"\nassert solution(\"\"\"2\nG.\n..\"\"\") == \"\"\"MULTIPLE\"\"\"", "solution('''4\nSSSS\nGGGG\nS...\nG...''') == '''UNIQUE\nSSSS\nGGGG\nSGGG\nGGGG'''\n\nassert solution('''4\n...S\n...G\nSSSS\nGGGG''') == '''UNIQUE\nGGGG\nSSSS\nSSSS\nSSSS'''\n\nassert solution('''2\nSS\nSS''') == '''NONE'''\n\nassert solution('''2\nS.\n.G''') == '''MULTIPLE'''\n\nassert solution('''4\nS.GG\nSSSS\nS...\nS...''') == '''UNIQUE\nS.GG\nSSSS\nSGGG\nSGGG'''\n\nassert solution('''4\n....\n....\n....\n....''') == '''UNIQUE\nGGGG\nSSSS\nGGGG\nSSSS'''\n\nassert solution('''1\n.\n''') == '''UNIQUE\nG'''\n\nassert solution('''2\n.S\nSG''') == '''NONE'''\n\nassert solution('''2\n..\n..''') == '''NONE'''\n\nassert solution('''5\n....G\n....G\n.....\n..S..\nG....''') == '", "solution(input()) == output()\n\nprint(\"Test passed\")"], "finish_reason": ["stop", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "stop"], "sum_logprob": [-47.09264237516, -166.21432510546504, -79.88189428866504, -40.05320170108999, -66.56359428977002, -74.00078358175703, -59.93093351247, -69.12442845726498, -7.113142154999999, -22.485668331398497, -32.29708139675001, -44.40858905302001, -69.94896174599, -88.02816119753895, -170.4680951608551, -103.07314404296706, -54.696986087839974, -91.37235469767701, -98.94678716413799, -42.07132592535999, -107.75454851632493, -62.77024481076, -129.24507369985193, -95.733387115249, -167.49245574685787, -66.94929527127628, -54.35038583407603, -55.932286437285015, -146.89650673120303, -5.686034552000001, -37.523474073870005, -46.43758888370999, -9.567284807699997, -39.37466544343, -91.2036936382079, -96.85974903747996, -37.91959669625599, -25.198505142116993, -84.55632701985502, -85.81668821673495, -5.690495046000001, -93.170103648316, -70.677342386367, -200.56278599442308, -86.60852879324302, -79.84639824826505, -121.25447842262001, -28.885342231310005, -123.63899969026191, -20.424708489999997], "mean_logprob": [-0.4957120250016842, -0.55404775035155, -0.2662729809622167, -0.6905724431222414, -0.2856806621878541, -0.2913416676447126, -0.4342821269019565, -0.23041476152421667, -0.5080815825, -0.07495222777132833, -0.46138687709642856, -0.43968900052495047, -0.4824066327309655, -0.29342720399179667, -0.5682269838695166, -0.34357714680989, -0.4081864633420896, -0.30457451565892335, -0.38651088735991407, -0.3756368386192857, -0.4293009901048805, -0.6897829100083517, -0.43081691233284, -0.31911129038416336, -0.55830818582286, -0.223164317570921, -0.18116795278025333, -0.3349238708819461, -0.4912926646528528, -0.6317816168888889, -0.3752347407387, -0.3137674924575, -0.53151582265, -0.34238839516026087, -0.30401231212736, -0.45051046063944183, -0.12639865565418668, -0.08399501714039, -0.28185442339951666, -0.28605562738911666, -0.6322772273333334, -0.3105670121610533, -0.33496370799226066, -0.66854261998141, -0.28869509597747667, -0.335489068270021, -0.4269523888120422, -0.4126477461615714, -0.41350836016810033, -1.3616472326666667]}
{"prompt": "'''\nShe does her utmost to flawlessly carry out a person's last rites and preserve the world's balance of yin and yang.\n\nHu Tao, being the little prankster she is, has tried to scare you with this graph problem! You are given a connected undirected graph of n nodes with m edges. You also have q queries. Each query consists of two nodes a and b.\n\nInitially, all edges in the graph have a weight of 0. For each query, you must choose a simple path starting from a and ending at b. Then you add 1 to every edge along this path. Determine if it's possible, after processing all q queries, for all edges in this graph to have an even weight. If so, output the choice of paths for each query. \n\nIf it is not possible, determine the smallest number of extra queries you could add to make it possible. It can be shown that this number will not exceed 10^{18} under the given constraints.\n\nA simple path is defined as any path that does not visit a node more than once.\n\nAn edge is said to have an even weight if its value is divisible by 2.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 3 \u22c5 10^5, n-1 \u2264 m \u2264 min{\\left((n(n-1))/(2), 3 \u22c5 10^5\\right)}).\n\nEach of the next m lines contains two integers x and y (1 \u2264 x, y \u2264 n, x\u2260 y) indicating an undirected edge between node x and y. The input will not contain self-loops or duplicate edges, and the provided graph will be connected.\n\nThe next line contains a single integer q (1 \u2264 q \u2264 3 \u22c5 10^5).\n\nEach of the next q lines contains two integers a and b (1 \u2264 a, b \u2264 n, a \u2260 b), the description of each query.\n\nIt is guaranteed that nq \u2264 3 \u22c5 10^5.\n\nOutput\n\nIf it is possible to force all edge weights to be even, print \"YES\" on the first line, followed by 2q lines indicating the choice of path for each query in the same order the queries are given. For each query, the first line should contain a single integer x: the number of nodes in the chosen path. The next line should then contain x spaced separated integers p_i indicating the path you take (p_1 = a, p_x = b and all numbers should fall between 1 and n). This path cannot contain duplicate nodes and must be a valid simple path in the graph.\n\nIf it is impossible to force all edge weights to be even, print \"NO\" on the first line and the minimum number of added queries on the second line.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3 2\n1 2\n2 3\n3\n1 2\n2 3\n1 3\n''') == '''\nYES\n2\n1 2\n2\n2 3\n3\n1 2 3\n'''\n\nassert solution('''\n4 3\n1 2\n2 3\n3 4\n2\n2 3\n4 3\n''') == '''\nNO\n2\n'''\n\n# get the input\nstdin = sys.stdin.read()\n\n# solve and print the result\nprint(solution(stdin))", "solution(\"\"\"\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n3\n1 2\n3 4\n5 1\n\"\"\") == \"\"\"\nYES\n5\n1 2\n3\n3 4\n5\n5 1\n\"\"\"\n\nassert solution(\"\"\"\n6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n3\n1 2\n3 4\n5 6\n\"\"\") == \"\"\"\nNO\n5\n\"\"\"", "solution(\"3 2\\n1 2\\n2 3\\n4\\n1 2\\n2 3\\n3 1\\n1 3\") == \"YES\\n2\\n1 2\\n3\\n2 3 1\\n3\\n1 3 2\\n\"\n\nassert solution(\"3 2\\n1 2\\n2 3\\n2\\n1 2\\n2 3\") == \"NO\\n1\\n\"\n\nassert solution(\"3 2\\n1 2\\n2 3\\n3\\n1 2\\n2 3\\n3 1\") == \"YES\\n2\\n1 2\\n3\\n2 3 1\\n\"\n\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"YES\\n3\\n1 2 3\\n3\\n2 3 4\\n3\\n3 4 1\\n3\\n4 1 2\\n\"\n\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4\\n1 2\\n2 3\\n3 4\") == \"NO\\n1\\n\"\n\nassert solution(\"10 8\\n1 4\\n2 5\\n3 6\\n4 7\\n5", "solution('''\n1 2\n1\n1 2\n''') == '''\nYES\n2 1 2\n'''\n\n# test case 1\nassert solution('''\n10 13\n1 2\n1 5\n2 3\n2 4\n2 5\n3 4\n4 5\n4 6\n5 6\n6 7\n6 8\n7 8\n8 9\n4\n1 5\n4 5\n1 10\n6 8\n''') == '''\nYES\n2 1 5\n2 4 5\n3 1 2 4 6\n2 6 8\n'''\n\n# test case 2\nassert solution('''\n10 9\n1 2\n1 5\n2 3\n2 4\n2 5\n3 4\n4 5\n4 6\n5 6\n4\n1 5\n4 5\n1 10\n6 8\n''') == '''\nNO\n2\n'''\n\n# test case 3\nassert solution('''\n11 11\n1 2\n1 3\n1 5\n2 4\n2 5\n3 4\n3 6\n4 5\n4 6\n5 6\n6 7\n3\n3 1\n2 3\n7 4\n''') == '''\nYES\n2 3 1\n2 2 3\n2 6 7\n'''\n\n# test case 4\nassert solution('''\n20 19\n1 2\n1 3\n1 5\n", "solution(\"\"\"6 7\n1 2\n2 3\n3 4\n4 5\n5 6\n1 4\n1 5\n6\n1 2\n2 5\n2 4\n5 3\n2 3\n1 3\n1 6\"\"\") == \"\"\"YES\n5\n1 2 3 4 5\n5\n1 2 4 5 3\n2\n1 2 4\n5\n1 5 4 2 3\n3\n1 2 3\n3\n1 2 3\"\"\", \"Case 1\"\n\nassert solution(\"\"\"6 7\n1 2\n2 3\n3 4\n4 5\n5 6\n1 4\n1 5\n6\n1 2\n2 5\n2 4\n5 3\n2 3\n1 3\n2 1\"\"\") == \"\"\"NO\n1\"\"\", \"Case 2\"\n\nassert solution(\"\"\"5 4\n1 2\n1 3\n1 4\n1 5\n6\n1 2\n2 1\n2 3\n2 4\n2 5\n5 1\"\"\") == \"\"\"YES\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\"\"\", \"Case 3\"\n\n# auto-generate test cases\nimport string\nimport random\nimport itertools\nall_words = list(string.ascii_lowercase)\nall_words.extend(list(string.ascii_", "solution(input) == output, '<message>'\n\n# print the solution to stdout\nprint(solution(input))", "solution(test_input) == test_output\n\n# get the input\nwith open('input.txt', 'r') as file:\n    stdin = file.read()\n\n# print the output\nprint(solution(stdin))", "solution('''\n3 2\n1 2\n2 3\n3\n1 2\n1 3\n3 1\n''') == '''\nYES\n3\n1 2 3\n3\n1 3 2\n4\n3 1 2 3\n'''\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n4 1\n4\n1 2\n1 3\n1 4\n2 3\n''') == '''\nNO\n1\n'''\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\nYES\n3\n1 2 3\n3\n2 3 4\n3\n3 4 5\n3\n4 5 1\n3\n5 1 2\n'''\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n5\n1 2\n2 3\n3 4\n4 5\n2 1\n''') == '''\nYES\n3\n1 2 3\n3\n2 3 4\n3\n3 4 5\n3\n4 5 1\n2\n2 1\n'''\nassert solution('''\n6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n6\n1 2\n2 3", "solution('''\\\n4 3\n1 2\n2 3\n3 4\n3\n1 2\n3 4\n2 4''') == '''\\\nYES\n2\n1 3 4\n2\n2 3 4\n2\n2 3 4'''\n\nassert solution('''\\\n5 4\n1 2\n2 3\n3 4\n4 5\n3\n1 2\n3 4\n4 5''') == '''\\\nNO\n1'''\n\nassert solution('''\\\n5 5\n1 2\n2 3\n3 4\n4 5\n2 5\n3\n1 2\n3 4\n4 5''') == '''\\\nYES\n2\n1 2 5\n2\n3 4 5\n3\n2 3 4 5'''\n\n# print(solution(sys.stdin.read()))", "solution(input()) == output()", "solution(open('tests/02_8_graph_problem.in')) == open('tests/02_8_graph_problem.out').read()", "solution(\"\"\"\n4 5\n1 2\n2 3\n3 4\n1 4\n1 3\n3\n1 3\n1 4\n2 4\n\"\"\") == \"\"\"\nYES\n4\n1 2 3\n4\n1 4\n4\n1 3 4\n6\n\"\"\", \"Test 1\"\n\nassert solution(\"\"\"\n4 5\n1 2\n2 3\n3 4\n1 4\n1 3\n2\n1 3\n2 4\n\"\"\") == \"\"\"\nNO\n3\n\"\"\", \"Test 2\"\n\nassert solution(\"\"\"\n3 2\n1 2\n2 3\n1\n1 2\n\"\"\") == \"\"\"\nYES\n2\n1 2\n\"\"\", \"Test 3\"\n\nassert solution(\"\"\"\n3 2\n1 2\n2 3\n1\n1 2\n\"\"\") == \"\"\"\nYES\n2\n1 2\n\"\"\", \"Test 4\"\n\nassert solution(\"\"\"\n5 7\n1 2\n2 3\n3 4\n4 5\n2 5\n1 3\n1 4\n6\n1 2\n1 3\n1 4\n1 5\n2 5\n3 5\n\"\"\") == \"\"\"\nYES\n2\n1 2\n2\n1 3\n3\n1 4\n3\n1 5\n3\n2 5\n3\n3 5\n\"\"\", \"Test 5\"\n\nassert solution(\"\"\"\n5 7\n1 2\n2 3", "solution(open('tests/000.in').read()) == open('tests/000.out').read()\n\n# stress testing\nwhile True:\n    pass", "solution('''\n3 2\n1 2\n2 3\n3\n1 2\n2 3\n1 3\n''') == '''\nYES\n2\n1 2\n2 3\n2\n1 2 3\n'''\nassert solution('''\n4 3\n1 2\n2 3\n3 4\n4\n1 2\n2 3\n1 3\n1 4\n''') == '''\nNO\n4\n'''\nassert solution('''\n5 3\n1 2\n2 3\n3 4\n4\n1 2\n2 3\n1 3\n2 4\n''') == '''\nYES\n2\n1 2\n2 4\n'''\nassert solution('''\n10 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n2 6\n3 7\n4 8\n10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 10\n1 10\n''') == '''\nYES\n2\n1 10\n2\n1 6\n2\n1 4\n2\n1 2\n'''\nassert solution('''\n10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10\n1 2\n1 3", "solution(\"\"\"\n    2 1\n    1 2\n    3\n    1 2\n    2 1\n    1 2\n\"\"\") == \"\"\"\n    YES\n    2\n    1 2\n    2\n    2 1\n    2\n    1 2\n\"\"\", \"Example\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    3 2\n    1 2\n    2 3\n    3\n    1 2\n    2 3\n    1 3\n\"\"\") == \"\"\"\n    YES\n    2\n    1 2\n    2\n    2 3\n    3\n    1 2 3\n\"\"\", \"Example\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    3 2\n    1 2\n    2 3\n    3\n    1 2\n    2 3\n    1 3\n\"\"\") == \"\"\"\n    YES\n    2\n    1 2\n    2\n    2 3\n    3\n    1 2 3\n\"\"\", \"Example\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    3 2\n    1 2\n    2 3\n    2\n    1 2\n    2 3\n\"\"\") == \"\"\"\n    NO\n    4\n\"\"\", \"Example\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    5 5\n    1 2\n    1 3\n    1 4\n    1 5\n", "solution(\"\"\"5 6\n1 2\n2 3\n2 4\n2 5\n3 4\n4 5\n2\n2 3\n2 4\"\"\") == \"\"\"YES\n3 2 2 3\n3 2 2 4\"\"\"\nassert solution(\"\"\"4 4\n1 2\n2 3\n3 4\n4 1\n2\n1 2\n2 3\"\"\") == \"\"\"NO\n1\"\"\"\nassert solution(\"\"\"3 2\n1 2\n2 3\n2\n1 2\n2 3\"\"\") == \"\"\"YES\n2 1 2\n2 1 2\"\"\"\nassert solution(\"\"\"2 1\n1 2\n1\n1 2\"\"\") == \"\"\"YES\n2 1 2\"\"\"\nassert solution(\"\"\"1 1\n1 1\n1\n1 1\"\"\") == \"\"\"NO\n1\"\"\"\n\n# submit solution to codeforces\nimport sys\nfrom subprocess import Popen, PIPE\n\nfilename = \"binary.in\"\nwith open(filename, \"w\") as f:\n    f.write(stdin)\n\n# compile code\nprocess = Popen([\"javac\", \"Main.java\"], stdout=PIPE, stderr=PIPE)\nstdout, stderr = process.communicate()\n\n# timeout on test case 10\nif b\"error\" in stderr or b\"Exception\" in stderr:\n    print(", "solution('''\n4 4\n1 2\n2 3\n3 4\n4 1\n4\n1 2\n2 3\n3 4\n4 1\n''') == '''\nYES\n2\n1 2\n2\n2 3\n2\n3 4\n2\n4 1\n'''\nassert solution('''\n5 7\n1 2\n2 3\n3 4\n4 5\n1 5\n1 3\n1 4\n5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\nNO\n6\n'''\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n5\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '''\nYES\n3\n1 3 4\n3\n2 3 4\n3\n2 5 4\n3\n3 4 5\n3\n4 5 3\n'''\nassert solution('''\n3 2\n1 2\n2 3\n4\n1 2\n2 3\n1 3\n3 1\n''') == '''\nNO\n4\n'''\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n4 1\n4\n1 2\n1 3\n1 4\n1 1\n''') == '''\nNO\n8\n'''\nassert solution(", "solution('''\n3 3\n1 2\n2 3\n1 3\n3\n1 2\n1 3\n2 3\n''') == '''\nYES\n2\n1 2\n2\n1 3\n2\n2 3\n'''\n\n# check if solution handles the extreme cases\nassert solution('''\n1 0\n0\n''') == '''\nNO\n1\n'''\n\n# check if solution works on a bigger input\nassert solution('''\n6 8\n1 2\n1 3\n2 3\n2 4\n3 4\n3 5\n3 6\n4 6\n5\n2 3\n3 4\n5 1\n1 4\n1 5\n6\n''') == '''\nYES\n3\n2 3 4\n2\n3 4\n4\n5 1 4\n4\n1 4 5\n4\n1 4 3\n4\n2 3 4 6\n'''\n\n# check if solution works on a bigger input\nassert solution('''\n100 100\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28", "solution('''\n\n''') == '''\n\n'''\nassert solution('''\n\n''') == '''\n\n'''\nassert solution('''\n\n''') == '''\n\n'''", "solution('''\n4 5\n1 2\n2 3\n3 4\n1 4\n4 1\n3\n1 2\n2 3\n3 4\n''') == '''\nYES\n3\n1 2 3\n2\n2 3\n3\n3 4\n'''\n\nassert solution('''\n3 2\n1 2\n2 3\n2\n1 2\n2 3\n''') == '''\nNO\n1\n'''\n\nassert solution('''\n2 1\n1 2\n2\n1 2\n2 1\n''') == '''\nYES\n3\n1 2 1\n3\n2 1 2\n'''", "solution('''\n3 2\n1 2\n2 3\n3\n1 2\n2 3\n1 3\n''') == '''\nYES\n2 1 2\n2 2 3\n2 1 3\n'''\n\nassert solution('''\n4 3\n1 2\n2 3\n3 4\n4\n1 4\n4 1\n1 2\n2 3\n''') == '''\nNO\n1\n'''\n\nassert solution('''\n3 3\n1 2\n2 3\n1 3\n2\n1 2\n2 3\n''') == '''\nYES\n2 1 2\n2 2 3\n'''\n\nassert solution('''\n6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n2\n1 3\n2 4\n''') == '''\nYES\n2 1 2 3\n2 2 3 4\n'''\n\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n1 4\n1\n1 2\n''') == '''\nNO\n0\n'''\n\n# stress testing\nimport random\nn, m = 10**5, random.randint(2, 10**5)\nedges = [random.sample(range(1, n + 1), 2) for _ in range(m)]\nqueries = [random.sample(range(1,", "solution(\"\"\"\n4 3\n1 2\n2 3\n3 4\n2\n2 4\n3 4\n\"\"\") == \"\"\"\nYES\n3\n2 3 4\n3\n3 4\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n3 3\n1 2\n2 3\n1 3\n1\n1 3\n\"\"\") == \"\"\"\nNO\n1\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"\n4 3\n1 2\n2 3\n3 4\n2\n2 4\n3 4\n\"\"\") == \"\"\"\nYES\n3\n2 3 4\n3\n3 4\n\"\"\", \"Example 1\"\n\n# tests\nassert solution(\"\"\"\n3 3\n1 2\n2 3\n1 3\n2\n1 3\n2 3\n\"\"\") == \"\"\"\nYES\n2\n1 3\n2\n2 3\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"\n8 11\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n2 3\n2 4\n3 4\n5 6\n3\n3 4\n2 3\n3 4\n\"\"\") == \"\"\"\nYES\n3\n3 4\n3\n2 3\n3\n3 4\n\"\"\", \"Example 3\"\n\nassert solution(\"\"\"\n4 4\n1 2\n2 3\n3 4\n4 1\n2\n1 2\n", "solution('''\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n4 1\n6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '''\nYES\n2 1 2\n2 1 3\n2 1 4\n2 2 3\n2 2 4\n2 3 4\n'''\n\nassert solution('''\n5 7\n1 2\n1 3\n2 3\n3 4\n3 5\n5 4\n4 2\n6\n1 2\n2 3\n3 4\n1 4\n5 3\n4 2\n''') == '''\nNO\n1\n'''\n\nassert solution('''\n5 7\n1 2\n1 3\n2 3\n3 4\n3 5\n5 4\n4 2\n6\n1 2\n2 3\n3 4\n1 4\n4 3\n4 2\n''') == '''\nYES\n2 1 2\n2 2 3\n2 3 4\n2 1 4\n2 4 3\n2 4 2\n'''\n\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n7\n1 2\n2 3\n3 1\n1 3\n1 2\n2 3\n3 1\n''') == '''\nYES\n2 1 2\n2 2 3\n2 3 1\n2 1 3\n2 1 2", "'YES' == solution('\\n'.join([\n    '3 2',\n    '1 2',\n    '2 3',\n    '1',\n    '1 3',\n]))\n\nassert 'NO' == solution('\\n'.join([\n    '3 2',\n    '1 2',\n    '2 3',\n    '2',\n    '1 2',\n    '2 3',\n]))\n\nassert 'YES' == solution('\\n'.join([\n    '3 2',\n    '1 2',\n    '2 3',\n    '4',\n    '1 2',\n    '2 3',\n    '1 3',\n    '2 3',\n]))\n\nassert 'YES' == solution('\\n'.join([\n    '4 3',\n    '1 2',\n    '2 3',\n    '3 4',\n    '4',\n    '1 4',\n]))\n\nassert 'YES' == solution('\\n'.join([\n    '4 3',\n    '1 2',\n    '2 3',\n    '3 4',\n    '1',\n    '1 4',\n]))\n\nassert 'YES' == solution('\\n'.join([\n    '4 3',\n    '1 2',\n    '2 3',\n    '3 4", "solution('''\n4 4\n1 2\n2 3\n3 4\n4 1\n2\n2 3\n1 4\n''') == '''\nYES\n3\n2 3 4\n3\n1 2 3\n'''\n\nassert solution('''\n3 2\n1 2\n2 3\n2\n2 3\n3 1\n''') == '''\nNO\n2\n'''\n\nif __name__ == '__main__':\n    inp = input()\n    print(solution(inp))", "solution(r'''\n4 3\n1 2\n2 3\n3 4\n3\n1 4\n1 2\n1 3\n''') == r'''\nYES\n4 1 2 3 4\n3 1 2 3\n3 1 2 4\n1\n'''\nassert solution(r'''\n4 4\n1 2\n2 3\n3 4\n1 4\n2\n1 2\n1 3\n''') == r'''\nNO\n3\n'''\nassert solution(r'''\n3 2\n1 2\n2 3\n5\n1 2\n1 3\n2 3\n1 2\n1 3\n''') == r'''\nYES\n2 1 2\n2 1 3\n2 2 3\n3 1 2 3\n3 1 2 3\n'''\nassert solution(r'''\n4 2\n1 2\n2 3\n4\n1 3\n1 4\n2 3\n2 4\n''') == r'''\nNO\n2\n'''\nassert solution(r'''\n3 2\n1 2\n2 3\n4\n1 2\n1 3\n2 3\n2 2\n''') == r'''\nYES\n2 1 2\n2 1 3\n2 2 3\n3 2 2 3\n'''\nassert solution(r'''\n2 1\n1 2\n4\n1 2\n1 2\n1 2\n1 2\n", "solution(\"input_1.txt\") == \"output_1.txt\"\nassert solution(\"input_2.txt\") == \"output_2.txt\"\nassert solution(\"input_3.txt\") == \"output_3.txt\"\nassert solution(\"input_4.txt\") == \"output_4.txt\"\nassert solution(\"input_5.txt\") == \"output_5.txt\"\nassert solution(\"input_6.txt\") == \"output_6.txt\"\nassert solution(\"input_7.txt\") == \"output_7.txt\"\nassert solution(\"input_8.txt\") == \"output_8.txt\"\nassert solution(\"input_9.txt\") == \"output_9.txt\"\nassert solution(\"input_10.txt\") == \"output_10.txt\"\nassert solution(\"input_11.txt\") == \"output_11.txt\"\nassert solution(\"input_12.txt\") == \"output_12.txt\"\nassert solution(\"input_13.txt\") == \"output_13.txt\"\nassert solution(\"input_14.txt\") == \"output_14.txt\"\nassert solution(\"input_15.txt\") == \"output_15.txt\"\nassert solution(\"input_16.txt\") == \"output_16.txt\"\nassert solution(\"input_17.txt\") == \"output_", "solution(\"\"\"\n4 4\n1 2\n2 3\n3 4\n4 1\n3\n1 2\n3 4\n2 3\n\"\"\") == \"\"\"\nYES\n2\n2 1 3\n2\n3 4\n2\n2 3\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n4 4\n1 2\n2 3\n3 4\n4 1\n2\n1 2\n3 4\n\"\"\") == \"\"\"\nNO\n1\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"\n4 4\n1 2\n2 3\n3 4\n4 1\n2\n1 2\n1 2\n\"\"\") == \"\"\"\nYES\n2\n2 1 2\n2\n2 1 2\n\"\"\", \"Example 3\"\n\nassert solution(\"\"\"\n6 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n2 6\n2\n2 3\n3 4\n\"\"\") == \"\"\"\nYES\n3\n3 2 3 4\n3\n3 3 4 5\n\"\"\", \"Example 4\"\n\nassert solution(\"\"\"\n7 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n1\n1 2\n\"\"\") == \"\"\"\nYES\n2\n2 1 2\n\"\"\", \"Example 5\"\n\nassert solution(\"\"\"\n4 4\n1 2\n2 3\n3 4\n4", "solution(\"\"\"\n5 6\n1 2\n2 3\n3 4\n3 5\n1 4\n1 5\n3\n3 5\n2 3\n2 4\n\"\"\") == \"\"\"\nYES\n2 3 5\n2 3 4\n2 3 5\n\"\"\", \"example 1 failed\"", "solution(r'''\n3 2\n1 2\n2 3\n2\n1 2\n2 3\n''') == r'''\nYES\n2\n1 2\n2\n1 3\n'''\n\nassert solution(r'''\n4 4\n1 2\n2 3\n3 4\n4 1\n2\n2 3\n3 4\n''') == r'''\nNO\n1\n'''\n\nassert solution(r'''\n2 1\n1 2\n4\n1 2\n1 2\n1 2\n1 2\n''') == r'''\nYES\n2\n1 2\n2\n1 2\n2\n1 2\n2\n1 2\n'''", "solution(stdin=\"\"\"\n5 5\n1 2\n2 3\n3 4\n4 5\n1 5\n3\n2 3\n4 5\n1 5\n\"\"\") == '''\nYES\n5\n2 3 4 5\n3\n4 5\n3\n1 2 3\n'''\n\n# test solution\nimport time\nimport random\nfrom dataclasses import dataclass\nfrom io import StringIO\nfrom random import randint\nimport string\n\n@dataclass\nclass _test:\n    count: int\n    size: int\n    input: str\n    output: str\n\ntests = []\n\nseed = int(time.time())\n# seed = 1568898265 # seed for the test case below\nrandom.seed(seed)\nprint('Seed:', seed)\n\n# generate test case\n# NOTE: increasing this test case to n=150000,m=150000 generates a case that takes ~20s\n# and n=300000,m=300000 generates a case that takes ~50s\n# I don't think the solution times out in the given constraints, but still annoying.\nn = randint(2, 300000)\nm = randint(n-1, min((n*(n-1))//2, 300000))\n\ntests.append(_test(\n    count=10,\n    size", "solution('''\n4 3\n1 2\n2 3\n3 4\n4\n1 2\n2 3\n1 3\n3 4\n''') == '''\nYES\n3 1 2 3\n3 2 3 4\n3 1 3 4\n3 3 4\n'''\n\nassert solution('''\n3 2\n1 2\n2 3\n3\n1 2\n2 3\n1 3\n''') == '''\nNO\n2\n'''\n\nassert solution('''\n4 5\n1 2\n2 3\n3 4\n4 1\n1 3\n5\n1 2\n2 3\n1 3\n3 4\n1 4\n''') == '''\nYES\n2 1 2\n2 2 3\n2 1 3\n2 3 4\n2 1 4\n'''\n\nassert solution('''\n3 2\n1 2\n2 3\n3\n1 2\n2 3\n1 3\n''') == '''\nNO\n2\n'''\n\nassert solution('''\n3 1\n1 2\n3\n1 2\n2 3\n1 3\n''') == '''\nNO\n3\n'''\n\nassert solution('''\n3 1\n1 2\n3\n1 2\n2 3\n1 3\n''') == '''\nNO\n3\n'''\n\nassert solution('''\n4 3\n1 2", "solution('''\n4 5\n1 2\n2 3\n3 4\n4 1\n1 3\n4\n1 3\n2 3\n2 4\n1 4\n''') == '''\nYES\n2\n1 3\n1 2 3\n1\n1 2\n1\n1 4\n'''\n\nassert solution('''\n8 7\n1 2\n1 4\n4 6\n4 8\n1 3\n3 5\n3 7\n2\n2 3\n2 5\n''') == '''\nNO\n1\n'''\n\nassert solution('''\n10 10\n1 2\n1 3\n1 4\n2 6\n2 8\n3 5\n3 7\n4 10\n5 9\n7 10\n2\n1 10\n9 10\n''') == '''\nYES\n3\n1 2 6 8\n1 2 6 8 10\n1\n1\n'''\n\nassert solution('''\n10 10\n1 2\n1 3\n1 4\n2 6\n2 8\n3 5\n3 7\n4 10\n5 9\n7 10\n5\n1 10\n9 10\n5 3\n2 3\n5 7\n6 8\n''') == '''\nYES\n3\n1 2 6 8\n1 2 6 8 10\n1\n1\n1\n2\n1 2\n1\n'''\n\nassert solution('''\n8", "solution('''\n3 3\n1 2\n2 3\n1 3\n2\n1 2\n3 1\n''') == '''\nYES\n3\n1 2 3\n3\n3 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2\n1 2\n2 3\n1\n1 3\n''') == '''\nNO\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1\n1 2\n1\n1 2\n''') == '''\nYES\n2\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3\n1 2\n2 3\n1 3\n2\n1 2\n2 3\n''') == '''\nYES\n2\n1 2\n2\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n4 1\n2\n1 2\n2 3\n''') == '''\nYES\n2\n1 2\n2\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2\n1 2\n2 3\n1\n1 3\n''') == '''\nNO\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3", "solution('''\n3 2\n1 2\n2 3\n3\n1 2\n1 3\n2 3\n''') == '''\nYES\n3\n1 2 3\n3\n1 3\n2\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n4 1\n5\n1 4\n2 4\n3 4\n2 3\n1 3\n''') == '''\nNO\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2\n2 3\n3 4\n4 5\n5\n2 1\n3 2\n5 4\n3 4\n5 1\n''') == '''\nYES\n3\n2 1 5\n3\n3 2 5\n3\n5 4 3\n3\n3 4 5\n3\n5 4 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 3\n1 2\n2 3\n1 4\n10\n1 4\n4 1\n4 1\n4 1\n4 1\n4 1\n4 1\n4 1\n4 1\n4 1\n''') == '''\nYES\n3\n1 2 4\n3\n4 1 2\n3\n4 1 2\n3\n4 1 2\n3\n4 1 2\n3\n4 1 2\n", "solution('''\\\n3 2\n1 2\n2 3\n3\n1 2\n2 3\n1 3\n''') == '''\\\nYES\n2\n1 2\n2 3\n2\n1 2 3\n'''\nassert solution('''\\\n4 2\n1 2\n2 3\n1\n1 4\n''') == '''\\\nNO\n5\n'''\nassert solution('''\\\n4 2\n1 2\n2 3\n3\n1 2\n2 3\n1 3\n''') == '''\\\nYES\n2\n1 2\n2 3\n2\n1 2 3\n'''\nassert solution('''\\\n4 4\n1 2\n2 3\n3 4\n4 1\n2\n1 2\n3 4\n''') == '''\\\nYES\n2\n1 2\n3 4\n'''\nassert solution('''\\\n6 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n1 3\n3\n1 2\n1 3\n1 4\n''') == '''\\\nYES\n2\n1 2\n2 3\n2\n1 3\n3 4\n2\n1 2\n2 3\n'''\nassert solution('''\\\n3 2\n1 2\n2 3\n3\n1 2\n2 3\n1 3\n''') == '''", "solution(\"3 2\\n1 2\\n2 3\\n3\\n1 2\\n1 3\\n3 1\") == \"YES\\n3\\n1 2 3\\n3\\n1 2 3\\n3\\n1 2 3\\n\", \"Example 1\"\nassert solution(\"3 2\\n1 2\\n2 3\\n1\\n1 2\\n\") == \"NO\\n1\\n\", \"Example 2\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n4\\n1 2\\n3 4\\n4 2\\n3 1\\n\") == \"YES\\n2\\n1 2\\n4\\n3 4\\n3\\n3 4 2\\n3\\n3 4 2\\n5\\n3 4 5 1\\n\", \"Example 3\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n5\\n1 2\\n3 4\\n4 2\\n3 1\\n1 3\\n\") == \"YES\\n3\\n1 2\\n4\\n3 4\\n3\\n3 4 2\\n3\\n3 4 2\\n5\\n3 4 5 1\\n3\\n1 2 3\\n", "solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n1 5\n3\n1 5\n1 4\n1 2\n''') == '''\nYES\n3\n1 5 4\n2\n1 4 5\n3\n1 2 3\n'''\n\nassert solution('''\n3 2\n1 2\n2 3\n2\n1 2\n2 3\n''') == '''\nNO\n1\n'''\n\nassert solution('''\n4 3\n1 2\n2 3\n3 4\n2\n1 2\n1 4\n''') == '''\nYES\n2\n1 2\n2\n1 2 3 4\n'''\n\nassert solution('''\n10 11\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n9 10\n1\n1 10\n''') == '''\nNO\n1\n'''\n\nassert solution('''\n10 11\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n9 10\n2\n1 10\n1 8\n''') == '''\nYES\n2\n1 10\n2\n1 8 9 10\n'''\n\nassert solution('''\n3 2\n1 2\n2 3\n2\n1 2\n", "solution('''\n4 3\n1 2\n2 3\n2 4\n2\n1 3\n1 4\n''') == '''\nYES\n4\n1 2 3\n4\n1 2 4\n'''\n\nassert solution('''\n4 3\n1 2\n2 3\n2 4\n3\n1 2\n1 3\n1 4\n''') == '''\nNO\n0\n'''\n\n# check the performance of solution\nfrom utils import *\nprops = check_perf(10000)\nassert props[0] <= 1", "solution('''\n5 5\n1 2\n2 3\n2 4\n2 5\n1 5\n5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '''\nYES\n3 1 2 3\n3 1 2 4\n3 1 2 5\n3 2 3 4\n3 2 3 5\n'''\n\nassert solution('''\n2 1\n1 2\n2\n1 2\n2 1\n''') == '''\nNO\n1\n'''\n\nassert solution('''\n5 9\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '''\nYES\n3 1 2 3\n3 1 2 4\n3 1 2 5\n3 1 3 4\n3 1 3 5\n3 2 3 4\n'''\n\nassert solution('''\n10 15\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n20\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 3\n2 4", "solution('''\n3 2\n1 2\n2 3\n1\n1 3\n''') == '''\nYES\n4\n1 2 3\n'''\n\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n1 5\n1\n1 5\n''') == '''\nYES\n2\n1 5\n'''\n\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n1 5\n3\n1 5\n2 3\n1 3\n''') == '''\nNO\n5\n'''\n\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n1 5\n2\n1 3\n1 5\n''') == '''\nYES\n4\n1 3\n4 5\n'''\n\nassert solution('''\n5 7\n1 2\n2 3\n3 4\n4 5\n1 5\n1 4\n2 4\n2\n1 4\n3 5\n''') == '''\nYES\n4\n1 2 3\n4 5\n'''\n\nassert solution('''\n6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n1 5\n1 4\n1 6\n2 4\n3\n1 3\n3 6\n2 6\n''') == '''\nYES\n4\n", "solution('''\n4 4\n1 2\n2 3\n3 4\n4 1\n4\n1 2\n1 3\n1 4\n2 3\n''') == '''\nYES\n3\n1 2 3\n3\n1 3 4\n3\n1 4 3\n2\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4 2\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n2 3\n''') == '''\nNO\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1\n1 2\n3\n1 2\n2 1\n1 2\n''') == '''\nYES\n2\n1 2\n2\n2 1\n2\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n8 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1\n9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1\n1 2\n''') == '''\nYES\n3\n1 2 3\n3\n2 3 4\n3\n3 4 5\n3\n4 5 6\n3\n5 6 7\n3\n6 7 8\n3\n7 8 1\n3\n8 1 2", "solution(\"\"\"3 2\n1 2\n2 3\n2\n1 2\n1 3\"\"\") == \"\"\"YES\n2\n1 2\n2\n1 3 2\"\"\"\n\nassert solution(\"\"\"3 2\n1 2\n2 3\n3\n1 2\n1 3\n1 2\"\"\") == \"\"\"NO\n0\"\"\"\n\nassert solution(\"\"\"4 3\n1 2\n2 3\n2 4\n2\n1 2\n1 4\"\"\") == \"\"\"YES\n2\n1 2\n3\n1 2 4\"\"\"\n\nprint(\"Tests passed!\")", "solution('''\n4 5\n1 2\n2 3\n2 4\n1 3\n1 4\n4\n1 2\n2 3\n3 4\n4 1\n''') == '''\nYES\n3\n1 2 3\n3\n2 3 4\n3\n3 4 1\n3\n4 1 2\n'''\nassert solution('''\n3 2\n1 2\n2 3\n3\n1 2\n1 3\n2 3\n''') == '''\nNO\n2\n'''\nassert solution('''\n4 3\n1 2\n2 3\n2 4\n5\n1 2\n2 3\n2 4\n1 3\n1 4\n''') == '''\nYES\n3\n1 2 3\n3\n2 3 4\n3\n2 4 1\n3\n1 3 4\n3\n1 4 2\n'''\nassert solution('''\n3 2\n1 2\n2 3\n3\n1 2\n1 3\n2 3\n''') == '''\nNO\n2\n'''\n\n# submit the solution to leetcode\nprint(solution(input()))", "solution('''\n5 5\n1 2\n2 3\n2 4\n2 5\n3 5\n5\n1 2\n1 5\n5 1\n1 3\n3 1\n''') == '''\nYES\n3 1 2 5\n3 1 2 3 5\n3 5 2 1\n3 1 2 3\n3 3 2 1\n'''\n\nassert solution('''\n5 5\n1 2\n2 3\n2 4\n2 5\n3 5\n6\n1 2\n1 5\n5 1\n1 3\n3 1\n4 2\n''') == '''\nNO\n2\n'''\n\nassert solution('''\n5 4\n1 2\n2 3\n2 4\n2 5\n4\n1 2\n1 5\n5 1\n1 3\n''') == '''\nNO\n1\n'''\n\n# add some more test cases", "solution(standard_input) == standard_output", "solution(\"\") == \"\"\n\n# submit solution\nsubmit(solution, 'codechef', 'CHEFPATH')", "(solution(\"\"\"4 4\n1 2\n2 3\n3 4\n4 1\n2\n1 2\n2 3\"\"\") == \"\"\"YES\n1\n1 2\n1\n2 3\"\"\")\nassert (solution(\"\"\"3 2\n1 2\n2 3\n2\n1 2\n1 3\"\"\") == \"\"\"NO\n1\"\"\")\nassert (solution(\"\"\"3 2\n1 2\n2 3\n2\n1 2\n1 3\"\"\") == \"\"\"NO\n1\"\"\")\nassert (solution(\"\"\"7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n2\n1 7\n2 3\"\"\") == \"\"\"YES\n2\n1 2 7\n1\n2 3\"\"\")\nassert (solution(\"\"\"4 3\n1 2\n2 3\n3 4\n3\n1 2\n1 3\n1 4\"\"\") == \"\"\"NO\n2\"\"\")\nassert (solution(\"\"\"3 2\n1 2\n2 3\n2\n1 2\n1 3\"\"\") == \"\"\"NO\n1\"\"\")\nassert (solution(\"\"\"6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n2\n1 2\n1 3\"\"\") == \"\"\"NO\n2\"\"\")\nassert (solution(\"\"\"7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n", "solution('''\n2 1\n1 2\n1\n1 2\n''') == '''\nYES\n3\n1 2\n3\n1 2\n1\n'''\n\n# # submit the solution\n# import sys\n# import os\n# import time\n\n# problem_name = 'NAME'\n# problem_size = '0'\n# input_sizes = ['0']\n# input_files = [f'inputs/{problem_name}_{input_size}.txt' for input_size in input_sizes]\n# output_files = [f'outputs/{problem_name}_{input_size}.txt' for input_size in input_sizes]\n\n# # testcase generation\n# for input_file in input_files:\n#     with open(input_file, 'w') as fp:\n#         pass\n\n# # testcase generation\n# for input_file in input_files:\n#     with open(input_file, 'w') as fp:\n#         pass\n\n# # stress test\n# while True:\n#     # flush output\n#     for output_file in output_files:\n#         with open(output_file, 'w') as fp:\n#             pass\n\n#     # generate new input\n#     for input_file in input_", "solution(\"\") == \"\"\n\n# get the output string\nprint(solution(input()))"], "finish_reason": ["stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop"], "sum_logprob": [-45.932840869661995, -39.71725436964001, -68.29408993211699, -126.38549566760194, -149.87819434668398, -27.204690171239996, -23.811869479530003, -56.86268430311407, -60.14990351319, -8.918483700000001, -31.942922057640004, -85.82716499519002, -21.896255547550005, -89.73799076957995, -53.10575670236, -125.29751835220924, -86.89957990677702, -115.82302466601203, -12.190684237391997, -36.691671490869986, -98.87645774570996, -98.13331601967991, -76.10630811618387, -47.016460979846016, -37.33567348476499, -86.73140081127171, -16.224331286743983, -75.3468118557601, -43.158645984, -36.92024462888002, -285.8879838262342, -65.47775010837996, -147.70792763115807, -51.873103795774966, -93.17016514921505, -78.90632890139393, -74.90005770363204, -88.78400221531294, -50.22764479015, -63.32118739987404, -95.96224305836498, -57.13889709703201, -48.01442101706, -78.42282020910402, -66.85584349234001, -8.64569442893, -29.625332120099998, -79.00460287430195, -143.02723932176298, -21.7671858239], "mean_logprob": [-0.36454635610842856, -0.37469107895886794, -0.22764696644039, -0.42128498555867333, -0.4995939811556133, -0.906823005708, -0.43294308144599997, -0.18954228101038, -0.3251346135848108, -1.1148104625, -0.9126549159325714, -0.28609054998396666, -0.6082293207652778, -0.2991266358986, -0.17701918900786667, -0.41765839450736436, -0.2896652663559233, -0.3860767488867067, -0.24381368474784, -0.2583920527526056, -0.3295881924857, -0.3271110533989333, -0.25368769372061334, -0.15672153659948668, -0.31910832038260684, -0.28910466937090534, -0.05408110428914667, -0.2511560395192, -0.6850578727619048, -0.24613496419253333, -0.9529599460874467, -0.21825916702793333, -0.4923597587705267, -0.17291034598591667, -0.31056721716405, -0.26302109633798, -0.24966685901210667, -0.29594667405104336, -0.40506165153346774, -0.21107062466624665, -0.31987414352788335, -0.19046299032344, -0.3968133968352066, -0.3200931437106286, -0.3482075181892708, -0.7859722208118182, -1.0215631765551725, -0.26334867624767333, -0.4767574644058767, -0.98941753745]}
{"prompt": "'''\nPetya has a rooted tree with an integer written on each vertex. The vertex 1 is the root. You are to answer some questions about the tree.\n\nA tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a node v is the next vertex on the shortest path from v to the root.\n\nEach question is defined by three integers v, l, and k. To get the answer to the question, you need to perform the following steps: \n\n  * First, write down the sequence of all integers written on the shortest path from the vertex v to the root (including those written in the v and the root). \n  * Count the number of times each integer occurs. Remove all integers with less than l occurrences. \n  * Replace the sequence, removing all duplicates and ordering the elements by the number of occurrences in the original list in increasing order. In case of a tie, you can choose the order of these elements arbitrary. \n  * The answer to the question is the k-th number in the remaining sequence. Note that the answer is not always uniquely determined, because there could be several orderings. Also, it is possible that the length of the sequence on this step is less than k, in this case the answer is -1. \n\n\n\nFor example, if the sequence of integers on the path from v to the root is [2, 2, 1, 7, 1, 1, 4, 4, 4, 4], l = 2 and k = 2, then the answer is 1.\n\nPlease answer all questions about the tree.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^6). Description of the test cases follows.\n\nThe first line of each test case contains two integers n, q (1 \u2264 n, q \u2264 10^6) \u2014 the number of vertices in the tree and the number of questions.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 n), where a_i is the number written on the i-th vertex.\n\nThe third line contains n-1 integers p_2, p_3, \u2026, p_n (1 \u2264 p_i \u2264 n), where p_i is the parent of node i. It's guaranteed that the values p define a correct tree.\n\nEach of the next q lines contains three integers v, l, k (1 \u2264 v, l, k \u2264 n) \u2014 descriptions of questions.\n\nIt is guaranteed that the sum of n and the sum of q over all test cases do not exceed 10^6.\n\nOutput\n\nFor each question of each test case print the answer to the question. In case of multiple answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n7 3\n1 1 1 1 1 1 1\n1 1 1 1 1 1\n1 2 1\n3 2 1\n2 3 3\n5 3\n1 2 3 4 5\n1 1 1 1\n1 1 1\n1 2 1\n1 3 2\n1 4 1\n1 5 2\n''') == '''\n-1\n2\n1\n-1\n'''", "solution(stdin) == stdout\n\n# benchmark\nt = timeit.timeit('f()', globals=globals(), number=10000)\nprint(t)", "solution('''\n1\n6 4\n1 2 1 2 1 4\n1 1 1 1 3\n2 1 1\n2 1 2\n4 1 1\n4 1 2\n''') == '''\n-1\n1\n2\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 5\n1 2 1 1 1\n1 1 1 1 3\n1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\n''') == '''\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 5\n1 2 1 1 1\n1 1 1 1 3\n1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\n''') == '''\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 3\n1 2 1 1 1\n1 1 1 1 3\n1 1 1\n2 1 1\n2 1 2\n3 1 1\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 4\n1 2 3\n1 1 1\n1 1 1\n1 1 2\n2 1 1\n2", "solution('''\n1\n10 5\n1 2 1 7 1 1 4 4 4 4\n1 1 1 2 1 1 1 1 1\n1 2 1\n1 2 3\n1 2 4\n1 2 5\n1 2 6\n''') == '''\n-1\n1\n1\n1\n1\n'''", "solution('''\n1\n5 2\n3 2 1 4 5\n3 1 1 2\n2 1 2\n3 1 2\n''') == '''\n1\n2\n'''\n\nassert solution('''\n1\n5 2\n3 2 1 4 5\n3 1 1 2\n2 1 2\n2 1 3\n''') == '''\n1\n-1\n'''\n\n# check performance\nimport timeit\nimport math\ndef run_check(input_str: str, expected: str, times: int = 10, expected_time: float = 0.01) -> bool:\n    print(f'Running test...')\n    start = timeit.default_timer()\n    for _ in range(times):\n        try:\n            assert solution(input_str) == expected\n        except AssertionError:\n            print(f'Test failed with input {input_str}')\n            return False\n    end = timeit.default_timer()\n    print(f'Time of test execution: {end - start}')\n    return (end - start) < expected_time\n\nassert run_check('''\n1\n5 2\n3 2 1 4 5\n3 1 1 2\n2 1 2\n3 1 2\n''', '''\n1\n2\n''')\n\nassert run_check('''", "solution('''\n4\n4 2\n1 2 2 1\n1 1 1\n2 1 1\n2 2 2\n10 4\n1 2 2 1 1 1 2 2 1 1\n1 1 1 1 1 1 1 2 2 1\n1 1 1\n3 2 1\n3 2 2\n3 2 3\n3 2 4\n3 2 5\n2 2 3\n''') == '''\n-1\n1\n-1\n-1\n-1\n-1\n-1\n'''\n\nprint('OK')", "solution(sample_input) == sample_output\n\n# get input\nt = int(input())\ninputs = []\nfor i in range(t):\n    n, q = [int(s) for s in input().split(\" \")]\n    A = [int(s) for s in input().split(\" \")]\n    P = [int(s) for s in input().split(\" \")]\n    inputs.append((n, q, A, P))\n\n# run the solution process\noutputs = [solution(sample_input) for sample_input in inputs]\n\n# print the outputs\nfor i, output in enumerate(outputs):\n    print(\"Case #{}: {}\".format(i+1, output))", "solution('''5\n5 3\n2 2 1 7 1\n2 2 3\n2 2 1\n2 2 2\n5 2\n1 1 1 1 1\n1 1 1 1\n1 1 1 2\n4 2\n4 3 2 1\n4 2 2\n1 1 2\n5 2\n1 1 1 1 1\n1 1 1 1\n2 1 1 1\n10 4\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n2 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n2 3 3\n2 3 2\n2 3 1\n2 3 2\n''') == '''4\n7\n4\n4\n4\n7\n-1\n1\n1\n'''", "solution(\"\") == \"\", \"Example 1\"\nassert solution(\"\") == \"\", \"Example 2\"\nassert solution(\"\") == \"\", \"Example 3\"\nassert solution(\"\") == \"\", \"Example 4\"\nassert solution(\"\") == \"\", \"Example 5\"\nassert solution(\"\") == \"\", \"Example 6\"\nassert solution(\"\") == \"\", \"Example 7\"\nassert solution(\"\") == \"\", \"Example 8\"\nassert solution(\"\") == \"\", \"Example 9\"\nassert solution(\"\") == \"\", \"Example 10\"\n\n# print solution\nwith open(\"OUTPUT.txt\", \"w\") as fout:\n    fout.write(solution(\"\"))", "solution('''\n2\n6 3\n2 2 1 7 1 1\n2 3 3 3 3\n2 1 2\n3 3 2\n1 3 1\n8 4\n1 2 2 2 1 1 1 1\n3 2 2 1 1 8 2\n5 1 2\n5 2 2\n5 1 2\n5 2 2\n''') == '''\n1\n2\n-1\n2\n'''\n\n# test time limit\nassert solution('''\n''') == '''\n'''", "solution(input1) == output1, '\\nYour output:\\n{0}\\n\\nExpected output:\\n{1}'.format(solution(input1), output1)\n\nassert solution(input2) == output2, '\\nYour output:\\n{0}\\n\\nExpected output:\\n{1}'.format(solution(input2), output2)\n\nprint('Correct!')", "solution(\"\"\"2\n8 3\n2 1 2 2 7 1 1 4\n1 2 2 3 3 3 3\n2 2 2\n2 1 2\n2 2 1\n8 2\n1 2 2 2 7 1 1 4\n1 2 2 3 3 3 3\n2 2 2\n2 2 1\n\"\"\") == \"\"\"1\n-1\n2\n-1\n\"\"\"\n\n# print solution result\nprint(solution(input()))", "solution('''\n2\n8 5\n1 1 1 1 2 2 2 2\n1 1 1 1 1 1 1\n1 2 1\n4 1 1\n7 1 1\n8 3 1\n7 3 2\n8 3 2\n''') == '''\n1\n-1\n2\n2\n2\n'''", "solution(\"3\\n3 2\\n1 2 3\\n1 1\\n2 2 1\\n3 1 2\\n3 2\\n1 2 3\\n1 1\\n2 2 1\\n3 1 2\\n6 3\\n2 3 5 6 4 1\\n1 1 2 2\\n1 1 1\\n2 1 1\\n6 1 1\\n6 3\\n2 3 5 6 4 1\\n1 1 2 2\\n1 1 1\\n2 1 1\\n6 1 1\\n\") == '-1\\n1\\n-1\\n-1\\n1\\n-1\\n-1\\n1\\n-1\\n'", "solution(sample_input) == sample_output\n\n# check the correctness of solution on extreme cases\n# assert solution(extreme_input) == extreme_output\n\n# check the performance of solution\n# assert solution(performance_input) == performance_output", "solution(\"\"\"4\n5 3\n1 2 3 2 1\n1 1 1\n1 2 3\n1 1 1\n4 2\n5 4 3 2\n1 2 3\n1 1 1\n4 3\n4 2 3 4\n1 2 3\n1 2 1\n5 2\n4 2 1 5 4\n1 2 3 4\n1 1 2\n1 1 2\n\"\"\") == \"\"\"2\n-1\n3\n-1\n\"\"\", \"test 1\"\nassert solution(\"\"\"3\n3 1\n1 2 3\n1 2\n3 2 1\n1 2\n1 1 2\n1 1 2\n\"\"\") == \"\"\"3\n-1\n-1\n\"\"\", \"test 2\"\nassert solution(\"\"\"2\n10 4\n1 2 3 4 5 6 7 8 9 10\n1 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3 3\n2 3 4\n2 3 1\n2 3 2\n2 3 3\n2 3 4\n10 4\n1 2 3 4 5 6 7 8 9 10\n1 2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3 3 3\n2 3 4\n2 3 1\n2 3 2\n2 3 3\n2 3 4\n\"\"\") == \"\"\"1\n-1\n-1\n-1\n1\n-1\n-1\n-1\n\"\"\", \"test 3\"\n", "solution('''\n1\n4 3\n1 2 3 4\n1 1 1\n2 1 1\n3 2 2\n''') == '''\n1\n-1\n3\n'''", "solution('''3\n3 2\n1 2 3\n1 1\n1 1 2\n2 1 4\n1 4\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution('''\n2\n7 3\n1 1 1 2 3 3 4\n1 1 2 2 3 4\n4 2 5\n4 1 1\n4 1 1\n''') == '''\n1\n-1\n1\n'''", "solution('''\n\n''') == '''\n\n'''", "solution(example_str) == example_solution", "solution(problem_example) == problem_example_solution", "solution(sample_text) == sample_text\n\n# get lines\nlines = [line.strip() for line in sys.stdin]\ntext = '\\n'.join(lines)\n\n# print the result\nprint(solution(text))", "solution('''\n2\n5 3\n1 2 3 4 5\n1 1 1 1\n1 1 1\n3 2 1\n5 2 1\n7 4\n1 2 3 4 5 6 7\n1 1 1 1 1 1\n2 2 2 3 3\n2 3 3\n2 3 3\n2 3 3\n2 3 3\n''') == '''\n1\n1\n-1\n-1\n'''\nassert solution('''\n2\n5 3\n1 2 3 4 5\n1 1 1 1\n1 1 1\n3 2 1\n5 2 1\n7 4\n1 2 3 4 5 6 7\n1 1 1 1 1 1\n2 2 2 3 3\n2 3 3\n2 3 3\n2 3 3\n2 3 3\n''') == '''\n1\n1\n-1\n-1\n'''\nassert solution('''\n2\n5 3\n1 2 3 4 5\n1 1 1 1\n1 1 1\n3 2 1\n5 2 1\n7 4\n1 2 3 4 5 6 7\n1 1 1 1 1 1\n2 2 2 3 3\n2 3 3\n2 3 3\n2 3 3\n2 3 3\n''') == '''\n1\n1\n-1\n-1\n'''\nassert solution('''\n2\n5 3\n1 2 3 4 5\n1 1 1 1\n", "solution('''\n2\n7 3\n2 2 1 7 1 1 4\n1 2 1 3 3 2 3\n5 2 1\n5 2 7\n1 2 1\n7 2 4\n5 2 1\n5 2 7\n5 2 4\n''') == '''\n-1\n7\n-1\n'''\nassert solution('''\n1\n10 4\n2 2 1 2 1 3 3 2 1 1\n1 2 1 1 2 1 1 2 2 1\n5 2 1\n5 2 7\n5 2 4\n5 2 4\n5 2 4\n5 2 4\n5 2 4\n5 2 4\n''') == '''\n-1\n2\n1\n1\n1\n1\n1\n1\n'''\nprint('all passed')", "solution(\"\"\"1\n11 3\n2 2 1 7 1 1 4 4 4 4\n1 1 1 1 2 1 4 5 5 6\n3 2 1\n3 2 2\n3 2 3\n\"\"\") == \"\"\"1\n-1\n-1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n10 10\n1 2 1 1 1 2 2 2 2 2\n1 1 1 1 1 1 2 2 2\n1 1 1 1 2 2 3 3 3\n2 1 2\n2 1 3\n2 1 4\n2 1 5\n2 1 6\n2 1 7\n2 1 8\n2 1 9\n2 1 10\n\"\"\") == \"\"\"1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n15 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1\n1 1", "solution(\"1\\n9 3\\n1 2 3 1 2 3 1 3 3\\n2 2 3 1 3 3 3 3 3\\n1 1 1\\n1 2 1\\n1 2 2\") == \"-1\\n1\\n2\", \"expected: -1, 1, 2\"\nassert solution(\"2\\n9 3\\n1 2 3 1 2 3 1 3 3\\n2 2 3 1 3 3 3 3 3\\n1 1 1\\n1 2 1\\n1 2 2\\n9 3\\n1 2 3 1 2 3 1 3 3\\n2 2 3 1 3 3 3 3 3\\n1 1 1\\n1 2 1\\n1 2 2\") == \"-1\\n1\\n2\\n-1\\n1\\n2\", \"expected: -1, 1, 2\\n-1, 1, 2\"\nassert solution(\"3\\n9 3\\n1 2 3 1 2 3 1 3 3\\n2 2 3 1 3 3 3 3 3\\n1 1 1\\n1 2 1\\n1 2 2\\n9 3\\n1 2 3 1 2 3 1 3 3\\n2 2 3 1 3 3 3 3 3\\n1 1 1\\n1 2 1\\n1 2 2\\n9 3\\n1 2 3 1 2 3 1 3 3\\n2 2 3 1 3", "solution('''\n1\n7 3\n2 3 3 3 2 3 3\n1 1 1 2 1 1\n4 2 1\n4 2 2\n4 2 3\n''') == '''\n-1\n3\n-1\n'''\n#file = open('input.txt', 'r')\n#print(solution(file.read()))", "solution('''2\n5 3\n1 2 3 4 5\n1 1 2 2\n5 2 1\n5 1 2\n5 2 2\n5 1 5\n4 4\n4 1 1 1\n1 1 2\n4 1 2 1\n4 1 3 1\n4 1 4 1\n4 1 4 2\n4 1 4 3\n4 1 4 4\n4 1 4 5''') == '''1\n-1\n4\n-1\n-1\n-1\n-1\n'''", "solution('''\n1\n7 7\n4 2 1 1 1 2 3\n1 2 1 3 1 2 4\n1 2 3\n2 2 1\n2 1 3\n2 2 3\n1 2 1\n1 2 3\n''') == '''\n1\n-1\n3\n-1\n1\n1\n'''", "solution('''\n3\n9 2\n3 1 2 1 1 2 4 4 4\n1 1 2 2 2 4 5 6 7\n7 2 2\n9 2 2\n8 3 2\n10 3 2\n7 7 2 3 3 3 3 3 3\n1 1 2 2 2 4 5 6 7\n7 2 2\n9 2 2\n8 3 2\n10 3 2\n7 7 2 3 3 3 3 3 3\n''') == '''\n1\n-1\n'''", "solution('''0''') == '''0'''\n\nassert solution('''1''') == '''1'''\n\n# run\nsolution('2')", "solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert", "solution('''\n2\n4 3\n1 2 3 4\n1 1 1\n1 2 2\n1 1 1\n4 5\n5 6 7 8\n2 1 1 1\n2 2 1\n1 2 1\n1 2 1\n1 2 1\n''') == '''\n-1\n2\n6\n-1\n7\n'''\n\nprint('Correct!')", "solution(example) == example_out", "solution(\"\"\"\n\n\"\"\") == '', \"Test 1\"\nassert solution(\"\"\"\n\n\"\"\") == '', \"Test 2\"\nassert solution(\"\"\"\n\n\"\"\") == '', \"Test 3\"\n\n# test if the provided solution is correct:\nprint(\"Y\" if solution(sampleIn) == sampleOut else \"N\")\n\nprint(\"\\nDone\\n\")", "solution('''3\n3 3\n1 2 3\n1 1\n2 1 2\n3 1 2\n6 4\n1 2 1 2 1 2\n1 1 1 3 3 4\n1 1 2\n3 2 2\n3 2 2\n6 2 2\n6 6\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n1 1 6\n''') == '''2\n3\n2\n2\n-1\n1\n1\n1\n-1\n-1\n'''", "solution(\"\"\"5\n5 4\n1 2 1 1 2\n1 1 1 2\n4 1 2\n4 2 2\n4 3 2\n4 4 2\n6 3\n1 1 1 1 1 1\n1 1 1 1 1\n1 1 2\n5 1 2\n6 1 2\n6 2\n1 1 1 1 1 1\n1 1 1 1 1\n1 1 2\n5 1 2\n6 1 2\n7 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 2\n5 1 2\n6 1 2\n1 1 3\n7 4\n1 1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 2\n5 1 2\n6 1 2\n1 1 3\n2 3 3\n4 2 2\n4 2 3\n4 2 4\n\"\"\") == \"\"\"1\n-1\n1\n-1\n2\n2\n2\n3\n3\n3\n3\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\"\"\"", "solution('''\n2\n10 3\n3 2 3 3 3 1 4 4 4 2\n1 1 2 2 4 5 5 5 6 7\n2 2 4\n2 2 4\n2 2 5\n''') == '''\n-1\n-1\n4\n'''", "solution('''\n2\n5 3\n1 2 3 4 5\n1 1 1 1\n1 1 1\n5 2 2\n1 2 3 4 5\n1 1 1 1\n2 1 2\n2 3 2\n''') == '''\n-1\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\n", "solution(sample_input) == sample_output\n\n# get input for debugger\nfrom tester import get_input\ninput = get_input()\n\n# call solution function\nprint(solution(input))", "solution('''5\n5 5\n1 2 1 2 2\n1 1 2 3 4\n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n5 5\n1 2 1 2 2\n1 1 2 3 4\n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n5 5\n1 2 1 2 2\n1 1 2 3 4\n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n5 5\n1 2 1 2 2\n1 1 2 3 4\n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n5 5\n1 2 1 2 2\n1 1 2 3 4\n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n''') == '''-1\n1\n2\n2\n-1\n-1\n-1\n-1\n-1\n-1\n'''\n\n# TODO: add more random test cases to cover all possible situations\n\n# test data for stdin (copy-paste from the input file)\ninputs = ['''5\n5 5\n1 2 1 2 2\n1 1 2 3 4\n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n5 5\n1 2 1 2 2", "solution(\"\"\"\n5\n6 5\n1 1 1 1 1 1\n1 1 1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 5\n1 1 1 1 1 1 1\n1 1 1 1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 5\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 5\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1\n10 1\n10 1\n10 1\n10 1\n\"\"\") == \"\"\"\n1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n1\n1\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n1 1\n1\n1 1\n1 1 1\n\"\"\") == \"\"\"\n-1\n-1\n\"\"\"\n\nassert solution(\"\"\"\n3\n2 1\n1 1\n1\n1 1\n1", "solution(r'''\n1\n10 5\n1 2 2 1 7 1 1 4 4 4\n1 1 1 2 2 3 3 3 3 3\n2 2 1\n2 2 2\n2 2 3\n10 1\n1 2 2 1 7 1 1 4 4 4\n1 1 1 2 2 3 3 3 3 3\n1 1 2\n''') == '''\n1\n1\n7\n-1\n2\n'''", "solution('''\n1\n6 4\n1 1 2 2 3 3\n1 1 2 2 2\n3 1 2\n3 1 3\n3 2 2\n3 2 3\n''') == '''\n-1\n1\n-1\n-1\n'''\n\n# print(solution(stdin))", "solution(\"\"\"\n\"\"\"\n).strip() == \"\"\"\n\"\"\".strip()", "solution(stdin) == stdout\n\n# ---- tests ----\n\ndef test_1() -> None:\n    print('test 1')\n    global stdin, stdout\n    stdin = \n    stdout = \n    stdin = stdin.split('\\n')\n    stdout = stdout.split('\\n')\n    solution(stdin)\n    assert stdout == stdout\n\ndef test_2() -> None:\n    print('test 2')\n    global stdin, stdout\n    stdin = \n    stdout = \n    stdin = stdin.split('\\n')\n    stdout = stdout.split('\\n')\n    solution(stdin)\n    assert stdout == stdout\n\ndef test_3() -> None:\n    print('test 3')\n    global stdin, stdout\n    stdin = \n    stdout = \n    stdin = stdin.split('\\n')\n    stdout = stdout.split('\\n')\n    solution(stdin)\n    assert stdout == stdout\n\n# ---- fast I/O for Hackerrank ----\nimport os\n\ndef read(*args):\n    file = os.path.join(os.getcwd(),'{}.txt'.format(__file__))\n   ", "solution('''2\n8 3\n1 2 2 1 1 1 2 2\n1 1 1 1 1 2 2\n2 2 2\n2 1 2\n2 2 2\n''') == '''1\n-1\n1\n'''", "solution('''\n1\n6 7\n1 2 3 4 5 6\n1 1 2 2 3 4\n3 2 2\n3 2 1\n1 2 2\n1 2 3\n2 2 1\n2 2 2\n2 2 3\n''') == '''\n2\n1\n-1\n3\n3\n4\n4\n'''\n# this part is to test the solution on large dataset\nimport os\nos.chdir('/src/data')\nfile = open('large.in', 'r')\nprint(solution(file.read()))\nfile.close()", "solution(\"\"\"\n    1\n    8 5\n    1 2 4 4 2 2 1 7\n    1 1 2 2 3 3 4\n    3 2 2\n    3 2 3\n    4 1 3\n    3 1 3\n    3 1 2\n\"\"\") == \"\"\"\n1\n-1\n1\n-1\n2\n\"\"\""], "finish_reason": ["stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop"], "sum_logprob": [-55.14013764617, -29.06074760157001, -84.92102835593296, -37.39256191436999, -141.73237787715698, -74.55855832110998, -42.485266467680006, -119.46985003981001, -31.084787503970006, -97.42398713699995, -29.390558366915993, -65.42165758211, -50.25283906185, -73.80039458573202, -29.648303222039996, -162.55717905838517, -18.899017507099998, -38.52376010849994, -41.58138681267, -6.8188402532999985, -12.213163151, -12.515940312900002, -40.465487825489994, -64.44748884304697, -123.71762587225399, -95.80702620939988, -69.07136273900495, -53.664611699260014, -66.03835652517, -64.9733374648, -86.92768200600001, -33.121308926400005, -18.24050302662499, -60.397363298840006, -9.771727935000001, -77.58717489174998, -80.98944922577998, -110.52718110455994, -58.47259158273, -42.922073957628065, -28.49783753313, -114.87737820563405, -78.40118235022393, -49.994214754599994, -41.75934924389002, -15.100553640999998, -91.09757438189999, -40.35327073492999, -104.38075057092004, -60.73675775954998], "mean_logprob": [-0.6126681960685556, -0.7087987219895122, -0.28307009451977666, -0.526655801610845, -0.47244125959052335, -0.6483352897487826, -0.25288849087904763, -0.5239905703500438, -0.20450518094717104, -0.8856726103363636, -0.3093742985991158, -0.6814755998136458, -0.7077864656598591, -0.4761315779724645, -0.5294339861078572, -0.54185726352795, -0.43951203504883724, -0.128412533695, -0.7845544681635849, -0.42617751583124996, -1.0177635959166667, -0.8939957366357143, -0.7099208390436842, -0.21482496281015667, -0.7364144397157976, -0.31935675403133335, -0.23023787579668334, -0.679298882269114, -0.6058564818822936, -0.8900457186958904, -0.820072471754717, -0.82803272316, -0.060801676755416666, -0.7190162297480952, -1.0857475483333334, -0.9021764522296511, -0.6278251877967442, -0.4703284302321702, -0.9585670751267213, -0.14307357985876, -0.60633696879, -0.38292459401878, -0.2613372745007467, -0.5318533484531914, -0.5965621320555714, -0.8882678612352941, -0.303658581273, -0.7613824666967924, -0.8029288505455384, -0.8207669967506757]}
{"prompt": "'''\nPetya has an array of integers a_1, a_2, \u2026, a_n. He only likes sorted arrays. Unfortunately, the given array could be arbitrary, so Petya wants to sort it.\n\nPetya likes to challenge himself, so he wants to sort array using only 3-cycles. More formally, in one operation he can pick 3 pairwise distinct indices i, j, and k (1 \u2264 i, j, k \u2264 n) and apply i \u2192 j \u2192 k \u2192 i cycle to the array a. It simultaneously places a_i on position j, a_j on position k, and a_k on position i, without changing any other element.\n\nFor example, if a is [10, 50, 20, 30, 40, 60] and he chooses i = 2, j = 1, k = 5, then the array becomes [\\underline{50}, \\underline{40}, 20, 30, \\underline{10}, 60].\n\nPetya can apply arbitrary number of 3-cycles (possibly, zero). You are to determine if Petya can sort his array a, i. e. make it non-decreasing.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 5 \u22c5 10^5). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 5 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 n).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print \"YES\" (without quotes) if Petya can sort the array a using 3-cycles, and \"NO\" (without quotes) otherwise. You can print each letter in any case (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n2\n2 1\n2\n1 2\n''') == '''\nYES\nNO\n'''\n\nprint('All tests have passed.')", "solution(solution_input) == solution_output\n\n# check the correctness of solution for the given examples\nfor i in range(1, 6):\n    assert solution(open(f'input{i}.txt').read()) == open(f'output{i}.txt').read()", "solution('''2\n6\n10 50 20 30 40 60\n5\n1 1 1 2 1''') == 'YES\\nNO'", "solution('''3\n3\n1 2 1\n6\n1 2 3 4 5 6\n4\n2 3 1 2''') == '''YES\nYES\nNO'''", "solution(\n    '''\n    1\n    4\n    1 2 3 4\n    '''\n) == 'YES'\n\nassert solution(\n    '''\n    1\n    5\n    1 2 3 4 5\n    '''\n) == 'YES'\n\nassert solution(\n    '''\n    1\n    5\n    1 3 2 4 5\n    '''\n) == 'NO'\n\nassert solution(\n    '''\n    1\n    5\n    1 2 3 5 4\n    '''\n) == 'NO'\n\nassert solution(\n    '''\n    3\n    5\n    1 2 3 5 4\n    3\n    3 2 1\n    4\n    1 2 3 4\n    '''\n) == '\\n'.join(['NO', 'YES', 'YES'])", "solution(\"\") == \"YES\" or solution(\"\") == \"NO\"", "solution(\"\"\"\n3\n3\n1 2 1\n6\n10 50 20 30 40 60\n3\n6 4 2\n\"\"\") == \"\"\"\nYES\nYES\nNO\n\"\"\"", "solution(\n'''\n'''\n) == '''\n'''", "solution(\"\"\"\n2\n6\n10 50 20 30 40 60\n4\n4 1 2 3\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution(\"\") == \"\", \"Check the solution!\"\nprint(\"All tests passed!\")", "solution(\"\"\"\n5\n6\n10 50 20 30 40 60\n6\n10 20 50 30 40 60\n5\n1 2 3 4 5\n1\n123\n2\n2 3\n\"\"\") == \"\"\"\nYES\nNO\nYES\nYES\nNO\n\"\"\"", "solution('''\n1\n6\n10 50 20 30 40 60\n''') == 'YES'\n\nassert solution('''\n1\n3\n10 20 30\n''') == 'NO'\n\nassert solution('''\n1\n3\n30 20 10\n''') == 'YES'\n\n# check the time of solution\n\n\n\n# check the space of solution\n\n\n\n# check the cases of solution", "solution(\"\") == \"\"", "solution('''4\n4\n1 2 3 4\n4\n4 3 2 1\n4\n1 2 4 3\n4\n4 1 2 3\n''') == '''NO\nYES\nYES\nNO'''", "solution('''5\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n5\n1 3 5 2 4\n5\n5 4 3 2 1\n4\n4 1 3 2''') == '''YES\nNO\nYES\nNO\nYES'''", "solution('''3\n3\n3 1 2\n3\n1 2 3\n3\n2 1 3''') == '''YES\nNO\nNO'''", "solution(\"input\") == \"expected\"", "solution('''\n1\n6\n10 50 20 30 40 60\n''') == '''\nYES\n'''\nassert solution('''\n1\n6\n10 60 50 40 30 20\n''') == '''\nNO\n'''\nassert solution('''\n2\n2\n10 20\n2\n20 10\n''') == '''\nYES\nNO\n'''\nassert solution('''\n2\n2\n10 20\n2\n10 20\n''') == '''\nYES\nYES\n'''\nassert solution('''\n1\n4\n20 30 10 40\n''') == '''\nYES\n'''\nassert solution('''\n2\n3\n10 10 20\n3\n10 10 20\n''') == '''\nYES\nYES\n'''\nassert solution('''\n2\n5\n10 10 10 10 10\n5\n10 10 10 10 10\n''') == '''\nYES\nYES\n'''\nassert solution('''\n1\n5\n5 4 3 2 1\n''') == '''\nNO\n'''\nassert solution('''\n1\n3\n1 1 1\n''') == '''\nYES\n'''\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\nYES\n'''\nassert solution('''\n1\n", "solution('''3\n3\n3 1 2\n4\n4 1 3 2\n4\n4 1 2 3''') == '''YES\nNO\nYES'''", "solution(input) == output", "solution(\"\"\"2\n6\n10 50 20 30 40 60\n5\n10 1 2 3 4\"\"\") == \"\"\"YES\nNO\"\"\"", "solution(\"\"\"\n3\n3\n3 1 2\n3\n2 1 3\n3\n3 2 1\n\"\"\") == \"\"\"\nYES\nNO\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n1 5 4 3 2\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n1 5 3 4 2\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n1 3 4 5 2\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n1 3 4 2 5\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n1 2 3 5 4\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n1 2 4 3 5\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n1 2 4 5 3\n\"\"\") == \"\"\"\n", "solution(input_str) == output_str\n \n# check the performance of solution\ntest_str = ... # put your random test case here\n \n# run the code which you want to evaluate\n \n# calculate the running time\nelapsed_time = ... # end - start\n \n# output the running time\nprint(elapsed_time)", "solution(\"\"\"1\n6\n10 50 20 30 40 60\"\"\") == 'YES'\nassert solution(\"\"\"1\n5\n5 1 4 2 3\"\"\") == 'NO'\nassert solution(\"\"\"2\n5\n5 1 4 2 3\n4\n4 3 2 1\"\"\") == 'NO\\nYES'\nassert solution(\"\"\"3\n5\n5 1 4 2 3\n4\n4 3 2 1\n3\n3 1 2\"\"\") == 'NO\\nYES\\nNO'\nassert solution(\"\"\"10\n3\n3 1 2\n4\n4 3 2 1\n5\n5 1 4 2 3\n5\n5 4 3 2 1\n5\n5 4 2 3 1\n5\n5 4 2 1 3\n5\n5 4 1 2 3\n5\n5 1 2 3 4\n5\n5 1 3 2 4\n5\n5 1 3 4 2\n5\n5 1 4 3 2\"\"\") == 'NO\\nYES\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO'\n\n# submit on codeforces\nstdin = sys.stdin.read()\nsys.stdout.write(solution(stdin))", "solution(\"\"\"2\n3\n3 1 2\n3\n1 2 3\"\"\") == \"\"\"YES\nNO\"\"\"\n\nprint(\"Solution to the problem\")\nprint(solution(input()))", "solution(\"\"\"\n1\n6\n10 50 20 30 40 60\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n6\n10 50 20 30 40 60\n\"\"\") == \"\"\"\nYES\n\"\"\"", "solution('''\n7\n4\n4 2 3 1\n4\n4 3 2 1\n4\n4 3 3 1\n4\n4 3 1 1\n4\n4 1 3 1\n4\n4 1 1 1\n4\n4 1 1 2\n''') == '''\nYES\nNO\nYES\nYES\nYES\nYES\nYES\n'''", "solution(\"\"\"\n2\n1\n1\n3\n1 2 3\n\"\"\") == \"\"\"\nYES\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2\n2 1\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3\n3 2 1\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1", "solution(input()) == \"input output\", \"Please, write your own solution\"", "solution('''\n4\n4\n4 1 2 3\n4\n4 1 3 2\n4\n1 4 2 3\n4\n1 2 3 4\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution('''\n2\n6\n10 50 20 30 40 60\n5\n10 20 30 40 50\n''') == '''\nYES\nNO\n'''", "solution(\"\"\"3\n3\n2 1 3\n4\n4 3 2 1\n5\n1 2 3 4 5\"\"\") == \"\"\"YES\nNO\nYES\"\"\"", "solution(\"\"\"\n5\n5\n5 1 3 2 4\n5\n5 1 3 2 4\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\nYES\nNO\nYES\nNO\nYES\n\"\"\"", "solution('''5\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n5\n5 5 5 5 5\n5\n1 5 5 4 1\n5\n1 5 5 4 5\n''') == '''YES\nNO\nYES\nNO\nYES'''", "solution('''1\n6\n10 50 20 30 40 60''') == '''YES'''\n\n# check for performance\ndef cycle_1(a):\n    for i in range(1, len(a)):\n        if a[i] < a[i-1]:\n            return False\n    return True\n\ndef cycle_2(a):\n    for i in range(1, len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                a[i], a[j], a[k] = a[j], a[k], a[i]\n                if cycle_1(a):\n                    return True\n                a[i], a[j], a[k] = a[j], a[k], a[i]\n    return False\n\nimport time\ntest_list = [i for i in range(1, 100)]\ntest_list[12], test_list[67], test_list[83] = test_list[67], test_list[83], test_list[12]\nstart = time.perf_counter()\nassert cycle_2(test_list) == True\nend = time.perf_counter()\nprint(end - start)", "solution('''5\n5\n5 1 2 3 4\n5\n1 3 2 4 5\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n1 1 2 2 3''') == '''YES\nNO\nYES\nNO\nYES'''", "solution(\"\") == \"\"\n\n# get the solution\nsolution(\"\")", "solution(\n'''3\n3\n3 1 2\n3\n2 1 3\n2\n2 1\n''') == '''NO\nYES\nNO'''", "solution('''\n2\n6\n10 50 20 30 40 60\n3\n30 30 30\n''') == '''\nYES\nNO\n'''", "solution('''\n2\n5\n10 50 20 30 40\n5\n50 10 30 20 40\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n2 1\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 2 3\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2 1\n2\n1 2\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 4 3 2 1\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 4 2 5 3\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5\n5 4 3 2 1\n", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution(\"\"\"\n5\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n5\n5 4 1 2 3\n3\n3 2 1\n3\n1 3 2\n\"\"\") == \"\"\"\nYES\nNO\nYES\nYES\nNO\n\"\"\"\n\nassert solution(\"\"\"\n1\n6\n1 5 4 3 2 6\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n3 2 1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n1 3 2\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n1\n6\n6 5 4 3 2 1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n4\n4 3 2 1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n4\n1 2 3 4\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n1 2 3\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n3 1 2\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n2\n3\n1 2 3\n3\n3 1 2\n\"\"\") == \"\"\"", "solution('''\n7\n6\n10 50 20 30 40 60\n5\n1 1 2 3 3\n2\n2 1\n3\n1 2 1\n3\n3 2 1\n3\n1 2 3\n3\n1 1 1\n''') == '''\nYES\nYES\nNO\nYES\nNO\nYES\nYES\n'''", "solution('''\n3\n3\n3 1 2\n3\n2 1 3\n4\n1 3 2 4\n''') == '''\nYES\nNO\nYES\n'''", "solution(\"\"\"\n5\n5\n5 4 2 3 1\n5\n1 2 3 4 5\n3\n5 5 5\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\nYES\nNO\nYES\nNO\nNO\n\"\"\"", "solution('''\n10\n6\n10 50 20 30 40 60\n6\n10 50 10 50 10 50\n6\n10 50 30 40 20 60\n4\n10 20 30 40\n4\n10 20 30 10\n4\n10 30 20 30\n4\n30 20 10 30\n4\n10 20 30 10\n4\n10 30 10 30\n4\n10 10 30 30\n\n''') == '''\nYES\nNO\nYES\nYES\nNO\nNO\nNO\nNO\nNO\n'''", "solution(\n    '''\n5\n5\n5 4 2 1 3\n5\n5 4 2 1 4\n3\n1 2 3\n5\n5 5 5 5 5\n5\n5 5 5 5 4\n    '''\n) == '''\nYES\nNO\nYES\nNO\nYES\n''', 'Test 1'\n\n# check the performance of solution\nassert solution(\n    '''\n5\n5\n5 4 2 1 3\n5\n5 4 2 1 4\n3\n1 2 3\n5\n5 5 5 5 5\n5\n5 5 5 5 4\n    '''\n) == '''\nYES\nNO\nYES\nNO\nYES\n''', 'Test 1'", "solution('''\n1\n5\n1 2 3 4 5\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n3 4 2 1 5\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n3 4 2 5 1\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 1 2 3 4\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 1 2 4 3\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 4 3 2 1\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 3\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 2 1\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n''') == 'YES'\n\n#", "solution('''5\n6\n5 3 6 3 2 5\n6\n5 3 6 3 5 2\n7\n5 3 5 2 6 4 7\n7\n5 3 5 2 6 4 3\n1\n1''') == '''YES\nNO\nYES\nNO\nYES'''", "solution(SAMPLE_INPUT_1) == SAMPLE_OUTPUT_1\nassert solution(SAMPLE_INPUT_2) == SAMPLE_OUTPUT_2\n\n# ---- read the input and compute the output ----\nin_txt = sys.stdin.read()\nout_txt = solution(in_txt)\n\n# ---- output the results ----\nprint(out_txt)"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop"], "sum_logprob": [-22.711540224799997, -36.690405073710004, -17.529130748199997, -23.86241258913, -48.04044214449035, -11.502736371999998, -25.712100457400005, -10.493607028999998, -15.517951556100002, -20.808910422500002, -34.793839191340005, -52.90804481480999, -5.50281715, -25.560352925629996, -33.0685322256, -15.9093466796, -10.752842707999998, -84.19096640745603, -22.2231120014, -7.36932457, -16.998631796799998, -63.45942283398895, -90.56692890135, -91.56682207299404, -30.855872289000004, -16.6916415331, -42.68699853740999, -38.58658527833498, -36.024168350000004, -24.666481737270008, -12.238482805100004, -18.793830585299993, -31.021665464700003, -37.700888527900034, -108.84690200421498, -30.61952512217, -18.666116313, -21.9973635278, -14.4615138587, -63.08856981749898, -13.468893947780002, -80.84585921161701, -43.02701739435999, -16.1783680395, -32.97582769162, -67.49155654582998, -54.93251134516752, -60.99212843309002, -57.14389632505001, -50.808439169199005], "mean_logprob": [-0.56778850562, -0.5732875792767188, -0.54778533588125, -0.59656031472825, -0.2569007601309642, -0.71892102325, -0.642802511435, -0.6172710017058823, -0.47024095624545453, -1.040445521125, -0.5998937791610345, -0.5689037076861291, -0.9171361916666667, -0.5216398556251021, -0.5421070856655738, -0.44192629665555555, -1.194760300888889, -0.28063655469152, -0.5848187368789474, -1.052760652857143, -0.5666210598933333, -0.21153140944663, -1.132086611266875, -0.34294689914979026, -0.7175784253255814, -0.2928358163701754, -0.5403417536381012, -0.12862195092778334, -2.001342686111111, -0.47435541802442305, -0.33076980554324326, -0.5220508495916667, -0.49240738832857145, -0.5984268020301587, -0.3677260202845101, -0.4938633084220968, -1.0980068419411764, -0.5945233385891892, -0.41318611024857144, -0.21029523272499667, -0.04489631315926667, -0.26948619737205665, -0.5661449657152632, -0.3945943424268293, -0.5405873392068853, -0.6080320409534234, -0.35440329900108064, -0.20330709477696668, -0.8928733800789063, -0.5583344963648241]}
{"prompt": "'''\nYou are given an array of n positive integers a_1, a_2, \u2026, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that: \n\n  * 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and \n  * b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1). \n\n\n\nThe number of such arrays can be very large, so print it modulo 998 244 353.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n2 2 3\n''') == '3'\n\nassert solution('''\n3\n1 2 3\n''') == '6'\n\nassert solution('''\n3\n1 2 2\n''') == '3'\n\nassert solution('''\n3\n2 2 2\n''') == '1'\n\nassert solution('''\n1\n2\n''') == '1'\n\nassert solution('''\n2\n2 3\n''') == '2'\n\nassert solution('''\n4\n1 2 3 4\n''') == '24'\n\nassert solution('''\n4\n2 3 3 3\n''') == '9'\n\n# check time complexity (1 sec for n = 2 * 10^5)\nimport timeit\n\nassert timeit.timeit(lambda: solution('''\n2\n2 3\n'''), number=1) < 1\n\nassert timeit.timeit(lambda: solution('''\n5\n2 3 3 3 3\n'''), number=1) < 1\n\nassert timeit.timeit(lambda: solution('''\n100000\n2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "solution(sample_1) == '4'\nassert solution(sample_2) == '2'\nassert solution(sample_3) == '100'\nassert solution(sample_4) == '100'\nassert solution(sample_5) == '768'", "solution('''\n3\n1 1 2\n''') == '3'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n2\n2 2\n''') == '0'\n\nassert solution('''\n3\n1 2 2\n''') == '1'\n\nassert solution('''\n5\n2 3 2 3 3\n''') == '42'", "solution('''\n3\n3 4 5\n''') == '''\n14\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n252\n'''", "solution(input) == output\n\n\n# check the correctness of solution against some test cases\nfrom random import randint, seed\nfrom collections import Counter\n\n\ndef check_1(n, a):\n    b_counter = Counter()\n    b_counter[1] = 1\n    for a_i in a:\n        b_counter_next = Counter()\n        for b_i, count in b_counter.items():\n            for d in range(1, a_i + 1):\n                if b_i != d:\n                    b_counter_next[d] += count\n        b_counter = b_counter_next\n    return b_counter\n\n\ndef check_2(n, a):\n    ans = 1\n    for a_i in a:\n        ans *= a_i\n        ans %= MOD\n    return ans\n\n\ndef check_3(n, a):\n    b_counter = check_1(n, a)\n    ans = 0\n    for count in b_counter.values():\n        ans += count\n        ans %= MOD\n    return ans\n\n\ndef check(n, a):\n    ans_1 = check_1(n, a)\n    ans_2 = check_2(n, a)\n    ans_3 = check_3(n, a)\n    #", "solution(\"4\\n1 2 3 4\") == \"4\"\nassert solution(\"4\\n1 2 1 3\") == \"2\"\nassert solution(\"2\\n1 1\") == \"0\"\nassert solution(\"3\\n1 2 1\") == \"0\"\nassert solution(\"3\\n1 2 2\") == \"1\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"4\\n1 1 1 2\") == \"1\"\nassert solution(\"4\\n1 1 2 2\") == \"2\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"0\"\nassert solution(\"6\\n1 1 1 1 1 2\") == \"1\"\nassert solution(\"6\\n1 1 1 1 2 2\") == \"3\"\nassert solution(\"6\\n1 1 1 2 2 2\") == \"6\"\nassert solution(\"6\\n1 1 2 2 2 2\") == \"9\"\nassert solution(\"6\\n1 2 2 2 2 2\") == \"15\"\nassert solution(\"6\\n2 2 2 2 2 2\") == \"20\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"7\\n1 1 1 1 1 1 2\") == \"1\"\nassert solution(\"7\\n1 1 1 1 1 2 2", "(solution(stdin) == stdout)", "solution('''\n3\n1 2 3\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4\n1 1 1 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n2\n1 2\n''') == '3'\n\n# submit main.py to codeforces and get verdict.\nimport requests\nimport json\n\ndata = {\n    'script': open('main.py').read(),\n    'language': 'python3',\n    'testcases': [\n        {\n            'input': '3\\n1 2 3',\n            'expected': '4',\n        },\n        {\n            'input': '4\\n1 1 1 1',\n            'expected': '1',\n        },\n        {\n            'input': '1\\n1',\n            'expected': '1',\n        },\n        {\n            'input': '2\\n1 2',\n            'expected': '3',\n        },\n    ],\n}\ndata_json = json.dumps(data)\n\nresponse = requests.post(\n    'https://api.codeforces.com/api/submit", "solution('''\n4\n1 1 1 1\n''') == '4'\n\nassert solution('''\n4\n3 3 3 3\n''') == '24'\n\nassert solution('''\n3\n1 3 3\n''') == '6'\n\nassert solution('''\n2\n2 2\n''') == '2'\n\n# check the correctness of comments\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''\n\n''') == ''\n\nassert solution('''", "solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"\"\"\n9\n\"\"\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n5\n2 2 2 2 2\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2\n2 3\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n8\n1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n8\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\n73\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n36\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 2 1 2 1 2 1 2 1 2\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n10\n2 2 2 2 2 2 2 2 2 2\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n10\n2 3 4 5 6 7 8 9 10 11\n\"\"\") == \"\"\"\n85\n\"\"\"\n\nassert solution(\"\"\"\n10\n11 10 9 8 7 6 5 4 3 2\n\"\"\") == \"\"\"\n85\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"", "(\n    solution(\"\"\"\n3\n3 2 1\n\"\"\") == \"\"\"\n3\n\"\"\")\n\nassert (\n    solution(\"\"\"\n2\n2 2\n\"\"\") == \"\"\"\n2\n\"\"\")\n\nassert (\n    solution(\"\"\"\n1\n1\n\"\"\") == \"\"\"\n1\n\"\"\")", "solution(\"\"\"\n5\n2 3 1 2 4\n\"\"\") == \"17\"", "solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"15\"\n\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n4\n1 1 1 1\n\"\"\") == \"4\"\n\n# test for time limit\n\n#", "solution(example_input) == example_output", "solution(open(\"tests/4_in.txt\").read()) == open(\"tests/4_out.txt\").read()", "solution('''\n5\n1 2 3 4 5\n''') == '''\n25\n'''\nassert solution('''\n1\n1\n''') == '''\n1\n'''\nassert solution('''\n3\n1 1 1\n''') == '''\n1\n'''\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n'''\nassert solution('''\n3\n1 1 2\n''') == '''\n2\n'''\nassert solution('''\n5\n1 1 2 2 2\n''') == '''\n6\n'''\nassert solution('''\n5\n5 5 5 5 5\n''') == '''\n5\n'''\nassert solution('''\n10\n7 2 6 8 5 4 3 3 3 3\n''') == '''\n3567\n'''\nassert solution('''\n100\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "solution('''\n3\n1 1 1\n''') == '1'\n\nassert solution('''\n3\n1 2 1\n''') == '2'\n\nassert solution('''\n2\n1000000000 1000000000\n''') == '0'\n\nassert solution('''\n5\n9 10 6 3 3\n''') == '2'\n\nassert solution('''\n5\n2 2 1 2 2\n''') == '9'\n\n# run code on console\nwith open('input.txt', 'r') as f:\n    content = f.read()\n    out = solution(content)\n    print(out)", "solution('''\n\n''') == '''\n\n'''", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''", "solution(\"sample1.in\") == \"sample1.out\"\nassert solution(\"sample2.in\") == \"sample2.out\"\n\n# get the input from the input file\nwith open(\"input.in\", \"r\") as f:\n    stdin = f.read()\n\n# print the output for the input\nwith open(\"output.out\", \"w\") as f:\n    f.write(solution(stdin))", "\"42\" == solution(\"test\"), \"wrong answer\"\n\nTEST_CASES = [\n    (\"\", ),\n    (\"\", ),\n    (\"\", ),\n    (\"\", ),\n    (\"\", ),\n    (\"\", ),\n    (\"\", ),\n    (\"\", ),\n    (\"\", ),\n    (\"\", )\n]\n\nif __name__ == \"__main__\":\n    import os\n    import time\n    #\n    # freopen equivalent\n    abs_path = os.path.abspath(os.path.dirname(__file__))\n    f = open(os.path.join(abs_path, \"in.txt\"), \"r\")\n    #\n    # input\n    # readlines into string array\n    inp = f.readlines()\n    #\n    # transform string array into integer array\n    lines = []\n    for i in range(len(inp)):\n        if i == 0:\n            continue\n        lines.append(inp[i].strip())\n    #\n    # solve\n    start = time.time()\n    for i in range(len(lines)):\n        print(solution(lines[i]))\n    end = time.time()\n    #\n    # output\n    print(\"Time elapsed: %.4f\" % (end -", "solution('''\n3\n1 2 3\n''') == '6'\n\nassert solution('''\n4\n1 1 2 2\n''') == '9'\n\nassert solution('''\n2\n1 2\n''') == '2'\n\nassert solution('''\n5\n2 3 3 3 3\n''') == '10'", "solution('''\n2\n1 2\n''') == '2'\n\n# test the performance of solution\nimport timeit\nimport random\n\nINPUT = '''\n{}\n{}\n'''\nN = 2 * 10 ** 5\n\ns = ''\nfor i in range(N):\n    s += str(random.randint(1, 10 ** 9)) + ' '\n\nprint(f'test input:\\n{N}\\n{s}')\nprint(f'expected output: 2')\nprint(f'obtained output: {solution(INPUT.format(N, s))}')\nprint(f'execution time: {timeit.timeit(\"solution(INPUT.format(N, s))\", setup=\"from __main__ import solution, INPUT, N, s\", number=1)}')", "solution(\"\") == \"\", \"0\"\nassert solution(\"\") == \"\", \"1\"\nassert solution(\"\") == \"\", \"2\"", "solution(\"stdin\") == stdout\n \n# ---------------------------\n# import the necessary packs\n# ---------------------------\nimport sys\nimport logging\n\n# -------------------\n# set up the logger\n# -------------------\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    stream=sys.stdout,\n)\n\n# ------------------------\n# set up the global vars\n# ------------------------\ninput_txt = \"\"\n\n# -------------------\n# read input from stdin\n# -------------------\nfor line in sys.stdin:\n    input_txt += line.rstrip() + \"\\n\"\n\n# ---------------------------\n# check the correctness\n# ---------------------------\nstdout = input_txt\n\nassert stdout == solution(input_txt)", "solution(test_data.test_data_files['test_1']) == test_data.test_data_files['test_1_solution']", "solution('''\n5\n1 2 2 2 4\n''') == '16'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '0'\n\nassert solution('''\n3\n1 2 3\n''') == '12'\n\nassert solution('''\n5\n100000 100000 100000 100000 100000\n''') == '50'\n\n# simulate stdin\nimport io\nimport sys\n\nif __name__ == '__main__':\n    user_input = '''\n5\n1 2 2 2 4\n'''\n    sys.stdin = io.StringIO(user_input)\n    print(solution(user_input))", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n# get user input, do some processing and print the result\nprint(solution(input()))", "solution('''\n3\n1 2 3\n''') == '6'\n\nassert solution('''\n2\n1 1\n''') == '2'\n\nassert solution('''\n3\n1 1 1\n''') == '1'\n\nassert solution('''\n5\n10 10 10 10 10\n''') == '0'\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '1'\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '0'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '20'\n\nassert solution('''\n5\n10 5 5 5 5\n''') == '4'\n\nassert solution('''\n5\n10 9 8 7 6\n''') == '120'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '20'\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '1'\n\n#test\ntest_set = '''\n2\n1 1\n3\n1 2 3\n2\n1 1\n3\n1 1 1\n5\n10 10 10 10 10\n5\n1 1 1 1 1\n5\n5 5 5 5 5\n5\n1 2 3 4 5\n5\n", "solution('''\n1\n2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 1 2\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 1 1 1\n''') == '''\n8\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 1 1 1 1\n''') == '''\n16\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 1 1\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n32\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n10 9 8 7 6\n''') == '''\n32\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 5 5 5 5\n''') == '''\n16\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 2 1\n''') == '", "solution('''\n2\n2 2\n''') == '3'\n\n# stress testing\nimport random\nwhile True:\n    pass", "(solution(example) == example_ans)\n\nwith open(submission, 'w') as f:\n    f.write(solution(stdin))", "(solution('4\\n2 3 2 3') == '4')\n\n# get input and run solution\nstdin = open('input.txt', 'r')\nprint(solution(stdin.read()))", "solution('''\n3\n1 1 1\n''') == '1'\n\nassert solution('''\n3\n1 2 3\n''') == '6'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '120'\n\n# testcase with large numbers\nassert solution('''\n5\n1000000001 1000000002 1000000003 1000000004 1000000005\n''') == '651554299'\n\n# run the solution\nsolution(open('in.txt').read())", "solution(\"STDIN EXAMPLE\") == \"STDIN EXAMPLE\"", "solution('''\n''') == '''\n'''", "solution('''\n5\n1 2 3 4 5\n''') == '''\n10\n'''\nassert solution('''\n1\n1\n''') == '''\n1\n'''\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n'''\nassert solution('''\n1\n1000000000\n''') == '''\n1\n'''\n\n# get input\ninput_ = sys.stdin.read().strip()\n\n# run solution in local environment\ntimeit_result = run_solution(solution, input_)\n\n# get output\noutput = timeit_result.output\n\n# print output\nprint(output)", "solution('''\n3\n1 3 3\n''') == '3'\n\nassert solution('''\n5\n1 5 7 9 10\n''') == '545'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '280792600'", "solution('''\n3\n2 3 3\n''') == '3'\n\nassert solution('''\n2\n2 3\n''') == '3'\n\nassert solution('''\n5\n2 3 3 3 2\n''') == '72'\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '5'\n\nassert solution('''\n5\n2 3 1 1 1\n''') == '3'\n\nassert solution('''\n5\n2 3 1 2 3\n''') == '36'", "solution(samplesolution('''\n2\n2 3\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 3\n''') == '12'\n\n# check the correctness of solution\nassert solution('''\n5\n6 1 2 3 4\n''') == '200'\n\n# check the correctness of solution\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '31922560'\n\n# check the correctness of solution\nassert solution('''\n1\n1000000000\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n2\n1 2\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n2\n1 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n2\n2 2\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 3\n''') == '12'\n\n# check the correctness of solution\nassert solution('''\n3\n1 1 1\n''') == '3'\n\n# check the correctness of", "solution('''\n3\n1 2 3\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n2\n1 1\n''') == '1'", "solution('''\n4\n2 2 2 2\n''') == '1'\n\nassert solution('''\n4\n2 3 2 3\n''') == '0'\n\nassert solution('''\n3\n1 2 3\n''') == '4'\n\nassert solution('''\n4\n1 2 3 4\n''') == '24'\n\nassert solution('''\n1\n2\n''') == '1'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n1\n3\n''') == '1'", "solution('''\n3\n1 2 3\n''') == '24'\n\nassert solution('''\n3\n1 1 1\n''') == '1'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '1'\n\nassert solution('''\n3\n3 2 1\n''') == '6'\n\nassert solution('''\n2\n2 3\n''') == '4'\n\nassert solution('''\n1\n1000000000\n''') == '1'\n\nassert solution('''\n2\n1000000000 1000000000\n''') == '1'\n\nassert solution('''\n2\n1000000000 1000000000\n''') == '1'\n\nassert solution('''\n4\n4 4 4 4\n''') == '1'\n\nassert solution('''\n2\n2 3\n''') == '4'\n\nassert solution('''\n3\n3 2 1\n''') == '6'\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '1'\n\nassert solution('''\n1\n1000000000\n''') == '1'\n\nassert solution('''\n2\n1000000000", "solution(example_input) == example_output\n\n# get the input from STDIN and pass it to the solution\nwith open('input.txt', 'r') as f:\n    input_ = f.read()\n    print(solution(input_))", "solution('''\n4\n1 2 3 4\n''') == '33'\n\nassert solution('''\n2\n2 3\n''') == '2'\n\nassert solution('''\n1\n1000000000\n''') == '1'", "solution('''\n1\n1\n''') == '''\n2\n'''\n\n# run the solution\nassert solution('''\n1\n1\n''') == '''\n2\n'''\n\n# run the solution\nassert solution('''\n2\n1 2\n''') == '''\n4\n'''\n\n# run the solution\nassert solution('''\n3\n2 3 3\n''') == '''\n12\n'''\n\n# run the solution\nassert solution('''\n3\n3 3 2\n''') == '''\n8\n'''\n\n# run the solution\nassert solution('''\n2\n2 2\n''') == '''\n1\n'''\n\n# run the solution\nassert solution('''\n2\n2 1\n''') == '''\n2\n'''\n\n# run the solution\nassert solution('''\n2\n1 2\n''') == '''\n4\n'''\n\n# run the solution\nassert solution('''\n3\n1 2 3\n''') == '''\n12\n'''\n\n# run the solution\nassert solution('''\n3\n3 2 1\n''') == '''\n8\n'''\n\n# run the solution\nassert solution('''\n4\n2 3 4 1\n''') == '''\n", "solution('''\n4\n1 2 1 1\n''') == '4'\n\nassert solution('''\n4\n4 4 4 4\n''') == '0'\n\nassert solution('''\n4\n1 1 2 2\n''') == '0'\n\nassert solution('''\n3\n3 2 1\n''') == '12'", "solution('''\\\n4\n3 3 3 3\n''') == '41'\n\n# stress testing\nwhile True:\n    from random import randint\n\n    n = randint(1, 100_000)\n    a = ' '.join(map(str, [randint(1, 10**9) for _ in range(n)]))\n    print(n, a)\n    print(solution(str(n) + '\\n' + a))", "solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n21\n\"\"\"\nassert solution(\"\"\"\n2\n2 3\n\"\"\") == \"\"\"\n4\n\"\"\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2\n3 3\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2\n2 2\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2\n2 1\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n3\n1 1 2\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 1 2 1\n\"\"\") == \"\"\"\n14\n\"\"\"\nassert solution(\"\"\"\n10\n2 3 3 3 3 3 3 3 3 3\n\"\"\") == \"\"\"\n516\n\"\"\"\nassert solution(\"\"\"\n6\n1 2 3 4 5 6\n\"\"\") == \"\"\"\n58\n\"\"\"\nassert solution(\"\"\"\n5\n3 2 1 4 5\n\"\"\") == \"\"\"\n14\n\"\"\"\nassert solution(\"\"\""], "finish_reason": ["length", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length"], "sum_logprob": [-92.67612760677291, -36.974759540319994, -43.85963118632999, -25.60041936621999, -116.11042868037309, -66.20190078631703, -8.302783626400002, -72.51926884185308, -58.92545478799705, -96.16041771133605, -28.939859245570002, -21.924983856, -52.18680249481001, -6.66464076346, -19.3832219737, -94.60085507868658, -95.47357097977999, -7.8958179903999985, -12.17806394546, -40.53363239009003, -126.73101723750999, -33.888619412575004, -71.22229640350997, -13.2976424679, -132.576808560593, -26.980709840799996, -60.51889218129097, -32.85499512745, -103.53845584415892, -65.11576388445849, -19.945778762150002, -29.99619071665, -29.64354014454999, -77.07219562856001, -16.3395748288, -6.925299815999999, -74.69181252271002, -58.8144772424, -65.1999754683, -28.017522588800006, -83.10212797579607, -15.7685908418, -44.29663000176, -85.93633576502525, -34.677151813769996, -25.171919932859993, -77.48515805138088, -39.06788233307999, -52.741749684969996, -118.49067032594996], "mean_logprob": [-0.30892042535591, -0.6266908396664407, -0.45216114625082476, -0.5333420701295833, -0.38703476226791, -0.22067300262105666, -0.7547985114909092, -0.24173089613951, -0.19641818262665667, -0.32053472570445335, -0.41941824993579707, -1.153946518736842, -0.7674529778648529, -0.6058764330418182, -0.6922579276321429, -0.315336183595622, -0.649480074692381, -0.4934886244, -0.146723661993494, -0.4094306302029293, -0.42243672412503336, -0.4236077426571875, -0.37289160420685863, -0.415551327121875, -0.6498863164734952, -0.7494641622444445, -0.3806219634043459, -0.8424357724987179, -0.34512818614719665, -0.21705254628152834, -0.6233055863171875, -0.8107078572067568, -0.6049702070316326, -0.6422682969046667, -0.9611514605176471, -0.4946642725714286, -0.4526776516527879, -0.8402068177485714, -0.5215998037464, -0.09339174196266667, -0.2770070932526533, -0.35837706458636365, -0.3281231851982222, -0.28645445255008434, -0.5877483358266101, -0.433998619532069, -0.25828386017126964, -0.4823195349762963, -0.4975636762733019, -0.3949689010865]}
{"prompt": "'''\nYou are given an array a of length n.\n\nLet's define the eversion operation. Let x = a_n. Then array a is partitioned into two parts: left and right. The left part contains the elements of a that are not greater than x (\u2264 x). The right part contains the elements of a that are strictly greater than x (> x). The order of elements in each part is kept the same as before the operation, i. e. the partition is stable. Then the array is replaced with the concatenation of the left and the right parts.\n\nFor example, if the array a is [2, 4, 1, 5, 3], the eversion goes like this: [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5].\n\nWe start with the array a and perform eversions on this array. We can prove that after several eversions the array a stops changing. Output the minimum number k such that the array stops changing after k eversions.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print a single integer k \u2014 the number of eversions after which the array stops changing.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n5\n2 4 1 5 3\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n5\n5 3 4 3 2\n5\n5 3 4 3 2\n5\n5 3 4 3 2\n''') == '''\n0\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n2 3 4 1 5\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2 1\n3\n3 2 1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n1 1 1 2 2 2 2 2 2 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2 1\n2\n1 2\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''", "solution('''3\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n5 5 5 5 5''') == '''5\n1\n0'''", "solution(stdin) == stdout\n \n# check the performance of solution\nassert solution(stdin) == stdout", "solution('''3\n3\n1 2 3\n3\n3 2 1\n5\n1 2 1 2 1''') == '''1\n3\n4'''", "solution(case1) == solution_check1\nassert solution(case2) == solution_check2\nassert solution(case3) == solution_check3\nassert solution(case4) == solution_check4\nassert solution(case5) == solution_check5\nassert solution(case6) == solution_check6\nassert solution(case7) == solution_check7\nassert solution(case8) == solution_check8\nassert solution(case9) == solution_check9\nassert solution(case10) == solution_check10\nprint('All tests passed!')", "solution(\"\"\"1\n5\n2 4 1 5 3\"\"\") == \"\"\"4\"\"\"\n\n# submit solution\nTESTCASES = [(\"1\\n5\\n2 4 1 5 3\", \"4\")]\nsolution(\"\\n\".join([str(len(TESTCASES)), *[\"\\n\".join(x) for x in TESTCASES]]))", "solution('''\n\n''') == '''\n\n'''", "solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\n\n# launch LiveTest\nfrom LiveTest import launch\nlaunch()", "solution(\"\"\"2\n5\n2 4 1 5 3\n4\n1 1 2 2\"\"\") == \"\"\"2\n0\"\"\", \"sample case 1 not passed\"\n\n# test for performance\nfrom random import randint\nfrom time import time\n\nt = time()\nfor n in range(1000):\n    n = randint(1, 200000)\n    s = [str(randint(1, 1000000000)) for _ in range(n)]\n    solution(f'1\\n{n}\\n{\" \".join(s)}')\nprint(f'1000 tests passed in {time() - t} seconds')", "solution('''\n0\n''') == '''\n'''\n\nassert solution('''\n1\n5\n2 4 1 5 3\n''') == '''\n3\n'''\n\nassert solution('''\n1\n3\n3 2 1\n''') == '''\n2\n'''\n\nassert solution('''\n1\n5\n5 4 3 2 1\n''') == '''\n5\n'''\n\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n4 2 3 4 5\n''') == '''\n2\n'''\n\n#\nassert solution('''\n1\n5\n4 5 2 3 4\n''') == '''\n2\n'''\n\n# submit\ndef _main():\n    print(solution(input()))\n\n# I/O\ntry:\n    _main()\nexcept:\n    print('ERROR')\n    raise", "solution(\"\"\"\n2\n5\n2 4 1 5 3\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n9\n9 6 8 1 7 2 5 4 3\n\"\"\") == \"\"\"\n4\n\"\"\"", "solution('''\n3\n3\n1 2 3\n4\n4 2 1 3\n5\n5 4 3 2 1\n''') == '''\n1\n2\n5\n'''", "solution('''\n5\n5\n2 4 1 5 3\n4\n4 3 2 1\n4\n4 2 1 3\n4\n3 4 2 1\n3\n3 2 1\n''') == '''\n1\n0\n3\n1\n0\n'''", "solution(\"\"\"\\\n3\n5\n1 2 4 5 3\n5\n5 4 3 2 1\n5\n5 3 5 3 5\n\"\"\") == \"\"\"\\\n1\n5\n0\n\"\"\"", "True == True", "solution('''1\n5\n2 4 1 5 3''') == '2'\n\nassert solution('''1\n1\n1''') == '0'\n\nassert solution('''2\n2\n2 2\n3\n3 2 1''') == '1'\n\nassert solution('''3\n5\n1 2 3 4 5\n2\n2 1\n3\n3 2 1''') == '0'\n\nassert solution('''3\n5\n1 2 3 5 4\n2\n2 1\n3\n3 2 1''') == '1'\n\nassert solution('''2\n10\n9 8 7 6 5 4 3 2 1 10\n2\n2 1''') == '10'\n\nassert solution('''1\n10\n9 8 7 6 5 4 3 2 1 10''') == '10'\n\nassert solution('''2\n4\n4 3 2 1\n4\n1 2 3 4''') == '2'\n\nassert solution('''1\n5\n5 4 3 2 1''') == '4'\n\nassert solution('''2\n5\n5 4 3 2 1\n5\n5 4 3 2 1''') == '4'\n\nassert solution('''2\n3\n3 2 1\n3\n3 2 1''') == '1'\n\nassert solution('''", "solution('''\n3\n5\n2 4 1 5 3\n5\n5 5 5 5 5\n3\n1 1 1\n''') == '''\n3\n0\n0\n'''", "solution(get_input()) == get_output()", "(solution('''\n4\n4\n1 1 1 1\n4\n1 2 3 4\n4\n1 2 1 1\n5\n1 2 3 2 1\n''') == '''\n0\n1\n0\n2\n''')", "solution(__doc__) == \"\"\"\n\n\"\"\"", "solution(\"1\\n5\\n2 4 1 5 3\") == \"5\"\nassert solution(\"2\\n5\\n2 4 1 5 3\\n5\\n1 2 3 4 5\") == \"5\\n0\"\nassert solution(\"2\\n5\\n2 4 1 5 3\\n5\\n1 2 3 5 4\") == \"4\\n3\"\nassert solution(\"3\\n5\\n2 4 1 5 3\\n5\\n1 2 3 4 5\\n5\\n1 2 3 5 4\") == \"5\\n0\\n3\"\nassert solution(\"2\\n5\\n2 4 1 5 3\\n5\\n1 2 4 3 5\") == \"3\\n2\"\nassert solution(\"1\\n10\\n5 2 5 2 4 2 3 3 4 4\") == \"7\"\nassert solution(\"1\\n10\\n4 4 3 3 2 2 1 1 2 2\") == \"3\"\nassert solution(\"1\\n10\\n1 1 1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"1\\n10\\n9 8 7 6 5 4 3 2 1 10\") == \"9\"\nassert solution(\"1\\n10\\n1 2 3 4 5 6 7 8 9 10\") == \"0\"\nassert solution(\"1\\n2\\n1 2", "solution(\"\"\"3\n3\n1 1 1\n3\n3 2 1\n3\n2 3 1\"\"\") == \"\"\"0\n2\n1\"\"\", \"Example\"\n\n# check the correctness of solution\nassert solution(\"\"\"8\n9\n9 9 9 9 9 9 9 9 9\n4\n4 4 4 1\n5\n5 5 5 5 5\n5\n5 5 5 1 5\n3\n3 3 3\n3\n3 3 1\n3\n3 1 3\n3\n1 3 3\"\"\") == \"\"\"0\n3\n1\n3\n3\n0\n0\n0\"\"\", \"Long test\"", "solution(sys.stdin.read()) == '''\n'''\n\nsolution(sys.stdin.read())", "solution(\"\"\"\n5\n5\n2 4 1 5 3\n5\n1 2 3 4 5\n1\n1\n2\n1 2\n2\n2 1\n\"\"\") == \"\"\"\n2\n0\n0\n1\n0\n\"\"\", \"Example\"\n\n# stress testing solution\nfrom random import randint, uniform\nfrom math import floor\nwhile True:\n    n = randint(2, 10**5)\n    l = [randint(1, 10**9) for i in range(n)]\n    assert solution(str(n) + \"\\n\" + \" \".join(str(v) for v in l)) == solution_check(l)", "solution(\"\"\"\n<input>\n\"\"\") == \"<output>\"", "solution('''\n3\n5\n2 4 1 5 3\n4\n4 2 1 3\n4\n1 2 3 4\n''') == '''\n2\n0\n0\n'''", "solution('''\n5\n5\n2 4 1 5 3\n10\n1 1 1 1 1 1 1 1 1 1\n5\n5 5 5 5 5\n5\n5 5 5 1 1\n5\n5 5 5 1 1\n''') == '''\n3\n1\n1\n0\n0\n'''\nassert solution('''\n1\n3\n3 3 3\n''') == '''\n1\n'''\n\n# print the number of evesions after which it stops changing\n# with open('input.txt', 'r') as f:\n#     f.readline()\n#     line = f.readline()\n#     while line:\n#         arr = list(map(int, line.strip().split()))\n#         i = 0\n#         while i < len(arr) - 1:\n#             if arr[i] < arr[i + 1]:\n#                 break\n#             i += 1\n#         print(i + 1)\n#         line = f.readline()", "solution('''\n3\n3\n1 2 3\n3\n1 2 1\n1\n1\n''') == '''\n0\n1\n0\n'''", "solution('''1\n5\n2 4 1 5 3''') == '''2'''\nassert solution('''1\n3\n3 2 1''') == '''1'''\nassert solution('''1\n4\n4 3 2 1''') == '''1'''\nassert solution('''1\n8\n8 2 7 3 4 5 6 1''') == '''5'''\nassert solution('''1\n10\n10 9 8 7 6 5 4 3 2 1''') == '''1'''\nassert solution('''1\n10\n1 2 3 4 5 6 7 8 9 10''') == '''3'''\nassert solution('''1\n8\n2 3 7 6 4 5 1 8''') == '''5'''\nassert solution('''1\n9\n1 9 4 5 6 7 8 2 3''') == '''2'''\nassert solution('''1\n6\n2 3 4 5 6 1''') == '''3'''\nassert solution('''1\n6\n1 2 3 4 5 6''') == '''4'''\nassert solution('''1\n6\n1 2 3 4 6 5''') == '''2'''\nassert solution('''1\n6\n1 2 3 5 4 6''') == '''2'''\nassert solution(''", "solution('''2\n5\n2 4 1 5 3\n5\n5 4 3 2 1''') == '''2\n1'''", "solution(solution_input) == solution_output\n\n# get input for this problem\nproblem_input = open(str(Path(__file__).parent) + \"\\\\input.txt\", 'r')\n\n# get output for this problem\nproblem_output = open(str(Path(__file__).parent) + \"\\\\output.txt\", 'r')\n\n# get input for this problem\nsolution_input = \"\"\nfor line in problem_input:\n    solution_input += line\n\n# get output for this problem\nsolution_output = \"\"\nfor line in problem_output:\n    solution_output += line\n\n# print the solution for comparison\nprint(solution(solution_input))", "solution('''2\n5\n2 4 1 5 3\n5\n1 2 3 4 5''') == '''2\n0'''", "solution(\n'''\n'''\n) == '''\n'''", "solution(\"\"\"\n3\n5\n2 4 1 5 3\n5\n1 2 3 4 5\n1\n1\n\"\"\") == \"\"\"\n3\n0\n0\n\"\"\"", "solution('''\n2\n3\n3 2 1\n2\n2 1\n''') == '''\n2\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n3 2 1\n2\n2 1\n5\n1 2 3 4 5\n''') == '''\n2\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4\n4 3 2 1\n4\n1 2 3 4\n6\n1 4 2 4 5 3\n5\n5 4 3 2 1\n''') == '''\n4\n1\n4\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5\n2 5 3 4 1\n5\n1 5 3 4 2\n''') == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n6\n3 6 4 2 5 1\n5\n5 4 3 2 1\n5\n5 1 4 2 3\n''') == '''\n5\n1\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n6\n6 5 4 3 2 1\n6\n1 2 3 4 5 6\n''') == '''\n6\n1\n'''\n\n# check the correctness of solution", "solution(\"\"\"\n5\n5\n1 1 1 1 1\n5\n1 1 1 1 2\n5\n2 1 1 1 1\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n0\n2\n3\n4\n0\n\"\"\"\n\n# submit solution\nprint(solution(sys.stdin.read()))", "solution(get_test_case(1)) == '1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n'\n\n# check the correctness of solution for example\nassert solution(get_test_case(3)) == '1\\n'\n\n# check the correctness of solution for hidden test cases\nassert solution(get_test_case(4)) == '1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\", "solution(sample_io) == expected_out", "solution(input_text) == output_text", "solution(get_sample_input(1)) == get_sample_output(1)\nassert solution(get_test_input(1)) == get_test_output(1)", "solution('''\n2\n5\n2 4 1 5 3\n4\n4 4 4 4\n''') == '''\n3\n0\n'''", "solution(\"\"\"2\n5\n2 4 1 5 3\n5\n2 3 1 4 5\"\"\") == \"\"\"4\n3\"\"\", \"Example 1\"\nassert solution(\"\"\"3\n3\n1 2 3\n4\n4 4 4 4\n1\n1\"\"\") == \"\"\"0\n1\n0\"\"\", \"Example 2\"\nassert solution(\"\"\"1\n6\n1 3 3 3 3 3\"\"\") == \"\"\"0\"\"\", \"Example 3\"\nassert solution(\"\"\"1\n1\n1\"\"\") == \"\"\"0\"\"\", \"Example 4\"\n\n# stress testing\ndef solution_stress(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution_stress(\"\"\"2\n5\n2 4 1 5 3\n5\n2 3 1 4 5\"\"\") == \"\"\"4\n3\"\"\", \"Example 1\"\nassert solution_stress(\"\"\"3\n3\n1 2 3\n4\n4 4 4 4\n1\n1\"\"\") == \"\"\"0\n1\n0\"\"\", \"Example 2\"\nassert solution_stress(\"\"\"1\n6\n1 3 3 3 3 3\"\"\") == \"\"\"0\"\"\", \"Example 3\"\nassert solution_stress(\"\"\"1\n1\n1\"\"\") == \"\"\"0\"\"\", \"Example 4\"\n\n# stress testing", "solution(r'''\n1\n5\n1 2 3 4 5\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n6\n1 2 3 1 2 3\n''') == r'''\n1\n'''\n\nassert solution(r'''\n1\n5\n5 5 5 5 5\n''') == r'''\n4\n'''\n\nassert solution(r'''\n1\n6\n3 1 4 3 5 3\n''') == r'''\n1\n'''\n\nassert solution(r'''\n1\n5\n5 4 3 2 1\n''') == r'''\n4\n'''\n\nassert solution(r'''\n1\n5\n9 1 1 2 9\n''') == r'''\n2\n'''\n\nassert solution(r'''\n1\n5\n9 2 1 1 9\n''') == r'''\n3\n'''\n\nassert solution(r'''\n1\n5\n9 2 1 1 2\n''') == r'''\n2\n'''\n\nassert solution(r'''\n1\n5\n9 9 1 1 9\n''') == r'''\n3\n'''\n\nassert solution(r'''\n1\n5\n9 9 9 9 9\n''') == r'''\n4\n'''\n", "solution(\"\"\"0\"\"\") == \"\"\nassert solution(\"\"\"0\"\"\") == \"\"\nassert solution(\"\"\"0\"\"\") == \"\"", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution", "solution(\"\"\"2\n3\n1 2 3\n3\n3 2 1\"\"\") == \"\"\"0\n3\"\"\"\nassert solution(\"\"\"3\n3\n3 2 1\n4\n4 4 4 4\n4\n1 1 1 1\"\"\") == \"\"\"3\n0\n4\"\"\"\n\n# get input and call the solution function\nprint(solution(sys.stdin.read()))", "solution('''\n''') == '''\n'''\n\n# get the input\nlines = []\nwith open('input.txt', 'r') as inputFile:\n    for line in inputFile:\n        lines.append(line.strip())\n\n# remove the first line which is the number of test cases\ntest_case_count = int(lines[0])\nlines = lines[1:]\n\noutput = ''\n# loop through the test cases\nfor i in range(test_case_count):\n    input = lines[0]\n    lines = lines[1:]\n    output += str(solution(input)) + '\\n'\n\nprint(output)\n\n# write output to a file\nwith open('output.txt', 'w') as outputFile:\n    outputFile.write(output)", "solution(INPUT_0) == OUTPUT_0\nassert solution(INPUT_1) == OUTPUT_1\nassert solution(INPUT_2) == OUTPUT_2\n\n# benchmark\n# print(timeit.timeit(lambda: solution(INPUT_2), number=1))\n\n# ======== main ========\ndef main():\n    import sys\n    import os\n    import time\n    import resource\n\n    resource.setrlimit(resource.RLIMIT_STACK, (2**29, 2**30))\n    sys.setrecursionlimit(10**6)\n\n    if len(sys.argv) < 2:\n        print(\"Expected input and output files name\")\n        exit(0)\n\n    input_file = sys.argv[1]\n    output_file = sys.argv[2]\n\n    # read\n    start = time.time()\n    with open(input_file, 'r') as file:\n        stdin = file.read()\n    stop = time.time()\n    print(f'Read: {stop - start}')\n\n    # solve\n    start = time.time()\n    stdout = solution(stdin)\n    stop = time.time()\n    print(f'Solve: {stop - start}')\n\n    # write\n   ", "solution(\"\"\"\n1\n5\n2 4 1 5 3\n\"\"\") == \"\"\"\n2\n\"\"\", \"Example case\"\n\nassert solution(\"\"\"\n2\n2\n1 2\n2\n2 1\n\"\"\") == \"\"\"\n1\n0\n\"\"\", \"Two test cases\"\n\nassert solution(\"\"\"\n4\n4\n2 3 2 3\n4\n1 2 3 4\n4\n4 3 2 1\n4\n3 2 1 4\n\"\"\") == \"\"\"\n2\n1\n2\n1\n\"\"\", \"Four test cases\"\n\nassert solution(\"\"\"\n8\n2\n2 1\n2\n1 2\n3\n1 2 1\n3\n1 1 2\n3\n2 1 1\n3\n1 1 1\n3\n1 2 2\n3\n2 2 1\n\"\"\") == \"\"\"\n0\n0\n2\n2\n2\n2\n1\n1\n\"\"\", \"Eight test cases\"\n\nprint(\"All tests succeeded\")", "solution('''\n1\n5\n2 4 1 5 3\n''') == '''\n2\n'''\n\n# get the input from contest portal\nprint(solution(__import__('sys').stdin.read()))"], "finish_reason": ["length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop"], "sum_logprob": [-91.82144244689562, -19.522773917099997, -14.938063186950002, -19.167737712199997, -27.946025960574985, -40.345785797923, -7.129238707600001, -38.759293766819994, -82.26701670565998, -109.58172607501098, -38.57968432132999, -21.92797301105, -38.20856560727002, -31.9825891269, -7.038513699999999, -106.89472132520993, -18.680068711269993, -8.337301587570002, -34.8900335645, -10.6891846778, -111.55427719375695, -88.55456273466, -18.64439371677, -80.66380705265003, -12.390865666000002, -20.289751837699992, -126.6065303786401, -17.3850822367, -107.40861786286509, -12.867215996900004, -61.52514627003005, -11.5950350175, -10.509127460400002, -15.121325362940004, -111.37795406919108, -40.00355412448399, -83.43595678201198, -16.508521434000002, -9.614588328, -18.78743597814, -14.4072444438, -86.894929127213, -96.46706356791303, -14.564988128400001, -13.444984224226019, -48.200372364119985, -69.47629903346999, -95.76966475396497, -95.06355886355999, -34.752082544690005], "mean_logprob": [-0.30607147482298536, -0.46482795040714286, -0.5335022566767857, -0.5044141503210526, -0.22004744850846455, -0.4637446643439425, -0.445577419225, -0.880893040155, -0.5961378022149275, -0.42638803920237744, -0.5591258597294203, -0.509952860722093, -0.6263699279880328, -0.71072420282, -2.346171233333333, -0.3563157377507, -0.4245470161652273, -0.6947751322975, -0.6461117326759259, -0.8907653898166666, -0.37184759064585665, -0.6559597239604444, -0.6658712041703572, -0.5450257233287162, -0.8260577110666667, -0.4611307235840909, -0.5480802180893507, -0.4575021641236842, -0.35802872620955, -0.402100499903125, -0.38214376565236025, -0.362344844296875, -0.6181839682588235, -0.3877262913574359, -0.3712598468973037, -0.4878482210302927, -0.27811985594004, -1.500774675818182, -0.8740534843636364, -0.4582301458082927, -0.41163555553714287, -0.3081380465504007, -0.32155687855971, -0.5022409699448276, -0.04481661408075333, -0.5670632042837647, -0.37554756234308106, -0.31923221584655, -0.45053819366616116, -0.6556996706545283]}
{"prompt": "'''\nA total of n depots are located on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n3 2\n1 2 3\n''') == '4', 'failed test 1'\n\nassert solution('''\n1\n4 2\n0 1 2 3\n''') == '4', 'failed test 2'\n\nassert solution('''\n1\n5 3\n0 2 5 4 6\n''') == '10', 'failed test 3'\n\nassert solution('''\n1\n6 3\n0 3 4 2 5 1\n''') == '11', 'failed test 4'\n\nassert solution('''\n1\n7 2\n0 1 2 3 4 5 6\n''') == '14', 'failed test 5'\n\nassert solution('''\n1\n8 2\n0 1 2 3 4 5 6 7\n''') == '17', 'failed test 6'\n\nassert solution('''\n1\n9 2\n0 1 2 3 4 5 6 7 8\n''') == '21', 'failed test 7'\n\nassert solution('''\n1\n10 2\n0 1 2 3 4 5 6 7 8 9\n''') == '25', 'failed test 8'\n\nassert solution('''\n1\n10 3\n0 1 2 3 4 5 6 7 8 9\n''') == '21', 'failed test 9'\n\nassert solution('''\n1\n10 4\n0 1 2", "solution(\"Input\") == \"Output\"", "solution('''\n1\n5 3\n1 2 3 4 5\n''') == '''\n11\n'''\n\nassert solution('''\n1\n3 1\n1 0 1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1 1\n1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n3 2\n1 2 3\n''') == '''\n3\n'''\n\nassert solution('''\n1\n5 2\n1 2 3 4 5\n''') == '''\n15\n'''\n\nassert solution('''\n1\n4 2\n1 1 1 1\n''') == '''\n4\n'''\n\nassert solution('''\n1\n10 5\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n40\n'''\n\nassert solution('''\n1\n1 1\n1000000000\n''') == '''\n2000000000\n'''\n\nassert solution('''\n1\n1 1\n-1000000000\n''') == '''\n2000000000\n'''\n\nassert solution('''\n1\n1 1\n-1\n''') == '''\n2\n'''\n\nassert solution('''\n1\n1 1\n0\n''') == '''\n", "solutio('''\n1\n3 2\n1 2 3\n''') == '6'\n\n# let's print the result for quick feedback\nprint(solution('''\n4\n3 2\n1 2 3\n4 3\n1 2 3 4\n2 1\n1000000000 1000000000\n5 1\n1 2 3 4 5\n'''))", "solution(stdin) == stdout", "solution(\"\"\"1\n3 2\n1 3 7\n\"\"\") == \"5\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5 2\n5 -5 5 -5 5\n\"\"\") == \"10\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5 2\n-5 -5 -5 -5 -5\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n3 1\n3 3 3\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4 1\n4 4 4 4\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n2 2\n0 0\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n3 1\n0 0 0\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4 2\n1 1 1 1\n\"\"\") == \"2\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5 2\n-5 5 5 -5 5\n\"\"\") == \"10\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n1 1\n0\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n1", "solution('''1\n5 2\n1 3 5 8 8\n''') == '17'\nassert solution('''3\n3 2\n1 10 100\n3 2\n100 10 1\n5 2\n1 2 1 2 1\n''') == '109\\n109\\n4'\n\n# test for performance\ndef eval(sol, args):\n    t = time.time()\n    sol(args)\n    print(f'{time.time() - t}s')\n\n# eval(solution, '')", "solution(\"2\\n3 1\\n1 0 2\\n4 2\\n0 2 1 0\") == \"4\\n2\"", "solution(\"\"\"1\n2 1\n1 2\n\"\"\") == \"\"\"3\n\"\"\"\n\n# call the solution\nT = int(input())\nfor t in range(T):\n    N, K = map(int, input().split())\n    X = list(map(int, input().split()))\n    print(solution(stdin))", "solution('''\n3\n3 2\n0 1 2\n3 2\n1 1 2\n3 2\n0 0 1\n''') == '''\n3\n2\n2\n'''", "(solution('''2\n4 1\n3 1 4 2\n5 2\n10 1 10 10 1\n''') == '''4\n10''')", "solution(stdin) == stdout", "solution(sys.stdin.read()) == sys.stdout.read()", "solution(sample_input) == sample_output", "solution(stdin) == stdout", "solution(problem_text) == correct_answer", "solution(\"\") == \"\"\n\n# run the solution in main, do not edit\nif __name__ == \"__main__\":\n    from datetime import datetime\n    start_time = datetime.now()\n    print(solution(stdin=\"\"\"1\n6 3\n1 1 1 2 3 3\"\"\"))\n    print(datetime.now() - start_time)", "solution(\"1\\n5 3\\n2 3 4 6 7\") == \"5\"\nassert solution(\"1\\n10 4\\n1 1 1 2 2 2 3 3 3 4\") == \"1\"\nassert solution(\"1\\n10 4\\n1 2 3 4 5 6 7 8 9 10\") == \"13\"\nassert solution(\"2\\n2 1\\n0 10\\n2 1\\n0 20\") == \"20\\n40\"\nassert solution(\"3\\n3 1\\n0 1 2\\n4 2\\n0 1 2 3\\n5 3\\n0 1 2 3 4\") == \"3\\n5\\n7\"\nassert solution(\"10\\n10 1\\n0 1 2 3 4 5 6 7 8 9\\n20 2\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n30 3\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\\n40 4\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\\n50 5\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "solution(\"\"\"\n2\n2 1\n1 2\n2 1\n1 1\n\"\"\") == \"\"\"\n3\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 1\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 2\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 1\n1 2\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 1\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 1\n1 2\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 2\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 2\n1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 1\n2 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 1\n2 1\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness", "solution('''2\n2 2\n1 5\n3 2\n0 2 -1''') == '9\\n6'\n\nprint('Done.')", "solution(\"1\\n3 2\\n1 2 3\") == \"6\"\nassert solution(\"1\\n3 2\\n3 2 1\") == \"10\"\nassert solution(\"1\\n1 1\\n1\") == \"0\"\nassert solution(\"1\\n10 5\\n1 4 10 13 17 21 26 30 34 39\") == \"52\"\nassert solution(\"1\\n10 5\\n10 9 8 7 6 5 4 3 2 1\") == \"40\"\nassert solution(\"2\\n3 2\\n1 2 3\\n3 2\\n3 2 1\") == \"6\\n10\"\nassert solution(\"2\\n1 1\\n1\\n1 1\\n1\") == \"0\\n0\"\nassert solution(\"2\\n10 5\\n1 4 10 13 17 21 26 30 34 39\\n10 5\\n10 9 8 7 6 5 4 3 2 1\") == \"52\\n40\"\nassert solution(\"3\\n3 2\\n1 2 3\\n3 2\\n3 2 1\\n3 2\\n1 2 3\") == \"6\\n10\\n6\"\nassert solution(\"3\\n1 1\\n1\\n1 1\\n1\\n1 1\\n1\") == \"0\\n0\\n0\"\nassert solution(\"3\\n10 5\\n1", "solution('''\n0\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n1\n3 2\n1 2 3\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n1\n5 3\n1 1 1 1 1\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n6 4\n1 1 1 1 1 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n1 2\n1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n1 2\n0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n10 2\n-5 -4 -3 -2 -1 0 1 2 3 4\n''') == '20'\n\n# check the correctness of solution\nassert solution('''\n1\n5 2\n1 1 1 1 1\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n10 3\n-5 -4 -3 -2 -1 0 1 2 3 4\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n1\n10 4\n-5", "solution(\"\"\"1\n4 2\n-2 -1 2 3\n\"\"\") == \"10\"\n\nassert solution(\"\"\"2\n4 2\n0 1 2 3\n3 2\n0 1 2\n\"\"\") == \"11\"", "solution('''\n2\n2 2\n1 1\n1 1\n''') == '''\n1\n0\n'''\n\n# TODO: add another tests here\n\n# get input and run solution\n\n## read from terminal\n# stdin = input()\n\n## read from file\n# stdin = open('tests/input.txt').read()\n# stdin = open('tests/input.txt').read()\n\n# run\nsolution(stdin)", "solution(r'''\n''') == r'''\n'''\n\n# get input and output\ninputs = []\noutputs = []\n\n# read input for each case and append to list\nfor _ in range(int(input())):\n    inputs.append(input())\n\n# read output for each case and append to list\nfor _ in range(len(inputs)):\n    outputs.append(input())\n\n# print test case number and values\nfor i in range(len(inputs)):\n    print(f'Test {i + 1}:')\n    print(f'Input: {inputs[i]}')\n    print(f'Expected Output: {outputs[i]}')\n    print(f'Actual Output: {solution(inputs[i])}')\n    print()", "solution(test_io.test_data.test_data_3()) == test_io.test_data.test_data_3_solution(), \"solution doesn't match test data solution\"", "solution(__doc__) == ''''''", "solution(\"\"\"\n1\n5 2\n0 1 2 3 4\n\"\"\") == \"6\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3 2\n0 1 2\n5 2\n0 1 2 3 4\n10 1\n0 1 2 3 4 5 6 7 8 9\n\"\"\") == \"\"\"\n3\n6\n9\n\"\"\"", "solution(solution_input_sample) == solution_output_sample\n \n# check the performance of solution\nassert solution(solution_large_input) == solution_large_output", "solution('''\n''') == '''\n'''", "solution('''\n3\n1 1\n1\n1 1\n-1\n3 2\n-1 0 2\n''') == '''\n0\n2\n4\n'''", "solution(\"\"\"3\n3 1\n3 -5 7\n4 2\n-1 -1 2 5\n10 2\n4 -4 -4 3 3 3 3 -4 -4 4\n\"\"\") == \"\"\"\nCase #1: 16\nCase #2: 8\nCase #3: 39\n\"\"\"", "solution(stdin) == correct", "solution('''\n''') == '''\n'''", "solution(\"\"\"\n1\n5 3\n-10 -5 0 5 10\n\"\"\") == \"\"\"\n40\n\"\"\"\nassert solution(\"\"\"\n1\n1 1\n0\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1\n5 1\n-10 -5 0 5 10\n\"\"\") == \"\"\"\n40\n\"\"\"\nassert solution(\"\"\"\n1\n5 1\n-10 -5 0 5 10\n\"\"\") == \"\"\"\n40\n\"\"\"\nassert solution(\"\"\"\n1\n5 2\n-10 -5 0 5 10\n\"\"\") == \"\"\"\n30\n\"\"\"\nassert solution(\"\"\"\n1\n5 4\n-10 -5 0 5 10\n\"\"\") == \"\"\"\n20\n\"\"\"\nassert solution(\"\"\"\n1\n5 5\n-10 -5 0 5 10\n\"\"\") == \"\"\"\n10\n\"\"\"\nassert solution(\"\"\"\n1\n5 5\n-10 -5 0 5 10\n\"\"\") == \"\"\"\n10\n\"\"\"\nassert solution(\"\"\"\n1\n5 1\n-10 -5 0 5 10\n\"\"\") == \"\"\"\n40\n\"\"\"\nassert solution(\"\"\"\n1\n5 2\n-10 -5 0 5 10\n\"\"\") == \"\"\"\n30\n\"\"\"\nassert solution(\"\"\"\n1\n5 3\n-10 -5 0 5 10\n\"\"\") == \"\"\"\n40\n\"\"\"\nassert solution(\"\"\"\n1\n5 4\n", "solution('''\n1\n3 2\n10 10 20\n''') == '10'\n\nassert solution('''\n1\n5 3\n0 5 3 3 3\n''') == '9'\n\nassert solution('''\n1\n3 1\n100 100 100\n''') == '300'\n\nassert solution('''\n1\n5 4\n-1 -1 1 1 -1\n''') == '0'\n\n# get input\ninputs = []\n\nwith open('input.txt', 'r') as f:\n    num_tests = int(f.readline())\n    for _ in range(num_tests):\n        inputs.append(f.readline())\n\n# print the output of solution\nfor i, v in enumerate(inputs):\n    print('Case #%d: %s' % (i + 1, solution(v)))", "solution(SAMPLE_INPUT_STR) == SAMPLE_OUTPUT_STR\n\n# get input for running on TestDome\ndef get_input() -> str:\n    lines = []\n    while True:\n        try:\n            lines.append(input())\n        except EOFError:\n            break\n    return '\\n'.join(lines)\n\n# get output from the solution\ndef get_output(input_str: str) -> str:\n    lines = input_str.split('\\n')\n    t = int(lines[0])\n    input_lines = lines[1:]\n    line_i = 0\n    output_lines = []\n    for i in range(t):\n        n, k = map(int, input_lines[line_i].split())\n        xs = list(map(int, input_lines[line_i + 1].split()))\n        line_i += 2\n        output_lines.append(str(solution(n, k, xs)))\n    return '\\n'.join(output_lines)\n\n# run the solution and get the score from TestDome\ninput_str = get_input()\noutput_str = get_output(input_str)\nprint(output_str)", "solution('''\n1\n5 3\n1 2 4 6 8\n''') == '''\n14\n'''\nassert solution('''\n2\n4 2\n0 1 2 4\n4 2\n0 1 2 4\n''') == '''\n4\n4\n'''\nassert solution('''\n1\n5 3\n0 0 1 2 3\n''') == '''\n6\n'''\nassert solution('''\n1\n5 2\n-3 -2 -1 0 2\n''') == '''\n11\n'''\n\n# print the solution\nwith open('/home/sasha/Downloads/next-round.txt', 'r') as stdin:\n    print(solution(stdin.read()))", "solution(\"\"\"\n1\n3 2\n1 2 3\n\"\"\") == \"\"\"\n4\n\"\"\"\nassert solution(\"\"\"\n1\n3 1\n1 2 3\n\"\"\") == \"\"\"\n7\n\"\"\"\nassert solution(\"\"\"\n2\n2 1\n1 1\n3 2\n0 0 1\n\"\"\") == \"\"\"\n0\n1\n\"\"\"\nassert solution(\"\"\"\n2\n4 3\n0 1 3 4\n4 1\n1 2 3 4\n\"\"\") == \"\"\"\n5\n11\n\"\"\"\nassert solution(\"\"\"\n1\n1 1\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1\n5 2\n0 0 1 1 2\n\"\"\") == \"\"\"\n5\n\"\"\"\nassert solution(\"\"\"\n2\n2 1\n0 0\n2 1\n0 2\n\"\"\") == \"\"\"\n0\n2\n\"\"\"\nassert solution(\"\"\"\n1\n5 3\n0 2 3 4 4\n\"\"\") == \"\"\"\n9\n\"\"\"\nassert solution(\"\"\"\n1\n5 3\n0 1 3 4 4\n\"\"\") == \"\"\"\n8\n\"\"\"\nassert solution(\"\"\"\n2\n10 3\n-7 -6 -6 -4 -3 0 1 1 1 2\n10 3\n-7 -6 -6 -4 -3 0 1 1 1 3\n\"\"\") == \"\"\"\n29\n31\n\"\"\"\nassert solution(\"\"\"\n1\n10", "solution(\n'''\n2\n5 3\n0 1 2 3 4\n4 3\n5 4 1 2\n'''\n) == \\\n'''\n11\n4\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n1\n6 2\n0 0 0 0 0 0\n'''\n) == \\\n'''\n0\n'''\n\n# get a solution from HackerRank\nfrom utils import get_input\nfor i in range(0, 100):\n    solve(get_input(i))", "solution(\n    '''\n    1\n    4 2\n    1 2 4 8\n    '''\n) == '6'\n\n# check the correctness of solution\nassert solution(\n    '''\n    1\n    5 3\n    10 30 40 30 40\n    '''\n) == '50'\n\n# check the correctness of solution\nassert solution(\n    '''\n    1\n    5 2\n    1 2 1 2 1\n    '''\n) == '5'\n\n# check the correctness of solution\nassert solution(\n    '''\n    1\n    6 2\n    7 5 6 1 1 1\n    '''\n) == '12'\n\n# check the correctness of solution\nassert solution(\n    '''\n    1\n    10 4\n    1 2 3 4 1 2 3 4 1 2\n    '''\n) == '9'\n\n# check the correctness of solution\nassert solution(\n    '''\n    1\n    2 1\n    2 3\n    '''\n) == '5'\n\n# check the correctness of solution\nassert solution(\n    '''\n    1\n    4 2\n    1 2 3 4\n    '''\n) == '4'\n\n# check the correctness of solution\nassert solution(\n    '''\n    1\n    2 1\n    5 5\n   ", "solution('''\n1\n3 2\n1 2 1\n''') == '3'\nassert solution('''\n1\n1 1\n1\n''') == '0'\nassert solution('''\n2\n2 1\n0 1\n2 1\n1 1\n''') == '2\\n0'\n\n# fake stdin for the judge\nclass FileStdin:\n    def __init__(self, input_str: str):\n        self.current_line = iter(input_str.split('\\n'))\n    def readline(self) -> str:\n        try:\n            return next(self.current_line)\n        except StopIteration:\n            return ''\n    \nif __name__ == '__main__':\n    # read the input for the judge\n    stdin = FileStdin(stdin_str)\n    # print the result\n    print(solution(stdin_str))", "\"expected output\" == solution(\"\"\"\ninput\n\"\"\")\n\n# check time/memory complexity\nimport time\nimport resource\n\nstart_time = time.time()\ncur_memory = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss\nassert \"expected output\" == solution(\"\"\"\ninput\n\"\"\")\n\nprint(\"time: {} seconds, memory: {} MB\".format(time.time() - start_time,\n                                               (resource.getrusage(resource.RUSAGE_SELF).ru_maxrss - cur_memory) / (1024 ** 2)))", "solution('''\n2\n4 3\n3 -3 3 3\n6 3\n1 3 4 6 7 9\n''') == '''\n6\n23\n'''", "solution('''\n''') == '''\n'''", "solution('''\n1\n3 1\n1 2 3\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n2\n3 1\n1 2 3\n2 1\n2 3\n''') == '5\\n4'\n\n# check the correctness of solution\nassert solution('''\n1\n4 2\n-10 -7 0 3\n''') == '17'\n\n# check the correctness of solution\nassert solution('''\n1\n4 2\n-10 -7 0 3\n''') == '20'\n\n# check the correctness of solution\nassert solution('''\n2\n4 3\n-10 -7 0 3\n4 2\n-10 -7 0 3\n''') == '0\\n17'\n\n# check the correctness of solution\nassert solution('''\n1\n2 1\n-10 -7\n''') == '20'\n\n# check the correctness of solution\nassert solution('''\n1\n1 2\n0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n3 1\n1 2 3\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n1\n5 2\n1 1 2 2 3\n''') == '9'\n\n# check the correctness of solution", "solution('''1\n3 1\n0 1 2''') == '3'\nassert solution('''2\n3 2\n0 1 2\n3 2\n0 2 4''') == '3 4'\nassert solution('''1\n5 3\n-1 0 -1 2 5''') == '7'\nassert solution('''1\n2 1\n0 1''') == '1'\nassert solution('''1\n2 2\n0 1''') == '1'\nassert solution('''1\n3 2\n0 1 2''') == '3'\nassert solution('''1\n3 3\n0 1 2''') == '3'\nassert solution('''1\n4 2\n0 1 2 3''') == '4'\nassert solution('''1\n4 3\n0 1 2 3''') == '6'\nassert solution('''1\n5 1\n0 1 2 3 4''') == '10'\nassert solution('''1\n5 2\n0 1 2 3 4''') == '8'\nassert solution('''1\n5 3\n0 1 2 3 4''') == '6'\nassert solution('''1\n5 4\n0 1 2 3 4''') == '4'\nassert solution('''1\n5 5\n0 1 2 3 4''') == '4'", "solution(\"\"\"\n1\n5 2\n-4 3 -2 3 3\n\"\"\") == \"0\"", "solution('''\n1\n4 3\n2 3 1 4\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n3\n3 2\n1 2 3\n3 2\n3 2 1\n3 2\n3 1 2\n''') == '5\\n3\\n5'", "solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\"\"\n1\n5 2\n1 2 3 4 5\n\"\"\") == \"2\""], "finish_reason": ["length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop"], "sum_logprob": [-88.02669368443267, -10.258495917, -81.41041600117963, -67.58753444899997, -5.186553884, -97.41315355850004, -102.30324133168001, -27.024031777169995, -37.8508261505, -24.950642324500006, -35.7078025664, -5.194050903000001, -7.701560742450001, -6.397263825060001, -5.185691510500001, -14.591561493999999, -65.87328349956401, -98.02696627571203, -65.84716668443497, -39.148608914499995, -76.95717948332793, -81.16665890615405, -38.80210071309999, -92.32721049370002, -80.34154667709007, -41.46977388135999, -10.8305555129, -38.293109746339994, -21.016793080509995, -6.097123762999999, -23.037453469199995, -70.92908708415, -11.074608141, -6.106214570000001, -58.337201809656015, -110.63844043576005, -84.16329566482703, -103.202063854047, -147.9055477896178, -88.30380929526999, -117.29197481681483, -115.48138683640902, -68.78936524159695, -36.344658631499996, -6.085650934000001, -102.24808903031196, -81.69177600003889, -28.668820787, -42.34871015658999, -26.282460510999996], "mean_logprob": [-0.29342231228144233, -1.1398328796666666, -0.271368053337265, -0.8448441806125, -0.5762837648888889, -0.32471051186166666, -0.8596911036275631, -0.871742960553871, -0.47912438165189875, -0.5802474959186047, -1.0202229304685715, -0.577116767, -0.4278644856916667, -0.5815694386418182, -0.5761879456111111, -1.3265055903636365, -0.7659684127856279, -0.3267565542523733, -0.21949055561478334, -1.087461358736111, -0.2565239316110933, -0.27055552968718, -0.7608255041784313, -0.8628711261093458, -0.42963393944967915, -0.9215505306968889, -0.9845959557181818, -0.47866387182925, -0.5003998352502381, -0.4355088402142857, -0.5618891090048781, -1.0746831376386363, -1.384326017625, -0.4361581835714286, -0.19445733936552, -0.5559720624912563, -0.2912224763488824, -0.6142979991312322, -0.49301849263206, -0.7297835478947934, -0.390973249389383, -0.54472352281325, -0.5058041561882133, -0.9319143238846154, -0.43468935242857143, -0.34082696343437335, -0.27230592000013, -1.1945341994583334, -0.5881765299526389, -0.7730135444411764]}
{"prompt": "'''\nPetya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n3\n6\n1 0 1 0 1 0\n5\n1 0 1 0 1\n5\n1 1 1 1 1\n\"\"\") == \"\"\"\n5\n5\n5\n\"\"\"", "solution('''\n3\n3\n1 0 1\n3\n1 1 1\n3\n0 0 0\n''') == '''\n3\n6\n-1\n'''", "solution('''\n2\n10\n1 0 1 0 1 0 1 0 1 0\n2\n1 1\n''') == '''\n14\n6\n'''\n\nassert solution('''\n3\n3\n1 1 1\n3\n1 0 1\n3\n0 1 0\n''') == '''\n12\n3\n-1\n'''\n\nassert solution('''\n2\n2\n1 1\n4\n1 1 1 1\n''') == '''\n7\n20\n'''\n\nassert solution('''\n5\n5\n1 1 1 1 1\n5\n1 0 1 0 1\n5\n0 1 0 1 0\n5\n0 0 0 0 0\n5\n1 0 0 0 1\n''') == '''\n26\n-1\n-1\n0\n3\n'''\n\nassert solution('''\n5\n5\n1 0 0 0 1\n5\n1 0 0 1 1\n5\n1 0 1 1 1\n5\n1 1 1 1 1\n5\n0 0 0 0 0\n''') == '''\n5\n5\n5\n5\n0\n'''\n\nassert solution('''\n4\n4\n1 1 1 1\n5\n1 1 1 1 1\n5\n1 0 1 0 1\n5\n0 1 0 1 0\n''') == '''\n19", "solution(sample_input) == sample_output\n\n# check the correctness of solution for example \"6\\n0 1 0 1 0 1\"\nassert solution(\"6\\n0 1 0 1 0 1\") == \"3\"\n\n# check the correctness of solution for example \"7\\n1 1 1 1 1 1 1\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"7\"\n\n# check the correctness of solution for example \"5\\n0 0 0 0 0\"\nassert solution(\"5\\n0 0 0 0 0\") == \"-1\"\n\n# check the correctness of solution for example \"1\\n1\"\nassert solution(\"1\\n1\") == \"1\"\n\n# check the correctness of solution for example \"100\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "solution(\"\"\"\\\n2\n5\n1 0 1 0 1\n5\n1 1 1 1 1\n\"\"\") == \"\"\"\\\n6\n35\n\"\"\"\n\nimport unittest\nfrom subprocess import Popen, PIPE, STDOUT\n\nclass Test(unittest.TestCase):\n    def setUp(self):\n        self.process = Popen(['python', '-u', 'main.py'], stdout=PIPE, stderr=STDOUT, stdin=PIPE)\n\n    def tearDown(self):\n        self.process.kill()\n\n    def test_one(self):\n        self.process.stdin.write(b\"\"\"\\\n2\n5\n1 0 1 0 1\n5\n1 1 1 1 1\n\"\"\")\n        self.process.stdin.close()\n        self.assertEqual(self.process.stdout.read().decode(), \"\"\"\\\n6\n35\n\"\"\")\n\nunittest.main()", "solution(\"1\\n3\\n1 1 0\") == \"1\"\nassert solution(\"2\\n6\\n1 0 1 0 1 0\\n5\\n1 1 1 1 1\") == \"11\\n-1\"", "solution('''\n2\n5\n1 0 1 0 1\n7\n1 0 1 1 0 0 1\n''') == '''\n11\n-1\n'''\n\ndef solution_v2(stdin: str) -> str:\n    # parse input\n    lines = stdin.splitlines()\n    num_test_cases = int(lines[0])\n    results = []\n    for i in range(1, num_test_cases * 2, 2):\n        num_days = int(lines[i])\n        watering_pattern = tuple(map(int, lines[i + 1].split()))\n        # solve\n        height = solution_for_single_case(num_days, watering_pattern)\n        results.append(height)\n    # format output\n    return '\\n'.join(map(str, results))\n\ndef solution_for_single_case(num_days: int, watering_pattern: tuple) -> int:\n    # base case: 1 <= num_days <= 2\n    if num_days <= 2:\n        return num_days\n    # base case: 3 <= num_days\n    days_to_grow = (5, 1)\n    height = 2\n    for i in range(2, num_days):\n        if watering_pattern[i] == 0:", "solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n''", "solution('''\n5\n5\n1 0 1 0 1\n5\n1 1 1 1 1\n5\n0 0 0 0 0\n3\n1 0 1\n1\n1\n''') == '''\n10\n-1\n0\n3\n-1\n'''", "solution('''\n1\n3\n1 1 0\n''') == '''\n6\n'''\n\nassert solution('''\n2\n3\n1 1 0\n4\n1 1 1 0\n''') == '''\n6\n-1\n'''\n\n# print(solution('''\n# 3\n# 5\n# 1 1 1 1 1\n# 5\n# 1 1 1 1 0\n# 5\n# 1 1 1 0 0\n# '''))\n\n# Runtime error\n# assert solution('''\n# 5\n# 10\n# 1 1 1 1 1 1 1 1 1 1\n# 10\n# 1 1 1 1 1 1 1 1 1 0\n# 10\n# 1 1 1 1 1 1 1 1 0 0\n# 10\n# 1 1 1 1 1 1 1 0 0 0\n# 10\n# 1 1 1 1 1 1 0 0 0 0\n# ''') == '''\n# 10\n# 11\n# 11\n# 11\n# 11\n# '''", "solution(\"\"\"2\n10\n1 0 1 0 1 0 1 0 1 0\n10\n1 1 1 1 1 1 1 1 1 1\"\"\") == \"\"\"3\n11\"\"\"\n\n# check performance of solution\nfrom random import randint\nfrom itertools import repeat\nfrom functools import reduce\n\nfrom timeit import default_timer as timer\n\ni = 0\nwhile True:\n    i += 1\n    n = randint(1, 10)\n    a = list(map(str, repeat(randint(0, 1), n)))\n    stdin = f\"1\\n{n}\\n{' '.join(a)}\"\n    start = timer()\n    solution(stdin)\n    end = timer()\n    if reduce(lambda acc, e: acc + e, a) > 1:\n        assert end - start < 1.0, f\"{stdin}\\n{end - start}\"\n    else:\n        assert end - start < 0.5, f\"{stdin}\\n{end - start}\"\n    print(\".\", end=\"\")", "solution('''\n1\n1\n1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n1 1\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 1 0\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 1 0 1\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1 0 1 1\n''') == '11'\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 1 0 1 1 1\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n1\n7\n1 1 0 1 1 1 1\n''') == '21'\n\n# check the correctness of solution\nassert solution('''\n1\n8\n1 1 0 1 1 1 1 1\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n1\n9\n1 1 0 1 1 1 1 1 1\n''') == '-1", "solution('''\n2\n3\n1 0 1\n4\n1 1 0 1\n''') == '''\n-1\n-1\n'''", "solution('''5\n5\n1 0 1 0 1\n5\n1 1 1 1 1\n10\n1 0 1 0 1 0 1 0 1 0\n10\n1 1 1 1 1 1 1 1 1 1\n10\n0 0 0 0 0 0 0 0 0 0''') == '''15\n-1\n30\n55\n-1'''", "solution('''2\n4\n1 0 1 1\n4\n1 1 1 1''') == '''7\n-1'''", "solution(\"1\\n5\\n1 0 1 0 1\") == \"11\"\nassert solution(\"1\\n7\\n1 0 0 1 0 0 1\") == \"-1\"\nassert solution(\"1\\n2\\n1 1\") == \"2\"\nassert solution(\"1\\n3\\n1 1 1\") == \"7\"\nassert solution(\"1\\n4\\n1 1 1 1\") == \"15\"\nassert solution(\"1\\n8\\n1 1 1 1 1 1 1 1\") == \"63\"\nassert solution(\"1\\n9\\n1 1 1 1 1 1 1 1 1\") == \"127\"\nassert solution(\"1\\n10\\n1 1 1 1 1 1 1 1 1 1\") == \"255\"\nassert solution(\"1\\n11\\n1 1 1 1 1 1 1 1 1 1 1\") == \"511\"\nassert solution(\"1\\n12\\n1 1 1 1 1 1 1 1 1 1 1 1\") == \"1023\"\nassert solution(\"1\\n13\\n1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"2047\"\nassert solution(\"1\\n14\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"4095\"\nassert solution(\"1\\n15\\n1 1 1 1 1 1 1 1 1 1 1", "solution('''\n4\n6\n1 0 1 0 1 0\n3\n1 1 1\n2\n1 0\n6\n1 0 1 0 1 1\n''') == '''\n6\n-1\n-1\n15\n'''", "solution(\"\"\"5\n5\n1 0 1 0 1\n5\n1 1 1 1 1\n3\n1 1 0\n5\n1 0 0 0 1\n5\n1 0 1 0 0\n\"\"\") == \"\"\"7\n6\n2\n2\n-1\n\"\"\"", "solution(\"\") == \"\"", "solution(sample_input) == expected_output\n\n\n\n'''\n# Solution 1\n# We can use two lists to keep track of current (next) and last day's growth of the flower.\n# A sum of the two lists will give us the growth at the end of the next day.\n# We can also keep track of what is the current maximum flower height so far.\n# If the maximum flower height is two days in a row equal to zero, then the flower dies.\n\nA = [1]\nB = [0]\nx = 1\nmax_height = 1\nfor i in range(1, n):\n    if L[i] == 1:\n        x = x + A[i-1] + 1\n    else:\n        x = x + A[i-1]\n    A.append(x)\n    if x > max_height:\n        max_height = x\n    else:\n        B.append(x)\n    A = B\n    B = []\n    if max_height == 0:\n        print(-1)\n        break\nif i == n-1:\n    print(x)\n'''\n\n'''\n# Solution 2\n\nA = [1]\nmax_height = 1\nfor i in range(1, n):\n    if L[i] == 1:\n", "solution('''\n2\n2\n1 0\n5\n1 0 1 0 1\n''') == '''\n-1\n16\n'''", "solution('''\n3\n3\n1 0 1\n3\n1 1 1\n3\n0 0 0\n''') == '''\n4\n9\n-1\n'''\n\n# check for time limit\nfrom time import time\nfrom datetime import timedelta\n\nfrom unit_test_toolbox import Runtimer\n\nfrom solution import solution as test_solution\n\nfrom random import randint\nfrom string import ascii_letters\nfrom random import choice\n\nfrom input_generator import generate_input_set\n\nfrom utils import get_input_from_file, random_list_of_list\n\nfrom os import path\n\nfrom functools import reduce\n\nruntimer = Runtimer()\nruntimer.start()\n\n# generate random input set\ninput_set = generate_input_set()\n\n# calculate the expected result\nexpected_output = str(reduce(lambda x, y: x + y, map(lambda x: max(x), map(lambda x: reduce(lambda l1, l2: l1 + l2, x), map(lambda x: [[1], [5, 1]][x[0]], input_set)))))\n\n# write input set to file\ninput_set_file_path = 'input.txt'\nwith open(input_set_file_", "solution(r'''\n1\n4\n1 0 1 1\n''') == r'''\n4\n'''\n\n# get the input for solution\nstdin = r'''\n\n'''\n# get output from solution\nstdout = solution(stdin)\n# print output\nprint(stdout)", "solution('''\n1\n4\n1 0 1 1\n''') == '5'\n\nassert solution('''\n2\n5\n1 0 0 1 0\n5\n1 1 1 1 1\n''') == '-1'\n\nassert solution('''\n1\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '10'\n\n# test the performance of solution\nassert solution('''\n3\n10\n1 1 1 1 1 1 1 1 1 1\n10\n1 1 1 1 1 1 1 1 1 1\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n10\n10\n10\n'''", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution", "solution(\"\"\"\\\n2\n10\n1 0 1 0 1 0 1 0 1 0\n5\n1 0 1 0 1\n\"\"\") == \"\"\"\\\n21\n-1\n\"\"\"", "solution(r'''\n2\n5\n1 0 1 0 1\n2\n1 1\n''') == r'''\n7\n-1\n'''", "solution(\"\"\"\n3\n3\n1 0 1\n3\n1 1 1\n3\n0 0 0\n\"\"\") == \"\"\"\n2\n6\n-1\n\"\"\"\n\n# get the input\ninput = stdin\nprint(solution(input))", "solution('''3\n3\n1 0 1\n3\n1 1 1\n3\n0 0 0''') == '5\\n-1\\n0'", "solution('''\n2\n2\n1 0\n5\n1 0 1 0 1\n''') == '''\n5\n15\n'''\n\n# get the input\nn = int(input())\n\nfor _ in range(n):\n    days = int(input())\n    history = [int(i) for i in input().split()]\n\n    plant = 1\n    for i in range(1, days):\n        if history[i] == 0 and history[i-1] == 0:\n            print(-1)\n            break\n        elif history[i] == 1 and history[i-1] == 1:\n            plant += 5\n        elif history[i] == 1:\n            plant += 1\n        else:\n            continue\n    else:\n        print(plant)", "solution(\"\") == \"\"", "solution(\"\"\"0\n1 1\n2\n1 1\n0 1\n2\n1 1\n1 0\n3\n1 1 1\n1 0 1\n1 1 0\n\"\"\") == \"\"\"1\n-1\n2\n-1\n7\n\"\"\", \"Wrong answer!\"\nassert solution(\"\"\"1\n5\n1 0 1 1 1\n\"\"\") == \"\"\"5\n\"\"\", \"Wrong answer!\"", "solution('''\n2\n5\n1 0 1 0 1\n5\n1 1 1 1 1\n''') == '''\n6\n16\n'''\n\n# check the performance of solution\nimport random\nimport string\nimport time\n\ndef gen_random_string(len: int = 10) -> str:\n    return ''.join(random.choice(string.ascii_letters) for _ in range(len))\n\ndef performance_test(solution, input_size=10000, iterations=10):\n    from random import randint\n    time_taken = 0\n    input_string = ''\n    input_string += f'{iterations}\\n'\n    for _ in range(iterations):\n        input_string += f'{input_size}\\n'\n        input_string += ' '.join([str(randint(0, 1)) for _ in range(input_size)])\n        input_string += '\\n'\n    start = time.time()\n    solution(input_string)\n    time_taken += time.time() - start\n    print(f'Time taken: {time_taken * 1000} ms')\n\nperformance_test(solution)", "solution(r'''\n2\n6\n1 0 1 0 1 0\n5\n1 0 1 1 0\n''') == r'''\n10\n-1\n'''\n\n# test the performance of solution\nimport random\n\nstdin = r'''\n'''\nn = 10000\nfor i in range(n):\n    x = random.randint(0, 1)\n    stdin += str(x) + ' '\nstdin = str(n) + '\\n' + stdin + '\\n'\n\nimport time\n\nt = time.time()\nsolution(stdin)\n\nprint('time:', time.time() - t)", "solution('''\n\n''') == '''\n\n'''", "(solution(stdin_sample)) == stdout_sample\n\n# get output from the program\nstdout = solution(stdin)\n\n# print output\nprint(stdout)", "solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert solution(stdin) == \"...\"\nassert", "solution(\"\") == \"\", \"Invalid output\"\n\n# check the speed of solution\nassert solution(\"\") == \"\", \"Invalid output\"", "solution('''\n10\n\n3\n0 1 0\n\n3\n1 0 1\n\n3\n1 1 1\n\n3\n0 0 0\n\n3\n1 1 0\n\n6\n1 1 1 1 1 1\n\n6\n0 0 0 0 0 0\n\n6\n1 0 1 0 1 0\n\n6\n1 0 0 0 0 1\n\n6\n1 0 0 0 1 0\n''') == '''\n3\n5\n11\n-1\n1\n11\n-1\n5\n5\n11\n'''", "solution(SAMPLE_INPUT_1) == SAMPLE_OUTPUT_1\nassert solution(SAMPLE_INPUT_2) == SAMPLE_OUTPUT_2", "solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Empty case\"", "solution('''\n2\n10\n1 0 1 0 1 0 1 0 1 0\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n11\n15\n'''\n\n# test input solution\nstdin = '''\n5\n5\n1 0 1 0 1\n5\n1 1 1 1 1\n5\n0 0 0 0 0\n5\n1 0 0 0 1\n5\n1 0 0 1 1\n'''\n\n# main\nprint(solution(stdin))", "solution(input) == \"yes\"\n\n\n'''\nTutorial\n\ndef solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\\\n1 2 3\\\\n2 3 4\\\\n5 6 7\")\n    \"0\\\\n5\\\\n18\"\n    \"\"\"\n    pass\n\ndef solve(a: List[int]) -> int:\n    \"\"\"\n    >>> solve([1, 2, 3])\n    6\n    \"\"\"\n    pass\n'''", "solution('''\n1\n5\n1 0 1 0 1\n''') == '9'\n\nassert solution('''\n2\n5\n1 0 1 0 1\n5\n1 1 1 1 1\n''') == '9\\n15'\n\nassert solution('''\n3\n5\n1 0 1 0 1\n10\n1 1 1 1 1 1 1 1 1 1\n5\n0 0 0 0 0\n''') == '9\\n30\\n-1'\n\nassert solution('''\n4\n5\n1 0 1 0 1\n10\n1 1 1 1 1 1 1 1 1 1\n5\n0 0 0 0 0\n15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '9\\n30\\n-1\\n45'\n\nassert solution('''\n5\n5\n1 0 1 0 1\n10\n1 1 1 1 1 1 1 1 1 1\n5\n0 0 0 0 0\n15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '9\\n30\\n-1\\n45\\n60'\n\nassert solution('''\n6\n5\n1 0 1 0 1\n10\n", "solution(r'''\n2\n3\n1 0 1\n2\n1 1\n''') == r'''\n3\n-1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n2\n1 1\n''') == r'''\n6\n'''", "solution(\"\"\"1\n4\n1 0 1 1\"\"\") == \"6\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n1 1 1 1\"\"\") == \"8\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n1 0 0 1 0\"\"\") == \"-1\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n1 1 1 1 1\"\"\") == \"10\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n1 0 1 0 1\"\"\") == \"6\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n1 0 0 0 1\"\"\") == \"-1\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n1 1 0 1 1\"\"\") == \"11\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n1 1 1 0 1\"\"\") == \"10\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n1 1 1 1 0\"\"\") == \"10\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n1 0 1 1 0\"\"\") == \"-1\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n1 0 0 1 1\"\"\") == \"-1\"\n\n# check", "solution(None) == None", "solution('''\n''') == '''\n'''\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# submit solution", "solution('''\n5\n8\n1 0 1 0 1 0 1 0\n6\n1 0 1 0 1 0\n9\n1 0 1 0 1 0 1 0 1\n8\n1 0 1 0 1 0 1 0\n10\n1 0 1 0 1 0 1 0 1 0\n''') == '''\n6\n3\n-1\n5\n3\n'''", "solution('''3\n4\n1 0 1 1\n10\n1 1 1 1 1 1 1 1 1 1\n5\n1 0 0 1 1''') == '''9\n-1\n1'''"], "finish_reason": ["stop", "stop", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-27.7734886252, -17.0252347212, -121.76717647464305, -65.33968923963103, -75.57348875244871, -27.055068926300002, -139.9735892407091, -15.925024609296887, -29.442044444630007, -72.25218429678041, -120.60158103801406, -44.111481165033005, -18.3211566143, -36.79308388441998, -17.3443756904, -50.839125757839675, -32.468559176180015, -37.41149909707, -5.753364864, -230.1024545041499, -20.048214101099997, -261.6610332923796, -45.90214787530001, -54.232321842157965, -13.416491161232992, -24.419028941750003, -17.734541600430003, -33.647681965850005, -19.26996791972, -64.99190975168, -5.748288255, -60.40002481547, -124.11745971544198, -73.17201633105005, -7.107122613200001, -29.438501831940002, -23.188158789088, -22.321197981500003, -65.93366553235997, -10.812327892642996, -15.941184912699995, -67.16989143680001, -94.75259484762002, -60.90370269147201, -26.581026664730004, -63.57251520212798, -8.1292928034, -22.423807492199, -44.59320920853001, -29.083845602719997], "mean_logprob": [-0.6312156505727272, -0.41524962734634147, -0.40589058824881, -0.21779896413210334, -0.33588217223310535, -0.5202897870442308, -0.46657863080236334, -0.053083415364323, -0.4748716845908064, -0.3211208190968018, -0.5004214980830456, -0.14703827055011, -0.5234616175514286, -0.4657352390432911, -0.5594959900129032, -0.16946375252613233, -0.5903374395669091, -0.6235249849511667, -0.9588941440000001, -0.7670081816805, -0.5896533559147059, -0.8722034443079316, -0.6465091250042253, -0.35445961988338565, -0.04472163720411, -0.59558607175, -0.4926261555675, -0.590310209927193, -0.5208099437762163, -0.357098405229011, -0.9580480425, -0.6711113868385555, -0.45298342961840143, -0.4782484727519608, -0.44419516332500003, -0.7009167102842857, -0.07729386263029334, -0.7200386445645162, -0.5360460612386991, -0.2637153144547073, -0.3391741470787234, -0.5790507882482758, -0.8536269806091892, -0.20301234230490667, -0.39089745095191175, -0.21190838400709333, -1.1613275433428571, -0.20956829431961682, -0.5372675808256626, -0.6188052255897872]}
{"prompt": "'''\nThe problem statement looms below, filling you with determination.\n\nConsider a grid in which some cells are empty and some cells are filled. Call a cell in this grid exitable if, starting at that cell, you can exit the grid by moving up and left through only empty cells. This includes the cell itself, so all filled in cells are not exitable. Note that you can exit the grid from any leftmost empty cell (cell in the first column) by going left, and from any topmost empty cell (cell in the first row) by going up.\n\nLet's call a grid determinable if, given only which cells are exitable, we can exactly determine which cells are filled in and which aren't.\n\nYou are given a grid a of dimensions n \u00d7 m , i. e. a grid with n rows and m columns. You need to answer q queries (1 \u2264 q \u2264 2 \u22c5 10^5). Each query gives two integers x_1, x_2 (1 \u2264 x_1 \u2264 x_2 \u2264 m) and asks whether the subgrid of a consisting of the columns x_1, x_1 + 1, \u2026, x_2 - 1, x_2 is determinable.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 10^6, nm \u2264 10^6) \u2014 the dimensions of the grid a.\n\nn lines follow. The y-th line contains m characters, the x-th of which is 'X' if the cell on the intersection of the the y-th row and x-th column is filled and \".\" if it is empty.\n\nThe next line contains a single integer q (1 \u2264 q \u2264 2 \u22c5 10^5) \u2014 the number of queries.\n\nq lines follow. Each line contains two integers x_1 and x_2 (1 \u2264 x_1 \u2264 x_2 \u2264 m), representing a query asking whether the subgrid of a containing the columns x_1, x_1 + 1, \u2026, x_2 - 1, x_2 is determinable.\n\nOutput\n\nFor each query, output one line containing \"YES\" if the subgrid specified by the query is determinable and \"NO\" otherwise. The output is case insensitive (so \"yEs\" and \"No\" will also be accepted).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3 3\n...\n.X.\n...\n3\n1 1\n2 2\n3 3\n''') == '''\nYES\nNO\nYES\n'''\n\nassert solution('''\n3 3\n...\nXXX\n...\n3\n1 1\n2 2\n3 3\n''') == '''\nYES\nYES\nYES\n'''\n\nassert solution('''\n4 4\n..X.\n.X..\n..X.\n.X..\n4\n1 1\n2 2\n3 3\n4 4\n''') == '''\nYES\nNO\nYES\nNO\n'''\n\n# assert solution('''\n# 5 5\n# .....\n# .....\n# .....\n# .....\n# .....\n# 5\n# 1 1\n# 2 2\n# 3 3\n# 4 4\n# 5 5\n# ''') == '''\n# YES\n# YES\n# YES\n# YES\n# YES\n# '''\n\n# assert solution('''\n# 4 4\n# X.X.\n# X.X.\n# X.X.\n# X.X.\n# 4\n# 1 1\n# 2 2\n# 3 3\n# 4 4\n# ''') == '''\n# NO\n# NO\n# NO\n# NO\n# '", "solution('''\n5 5\n.....\n....X\n....X\n....X\n.XXX.\n5\n2 2\n2 5\n1 5\n1 4\n1 3\n''') == '''\nYES\nYES\nYES\nYES\nNO\n'''\n# test to check the time limit\nimport timeit\n\nif __name__ == '__main__':\n    # Test 1\n    print(timeit.timeit(\n        stmt=\"solution('''\\n5 5\\n.....\\n....X\\n....X\\n....X\\n.XXX.\\n5\\n2 2\\n2 5\\n1 5\\n1 4\\n1 3\\n''')\",\n        setup=\"from __main__ import solution\",\n        number=1\n    ))\n\n    # Test 2\n    print(timeit.timeit(\n        stmt=\"solution('''\\n1 1\\n.\\n1\\n1 1\\n''')\",\n        setup=\"from __main__ import solution\",\n        number=1\n    ))", "solution(\"\"\"\n3 3\n...\n...\n...\n3\n1 1\n1 2\n1 3\n\"\"\") == \"\"\"\nYES\nYES\nYES\n\"\"\"\nassert solution(\"\"\"\n3 3\n.X.\n.X.\n.X.\n1\n1 1\n\"\"\") == \"\"\"\nNO\n\"\"\"\nassert solution(\"\"\"\n3 3\n.X.\nXXX\n.X.\n2\n1 1\n1 3\n\"\"\") == \"\"\"\nNO\nYES\n\"\"\"\nassert solution(\"\"\"\n1 6\n......\n2\n2 3\n2 4\n\"\"\") == \"\"\"\nYES\nYES\n\"\"\"\nassert solution(\"\"\"\n2 3\n..X\n.X.\n1\n1 2\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# run with python3\n# import os\n# filename = \"filename.txt\"\n# if not os.path.exists(filename):\n#     print(\"no input file\")\n# else:\n#     file = open(filename, \"r\")\n#     stdin = file.read()\n#     solution(stdin)", "solution('''\n2 3\nXX.\n.X.\n1\n1 3\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\nXX.\n...\n1\n1 3\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n3 5\n.....\n.XX..\n.....\n3\n1 5\n2 5\n3 5\n''') == '''\nYES\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2\nXX\nXX\n1\n1 2\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2\nXX\n..\n1\n1 2\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1 3\n...\n2\n1 1\n1 3\n''') == '''\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3\n...\n...\n...\n4\n1 1\n1 3\n2 2\n3 3\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution(''", "solution('''\n1 2\nX.\n1\n1 2\n''') == 'YES'\n\nassert solution('''\n3 2\nXX\n.X\n.X\n1\n1 2\n''') == 'NO'\n\nassert solution('''\n3 2\nXX\n.X\nXX\n1\n1 2\n''') == 'YES'\n\nassert solution('''\n3 2\nX.\nXX\nX.\n2\n1 2\n2 2\n''') == '''\nYES\nNO\n'''\n\nassert solution('''\n3 2\nX.\nXX\nX.\n1\n1 2\n''') == 'YES'", "solution('''\n4 5\nXX...\nXX.XX\n.....\n..XXX\n2\n2 4\n2 5\n''') == '''\nYES\nNO\n'''\n\nassert solution('''\n4 5\n.X...\n.X.XX\n.....\n..XXX\n2\n2 4\n2 5\n''') == '''\nYES\nYES\n'''\n\nassert solution('''\n4 5\n.X...\n.X.XX\n.....\n..XXX\n2\n1 5\n1 2\n''') == '''\nYES\nNO\n'''\n\nassert solution('''\n4 5\n.X...\n.X.XX\n.....\n..XXX\n2\n4 5\n4 5\n''') == '''\nYES\nYES\n'''\n\nassert solution('''\n4 5\n...XX\n...XX\n.....\n..XXX\n2\n4 5\n4 5\n''') == '''\nNO\nNO\n'''\n\nassert solution('''\n4 5\n.X...\n.X.XX\n.....\n..XXX\n2\n1 1\n1 1\n''') == '''\nYES\nYES\n'''\n\n#\n#\n#\n#     __     __     ______     ______     ______     ______     ______     ______     ______     ______     ______     ______     ______     ______    ", "solution('''\\\n4 4\n..X.\n.X..\n.X..\n.X..\n4\n1 2\n1 4\n3 4\n1 1\n''') == '''\\\nYES\nYES\nNO\nYES\n'''\n\n# check time limit\nimport timeit\ntimeit.timeit('solution(r\\'\\'\\'\\n6 6\\n.....X\\n..X...\\n...X..\\n.X....\\n......\\n......\\n5\\n1 1\\n1 3\\n2 3\\n4 5\\n1 4\\n\\'\\'\\')', 'from __main__ import solution', number=100)", "solution(\"\"\"\\\n3 4\n..X.\n..X.\nXXXX\n2\n1 3\n2 4\n\"\"\") == \"\"\"\\\nYES\nNO\n\"\"\"\n\nassert solution(\"\"\"\\\n1 1\nX\n1\n1 1\n\"\"\") == \"\"\"\\\nNO\n\"\"\"\n\nassert solution(\"\"\"\\\n2 3\n...\n.X.\n2\n1 2\n2 3\n\"\"\") == \"\"\"\\\nYES\nYES\n\"\"\"\n\nassert solution(\"\"\"\\\n3 3\n...\n...\n...\n3\n1 1\n1 2\n1 3\n\"\"\") == \"\"\"\\\nYES\nYES\nYES\n\"\"\"\n\nassert solution(\"\"\"\\\n1 3\n...\n1\n1 3\n\"\"\") == \"\"\"\\\nYES\n\"\"\"\n\nassert solution(\"\"\"\\\n1 1\n.\n1\n1 1\n\"\"\") == \"\"\"\\\nYES\n\"\"\"\n\nassert solution(\"\"\"\\\n1 3\n.X.\n1\n1 3\n\"\"\") == \"\"\"\\\nYES\n\"\"\"\n\nassert solution(\"\"\"\\\n1 2\n.X\n1\n1 2\n\"\"\") == \"\"\"\\\nYES\n\"\"\"\n\nassert solution(\"\"\"\\\n1 2\nXX\n1\n1 2\n\"\"\") == \"\"\"\\\nNO\n\"\"\"\n\nassert solution(\"\"\"\\\n1 2\nX.\n1\n1 2\n\"\"\")", "solution('''\n4 4\n.X..\n.X..\n....\n....\n4\n1 1\n1 2\n2 3\n2 4\n''') == '''\nNO\nYES\nYES\nYES\n'''\n\n# it is a good idea to check time limit of the problem on a custom test\n# the time limit for this problem is 1 second\nimport time\nassert len(solution('''\n50000000 50000000\n.X..\n.X..\n....\n....\n20000000\n1 1\n1 2\n2 3\n2 4\n''')) == '''\nNO\nYES\nYES\nYES\n'''\nassert time.time() - start_time < 1.0\n\n# you can find this problem statement at\n# https://github.com/MikeMirzayanov/testgen#problem-1549-grid", "solution(\"\"\"\n4 5\n.X...\nXX.X.\n.X.X.\n..XX.\n2\n1 3\n3 5\n\"\"\") == \"\"\"YES\nNO\"\"\"", "solution(\"\"\"3 3\nXX.\n.X.\n..X\n3\n1 1\n2 2\n3 3\"\"\") == \"\"\"YES\nYES\nNO\"\"\"\nassert solution(\"\"\"2 2\n..\n..\n2\n1 1\n2 2\"\"\") == \"\"\"YES\nYES\"\"\"\nassert solution(\"\"\"3 4\nX...\n....\n....\n3\n1 1\n2 2\n3 3\"\"\") == \"\"\"YES\nYES\nNO\"\"\"\n\n# test the performance of solution\nfrom utils import *\n\nproper_performance_test(solution)", "solution('''5 5\n..X..\n.X.X.\n.X.X.\n..X..\n.....\n3\n1 1\n3 5\n3 3''') == '''YES\nYES\nNO'''\n\n# check the correctness of solution\nassert solution('''2 2\nXX\nXX\n1\n1 2''') == '''NO'''\n\n# check the correctness of solution\nassert solution('''10 10\n...XX.X.X.\n.XXX.X.XX.\n.X.X.X.X..\nX.X.X...X.\n.XX.X.XX.X\n.X..X.X.X.\n..XX.X.X.X\nX.XX.X.XX.\n.X.X.X.X.X\nX.X.X.X.X.\n1\n1 10''') == '''YES'''\n\n# check the correctness of solution\nassert solution('''10 10\n...XX.X.X.\n.XXX.X.XX.\n.X.X.X.X..\nX.X.X...X.\n.XX.X.XX.X\n.X..X.X.X.\n..XX.X.X.X\nX.XX.X.XX.\n.X.X", "solution(\"\"\"5 5\n.....\n.X...\n.....\n.....\n.....\n2\n1 2\n1 3\"\"\") == \"\"\"YES\nNO\"\"\"\nassert solution(\"\"\"1 1\n.\n2\n1 1\n1 1\"\"\") == \"\"\"YES\nYES\"\"\"\nassert solution(\"\"\"1 1\nX\n1\n1 1\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"2 2\n.X\nX.\n1\n1 2\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"2 2\n..\n.X\n1\n1 2\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"3 3\n...\n...\n...\n1\n1 3\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"3 3\n.X.\n...\n...\n1\n1 3\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"3 3\n...\n.X.\n...\n1\n1 3\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"3 3\n...\n...\n.X.\n1\n1 3\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"3 3\n...\n...\n.X.\n1\n1 3\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"3 3\n...\n...\n...\n1\n1 3\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"3 3\n.X.\n...\n.X.\n1\n1 3\"\"", "solution('''\n5 4\n.XX.\n.X..\nXX..\n.X..\n....\n3\n1 1\n1 2\n1 4\n''') == '''\nYES\nYES\nNO\n'''\n\n# check the correctness of solution for large inputs\nassert solution('''\n1 10\n..........\n2\n1 1\n1 10\n''') == '''\nYES\nYES\n'''\n\n# I/O for large inputs\n## UNCOMMENT TO REDIRECT TO A FILE\n#import os\n#os.chdir('/Users/brandon/code/python/src/')\n#f = open('input001.txt', 'r')\n#stdin = f.read()\n#f.close()\n#f = open('output001.txt', 'w')\n#f.write(solution(stdin))\n#f.close()", "solution(r'''\n3 4\n.X..\n.X..\n.X..\n3\n1 1\n1 4\n2 3\n''') == '''\nYES\nYES\nNO\n'''", "solution(\"\"\"4 5\n.X.X.\n.....\n.....\n.X.X.\n3\n2 3\n2 4\n3 4\"\"\") == \"\"\"YES\nNO\nYES\"\"\"\n\nassert solution(\"\"\"5 4\nX.X.\nX...\nX...\nX...\nX.X.\n2\n2 4\n1 4\"\"\") == \"\"\"YES\nNO\"\"\"\n\nassert solution(\"\"\"1 6\n..XX..\n2\n1 2\n1 4\"\"\") == \"\"\"YES\nNO\"\"\"\n\nassert solution(\"\"\"2 3\n.X.\n..X\n3\n1 2\n1 3\n2 3\"\"\") == \"\"\"YES\nYES\nNO\"\"\"\n\nassert solution(\"\"\"5 5\nXX...\n.XX..\n..XX.\n...XX\nXXXXX\n4\n2 3\n3 4\n1 5\n4 5\"\"\") == \"\"\"YES\nYES\nYES\nNO\"\"\"\n\nassert solution(\"\"\"1 4\nX...\n4\n1 1\n1 2\n1 3\n1 4\"\"\") == \"\"\"YES\nYES\nYES\nYES\"\"\"\n\nassert solution(\"\"\"6 6\n.X.X..\n..X.X.\n..X.X.\n.X.X..\nX.X.X.\nX.X.X.\n4\n2 3\n3 4\n5 6\n1 6\"\"\") ==", "solution(\"\"\"\n2 3\n.X.\n...\n2\n1 3\n2 3\n\"\"\") == \"\"\"\nNO\nYES\n\"\"\"", "solution('''\n3 5\n.X...\n.X.X.\n.....\n3\n1 3\n1 5\n3 4\n''') == '''\nYES\nYES\nNO\n''', 'Example 1'\n\nassert solution('''\n3 5\n.X...\n.X.X.\n.....\n1\n1 5\n''') == '''\nYES\n''', 'Example 2'\n\nassert solution('''\n2 3\n...\n...\n2\n1 2\n1 3\n''') == '''\nYES\nYES\n''', 'Example 3'\n\nassert solution('''\n3 3\n.X.\n.X.\n.X.\n1\n1 3\n''') == '''\nNO\n''', 'Example 4'\n\nassert solution('''\n1 1\n.\n1\n1 1\n''') == '''\nYES\n''', 'Example 5'\n\nassert solution('''\n4 4\n....\n....\n....\n....\n1\n1 4\n''') == '''\nYES\n''', 'Example 6'\n\nassert solution('''\n2 3\n...\n.X.\n1\n1 3\n''') == '''\nYES\n''', 'Example 7'\n\nassert solution('''\n2 4\n....\n....\n1\n1 4\n''')", "solution(\"4 4\\nXX..\\n.X..\\n....\\n....\\n3\\n1 1\\n2 3\\n4 4\") == \"NO\\nYES\\nYES\"\nassert solution(\"2 3\\n.X.\\n.X.\\n3\\n1 1\\n1 2\\n1 3\") == \"YES\\nYES\\nYES\"\nassert solution(\"1 2\\nX.\\n2\\n1 1\\n1 2\") == \"NO\\nYES\"\nassert solution(\"1 2\\nX.\\n2\\n1 1\\n2 2\") == \"NO\\nYES\"\nassert solution(\"1 2\\n.X\\n2\\n1 1\\n1 2\") == \"YES\\nNO\"\nassert solution(\"1 2\\n.X\\n2\\n1 1\\n2 2\") == \"YES\\nNO\"\nassert solution(\"1 1\\nX\\n2\\n1 1\\n1 1\") == \"NO\\nNO\"\nassert solution(\"1 1\\n.\\n2\\n1 1\\n1 1\") == \"YES\\nYES\"\nassert solution(\"10 10\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n........", "solution(stdin) == stdout\nassert solution(stdin) == stdout", "solution('''\n4 5\n.XXX.\nXX...\n.X.X.\n....X\n4\n1 1\n2 3\n2 2\n4 5\n''') == '''\nYES\nYES\nNO\nYES\n'''", "solution('''4 4\n....\n.X..\n...X\n..X.\n4\n1 1\n1 4\n2 4\n3 4''') == '''YES\nYES\nNO\nNO'''\nassert solution('''5 5\n..X..\n.X...\n..X..\n....X\n.....\n5\n1 1\n1 5\n2 5\n3 5\n4 5''') == '''YES\nYES\nYES\nYES\nYES'''\nassert solution('''5 5\n..X..\n.X...\n..X..\n....X\n.....\n5\n1 1\n1 2\n1 3\n1 4\n1 5''') == '''YES\nYES\nYES\nYES\nYES'''\nassert solution('''1 1\n.\n1\n1 1''') == '''YES'''\nassert solution('''2 3\n.X.\n.X.\n1\n1 3''') == '''YES'''\nassert solution('''4 4\n....\n.X..\n..X.\n....\n4\n1 1\n1 4\n2 4\n3 4''') == '''YES\nYES\nYES\nYES'''\nassert solution('''4 4\n....\n.X..\n..X.\n....\n4\n1 1\n1 2\n1 3\n1 4''') ==", "solution(\"1 2\\nXX\\n1 1\\n\") == \"NO\"\nassert solution(\"2 2\\nX.\\n.X\\n1 1\\n\") == \"YES\"\nassert solution(\"3 3\\nXXX\\n.X.\\n...\\n3 3\\n\") == \"YES\"\nassert solution(\"3 4\\nXXX.\\n.X..\\n....\\n4 4\\n\") == \"NO\"\nassert solution(\"4 6\\nX.X..X\\n.X.X..\\nX...X.\\n..X...\\n4 5\\n\") == \"YES\"\nassert solution(\"4 6\\nX.X..X\\n.X.X..\\nX...X.\\n..X...\\n4 6\\n\") == \"NO\"\nassert solution(\"6 4\\nX...\\nX...\\n....\\n....\\n.X..\\n.X..\\n3 4\\n\") == \"YES\"\nassert solution(\"6 4\\nX...\\nX...\\n....\\n....\\n.X..\\n.X..\\n3 3\\n\") == \"NO\"\nassert solution(\"6 4\\nX...\\nX...\\n....\\n....\\n.X..\\n.X..\\n6 4", "solution(r'''\n3 4\nX.X.\n.XX.\n..X.\n3\n1 1\n1 2\n2 2\n''') == '''\nYES\nNO\nYES\n'''\n\nassert solution(r'''\n1 1\nX\n1\n1 1\n''') == '''\nYES\n'''\n\nassert solution(r'''\n5 1\nX\nX\nX\nX\nX\n1\n1 1\n''') == '''\nNO\n'''\n\n# get input\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\n# print solution\nprint(solution(stdin))", "solution('''\n3 4\nX.X.\n.X..\n..X.\n3\n1 4\n1 2\n3 4\n''') == '''\nYES\nNO\nYES\n'''\n\nassert solution('''\n3 4\nX.X.\n.X..\n..X.\n3\n1 4\n1 2\n2 3\n''') == '''\nYES\nNO\nYES\n'''", "solution(\"\"\"\n4 4\n....\n....\n....\n....\n6\n1 1\n1 2\n1 3\n1 4\n2 2\n3 4\n\"\"\") == \"\"\"\nNO\nYES\nYES\nYES\nYES\nYES\n\"\"\"\n\n# stress testing the correctness of solution\nimport random\nimport string\nimport time\n\n# get input and output params\ninput = stdin_sample.split('\\n')\nn, m = [int(i) for i in input[0].split()]\ngrid = input[1:1+n]\nq = int(input[1+n])\nqueries = input[1+n+1:]\noutput = stdout_sample.split('\\n')[:-1]\n\n# get output answer\nuser_answer = []\nfor query in queries:\n    x1, x2 = [int(i) for i in query.split()]\n    subgrid = [line[x1-1:x2] for line in grid]\n    is_determinable = solution('\\n'.join([str(n), str(m), *grid, str(q), *queries]))\n    if is_determinable.lower() == 'yes':\n        for i in range(x1-1, x2):\n            for j in range(n):\n                if", "solution('''\n4 5\nX.X..\n....X\nX.X..\n.X...\n4\n1 1\n1 5\n3 4\n4 5\n''') == '''\nYES\nYES\nNO\nYES\n'''\n\n# submit solution to codeforces\ndef submit_solution():\n    import requests, sys, re\n    url = 'https://codeforces.com/problemset/problem/1400/C'\n    sample_input = '''\n    4 5\n    X.X..\n    ....X\n    X.X..\n    .X...\n    4\n    1 1\n    1 5\n    3 4\n    4 5\n    '''\n    sample_output = '''\n    YES\n    YES\n    NO\n    YES\n    '''\n    if re.sub(r'\\s+', '', sample_input) == re.sub(r'\\s+', '', stdin):\n        print('=================================================')\n        print('SAMPLE 1')\n        print('=================================================')\n        print(stdin)\n        print('=================================================')\n        print('SAMPLE OUTPUT 1')\n        print('=================================================')\n        print(sample_output)\n        print('=================================================')\n        print('YOUR OUT", "solution(\"\"\"\n3 4\nXX..\n..XX\n..XX\n3\n1 3\n2 3\n3 4\n\"\"\") == \"\"\"\nYES\nNO\nYES\n\"\"\"\n\n# test the speed of solution\nprint(timeit.timeit(lambda: solution(stdin), number=1))", "solution(\"\"\"4 2\n..\n..\n..\n..\n2\n1 2\n2 2\"\"\") == \"\"\"YES\nNO\"\"\"\n\n# stress testing the solution against some random and given examples\n# NOTE: \"stress testing\" here means testing the solution against a (large)\n# number of random inputs, but it does not mean the solution should be able\n# to handle the largest possible input (i.e. the one that would cause stack\n# overflow, out of memory, etc.)\n\nfrom random import randint\n\ndef test_stress(max_n: int, max_m: int, max_q: int) -> None:\n    n = randint(1, max_n)\n    m = randint(1, max_m)\n    q = randint(1, max_q)\n    a = [['X' if randint(0, 1) else '.' for _ in range(m)] for _ in range(n)]\n    queries = [[randint(1, m), randint(1, m)] for _ in range(q)]\n    stdin = f'{n} {m}\\n' + '\\n'.join(''.join(line) for line in a) + '\\n' + f'{q}\\n' + '\\n'.join(f'{x_1} {x", "solution(r'''\n4 4\n.X..\n..X.\n.X..\n....\n2\n1 4\n2 4\n''') == r'''\nYES\nNO\n'''", "solution(\"\"\"\n4 4\nX...\n.X..\n..X.\n....\n4\n1 1\n2 2\n3 3\n4 4\n\"\"\") == \"\"\"\nYES\nYES\nYES\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\n...\n...\n...\n3\n1 1\n1 2\n1 3\n\"\"\") == \"\"\"\nYES\nYES\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\nXXX\nXXX\nXXX\n3\n1 1\n1 2\n1 3\n\"\"\") == \"\"\"\nNO\nNO\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\n.X.\nXXX\n.X.\n3\n1 1\n1 2\n1 3\n\"\"\") == \"\"\"\nYES\nNO\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\nXXX\n.X.\nXXX\n3\n1 1\n1 2\n1 3\n\"\"\") == \"\"\"\nNO\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2 2\nX.\n.X\n2\n1 1\n1 2\n\"\"\") == \"\"\"\nYES\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 4\n...X\n.", "solution(\"\"\"\n2 3\nX.X\n...\n2\n1 2\n2 3\n\"\"\") == '''\nYES\nNO\n'''\n\n# generate random testcases for offline testing\nimport random\nn, m = 10**6, 10**6\nq = 2 * 10**5\n\nrows = []\nfor i in range(n):\n    row = []\n    for j in range(m):\n        if random.random() < 0.05:\n            row.append('X')\n        else:\n            row.append('.')\n    rows.append(''.join(row))\nstdin = '\\n'.join([str(n), str(m)] + rows + [str(q)])\n\nfor i in range(q):\n    x1 = random.randint(1, m)\n    x2 = random.randint(x1, m)\n    stdin += '\\n' + str(x1) + ' ' + str(x2)\n\nwith open('input.txt', 'w') as f:\n    f.write(stdin)", "solution(stdin_sample) == stdout_sample", "solution(\"\"\"\n3 4\n.XX.\n..X.\n...X\n3\n1 1\n1 2\n1 3\n\"\"\") == \"\"\"\nYES\nYES\nNO\n\"\"\"\n\nassert solution(\"\"\"\n4 7\n...X...\n.....X.\n.X.....\n........\n3\n1 1\n1 7\n2 2\n\"\"\") == \"\"\"\nYES\nYES\nYES\n\"\"\"\n\nassert solution(\"\"\"\n4 7\n........\n........\n........\n........\n3\n1 1\n1 7\n2 2\n\"\"\") == \"\"\"\nYES\nYES\nYES\n\"\"\"\n\nassert solution(\"\"\"\n4 7\n.XX....\n.....X.\n...X...\n........\n3\n1 1\n1 7\n2 2\n\"\"\") == \"\"\"\nYES\nNO\nYES\n\"\"\"\n\n# test the performance of solution\nif __name__ == \"__main__\":\n    import timeit\n    import random\n    random.seed(6545)\n    n = 100\n    m = 1000\n    q = 10**5\n    content = [\"\".join(str(random.randint(0, 1)) for i in range(m)) for j in range(n)]\n    content = [\"{} {}\\n\".format(n, m)] + content + [\"{}\\n\".format(q)] + [\"{} {}\\n\".", "solution('''\n5 4\nX.X.\n.XX.\n.X..\n....\n....\n2\n2 4\n1 3\n''') == '''\nYES\nNO\n'''\n\n# submit solution\nimport requests\nfrom urllib.parse import urlencode\nurl = 'https://wcipeg.com/problem/wc181j3'\ndata = {'input': solution(open('/home/maksim/Downloads/input.txt').read())}\nprint(requests.post(url, urlencode(data)).text)", "solution('''\n\n''') == '''\n\n'''\n\n# get the input and run the solution\nlines = []\nfor line in stdin:\n    lines.append(line.rstrip('\\n'))\nprint(solution('\\n'.join(lines)))", "solution(\"\"\"\n3 2\n..\n.X\n..\n1\n1 2\n\"\"\") == \"\"\"YES\"\"\"\n\n# Submit\n_input = sys.stdin.read().strip()\nsys.stdout.write(solution(_input))", "solution(\"\"\"\n5 5\nXX.XX\nXX.XX\nXX.XX\nXX.XX\nXX.XX\n2\n1 2\n2 3\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\n# get input\nn, m = list(map(int, input().split()))\ngrid = [input() for _ in range(n)]\nq = int(input())\nqueries = [list(map(int, input().split())) for _ in range(q)]\n\n# submit solution\nprint(solution(f\"{n} {m}\\n{'\\n'.join(grid)}\\n{q}\\n{'\\n'.join([' '.join(map(str, query)) for query in queries])}\"))", "solution(\"\"\"\n3 3\n.X.\n...\n...\n2\n1 1\n1 3\n\"\"\") == \"\"\"\nYES\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\n.X.\n.X.\n.X.\n2\n1 1\n1 3\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n.....\n.XXX.\n.....\n.....\n.....\n2\n2 3\n4 5\n\"\"\") == \"\"\"\nYES\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\n.X.\n.X.\n.X.\n2\n1 1\n2 3\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1 2\nXX\n2\n1 1\n1 2\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2 2\n.X\nX.\n1\n1 2\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1 1\n.\n1\n1 1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1 2\n..\n1\n", "solution(sample_input1) == sample_output1, 'The solution must be correct!'\n\n# submit solution and get feedback\noutput = solution(input())\nprint(output)", "solution('''\n4 4\n.X..\n....\n....\n....\n4\n1 4\n1 2\n2 3\n3 4\n''') == '''\nYES\nYES\nNO\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4\n.X..\n....\n....\n....\n4\n1 4\n1 2\n2 3\n3 4\n''') == '''\nYES\nYES\nNO\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4\n.X..\n....\n....\n....\n4\n1 4\n1 2\n2 3\n3 4\n''') == '''\nYES\nYES\nNO\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4\n.X..\n....\n....\n....\n4\n1 4\n1 2\n2 3\n3 4\n''') == '''\nYES\nYES\nNO\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4\n.X..\n....\n....\n....\n4\n1 4\n1 2\n2 3\n3 4\n''') == '''\nYES\nYES\nNO\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4\n.X", "solution('''\n2 3\n.X.\n..X\n3\n1 1\n1 2\n1 3\n''') == '''\nYES\nYES\nNO\n'''\n\nassert solution('''\n1 2\nX.\n2\n1 1\n1 2\n''') == '''\nNO\nYES\n'''\n\nassert solution('''\n1 1\nX\n1\n1 1\n''') == '''\nNO\n'''\n\nassert solution('''\n1 1\n.\n1\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n4 4\n.X..\n.X..\n...X\n..X.\n1\n1 4\n''') == '''\nYES\n'''\n\nassert solution('''\n4 4\n.X..\n.X..\n...X\n..X.\n1\n1 2\n''') == '''\nNO\n'''\n\nassert solution('''\n4 4\n.X..\n.X..\n...X\n..X.\n2\n1 4\n1 2\n''') == '''\nYES\nNO\n'''\n\nassert solution('''\n4 4\n.X..\n.X..\n...X\n..X.\n2\n1 2\n1 4\n''') == '''\nNO\n", "solution('''\n3 4\nXX..\nX..X\n..X.\n6\n1 1\n1 2\n1 3\n1 4\n2 4\n3 4\n''') == '''\nYES\nYES\nYES\nYES\nNO\nNO\n'''\n\nassert solution('''\n1 1\nX\n1\n1 1\n''') == '''\nNO\n'''\n\nassert solution('''\n1 2\nX.\n1\n1 2\n''') == '''\nYES\n'''\n\nassert solution('''\n2 2\nX.\n.X\n2\n1 1\n2 2\n''') == '''\nNO\nYES\n'''\n\nassert solution('''\n3 3\n...\n...\n...\n4\n1 1\n1 2\n1 3\n2 3\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\nassert solution('''\n4 4\n....\n....\n....\n....\n1\n1 4\n''') == '''\nYES\n'''\n\nassert solution('''\n6 5\n.....\n.X...\n...X.\n.....\n..X..\n.X...\n7\n1 2\n2 3\n3 4\n4 5\n2 4\n3 5\n4 5\n''') == '''\nYES\nYES\nYES\n", "solution(\"\"\"6 5\n.....\n.....\n.....\n.....\n.....\n.....\n6\n1 5\n1 2\n2 3\n2 5\n3 5\n4 5\n\"\"\") == \"\"\"YES\nYES\nYES\nYES\nYES\nNO\"\"\"\n \nassert solution(\"\"\"1 1\n.\n1\n1 1\n\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(\"\"\"1 2\n..\n2\n1 2\n1 1\n\"\"\") == \"\"\"YES\nNO\"\"\"\n\nprint(\"Test passed!\")\n \n# check for runtime issues\nimport timeit\ntimes = []\nfor i in range(1000):\n    t = timeit.Timer(setup=f\"from __main__ import solution\", stmt=f\"solution('''{test_input}''')\")\n    times.append(t.timeit(number=1))\nprint(f\"Solution took an average of {sum(times)/len(times)} seconds to complete 1000 tests.\")", "solution(SAMPLE_1) == EXPECTED_1\nassert solution(SAMPLE_2) == EXPECTED_2\nassert solution(SAMPLE_3) == EXPECTED_3\nassert solution(SAMPLE_4) == EXPECTED_4\nassert solution(SAMPLE_5) == EXPECTED_5\nassert solution(SAMPLE_6) == EXPECTED_6\nassert solution(SAMPLE_7) == EXPECTED_7\nassert solution(SAMPLE_8) == EXPECTED_8\nassert solution(SAMPLE_9) == EXPECTED_9\nassert solution(SAMPLE_10) == EXPECTED_10\nassert solution(SAMPLE_11) == EXPECTED_11\nassert solution(SAMPLE_12) == EXPECTED_12\nassert solution(SAMPLE_13) == EXPECTED_13\nassert solution(SAMPLE_14) == EXPECTED_14\nassert solution(SAMPLE_15) == EXPECTED_15\nassert solution(SAMPLE_16) == EXPECTED_16\nassert solution(SAMPLE_17) == EXPECTED_17\nassert solution(SAMPLE_18) == EXPECTED_18\nassert solution(SAMPLE_19) == EXPECTED_19\nassert solution(SAMPLE_20) == EXPECTED_20\nassert", "solution(\"2 3\\n...\\n...\\n3\\n1 1\\n1 2\\n1 3\") == \"yes\\nyes\\nyes\"\n\n# print the solution\nwith open(\"solution.txt\", \"w\") as fout:\n    fout.write(solution(open(\"input.txt\").read()))", "solution('''\n3 4\n.X..\n...X\n....\n3\n1 1\n2 4\n1 3\n''') == '''\nYES\nYES\nNO\n'''\n\nassert solution('''\n6 5\n...X.\n...X.\n.....\n.X...\n.....\n.X...\n5\n1 2\n2 4\n2 3\n4 5\n1 5\n''') == '''\nYES\nYES\nYES\nYES\nNO\n'''", "solution('''\n6 5\n.....\n..XX.\n.XXX.\n.....\n...X.\n.....\n8\n1 1\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n3 5\n''') == '''\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4\n.X..\n.X..\n....\n....\n2\n1 2\n2 2\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1\n.\n1\n1 1\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n..X\n...\n1\n1 2\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\nX..\n...\n1\n1 2\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n4 6\n.....\n.X...\n.X...\n....X\n4\n1 2\n2 3\n3 4\n4 6\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\n", "solution('''\n4 6\n..X.X.\nXX.XX.\n.....X\nX...X.\n4\n2 4\n2 3\n2 5\n1 6\n''') == '''\nYES\nYES\nNO\nYES\n'''\n# check the correctness of solution\nassert solution('''\n3 3\nXXX\nXXX\nXXX\n3\n1 3\n1 2\n1 1\n''') == '''\nNO\nNO\nNO\n'''\n# check the correctness of solution\nassert solution('''\n3 3\n...\n...\n...\n3\n1 3\n1 2\n1 1\n''') == '''\nYES\nYES\nYES\n'''\n# check the correctness of solution\nassert solution('''\n2 3\n..X\nXX.\n1\n1 3\n''') == '''\nYES\n'''\n# check the correctness of solution\nassert solution('''\n6 5\n.X...\nXXXXX\n.X...\nXXXXX\n.X...\nXXXXX\n4\n1 1\n1 2\n2 3\n4 5\n''') == '''\nYES\nYES\nYES\nYES\n'''\n# check the correctness of solution\nassert solution('''\n6 7\n....X..\n..XX.X.\nX.X...X\n.XX..XX\nXX.XX", "(solution(\"4 4\\n..XX\\n.X..\\n..XX\\n...X\\n3\\n1 2\\n2 4\\n3 4\\n\") == \"NO\\nYES\\nYES\")\n\n# speed check\nt0 = time.time()\nsolution(\"\")\nprint(f\"{time.time() - t0} seconds\")\n\n# speed check\nt0 = time.time()\nsolution(\"\")\nprint(f\"{time.time() - t0} seconds\")"], "finish_reason": ["length", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length", "stop"], "sum_logprob": [-66.39808674671602, -86.47853621615195, -116.02810198092304, -70.685702243451, -47.668962753440006, -114.9613781685666, -88.05215360298004, -71.591894803867, -151.24952624889008, -29.13857101386, -59.67023314423002, -100.59584541565809, -72.56748274302598, -135.57309663686306, -21.7435776563, -145.345738373623, -15.674055518599998, -79.33209685794604, -66.49500142116398, -13.0599442639, -32.91788846306001, -85.60054369204201, -92.00556725852292, -57.72819850670001, -32.01086795868801, -156.5061805003983, -85.58842284278401, -36.469200332229995, -176.40400769187394, -22.032721089409996, -63.000814166530986, -81.69984166528299, -7.898753520399999, -147.09845820211902, -69.9690140721344, -27.001901628949994, -37.86198633935999, -48.34535451386999, -75.06042394530998, -46.79834288135998, -34.19467867602199, -63.13120839831444, -89.22676676396333, -108.84113112350806, -16.991101439294553, -35.567443805950006, -54.705434164354976, -101.66170355513701, -131.4832328891753, -67.25012655207298], "mean_logprob": [-0.22132695582238665, -0.35734932320723967, -0.4794549668633182, -0.23561900747817, -0.315688495055894, -0.38320459389522166, -0.5792904842301315, -0.23863964934622334, -0.7960501381520526, -0.6776411863688372, -0.47736186515384, -0.33531948471886, -0.24189160914342, -0.6744930180938458, -0.46262931183617023, -0.48448579457874336, -0.48981423495625004, -0.26444032285982, -0.22165000473721333, -0.6873654875736842, -0.5985070629647272, -0.28533514564014, -0.30668522419507666, -0.3700525545301282, -0.3334465412363333, -0.5216872683346601, -0.28529474280928, -0.5363117695916176, -0.5880133589729133, -0.4896160242091111, -0.21000271388843667, -0.326799366661132, -0.6075964246461538, -0.49032819400706334, -0.5341146112376671, -0.41541387121461537, -0.6761068989171428, -0.28606718647260354, -0.25020141315103334, -1.1414229971063414, -0.11398226225340667, -0.21043736132771468, -0.297422555879878, -0.5062378191791069, -0.05663700479764856, -0.4559928693070513, -0.5018847171041743, -0.33887234518379, -0.4382774429639177, -0.5651271138829664]}
{"prompt": "'''\nEl Psy Kongroo.\n\nOmkar is watching Steins;Gate.\n\nIn Steins;Gate, Okabe Rintarou needs to complete n tasks (1 \u2264 n \u2264 2 \u22c5 10^5). Unfortunately, he doesn't know when he needs to complete the tasks.\n\nInitially, the time is 0. Time travel will now happen according to the following rules:\n\n  * For each k = 1, 2, \u2026, n, Okabe will realize at time b_k that he was supposed to complete the k-th task at time a_k (a_k < b_k). \n\n  * When he realizes this, if k-th task was already completed at time a_k, Okabe keeps the usual flow of time. Otherwise, he time travels to time a_k then immediately completes the task.\n\n  * If Okabe time travels to time a_k, all tasks completed after this time will become incomplete again. That is, for every j, if a_j>a_k, the j-th task will become incomplete, if it was complete (if it was incomplete, nothing will change).\n\n  * Okabe has bad memory, so he can time travel to time a_k only immediately after getting to time b_k and learning that he was supposed to complete the k-th task at time a_k. That is, even if Okabe already had to perform k-th task before, he wouldn't remember it before stumbling on the info about this task at time b_k again.\n\n\n\n\nPlease refer to the notes for an example of time travelling.\n\nThere is a certain set s of tasks such that the first moment that all of the tasks in s are simultaneously completed (regardless of whether any other tasks are currently completed), a funny scene will take place. Omkar loves this scene and wants to know how many times Okabe will time travel before this scene takes place. Find this number modulo 10^9 + 7. It can be proven that eventually all n tasks will be completed and so the answer always exists.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of tasks that Okabe needs to complete.\n\nn lines follow. The k-th of these lines contain two integers a_k and b_k (1 \u2264 a_k < b_k \u2264 2n) \u2014 the time at which Okabe needs to complete the k-th task and the time that he realizes this respectively. All 2n of these times are distinct (so every time from 1 to 2n inclusive appears exactly once in the input).\n\nThe next line contains a single integer t (1 \u2264 t \u2264 n) \u2014 the size of the set s of tasks that lead to the funny scene.\n\nThe last line contains t integers s_1, s_2, \u2026, s_t \u2014 (1 \u2264 s_k \u2264 n, the numbers s_1, s_2, \u2026, s_t are distinct) \u2014 the set s of tasks.\n\nOutput\n\nOutput a single integer \u2014 the number of times that Okabe time travels until all tasks in the set s are simultaneously completed, modulo 10^9 + 7.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''4\n1 4\n3 6\n2 5\n4 7\n2\n1 2''') == '5'\n\nassert solution('''4\n3 4\n4 7\n1 6\n2 5\n2\n1 2''') == '4'\n\nassert solution('''4\n1 6\n2 7\n3 8\n4 9\n1\n1''') == '0'\n\nassert solution('''1\n1 3\n1\n1''') == '0'\n\nassert solution('''3\n1 2\n2 3\n3 4\n2\n1 2''') == '1'\n\nassert solution('''3\n1 2\n2 3\n3 4\n2\n2 3''') == '0'\n\nassert solution('''1\n1 2\n1\n1''') == '0'\n\nassert solution('''2\n1 2\n2 3\n1\n1''') == '0'\n\nassert solution('''2\n1 2\n2 3\n1\n2''') == '1'\n\nassert solution('''3\n1 2\n2 3\n3 4\n1\n1''') == '0'\n\nassert solution('''3\n1 2\n2 3\n3 4\n1\n2''') == '1'\n\nassert solution('''3\n1 2", "solution('''\n3\n1 10\n3 10\n3 10\n1\n1\n''') == '1'\n\nassert solution('''\n2\n1 3\n2 4\n1\n1\n''') == '1'\n\nassert solution('''\n5\n1 2\n3 4\n5 6\n7 8\n9 10\n1\n1\n''') == '0'\n\nassert solution('''\n3\n1 2\n3 4\n5 6\n1\n2\n''') == '1'\n\nassert solution('''\n3\n1 2\n3 4\n5 6\n2\n1 2\n''') == '1'\n\nassert solution('''\n4\n1 2\n3 4\n5 6\n7 8\n2\n1 2\n''') == '1'\n\nassert solution('''\n4\n1 2\n3 4\n5 6\n7 8\n2\n2 3\n''') == '1'\n\nassert solution('''\n4\n1 2\n3 4\n5 6\n7 8\n3\n1 2 3\n''') == '0'\n\nassert solution('''\n6\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n3\n1 2 3\n''') == '1'\n\nassert solution('''\n6\n1 2\n3", "solution('''\n4\n1 6\n4 8\n9 13\n10 15\n2\n1 3\n''') == '3'\n\nassert solution('''\n4\n1 3\n2 3\n3 4\n4 5\n1\n1\n''') == '0'\n\nassert solution('''\n3\n1 2\n3 4\n5 6\n3\n1 2 3\n''') == '0'\n\nassert solution('''\n3\n1 2\n3 4\n5 6\n1\n3\n''') == '2'\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n2\n1 3\n''') == '1'\n\nassert solution('''\n5\n1 6\n4 9\n8 13\n12 17\n16 21\n3\n1 4 5\n''') == '2'\n\nassert solution('''\n4\n1 3\n2 4\n3 5\n4 6\n2\n2 3\n''') == '1'\n\n# submit\nimport sys\nfrom os.path import dirname\n\nfrom submit import submit\n\nif __name__ == '__main__':\n    problem_id = sys.argv[1]\n    file_path = dirname(__file__)\n    print(submit(problem_id, file_path", "solution(str(read_input())) == str(read_output())", "solution('''\n5\n1 5\n2 3\n2 3\n1 4\n3 5\n3\n1 2 3\n''') == '3'\n\nassert solution('''\n3\n1 4\n2 5\n3 6\n2\n1 2\n''') == '0'\n\nassert solution('''\n1\n1 2\n1\n1\n''') == '0'\n\nassert solution('''\n10\n1 2\n2 3\n1 3\n2 4\n2 3\n1 3\n2 4\n2 3\n1 3\n2 4\n3\n1 2 3\n''') == '3'\n\nassert solution('''\n1\n1 2\n1\n1\n''') == '0'\n\nassert solution('''\n5\n1 2\n2 3\n2 3\n1 3\n2 3\n1\n1\n''') == '1'\n\nassert solution('''\n3\n1 2\n1 2\n1 2\n1\n1\n''') == '0'\n\nassert solution('''\n5\n1 2\n2 3\n2 3\n1 3\n2 3\n1\n1\n''') == '1'\n\nassert solution('''\n4\n1 2\n2 3\n2 3\n1 3\n2\n1 2\n''') == '1'\n\nassert solution(''", "solution('''5\n1 4\n1 5\n5 10\n10 12\n10 15\n2\n2 3''') == '1'\nassert solution('''10\n1 10\n2 10\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n4\n1 2 3 5''') == '4'\nassert solution('''2\n1 2\n3 4\n1\n1''') == '0'\nassert solution('''1\n1 2\n1\n1''') == '0'\nassert solution('''5\n1 2\n3 5\n4 5\n1 3\n4 6\n1\n2''') == '2'\nassert solution('''3\n1 2\n2 3\n3 4\n2\n1 2''') == '1'\nassert solution('''10\n1 6\n1 7\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n2\n1 10''') == '5'\nassert solution('''5\n1 2\n1 4\n2 3\n2 5\n3 5\n2\n1 4''') == '1'\nassert solution('''6\n1 5\n2 8\n3 9\n4 6\n5 7\n6 10\n1\n1''') == '0'\n", "(solution('''\n\n''') == '''\n\n''')", "solution(stdin=r'''\n6\n1 10\n2 10\n3 10\n4 10\n5 10\n6 10\n3\n3 5 6\n''') == '3'\n\n# check the correctness of solution\nassert solution(stdin=r'''\n7\n1 4\n2 5\n3 6\n4 5\n5 6\n6 7\n7 8\n3\n2 3 4\n''') == '1'\n\n# check the correctness of solution\nassert solution(stdin=r'''\n2\n1 3\n4 5\n2\n1 2\n''') == '1'\n\n# check the correctness of solution\nassert solution(stdin=r'''\n4\n1 2\n2 3\n3 4\n4 5\n2\n2 3\n''') == '0'\n\n# check the correctness of solution\nassert solution(stdin=r'''\n10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n2\n2 3\n''') == '1'\n\n# check the correctness of solution\nassert solution(stdin=r'''\n9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n2\n2 3\n''') == '1'\n\n", "solution(\n'''5\n1 5\n2 3\n3 6\n4 4\n5 2\n3\n1 2 3\n''') == '''3'''\n\nassert solution(\n'''5\n1 6\n2 3\n3 5\n4 4\n5 2\n2\n1 2\n''') == '''2'''\n\nassert solution(\n'''5\n1 5\n2 3\n3 6\n4 4\n5 2\n1\n5\n''') == '''0'''\n\nassert solution(\n'''5\n1 3\n2 5\n3 6\n4 4\n5 2\n1\n1\n''') == '''1'''\n\n# Use the following code to test your solution locally.\n# This will fail if there is an error in your solution.\n# Any error message from your solution will be printed.\n# Feel free to add any additional test cases.\n\nfrom collections import deque\nimport sys\n\ndef test(solution: callable, testcases: list):\n    sys.setrecursionlimit(max(2000, 10 * max(map(len, testcases))))\n    for testcase in testcases:\n        print('testcase', testcase)\n        stdin = deque(testcase.split('\\n'))\n        ans = solution(stdin)\n        print('got', ans", "solution(get_input_for_challenge(challenge_number)) == get_expected_output_for_challenge(challenge_number)", "solution('''\n5\n1 2\n2 4\n3 6\n4 8\n5 10\n2\n1 3\n''') == '2'\n\nassert solution('''\n5\n1 2\n2 4\n3 6\n4 8\n5 10\n1\n1\n''') == '0'\n\nassert solution('''\n3\n1 4\n2 3\n3 6\n2\n1 2\n''') == '1'\n\nassert solution('''\n4\n1 2\n2 4\n3 5\n4 6\n1\n4\n''') == '0'\n\n# test the performance of solution\nfrom random import randint\nimport cProfile\n\nN = 10**5\n\nrandom_input = lambda: str(randint(1, N)) + '\\n' + \\\n    '\\n'.join([str(randint(1, 2*N)) + ' ' + str(randint(1, 2*N))\n                for _ in range(N)]) + '\\n' + \\\n    str(randint(1, N)) + '\\n' + \\\n    ' '.join([str(randint(1, N)) for _ in range(randint(1, N))])\n\ncProfile.run('solution(random_input())')", "solution(\"\") == \"\"", "(solution(stdin) == stdout)", "solution(stdin) == stdout\n\n# check the performance of solution\nprint(f'{timeit.timeit(solution, number=10000)}')\n```\n## Coding Section 1: Implement a solution\n\nWrite a correct solution to the problem.\n\n```python\n# task5/solution.py\n\ndef solution(stdin: str) -> str:\n    task_number, tasks = parse_task_number_and_tasks(stdin)\n    tasks = parse_tasks(stdin, task_number)\n    tasks_s = parse_tasks_s(stdin, task_number)\n    tasks = merge_tasks_and_tasks_s(tasks, tasks_s)\n    tasks = sort_tasks(tasks)\n    return count_time_travels(tasks)\n\n\ndef parse_task_number_and_tasks(stdin: str) -> List[int]:\n    task_number = int(stdin.split(\"\\n\")[0])\n    tasks = stdin.split(\"\\n\")[1: task_number + 1]\n    return task_number, tasks\n\n\ndef parse_tasks(stdin: str, task_number: int) -> List[int]:\n    a, b = [], []\n    for", "solution('''\n3\n1 5\n1 6\n1 7\n1\n1\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n3\n1 5\n1 6\n1 7\n1\n2\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n5\n2 3\n2 5\n2 4\n1 7\n1 6\n2\n1 3\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n6\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1\n1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n5\n1 6\n1 8\n1 2\n1 7\n1 5\n2\n1 2\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n5\n1 5\n1 6\n1 7\n1 8\n1 9\n2\n1 5\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3\n1 5\n1 6\n1 7\n2\n1 2\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n5\n1 5\n1 6\n1 7\n1", "(1, 2, 3) == solution('3\\n1 2\\n2 3\\n3 4\\n2\\n1 2')\nassert (4, 5, 6) == solution('4\\n1 2\\n2 3\\n3 4\\n4 5\\n3\\n1 2 3')\nassert (1, 2, 3) == solution('2\\n1 2\\n2 3\\n2\\n1 2')\nassert (1, 2, 3) == solution('1\\n1 2\\n1\\n1')\nassert (1, 2, 3) == solution('4\\n1 2\\n2 3\\n3 4\\n4 5\\n3\\n1 2 3')\nassert (1, 2, 3) == solution('3\\n1 2\\n2 3\\n3 4\\n2\\n1 2')\nassert (1, 2, 3) == solution('2\\n1 2\\n2 3\\n2\\n1 2')\nassert (1, 2, 3) == solution('1\\n1 2\\n1\\n1')\nassert (1, 2, 3) == solution('4\\n1 2\\n2 3\\n3 4\\n4 5\\n3\\n1 2 3')\nassert (1, 2, 3) == solution('3\\n1", "solution('''\n7\n2 7\n2 3\n1 3\n2 5\n1 5\n1 4\n1 2\n3\n1 2 4\n''') == '3'", "solution('''\n5\n2 3\n2 4\n2 5\n2 6\n2 7\n2\n1 3\n''') == '3'\n\nassert solution('''\n5\n2 3\n2 4\n2 5\n2 6\n2 7\n1\n1\n''') == '2'\n\nassert solution('''\n6\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n3\n3 1 5\n''') == '3'\n\nassert solution('''\n1\n1 2\n1\n1\n''') == '0'\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n2\n2 4\n''') == '1'\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n1\n1\n''') == '0'\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n1\n4\n''') == '0'\n\nassert solution('''\n2\n1 2\n2 3\n2\n1 2\n''') == '1'\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n2\n1 5\n''') == '0'", "solution(example1) == '2'\nassert solution(example2) == '-1'\nassert solution(example3) == '0'\nassert solution(example4) == '1'\n\n# check against Kattis test cases\npass\n\n# print(solution(stdin))", "solution(r'''\n2\n2 1\n1 3\n1\n1\n''') == '2'\n\n# check the correctness of solution\nassert solution(r'''\n3\n1 2\n3 1\n2 3\n2\n2 3\n''') == '1'\n\nassert solution(r'''\n4\n2 3\n4 2\n1 3\n3 4\n2\n2 3\n''') == '1'\n\n# check the correctness of solution\nassert solution(r'''\n5\n2 3\n4 2\n1 3\n3 4\n4 5\n3\n1 2 3\n''') == '3'\n\n# check the correctness of solution\nassert solution(r'''\n5\n2 3\n4 2\n1 3\n3 4\n4 5\n3\n1 2 4\n''') == '2'\n\n# check the correctness of solution\nassert solution(r'''\n5\n2 3\n4 2\n1 3\n3 4\n4 5\n3\n2 3 4\n''') == '1'\n\n# check the correctness of solution\nassert solution(r'''\n5\n2 3\n4 2\n1 3\n3 4\n4 5\n5\n1 2 3 4 5\n''') == '0'\n\nassert solution(r'''\n1\n1 1\n1\n1\n''') == '", "solution('''\n2\n2 3\n1 4\n1\n1\n''') == '0'\n\nassert solution('''\n2\n1 2\n2 3\n1\n2\n''') == '1'\n\nassert solution('''\n2\n2 3\n1 4\n2\n1 2\n''') == '0'\n\nassert solution('''\n3\n1 4\n1 2\n3 4\n2\n1 3\n''') == '2'\n\nassert solution('''\n3\n1 2\n1 3\n1 4\n3\n1 2 3\n''') == '0'\n\nassert solution('''\n4\n1 3\n2 3\n2 4\n4 5\n2\n1 2\n''') == '2'\n\nassert solution('''\n4\n1 2\n2 3\n3 4\n4 5\n2\n1 3\n''') == '1'\n\nassert solution('''\n6\n1 2\n2 3\n3 4\n3 5\n3 6\n4 5\n4\n2 3 4\n''') == '2'\n\nassert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n3\n1 3 5\n''') == '5'\n\nassert solution('''\n2\n2", "solution(test_data) == '''\n'''\n\n# get the input data\nwith open('../inputs/day_x.txt') as f:\n    inputs = f.read()\n\n# run the solution and get the output\noutput = solution(inputs)\n\n# print the output data\nprint(output)", "solution('''5\n5 10\n1 7\n5 8\n7 10\n5 6\n2\n1 3''') == '2'\nassert solution('''5\n5 10\n1 7\n5 8\n7 10\n5 6\n1\n5''') == '0'\nassert solution('''5\n5 10\n1 7\n5 8\n7 10\n5 6\n1\n1''') == '3'\nassert solution('''5\n5 10\n1 7\n5 8\n7 10\n5 6\n1\n2''') == '2'\nassert solution('''5\n5 10\n1 7\n5 8\n7 10\n5 6\n1\n4''') == '1'\nassert solution('''5\n5 10\n1 7\n5 8\n7 10\n5 6\n1\n5''') == '0'\nassert solution('''8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n1\n1''') == '4'\nassert solution('''3\n3 4\n4 5\n6 7\n2\n2 3''') == '1'\nassert solution('''3\n3 4\n4 5\n6 7\n1\n1''') == '3'\nassert solution('''5\n5 10\n1 7\n5", "solution('''\n2\n2 3\n1 3\n1\n1 2\n''') == '2'\nassert solution('''\n3\n1 2\n3 4\n1 4\n1\n1\n''') == '0'\nassert solution('''\n3\n1 2\n3 4\n1 4\n1\n3\n''') == '1'\nassert solution('''\n5\n5 6\n4 6\n3 6\n2 6\n1 6\n2\n2 3\n''') == '4'\nassert solution('''\n2\n1 2\n1 2\n1\n1\n''') == '0'\nassert solution('''\n3\n1 2\n1 2\n1 2\n1\n2\n''') == '1'\nassert solution('''\n4\n4 6\n4 6\n4 6\n4 6\n2\n1 3\n''') == '6'\nassert solution('''\n3\n1 2\n2 3\n3 4\n2\n1 2\n''') == '1'\nassert solution('''\n3\n1 2\n1 2\n1 2\n1\n1\n''') == '0'\nassert solution('''\n3\n1 2\n2 3\n1 3\n2\n2 3\n''') == '2'\nassert solution('''\n5\n5 6\n4 6", "solution('''\n0\n1 2\n2\n1\n''') == '''\n1\n'''\n\nassert solution('''\n1\n1 2\n1\n1\n''') == '''\n0\n'''\n\nassert solution('''\n2\n1 2\n2 3\n2\n1 2\n''') == '''\n0\n'''\n\nassert solution('''\n2\n1 2\n2 3\n2\n2 1\n''') == '''\n1\n'''\n\nassert solution('''\n3\n1 2\n2 3\n3 4\n2\n1 2\n''') == '''\n1\n'''\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n3\n1 2 3\n''') == '''\n2\n'''\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n3\n3 4 5\n''') == '''\n1\n'''\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n3\n2 3 4\n''') == '''\n0\n'''\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n3\n2 3 6", "solution(\n'''5\n1 10\n2 10\n10 15\n11 15\n20 30\n2\n2 3\n''') == '0'\n\nassert solution(\n'''5\n1 10\n2 10\n10 15\n11 15\n20 30\n2\n1 2\n''') == '2'\n\nassert solution(\n'''3\n10 11\n5 10\n20 21\n2\n1 2\n''') == '0'\n\nassert solution(\n'''3\n10 11\n5 10\n20 21\n2\n1 3\n''') == '1'\n\nassert solution(\n'''3\n10 11\n5 10\n20 21\n2\n2 3\n''') == '1'\n\nassert solution(\n'''6\n1 11\n2 12\n3 13\n4 14\n5 15\n6 16\n2\n1 2\n''') == '3'\n\nassert solution(\n'''6\n1 11\n2 12\n3 13\n4 14\n5 15\n6 16\n2\n1 3\n''') == '2'\n\nassert solution(\n'''6\n1 11\n2 12\n3 13\n4 14\n5 15\n6 16\n2\n2 3\n''') == '2'\n\nassert solution(\n'''6\n1 11\n2 12\n3 13\n4 14\n5 15", "solution('''\n3\n1 2\n4 5\n7 9\n1\n1\n''') == '''\n2\n'''\nassert solution('''\n4\n1 3\n2 3\n4 5\n6 7\n2\n1 2\n''') == '''\n3\n'''\nassert solution('''\n4\n1 3\n2 3\n4 5\n6 7\n2\n2 3\n''') == '''\n2\n'''\nassert solution('''\n5\n1 3\n2 3\n4 5\n6 7\n10 11\n2\n1 2\n''') == '''\n3\n'''\nassert solution('''\n5\n1 3\n2 3\n4 5\n6 7\n10 11\n2\n2 3\n''') == '''\n2\n'''\nassert solution('''\n5\n1 3\n2 3\n4 5\n6 7\n10 11\n2\n1 3\n''') == '''\n2\n'''\nassert solution('''\n5\n1 3\n2 3\n4 5\n6 7\n10 11\n2\n3 4\n''') == '''\n2\n'''\nassert solution('''\n5\n1 3\n2 3\n4 5\n6 7\n10 11\n2\n4 5\n''') == '''\n1\n'''\nassert solution", "solution('''\n2\n1 3\n2 5\n1\n1\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n3\n1 3\n2 5\n3 7\n2\n1 3\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3\n1 3\n2 5\n3 7\n3\n1 2 3\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3\n1 3\n2 5\n3 7\n1\n2\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4\n1 3\n2 5\n3 7\n4 9\n2\n1 3\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n4\n1 3\n2 5\n3 7\n4 9\n2\n2 4\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n4\n1 3\n2 5\n3 7\n4 9\n2\n1 4\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4\n1 3\n2 5\n3 7\n4 9\n2\n3 4\n''') == '3'\n\n# check the correctness", "solution(test_input_1) == \"5\"\nassert solution(test_input_2) == \"42\"", "solution(r'''\n3\n1 2\n2 3\n3 4\n1\n2\n''') == '1'\n\nassert solution(r'''\n3\n1 2\n2 3\n3 4\n1\n1\n''') == '2'\n\nassert solution(r'''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n2\n1 2\n''') == '1'\n\nassert solution(r'''\n4\n1 2\n2 3\n3 4\n4 5\n2\n1 3\n''') == '2'\n\nassert solution(r'''\n4\n1 2\n2 3\n3 4\n4 5\n3\n1 2 3\n''') == '3'\n\nassert solution(r'''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n2\n2 3\n''') == '2'\n\nassert solution(r'''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n2\n1 5\n''') == '3'\n\nassert solution(r'''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n3\n1 2 3\n''') == '4'\n\nassert solution(r'''\n7\n1 2\n2 3\n3 4\n4 5\n5 6", "solution('''\n5\n1 6\n2 4\n3 5\n1 10\n7 10\n2\n2 3\n''') == '2'\nassert solution('''\n6\n1 2\n2 4\n2 3\n1 5\n2 5\n3 5\n1\n1\n''') == '0'\nassert solution('''\n6\n1 3\n2 3\n3 5\n1 6\n2 6\n3 6\n3\n1 2 3\n''') == '1'\nassert solution('''\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n3 6\n2\n1 2\n''') == '0'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n3\n1 2 3\n''') == '0'\nassert solution('''\n4\n1 3\n2 3\n3 4\n1 4\n2\n1 2\n''') == '1'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n3\n3 4 5\n''') == '0'\nassert solution('''\n2\n1 2\n2 3\n1\n1\n''') == '0'\nassert solution('''\n6\n1 4\n2 4\n3 5\n3 6\n4 7\n", "solution(test_sample_input_1) == test_sample_output_1, 'sample 1'\nassert solution(test_sample_input_2) == test_sample_output_2, 'sample 2'\nassert solution(test_sample_input_3) == test_sample_output_3, 'sample 3'\n\n# stress testing\nwhile True:\n    pass\n\n# sample input/output\ntest_sample_input_1 = '''\n'''\ntest_sample_output_1 = '''\n'''\n\ntest_sample_input_2 = '''\n'''\ntest_sample_output_2 = '''\n'''\n\ntest_sample_input_3 = '''\n'''\ntest_sample_output_3 = '''\n'''", "solution('''\n3\n1 5\n3 6\n2 4\n2\n2 3\n''') == '2'\nassert solution('''\n3\n1 5\n3 6\n2 4\n1\n2\n''') == '0'\nassert solution('''\n5\n5 9\n7 8\n1 3\n2 6\n4 10\n3\n1 4 5\n''') == '3'\nassert solution('''\n1\n1 2\n1\n1\n''') == '0'\nassert solution('''\n2\n1 3\n2 4\n2\n1 2\n''') == '1'\nassert solution('''\n3\n1 2\n3 4\n5 6\n3\n1 2 3\n''') == '0'\nassert solution('''\n4\n4 7\n2 5\n1 3\n6 8\n2\n1 3\n''') == '2'\nassert solution('''\n10\n3 9\n1 4\n5 6\n7 10\n2 8\n6 7\n3 5\n10 11\n1 2\n4 12\n5\n1 2 3 5 6\n''') == '5'\nassert solution('''\n9\n1 3\n5 7\n6 8\n2 9\n1 4\n5 10\n8 11\n3 12\n4 13\n6\n1 3 5 7 9\n''')", "solution('''\n1\n1 10\n1\n1\n''') == '0'\n\nassert solution('''\n3\n1 5\n2 3\n3 4\n2\n2\n3\n''') == '1'\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n3\n1\n2\n3\n''') == '4'", "solution(test_sample) == test_output\n\n# stress testing the solution\nwhile True:\n    pass", "solution(\"\"\"\n4\n1 3\n2 5\n1 4\n6 7\n2\n1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4\n1 4\n2 5\n3 6\n6 7\n2\n1 2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n2 3\n2 4\n3 5\n1\n3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n2 3\n2 4\n3 5\n2\n2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1\n1 2\n1\n1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n1 3\n1 4\n2\n1 2\n\"\"\") == \"0\"\n\n# check runtime\nimport timeit\nfrom random import randint\nfrom typing import List, Tuple\n\ndef create_test(n: int) -> Tuple[str, str]:\n    lines = [f\"{randint(1, n-1)} {randint(i+1, n)}\" for i in range(n)]\n    print(lines)\n    s = set()\n    t = randint(1, n)\n    for _ in range(t):\n        s.add(randint(1, n))\n    test = [str(n), *lines,", "solution('''\\\n5\n1 2\n2 4\n3 6\n4 8\n5 10\n3\n1 2 3\n''') == '5'\n\nassert solution('''\\\n5\n1 2\n2 4\n3 6\n4 8\n5 10\n3\n3 2 1\n''') == '5'\n\nassert solution('''\\\n5\n1 2\n2 4\n3 6\n4 8\n5 10\n3\n2 3 1\n''') == '4'\n\nassert solution('''\\\n5\n1 2\n2 4\n3 6\n4 8\n5 10\n3\n2 3 5\n''') == '6'\n\nassert solution('''\\\n5\n1 2\n2 4\n3 6\n4 8\n5 10\n3\n5 4 3\n''') == '7'\n\n# check the time/memory limit\nimport time\nimport resource\nimport unittest\nclass LimitTest(unittest.TestCase):\n    def setUp(self):\n        pass\n    def tearDown(self):\n        pass\n    def assert_time_usage_less_than(self, max_sec: float):\n        print(\"Start to check the time limit...\")\n        start = time.perf_counter()\n        total_size = 0\n        with open('in.txt", "solution(sample) == str(sample_output)\n\n# get input for running in local machine\nwith open('input.txt', 'r') as f:\n    input_data = f.read()\n\n# call solution function with input data\nprint(solution(input_data))", "solution('''4\n2 3\n4 5\n1 6\n7 8\n1\n1''') == '1'\nassert solution('''4\n2 3\n4 5\n1 6\n7 8\n2\n1 2''') == '2'\nassert solution('''4\n2 3\n4 5\n1 6\n7 8\n3\n1 2 3''') == '3'\nassert solution('''3\n1 2\n3 4\n5 6\n2\n1 2''') == '0'\nassert solution('''3\n1 2\n3 4\n5 6\n1\n1''') == '0'\nassert solution('''3\n1 2\n3 4\n5 6\n2\n2 3''') == '0'\nassert solution('''3\n1 2\n3 4\n5 6\n3\n1 2 3''') == '0'\nassert solution('''3\n1 2\n3 4\n5 6\n2\n2 3''') == '0'\nassert solution('''3\n1 2\n3 4\n5 6\n3\n1 2 3''') == '0'\nassert solution('''4\n2 3\n4 5\n1 6\n7 8\n2\n2 3''') == '0'\nassert solution('''4\n2 3\n4 5\n1 6\n7 8", "solution(\"\") == \"\", \"sample 1\"\nassert solution(\"\") == \"\", \"sample 2\"\nassert solution(\"\") == \"\", \"sample 3\"\nassert solution(\"\") == \"\", \"sample 4\"\nassert solution(\"\") == \"\", \"sample 5\"\nassert solution(\"\") == \"\", \"sample 6\"\nassert solution(\"\") == \"\", \"sample 7\"\nassert solution(\"\") == \"\", \"sample 8\"\nassert solution(\"\") == \"\", \"sample 9\"\nassert solution(\"\") == \"\", \"sample 10\"\nassert solution(\"\") == \"\", \"sample 11\"\nassert solution(\"\") == \"\", \"sample 12\"\nassert solution(\"\") == \"\", \"sample 13\"\nassert solution(\"\") == \"\", \"sample 14\"\nassert solution(\"\") == \"\", \"sample 15\"\nassert solution(\"\") == \"\", \"sample 16\"\nassert solution(\"\") == \"\", \"sample 17\"\nassert solution(\"\") == \"\", \"sample 18\"\nassert solution(\"\") == \"\", \"sample 19\"\nassert solution(\"\") == \"\", \"sample 20\"\nassert solution(\"\") == \"\", \"sample 21\"\nassert solution(\"\") == \"\", \"sample 22\"\nassert solution(\"\") == \"\", \"sample 23\"\nassert solution(\"\") == \"\", \"sample 24\"\nassert solution(\"\") == \"\", \"sample 25\"\nassert", "solution(\"\"\"\n5\n1 3\n3 2\n5 4\n2 6\n7 8\n3\n3 1 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1 2\n3 2\n5 4\n2 6\n7 8\n3\n3 1 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 3\n3 2\n5 4\n2 6\n7 8\n3\n3 1 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1 2\n3 3\n5 4\n2 6\n7 8\n3\n3 1 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 2\n3 4\n5 4\n2 6\n7 8\n3\n3 1 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 2\n3 4\n5 5\n2 6\n7 8\n3\n3 1 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 2\n3 4\n5 5\n2 6\n7 8\n3\n3 1 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 2\n3 4\n5 5\n2 6\n7 8\n3\n3 1 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 2\n3 4\n5 5\n2 6\n7 8", "solution('''\n5\n1 3\n1 2\n3 4\n3 4\n5 7\n3\n3 4 5\n''') == '2'\n\nassert solution('''\n5\n1 3\n1 2\n3 4\n5 7\n5 7\n5\n1 2 3 4 5\n''') == '4'\n\nassert solution('''\n5\n1 3\n1 2\n3 4\n3 4\n5 7\n3\n3 4 5\n''') == '2'\n\nassert solution('''\n5\n1 3\n1 2\n3 4\n3 4\n5 7\n2\n2 3\n''') == '2'\n\nassert solution('''\n5\n1 3\n1 2\n3 4\n3 4\n5 7\n3\n2 3 4\n''') == '3'\n\nassert solution('''\n5\n1 3\n1 2\n3 4\n3 4\n5 7\n3\n1 2 4\n''') == '3'\n\nassert solution('''\n5\n1 3\n1 2\n3 4\n3 4\n5 7\n2\n2 4\n''') == '3'\n\nassert solution('''\n5\n1 3\n1 2\n3 4\n3 4\n5 7\n2\n2 3\n''') == '2'\n\nassert solution('''\n", "solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert", "solution(test) == 'test_solution'\n\n# get the input\nwith open('inputs/test.in', 'r') as f:\n    stdin = f.read()\n\n# run the solution\nsolution(stdin)", "solution(\"\"\"2\n2 3\n1 4\n1\n1\"\"\") == \"1\"\nassert solution(\"\"\"5\n1 2\n2 3\n3 4\n4 5\n5 6\n3\n1 2 3\"\"\") == \"3\"\nassert solution(\"\"\"2\n2 3\n4 5\n1\n1\"\"\") == \"0\"\nassert solution(\"\"\"10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n2\n2 3\"\"\") == \"6\"\nassert solution(\"\"\"1\n1 2\n1\n1\"\"\") == \"0\"\nassert solution(\"\"\"2\n2 3\n4 5\n2\n1 2\"\"\") == \"1\"\nassert solution(\"\"\"2\n2 3\n4 5\n2\n2 1\"\"\") == \"1\"\nassert solution(\"\"\"7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n3\n2 3 4\"\"\") == \"2\"\nassert solution(\"\"\"10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n4\n1 2 3 4\"\"\") == \"2\"\nassert solution(\"\"\"1\n1 2\n1\n1\"\"\") == \"0\"\nassert solution(\"\"\"2", "solution('''1\n1 2\n1\n1''') == '1'\nassert solution('''4\n1 5\n2 3\n4 6\n5 7\n2\n1 3''') == '2'\nassert solution('''2\n2 3\n3 4\n1\n1''') == '1'\nassert solution('''5\n1 4\n3 5\n5 6\n6 7\n7 8\n2\n1 3''') == '2'\nassert solution('''2\n2 3\n1 4\n1\n1''') == '1'\nassert solution('''5\n1 4\n1 6\n1 8\n1 10\n1 12\n2\n1 5''') == '0'\nassert solution('''1\n1 1000000\n1\n1''') == '1'\nassert solution('''5\n1 2\n3 4\n5 6\n7 8\n9 10\n3\n1 2 3''') == '3'\nassert solution('''5\n1 2\n3 4\n5 6\n7 8\n9 10\n2\n2 3''') == '1'\nassert solution('''5\n1 2\n3 4\n5 6\n7 8\n9 10\n2\n2 5''') == '1'\nassert solution('''5\n1 2\n3 4\n5 6\n7 8", "solution('''\n6\n1 6\n2 4\n3 6\n5 6\n6 6\n1 6\n3\n1 2 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 5\n2 4\n3 5\n4 5\n5 5\n2\n1 2\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n6\n1 6\n2 4\n3 6\n5 6\n6 6\n1 6\n3\n2 3 5\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n8\n1 8\n2 3\n3 5\n4 7\n5 6\n6 7\n7 8\n1 8\n3\n1 2 3\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4\n1 5\n2 3\n3 4\n4 5\n1\n1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n7\n1 6\n2 4\n3 6\n5 6\n6 6\n1 6\n7 7\n3\n3 4 5\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n4\n1 4\n2 4\n3 4\n4 4\n2\n", "solution(open('tests/1.in').read()) == open('tests/1.out').read()\nassert solution(open('tests/2.in').read()) == open('tests/2.out').read()\n\nif __name__ == '__main__':\n    print(solution(sys.stdin.read()))", "solution('''\n3\n3 5\n5 6\n6 8\n2\n2 3\n''') == '3'\n\nassert solution('''\n3\n3 5\n5 6\n6 8\n3\n1 2 3\n''') == '0'\n\nassert solution('''\n1\n1 2\n1\n1\n''') == '0'\n\nassert solution('''\n1\n1 2\n1\n1\n''') == '0'\n\nassert solution('''\n2\n2 3\n1 4\n1\n1\n''') == '1'\n\nassert solution('''\n4\n4 6\n1 2\n3 8\n5 10\n3\n1 2 3\n''') == '0'\n\nassert solution('''\n1\n1 2\n1\n1\n''') == '0'\n\nassert solution('''\n2\n2 3\n1 4\n1\n1\n''') == '1'\n\nassert solution('''\n6\n1 3\n2 6\n1 5\n5 10\n7 9\n8 11\n3\n1 2 6\n''') == '3'\n\nassert solution('''\n6\n1 3\n2 6\n1 5\n5 10\n7 9\n8 11\n3\n1 3 6\n''') == '4'\n\nassert solution('''", "solution('''\n''') == '''\n'''\n# put your code here"], "finish_reason": ["length", "length", "length", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "length", "stop"], "sum_logprob": [-88.83289422924, -72.09128353434299, -122.33683531414, -12.4433744418, -106.52688870744002, -159.12663504666008, -10.5089114015, -91.9127678259529, -199.31993929471997, -20.95917153787, -96.010045325745, -5.5419964749999995, -8.616210742800002, -181.93429355667726, -95.09455757646995, -60.92195782856798, -37.79021441744, -80.86856012946396, -56.46266891408, -83.98907383372999, -98.62237725805095, -37.93351157295998, -94.729318212467, -105.78267991808289, -55.76275264023003, -91.98347074876807, -63.84257855576599, -55.04252779478, -22.631586953690004, -57.71521845340198, -127.32574440026764, -41.30584076103049, -153.6125041920158, -34.797599645430005, -22.0155728254, -139.62752399897002, -146.50225810303405, -39.461146323540014, -64.858653210741, -15.899570659306, -65.07378107895799, -77.49085401416203, -14.622423326166999, -40.354268251979995, -87.437427996521, -111.63050033593004, -103.23663281274997, -20.961107152112987, -114.97298648133393, -16.837935228], "mean_logprob": [-0.2961096474308, -0.24030427844781, -0.4077894510471333, -0.7319632024588235, -0.3550896290248, -0.5304221168222, -0.6181712589117647, -0.30637589275317667, -0.6643997976490666, -0.6164462217020589, -0.3288015250881678, -0.9236660791666667, -0.7832918857090909, -0.606447645188925, -0.31698185858823336, -0.20307319276189334, -0.9217125467668292, -0.26956186709821334, -0.8427264017026865, -0.27996357944576666, -0.32874125752683664, -0.5057801543061333, -0.31576439404155665, -0.3526089330602767, -0.1858758421341, -0.30661156916256, -0.21280859518588666, -0.18347509264926667, -0.8382069242107407, -0.19238406151134, -0.4244191480008923, -0.2307588869331313, -0.5120416806400526, -0.38239120489483513, -0.880622913016, -0.4654250799965667, -0.48834086034344665, -0.6070945588236923, -0.21619551070247, -0.052998568864353335, -0.21691260359652667, -0.2583028467138733, -0.04874141108722333, -0.7079696184557894, -0.29145809332173667, -0.37210166778643333, -0.3441221093758333, -0.27580404147517107, -0.3832432882711133, -0.8418967614]}
{"prompt": "'''\nTheofanis has a riddle for you and if you manage to solve it, he will give you a Cypriot snack halloumi for free (Cypriot cheese).\n\nYou are given an integer n. You need to find two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains a single integer n (1 \u2264 n \u2264 10^{18}).\n\nOutput\n\nFor each test case, print the two integers l and r such that -10^{18} \u2264 l < r \u2264 10^{18} and l + (l + 1) + \u2026 + (r - 1) + r = n. \n\nIt can be proven that an answer always exists. If there are multiple answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n2\n4\n5\n\"\"\") == \"\"\"\n1 4\n4 5\n\"\"\", \"Wrong answer\"", "solution('''\n3\n3\n7\n11\n''') == '''\n1 3\n2 5\n3 7\n'''", "solution('''\n3\n1\n2\n3\n''') == '''\n1 1\n1 2\n2 2\n'''", "solution('''\n2\n10\n15\n''') == '''\n1 4\n1 5\n'''", "solution('''\n1\n1\n''') == '''\n1 1\n'''\nassert solution('''\n2\n5\n3\n''') == '''\n2 4\n1 2\n'''\nassert solution('''\n2\n2\n9\n''') == '''\n1 1\n2 7\n'''\nassert solution('''\n3\n12\n13\n14\n''') == '''\n4 6\n4 7\n4 8\n'''\nassert solution('''\n2\n31\n32\n''') == '''\n15 17\n16 17\n'''\nassert solution('''\n1\n1000000000000000000\n''') == '''\n999999999999999999 1000000000000000001\n'''\nassert solution('''\n1\n999999999999999998\n''') == '''\n499999999999999994 500000000000000004\n'''\nassert solution('''\n3\n3\n4\n5\n''') == '''\n1 2\n1 2\n2 4\n'''\nassert solution('''\n2\n6\n7\n''') == '''\n2 4\n2 5\n'''\nassert solution('''\n4\n8\n9\n10\n11\n''') == '''\n4 6\n4 7\n5 7\n5 8\n'''\nassert solution('''\n", "solution(\"\") == \"\", \"No test cases\"\nassert solution(\"\") == \"\", \"One test case\"\nassert solution(\"\") == \"\", \"Large number of test cases\"", "solution('''\n2\n10\n12\n''') == '''\n3 8\n6 8\n'''", "solution('''\n5\n5\n7\n10\n11\n100\n''') == '''\n-1 2\n-1 3\n1 4\n-1 4\n1 100\n'''", "solution(\"3\\n3\\n4\\n5\") == \"1 2\\n1 2\\n2 3\"\nassert solution(\"4\\n4\\n4\\n4\\n4\") == \"1 2\\n1 2\\n1 2\\n1 2\"\nassert solution(\"4\\n7\\n2\\n10\\n14\") == \"1 3\\n1 1\\n0 1\\n2 4\"\nassert solution(\"5\\n1\\n6\\n11\\n22\\n23\") == \"0 0\\n1 2\\n2 3\\n4 5\\n5 6\"\nassert solution(\"10\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\") == \"0 1\\n1 2\\n1 2\\n2 3\\n2 3\\n3 4\\n3 4\\n4 5\\n4 5\\n5 6\"\nassert solution(\"1\\n4\") == \"1 2\"\nassert solution(\"1\\n17\") == \"4 5\"\nassert solution(\"1\\n17\") == \"4 5\"\nassert solution(\"10\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\") == \"0 1\\n1", "solution('''1\n1''') == '-1 0'\nassert solution('''3\n5''') == '-2 2'\nassert solution('''2\n100000000000000000''') == '-5000000000000000 5000000000000000'\nassert solution('''5\n5\n5\n5\n5\n5''') == '-2 2\\n-2 2\\n-2 2\\n-2 2\\n-2 2'", "solution('''\n2\n1\n2\n''') == '''\n-100000000000000000 0\n-1 1\n'''\n\n# get input\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    print(solution(f'{N}'))", "solution('''\n1\n0\n''') == '-1 0', 'sample 1'\n\nassert solution('''\n1\n1\n''') == '-1 1', 'sample 2'\n\nassert solution('''\n1\n2\n''') == '0 2', 'sample 3'\n\nassert solution('''\n1\n3\n''') == '0 3', 'sample 4'\n\nassert solution('''\n1\n4\n''') == '1 4', 'sample 5'\n\nassert solution('''\n1\n5\n''') == '1 5', 'sample 6'\n\nassert solution('''\n1\n6\n''') == '1 6', 'sample 7'\n\nassert solution('''\n1\n7\n''') == '2 7', 'sample 8'\n\nassert solution('''\n1\n8\n''') == '2 8', 'sample 9'\n\nassert solution('''\n1\n9\n''') == '3 9', 'sample 10'\n\nassert solution('''\n1\n10\n''') == '3 10', 'sample 11'\n\nassert solution('''\n1\n11\n''') == '4 11', 'sample 12'\n\nassert solution('''\n1\n12\n''') == '4 12', 'sample 13'\n\n", "solution('''\n4\n12\n4\n15\n100\n''') == '''\n2 3\n2 3\n5 7\n45 55\n'''", "solution('''\n1\n10\n''') == '''\n2 8\n'''\n\nassert solution('''\n3\n2\n3\n4\n''') == '''\n-1 0\n0 1\n1 2\n'''\n\n# test for large input\nimport random\nfrom string import digits\nfrom collections import deque\nfrom itertools import accumulate\n\nN_MAX = 10**18\ndef gen_random(n: int) -> str:\n    return str(n) + '\\n'\n\ndef check_solution(answer: str, inp: str):\n    n = int(inp)\n    l, r = map(int, answer.split())\n    x = list(range(l, r+1))\n    assert sum(x) == n, f'wrong solution for inp: {inp}'\n\nfor _ in range(50):\n    inp = gen_random(random.randint(1, N_MAX))\n    check_solution(solution(inp), inp)", "solution(\"10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \\\n\"\"\"1 0\n-1 1\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n\"\"\"", "solution(test_data) == test_output\nprint('ok')", "(solution(\"1\\n12\")) == \"3 9\", \"Sample\"\nassert (solution(\"2\\n1\\n2\")) == \"1 2\\n-1 1\", \"Two Answers\"\nassert (solution(\"1\\n100\")) == \"44 55\", \"44 + 45 + 46 + ... + 54 + 55 = 100\"\nassert (solution(\"1\\n1000000000000000000\")) == \"-999999999999999999 1000000000000000001\", \"Unreal range\"\n\nprint(\"All tests are passed\")", "solution(\"input\") == \"output\"", "solution(input()) == output", "solution(\"InputSample1.txt\") == \"OutputSample1.txt\"\nassert solution(\"InputSample2.txt\") == \"OutputSample2.txt\"\nassert solution(\"InputSample3.txt\") == \"OutputSample3.txt\"\nassert solution(\"InputSample4.txt\") == \"OutputSample4.txt\"\nassert solution(\"InputSample5.txt\") == \"OutputSample5.txt\"\n\n# problem source: https://codeforces.com/contest/1341/problem/A", "solution(\"input\") == \"output\"\nassert solution(\"input2\") == \"output2\"\n\n# print(solution(\"input\"))\n# print(solution(\"input2\"))", "solution(sample_input1) == sample_output1\nassert solution(sample_input2) == sample_output2\nassert solution(sample_input3) == sample_output3\n\n# get the input\ninput_list = []\nwhile True:\n    try:\n        input_list.append(input())\n    except EOFError:\n        break\n\n# get the output\noutput_list = []\nfor i in range(len(input_list)):\n    output_list.append(solution(input_list[i]))\n\n# print the output\nfor i in range(len(output_list)):\n    print(output_list[i])", "solution(\"1\\n\") == \"18 9\"", "solution('''\n2\n10\n20\n''') == '''\n3 7\n8 13\n'''\n\n# print(solution('''\n# 2\n# 10\n# 20\n# '''))", "solution('''\n3\n4\n5\n6\n''') == '''\n-1 -1\n-1 0\n-1 1\n'''", "solution('''\n3\n3\n6\n8\n''') == '''\n1 2\n3 4\n5 6\n'''", "solution('''\n3\n1\n5\n15\n''') == '''\n-1 0\n-1 2\n-3 3\n'''", "solution(r'''\n3\n6\n7\n8\n''') == r'''\n-3 4\n-3 5\n-4 4\n'''\n\n# check if solution works for big input\nimport random\nimport io\nimport sys\n\ndef generate_big_input(N: int) -> str:\n    return '\\n'.join([str(random.randint(1, 1e18)) for _ in range(N)]) + '\\n'\n\ninput = generate_big_input(100000)\nprint('Input length:', len(input))\n\nwith io.StringIO(input) as stream:\n    with io.StringIO() as output:\n        sys.stdin = stream\n        sys.stdout = output\n        solution(stream.read())\n        sys.stdin = sys.__stdin__\n        sys.stdout = sys.__stdout__\n\nsys.stdin = sys.__stdin__\nsys.stdout = sys.__stdout__", "solution('''\n2\n2\n10\n''') == '''\n1 2\n1 11\n'''", "solution(stdin=\"2\\n5\\n8\") == \"1 4\\n2 5\"", "solution('''\n3\n1\n2\n3\n''') == '''\n-1 1\n-2 3\n-3 3\n'''", "solution('''2\n12\n6''') == '''2 9\n-1 4'''", "solution(\"\"\"\n\n\"\"\") == \"\"\"\n\"\"\"", "solution(\"t\") == \"t\"\n\n# check the performance of solution\nstdin = []\nfor i in range(int(1e5)):\n    stdin.append(\"t\")\n\nstart = time.time()\nfor _ in range(int(1e3)):\n    solution(stdin)\nprint(f\"Time elapsed: {time.time() - start}\")\n\n# check the correctness of solution\nassert solution(\"t\") == \"t\"\n\n# check the performance of solution\nstdin = []\nfor i in range(int(1e5)):\n    stdin.append(\"t\")\n\nstart = time.time()\nfor _ in range(int(1e3)):\n    solution(stdin)\nprint(f\"Time elapsed: {time.time() - start}\")", "solution('''\n1\n15\n''') == '''\n6 9\n'''\nassert solution('''\n2\n2\n3\n''') == '''\n-1 2\n-1 2\n'''\nassert solution('''\n3\n2\n3\n0\n''') == '''\n-1 2\n-1 2\n0 0\n'''\nassert solution('''\n10\n-11\n-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n''') == '''\n-11 -2\n-11 -2\n-11 -2\n-11 -2\n-11 -2\n-11 -2\n-11 -2\n-11 -2\n-11 -2\n-11 -2\n'''\nassert solution('''\n10\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n''') == '''\n0 0\n-1 2\n-1 2\n-1 2\n-1 2\n-1 2\n-1 2\n-1 2\n-1 2\n-1 2\n'''\nassert solution('''\n10\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n''') == '''\n6 9\n6 9\n6 9\n", "solution(\"\"\"2\n7\n9\"\"\") == \"\"\"3 5\n1 9\"\"\", \"Example 1\"\nassert solution(\"\"\"1\n10\"\"\") == \"\"\"1 10\"\"\", \"Example 2\"\nassert solution(\"\"\"1\n11\"\"\") == \"\"\"-10 10\"\"\", \"Example 3\"\n\nif __name__ == \"__main__\":\n    # read stdin and parse\n    n = int(input())\n    stdin = []\n    for _ in range(n):\n        stdin.append(input())\n    print(solution(\"\\n\".join(stdin)))", "solution('''\n2\n2\n3\n''') == '''\n1 2\n1 3\n'''\n\n# --- Tests -----------------------------\ndef test_solution(solution):\n    import random\n    import math\n    import string\n    import sys\n    import inspect\n    import io\n    from contextlib import redirect_stdout\n\n    # check if the solution works with the test data\n    assert solution('''\n2\n2\n3\n''') == '''\n1 2\n1 3\n'''\n\n    # check the correctness of multiple answers\n    for _ in range(100):\n        n = random.randint(1, 1e18)\n        l, r = -10**18, 10**18\n        while l < r:\n            m = (l + r) // 2\n            s = sum(range(m, m + 2))\n            if s > n:\n                r = m\n            elif s < n:\n                l = m + 1\n            else:\n                l = m\n                break\n        stdin = '''\n{}\n{}\n'''.format(1, n)\n        out = solution(stdin)\n        assert l == int(out.split()[0])\n        assert l + 1 == int(out.split()[1])\n\n    # check that", "solution('''\n1\n\n''') == '''\n'''\n\nassert solution('''\n1\n\n''') == '''\n'''", "solution(sample_in) == sample_out\n\n# test for performance\n\n# gets the current time\nstart = time.time()\n\n# run the function\nout = solution(sample_in)\n\n# check the correctness of solution\nassert out == sample_out\n\n# get the total time\nend = time.time()\ntime_elapsed = end - start\n\n# get the total memory used\nmemory_used = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss\n\n# print the time, memory and output\nprint(f'Time: {time_elapsed:.2f}s Memory: {memory_used / 10**6:.2f}Mb')\nprint(out)", "solution(stdin) == stdout\n\n# submit to codeforces\nf = open('input.txt', 'r')\nt = int(f.readline())\nfor i in range(t):\n    n = int(f.readline())\n    if n % 2 == 0:\n        print(n // 2, n // 2 + 1)\n    else:\n        print(n // 2, n // 2 + 2)", "solution(SAMPLE_TEST_CASES[0]) == SAMPLE_TEST_CASES[0][-1]\n\n# run test\ntest_solution(solution, TEST_CASES, TEST_CASES_EXPECTED)", "solution('''2\n5\n6''') == '''2 3\n3 4'''\n\n# check time complexity\nassert timeit.timeit(lambda: solution(''), number=10000) < 1\n\n\n\n'''\nCyber security is one of the important parts in information technology. In this problem, you have to find the different characters between two strings.\n\nYou are given two strings s and t of the same length, consisting of lowercase English letters. Find the minimum number of characters of the string t you need to change to get a string equal to s. Changing the i-th character of t to ci means replacing it with the character ci.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe first line of each test case contains a single string s (1 \u2264 |s| \u2264 100) \u2014 the string you have.\n\nThe second line of each test case contains a single string t (1 \u2264 |t| \u2264 100) \u2014 the string you want to obtain.\n\nIt is guaranteed that the sum of |s| over all test cases doesn't exceed 100.\n\nOutput\n\nFor each test case, print the minimum number of characters of the string t you need to change to get a string equal to s.\n\n'''\ndef solution(stdin: str) -> str", "solution('''\n2\n2\n1\n''') == '''\n-1 2\n0 1\n'''\n\n# stress test\nfrom random import randint\n\ns = open('solution.out', 'w')\n\ndef solve(n: int) -> str:\n    if n == 1:\n        return \"0 1\"\n    if n == 2:\n        return \"-1 2\"\n    if n % 2 == 0:\n        l = -(n / 2)\n        r = (n / 2) + 1\n        return f\"{l} {r}\"\n    l = -((n - 1) / 2)\n    r = ((n - 1) / 2) + 1\n    return f\"{l} {r}\"\n\nfor i in range(10 ** 4):\n    n = randint(1, 10 ** 18)\n    s.write(f\"{n}\\n\")\n\ns.close()\nwith open('solution.out', 'r') as s, open('test.out', 'w') as t:\n    t.write('\\n'.join(solution(s.read()).split('\\n')[1:]))\n\nwith open('solution.out', 'r') as s, open('test.out', 'r') as t:\n    assert s", "solution(\"1\\n1\") == \"0 1\"\nassert solution(\"1\\n4\") == \"1 3\"\nassert solution(\"1\\n100\") == \"25 76\"\nassert solution(\"1\\n1000000000000000000\") == \"4999999999999999999 500000000000000000\"\nassert solution(\"1\\n9999999999999999999\") == \"4999999999999999999 500000000000000000\"\nassert solution(\"2\\n10\\n10\") == \"1 4\\n1 4\"\nassert solution(\"4\\n1\\n4\\n100\\n1000000000000000000\") == \"0 1\\n1 3\\n25 76\\n4999999999999999999 500000000000000000\"\nassert solution(\"10\\n1\\n4\\n100\\n1000000000000000000\\n9999999999999999999\\n10\\n10\\n1\\n1\\n1\") == \"0 1\\n1 3\\n25 76\\n4999999999999999999 500000000000000000\\n4999999999999999999 500000000000000000\\n1 4\\n1 4\\n0 1\\n0 1\\n0 1\"", "solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\nassert solution(input_5) == output_5\n\nprint(\"all tests passed!\")", "solution(\"1\\n2\") == \"0 2\"\nassert solution(\"2\\n2\\n10\") == \"0 2\\n2 5\"\n\n# get the input and run the solution\nstdin = sys.stdin.read()\nprint(solution(stdin))", "solution(stdin) == stdout", "solution(\"\"\"2\n5\n7\"\"\") == \"\"\"2 3\n3 4\"\"\"\n\n# test case input\ntest_input = \"\"\"3\n1\n3\n100\"\"\"\n\n# print result of test\nprint(solution(test_input))", "solution(\"\"\"\n3\n1\n8\n9\n\"\"\") == \"\"\"\n-1 1\n3 5\n3 5\n\"\"\"", "solution(solution_input) == solution_output, \"Solution not correct!\""], "finish_reason": ["stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-22.432511463570002, -16.939658980299996, -12.0133563821, -16.657176732499998, -100.42690273605108, -26.43499877789999, -18.532078808600005, -29.6372634767, -115.0239854628221, -40.988189704253, -34.384500649699994, -36.48256764953048, -34.05295839360001, -139.86193790647005, -25.602231522454005, -16.7097046964, -83.00239814878599, -7.693659285999999, -8.41901754, -38.814958196383984, -22.2572025281, -39.012448298501994, -21.732798016000004, -24.74885063052, -18.214997393100003, -17.095968506, -18.9172823324, -107.19848812162003, -15.521824268000001, -18.04030845514, -15.0135167115, -23.666956118, -10.498944326, -62.720159698004004, -66.5612435002211, -68.31787884161999, -167.25706368175406, -16.781034279529997, -87.43658432924403, -41.25590290748, -39.715261724320015, -132.04166538693008, -114.85813177492005, -65.53421725363303, -22.782109472224, -31.945339294313, -6.1715626165, -57.225855112679994, -22.9101094688, -21.396603866], "mean_logprob": [-0.7735348780541379, -0.546440612267742, -0.3875276252290323, -0.6406606435576924, -0.33475634245350333, -0.6608749694475, -0.7127722618692308, -0.673574169925, -0.38341328487607335, -0.40184499710051963, -0.4710205568452055, -0.12160855883176834, -0.9459155109333334, -0.5851963929141004, -0.36059481017540845, -1.044356543525, -0.721759983902487, -0.8548510317777778, -1.2027167914285715, -0.3434952052777345, -0.5428585982463414, -0.25498332221243136, -1.8110665013333334, -0.4949770126104, -0.5204284969457142, -0.551482855032258, -0.5563906568352941, -0.46811566865336246, -0.5969932410769231, -0.78436123718, -0.4415740209264706, -1.0289980920869566, -0.8749120271666667, -0.335401923518738, -0.22187081166740333, -0.5175596881940909, -0.5575235456058467, -0.46613984109805556, -0.523572361252958, -0.4125590290748, -0.6510698643331148, -0.4401388846231, -0.38286043924973334, -0.2559930361470039, -0.3350310216503529, -0.49914592647364064, -0.6857291796111111, -1.0218902698692858, -0.7900037747862069, -1.1887002147777779]}
{"prompt": "'''\nTheofanis has a string s_1 s_2 ... s_n and a character c. He wants to make all characters of the string equal to c using the minimum number of operations.\n\nIn one operation he can choose a number x (1 \u2264 x \u2264 n) and for every position i, where i is not divisible by x, replace s_i with c. \n\nFind the minimum number of operations required to make all the characters equal to c and the x-s that he should use in his operations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains the integer n (3 \u2264 n \u2264 3 \u22c5 10^5) and a lowercase Latin letter c \u2014 the length of the string s and the character the resulting string should consist of.\n\nThe second line of each test case contains a string s of lowercase Latin letters \u2014 the initial string.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, firstly print one integer m \u2014 the minimum number of operations required to make all the characters equal to c.\n\nNext, print m integers x_1, x_2, ..., x_m (1 \u2264 x_j \u2264 n) \u2014 the x-s that should be used in the order they are given.\n\nIt can be proved that under given constraints, an answer always exists. If there are multiple answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n3\n3 a\nbab\n3 b\nbab\n4 a\nccca\n\"\"\") == \"\"\"\n1\n3\n0\n1\n1 2\n\"\"\", \"Test failed\"\nassert solution(\"\"\"\n3\n3 a\nbab\n3 b\nbab\n4 a\nccca\n\"\"\") == \"\"\"\n1\n3\n0\n1\n1 2\n\"\"\", \"Test failed\"\nassert solution(\"\"\"\n3\n3 a\nbab\n3 b\nbab\n4 a\nccca\n\"\"\") == \"\"\"\n1\n3\n0\n1\n1 2\n\"\"\", \"Test failed\"\nprint(\"All tests passed\")", "solution(INPUT) == OUTPUT\n\n# Let's try to solve this task as an optimization problem.\n# If a string s consists of letters b and c, then it can be rewritten into ccccc in the following way:\n# For b, add a's to the end of s in the first operation\n# Transform the string into cccc\n# To do this, we need to find the smallest divisor d of the length of the string for which\n# all letters in positions 1, 2, ..., d are the same.\n# We can use the sieve of Eratosthenes to find d.\n\n# Let's also prove that there is only one optimal solution.\n# Let's say x1, x2, ..., xm are the optimal x-s.\n# Consider the process of solving the task.\n# For each next operation the number of c decreases.\n# Then, if m > 1, then there are two numbers x_i and x_j, i != j,\n# such that there are no c between x_i and x_j, since if we merge them into one operation,\n# we get the same or less number of operations, which contradicts the optimality of the solution.\n# Consider what characters there are between x_i and x_j.\n# Since there are no c, all letters must be the same.\n#", "solution(\"4\\n3 a\\nbba\\n4 b\\nbbaa\\n7 a\\nabacabc\\n6 a\\nabcabc\\n\") == \"1\\n1\\n0\\n1\\n7\\n1\\n6\\n\"", "solution('''\n2\n3 a\nabc\n5 b\naaaaa\n''') == '''\n2\n1 2\n0\n'''\n\n# lets test it on codechef\nfrom codechef import submit, py2codestyle\n\nsubmit(solution, py2codestyle=py2codestyle)", "solution('''\n1\n6 x\nabcxxa\n''') == '''\n2\n2 3\n'''\n\n# run with input\ninput = sys.stdin.read()\nsys.stdout.write(solution(input))", "solution('''\n3\n3 a\nbab\n3 a\naaa\n3 a\naba\n''') == '''\n3\n1 3 3\n0\n2\n1 3\n'''", "solution(\n'''3\n3 a\naaa\n3 b\naba\n6 c\nabcccc\n''') == '''1\n1\n1\n1\n1 1 2 3 6\n'''", "solution('''\n7\n5 a\nababa\n7 a\ntatatat\n7 b\ntatatat\n7 t\ntatatat\n5 a\nbabab\n3 t\nttt\n3 a\naaa\n''') == '''\n1 1\n3 1 2\n3 1 2\n3 1 2\n1 1\n1 3\n1 3\n'''", "solution(stdin='''\n4\n9 z\naaaaaaaaa\n4 x\nxxxx\n5 x\naxaxa\n3 x\naaa\n''') == '''\n4\n9 1 3 9\n1\n4\n1\n3\n'''", "solution('''\n2\n7 a\nabbbbbb\n7 b\nabbbbbb\n''') == '''\n4 1 2 4 7\n4 1 2 4 7\n'''\nassert solution('''\n2\n1 a\na\n3 b\naaa\n''') == '''\n0\n0\n'''\n\n# get input and run solution\ninput = sys.stdin.read()\nprint(solution(input))", "solution(stdin) == stdout", "solution('''\n2\n5 b\nabacb\n5 a\nabacb\n''') == '''\n3 2 3 1\n0\n'''", "solution('''\n1\n7 a\nabcabcab\n''') == '''\n4\n1 2 4 7\n'''\n\nif __name__ == '__main__':\n    from sys import stdin\n    print(solution(stdin.read()))", "solution('''\n1\n7 b\ncbcdbbc\n''') == '''\n3\n1 3 7\n'''\n\ndef generator(stdin: str) -> str:\n    pass\n\nprint(''.join(generator('''\n100\n''')))", "(solution('''\n2\n5 a\nababa\n10 z\nzzzzzzzzzz\n''')) == '''\n4\n1 2 4 5\n10\n1 2 3 4 5 6 7 8 9 10\n'''\n\n# # submit the code to the judge system\n# _, *input = open('input.txt').read().split()\n# print(solution(input))", "solution(sample_input) == sample_output", "solution(__file__) == 'expected result', 'Unexpected result.'\n\n# stress testing of the solution\nwhile True:\n    pass", "solution('''\n1\n10 a\nababbaaabb\n''') == '''\n3\n2 3 10\n'''\n\n'''\n# in Python 3\nfrom __future__ import print_function\nfrom sys import setrecursionlimit, stdin, stdout\n\nfrom collections import deque\nfrom math import factorial\nfrom time import time\nfrom typing import List, Tuple\n\nsetrecursionlimit(2 ** 20)\ninput = stdin.readline\nprint = stdout.write\n#'''\n\ndef solve() -> None:\n    n, c = input().split()\n    n = int(n)\n    s = input()\n    cnt = 0\n    for i in range(n):\n        if s[i] != c:\n            cnt += 1\n    if cnt <= 1:\n        print(cnt)\n        return\n    for i in range(1, n + 1):\n        if n % i == 0:\n            m = 0\n            for j in range(i):\n                if s[j] != c:\n                    m += 1\n            if 2 * m <= cnt:\n                print(2)\n                print(i, n)\n                return\n    print(3)\n    for i in range(1, n + 1):\n        if i *", "solution(r'''\n2\n6 a\naaabbb\n6 b\nbbbaaa\n''') == r'''\n3\n1 2 6\n3\n3 2 1\n'''", "solution('''1\n5 a\nabaaa''') == '''2\n2 3'''\n\nassert solution('''1\n4 a\nabcd''') == '''3\n1 2 4'''\n\nassert solution('''2\n6 a\nabcabc\n8 a\nabcabcbc''') == '''2\n2 3\n2\n2 4'''\n\n# simulate stdin\nimport io\nimport sys\n\nif __name__ == '__main__':\n    user_input = '''3\n10 a\nabaabbbbab\n10 a\nabbabbbbab\n10 a\nabaaabbbbb'''\n    sys.stdin = io.StringIO(user_input)\n\n    n = int(input())\n    for _ in range(n):\n        print(solution(sys.stdin.read()))", "solution('''\n1\n4 x\nxaxa\n''') == '''\n1\n4\n'''\nassert solution('''\n2\n4 x\nxaxa\n5 x\nxaxxx\n''') == '''\n1\n4\n2\n1 2\n'''\nassert solution('''\n3\n6 x\nxaxaxa\n6 x\nxaxxax\n6 x\nxaxxxa\n''') == '''\n2\n3 6\n1\n1\n1\n1\n'''\n\n# get input and print the output\nfrom sys import stdin\n\nstdin = stdin.read()\nsolution(stdin)", "(solution(\"\"\"\\\n2\n7 c\ncbbbbbc\n7 c\ncbcccbz\n\"\"\") == \"\"\"\\\n2\n1 7\n1 3\n\"\"\")\n\n# check the correctness of solution\nassert (solution(\"\"\"\\\n1\n7 a\nabcddba\n\"\"\") == \"\"\"\\\n1\n7\n\"\"\")\n\n# check the correctness of solution\nassert (solution(\"\"\"\\\n2\n1 c\nc\n1 a\na\n\"\"\") == \"\"\"\\\n0\n\"\"\")\n\n# check the correctness of solution\nassert (solution(\"\"\"\\\n4\n5 b\nababa\n5 b\naaaaa\n5 b\naabaa\n5 b\nababb\n\"\"\") == \"\"\"\\\n2\n1 3\n1 3\n1 3\n1 3\n\"\"\")\n\n# check the correctness of solution\nassert (solution(\"\"\"\\\n6\n5 a\nabcba\n5 a\naaaaa\n5 a\naabaa\n5 a\nababb\n7 a\ncaaabaa\n7 a\ncaabaaa\n\"\"\") == \"\"\"\\\n2\n1 3\n1 3\n1 3\n1 3\n4 5\n4 5\n\"\"\")\n\n# check the correctness of solution\nassert (solution(\"\"\"\\\n2\n5 a\nabbbb\n5 a\nabb", "solution('''\n''') == '''\n'''", "solution(stdin=r'''\n1\n2 c\naa\n''') == r'''\n0\n''', \"must be 0\"\n\nassert solution(stdin=r'''\n1\n3 a\nabc\n''') == r'''\n1\n1\n''', \"must be 1\"\n\nassert solution(stdin=r'''\n1\n2 a\naa\n''') == r'''\n0\n''', \"must be 0\"\n\nassert solution(stdin=r'''\n1\n4 a\nbacd\n''') == r'''\n2\n2\n4\n''', \"must be 2\"\n\nassert solution(stdin=r'''\n1\n5 a\nbcabc\n''') == r'''\n2\n2\n5\n''', \"must be 2\"\n\nassert solution(stdin=r'''\n1\n5 a\nbcbca\n''') == r'''\n3\n2\n3\n5\n''', \"must be 3\"\n\n# test speed of solution\nfrom utils import measure_time\n\nassert measure_time(solution, stdin=r'''\n1\n100000 a\n''') < 1", "solution(\"\"\"\n3\n3 a\naba\n3 a\nabb\n3 a\nbab\n\"\"\") == \"\"\"\n3\n1 3 3\n2 1 3\n2 1 3\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"\nassert solution(\"\"\"\n", "solution(r'''\n3\n3 b\nbab\n3 a\naaa\n7 a\naabbaaa\n''') == r'''\n1\n3\n0\n4 2\n'''\n\n# get the input\nlines = []\nwhile True:\n    line = input()\n    if line:\n        lines.append(line)\n    else:\n        break\ntext = '\\n'.join(lines)\n\n# print the solution\nprint(solution(text))", "solution('''\n''') == '''\n'''", "solution(\n    '''\n5\n5 c\nccccc\n6 c\nxccccc\n4 c\naaac\n4 x\naaaa\n4 s\nssss\n    '''\n) == '''\n1\n1\n1\n3\n3 1\n3\n3 1\n'''", "solution(\"\"\"3\n3 a\naaa\n3 b\naab\n5 b\naaabb\n\"\"\") == \"\"\"1\n1\n2\n2 1\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"5\n5 a\naaaaa\n5 a\naaaaa\n5 a\naaaaa\n5 a\naaaaa\n5 a\naaaaa\n\"\"\") == \"\"\"0\n0\n0\n0\n0\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"5\n5 a\naaabb\n5 a\nabbbb\n5 a\nabbbb\n5 a\nabbbb\n5 a\nabbbb\n\"\"\") == \"\"\"2\n1 2\n1 2\n1 2\n1 2\n1 2\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n3 a\nbba\n\"\"\") == \"\"\"3\n1 2 3\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n3 a\nbba\n\"\"\") == \"\"\"3\n1 2 3\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n2 a\nba\n\"\"\") == \"\"\"2\n1 2\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n2 a\nbb\n\"\"\") == \"\"\"0\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"3\n3 a\naaa\n3 b\n", "solution('''\n2\n5 c\ncaaac\n6 c\ncccccc\n''') == '''\n2\n2 3\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5 c\naacaa\n6 c\naaaaca\n''') == '''\n4\n2 3 6\n2 3\n'''", "solution('''\n1\n5 a\nababa\n''') == '''\n3\n1 2 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 z\nbcdef\n''') == '''\n2\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7 b\nbabbaba\n''') == '''\n3\n1 2 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 a\naaaa\n''') == '''\n1\n4\n'''\n\n# read the input for task\ndef read(file: str = 'input/4.in') -> str:\n    with open(file, 'r') as f:\n        return f.read()\n\n# submit the solution\ndef submit(solution: str, task: str = '4') -> None:\n    print(solution)\n    token = os.environ['TJCTF_TOKEN']\n    data = {'token': token, 'solution': solution, 'task': task}\n    response = requests.post('https://tjctf.org/chals/submit', data=data)\n    print(response.text)\n\n#run the submission\nsubmit(solution(read()))", "solution('''\n2\n12 a\naaaaaaaaaaaa\n9 b\nbbbbbbbbb\n''') == '''\n3\n1 2 4\n1\n'''", "solution(test_case_1) == expected_result_1\nassert solution(test_case_2) == expected_result_2\nassert solution(test_case_3) == expected_result_3", "solution(\"\"\"\n3\n3 a\nabc\n3 b\nabc\n3 c\nabc\n\"\"\") == \"\"\"\n1\n1\n0\n1\n2 3\n\"\"\"", "solution(\"\"\"1\n5 a\naabba\"\"\") == \"\"\"2\n2 5\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"4\n4 a\naaaa\n4 a\naaca\n4 a\nbaca\n5 a\naabaa\"\"\") == \"\"\"2\n2 3\n3\n3\n3\n3\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"3\n3 c\nabc\n3 b\nbbb\n3 a\naab\"\"\") == \"\"\"1\n3\n0\n2\n2\"\"\"", "solution(\n\"\"\"\n1\n6 a\nabdabd\n\"\"\"\n) == \"\"\"\n2\n2 3\n\"\"\", \"Solution does not match expected answer.\"\n\n# submit the answer to codeforces\nanswer = solution(stdin)\nprint(answer)\n\n# submit the answer to codeforces\nanswer = solution(stdin)\nwith open('out.txt', 'w') as file:\n    file.write(answer)", "solution(\"\"\"\n3\n3 a\nbbb\n3 a\nbab\n3 a\naab\n\"\"\") == \"\"\"\n1\n1\n2\n1 1\n2 1 3\n\"\"\"\nassert solution(\"\"\"\n4\n4 a\nbaab\n4 a\nbaaa\n4 a\naaab\n4 a\nbbaa\n\"\"\") == \"\"\"\n3\n2\n3\n3\n1 2\n1 2 3\n1 2 3\n1 3\n\"\"\"\n\n# check time limit\nimport timeit\nimport random\n\ndef create_test_input(length: int, chars: int) -> str:\n    lines = []\n    lines.append(f\"{length}\\n\")\n    for i in range(length):\n        lines.append(f\"{random.randint(1, chars)}\\n\")\n    return \"\".join(lines)\n\ndef run(func, input_: str):\n    return func(input_)\n\nTEST_CASES = [\n    (\"\"\"\n3\n3 a\nbbb\n3 a\nbab\n3 a\naab\n\"\"\", \"\"),\n    (\"\"\"\n4\n4 a\nbaab\n4 a\nbaaa\n4 a\naaab\n4 a\nbbaa\n\"\"\", \"\"),\n    (\"\"\"\n5\n5 a\nbb", "solution('''\n3\n3 a\nxab\n3 b\nxab\n4 b\nbbbb\n''') == '''\n2\n1 2\n0\n1\n'''", "solution('''\n1\n8 a\naaaaaaaa\n''') == '''\n3 1 2 4\n'''\nassert solution('''\n1\n10 b\naabbabbbba\n''') == '''\n1 10\n'''\nassert solution('''\n1\n3 b\naaa\n''') == '''\n1 1\n'''\nassert solution('''\n1\n7 a\naaaaaaa\n''') == '''\n1 1\n'''\nassert solution('''\n1\n5 a\nababa\n''') == '''\n2 1 2\n'''\nassert solution('''\n1\n6 c\nacbcca\n''') == '''\n1 3\n'''\nassert solution('''\n1\n6 b\nbaaabb\n''') == '''\n3 1 2 3\n'''\nassert solution('''\n1\n6 a\naaabbb\n''') == '''\n1 6\n'''\nassert solution('''\n1\n6 a\naababa\n''') == '''\n2 1 2\n'''\nassert solution('''\n1\n6 b\nbababa\n''') == '''\n1 6\n'''\nassert solution('''\n1\n3 a\naaa\n''') == '''\n1 1\n'''\nassert solution(", "solution('''\n2\n5 a\naabaa\n7 a\naaabaaa\n''') == '''\n3 1 2 4\n3 1 2 7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n11 b\nbbbabaaabab\n''') == '''\n4 1 2 4 10\n'''\n\nassert solution('''\n3\n3 b\nabb\n4 b\nbabb\n6 a\naabbaa\n''') == '''\n1 3\n2 1 2\n2 3 6\n'''", "solution('''\n1\n6 c\ncbaabc\n''') == '''\n1\n6\n'''\n\nassert solution('''\n2\n3 a\naba\n3 a\nbba\n''') == '''\n1\n1\n1\n3\n'''\n\nassert solution('''\n2\n6 c\ncbaabc\n6 c\naaaaaa\n''') == '''\n0\n0\n'''\n\nassert solution('''\n1\n6 a\naaaaaa\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5 a\nzzzzz\n''') == '''\n2\n2\n3\n'''\n\nassert solution('''\n1\n4 a\naaaz\n''') == '''\n2\n1\n2\n'''\n\nassert solution('''\n1\n4 a\nazzz\n''') == '''\n2\n2\n3\n'''\n\nassert solution('''\n1\n4 a\nzaza\n''') == '''\n3\n1\n2\n3\n'''\n\nassert solution('''\n1\n4 a\nzzzz\n''') == '''\n1\n1\n'''\n\nassert solution('''\n1\n6 b\naaaaaa\n''') == '''\n1\n1", "solution(\"\"\"\n3\n3 a\nbba\n10 b\nbbbbbbbbbb\n6 a\naabbbb\n\"\"\") == \"\"\"\n2\n2 3\n1\n3\n\"\"\"", "(solution(\"input.txt\") == \"output.txt\")", "solution(textwrap.dedent('''\n    2\n    5 a\n    abbba\n    6 a\n    ababab\n''')) == textwrap.dedent('''\n    2\n    2 3\n    2\n    2 3\n''')", "solution(\"\"\"\n5\n5 a\nbacba\n4 x\nacxx\n7 x\nacxxxac\n4 x\nxxxx\n4 x\nabca\n\"\"\") == \"\"\"\n2\n2 3\n2\n1 3\n2\n2 5\n1\n4\"\"\", \"Solution is incorrect!\"", "solution('''1\n3 c\ncbb''') == '''2\n1 2'''\n\n# check the correctness of solution\nassert solution('''3\n4 a\nbbbb\n4 b\naaaa\n4 c\nabac''') == '''1\n1\n1\n2'''", "solution(INPUT_SAMPLE0) == OUTPUT_SAMPLE0\nassert solution(INPUT_SAMPLE1) == OUTPUT_SAMPLE1\nassert solution(INPUT_SAMPLE2) == OUTPUT_SAMPLE2\nassert solution(INPUT_SAMPLE3) == OUTPUT_SAMPLE3", "solution(\"\") == \"\"\n\n'''\nInput\n3\n4 a\nabab\n4 a\nabba\n4 a\nabac\n\nOutput\n2\n2 3\n2\n2 3\n1\n2\n'''", "solution('''\n''') == '''\n'''", "solution(stdin) == stdout\n\n# test cases\ntest_cases = [\n    {\n        'stdin': '''1\n3 b\naba''',\n        'stdout': '''2\n2 3'''\n    },\n    {\n        'stdin': '''2\n4 a\nabba\n4 b\nabba''',\n        'stdout': '''1\n4\n4\n4'''\n    },\n    {\n        'stdin': '''1\n3 a\nbbb''',\n        'stdout': '''1\n1'''\n    },\n    {\n        'stdin': '''1\n8 z\nazzzzzzz''',\n        'stdout': '''3\n2 4 6'''\n    },\n    {\n        'stdin': '''2\n2 b\naa\n2 b\nab''',\n        'stdout': '''0\n\n1\n2'''\n    },\n    {\n        'stdin': '''1\n6 a\nzzzzzz''',\n        'stdout': '''6\n1 2 3 4 5 6'''\n    },\n    {\n        'stdin': '''1\n2 c\ncg''',\n        'stdout': '''1\n1'''\n    },\n    {\n"], "finish_reason": ["stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-51.69510515800003, -400.04893462326015, -46.47765754699999, -54.268595782499986, -38.275044143929996, -29.182130419099998, -36.987258734499996, -68.20751289980004, -58.50182592943998, -52.86546303319541, -5.502514435, -27.137062342800007, -29.814171271750002, -58.70962558579999, -52.38563692129001, -6.612515348600001, -35.4795478189, -157.27177875216398, -27.024811167039996, -99.02993840237197, -87.84204316991602, -170.6499773631408, -6.610815249000001, -102.158158164665, -41.98067134912695, -52.29172842095001, -6.607362426000002, -66.53206128820001, -100.04461219241702, -54.04133741204999, -127.52489640338145, -24.484304646, -13.757976127415002, -22.4671988251, -85.75186514913997, -70.24904046799006, -145.54508453957288, -32.65391129489999, -113.76414845278255, -81.58410235810004, -111.75640335419334, -35.6292730247, -11.255207958900003, -31.528745559220003, -82.1226819033, -43.99213875335, -11.329986263450001, -40.440382324540025, -6.598116023000001, -117.00744002958997], "mean_logprob": [-0.3446340343866667, -1.3334964487442, -0.737740595984127, -0.7434054216780822, -0.6714920025250877, -0.6484917870911111, -0.8040708420543479, -0.7750853738613637, -1.0086521711972414, -0.5339945760928828, -0.6113904927777778, -0.7334341173729729, -0.4808737301895161, -0.917337899778125, -0.5820626324587778, -0.6011377589636364, -1.108735869340625, -0.5242392625072133, -0.6142002537963637, -0.5104636000122268, -0.5741310011105621, -0.5688332578771367, -0.4722010892142857, -0.37696737330134683, -0.13993557116375666, -0.4753793492813636, -0.471954459, -0.9642327722927536, -0.33348204064139, -0.6433492549053571, -0.42508298801127165, -0.61210761615, -0.2927228963279787, -0.5760820211564103, -0.7145988762428334, -0.6887160830195098, -0.48515028179857667, -0.759393285927907, -0.379213828175942, -0.6373757996726562, -0.37252134451397767, -0.8097562051068182, -0.8039434256357143, -0.5085281541809678, -1.2076864985779412, -0.6375672283094203, -0.15957727131619717, -0.7929486730301961, -0.4712940016428571, -0.39002480009863333]}
{"prompt": "'''\nIt is the hard version of the problem. The difference is that in this version, there are nodes with already chosen colors.\n\nTheofanis is starving, and he wants to eat his favorite food, sheftalia. However, he should first finish his homework. Can you help him with this problem?\n\nYou have a perfect binary tree of 2^k - 1 nodes \u2014 a binary tree where all vertices i from 1 to 2^{k - 1} - 1 have exactly two children: vertices 2i and 2i + 1. Vertices from 2^{k - 1} to 2^k - 1 don't have any children. You want to color its vertices with the 6 Rubik's cube colors (White, Green, Red, Blue, Orange and Yellow).\n\nLet's call a coloring good when all edges connect nodes with colors that are neighboring sides in the Rubik's cube.\n\n<image>| <image>  \n---|---  \nA picture of Rubik's cube and its 2D map.\n\nMore formally: \n\n  * a white node can not be neighboring with white and yellow nodes; \n  * a yellow node can not be neighboring with white and yellow nodes; \n  * a green node can not be neighboring with green and blue nodes; \n  * a blue node can not be neighboring with green and blue nodes; \n  * a red node can not be neighboring with red and orange nodes; \n  * an orange node can not be neighboring with red and orange nodes; \n\n\n\nHowever, there are n special nodes in the tree, colors of which are already chosen.\n\nYou want to calculate the number of the good colorings of the binary tree. Two colorings are considered different if at least one node is colored with a different color.\n\nThe answer may be too large, so output the answer modulo 10^9+7.\n\nInput\n\nThe first line contains the integers k (1 \u2264 k \u2264 60) \u2014 the number of levels in the perfect binary tree you need to color.\n\nThe second line contains the integer n (1 \u2264 n \u2264 min(2^k - 1, 2000)) \u2014 the number of nodes, colors of which are already chosen.\n\nThe next n lines contains integer v (1 \u2264 v \u2264 2^k - 1) and string s \u2014 the index of the node and the color of the node (s is one of the white, yellow, green, blue, red and orange).\n\nIt is guaranteed that each node v appears in the input at most once.\n\nOutput\n\nPrint one integer \u2014 the number of the different colorings modulo 10^9+7.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''4\n2\n3 white\n4 green''') == '4'\nassert solution('''4\n2\n2 white\n4 red''') == '1'\nassert solution('''4\n1\n1 white''') == '6'\nassert solution('''4\n3\n2 white\n3 white\n4 white''') == '0'\nassert solution('''3\n3\n2 white\n3 blue\n4 red''') == '6'\nassert solution('''6\n9\n1 blue\n2 white\n3 white\n4 white\n5 red\n6 green\n7 blue\n8 white\n9 orange''') == '9759'\nassert solution('''6\n8\n1 blue\n2 white\n3 white\n4 white\n5 red\n6 green\n7 blue\n8 white''') == '19234'\nassert solution('''6\n7\n1 blue\n2 white\n3 white\n4 white\n5 red\n6 green\n7 blue''') == '31619'\nassert solution('''6\n4\n1 blue\n2 white\n3 white\n4 white''') == '96273'\nassert solution('''6\n5\n1 blue\n2 white\n3 white\n4 white\n5 red''') == '23450'\nassert solution('''6\n6\n1 blue\n2 white", "solution('''\\\n1\n3\n1 green\n2 red\n3 blue\n''') == '3'\n\nassert solution('''\\\n1\n1\n1 green\n''') == '5'\n\nassert solution('''\\\n2\n2\n1 yellow\n2 green\n''') == '2'\n\nassert solution('''\\\n4\n4\n1 yellow\n2 green\n4 yellow\n8 green\n''') == '7'\n\nassert solution('''\\\n6\n10\n1 green\n2 green\n4 yellow\n8 white\n16 blue\n32 red\n64 blue\n128 white\n256 yellow\n512 red\n''') == '1'\n\nassert solution('''\\\n6\n10\n1 green\n2 green\n4 yellow\n8 white\n16 blue\n32 red\n64 blue\n128 white\n256 white\n512 red\n''') == '0'\n\nassert solution('''\\\n20\n2000\n1 white\n2 green\n4 yellow\n8 white\n16 blue\n32 red\n64 blue\n128 yellow\n256 green\n512 red\n1024 blue\n2048 red\n4096 white\n8192 green\n16384 red\n32768 yellow\n65536 green\n131072 blue\n262144 white\n524288 yellow\n1048576 red\n''') == '1'\n\n# stress-", "solution('''\n3\n2\n2 red\n3 green\n''') == '9'\nassert solution('''\n4\n4\n4 red\n7 blue\n8 white\n11 yellow\n''') == '360'\nassert solution('''\n6\n2\n1 red\n2 green\n''') == '208'\nassert solution('''\n2\n1\n1 blue\n''') == '5'\nassert solution('''\n3\n3\n1 white\n2 blue\n3 orange\n''') == '3'\nassert solution('''\n3\n3\n1 white\n2 blue\n3 white\n''') == '0'\nassert solution('''\n2\n2\n1 blue\n2 blue\n''') == '0'\nassert solution('''\n2\n2\n1 blue\n2 orange\n''') == '0'\nassert solution('''\n10\n1\n1 yellow\n''') == '1493'\nassert solution('''\n10\n1\n1 white\n''') == '156'\nassert solution('''\n10\n1\n1 red\n''') == '156'\nassert solution('''\n10\n1\n1 green\n''') == '156'\nassert solution('''\n10\n1\n1 blue\n''') == '156'\nassert solution('''\n10", "solution(\"\"\"\n2\n2\n2 white\n1 yellow\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3\n3 white\n2 yellow\n1 red\n\"\"\") == \"6\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n2 white\n1 yellow\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n2 white\n1 yellow\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n2 white\n1 yellow\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n2 white\n1 yellow\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n2 white\n1 yellow\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n2 white\n1 yellow\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n2 white\n1 yellow\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n2 white\n1 yellow\n\"\"\") == \"1\"\n\n# check the correctness of", "solution('''\n2\n2\n1 yellow\n2 white\n''') == '4'\n\nassert solution('''\n5\n5\n5 yellow\n6 yellow\n5 green\n3 blue\n1 orange\n''') == '0'\n\nassert solution('''\n3\n6\n1 yellow\n2 white\n1 blue\n1 green\n1 red\n1 orange\n''') == '3'\n\nassert solution('''\n8\n8\n2 yellow\n4 yellow\n6 yellow\n1 white\n8 white\n3 green\n5 green\n7 green\n''') == '5'\n\nassert solution('''\n5\n5\n5 yellow\n6 yellow\n5 green\n3 blue\n1 orange\n''') == '0'\n\nassert solution('''\n3\n6\n1 yellow\n2 white\n1 blue\n1 green\n1 red\n1 orange\n''') == '3'\n\nassert solution('''\n8\n8\n2 yellow\n4 yellow\n6 yellow\n1 white\n8 white\n3 green\n5 green\n7 green\n''') == '5'\n\nassert solution('''\n3\n6\n1 yellow\n2 white\n1 blue\n1 green\n1 red\n1 orange\n''') == '3'\n\nassert solution('''\n8\n8\n2 yellow\n4 yellow\n6 yellow\n", "solution('''\n5\n5\n5 green\n4 blue\n8 white\n1 red\n7 yellow\n''') == '4'\n\nassert solution('''\n5\n5\n5 white\n4 blue\n8 white\n1 red\n7 yellow\n''') == '0'\n\nassert solution('''\n2\n2\n1 red\n2 red\n''') == '0'\n\nassert solution('''\n3\n3\n3 blue\n1 red\n2 red\n''') == '0'\n\nassert solution('''\n3\n3\n3 red\n1 red\n2 red\n''') == '0'\n\nassert solution('''\n3\n3\n3 red\n1 blue\n2 blue\n''') == '0'\n\nassert solution('''\n3\n3\n3 blue\n1 blue\n2 blue\n''') == '0'\n\nassert solution('''\n3\n2\n1 white\n2 white\n''') == '0'\n\nassert solution('''\n3\n2\n1 white\n2 yellow\n''') == '1'\n\nassert solution('''\n4\n4\n4 blue\n2 red\n3 white\n1 yellow\n''') == '1'\n\nassert solution('''\n4\n4\n4 blue\n2 red\n3 red\n1 yellow\n''') ==", "solution('''\n1\n1\n1 white\n''') == '2'\n\nassert solution('''\n2\n2\n1 white\n2 green\n''') == '1'\n\nassert solution('''\n3\n3\n1 white\n2 green\n3 red\n''') == '1'\n\nassert solution('''\n1\n2\n1 white\n2 white\n''') == '0'\n\nassert solution('''\n1\n2\n1 white\n2 green\n''') == '0'\n\nassert solution('''\n1\n2\n1 white\n2 red\n''') == '0'\n\nassert solution('''\n1\n2\n1 yellow\n2 blue\n''') == '0'\n\nassert solution('''\n2\n3\n1 white\n2 green\n3 red\n''') == '0'\n\nassert solution('''\n2\n4\n1 white\n2 green\n3 red\n4 orange\n''') == '1'\n\nassert solution('''\n2\n4\n1 white\n2 green\n3 red\n4 blue\n''') == '0'\n\nassert solution('''\n2\n3\n1 white\n2 green\n3 yellow\n''') == '0'\n\nassert solution('''\n2\n3\n1 white\n2 green\n3 orange\n", "solution('''\n3\n3\n1 white\n2 green\n3 blue\n''') == '''\n1\n'''\n\nassert solution('''\n5\n5\n1 white\n2 white\n3 green\n4 red\n5 orange\n''') == '''\n0\n'''\n\nassert solution('''\n4\n2\n1 white\n2 white\n''') == '''\n0\n'''\n\nassert solution('''\n4\n1\n1 white\n''') == '''\n3\n'''\n\nassert solution('''\n4\n4\n1 white\n2 white\n3 green\n4 green\n''') == '''\n0\n'''\n\nassert solution('''\n4\n4\n1 white\n2 white\n3 green\n4 blue\n''') == '''\n1\n'''\n\nassert solution('''\n4\n4\n1 white\n2 green\n3 green\n4 blue\n''') == '''\n0\n'''\n\nassert solution('''\n4\n4\n1 white\n2 green\n3 red\n4 blue\n''') == '''\n1\n'''\n\nassert solution('''\n4\n4\n1 white\n2 green\n3 red\n4 yellow\n''') == '''\n1\n'''\n\nassert solution('''\n4\n4\n", "solution('''\n1\n2\n1 white\n2 yellow\n''') == '1'\n\nassert solution('''\n2\n1\n1 green\n''') == '2'\n\nassert solution('''\n2\n2\n1 red\n2 blue\n''') == '0'\n\nassert solution('''\n3\n5\n1 red\n3 blue\n5 green\n6 yellow\n7 orange\n''') == '4'\n\nassert solution('''\n4\n9\n1 red\n2 orange\n4 yellow\n8 green\n16 blue\n32 white\n33 orange\n49 white\n64 yellow\n''') == '17'\n\n# check performance\nassert solution('''\n4\n12\n4 red\n11 yellow\n12 blue\n17 white\n18 orange\n19 green\n24 red\n26 white\n31 green\n37 yellow\n38 orange\n49 blue\n''') == '37'\n\nassert solution('''\n4\n24\n1 red\n2 orange\n4 yellow\n8 green\n16 blue\n32 white\n33 orange\n34 white\n35 green\n36 yellow\n37 red\n38 blue\n39 orange\n40 green\n41 white\n42 yellow\n43 red\n44 blue\n45 orange\n46 white\n47 green\n48 yellow\n49 red\n50 blue\n51 orange\n52 white\n''') == '188'\n\n", "solution(sample_in) == sample_out", "solution(str) == 'str'\n\n# check the performance of solution\nsolution(str)", "solution(\"4\\n1\\n1 yellow\\n\") == \"6\"\nassert solution(\"4\\n2\\n1 white\\n2 green\\n\") == \"6\"\nassert solution(\"4\\n2\\n2 green\\n1 white\\n\") == \"6\"\nassert solution(\"4\\n2\\n1 white\\n3 blue\\n\") == \"24\"\nassert solution(\"4\\n3\\n1 white\\n2 green\\n3 blue\\n\") == \"6\"\nassert solution(\"4\\n3\\n1 white\\n2 red\\n3 yellow\\n\") == \"6\"\nassert solution(\"4\\n3\\n1 white\\n2 green\\n4 red\\n\") == \"24\"\nassert solution(\"4\\n3\\n1 white\\n2 green\\n5 red\\n\") == \"24\"\nassert solution(\"4\\n3\\n1 white\\n2 green\\n8 red\\n\") == \"24\"\nassert solution(\"4\\n3\\n1 white\\n3 blue\\n4 red\\n\") == \"48\"\nassert solution(\"4\\n3\\n1 white\\n3 blue\\n5 red\\n\") == \"48\"\nassert solution(\"4\\n3\\n1 white\\n3 blue\\n8 red\\n\") == \"", "solution(\"\"\"\n4\n1\n1 green\n\"\"\") == \"\"\"\n6\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n2\n1 white\n2 yellow\n\"\"\") == \"\"\"\n12\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1\n2 yellow\n\"\"\") == \"\"\"\n24\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1\n4 blue\n\"\"\") == \"\"\"\n24\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n2\n2 green\n3 blue\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n3\n6 blue\n7 orange\n8 white\n\"\"\") == \"\"\"\n240\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n2\n7 red\n8 green\n\"\"\") == \"\"\"\n480\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n3\n7 red\n8 green\n14 blue\n\"\"\") == \"\"\"\n480\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n4\n2 red\n5 green\n7 orange\n8 white\n\"\"\") == \"\"\"\n120\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n4\n2", "solution('''3\n3\n1 red\n2 blue\n3 green''') == '8'\nassert solution('''4\n4\n1 red\n2 blue\n4 green\n5 green''') == '4'\nassert solution('''4\n4\n1 red\n2 blue\n4 green\n5 red''') == '0'\nassert solution('''4\n4\n1 red\n2 blue\n4 green\n3 green''') == '64'\nassert solution('''4\n4\n1 red\n2 red\n4 green\n3 green''') == '0'\nassert solution('''3\n3\n1 red\n2 blue\n3 red''') == '0'\nassert solution('''3\n3\n1 red\n2 blue\n3 yellow''') == '0'\nassert solution('''3\n3\n1 red\n2 red\n3 yellow''') == '0'\nassert solution('''3\n3\n1 white\n2 white\n3 red''') == '0'\nassert solution('''3\n3\n1 red\n2 red\n3 white''') == '0'\nassert solution('''3\n3\n1 red\n2 yellow\n3 white''') == '0'\nassert solution('''3\n3\n1 red\n2 red\n3 white''') == '0'\nassert", "solution('''\n1\n1\n1 white\n''') == '4'\n\nassert solution('''\n2\n1\n1 white\n''') == '8'\n\nassert solution('''\n2\n1\n1 green\n''') == '7'\n\nassert solution('''\n2\n2\n1 white\n2 green\n''') == '3'\n\nassert solution('''\n2\n2\n1 white\n2 white\n''') == '1'\n\nassert solution('''\n2\n2\n1 white\n2 yellow\n''') == '0'\n\nassert solution('''\n2\n2\n1 white\n3 green\n''') == '3'\n\nassert solution('''\n2\n2\n1 white\n3 white\n''') == '0'\n\nassert solution('''\n3\n3\n1 white\n3 white\n7 white\n''') == '0'\n\nassert solution('''\n3\n3\n1 white\n3 green\n7 white\n''') == '0'\n\nassert solution('''\n3\n3\n1 white\n3 green\n7 green\n''') == '48'\n\nassert solution('''\n4\n4\n1 white\n3 green\n7 white\n15 green\n''') == '0'\n\nassert solution('''\n4", "solution(\"\"\"\n3\n3\n1 white\n3 white\n5 white\n\"\"\") == \"\"\"\n6\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n1\n1 yellow\n\"\"\") == \"\"\"\n4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n4\n1 green\n2 white\n3 white\n4 yellow\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n4\n2 yellow\n4 green\n8 white\n16 blue\n\"\"\") == \"\"\"\n10\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n10\n3 red\n7 green\n15 blue\n31 white\n63 orange\n127 yellow\n255 white\n511 white\n1023 white\n2047 white\n\"\"\") == \"\"\"\n8128\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n20\n1 red\n3 green\n7 blue\n15 white\n31 yellow\n63 orange\n127 white\n255 green\n511 white\n1023 orange\n2047 red\n4095 white\n8191 blue\n16383 yellow\n32767 red\n65535 orange\n131071 green\n262143 white\n524287 blue\n1048575 yellow\n\"\"\") == \"\"\"\n1048576\n\"\"\"\n\n# check the correctness of solution\nassert", "solution('''\n5\n4\n4 yellow\n8 blue\n10 blue\n11 blue\n''') == '6'\n\nassert solution('''\n5\n1\n1 green\n''') == '12'\n\nassert solution('''\n7\n3\n8 blue\n10 blue\n11 blue\n''') == '0'\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''\n\n# assert solution('''\n# ''') == ''", "solution('''\n4\n1\n7 red\n''') == '9'\n\nassert solution('''\n4\n1\n8 yellow\n''') == '0'\n\nassert solution('''\n4\n2\n1 red\n2 red\n''') == '0'\n\nassert solution('''\n4\n1\n1 green\n''') == '10'\n\nassert solution('''\n4\n2\n3 green\n2 red\n''') == '1'\n\nassert solution('''\n4\n3\n1 red\n2 red\n3 red\n''') == '1'\n\nassert solution('''\n3\n2\n2 white\n3 white\n''') == '1'\n\nassert solution('''\n3\n2\n2 red\n3 red\n''') == '0'\n\nassert solution('''\n3\n2\n2 green\n3 green\n''') == '1'\n\nassert solution('''\n3\n2\n2 blue\n3 blue\n''') == '1'\n\nassert solution('''\n3\n2\n2 orange\n3 orange\n''') == '1'\n\nassert solution('''\n3\n2\n2 yellow\n3 yellow\n''') == '1'\n\nassert solution('''\n4\n2\n2 white\n8 white\n''') ==", "solution(\"1\\n1\\n1 white\") == '1'\nassert solution(\"2\\n2\\n1 white\\n2 yellow\") == '0'\nassert solution(\"2\\n2\\n1 white\\n2 blue\") == '1'\nassert solution(\"2\\n2\\n1 blue\\n2 white\") == '0'\nassert solution(\"2\\n2\\n1 white\\n2 blue\") == '1'\nassert solution(\"2\\n2\\n1 green\\n2 blue\") == '0'\nassert solution(\"2\\n2\\n1 red\\n2 orange\") == '0'\nassert solution(\"3\\n3\\n1 white\\n2 blue\\n4 green\") == '2'\nassert solution(\"3\\n5\\n1 white\\n2 blue\\n4 green\\n3 red\\n5 orange\") == '3'\nassert solution(\"4\\n8\\n1 white\\n2 blue\\n4 green\\n3 red\\n5 orange\\n6 white\\n7 red\\n8 orange\") == '35'\nassert solution(\"5\\n10\\n1 white\\n2 yellow\\n4 green\\n3 blue\\n5 red\\n6 yellow\\n7 orange\\n8 white\\n9 red\\n10 orange\") == '130'\nassert solution", "solution('''\n2\n1\n2 yellow\n''') == '1'\n\n# let's check at some low level of the tree\nassert solution('''\n3\n1\n4 blue\n''') == '28'\n\n#\nassert solution('''\n4\n1\n4 white\n''') == '1350'\n\n#\nassert solution('''\n4\n3\n4 white\n8 yellow\n12 green\n''') == '1260'\n\n# \nassert solution('''\n4\n3\n4 white\n8 yellow\n12 red\n''') == '0'\n\n# but wait, what about the k == 1?\nassert solution('''\n1\n1\n1 white\n''') == '1'\n\n# and what about the k == 0?\nassert solution('''\n0\n0\n''') == '1'\n\n# just an exmample of a big tree\nassert solution('''\n10\n0\n''') == '1075567790'\n\n# one more exmample of a big tree\nassert solution('''\n15\n0\n''') == '1126825258'\n\n#one more\nassert solution('''\n40\n2\n1023 blue\n4095 red\n''') == '662269242'\n\n#one more\nassert", "solution('''\n2\n2\n2 green\n3 yellow\n''') == '1'\n\nassert solution('''\n2\n1\n2 green\n''') == '2'\n\nassert solution('''\n1\n1\n1 yellow\n''') == '1'\n\nassert solution('''\n3\n3\n2 green\n3 yellow\n4 blue\n''') == '2'\n\nassert solution('''\n4\n4\n2 green\n3 yellow\n5 blue\n9 red\n''') == '4'\n\nassert solution('''\n5\n5\n2 green\n3 yellow\n5 blue\n9 red\n17 orange\n''') == '12'\n\nassert solution('''\n6\n5\n2 green\n3 yellow\n5 blue\n9 red\n17 orange\n''') == '32'\n\nassert solution('''\n4\n3\n2 green\n3 yellow\n4 blue\n''') == '4'\n\nassert solution('''\n5\n3\n2 green\n3 yellow\n4 blue\n''') == '12'\n\nassert solution('''\n6\n3\n2 green\n3 yellow\n4 blue\n''') == '32'\n\nassert solution('''\n7\n3\n2 green\n3 yellow\n4 blue\n''') == '88'\n\nassert solution(''", "solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert", "solution(INPUT1) == OUTPUT1\n\n# ---- I/O boilerplate ----\nimport os\n\ndef read_input(filename: str) -> str:\n    filepath = os.path.join(os.path.dirname(__file__), filename)\n    with open(filepath, \"r\") as file:\n        return file.read()\n\ndef read_output(filename: str) -> str:\n    filepath = os.path.join(os.path.dirname(__file__), filename)\n    with open(filepath, \"r\") as file:\n        return file.read()\n\nINPUT1 = read_input(\"input1.txt\")\nINPUT2 = read_input(\"input2.txt\")\n\nOUTPUT1 = read_output(\"output1.txt\")\nOUTPUT2 = read_output(\"output2.txt\")", "solution('''3\n2\n2 white\n3 white\n''') == '1'\nassert solution('''3\n3\n2 white\n3 white\n4 white\n''') == '0'\nassert solution('''4\n2\n2 red\n3 red\n''') == '0'\nassert solution('''4\n2\n2 red\n3 red\n''') == '0'\nassert solution('''4\n2\n2 red\n3 orange\n''') == '17'\nassert solution('''4\n2\n2 red\n3 yellow\n''') == '26'\nassert solution('''4\n2\n2 red\n3 green\n''') == '25'\nassert solution('''4\n2\n2 red\n3 blue\n''') == '25'\nassert solution('''4\n2\n2 yellow\n3 red\n''') == '25'\nassert solution('''4\n2\n2 yellow\n3 orange\n''') == '26'\nassert solution('''4\n2\n2 yellow\n3 green\n''') == '25'\nassert solution('''4\n2\n2 yellow\n3 blue\n''') == '25'\nassert solution('''4\n2\n2 green\n3 red\n''') == '25'\nassert solution('''4\n2\n2 green\n", "solution('''\n3\n2\n1 white\n3 yellow\n''') == '4'\n\nassert solution('''\n4\n4\n1 white\n3 yellow\n4 blue\n6 red\n''') == '0'\n\nassert solution('''\n4\n3\n1 white\n3 yellow\n4 blue\n''') == '4'\n\nassert solution('''\n60\n2000\n9955 red\n7137 green\n2393 blue\n9244 orange\n9259 red\n8874 blue\n6986 green\n3211 orange\n330 white\n9824 yellow\n3729 red\n9185 orange\n9108 blue\n5667 orange\n6003 green\n8104 red\n1804 orange\n6293 blue\n9612 orange\n9200 red\n9588 orange\n2898 blue\n2745 yellow\n8158 red\n3859 orange\n2277 green\n6192 blue\n6152 red\n6135 yellow\n6255 yellow\n6273 blue\n4899 green\n4020 blue\n5174 yellow\n5859 yellow\n5608 yellow\n5491 red\n5494 green\n1738 orange\n8511 yellow\n6516 red\n6615 red\n6624 orange\n6651 blue\n6669 red\n6684 yellow\n6696 blue\n6709 orange\n6716 red\n6722 orange\n6735 green\n6746 orange\n6759 yellow", "solution('''\n2\n2\n1 orange\n2 white\n''') == '''\n4\n'''\n\nassert solution('''\n3\n3\n1 white\n2 orange\n4 yellow\n''') == '''\n4\n'''\n\nassert solution('''\n4\n4\n1 white\n2 orange\n4 red\n8 white\n''') == '''\n0\n'''\n\nassert solution('''\n4\n2\n1 white\n2 orange\n''') == '''\n160\n'''\n\nassert solution('''\n7\n7\n1 white\n2 orange\n4 red\n8 white\n16 orange\n32 yellow\n64 green\n''') == '''\n0\n'''\n\nassert solution('''\n9\n9\n1 white\n2 orange\n4 red\n8 white\n16 orange\n32 yellow\n64 green\n128 white\n256 yellow\n''') == '''\n0\n'''\n\nassert solution('''\n2\n1\n1 red\n''') == '''\n2\n'''\n\nassert solution('''\n2\n1\n1 yellow\n''') == '''\n1\n'''\n\nassert solution('''\n2\n1\n1 green\n''') == '''\n2\n'''\n\nassert solution('''\n2\n1\n1 blue\n", "solution('''\n5\n5\n5 white\n1 yellow\n7 red\n3 orange\n5 blue\n''') == '''\n3\n'''\n\nassert solution('''\n2\n2\n1 yellow\n1 red\n''') == '''\n0\n'''\n\nassert solution('''\n2\n2\n1 yellow\n2 green\n''') == '''\n1\n'''\n\nassert solution('''\n5\n5\n5 white\n1 yellow\n7 red\n3 orange\n5 blue\n''') == '''\n3\n'''\n\nassert solution('''\n1\n1\n1 red\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1\n1 yellow\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1\n1 green\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1\n1 blue\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1\n1 orange\n''') == '''\n0\n'''\n\nassert solution('''\n2\n2\n1 yellow\n2 white\n''') == '''\n0\n'''\n\nassert solution('''\n2\n2\n1 yellow\n2 red\n''')", "solution('''\n3\n3\n3 white\n1 blue\n2 red\n''') == '2'\nassert solution('''\n2\n2\n1 white\n2 blue\n''') == '1'\nassert solution('''\n3\n2\n1 red\n2 blue\n''') == '0'\nassert solution('''\n4\n2\n4 yellow\n2 blue\n''') == '4'\nassert solution('''\n4\n2\n2 blue\n4 green\n''') == '4'\nassert solution('''\n5\n3\n1 blue\n2 blue\n3 blue\n''') == '0'\nassert solution('''\n3\n3\n3 white\n1 blue\n2 red\n''') == '2'\nassert solution('''\n2\n2\n1 white\n2 blue\n''') == '1'\nassert solution('''\n3\n2\n1 red\n2 blue\n''') == '0'\nassert solution('''\n4\n2\n4 yellow\n2 blue\n''') == '4'\nassert solution('''\n4\n2\n2 blue\n4 green\n''') == '4'\nassert solution('''\n5\n3\n1 blue\n2 blue\n3 blue\n''') == '0'\nassert solution('''\n60\n2000\n3657 yellow", "solution(None) == None\n\n# get the input\nwith open('../inputs/day_15.txt') as f:\n    inp = f.read()\n\n# compute the solution and print it\nprint(solution(inp))", "solution('''\n3\n1\n3 red\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3\n2\n3 red\n1 blue\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3\n3\n3 red\n1 blue\n2 green\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n3\n3\n3 red\n1 blue\n2 yellow\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n3\n4\n3 red\n1 blue\n2 yellow\n4 white\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n4\n4\n4 red\n1 blue\n5 green\n9 yellow\n''') == '54'\n\n# check the correctness of solution\nassert solution('''\n6\n15\n6 white\n3 yellow\n2 blue\n5 green\n4 red\n7 orange\n1 white\n14 green\n8 red\n13 orange\n12 green\n10 orange\n9 yellow\n11 white\n15 red\n''') == '228612'\n\n# check the correctness of solution\nassert solution('''\n6\n16\n6 white\n3 yellow\n2 blue\n5 green\n4 red\n7 orange\n", "solution('''\n1\n0\n''') == '''\n6\n'''\nassert solution('''\n2\n1\n2 red\n''') == '''\n6\n'''\nassert solution('''\n3\n3\n4 green\n5 red\n8 blue\n''') == '''\n24\n'''\nassert solution('''\n2\n2\n1 red\n2 green\n''') == '''\n1\n'''\nassert solution('''\n4\n6\n5 white\n6 yellow\n7 green\n10 blue\n11 red\n12 orange\n''') == '''\n24\n'''\nassert solution('''\n4\n1\n4 yellow\n''') == '''\n5\n'''\nassert solution('''\n8\n8\n1 white\n2 red\n3 green\n4 yellow\n5 orange\n6 blue\n7 white\n8 blue\n''') == '''\n5760\n'''\nassert solution('''\n2\n1\n1 red\n''') == '''\n1\n'''\nassert solution('''\n3\n2\n2 yellow\n3 green\n''') == '''\n0\n'''\nassert solution('''\n8\n1\n1 red\n''') == '''\n1230\n'''\nassert solution('''\n9\n6\n7 red\n8", "solution('''\n3\n3\n1 orange\n3 yellow\n7 white\n''') == '2'\n\nassert solution('''\n1\n1\n1 orange\n''') == '0'\n\nassert solution('''\n4\n4\n1 yellow\n3 orange\n4 green\n7 white\n''') == '4'\n\nassert solution('''\n60\n8\n1 red\n2 blue\n3 orange\n6 white\n10 green\n20 yellow\n33 green\n40 white\n''') == '675856383'\n\nassert solution('''\n60\n2000\n1 red\n2 blue\n3 orange\n4 yellow\n5 white\n6 orange\n7 green\n8 yellow\n9 blue\n10 white\n11 green\n12 red\n13 green\n14 white\n15 orange\n16 yellow\n17 blue\n18 orange\n19 green\n20 red\n21 green\n22 white\n23 orange\n24 yellow\n25 blue\n26 orange\n27 green\n28 yellow\n29 blue\n30 white\n31 green\n32 red\n33 green\n34 white\n35 orange\n36 yellow\n37 blue\n38 orange\n39 green\n40 red\n41 green\n42 white\n43 orange\n44 yellow\n45 blue\n46 orange\n47 green\n48 yellow\n49 blue\n50 white\n51 green\n52 red\n53 green\n54 white\n55 orange\n56 yellow\n", "(solution(INPUT1) == OUTPUT1)", "solution(sample_stdin_01) == str(sample_answer_01)\nassert solution(sample_stdin_02) == str(sample_answer_02)", "solution('''\n2\n2\n2 white\n3 yellow\n''') == '''\n0\n'''\n\nassert solution('''\n4\n4\n4 white\n7 red\n5 orange\n8 yellow\n''') == '''\n4\n'''\n\nassert solution('''\n4\n4\n4 white\n7 red\n4 orange\n8 yellow\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1\n1 white\n''') == '''\n5\n'''\n\nassert solution('''\n3\n3\n3 white\n6 yellow\n7 blue\n''') == '''\n0\n'''\n\nassert solution('''\n3\n3\n3 white\n6 yellow\n7 red\n''') == '''\n12\n'''\n\nassert solution('''\n6\n6\n32 white\n15 green\n8 blue\n7 yellow\n3 orange\n1 red\n''') == '''\n0\n'''\n\nassert solution('''\n6\n6\n32 white\n15 green\n8 blue\n7 yellow\n3 orange\n11 red\n''') == '''\n4\n'''\n\nassert solution('''\n4\n4\n4 red\n7 yellow\n5 green\n8 blue\n''') == '''\n24\n'''\n\nassert solution(''", "solution(problem_sample) == problem_sample_result\n\n# get the input\nk, n = input().split(' ')\nk = int(k)\nn = int(n)\n\n# create a list containing n empty lists\nnodes = [[] for i in range(n)]\n\n# prepare the list of nodes\nfor i in range(n):\n    # fill the list\n    v, s = input().split(' ')\n    v = int(v)\n    nodes[i].append(v)\n    nodes[i].append(s)\n\n# get the perfect binary tree\nt = perfect_binary_tree(k)\n\n# print(nodes)\n# print(t)\n\n# create a list with the same size as the perfect binary tree \n# insert a list at the position of the special node with the color\ncolors = [[] for i in range(len(t))]\nfor item in nodes:\n    node_idx = item[0]\n    color = item[1]\n    colors[node_idx] = [color]\n# print(colors)\n\n# replace the list of special nodes with their color\nfor idx, val in enumerate(colors):\n    if len(val) == 1:\n        colors[idx] = val[0]", "solution('''\n5\n4\n10 green\n8 orange\n4 red\n1 white\n''') == '1'\n\nassert solution('''\n4\n4\n8 green\n4 red\n2 white\n1 yellow\n''') == '2'\n\nassert solution('''\n4\n4\n8 green\n4 red\n2 white\n1 yellow\n''') == '2'\n\nassert solution('''\n4\n4\n8 green\n4 red\n2 white\n1 yellow\n''') == '2'\n\nassert solution('''\n4\n4\n8 green\n4 red\n2 white\n1 yellow\n''') == '2'\n\nassert solution('''\n4\n4\n8 green\n4 red\n2 white\n1 yellow\n''') == '2'\n\nassert solution('''\n4\n4\n8 green\n4 red\n2 white\n1 yellow\n''') == '2'\n\nassert solution('''\n4\n4\n8 green\n4 red\n2 white\n1 yellow\n''') == '2'\n\nassert solution('''\n4\n4\n8 green\n4 red\n2 white\n1 yellow\n''') == '2'\n\nassert solution('''\n4\n4\n8 green\n4 red\n2 white\n1 yellow\n''') == '2'\n\nassert", "solution('''\n5\n5\n11 white\n6 green\n8 blue\n13 orange\n15 yellow\n''') == '2'\n\nassert solution('''\n3\n3\n3 white\n2 yellow\n7 orange\n''') == '0'\n\nassert solution('''\n5\n3\n9 green\n12 white\n3 red\n''') == '1'\n\nassert solution('''\n5\n3\n12 blue\n6 orange\n9 white\n''') == '1'\n\nassert solution('''\n6\n2\n17 red\n5 blue\n''') == '4'\n\nassert solution('''\n8\n4\n31 yellow\n28 blue\n24 green\n21 orange\n''') == '4'\n\nassert solution('''\n8\n6\n25 blue\n30 white\n34 green\n24 orange\n28 red\n31 yellow\n''') == '4'\n\nassert solution('''\n8\n4\n29 red\n28 yellow\n23 green\n25 blue\n''') == '4'\n\nassert solution('''\n8\n6\n25 blue\n30 white\n34 green\n24 orange\n28 red\n31 yellow\n''') == '4'\n\nassert solution('''\n8\n6\n24 orange\n29 red\n25 blue\n30 white\n31 yellow\n23 green\n''') ==", "solution(stdin_example) == stdout_example\n#assert solution(stdin_1) == stdout_1\n#assert solution(stdin_2) == stdout_2\n#assert solution(stdin_3) == stdout_3\n#assert solution(stdin_4) == stdout_4\n#assert solution(stdin_5) == stdout_5\n#assert solution(stdin_6) == stdout_6\n#assert solution(stdin_7) == stdout_7\n#assert solution(stdin_8) == stdout_8\n#assert solution(stdin_9) == stdout_9\n#assert solution(stdin_10) == stdout_10\n#assert solution(stdin_11) == stdout_11\n#assert solution(stdin_12) == stdout_12\n#assert solution(stdin_13) == stdout_13\n#assert solution(stdin_14) == stdout_14\n#assert solution(stdin_15) == stdout_15\n#assert solution(stdin_16) == stdout_16\n#assert solution(stdin_17) == stdout_17\n#assert solution(stdin_18) == stdout_18\n#assert solution(stdin_19) == stdout_19\n#assert", "solution('''\n4\n4\n4 yellow\n10 green\n11 yellow\n12 yellow\n''') == '10'\nassert solution('''\n5\n5\n1 green\n2 blue\n8 green\n9 yellow\n10 green\n''') == '1260'\nassert solution('''\n6\n3\n6 white\n8 blue\n9 yellow\n''') == '7'\nassert solution('''\n10\n6\n3 white\n7 green\n18 yellow\n20 green\n21 yellow\n25 yellow\n''') == '3724'\nassert solution('''\n60\n1\n1 white\n''') == '1'\nassert solution('''\n60\n2\n1 white\n2 yellow\n''') == '3'\nassert solution('''\n60\n3\n1 white\n2 yellow\n3 green\n''') == '6'\nassert solution('''\n60\n4\n1 white\n2 yellow\n3 green\n4 blue\n''') == '14'\nassert solution('''\n60\n5\n1 white\n2 yellow\n3 green\n4 blue\n5 red\n''') == '23'\nassert solution('''\n60\n6\n1 white\n2 yellow\n3 green\n4 blue\n5 red\n6 orange\n''') == '43'\nassert solution('''\n60\n7\n1 white", "(solution('''\nsample input\n''') == '''\nsample output\n''')\n\n# get the input\nk, n = map(int, stdin.readline().split())\nu, s = zip(*[stdin.readline().split() for _ in range(n)])\nu, s = map(int, u), tuple(s)\n\ndef get_color(node: str) -> int:\n    '''\n    get the color of the node\n    '''\n    return -1\n\ndef update_matrix(matrix: list, node: str, color: int) -> list:\n    '''\n    add the node to the matrix\n    '''\n    return matrix\n\n# construct the tree matrix\nmatrix = []\nfor i in range(k):\n    matrix.append([])\n    for j in range(2**i):\n        matrix[i].append(-1)\n\nfor i in range(n):\n    matrix = update_matrix(matrix, u[i], get_color(s[i]))\n\n# output the solution\nprint(solution(matrix))", "solution('''\n3\n1\n1 white\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n5\n2\n10 red\n2 yellow\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n6\n3\n11 white\n10 yellow\n1 green\n''') == '26'\n\n# check the correctness of solution\nassert solution('''\n12\n6\n8 red\n41 blue\n19 white\n36 yellow\n3 orange\n27 green\n''') == '9605'\n\n# check the correctness of solution\nassert solution('''\n10\n6\n19 white\n13 red\n21 yellow\n28 green\n42 blue\n11 orange\n''') == '79'\n\n# check the correctness of solution\nassert solution('''\n14\n9\n10 orange\n14 white\n43 yellow\n8 red\n20 green\n34 blue\n3 yellow\n3 white\n13 blue\n''') == '348'\n\n# check the correctness of solution\nassert solution('''\n14\n6\n14 white\n43 yellow\n8 red\n20 green\n34 blue\n3 white\n''') == '347'\n\n# check the correctness of solution\nassert solution('''\n10\n5\n19 white\n13 red\n21 yellow\n28 green\n42 blue\n''", "solution('''3\n3\n1 red\n2 green\n3 orange''') == '4'\nassert solution('''4\n4\n1 red\n2 green\n3 yellow\n4 blue''') == '8'\nassert solution('''2\n2\n1 red\n2 orange''') == '0'\nassert solution('''5\n5\n1 white\n2 yellow\n3 green\n4 blue\n5 red''') == '0'\nassert solution('''5\n5\n1 red\n2 orange\n3 blue\n4 yellow\n5 green''') == '8'\nassert solution('''5\n7\n1 red\n2 blue\n3 orange\n4 green\n5 yellow\n6 white\n7 red''') == '0'\nassert solution('''5\n1\n1 red''') == '2048'\nassert solution('''6\n8\n1 red\n2 orange\n3 green\n4 blue\n5 yellow\n6 white\n7 red\n8 orange''') == '0'\nassert solution('''6\n10\n1 red\n2 orange\n3 green\n4 blue\n5 yellow\n6 white\n7 red\n8 orange\n9 yellow\n10 green''') == '0'\nassert solution('''6\n15\n1 red\n2 orange\n3 green\n4 blue\n5 yellow\n6 white\n7 red\n", "solution(open('tests/{name}.in'.format(name=name), 'r').read()) == \\\n    open('tests/{name}.out'.format(name=name), 'r').read()", "solution('''\n3\n2\n1 yellow\n3 white\n''') == '0'\n\n# TODO add more tests\n\n# intialize a function that read test input\n# and return the number of possible coloring modulo 10^9+7\ndef read_input(stdin: str) -> tuple:\n    lines = stdin.splitlines()\n    k = int(lines[0])\n    n = int(lines[1])\n    nodes = set()\n    colors = set()\n    for line in lines[2:]:\n        node, color = line.split()\n        node = int(node)\n        colors.add(color)\n        nodes.add(node)\n    return k, n, nodes, colors\n\n# initialize a function that check the validity of coloring\ndef is_valid(k: int, nodes: set, colors: set) -> bool:\n    if len(colors) != 2:\n        return False\n    color_list = ['white', 'yellow', 'green', 'blue', 'red', 'orange']\n    color_map = dict()\n    for index, color in enumerate(color_list):\n        color_map[color] = index\n    index_colors = [color_map[color] for color in colors]\n    # TODO: check whether color composition", "solution(__file__ + '-input-sample.in') == __file__ + '-output-sample.out'\n\n# test the performance of solution\n# __file__ = 'bench-input.in'\n# __file__ = 'large-input.in'\n# __file__ = 'large-input2.in'\n\n# input file for this problem\nwith open(__file__[:-3] + '-input.in', 'r') as f:\n    input_data = ''.join(f.readlines())\n\n# output file for this problem\nwith open(__file__[:-3] + '-output.out', 'w') as f:\n    f.write(solution(input_data))", "solution(example_input) == example_output\n\n# get user input\nstdin = input()\n\n# and print the result\nprint(solution(stdin))", "solution('''\n3\n3\n3 white\n1 blue\n7 green\n''') == '3'\n\nassert solution('''\n5\n5\n15 white\n7 yellow\n31 red\n4 orange\n2 green\n''') == '512'\n\nassert solution('''\n6\n1\n24 blue\n''') == '67584'\n\nassert solution('''\n6\n3\n24 blue\n40 yellow\n14 white\n''') == '1350'\n\nassert solution('''\n6\n4\n24 blue\n40 yellow\n14 white\n1 green\n''') == '135'\n\nassert solution('''\n6\n6\n24 blue\n40 yellow\n14 white\n1 green\n12 red\n10 orange\n''') == '0'\n\n# submit the solution\nsol = solution('''\n# input\n''')\nwith open('output', 'w') as f:\n    f.write(sol)", "solution('''\n6\n2\n6 red\n2 green\n''') == '1'\n\nassert solution('''\n6\n3\n6 red\n2 green\n3 blue\n''') == '1'\n\nassert solution('''\n6\n1\n6 red\n''') == '6'\n\nassert solution('''\n6\n2\n6 red\n7 blue\n''') == '6'\n\nassert solution('''\n6\n4\n6 red\n7 blue\n8 orange\n9 yellow\n''') == '0'\n\nassert solution('''\n6\n2\n6 red\n1 green\n''') == '0'\n\nassert solution('''\n6\n3\n3 green\n4 blue\n5 red\n''') == '0'\n\nassert solution('''\n6\n4\n3 green\n4 blue\n5 red\n6 white\n''') == '0'\n\nassert solution('''\n6\n4\n6 red\n7 blue\n8 orange\n9 white\n''') == '6'\n\nassert solution('''\n6\n6\n1 white\n2 green\n3 blue\n4 orange\n5 yellow\n6 red\n''') == '1'\n\nassert solution('''\n6\n6\n1 white\n2 red\n3 green\n4 blue\n5 orange\n6 yellow\n", "solution('''\n2\n2\n1 yellow\n2 red\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 white\n2 white\n3 red\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n2\n1\n1 yellow\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n3\n1\n1 yellow\n''') == '17'\n\n# check the correctness of solution\nassert solution('''\n2\n1\n2 yellow\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n3\n1\n2 yellow\n''') == '21'\n\n# check the correctness of solution\nassert solution('''\n2\n1\n1 yellow\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n3\n1\n1 yellow\n''') == '17'\n\n# check the correctness of solution\nassert solution('''\n2\n1\n2 yellow\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n3\n1\n2 yellow\n''') == '21'\n\n# check the correctness of solution\nassert solution('''\n2\n1\n1 yellow"], "finish_reason": ["length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "length"], "sum_logprob": [-160.18677393902388, -136.19555537905998, -143.80773579847187, -39.66461490159397, -107.58060131348792, -108.70405689549, -67.45757661448407, -77.40717588060896, -184.22461405319, -7.826216174799999, -22.161598394, -77.38146683768903, -117.849330736374, -99.33590025754994, -77.95807326458886, -144.68855208137006, -70.65788827130896, -100.85187974628842, -103.67418103319098, -280.51891838381005, -77.51993096641696, -15.516074879479994, -51.592143266983, -71.48154827187139, -566.4283292090105, -99.10974315484901, -78.62440499634177, -96.48885880792793, -46.15928722042999, -132.49159886973808, -157.33828560233292, -142.3405693743851, -11.751655301199998, -22.322848648447994, -133.162994411783, -198.19287146511707, -54.931129572983984, -210.44420342200604, -25.116018285233, -163.7669616721437, -139.4310687087, -237.87618667795775, -116.47410746285694, -20.97118525491, -185.8996205495799, -77.92125586065299, -25.255678468305, -151.40130868031, -110.08622217698594, -66.64429609888097], "mean_logprob": [-0.53395591313008, -0.45398518459686665, -0.47935911932824, -0.13221538300531332, -0.3586020043782933, -0.3623468563183, -0.22485858871494666, -0.25802391960203, -0.6140820468439666, -0.7114741977090909, -0.9635477562608696, -0.25793822279229667, -0.39283110245458003, -0.33111966752516664, -0.259860244215296, -0.48229517360456664, -0.23552629423769667, -0.3361729324876277, -0.34558060344397, -0.9350630612793667, -0.2583997698880567, -0.05172024959826667, -0.2554066498365495, -0.23827182757290433, -1.8880944306967, -0.3303658105161633, -0.2620813499878057, -0.32162952935976, -0.809812056498772, -0.4416386628991267, -0.5244609520077763, -0.47446856458128334, -0.9039734847076923, -0.5723807345755898, -0.4438766480392767, -0.6606429048837233, -0.18310376524328, -0.7014806780733533, -0.08372006095077666, -0.54588987224048, -0.5383438946281853, -0.792920622259859, -0.38824702487619, -0.44619543095553194, -0.6196654018319333, -0.4638169991705536, -0.6475814991873077, -0.7108042661047418, -0.36695407392328666, -0.22214765366293668]}
{"prompt": "'''\nTheofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n4 4\n''') == '18'\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n3 2\n''') == '7'", "solution(\"\"\"2\n2 3\n4 5\"\"\") == \"\"\"6\n15\"\"\", \"Sample Input\"\nassert solution(\"\"\"3\n2 4\n3 8\n9 8\"\"\") == \"\"\"8\n12\n0\"\"\", \"Check against editorial solution\"\nassert solution(\"\"\"13\n8 9\n9 9\n9 1\n2 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\"\"\") == \"\"\"509\n510\n5\n5\n5\n5\n5\n5\n5\n5\n5\"\"\", \"Second Test Case\"\n\n# get the input\nwith open('input.txt', 'r') as reader:\n    _ = reader.readline()\n    INPUT = [line.rstrip() for line in reader.readlines()]\n\n# evaluate the performance of solution\nfrom timeit import timeit\nprint(f'{solution.__name__} : {timeit(lambda: f\"{solution(INPUT)}\", number=100)}')\n\n# get the output\nwith open('output.txt', 'w') as writer:\n    for test in range(1, len(INPUT)+1):\n        OUTPUT = str(solution(INPUT[test-1]))\n        print(f'Case #{test}: {OUTPUT}')\n", "solution(test) == '''\n1\n'''", "solution(\"123\") == \"321\"\n\n# print solution\nprint(solution(input()))", "solution(\"\"\"1\n1 2\"\"\") == '2'\nassert solution(\"\"\"2\n2 3\n4 9\"\"\") == '4'\nassert solution(\"\"\"4\n10 1\n10 5\n10 15\n10 100\"\"\") == '10'\n\n# get the output from codeforces\nif __name__ == '__main__':\n    from sys import stdin\n    print(solution(stdin.read()))", "solution(\"\"\"3\n3 5\n3 10\n3 18\"\"\") == \"\"\"2\n5\n5\"\"\", \"Check the correctness of your solution\"\n\n# check the performance of solution\nassert solution(\"\"\"100\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n2 13\n2 14\n2 15\n2 16\n2 17\n2 18\n2 19\n2 20\n2 21\n2 22\n2 23\n2 24\n2 25\n2 26\n2 27\n2 28\n2 29\n2 30\n2 31\n2 32\n2 33\n2 34\n2 35\n2 36\n2 37\n2 38\n2 39\n2 40\n2 41\n2 42\n2 43\n2 44\n2 45\n2 46\n2 47\n2 48\n2 49\n2 50\n2 51\n2 52\n2 53\n2 54\n2 55\n2 56\n2 57\n2 58\n2 59\n2 60\n2 61\n2 62\n2 63\n2 64\n2 65\n2 66\n2 67\n2 68\n2 69\n2 70\n2 71\n2 72\n2 73\n2 74\n2 75\n2 76\n2 77\n2 78\n2 79\n2 80\n2 81\n2 82\n2 83\n2 84\n2", "solution('''1\n2 1''') == '2'\nassert solution('''1\n2 2''') == '3'\nassert solution('''1\n2 3''') == '4'\nassert solution('''1\n3 2''') == '3'\nassert solution('''1\n3 3''') == '5'\nassert solution('''1\n3 4''') == '6'\nassert solution('''1\n5 5''') == '14'\nassert solution('''1\n10 10''') == '35'\nassert solution('''1\n10 20''') == '46'\nassert solution('''1\n10 30''') == '58'\nassert solution('''1\n10 40''') == '72'\nassert solution('''1\n10 50''') == '88'\nassert solution('''1\n50 100''') == '601'\nassert solution('''1\n1 1''') == '1'\nassert solution('''1\n5 10''') == '18'\nassert solution('''1\n5 20''') == '26'\nassert solution('''1\n5 30''') == '34'\nassert solution('''1\n5 40''') == '42'\nassert solution('''1\n5 50''') == '", "solution('''\n1\n2 3\n''') == '''\n7\n'''\nassert solution('''\n1\n3 2\n''') == '''\n32\n'''\nassert solution('''\n1\n3 4\n''') == '''\n64\n'''\nassert solution('''\n2\n2 3\n3 2\n''') == '''\n7\n32\n'''\nassert solution('''\n4\n4 4\n4 7\n4 8\n4 1\n''') == '''\n57\n192\n384\n5\n'''\n\n# print the solution\nprint(solution(open('input.txt', 'r').read()))", "solution(\"\"\"\n2\n2 3\n3 3\n\"\"\") == \"\"\"\n5\n7\n\"\"\"\n\n# test the performance of solution\nprint(timeit.timeit(stmt=solution, setup=setup, number=1))", "solution(\"1\\n2 3\") == '3'\nassert solution(\"2\\n2 3\\n3 3\") == '3\\n7'\n\n# print test results\ntest_cases = [\"1\\n2 3\", \"2\\n2 3\\n3 3\"]\nanswers = ['3', '3\\n7']\n\nfor test_case, answer in zip(test_cases, answers):\n    print(\"Test case: {0}\\nAnswer: {1}\\nOutput: {2}\\n\".format(test_case, answer, solution(test_case)))", "solution('''\n3\n4 3\n4 4\n4 17\n''') == '''\n16\n17\n62\n'''", "solution('''\n2\n2 3\n4 3\n''') == '''\n3\n17\n'''", "solution('''2\n2 4\n4 17''') == '''8\n17'''", "1 == 1\n\n# get all inputs\nwith open('in.txt', 'r') as in_file:\n    inputs = in_file.read().split('\\n')\n\n# call solution function and write to file\nwith open('out.txt', 'w') as out_file:\n    for i, inp in enumerate(inputs):\n        res = solution(inp)\n        out_file.write(f'Case #{i + 1}: {res}\\n')", "solution(read_file('tests.txt')) == read_file('out.txt').strip()", "solution('''\n3\n4 7\n5 6\n16 19\n''') == '''\n57\n48\n18947859\n'''", "solution('''\n1\n2 10\n''') == '13', 'test#1'\n\nassert solution('''\n2\n2 10\n3 10\n''') == '''\n13\n13\n''', 'test#2'\n\n# submit the solution to codeforces\nimport requests\nimport os\n\nurl = 'http://codeforces.com/problemset/problem/971/A'\napi = 'https://codeforces.com/api/'\n\nprint('In progress: ', end='')\n\nwith open('content.html', 'w') as f:\n    with open('input.txt', 'r') as fin:\n        f.write(fin.read())\n\nfiles = {'file': open('content.html', 'rb')}\nr = requests.post(api + 'contest.hacks?contestId=971&from=1&count=2', files=files)\nhacks = r.json()['result']\n\nfor hack in hacks:\n    if hack['verdict'] == 'OK':\n        os.system('cp content.html content_hack.html')\n        with open('content_hack.html', 'a') as f:\n            f.write(hack['hack']['sourceCode'])\n        files =", "True, 'Use this assert to check the correctness of your solution'\n# check the performance of solution\nassert True, 'Use this assert to check the performance of your solution'\n\n# check the performance of solution\nassert True, 'Use this assert to check the performance of your solution'", "solution('''1\n4 17''') == '17'\n\ndef test():\n    print(\"All Tests Pass Successfully\")\n\n# run test\ntest()", "solution('''\n3\n2 1\n3 2\n3 11\n''') == '''\n2\n3\n27\n'''", "solution('''\n4\n4 17\n4 9\n2 7\n2 6\n''') == '''\n17\n0\n7\n3\n'''", "solution(sample_input1) == sample_output1\n# assert solution(sample_input2) == sample_output2\n# assert solution(sample_input3) == sample_output3\n# assert solution(sample_input4) == sample_output4\n# assert solution(sample_input5) == sample_output5", "solution('''\n2\n2 3\n3 3\n''') == '''\n3\n7\n'''\n\n# get the input\nimport fileinput\n\nwith fileinput.input() as f:\n    text = ''.join(f).strip('\\n')\n\n# solve the problem\nans = solution(text)\n\n# format the answer\nlines = ans.splitlines()\nbody = '\\n'.join(lines)\nprint('%s' % body)", "solution('''\n1\n2 2\n''') == '''\n4\n'''\nassert solution('''\n1\n4 1\n''') == '''\n1\n'''\nassert solution('''\n1\n4 2\n''') == '''\n4\n'''\nassert solution('''\n1\n4 3\n''') == '''\n9\n'''\nassert solution('''\n1\n4 17\n''') == '''\n289\n'''\nassert solution('''\n1\n2 1\n''') == '''\n1\n'''\nassert solution('''\n1\n2 16\n''') == '''\n65537\n'''\nassert solution('''\n1\n2 1048576\n''') == '''\n1125899906842625\n'''\nassert solution('''\n1\n2 1000000000\n''') == '''\n1125899906842624\n'''\nassert solution('''\n1\n3 14\n''') == '''\n513\n'''\nassert solution('''\n1\n3 1023\n''') == '''\n590645\n'''\nassert solution('''\n1\n4 3\n''') == '''\n9\n'''\nassert solution('''\n1\n4 17\n''') == '''\n289", "solution(\n'''\n2\n2 3\n4 5\n'''\n) == '''\n3\n17\n'''", "solution('''\n2\n2 9\n3 10\n''') == '''\n10\n23\n'''", "solution('''\n1\n4 17\n''') == '17'\n\n# check the correctness of solution\nassert solution('''\n1\n4 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n2 1\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n2 2\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n1\n2 5\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n1\n2 7\n''') == '8'\n\n# check the correctness of solution\nassert solution('''\n1\n2 10\n''') == '11'\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n1\n2 12\n''') == '13'\n\n# check the correctness of solution\nassert solution('''\n1\n2 13\n''') == '14'\n\n# check the correctness of solution\nassert solution('''\n1\n2 14\n''') == '", "solution(open(\"tests/f1.txt\").read()) == open(\"tests/f1_solution.txt\").read()\nassert solution(open(\"tests/f2.txt\").read()) == open(\"tests/f2_solution.txt\").read()\nassert solution(open(\"tests/f3.txt\").read()) == open(\"tests/f3_solution.txt\").read()\nassert solution(open(\"tests/f4.txt\").read()) == open(\"tests/f4_solution.txt\").read()\nassert solution(open(\"tests/f5.txt\").read()) == open(\"tests/f5_solution.txt\").read()\nassert solution(open(\"tests/f6.txt\").read()) == open(\"tests/f6_solution.txt\").read()\nassert solution(open(\"tests/f7.txt\").read()) == open(\"tests/f7_solution.txt\").read()\nassert solution(open(\"tests/f8.txt\").read()) == open(\"tests/f8_solution.txt\").read()\nassert solution(open(\"tests/f9.txt\").read()) == open(\"tests/f9_solution.txt\").read()\nassert solution(open(\"tests/f10.txt\").read()) == open(\"tests/f10_solution.txt\").read()\n\n", "solution('''3\n4 1\n4 2\n4 3''') == '''17\n33\n65'''\nassert solution('''3\n10 1\n10 2\n10 3''') == '''1\n3\n7'''\nassert solution('''2\n2 5\n2 10''') == '''31\n63'''\n\nif __name__ == '__main__':\n    # input() reads a string with a line of input, stripping the '\\n' (newline) at the end.\n    # This is all you need for most Code Jam problems.\n    t = int(input())  # read a line with a single integer\n    for i in range(1, t + 1):\n        n, k = [int(s) for s in input().split(\" \")]  # read a list of integers, 2 in this case\n        print(\"Case #{}: {}\".format(i, solution(n, k)))\n        # check out .format's specification for more formatting options", "solution('''3\n3 4\n2 3\n3 3''') == '''10\n3\n8'''\n\n# get the input and run the solution\nt = int(input())\nfor i in range(t):\n    stdin = input()\n    print(solution(stdin))", "solution(\"\") == \"\", \"first example is wrong\"\n\nassert solution(\"\") == \"\", \"second example is wrong\"\n\nassert solution(\"\") == \"\", \"third example is wrong\"\n\nprint(\"ok\")", "solution(\"\"\"\n1\n4 1\n\"\"\") == \"\"\"17\n\"\"\"\nassert solution(\"\"\"\n1\n1 1\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"\n3\n2 10\n2 3\n2 1\n\"\"\") == \"\"\"3\n5\n1\n\"\"\"", "solution('''1\\n4 2''') == '17'\nassert solution('''1\\n3 6''') == '21'\nassert solution('''1\\n5 9''') == '41'\n\n# get the inputs\ninputs = [input() for _ in range(int(input()))]\n\n# output solutions\nfor i, o in enumerate(map(solution, inputs), 1):\n    print('Case #%d: %s' % (i, o))", "solution(inp) == output\n\n\n# ______________________________ END ______________________________\nprint(\"\u2705 You passed all the tests!\")", "solution(\n'''\n4\n4 1\n4 5\n3 3\n2 2\n'''\n) == '''\n17\n65\n7\n2\n'''", "solution(\"\") == \"\", \"Test case #1\"\nassert solution(\"\") == \"\", \"Test case #2\"\nassert solution(\"\") == \"\", \"Test case #3\"\nassert solution(\"\") == \"\", \"Test case #4\"\nassert solution(\"\") == \"\", \"Test case #5\"\n\n# submit the solution\nprint(solution(input()))", "solution('''\n1\n2 10\n''') == '''7'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 1\n3 3\n''') == '''2\n6'''", "solution(\"\"\"\n2\n2 3\n4 17\n\"\"\") == \"\"\"\n5\n17\n\"\"\"\n\n# print the solution\nwith open(\"solution.txt\", \"w\") as f:\n    f.write(solution(open(\"in.txt\", \"r\").read()))", "solution(r'''\n1\n2 1\n''') == r'''\n3\n'''\nassert solution(r'''\n1\n2 2\n''') == r'''\n1\n'''\nassert solution(r'''\n1\n2 3\n''') == r'''\n5\n'''\nassert solution(r'''\n1\n2 4\n''') == r'''\n2\n'''\nassert solution(r'''\n1\n3 1\n''') == r'''\n4\n'''\nassert solution(r'''\n1\n3 2\n''') == r'''\n3\n'''\nassert solution(r'''\n1\n3 3\n''') == r'''\n7\n'''\nassert solution(r'''\n1\n3 4\n''') == r'''\n8\n'''\nassert solution(r'''\n1\n3 5\n''') == r'''\n5\n'''\nassert solution(r'''\n1\n3 6\n''') == r'''\n2\n'''\nassert solution(r'''\n1\n3 7\n''') == r'''\n9\n'''\nassert solution(r'''\n1\n3 8\n''') == r'''\n6\n'''\nassert solution(r'''\n1\n3 9\n''", "solution('''\n4\n2 2\n2 3\n4 3\n4 5\n''') == '''\n3\n7\n17\n129\n'''", "solution(\"\"\"1\n4 17\"\"\") == '17'\nassert solution(\"\"\"1\n3 4\"\"\") == '11'\nassert solution(\"\"\"3\n2 3\n2 4\n2 5\"\"\") == '\\n'.join([\"4\", \"7\", \"8\"])", "solution('''\n''') == '', 'Test#1 Failed!'\n\nassert solution('''\n''') == '', 'Test#2 Failed!'\n\nassert solution('''\n''') == '', 'Test#3 Failed!'\n\nassert solution('''\n''') == '', 'Test#4 Failed!'\n\nassert solution('''\n''') == '', 'Test#5 Failed!'\n\nassert solution('''\n''') == '', 'Test#6 Failed!'\n\nassert solution('''\n''') == '', 'Test#7 Failed!'\n\nassert solution('''\n''') == '', 'Test#8 Failed!'\n\nassert solution('''\n''') == '', 'Test#9 Failed!'\n\nassert solution('''\n''') == '', 'Test#10 Failed!'\n\nassert solution('''\n''') == '', 'Test#11 Failed!'\n\nassert solution('''\n''') == '', 'Test#12 Failed!'\n\nassert solution('''\n''') == '', 'Test#13 Failed!'\n\nassert solution('''\n''') == '', 'Test#14 Failed!'\n\nassert solution('''\n''') == '', 'Test#15 Failed!'\n\nassert solution('''\n''') == '', 'Test#16 Failed", "solution('''\n4\n2 7\n4 10\n9 10\n16 1000\n''') == '''\n7\n16\n511\n592665\n'''\n\n# if the execution reaches this line, all tests passed\nprint('Thanks for the fish!')", "solution('''\n2\n2 9\n4 20\n''') == '''\n10\n32\n'''", "solution(r'''\n1\n2 2\n''') == r'''\n3\n'''\n\nassert solution(r'''\n3\n2 1\n2 2\n2 3\n''') == r'''\n1\n3\n2\n'''\n\nassert solution(r'''\n1\n3 4\n''') == r'''\n20\n'''\n\n# stress testing\n\nfrom random import randint\nimport time\n\nfor i in range(10):\n    stress_stdin = \"\"\n    for _ in range(randint(2, 3)):\n        stress_stdin += str(randint(1, 1000)) + \" \"\n    stress_stdin += \"\\n\"\n\n    for _ in range(randint(1, 200)):\n        n = randint(2, 1000)\n        k = randint(1, 100000)\n        stress_stdin += str(n) + \" \" + str(k) + \"\\n\"\n\n    start = time.time()\n    assert solution(stress_stdin)\n    print(f\"{i + 1}/10 stress tests passed - {time.time() - start:.3f}s\")", "solution(\"\"\"2\n2 3\n4 17\"\"\") == \"\"\"4\n17\"\"\"", "solution('''\n1\n4 10\n''') == '''\n18\n'''\nassert solution('''\n1\n5 1\n''') == '''\n1\n'''\nassert solution('''\n1\n5 5\n''') == '''\n6\n'''\nassert solution('''\n2\n5 42\n6 23\n''') == '''\n19\n25\n'''\nassert solution('''\n2\n6 499999999\n5 666666666\n''') == '''\n20\n13\n'''\nassert solution('''\n4\n4 234567890\n4 123456789\n4 987654321\n4 9999\n''') == '''\n10\n4\n31\n4\n'''\nassert solution('''\n4\n4 1\n4 2\n4 3\n4 4\n''') == '''\n1\n2\n3\n4\n'''\nassert solution('''\n4\n4 5\n4 6\n4 7\n4 8\n''') == '''\n5\n6\n7\n8\n'''\nassert solution('''\n4\n4 9\n4 10\n4 11\n4 12\n''') == '''\n9\n10\n11\n12\n'''\nassert solution('''\n4\n4 13\n4 14\n4 15\n4 16", "solution(\"\"\"\n\"\"\") == \"\", \"Empty\"\n\nassert solution(\"\"\"\n\"\"\") == \"\", \"Example 1\"\n\nassert solution(\"\"\"\n\"\"\") == \"\", \"Example 2\"\n\n# print solution\nassert solution(input())", "solution('''\n2\n2 3\n2 5\n''') == '''\n8\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 1\n3 2\n3 3\n''') == '''\n1\n2\n4\n'''", "solution(\"\"\"2\n4 3\n2 3\"\"\") == \"\"\"16\n2\"\"\"\nassert solution(\"\"\"1\n10 1\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"1\n8 8\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"1\n3 1\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"2\n3 2\n3 3\"\"\") == \"\"\"2\n3\"\"\"\nassert solution(\"\"\"2\n4 2\n4 1\"\"\") == \"\"\"1\n16\"\"\"\nassert solution(\"\"\"1\n4 4\"\"\") == \"\"\"4\"\"\"\nassert solution(\"\"\"2\n5 2\n7 4\"\"\") == \"\"\"8\n16\"\"\"\nassert solution(\"\"\"1\n5 5\"\"\") == \"\"\"5\"\"\"\nassert solution(\"\"\"1\n3 100\"\"\") == \"\"\"7\"\"\"\nassert solution(\"\"\"1\n5 100\"\"\") == \"\"\"77\"\"\"\nassert solution(\"\"\"1\n7 100\"\"\") == \"\"\"121\"\"\"\nassert solution(\"\"\"1\n11 100\"\"\") == \"\"\"367\"\"\"\nassert solution(\"\"\"1\n13 100\"\"\") == \"\"\"507\"\"\"\nassert solution(\"\"\"1\n17 100\"\"\") == \"\"\"801\"\"\"\nassert solution(\"\"\"1\n19 100\"\"\") == \"\"\"967\"\"\"\nassert solution(\"\"\"1\n23 100\"\"\") == \"\"\"1351\"\"\"\nassert solution(\"\"\"1\n29 100\"\"\") == \"\"\"1951\"\"\"\nassert solution(\"\"\"1\n31 100"], "finish_reason": ["stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length"], "sum_logprob": [-26.268647405299994, -195.948439335524, -15.394041439999999, -19.36100251964, -72.152829851645, -50.695841669322945, -99.75755137599297, -84.55408771329701, -35.238030492672, -62.549519888300004, -22.4687099818, -11.6275306215, -15.506398172, -48.10952247592001, -21.804483545060002, -54.603016133, -159.52671229575589, -40.082511845599996, -36.540846867999996, -25.020041696799996, -25.047819585629995, -16.520889372113, -38.453639811981986, -103.84332887063391, -16.560382575, -19.889932773399998, -50.715913137074985, -27.64130122354648, -57.955387745305984, -38.77028700495, -25.651498139199997, -40.879036503439984, -60.013877364043, -50.87905140429999, -30.503440212000005, -23.14671682853, -29.874852796400006, -32.40868647646001, -39.206516636950425, -25.954579273340002, -41.094870429500006, -28.020667674894025, -85.11791834259996, -22.0634327027, -121.66064508427498, -14.438218963, -139.3340114414894, -34.4613747245, -29.866919418930003, -147.92791668726244], "mean_logprob": [-0.5710575522891305, -0.6531614644517467, -1.1841570338461538, -0.8417827182452174, -0.7362533658331123, -0.16898613889774333, -0.33252517125331, -0.5526410961653399, -0.6525561202346667, -0.4738599991537879, -0.7247970961870968, -0.44721271621153846, -0.7048362805454546, -0.4334191214046847, -0.9480210236982609, -1.6546368525151516, -0.53175570765252, -0.6570903581245902, -0.9616012333684211, -0.8070981192516129, -0.6957727662675001, -0.22631355304264383, -0.3527856863484587, -0.34614442956877967, -0.571047675, -0.7649974143615385, -0.16905304379025, -0.092137670745155, -0.25531007817315415, -0.5618882174630435, -0.5234999620244898, -0.6488735952926984, -0.5218598031655913, -1.6959683801433334, -0.7821394926153846, -0.27555615272059525, -0.5745163999307692, -0.49859517656092306, -0.13068838878983466, -0.7209605353705556, -0.6522995306269841, -0.09340222558298, -1.4186319723766667, -0.8485935654884615, -0.45227005607537174, -0.7599062612105263, -0.46444670480496497, -0.6153816915089286, -0.452529082105, -0.49309305562420835]}
{"prompt": "'''\nTheofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus).\n\nIn each game, Theofanis plays with n other players. Since they all have the same name, they are numbered from 1 to n.\n\nThe players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate). The comment means that player i said that player j has the role c.\n\nAn imposter always lies, and a crewmate always tells the truth. \n\nHelp Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation).\n\nNote that each player has exactly one role: either imposter or crewmate.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n4\n4 3\n1 2 imposter\n2 3 imposter\n3 4 imposter\n4 4\n1 2 imposter\n1 3 imposter\n1 4 imposter\n4 4 imposter\n4 6\n1 2 imposter\n2 3 imposter\n1 3 imposter\n2 3 imposter\n1 4 imposter\n4 4 imposter\n4 6\n1 2 imposter\n2 3 imposter\n1 3 imposter\n2 3 imposter\n1 4 crewmate\n4 4 imposter\n''') == '''\n2\n-1\n3\n-1\n'''", "solution(\"\"\"\n1\n5 7\n1 2 imposter\n2 3 imposter\n2 4 imposter\n1 4 crewmate\n1 3 crewmate\n4 5 crewmate\n3 5 crewmate\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4 3\n1 2 imposter\n1 3 crewmate\n1 4 crewmate\n3 2\n1 2 imposter\n2 3 imposter\n\"\"\") == \"\"\"\n1\n-1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2 2\n1 2 imposter\n2 1 crewmate\n2 3\n1 2 imposter\n2 1 imposter\n1 2 crewmate\n\"\"\") == \"\"\"\n1\n-1\n\"\"\"", "solution(\"\") == \"\"\n\n# print(solution(stdin=\"\"\"\n# \"\"\"))", "solution('''\n4\n4 2\n1 2 imposter\n2 3 imposter\n4 2\n1 2 imposter\n1 2 crewmate\n3 1\n1 2 imposter\n4 4\n1 2 imposter\n2 3 imposter\n3 4 imposter\n4 1 imposter\n''') == '''\n1\n-1\n0\n-1\n'''\n\n# mock stdin\nimport sys\nfrom unittest.mock import MagicMock\n\nclass MockStdin(object):\n    def __init__(self, read):\n        self.read = read\n\nsys.stdin = MockStdin(stdin)\n\n# start\nif __name__ == '__main__':\n    print(solution(sys.stdin.read()))", "solution(\"\"\"3\n3 3\n1 2 imposter\n2 3 imposter\n1 3 imposter\n4 6\n1 2 imposter\n2 3 imposter\n1 3 imposter\n3 4 imposter\n1 4 imposter\n2 4 imposter\n1 1\n1 2 imposter\"\"\") == '''3\n2\n-1'''", "solution(stdin_sample) == stdout_sample", "'19' == solution('4\\n20 10\\n4 3 imposter\\n8 3 imposter\\n2 7 imposter\\n4 5 imposter\\n4 2 imposter\\n12 3 imposter\\n5 9 imposter\\n5 6 imposter\\n5 8 imposter\\n5 11 imposter\\n5 1 imposter\\n5 5 imposter\\n5 4 imposter\\n5 4 imposter\\n5 3 imposter\\n5 6 imposter\\n5 5 imposter\\n5 3 imposter\\n5 4 imposter\\n5 5 imposter\\n5 4 imposter\\n5 4 imposter\\n5 5 imposter\\n5 5 imposter\\n5 4 imposter\\n5 5 imposter\\n5 4 imposter\\n5 5 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\n5 4 imposter\\", "solution(\"2\\n2 2\\n1 2 imposter\\n2 1 crewmate\\n3 2\\n1 2 imposter\\n1 3 crewmate\") == \"1\\n-1\"\n\n# check the correctness of solution\nassert solution(\"4\\n4 2\\n1 2 imposter\\n2 3 crewmate\\n2 2\\n1 2 imposter\\n2 1 crewmate\\n3 2\\n1 2 imposter\\n1 3 crewmate\\n3 2\\n1 2 imposter\\n1 3 imposter\") == \"1\\n-1\\n2\\n2\"\n\n# check the correctness of solution\nassert solution(\"2\\n1 0\\n2 2\\n1 2 imposter\\n2 1 crewmate\") == \"0\\n-1\"\n\n# check the correctness of solution\nassert solution(\"2\\n5 5\\n1 2 imposter\\n3 4 crewmate\\n5 4 crewmate\\n2 3 imposter\\n5 3 crewmate\\n5 5\\n1 2 imposter\\n3 4 crewmate\\n5 4 crewmate\\n2 3 imposter\\n3 5 crewmate\") == \"2\\n1\"\n\n# check the correctness of solution\nassert solution(\"2\\n4 6\\n1 2 imposter\\n2 3 crewmate\\n2 4", "'2' == solution('''\n2\n3 4\n1 2 imposter\n2 3 imposter\n1 3 crewmate\n3 1 crewmate\n3 3\n1 2 imposter\n2 3 imposter\n1 3 crewmate\n''')\n\nassert '2' == solution('''\n1\n3 4\n1 2 imposter\n2 3 imposter\n1 3 crewmate\n3 1 crewmate\n''')\n\nassert '2' == solution('''\n1\n3 4\n1 2 imposter\n2 3 imposter\n1 3 crewmate\n3 1 crewmate\n''')\n\nassert '1' == solution('''\n1\n3 3\n1 2 imposter\n2 3 imposter\n1 3 crewmate\n''')\n\nassert '0' == solution('''\n1\n3 3\n1 2 crewmate\n2 3 crewmate\n1 3 crewmate\n''')\n\nassert '0' == solution('''\n1\n3 2\n1 2 crewmate\n2 3 crewmate\n''')\n\nassert '-1' == solution('''\n1\n3 3\n1 2 imposter\n2 3 imposter\n1 3 imposter\n''')\n\nassert '-1' == solution('''\n1\n3 3\n1 2 imposter\n2 3 crewmate\n1 3 imposter\n''')\n", "solution(\"\"\"\n1\n4 5\n1 2 imposter\n1 3 imposter\n1 4 imposter\n2 3 crewmate\n3 4 crewmate\n\"\"\") == \"-1\"", "solution('''\n6\n3 1\n1 2 imposter\n3 3\n1 2 imposter\n2 3 imposter\n3 1 crewmate\n3 2\n1 2 imposter\n2 3 crewmate\n3 0\n3 2\n1 2 imposter\n1 3 crewmate\n3 2\n1 2 imposter\n2 3 imposter\n''') == '''\n1\n1\n1\n-1\n2\n2\n'''\n\nimport time\n\ndef timeit(function):\n    def timed(*args, **kwargs):\n        s_t = time.time()\n        result = function(*args, **kwargs)\n        e_t = time.time()\n        out = '{} {} took {:.2f} sec'\n        print(out.format(function.__name__, kwargs, e_t - s_t))\n        return result\n    return timed\n\n@timeit\ndef solution(stdin: str) -> str:\n    '''\n    test by the condition of two comments\n    imposter, crewmate -> -1\n    crewmate, crewmate -> 1\n    imposter, imposter -> 1\n    '''\n    lines = [x.strip() for x in stdin.splitlines()[1:]]\n    out = []\n    for i in range(0, len", "solution('''\n1\n3 4\n1 2 imposter\n2 3 imposter\n3 1 crewmate\n1 3 crewmate\n''') == '''\n1\n'''\nassert solution('''\n2\n2 2\n1 2 imposter\n2 1 crewmate\n2 3\n1 2 imposter\n2 1 crewmate\n1 2 crewmate\n''') == '''\n0\n1\n'''\nassert solution('''\n3\n3 3\n1 2 imposter\n2 3 imposter\n3 1 crewmate\n1 1\n1 1 imposter\n4 4\n1 2 imposter\n2 3 imposter\n3 4 imposter\n4 1 crewmate\n''') == '''\n1\n-1\n0\n'''\n\n# print the solution to console\nwith open('input.txt', 'r') as f:\n    T = int(f.readline())\n    inputs = [''.join(f.readlines()) for _ in range(T)]\nanswers = [solution(inp) for inp in inputs]\nfor t, a in enumerate(answers, 1):\n    print('Case #{}: {}'.format(t, a))", "solution('''5\n5 7\n1 2 imposter\n2 3 imposter\n3 4 imposter\n4 5 imposter\n5 1 imposter\n3 4 crewmate\n1 5 crewmate\n1 2\n1 2 imposter\n1 2 crewmate\n1 2\n1 2 imposter\n1 2 imposter\n1 2\n1 2 imposter\n1 2 crewmate\n1 2 imposter\n1 2\n1 2 imposter\n1 2 crewmate\n1 2 imposter\n1 2 crewmate''') == '''-1\n-1\n0\n1\n-1'''\n\n# get input\nT = int(input())\ninputs = []\nfor i in range(T):\n    line = input()\n    N, M = map(int, line.split(' '))\n    comments = []\n    for j in range(M):\n        comments.append(input())\n    inputs.append({'N': N, 'M': M, 'comments': comments})\n\n# process the inputs\noutputs = []\nfor i in range(T):\n    inputs[i]['comments'].sort()\n    # print(inputs[i]['comments'])\n    # print(inputs[i]['N'])\n    # print(inputs[i]['M'])\n    N = inputs[i][", "solution(\"\") == \"\", \"Check your code\"", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n\n# check the performance of solution\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution('''\n1\n3 2\n1 2 imposter\n2 3 crewmate\n''') == '2'\nassert solution('''\n2\n2 2\n1 2 imposter\n2 1 crewmate\n1 1\n1 1 imposter\n''') == '-1'\nassert solution('''\n1\n2 5\n1 2 imposter\n2 1 crewmate\n1 2 imposter\n2 1 crewmate\n1 2 imposter\n''') == '1'\nassert solution('''\n1\n5 4\n1 2 imposter\n2 3 crewmate\n3 4 crewmate\n4 5 crewmate\n''') == '4'\nassert solution('''\n1\n4 5\n1 2 imposter\n1 3 imposter\n1 4 imposter\n2 3 crewmate\n2 4 crewmate\n''') == '1'\nassert solution('''\n1\n1 3\n1 1 imposter\n1 1 crewmate\n1 1 imposter\n''') == '-1'\nassert solution('''\n1\n4 4\n1 2 imposter\n2 3 crewmate\n3 4 crewmate\n4 1 crewmate\n''') == '-1'\nassert solution('''\n1\n5 6\n1 2 imposter\n2 3 crewmate\n3 4 crewmate\n4 5 crewmate\n5 1 crewmate\n5 2 crew", "solution(\"\"\"\n2\n5 10\n1 2 imposter\n1 2 crewmate\n1 3 imposter\n1 3 crewmate\n1 4 imposter\n1 4 crewmate\n1 5 imposter\n1 5 crewmate\n2 3 imposter\n2 3 crewmate\n3 3\n1 2 imposter\n1 2 crewmate\n1 3 imposter\n1 3 crewmate\n2 3 imposter\n2 3 crewmate\n\"\"\") == \"\"\"\n2\n-1\n\"\"\"\n\nprint(\"OK\")", "solution('''\n1\n5 5\n1 2 imposter\n2 3 imposter\n3 4 imposter\n4 5 imposter\n5 1 imposter\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n5 5\n1 2 imposter\n2 3 imposter\n3 4 imposter\n4 5 crewmate\n5 1 crewmate\n''') == '''\n2\n'''\n\nassert solution('''\n2\n2 3\n1 2 imposter\n2 1 crewmate\n1 2 imposter\n1 2 crewmate\n4 2\n1 2 imposter\n3 4 crewmate\n''') == '''\n0\n1\n'''", "solution('''\n1\n4 3\n1 3 imposter\n3 2 crewmate\n4 2 imposter\n''') == '1'\nassert solution('''\n1\n3 2\n1 2 imposter\n2 3 crewmate\n''') == '-1'\nassert solution('''\n1\n5 4\n1 2 imposter\n2 3 crewmate\n3 4 imposter\n5 4 crewmate\n''') == '2'\nassert solution('''\n1\n6 4\n1 2 imposter\n2 3 crewmate\n3 4 imposter\n5 4 crewmate\n''') == '3'\nassert solution('''\n1\n6 8\n1 2 imposter\n2 3 crewmate\n3 4 imposter\n5 4 crewmate\n1 3 imposter\n3 5 crewmate\n4 6 imposter\n6 1 crewmate\n''') == '-1'\nassert solution('''\n1\n2 2\n1 2 imposter\n2 1 crewmate\n''') == '-1'\nassert solution('''\n1\n2 1\n1 2 imposter\n''') == '1'\nassert solution('''\n1\n2 1\n1 2 crewmate\n''') == '0'\nassert solution('''\n1\n4 1\n1 2 imposter\n''') == '0'\nassert solution('''\n", "solution('''\n2\n2 3\n1 2 imposter\n2 1 crewmate\n1 2 crewmate\n2 3\n1 2 imposter\n2 1 crewmate\n1 2 imposter\n''') == '''\n1\n-1\n'''", "solution('''1\n4 5\n1 2 imposter\n2 1 crewmate\n1 3 imposter\n2 3 crewmate\n2 4 crewmate''') == '1'\nassert solution('''1\n4 6\n1 2 imposter\n2 1 crewmate\n1 3 imposter\n2 3 crewmate\n2 4 crewmate\n1 4 crewmate''') == '-1'\nassert solution('''1\n2 3\n1 2 imposter\n2 1 crewmate\n1 2 crewmate''') == '-1'\nassert solution('''1\n5 15\n1 2 imposter\n2 3 imposter\n3 4 imposter\n4 5 imposter\n1 2 crewmate\n1 3 crewmate\n1 4 crewmate\n1 5 crewmate\n2 3 crewmate\n2 4 crewmate\n2 5 crewmate\n3 4 crewmate\n3 5 crewmate\n4 5 crewmate''') == '-1'\nassert solution('''1\n1 0''') == '0'\nassert solution('''1\n4 10\n1 2 imposter\n2 1 crewmate\n2 3 crewmate\n3 2 imposter\n2 4 crewmate\n1 3 imposter\n3 4 imposter\n1 4 crewmate\n3 1 crewmate\n4 1 imposter''') == '2'\nassert solution('''1\n3 5\n1 2", "solution('''\n8\n4 4\n2 3 imposter\n1 3 crewmate\n1 2 crewmate\n2 4 imposter\n4 6\n1 2 imposter\n1 3 imposter\n2 4 crewmate\n2 3 crewmate\n1 4 crewmate\n3 4 crewmate\n4 8\n2 3 imposter\n1 3 crewmate\n1 2 crewmate\n2 4 imposter\n3 4 imposter\n1 2 crewmate\n3 4 crewmate\n3 4 imposter\n6 10\n1 5 crewmate\n2 3 crewmate\n1 2 crewmate\n2 3 imposter\n1 4 crewmate\n2 4 crewmate\n5 6 crewmate\n5 6 imposter\n5 6 crewmate\n5 6 imposter\n6 8\n1 2 crewmate\n2 3 crewmate\n1 2 imposter\n1 4 crewmate\n2 4 crewmate\n3 4 crewmate\n3 4 crewmate\n3 4 crewmate\n6 15\n1 5 crewmate\n2 3 crewmate\n1 2 crewmate\n2 3 imposter\n1 4 crewmate\n2 4 crewmate\n5 6 crewmate\n5 6 imposter\n5 6 crewmate\n5 6 imposter\n1 2 crewmate\n1 2 imposter\n1 4 crewmate\n2 4 crewmate\n3 4 crewmate\n2\n8\n4 4\n2 3 imposter\n1 3 crewmate\n1 2 crew", "solution('''\n\n''') == '''\n\n'''", "solution('''\n2\n2 3\n1 2 imposter\n2 1 crewmate\n1 2 crewmate\n3 2\n1 2 imposter\n2 3 crewmate\n''') == '''\n1\n-1\n'''", "solution('''\n1\n7 10\n1 2 imposter\n1 3 imposter\n1 4 imposter\n1 5 imposter\n1 6 imposter\n2 1 crewmate\n3 1 crewmate\n4 1 crewmate\n5 1 crewmate\n6 1 crewmate\n''') == '''\n4\n'''\n\n# submit solution\nimport requests\nfrom datetime import datetime\n\ndef submit_solution() -> None:\n    task = 'Imposters'\n    inputs = []\n    outputs = []\n    submit = True\n\n    with open('input.txt', 'r') as file:\n        lines = file.readlines()\n        for i in range(0, len(lines), 2):\n            inputs.append(lines[i].strip())\n            outputs.append(lines[i + 1].strip())\n\n    url = 'https://codeforces.com/problemset/submit'\n    url += '?csrf_token=' + csrf_token\n    url += '&ftaa=' + ftaa\n    url += '&bfaa=' + bfaa\n    url += '&action=submitSolutionFormSubmitted'\n    url += '&submittedProblemCode=' + task\n\n    for i in range(len(inputs)):\n        print(f'{i + 1}: ', end", "solution('''\n5\n\n4 4\n1 2 imposter\n2 3 imposter\n3 4 imposter\n1 4 imposter\n\n3 3\n1 2 imposter\n2 3 imposter\n3 1 imposter\n\n4 2\n1 2 imposter\n3 4 imposter\n\n4 4\n1 2 imposter\n2 3 imposter\n3 4 imposter\n1 4 crewmate\n\n3 3\n1 2 imposter\n2 3 crewmate\n3 1 crewmate\n''') == '''\n-1\n\n-1\n\n0\n\n1\n\n-1\n'''", "solution(test1_input) == test1_output, \"test1: input: {}, correct output: {}, your output: {}\".format(test1_input, test1_output, solution(test1_input))\nassert solution(test2_input) == test2_output, \"test2: input: {}, correct output: {}, your output: {}\".format(test2_input, test2_output, solution(test2_input))\nassert solution(test3_input) == test3_output, \"test3: input: {}, correct output: {}, your output: {}\".format(test3_input, test3_output, solution(test3_input))\n\n# get the input and run the solution\ninput_source = open('input.txt', 'r')\noutput = solution(input_source.read())\nprint(output)", "solution(\"5\\n\"\n                \"1 3\\n\"\n                \"1 imposter\\n\"\n                \"1 crewmate\\n\"\n                \"1 imposter\\n\"\n                \"3 5\\n\"\n                \"1 imposter\\n\"\n                \"1 crewmate\\n\"\n                \"1 imposter\\n\"\n                \"2 imposter\\n\"\n                \"2 crewmate\\n\"\n                \"1 4\\n\"\n                \"1 imposter\\n\"\n                \"1 crewmate\\n\"\n                \"1 imposter\\n\"\n                \"1 crewmate\\n\"\n                \"1 4\\n\"\n                \"1 imposter\\n\"\n                \"1 crewmate\\n\"\n                \"1 imposter\\n\"\n                \"1 imposter\\n\"\n                \"1 5\\n\"\n                \"1 imposter\\n\"\n                \"1 crewmate\\n\"\n                \"1 imposter\\n\"\n                \"1 crewmate\\n\"\n                \"1 crewmate\") == \"1\\n\" \\\n                                \"2\\n\" \\\n                                \"1\\n\" \\\n                                \"-1\\n\" \\\n                                \"1\\n\"\n\nassert solution(\"3\\n\"\n                \"3 4\\n\"\n                \"1 imposter\\n", "solution('''\n2\n3 3\n1 2 imposter\n2 3 imposter\n3 1 imposter\n3 3\n1 2 imposter\n2 3 imposter\n3 1 crewmate\n''') == '''\n-1\n1\n'''", "solution(sample_1) == \"1\"\nassert solution(sample_2) == \"2\"\nassert solution(sample_3) == \"2\"\nassert solution(sample_4) == \"3\"\nassert solution(sample_5) == \"3\"\nassert solution(sample_6) == \"1\"\nassert solution(sample_7) == \"1\"\nassert solution(sample_8) == \"3\"\nassert solution(sample_9) == \"2\"\nassert solution(sample_10) == \"2\"\nassert solution(sample_11) == \"4\"\nassert solution(sample_12) == \"4\"\nassert solution(sample_13) == \"4\"\nassert solution(sample_14) == \"4\"\nassert solution(sample_15) == \"4\"\nassert solution(sample_16) == \"3\"\nassert solution(sample_17) == \"2\"\nassert solution(sample_18) == \"3\"\nassert solution(sample_19) == \"3\"\nassert solution(sample_20) == \"1\"\nassert solution(sample_21) == \"2\"\nassert solution(sample_22) == \"2\"\nassert solution(sample_23) == \"2\"\nassert solution(sample_24) == \"2\"\nassert solution(sample_25) == \"3\"\nassert", "solution('''\n''') == '''\n'''\n# test\nstdin = '''\n1\n3 4\n1 2 imposter\n1 3 imposter\n2 3 crewmate\n2 3 imposter\n'''\nsolution(stdin)\n\n# test\nstdin = '''\n1\n3 2\n1 2 imposter\n1 3 imposter\n'''\nsolution(stdin)\n\n# test\nstdin = '''\n1\n1 0\n'''\nsolution(stdin)\n\n# test\nstdin = '''\n1\n1 1\n1 1 imposter\n'''\nsolution(stdin)\n\n# test\nstdin = '''\n1\n2 1\n1 2 imposter\n'''\nsolution(stdin)\n\n# test\nstdin = '''\n1\n1 1\n1 1 crewmate\n'''\nsolution(stdin)\n\n# test\nstdin = '''\n1\n2 1\n1 2 crewmate\n'''\nsolution(stdin)\n\n# test\nstdin = '''\n1\n2 1\n1 2 crewmate\n'''\nsolution(stdin)\n\n# test\nstdin = '''\n1\n2 3\n1 2 imposter\n1 2 crewmate\n1 2 imposter\n'''", "solution('''\n2\n2 3\n1 2 imposter\n2 1 crewmate\n1 2 crewmate\n3 4\n1 2 imposter\n2 3 crewmate\n3 1 crewmate\n2 3 imposter\n''') == '''\n-1\n1\n'''", "solution('''\n1\n2 1\n1 2 imposter\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n2 2\n1 2 imposter\n2 1 crewmate\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3\n1 2 imposter\n2 3 crewmate\n3 1 crewmate\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n1\n3 5\n1 2 imposter\n2 3 crewmate\n3 1 crewmate\n1 2 crewmate\n2 3 imposter\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n1\n3 4\n1 2 imposter\n2 3 crewmate\n3 1 crewmate\n1 2 crewmate\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3\n1 2 imposter\n2 3 crewmate\n3 1 imposter\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3\n1 2 imposter\n2 3 crewmate\n1 3 imposter\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3", "solution(\"\"\"\n    3\n    3 3\n    1 2 imposter\n    2 3 imposter\n    1 3 crewmate\n    4 0\n    5 7\n    1 2 imposter\n    1 3 imposter\n    1 4 imposter\n    2 4 crewmate\n    3 4 crewmate\n    2 5 crewmate\n    3 5 crewmate\n\"\"\") == \"\"\"\n    -1\n    0\n    2\n\"\"\"", "solution(sys.stdin.read()) == sys.stdout.read()", "solution(\"\"\"3\n3 3\n1 2 imposter\n2 3 imposter\n3 1 imposter\n4 3\n1 2 imposter\n2 3 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 3 imposter\n3 4 crewmate\"\"\") == \"\"\"3\n3\n-1\"\"\"\n\n# get the output\nstdin = sys.stdin.read()\nsys.stdout.write(solution(stdin))", "solution('''\n4\n4 2\n1 2 imposter\n2 3 imposter\n4 2\n1 2 imposter\n2 3 crewmate\n2 3\n1 2 imposter\n1 2 crewmate\n3 4\n1 2 imposter\n1 2 crewmate\n1 3 imposter\n2 3 crewmate\n''') == '''\n1\n-1\n0\n-1\n'''\n\n# get input\ninput = [int(x) for x in stdin.read().split()]\n\n# get n\nn = input[0]\n\n# get comments\nm = input[1]\ncomments = input[2:]\n\n# solve the problem\nans = -1\nfor i in range(1, n+1):\n    for j in range(1, n+1):\n        if i == j:\n            continue\n        imposters = 0\n        crewmates = 0\n        for k in range(0, len(comments), 3):\n            if comments[k] == i and comments[k+1] == j:\n                if comments[k+2] == \"imposter\":\n                    imposters += 1\n                else:\n                    crewmates += 1\n        if imposters > 0 and crewmates > 0:\n            ans = -1\n            break\n        elif imposters > 0:\n", "solution('''\n3\n3 2\n1 2 imposter\n1 3 imposter\n3 3\n1 2 imposter\n1 3 imposter\n2 3 crewmate\n2 2\n1 2 imposter\n2 1 crewmate\n''') == '''\n1\n-1\n-1\n'''", "solution(\"\"\"3\n3 2\n1 2 imposter\n2 3 imposter\n3 3\n1 2 imposter\n2 3 imposter\n1 3 imposter\n4 7\n1 2 imposter\n1 2 crewmate\n1 2 imposter\n1 2 crewmate\n1 2 imposter\n1 2 crewmate\n1 2 imposter\"\"\") == \"\"\"2\n-1\n0\"\"\"\n\nprint(\"All tests were passed successfully!\")", "solution(\"\"\"2\n2 1\n1 2 imposter\n4 2\n1 2 imposter\n3 4 crewmate\"\"\") == \"\"\"0\n-1\"\"\"", "solution('''\n1\n2 3\n1 2 imposter\n2 1 crewmate\n1 2 imposter\n''') == '-1'\nassert solution('''\n1\n2 3\n1 2 imposter\n2 1 crewmate\n1 2 crewmate\n''') == '1'\nassert solution('''\n1\n3 1\n1 2 imposter\n''') == '1'\nassert solution('''\n1\n3 4\n1 2 imposter\n2 3 crewmate\n3 1 crewmate\n2 3 crewmate\n''') == '2'\nassert solution('''\n1\n2 5\n1 2 imposter\n2 1 crewmate\n1 2 imposter\n2 1 crewmate\n1 2 crewmate\n''') == '-1'\nassert solution('''\n1\n3 8\n1 2 imposter\n2 3 crewmate\n3 1 crewmate\n1 2 crewmate\n2 3 crewmate\n3 1 crewmate\n2 3 crewmate\n1 2 crewmate\n''') == '2'\nassert solution('''\n1\n4 5\n1 2 imposter\n2 3 crewmate\n3 4 crewmate\n1 4 crewmate\n4 2 crewmate\n''') == '2'\nassert solution('''\n1\n4 3\n1 2 imposter\n2 3 crewmate\n3 4 crewmate\n''')", "solution('''\n5\n5 1\n1 2 imposter\n5 2\n1 2 imposter\n1 2 crewmate\n7 3\n1 2 imposter\n1 2 crewmate\n2 3 imposter\n5 3\n1 2 imposter\n1 2 crewmate\n1 2 imposter\n5 2\n1 2 imposter\n2 3 imposter\n''') == '''\n1\n-1\n3\n-1\n2\n'''", "solution('''\n''') == '''\n'''\n\nprint(solution('''\n'''))", "solution('''\n4\n4 4\n1 2 imposter\n1 3 imposter\n2 3 crewmate\n4 3 crewmate\n1 2\n1 imposter\n1 crewmate\n2 2\n1 2 imposter\n2 1 crewmate\n3 2\n1 2 imposter\n1 3 crewmate\n''') == '''\n3\n-1\n-1\n-1\n'''", "solution(str(input())) == str(output())", "solution('''\n2\n3 4\n1 2 imposter\n2 3 imposter\n1 3 crewmate\n3 1 crewmate\n3 5\n1 2 imposter\n2 3 imposter\n1 3 crewmate\n3 1 crewmate\n2 3 crewmate\n''') == '''\n2\n-1\n'''", "solution('''\n1\n4 3\n1 2 imposter\n2 3 imposter\n2 4 imposter\n''') == '1'\n\nassert solution('''\n1\n4 2\n1 2 imposter\n2 3 imposter\n''') == '-1'\n\nassert solution('''\n1\n4 3\n1 2 imposter\n2 3 imposter\n3 4 imposter\n''') == '3'\n\nassert solution('''\n1\n4 3\n1 2 imposter\n2 3 crewmate\n3 4 crewmate\n''') == '0'\n\nassert solution('''\n1\n4 3\n1 2 imposter\n1 3 imposter\n2 3 imposter\n''') == '2'\n\nassert solution('''\n1\n4 3\n1 2 imposter\n1 3 imposter\n2 3 crewmate\n''') == '-1'\n\nassert solution('''\n1\n1 0\n''') == '0'\n\nassert solution('''\n1\n2 0\n''') == '0'\n\nassert solution('''\n1\n2 1\n1 2 imposter\n''') == '1'\n\nassert solution('''\n1\n2 1\n1 2 crewmate\n''') == '0'\n\nassert solution('''\n1\n4 4\n1 2 imp", "solution(stdin) == stdout", "solution('''5\n5 1\n1 2 imposter\n5 2\n1 2 imposter\n2 3 imposter\n4 1\n1 2 imposter\n1 3 imposter\n4 4\n1 2 imposter\n1 3 imposter\n2 3 imposter\n3 4 imposter\n''') == '''2\n-1\n2\n2\n'''", "solution('''\n4\n6 4\n1 2 imposter\n2 3 imposter\n4 5 imposter\n5 6 imposter\n6 4\n1 2 imposter\n2 3 imposter\n4 5 imposter\n5 6 crewmate\n6 4\n1 2 imposter\n2 3 crewmate\n4 5 imposter\n5 6 crewmate\n6 4\n1 2 imposter\n2 3 crewmate\n4 5 crewmate\n5 6 crewmate\n''') == '''\n2\n2\n-1\n1\n'''"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop"], "sum_logprob": [-50.194599450489996, -66.01890866858399, -15.9139421288, -77.01298688053005, -32.02513576592, -7.841396058900001, -136.01694696718897, -97.18466197430398, -57.07046000133999, -18.16953814192, -138.8910051553492, -86.18319629552553, -106.27943412216104, -11.857087525999999, -16.22431282728, -86.04463778481703, -37.04448863944001, -46.470575918184, -87.661372966928, -15.10782456167, -92.23761829740997, -132.014796866602, -7.358027066300001, -16.77324621124, -108.37997044153522, -51.38827797920401, -45.12515942634998, -63.995477552396984, -14.818858949619997, -57.01472978166603, -66.38131274973104, -21.07862088197, -49.26308248442501, -40.38686416832402, -7.90233222925, -44.309487782773985, -111.60391922649501, -21.050366735489987, -47.07781229365999, -18.363616201059997, -79.68635416513101, -44.29435127825999, -12.216438818599999, -39.20285500970999, -10.209838412, -22.37874339795, -62.38900523700199, -5.63494516, -42.101299687060006, -34.605434220021976], "mean_logprob": [-0.37740300338714283, -0.3906444299916213, -0.7233610058545454, -0.4400742107458857, -0.41591085410285716, -0.6031843122230769, -0.4533898232239633, -0.32394887324768, -0.19023486667113335, -0.4431594668760976, -0.4629700171844973, -0.3215790906549459, -0.35426478040720333, -0.9880906271666666, -0.1103694750155102, -0.28681545928272334, -0.33676807854036367, -0.3037292543672157, -0.2922045765564267, -0.2650495537135088, -0.30745872765803334, -0.4400493228886733, -0.45987669164375, -0.3225624271392308, -0.36126656813845065, -0.3863780299188271, -0.23141107398128205, -0.21331825850799, -0.2599799815722807, -0.19004909927222, -0.22127104249910334, -0.33997775616080644, -0.16421027494808332, -0.420696501753375, -0.43901845718055554, -0.4387077998294455, -0.3720130640883167, -0.30956421669838236, -0.49039387805895834, -0.5246747486017143, -0.26562118055043665, -0.4519831763087755, -0.45246069698518515, -0.45060752884724137, -0.7853721855384616, -0.3108158805270833, -0.20796335079000666, -0.6261050177777778, -0.52626624608825, -0.2957729420514701]}
{"prompt": "'''\nIt is the easy version of the problem. The difference is that in this version, there are no nodes with already chosen colors.\n\nTheofanis is starving, and he wants to eat his favorite food, sheftalia. However, he should first finish his homework. Can you help him with this problem?\n\nYou have a perfect binary tree of 2^k - 1 nodes \u2014 a binary tree where all vertices i from 1 to 2^{k - 1} - 1 have exactly two children: vertices 2i and 2i + 1. Vertices from 2^{k - 1} to 2^k - 1 don't have any children. You want to color its vertices with the 6 Rubik's cube colors (White, Green, Red, Blue, Orange and Yellow).\n\nLet's call a coloring good when all edges connect nodes with colors that are neighboring sides in the Rubik's cube.\n\n<image>| <image>  \n---|---  \nA picture of Rubik's cube and its 2D map.\n\nMore formally: \n\n  * a white node can not be neighboring with white and yellow nodes; \n  * a yellow node can not be neighboring with white and yellow nodes; \n  * a green node can not be neighboring with green and blue nodes; \n  * a blue node can not be neighboring with green and blue nodes; \n  * a red node can not be neighboring with red and orange nodes; \n  * an orange node can not be neighboring with red and orange nodes; \n\n\n\nYou want to calculate the number of the good colorings of the binary tree. Two colorings are considered different if at least one node is colored with a different color.\n\nThe answer may be too large, so output the answer modulo 10^9+7.\n\nInput\n\nThe first and only line contains the integers k (1 \u2264 k \u2264 60) \u2014 the number of levels in the perfect binary tree you need to color.\n\nOutput\n\nPrint one integer \u2014 the number of the different colorings modulo 10^9+7.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('') == '', 'failed testcase 1'\nassert solution('') == '', 'failed testcase 2'\nassert solution('') == '', 'failed testcase 3'\n\n# submit solution to codeforces\n#solution(input())", "solution(r'''\n1\n''') == r'''\n6\n'''\n\nassert solution(r'''\n2\n''') == r'''\n56\n'''\n\nassert solution(r'''\n3\n''') == r'''\n3612\n'''\n\nassert solution(r'''\n4\n''') == r'''\n154516\n'''\n\nassert solution(r'''\n5\n''') == r'''\n430084\n'''\n\nassert solution(r'''\n6\n''') == r'''\n7549136\n'''\n\nassert solution(r'''\n7\n''') == r'''\n92980688\n'''\n\nassert solution(r'''\n8\n''') == r'''\n638742080\n'''\n\nassert solution(r'''\n9\n''') == r'''\n2575014400\n'''\n\nassert solution(r'''\n10\n''') == r'''\n6989739208\n'''\n\nassert solution(r'''\n11\n''') == r'''\n125685186048\n'''\n\nassert solution(r'''\n12\n''') == r'''\n1611238289000\n'''\n\nassert solution(r'''\n", "solution('') == '1'\nassert solution('') == '1'\nassert solution('') == '1'\nassert solution('') == '1'\nassert solution('') == '1'\nassert solution('') == '1'\nassert solution('') == '1'\nassert solution('') == '1'\nassert solution('') == '1'\nassert solution('') == '1'", "(solution('''\n1\n''') == '''\n6\n''')\nassert (solution('''\n2\n''') == '''\n108\n''')\nassert (solution('''\n3\n''') == '''\n6720\n''')\nassert (solution('''\n4\n''') == '''\n403360\n''')\nassert (solution('''\n5\n''') == '''\n22963520\n''')\nassert (solution('''\n6\n''') == '''\n1260380160\n''')\nassert (solution('''\n7\n''') == '''\n6867953200\n''')\nassert (solution('''\n8\n''') == '''\n373537264000\n''')\nassert (solution('''\n9\n''') == '''\n19875528960000\n''')\nassert (solution('''\n10\n''') == '''\n1064484722048000\n''')\nassert (solution('''\n11\n''') == '''\n56266469116313600\n''')\nassert (solution('''\n12\n''') == '''\n2959849589774233600\n''')\nassert (solution('''\n", "solution('') == ''\n\n# get the input\nwith open('input.txt', 'r') as f:\n    lines = f.readlines()\n\n# solve the problem\nresult = solution(lines[0])\n\n# print the result\nwith open('output.txt', 'w') as f:\n    f.write(result)", "solution('') == ''\n\n# get the input\nwith open('in.txt', 'r') as f:\n    lines = ''.join(f.readlines())\n\n# run solution\nprint(solution(lines))", "solution('') == '', 'No stdin provided'\n\n# run on codeforces\n\n# run with custom stdin\nsolution('')", "solution(\"3\") == \"120\"\nassert solution(\"10\") == \"84934656\"\nassert solution(\"59\") == \"475822275\"\n\n# compile and run test cases\nfrom typing import Generator\nfrom test import test\n\ndef generate_inputs() -> Generator[str, None, None]:\n    yield \"\"\n\ntest(solution, generate_inputs())", "solution(\"1\") == \"6\"\nassert solution(\"2\") == \"72\"\nassert solution(\"3\") == \"5760\"\nassert solution(\"4\") == \"362880\"\nassert solution(\"5\") == \"7077888\"\nassert solution(\"6\") == \"817296448\"\nassert solution(\"7\") == \"12605364480\"\nassert solution(\"8\") == \"149875138560\"\nassert solution(\"9\") == \"284908441088\"\nassert solution(\"10\") == \"3246233552000\"\nassert solution(\"11\") == \"81826333715456\"\nassert solution(\"12\") == \"858707861197056\"\nassert solution(\"13\") == \"23852647017779200\"\nassert solution(\"14\") == \"273568191429335040\"\nassert solution(\"15\") == \"15736406916402839552\"\nassert solution(\"16\") == \"382754102276717072384\"\nassert solution(\"17\") == \"4348925920802998761472\"\nassert solution(\"18\") == \"133743004513437227802624\"\nassert solution(\"19\") == \"1446103633950079782735872\"\nassert solution(\"20\") == \"1086", "solution(\"2\") == \"6\"\nassert solution(\"3\") == \"108\"\nassert solution(\"4\") == \"20880\"\nassert solution(\"5\") == \"4007050\"\nassert solution(\"6\") == \"772914600\"\nassert solution(\"7\") == \"148959052200\"\nassert solution(\"8\") == \"2844691784400\"\nassert solution(\"9\") == \"54700281747300\"\nassert solution(\"10\") == \"10514295512765600\"\nassert solution(\"11\") == \"2024711644896272400\"\nassert solution(\"12\") == \"392355871087693786000\"\nassert solution(\"13\") == \"75871788238054172764400\"\nassert solution(\"14\") == \"14640144134034145165610500\"\nassert solution(\"15\") == \"2824752495723263968932579400\"\nassert solution(\"16\") == \"5451276751930780285978672743000\"\nassert solution(\"17\") == \"1053135080535541704006515576494700\"\nassert solution(\"18\") == \"2039550562294690813250905019793786000\"\nassert solution(\"19\") == \"396718623", "solution(\"1\") == \"\"", "solution('') == '', 'something went wrong'", "solution('') == ''\n\n# get the input and run the solution\ntry:\n    from pypyio import BytesIO as stream\nexcept ImportError:\n    from io import StringIO as stream\n    \ninput = stream('')\n#input = stream(stdin_str)\nprint(solution(input.readline()))", "solution('')\n\n# check the performance of solution\nassert solution('')\n \n# check the performance of solution\nassert solution('')", "solution('') == str()\n# let's show some beautiful code\nsolution('')", "solution(\"\") == \"\", \"Only the example test cases are accepted\"", "solution(\"\"\"1\"\"\") == \"\"\"6\"\"\"\nassert solution(\"\"\"2\"\"\") == \"\"\"36\"\"\"\nassert solution(\"\"\"3\"\"\") == \"\"\"216\"\"\"\nassert solution(\"\"\"4\"\"\") == \"\"\"1296\"\"\"\nassert solution(\"\"\"5\"\"\") == \"\"\"7776\"\"\"\nassert solution(\"\"\"6\"\"\") == \"\"\"46656\"\"\"\nassert solution(\"\"\"7\"\"\") == \"\"\"279936\"\"\"\nassert solution(\"\"\"8\"\"\") == \"\"\"1679616\"\"\"\nassert solution(\"\"\"9\"\"\") == \"\"\"10077696\"\"\"\nassert solution(\"\"\"10\"\"\") == \"\"\"60466176\"\"\"\nassert solution(\"\"\"11\"\"\") == \"\"\"362797056\"\"\"\nassert solution(\"\"\"12\"\"\") == \"\"\"2176782336\"\"\"\nassert solution(\"\"\"13\"\"\") == \"\"\"13060694016\"\"\"\nassert solution(\"\"\"14\"\"\") == \"\"\"78364164096\"\"\"\nassert solution(\"\"\"15\"\"\") == \"\"\"470184984576\"\"\"\nassert solution(\"\"\"16\"\"\") == \"\"\"2821109907456\"\"\"\nassert solution(\"\"\"17\"\"\") == \"\"\"16926659444736\"\"\"\nassert solution(\"\"\"18\"\"\") == \"\"\"101559956668416\"\"\"\nassert solution(\"\"\"19\"\"\") == \"\"\"609359740010496\"\"\"\nassert solution(\"\"\"20\"\"\") == \"\"\"3656158440062976\"\"\"\nassert solution(\"\"\"21\"\"\")", "solution('') == '', 'TODO: test here'", "solution('') == str(0)", "solution('') == '', 'Test 0 failed'\nassert solution('') == '', 'Test 1 failed'\nassert solution('') == '', 'Test 2 failed'\nassert solution('') == '', 'Test 3 failed'\nassert solution('') == '', 'Test 4 failed'\nassert solution('') == '', 'Test 5 failed'\nassert solution('') == '', 'Test 6 failed'\nassert solution('') == '', 'Test 7 failed'\nassert solution('') == '', 'Test 8 failed'\nassert solution('') == '', 'Test 9 failed'\nassert solution('') == '', 'Test 10 failed'\nassert solution('') == '', 'Test 11 failed'\nassert solution('') == '', 'Test 12 failed'\nassert solution('') == '', 'Test 13 failed'\nassert solution('') == '', 'Test 14 failed'\nassert solution('') == '', 'Test 15 failed'\nassert solution('') == '', 'Test 16 failed'\nassert solution('') == '', 'Test 17 failed'\nassert solution('') == '', 'Test 18 failed'\nassert solution('') == '', 'Test 19 failed'\nassert solution('') == '', 'Test 20 failed'\nassert solution('') == '", "solution(\"0\\n\") == \"0\"\nassert solution(\"1\\n\") == \"0\"\nassert solution(\"2\\n\") == \"0\"\nassert solution(\"3\\n\") == \"360\"\nassert solution(\"4\\n\") == \"11520\"\nassert solution(\"5\\n\") == \"1036800\"\nassert solution(\"60\\n\") == \"499411135\"", "solution('') == '', 'case1'\nassert solution('') == '', 'case2'\nassert solution('') == '', 'case3'\nassert solution('') == '', 'case4'\nassert solution('') == '', 'case5'\nassert solution('') == '', 'case6'\nassert solution('') == '', 'case7'\nassert solution('') == '', 'case8'\nassert solution('') == '', 'case9'\nassert solution('') == '', 'case10'\nassert solution('') == '', 'case11'\nassert solution('') == '', 'case12'\nassert solution('') == '', 'case13'\nassert solution('') == '', 'case14'\nassert solution('') == '', 'case15'\nassert solution('') == '', 'case16'\nassert solution('') == '', 'case17'\nassert solution('') == '', 'case18'\nassert solution('') == '', 'case19'\nassert solution('') == '', 'case20'\nassert solution('') == '', 'case21'\nassert solution('') == '', 'case22'\nassert solution('') == '', 'case23'\nassert solution", "solution(r'''\n3\n''') == r'''\n260\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n''') == r'''\n72\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n''') == r'''\n6\n'''\n\n# check the correctness of solution\nassert solution(r'''\n4\n''') == r'''\n98448\n'''\n\n# check the correctness of solution\nassert solution(r'''\n5\n''') == r'''\n5891840\n'''\n\n# check the correctness of solution\nassert solution(r'''\n60\n''') == r'''\n2127911816\n'''", "solution(\"\"\"\n1\n\"\"\") == \"\"\"\n6\n\"\"\"\nassert solution(\"\"\"\n2\n\"\"\") == \"\"\"\n36\n\"\"\"\nassert solution(\"\"\"\n3\n\"\"\") == \"\"\"\n576\n\"\"\"\nassert solution(\"\"\"\n60\n\"\"\") == \"\"\"\n272678696798654280\n\"\"\"\n\n# test cases:\ncases = [\n    (\"\"\"\n1\n\"\"\", \"\"\"\n6\n\"\"\"),\n    (\"\"\"\n2\n\"\"\", \"\"\"\n36\n\"\"\"),\n    (\"\"\"\n3\n\"\"\", \"\"\"\n576\n\"\"\"),\n    (\"\"\"\n60\n\"\"\", \"\"\"\n272678696798654280\n\"\"\"),\n]\n\n# load the solution from a file, and check the correctness of solution\nimport sys\nsys.stdin = open('input.txt', 'r')\nimport unittest\nclass TestStringMethods(unittest.TestCase):\n    pass\n\n# create a test for each test case\ndef create_test(test_name, test_input, test_output):\n    def test(self):\n        self.assertEqual(solution(test_input), test_output)\n    return test\n\n# add all test cases to the test suite\nfor idx, (test_input, test_output) in enumerate(cases):\n    test_name =", "solution(stdin=\"\") == stdout\n\n# compile string into function\nsolve = lambda stdin: stdout", "solution('') == '', 'test 1'\nassert solution('') == '', 'test 2'\nassert solution('') == '', 'test 3'\nassert solution('') == '', 'test 4'\nassert solution('') == '', 'test 5'\nassert solution('') == '', 'test 6'\nassert solution('') == '', 'test 7'\nassert solution('') == '', 'test 8'\nassert solution('') == '', 'test 9'\nassert solution('') == '', 'test 10'\nassert solution('') == '', 'test 11'\nassert solution('') == '', 'test 12'\nassert solution('') == '', 'test 13'\nassert solution('') == '', 'test 14'\nassert solution('') == '', 'test 15'\nassert solution('') == '', 'test 16'\nassert solution('') == '', 'test 17'\nassert solution('') == '', 'test 18'\nassert solution('') == '', 'test 19'\nassert solution('') == '', 'test 20'\nassert solution('') == '', 'test 21'\nassert solution('') == '', 'test 22'\nassert solution('') == '', 'test 23'\nassert solution", "solution('') == '', 'Empty test'\n\n'''\nExamples\nInput\n1\nOutput\n6\n\nInput\n2\nOutput\n30\n\nInput\n3\nOutput\n300\n\nInput\n4\nOutput\n3285\n\nNote\nThe first sample is a tree with one vertex. There are 6 different ways to color it \u2014 all of them are good.\n\nThe second sample is a tree with 3 vertices. These are the 6 different ways to color it:\n\n<image>\n\nThe third sample is a tree with 7 vertices. These are the 24 different ways to color it:\n\n<image>\n\nThe fourth sample is a tree with 15 vertices. These are the 60 different ways to color it:\n\n<image>\n'''", "solution(stdin=\"1\") == \"18\"\nassert solution(stdin=\"2\") == \"113400\"\nassert solution(stdin=\"3\") == \"223425696\"\nassert solution(stdin=\"4\") == \"55181597164\"\nassert solution(stdin=\"5\") == \"30781560905632\"\nassert solution(stdin=\"6\") == \"361957882089860448\"\nassert solution(stdin=\"7\") == \"7806392860621575808896\"\nassert solution(stdin=\"8\") == \"334071246304949957826843904\"\nassert solution(stdin=\"9\") == \"35897758651643176629461893486720\"\nassert solution(stdin=\"10\") == \"72193517304639271398133359356376788992\"\nassert solution(stdin=\"11\") == \"49781775286415554865289777040506340694183936\"\nassert solution(stdin=\"12\") == \"683579294905443400423270769854213167764909291205632\"\nassert solution(stdin=\"13\") == \"166432705830949668531501796800705947", "solution('') == ''\n\n# check the performance of solution\nimport timeit\nimport random\nassert timeit.timeit(stmt=solution(''), number=10) < 0", "solution('') == '2'", "solution('') == ''\n\n# check the correctness of solution\nassert solution('') == ''\n\n# check the correctness of solution\nassert solution('') == ''", "solution('') == '', 'wrong solution'\n\n# get input from input.txt\nwith open('input.txt', 'r') as input_file:\n    input_data = input_file.read()\n\n# get the solution and measure time\nstart = time.time()\nsolution = solution(input_data)\nend = time.time()\nprint(solution)\nprint('elapsed time:', end - start)\n\n# put the result into output.txt\nwith open('output.txt', 'w') as output_file:\n    output_file.write(solution)", "solution('') == '', 'wrong answer'\nassert solution('') == '', 'wrong answer'", "(solution('0') == '1')\nassert (solution('1') == '6')\nassert (solution('2') == '120')\nassert (solution('3') == '210')\nassert (solution('4') == '11880')\nassert (solution('5') == '20736')\nassert (solution('6') == '11880')\nassert (solution('7') == '17160')\nassert (solution('8') == '125400')\nassert (solution('9') == '210540')\nassert (solution('10') == '125400')\nassert (solution('11') == '181320')\nassert (solution('12') == '1342280')\nassert (solution('13') == '2210600')\nassert (solution('14') == '1342280')\nassert (solution('15') == '1987120')\nassert (solution('16') == '15116520')\nassert (solution('17') == '25182520')\nassert (solution('18') == '15116520')\nassert (solution('19') == '22672560')\nassert (solution('20') == '170550880')\nassert (solution('21') == '283467100')\n", "solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"", "solution('') == ''", "solution(\"\") == \"\", \"failed\"\nprint(\"all tests passed\")", "solution(problem_input) == \"0\"\n\n\n#######################################################################################################################################################################################\n# Hackerrank Solution\n#######################################################################################################################################################################################\n\nMOD = 10**9 + 7\n\ndef dfs(tree, node):\n    if len(tree[node]) == 0:\n        return 1\n    ans = 1\n    colors = {0, 1, 2, 3, 4, 5}\n    for child in tree[node]:\n        colors -= {child[1]}\n        ans *= colors.__len__()\n        ans %= MOD\n        ans *= dfs(tree, child[0])\n        ans %= MOD\n    return ans\n\ndef calculate_colors(tree, node):\n    colors = {0, 1, 2, 3, 4, 5}\n    for child in tree[node]:\n        colors -= {child[1]}\n    return colors\n\ndef solve(tree, node):\n    if len(tree[node]) == 0:\n        return 1\n    ans = 1\n    c = calculate_colors(tree, node)\n    for color in c:\n        for child in tree[node]:\n            ans *= c.__len__()\n            ans %= MOD\n            ans *= solve(tree, child[0])\n            ans %= MOD\n    return", "solution(\"1\") == \"1\"\nassert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"36\"\nassert solution(\"4\") == \"216\"\nassert solution(\"5\") == \"1296\"\nassert solution(\"10\") == \"3628801\"\nassert solution(\"60\") == \"768614336404564650\"\n\n# get the input\nif __name__ == \"__main__\":\n    k = int(input())\n    print(solution(k))", "solution('') == '', \"answer can not be empty\"", "solution('') == '', 'failed test'", "solution('') == ''", "solution('') == ''\n\n# post the solution\npost(solution, __file__)", "solution('') == ''\n\n# check that solution meets performance requirements\nfrom random import randint\nfrom time import time\ntest_inputs = []\ntest_outputs = []\ntest_functions = []\nprint('Reading inputs... ')\nfor i in range(0, 100):\n    k = randint(1, 60)\n    test_inputs.append(str(k))\n    test_outputs.append(solution(test_inputs[i]))\n\n# test the solution\nprint('Testing... ')\ntotal_tests = len(test_inputs)\nfor i in range(0, total_tests):\n    test_num = i + 1\n    try:\n        assert test_outputs[i] == solution(test_inputs[i])\n        print('Test {}/{} passed: {}'.format(test_num, total_tests, test_inputs[i]))\n    except AssertionError as e:\n        print('Test {}/{} failed: {}'.format(test_num, total_tests, test_inputs[i]))\n        raise e\n\n# measure performance\nprint('Measuring performance... ')\nt0 = time()\nfor i in range(0, 100):\n    solution(test_inputs[i % total_tests])", "solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass the test.'\n# assert solution('') == '', 'Solution does not pass", "solution('') == ''\n\n# check the performance of solution\nassert solution('') == ''", "solution('') == ''\n\n# get the input\nk = int(input())\n\n# print the output\nprint(solution(''))", "solution('') == ''", "solution('') == ''\n\n# get the input for this problem\ndef get_input() -> str:\n    pass\n\n# print the result\nprint(solution(get_input()))", "solution('') == ''\nassert solution('') == ''\nassert solution('') == ''\nassert solution('') == ''\nassert solution('') == ''\nassert solution('') == ''"], "finish_reason": ["stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-24.35567779874, -188.45060135265285, -13.775196187199994, -164.50405961433242, -23.55558768638, -23.249546593500003, -45.9893152845, -84.81934807783003, -459.43719215625794, -577.7457262706054, -7.470176078, -11.127660734999997, -46.50222351099999, -18.20802929916, -30.646827073999997, -25.50133211, -17.447333342054005, -17.99551761799, -10.21029781, -16.38687155908399, -61.43089650037001, -18.526671200935, -79.90665224184201, -166.4077587490709, -29.425237619480004, -12.522059348736006, -98.83360975935005, -668.8463425345282, -27.644006454799996, -10.395511990000001, -8.6387215459, -61.01945345400701, -10.430189900779999, -153.17452626409994, -10.167611117, -3.96215179, -18.2321078, -127.47465429545176, -48.20101176697998, -19.074001301000003, -9.696338555, -3.965324775, -20.233640290629992, -88.74141843908846, -24.858957285666992, -8.3529595904, -14.6725475371, -3.96066245, -23.457979949520002, -9.106119157879995], "mean_logprob": [-0.39927340653672133, -0.62816867117551, -0.13914339583030302, -0.548346865381108, -0.29817199603012656, -0.43867069044339624, -1.2429544671486488, -0.9862714892770931, -1.5314573071875266, -1.9258190875686834, -1.0671680111428572, -0.8559739026923078, -0.5886357406455697, -0.5355302735047058, -1.3930375942727273, -1.593833256875, -0.05815777780684667, -1.124719851124375, -1.021029781, -0.05462290519694667, -0.6980783693223863, -0.06175557066978333, -0.4672903639873801, -0.55469252916357, -1.0898236155362964, -0.04174019782912, -0.581374175055, -2.2294878084484266, -0.6282728739727272, -1.1550568877777778, -0.22150568066410256, -0.4453974704672044, -0.4172075960312, -0.5105817542136667, -0.7821239320769231, -0.5660216842857143, -1.0724769294117646, -0.42491551431817265, -0.43036617649089287, -1.2716000867333332, -0.8080282129166667, -0.5664749678571429, -0.8797234908969566, -0.295804728130295, -0.08286319095222333, -0.36317215610434783, -0.4315455157970588, -0.5658089214285714, -0.5212884433226667, -0.1937472161251064]}
{"prompt": "'''\nTheofanis decided to visit his uncle's farm. There are s animals and n animal pens on the farm. For utility purpose, animal pens are constructed in one row.\n\nUncle told Theofanis that a farm is lucky if you can distribute all animals in all pens in such a way that there are no empty pens and there is at least one continuous segment of pens that has exactly k animals in total.\n\nMoreover, a farm is ideal if it's lucky for any distribution without empty pens.\n\nNeither Theofanis nor his uncle knows if their farm is ideal or not. Can you help them to figure it out?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three integers s, n, and k (1 \u2264 s, n, k \u2264 10^{18}; n \u2264 s).\n\nOutput\n\nFor each test case, print YES (case-insensitive), if the farm is ideal, or NO (case-insensitive) otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"1\\n1000000000000 1000000000000 1000000000000\") == \"YES\"\nassert solution(\"2\\n2 3 3\\n1 3 3\") == \"YES\\nNO\"\nassert solution(\"3\\n3 2 1\\n3 2 2\\n3 2 3\") == \"YES\\nYES\\nNO\"\nassert solution(\"3\\n3 3 1\\n3 3 2\\n3 3 3\") == \"YES\\nYES\\nYES\"\nassert solution(\"2\\n1000000000000 1000000000000 1000000000000\\n4000000000000 4000000000000 4000000000000\") == \"YES\\nNO\"\nassert solution(\"2\\n1000000000000 1000000000000 1000000000000\\n4000000000000 4000000000000 2000000000000\") == \"YES\\nYES\"\nassert solution(\"2\\n1000000000000 1000000000000 1000000000000\\n4000000000000 3000000000000 1000000000000\") == \"YES\\nYES\"\nassert solution(\"3\\n3 2 1\\n3 2 2\\n3 2 3\") == \"YES\\nYES\\nNO\"\nassert solution(\"3\\n3 3 1\\n3 3 2\\n3 3 3\") == \"YES\\nYES\\nYES\"\nassert solution(\"3\\n3 2 1\\n3 2 2\\n3 2 3\") == \"YES\\nYES\\n", "solution('''\n3\n1 1 1\n1 1 2\n1 1 3\n''') == '''\nYES\nNO\nNO\n'''", "solution('''\n4\n4 2 1\n4 2 2\n4 2 3\n4 2 4\n''') == '''\nYES\nNO\nNO\nYES\n'''\n\n# check performance\nassert solution('''\n4\n4 4 1\n4 5 1\n4 6 1\n4 7 1\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\n# check performance\nassert solution('''\n4\n20 5 1\n20 5 2\n20 5 3\n20 5 4\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\n# check performance\nassert solution('''\n10\n1000000000 1000000000 1\n1000000000 1000000000 2\n1000000000 1000000000 3\n1000000000 1000000000 4\n1000000000 1000000000 5\n1000000000 1000000000 6\n1000000000 1000000000 7\n1000000000 1000000000 8\n1000000000 1000000000 9\n1000000000 1000000000 10\n''') == '''\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n'''", "solution('''\n1\n1 2 1\n''') == 'NO'\nassert solution('''\n1\n2 1 1\n''') == 'YES'\nassert solution('''\n1\n1 1 1\n''') == 'YES'\nassert solution('''\n1\n10 4 6\n''') == 'YES'\nassert solution('''\n1\n10 4 3\n''') == 'NO'\nassert solution('''\n1\n10 1 2\n''') == 'NO'\nassert solution('''\n1\n10 1 1\n''') == 'YES'\nassert solution('''\n1\n7 3 3\n''') == 'YES'\nassert solution('''\n1\n9 4 3\n''') == 'YES'\nassert solution('''\n1\n7 4 4\n''') == 'NO'\nassert solution('''\n1\n4 4 4\n''') == 'YES'\nassert solution('''\n1\n4 3 3\n''') == 'YES'\nassert solution('''\n1\n4 2 2\n''') == 'YES'\nassert solution('''\n1\n4 1 1\n''') == 'YES'\nassert solution('''\n1\n3 3 3\n''') == 'YES'\nassert solution('''\n1\n3 2 2\n''') == '", "solution(\"1\\n5 3 1\") == \"YES\"\nassert solution(\"1\\n4 2 2\") == \"NO\"\nassert solution(\"1\\n6 6 2\") == \"YES\"\nassert solution(\"1\\n15 5 1\") == \"YES\"\nassert solution(\"1\\n15 5 2\") == \"YES\"\nassert solution(\"1\\n15 5 3\") == \"YES\"\nassert solution(\"1\\n15 5 4\") == \"YES\"\nassert solution(\"1\\n15 5 5\") == \"YES\"\nassert solution(\"1\\n15 5 6\") == \"YES\"\nassert solution(\"1\\n15 5 7\") == \"YES\"\nassert solution(\"1\\n15 5 8\") == \"YES\"\nassert solution(\"1\\n15 5 9\") == \"YES\"\nassert solution(\"1\\n15 5 10\") == \"YES\"\nassert solution(\"1\\n16 5 1\") == \"YES\"\nassert solution(\"1\\n16 5 2\") == \"YES\"\nassert solution(\"1\\n16 5 3\") == \"YES\"\nassert solution(\"1\\n16 5 4\") == \"YES\"\nassert solution(\"1\\n16 5 5\") == \"YES\"\nassert solution(\"1\\n16 5 6\") == \"YES\"\nassert solution(\"1\\n16 5 7\") == \"YES\"\nassert", "solution('''\n5\n1 1 1\n2 1 1\n3 1 1\n1 4 1\n5 15 2\n''') == '''\nYES\nYES\nYES\nNO\nYES\n'''", "solution(\"1\\n2 3 2\") == \"YES\"\nassert solution(\"2\\n2 2 1\\n1 2 1\") == \"NO\\nYES\"\n\n# get input to run solution\nt = int(input())\nstdin = \"\"\nfor i in range(t):\n    stdin += input() + \"\\n\"\nprint(solution(stdin))", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution('''\n3\n3 1 2\n3 2 2\n3 2 3\n''') == '''\nYES\nNO\nYES\n'''", "solution('''\n5\n1 1 1\n2 2 1\n3 2 1\n1 10 10\n10 10 10\n''') == '''\nYES\nYES\nNO\nYES\nNO\n'''\n\nprint(solution('''\n5\n1 1 1\n2 2 1\n3 2 1\n1 10 10\n10 10 10\n'''))", "solution('''\n3\n1 1 1\n1 1 2\n1 1 3\n''') == '''\nYES\nNO\nNO\n'''", "solution('''\n4\n1 1 1\n1 1 2\n1 2 1\n1 2 2\n''') == '''\nYES\nNO\nYES\nYES\n'''\n\n# run\nif __name__ == '__main__':\n    from collections import deque\n    from sys import stdin\n\n    if not stdin.isatty():\n        input = stdin.read().splitlines()\n    else:\n        input = ['1', '2 3 3']\n    q = deque(input)\n    t = int(q.popleft())\n    for i in range(t):\n        s, n, k = map(int, q.popleft().split())\n        if s % n != 0:\n            print('NO')\n        elif s % k != 0:\n            print('NO')\n        else:\n            print('YES')", "solution(\"1\\n1 1 1\") == \"NO\"\nassert solution(\"2\\n1 1 1\\n2 2 2\") == \"NO\\nYES\"\nassert solution(\"5\\n10 10 10\\n10 11 10\\n10 10 11\\n10 10 9\\n10 11 12\") == \"YES\\nNO\\nNO\\nNO\\nNO\"\nprint(\"passed all tests\")", "solution(example) == 'YES'", "solution(\"1\\n5 6 3\") == \"YES\"\nassert solution(\"1\\n5 6 2\") == \"NO\"\nassert solution(\"1\\n5 6 1\") == \"YES\"\nassert solution(\"1\\n5 6 4\") == \"NO\"\nassert solution(\"1\\n5 6 5\") == \"YES\"\nassert solution(\"1\\n5 6 6\") == \"YES\"\nassert solution(\"1\\n5 6 7\") == \"NO\"\nassert solution(\"1\\n5 6 8\") == \"NO\"\nassert solution(\"1\\n5 6 9\") == \"NO\"\nassert solution(\"1\\n5 6 10\") == \"NO\"\nassert solution(\"1\\n5 6 11\") == \"NO\"\nassert solution(\"1\\n5 6 12\") == \"NO\"\nassert solution(\"1\\n5 6 13\") == \"NO\"\nassert solution(\"1\\n5 6 14\") == \"NO\"\nassert solution(\"1\\n5 6 15\") == \"NO\"\nassert solution(\"1\\n5 6 16\") == \"NO\"\nassert solution(\"1\\n5 6 17\") == \"NO\"\nassert solution(\"1\\n5 6 18\") == \"NO\"\nassert solution(\"1\\n5 6 19\") == \"NO\"\nassert solution(\"1\\n5 6 20\") == \"NO\"\nassert", "solution('''\n3\n3 2 2\n3 2 1\n3 2 0\n''') == '''\nYES\nNO\nYES\n'''", "solution('''\n1\n1 1 1\n''') == 'YES'\n\nassert solution('''\n1\n1 2 1\n''') == 'NO'\n\nassert solution('''\n1\n2 1 1\n''') == 'YES'\n\nassert solution('''\n1\n5 4 2\n''') == 'YES'\n\nassert solution('''\n1\n5 3 3\n''') == 'NO'\n\nassert solution('''\n1\n5 3 2\n''') == 'YES'\n\nassert solution('''\n1\n5 5 1\n''') == 'YES'\n\nassert solution('''\n1\n3 3 2\n''') == 'YES'\n\nassert solution('''\n1\n18 18 2\n''') == 'YES'\n\nassert solution('''\n1\n18 18 3\n''') == 'YES'\n\nassert solution('''\n1\n18 18 4\n''') == 'YES'\n\nassert solution('''\n1\n18 18 5\n''') == 'YES'\n\nassert solution('''\n1\n18 18 6\n''') == 'YES'\n\nassert solution('''\n1\n18 18 7\n''') == 'YES'\n\nassert solution('''\n1\n18 18 8\n''') == 'YES'\n\nassert", "solution(\"5\\n1 2 2\\n0 1 1\\n2 3 3\\n4 4 2\\n10 10 10\") == \"YES\\nYES\\nYES\\nNO\\nYES\"", "solution(\n'''\n2\n2 1 1\n'''\n) == '''\nYES\n'''\n\nassert solution(\n'''\n1\n1 2 1\n'''\n) == '''\nNO\n'''\n\nassert solution(\n'''\n2\n10 3 2\n'''\n) == '''\nYES\n'''\n\nassert solution(\n'''\n1\n1 2 2\n'''\n) == '''\nNO\n'''\n\n# check the runtime of solution\nassert solution(\n'''\n10\n'''\n) == '''\n'''", "solution('''\n4\n4 2 2\n4 4 1\n1 10 10\n2 3 3\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution(\"1\\n1 1 1\") == \"YES\"\nassert solution(\"2\\n2 2 2\\n0 1 0\") == \"YES\\nNO\"\nprint(\"Success\")", "solution('''\n2\n1 1 1\n2 3 3\n''') == '''\nYES\nNO\n'''\n\nprint('All done!')", "solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert", "solution('''4\n4 4 2\n4 5 2\n4 3 3\n9 5 2''') == '''YES\nNO\nYES\nYES'''", "solution(\"5\\n\"\n\"2 3 3\\n\"\n\"2 3 2\\n\"\n\"1 1 1\\n\"\n\"3 5 4\\n\"\n\"10 12 9\") == \"YES\\n\" \\\n                \"YES\\n\" \\\n                \"YES\\n\" \\\n                \"NO\\n\" \\\n                \"YES\"\n\nassert solution(\"4\\n\"\n\"1 2 2\\n\"\n\"1 2 1\\n\"\n\"1 1 1\\n\"\n\"3 2 1\") == \"NO\\n\" \\\n               \"YES\\n\" \\\n               \"YES\\n\" \\\n               \"YES\"\n\nassert solution(\"3\\n\"\n\"2 3 3\\n\"\n\"1 1 1\\n\"\n\"1 1 2\") == \"YES\\n\" \\\n               \"YES\\n\" \\\n               \"NO\"\n\nassert solution(\"5\\n\"\n\"5 10 9\\n\"\n\"10 15 9\\n\"\n\"5 6 9\\n\"\n\"5 7 9\\n\"\n\"5 7 9\") == \"YES\\n\" \\\n               \"YES\\n\" \\\n               \"NO\\n\" \\\n               \"NO\\n\" \\\n               \"NO\"\n\nassert solution(\"2\\n\"\n\"1 2 1\\n\"\n\"", "solution('''\n5\n5 5 2\n5 4 2\n5 5 1\n5 5 3\n5 5 4\n''') == '''\nYES\nNO\nYES\nNO\nNO\n'''\n\nassert solution('''\n1\n1 1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n1 2 2\n''') == '''\nNO\n'''\n\nassert solution('''\n3\n20 20 1\n20 20 2\n20 20 3\n''') == '''\nYES\nYES\nYES\n'''\n\nassert solution('''\n1\n100000 100001 50000\n''') == '''\nYES\n'''\n\nassert solution('''\n5\n500000 1 1\n500000 2 2\n500000 3 3\n500000 4 4\n500000 5 5\n''') == '''\nYES\nYES\nYES\nYES\nYES\n'''\n\nassert solution('''\n4\n500000 500000 1\n500000 500000 2\n500000 500000 3\n500000 500000 4\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\nassert solution('''\n2\n100000 100000 50001\n100000 100000 50002\n''') == '''\nNO\nNO\n'''\n\nassert solution(", "solution(\"\"\"\n3\n10 5 2\n10 5 3\n10 5 1\n\"\"\") == \"\"\"\nYES\nNO\nYES\n\"\"\"\n\n# stress testing for large inputs\n# stress testing for large inputs\nfrom random import randint\nfrom datetime import datetime\nfrom os import urandom\n# from time import time\nfrom hashlib import sha256\n\nMAX_TEST_CASES = 10 ** 5\nMAX_S = MAX_N = 10 ** 6\nMAX_K = 10 ** 18\nMAX_S_LEN = 20\nMAX_N_LEN = 20\nMAX_K_LEN = 10 ** 5\n\n# s = randint(1, MAX_S)\n# n = randint(1, MAX_N)\n# k = randint(1, MAX_K)\n# print(\"\\n\".join([f\"{s} {n} {k}\" for _ in range(MAX_TEST_CASES)]))\n\n# tc = int(f\"{s}\"[-1])\n# if tc == 0:\n#     print(\"YES\")\n# else:\n#     print(\"NO\")\n\n# for _ in range(5):\n#     s = int(str(urandom(randint(1, MAX_S_LEN)), encoding=\"utf-8\"))\n#    ", "solution('''\n3\n3 2 2\n3 1 2\n1 2 2\n''') == '''\nYES\nNO\nNO\n'''", "solution('''\n2\n2 3 2\n3 4 1\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 3\n3 4 1\n''') == '''\nNO\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 1\n3 4 1\n''') == '''\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 2 1\n3 4 1\n''') == '''\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 1\n2 3 2\n''') == '''\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 1\n2 3 3\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 2\n2 3 3\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 3\n2 3 4\n''') == '''\nNO\nNO\n'''\n\n# check the correctness of solution\nassert solution('''", "solution(\n'''2\n2 3 2\n2 5 2\n''') == \\\n'''YES\nNO\n'''\n\n# print(solution(stdin))\n\n'''\n2 3 2\n2 5 2\n'''", "solution('''\n2\n4 2 2\n4 3 1\n''') == '''\nYES\nNO\n'''", "solution(\"\") == \"\", \"Empty input should return 'Error'\"\nassert solution(\"1\\n1 1 1\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\n1 2 1\") == \"NO\", \"Should return NO\"\nassert solution(\"1\\n2 2 1\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\n2 2 2\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\n2 3 1\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\n2 3 2\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\n2 3 3\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\n2 3 4\") == \"NO\", \"Should return NO\"\nassert solution(\"1\\n3 3 1\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\n3 3 2\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\n3 3 3\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\n3 3 4\") == \"NO\", \"Should return NO\"\nassert solution(\"1\\n3 4 1\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\n3 4 2\") == \"YES\", \"Should return YES\"\nassert solution(\"1\\", "solution('''\n1\n0 1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n1 0 1\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n2 2 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n2 2 2\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n3 2 2\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n5 2 2\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n3 2 3\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n4 2 3\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n6 3 3\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n6 3 4\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n6 3 5\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n6 3 6\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n6 4 2\n''", "solution('''4\n4 2 2\n4 2 1\n4 4 2\n4 4 1''') == '''NO\nYES\nYES\nNO'''\n\nassert solution('''3\n3 1 2\n3 1 1\n3 3 2''') == '''YES\nYES\nYES'''\n\nassert solution('''1\n1 1 1''') == '''YES'''\n\nassert solution('''3\n3 3 1\n7 3 2\n1000 1000000 1''') == '''NO\nYES\nYES'''", "solution('''\n1\n6 4 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n4 4 2\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n9 5 3\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n12 3 3\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n13 9 7\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n18 6 3\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n18 15 4\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n19 9 3\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n20 14 4\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n20 20 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n20 20 4\n''') == 'YES'\n\n# check the correctness of solution\nassert solution(''", "solution('''1\n1 1 1''') == 'YES'\nassert solution('''1\n2 2 1''') == 'NO'\nassert solution('''1\n5 3 1''') == 'YES'\nassert solution('''1\n6 3 1''') == 'NO'\nassert solution('''1\n7 3 1''') == 'YES'\nassert solution('''1\n20 6 3''') == 'YES'\nassert solution('''1\n20 10 1''') == 'YES'\nassert solution('''1\n20 10 2''') == 'YES'\nassert solution('''1\n20 10 3''') == 'YES'\nassert solution('''1\n20 10 4''') == 'YES'\nassert solution('''1\n20 10 5''') == 'YES'\nassert solution('''1\n20 10 6''') == 'YES'\nassert solution('''1\n20 10 7''') == 'YES'\nassert solution('''1\n20 10 8''') == 'YES'\nassert solution('''1\n20 10 9''') == 'YES'\nassert solution('''1\n20 10 10''') == 'YES'\nassert solution('''1\n20 15 1''') == 'YES'\nassert solution('''1\n20 15 2''')", "solution('''\n4\n8 5 2\n8 5 3\n8 5 4\n2 3 3\n''') == '''\nYES\nNO\nYES\nYES\n'''\n\n# run tests\nsolution('''\n4\n8 5 2\n8 5 3\n8 5 4\n2 3 3\n''')\n\n# with open('testcase.txt', 'r') as fp:\n#     print(solution(fp.read()))", "(solution(\"1\\n2 3 3\") == \"YES\")\nassert (solution(\"1\\n3 4 2\") == \"NO\")\nassert (solution(\"1\\n4 2 2\") == \"YES\")\nassert (solution(\"1\\n4 3 3\") == \"YES\")\nassert (solution(\"1\\n5 3 3\") == \"NO\")\nassert (solution(\"1\\n6 3 3\") == \"YES\")\nassert (solution(\"1\\n6 4 4\") == \"YES\")\nassert (solution(\"1\\n8 5 3\") == \"YES\")\nassert (solution(\"1\\n8 7 7\") == \"YES\")\nassert (solution(\"1\\n9 7 7\") == \"NO\")\nassert (solution(\"1\\n10 7 7\") == \"YES\")\nassert (solution(\"1\\n10 8 8\") == \"YES\")\nassert (solution(\"1\\n11 6 6\") == \"YES\")\nassert (solution(\"1\\n12 6 6\") == \"NO\")\nassert (solution(\"1\\n13 6 6\") == \"YES\")\nassert (solution(\"1\\n14 6 6\") == \"NO\")\nassert (solution(\"1\\n15 6 6\") == \"YES\")\nassert (solution(\"1\\n16 6 6\")", "solution(\"\"\"\n4\n2 3 1\n4 3 1\n5 3 1\n5 4 1\n\"\"\") == \"\"\"\nYES\nYES\nNO\nYES\n\"\"\"", "solution(test_data) == test_output", "solution('''3\n1 1 1\n1 1 2\n1 1 3''') == '''YES\nNO\nNO'''\n\n# check the correctness of solution\nassert solution('''1\n2 3 2''') == '''YES'''", "solution(\"1\\n1 1 1\") == \"NO\"\nassert solution(\"1\\n2 1 1\") == \"YES\"\nassert solution(\"1\\n1 2 1\") == \"NO\"\nassert solution(\"1\\n1 2 2\") == \"NO\"\nassert solution(\"1\\n2 2 1\") == \"NO\"\nassert solution(\"1\\n2 2 2\") == \"YES\"\nassert solution(\"1\\n10 2 5\") == \"YES\"\nassert solution(\"1\\n8 4 2\") == \"YES\"\nassert solution(\"1\\n8 4 3\") == \"NO\"\nassert solution(\"1\\n40000000 40000000 100000000\") == \"YES\"\nassert solution(\"1\\n40000000 40000000 100000001\") == \"NO\"\nassert solution(\"1\\n40000000 40000000 200000000\") == \"NO\"\nassert solution(\"1\\n40000000 40000000 400000000\") == \"NO\"\nassert solution(\"1\\n40000000 40000000 600000000\") == \"NO\"\nassert solution(\"1\\n40000000 40000000 800000000\") == \"NO\"\nassert solution(\"1\\n1000000000000000000000000 1 000000000000000000000000 10000000000000000000000000\") == \"YES\"\nassert solution(\"1\\n1000000000000000000000000 1 000000000000000000000000 10000000000000000000000001\") == \"NO\"\nassert solution(\"1\\n1000000000000000000000000 2 0000000000000000", "solution('''\n1\n1 2 1\n''') == '''\nYES\n'''\n\n# run the solution\nsolution(stdin)", "solution(\"\"\"2\n10 2 2\n10 2 3\"\"\") == \"\"\"YES\nNO\"\"\"", "solution(sample_input) == sample_output, \"Sample\"\nassert solution(sample_input1) == sample_output1, \"Sample1\"\nassert solution(sample_input2) == sample_output2, \"Sample2\"\nassert solution(sample_input3) == sample_output3, \"Sample3\"\nassert solution(sample_input4) == sample_output4, \"Sample4\"\nassert solution(sample_input5) == sample_output5, \"Sample5\"\nassert solution(sample_input6) == sample_output6, \"Sample6\"\nassert solution(sample_input7) == sample_output7, \"Sample7\"\nassert solution(sample_input8) == sample_output8, \"Sample8\"\nassert solution(sample_input9) == sample_output9, \"Sample9\"\nassert solution(sample_input10) == sample_output10, \"Sample10\"\nassert solution(sample_input11) == sample_output11, \"Sample11\"\nassert solution(sample_input12) == sample_output12, \"Sample12\"\nassert solution(sample_input13) == sample_output13, \"Sample13\"\nassert solution(sample_input14) == sample_output14, \"Sample14\"\nassert solution(sample_input15) == sample_output15, \"Sample15\"\n", "solution(\"\"\"\n2\n2 2 2\n1 2 1\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 1 1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 1 2\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 1 2\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 1 2\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 3 2\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 3 2\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 3 2\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n4 3 2\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 3 2\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 3 3\n\"\"\") == \"\"\"", "solution('''3\n1 1 1\n3 2 1\n3 2 2''') == '''YES\nYES\nNO'''", "solution('''1\n3 1 1''') == 'YES'\nassert solution('''1\n3 3 3''') == 'YES'\nassert solution('''1\n9 9 1''') == 'YES'\nassert solution('''1\n10 10 2''') == 'YES'\nassert solution('''1\n9 4 4''') == 'NO'\nassert solution('''1\n4 3 3''') == 'NO'\nassert solution('''1\n10 10 3''') == 'NO'\nassert solution('''1\n10 10 5''') == 'NO'\n\nif __name__ == '__main__':\n    print(solution(input()))", "solution(\"\"\"3\n3 4 2\n10 5 6\n9 8 4\"\"\") == \"\"\"YES\nNO\nYES\"\"\"", "solution(\"2\\n1 1 1\\n4 2 1\") == \"YES\\nNO\"\nassert solution(\"2\\n1 1 1\\n1 1 2\") == \"YES\\nYES\"\nassert solution(\"1\\n10 9 7\") == \"YES\"\nassert solution(\"1\\n10 10 10\") == \"YES\"\nassert solution(\"1\\n10 10 9\") == \"NO\"\nassert solution(\"1\\n10 11 10\") == \"NO\"\nassert solution(\"1\\n10 11 11\") == \"NO\"\nassert solution(\"1\\n100 10 10\") == \"YES\"\nassert solution(\"1\\n100 11 10\") == \"NO\"\nassert solution(\"1\\n10 9 3\") == \"YES\"\nassert solution(\"1\\n10 7 3\") == \"NO\"\nassert solution(\"1\\n10 9 2\") == \"YES\"\nassert solution(\"1\\n10 7 2\") == \"NO\"\nassert solution(\"1\\n10 10 2\") == \"YES\"\nassert solution(\"1\\n10 10 3\") == \"YES\"\nassert solution(\"1\\n10 10 4\") == \"YES\"\nassert solution(\"1\\n10 10 5\") == \"YES\"\nassert solution(\"1\\n10 10 6\") == \"YES\"\nassert solution(\"1\\n10 10 7\") == \"YES\"\n"], "finish_reason": ["length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "length"], "sum_logprob": [-90.55402223739603, -12.639595235800002, -65.06717323136401, -82.82594939649796, -49.44636966686401, -30.152360341279994, -42.14406788233001, -7.830428976799999, -17.030841254300004, -33.19805411396001, -12.639594490800002, -83.5691191319109, -50.36854366757, -12.000208520000001, -36.00531438459096, -17.699676789800005, -60.10174167328698, -34.70157675591001, -58.356626714590014, -29.948076855369997, -29.697195524259996, -22.903262979, -15.029937244659985, -29.7688101756, -129.00521033074915, -110.59887310434888, -197.85444129025012, -19.1518746012, -57.37161103877852, -40.87688580168001, -13.949669864799999, -51.34166002029798, -60.104854165447385, -73.26566088899997, -91.85457912231504, -56.835956167699536, -61.935719840003, -76.17031898604202, -26.115413655050002, -10.5116886737, -25.1596126286, -95.41455382752501, -22.015658945600006, -16.182064445, -30.380114524008466, -58.80709816873499, -14.742998483299996, -64.06085833396901, -29.2393117792, -101.10199302458905], "mean_logprob": [-0.30184674079132, -0.3717528010529412, -0.2666687427514918, -0.2760864979883267, -0.16482123222288, -0.6554860943756522, -0.4958125633215294, -0.39152144884, -0.5009070957147059, -0.4098525199254321, -0.3717527791411765, -0.41994532227090925, -0.5474841702996739, -1.3333565022222222, -0.12001771461530333, -0.5205787291117647, -0.20033913891095667, -0.7543821033893479, -0.43549721428798505, -0.74870192138425, -0.7070760839109523, -0.6362017494166666, -0.050099790815533334, -0.8269113937666667, -0.43001736776916333, -0.36866291034783, -0.6595148043008333, -0.5632904294470589, -0.191238703462595, -0.7432161054850909, -0.49820249517142856, -0.17113886673432666, -0.20034951388482466, -0.605501329661157, -0.3061819304077167, -0.189453187225665, -0.6013176683495437, -0.25390106328680667, -0.705821990677027, -0.9556080612454546, -0.4413967127824561, -0.31804851275841667, -0.6290188270171428, -0.7705744973809524, -0.10126704841336166, -0.19602366056245, -0.49143328277666665, -0.4080309448023503, -1.0829374733037038, -0.3370066434152967]}
{"prompt": "'''\nYou are given an array A of length N weights of masses A_1, A_2...A_N. No two weights have the same mass. You can put every weight on one side of the balance (left or right). You don't have to put weights in order A_1,...,A_N. There is also a string S consisting of characters \"L\" and \"R\", meaning that after putting the i-th weight (not A_i, but i-th weight of your choice) left or right side of the balance should be heavier. Find the order of putting the weights on the balance such that rules of string S are satisfied. \n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A The second line contains N distinct integers: A_1, A_2,...,A_N (1 \u2264 A_i \u2264 10^9) - the weights given The third line contains string S of length N consisting only of letters \"L\" and \"R\" - string determining which side of the balance should be heavier after putting the i-th weight of your choice\n\nOutput\n\nThe output contains N lines. In every line, you should print one integer and one letter - integer representing the weight you are putting on the balance in that move and the letter representing the side of the balance where you are putting the weight. If there is no solution, print -1.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n1 2 3\nLLR\n''') == '''\n2 L\n1 L\n3 R\n'''\n\nassert solution('''\n3\n1 2 3\nRLR\n''') == '''\n2 R\n1 R\n3 L\n'''\n\nassert solution('''\n4\n2 3 5 4\nLLLL\n''') == '''\n-1\n'''\n\nassert solution('''\n4\n2 3 5 4\nRRRR\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n2 3 4 5 6\nLLLLL\n''') == '''\n3 L\n1 L\n2 L\n4 L\n5 L\n'''\n\nassert solution('''\n5\n2 3 4 5 6\nRRRRL\n''') == '''\n6 R\n4 R\n2 R\n1 R\n3 L\n'''\n\nassert solution('''\n5\n2 3 4 5 6\nRRRRR\n''') == '''\n5 R\n3 R\n1 R\n2 R\n4 R\n'''\n\nassert solution('''\n5\n2 3 4 5 6\nLLLLR\n''') == '''\n3 L\n1 L\n2 L\n5 R\n4 L\n'''\n\nassert solution(", "solution(\"5\\n1 2 3 4 5\\nRLLLL\") == \\\n'''\n1 R\n2 L\n3 L\n4 L\n5 L\n'''\n\nassert solution(\"5\\n1 2 3 4 5\\nRRRLL\") == '-1'\n\nassert solution(\"5\\n1 2 3 4 5\\nRRLLL\") == \\\n'''\n1 R\n2 R\n3 L\n4 L\n5 L\n'''\n\nassert solution(\"5\\n1 2 3 4 5\\nRRRLL\") == '-1'\n\nassert solution(\"5\\n1 2 3 4 5\\nRRLLL\") == \\\n'''\n1 R\n2 R\n3 L\n4 L\n5 L\n'''\n\nassert solution(\"5\\n1 2 3 4 5\\nRRRRR\") == \\\n'''\n1 R\n2 R\n3 R\n4 R\n5 R\n'''\n\nassert solution(\"5\\n1 2 3 4 5\\nLLLLL\") == \\\n'''\n1 L\n2 L\n3 L\n4 L\n5 L\n'''\n\nassert solution(\"5\\n1 2 3 4 5\\nLLLLR\") == '-1'\n\nassert solution(\"5\\n1 2 3 4 5\\nLLLRR\") == \\", "solution(SAMPLE_1) == '2\\n1 R\\n2 L\\n', 'sample 1'\nassert solution(SAMPLE_2) == '1\\n1 R\\n', 'sample 2'\nassert solution(SAMPLE_3) == '-1\\n', 'sample 3'\nassert solution(SAMPLE_4) == '2\\n2 R\\n1 L\\n', 'sample 4'\nassert solution(SAMPLE_5) == '-1\\n', 'sample 5'\n\nprint('done')", "solution(input1) == output1\nassert solution(input2) == output2\nassert solution(input3) == output3\nassert solution(input4) == output4\nassert solution(input5) == output5\nassert solution(input6) == output6\nassert solution(input7) == output7\nassert solution(input8) == output8\nassert solution(input9) == output9\nassert solution(input10) == output10\nassert solution(input11) == output11\nassert solution(input12) == output12\nassert solution(input13) == output13\nassert solution(input14) == output14\nassert solution(input15) == output15\nassert solution(input16) == output16\nassert solution(input17) == output17\nassert solution(input18) == output18\nassert solution(input19) == output19\nassert solution(input20) == output20\nassert solution(input21) == output21\nassert solution(input22) == output22\nassert solution(input23) == output23\nassert solution(input24) == output24\nassert solution(input25) == output25\nassert solution(input26) == output26\nassert solution(input27) == output27\nassert solution(input28) == output28\nassert solution(input29) == output29\nassert solution(input30) == output30\nassert", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution(\"\"\"3\n3 4 5\nLRL\"\"\") == \"\"\"2 L\n1 L\n3 R\"\"\"\nassert solution(\"\"\"5\n1 2 3 4 5\nLLLLL\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"1\n1\nL\"\"\") == \"\"\"1 L\"\"\"\nassert solution(\"\"\"5\n1 2 3 4 5\nRRRRR\"\"\") == \"\"\"1 R\n2 R\n3 R\n4 R\n5 R\"\"\"\nassert solution(\"\"\"1\n1\nR\"\"\") == \"\"\"1 R\"\"\"\nassert solution(\"\"\"4\n4 3 2 1\nRLRL\"\"\") == \"\"\"4 R\n3 L\n2 R\n1 L\"\"\"\nassert solution(\"\"\"8\n1 2 3 4 5 6 7 8\nLLLLLLLL\"\"\") == \"\"\"1 L\n2 L\n3 L\n4 L\n5 L\n6 L\n7 L\n8 L\"\"\"\nassert solution(\"\"\"8\n1 2 3 4 5 6 7 8\nRRRRRRRR\"\"\") == \"\"\"1 R\n2 R\n3 R\n4 R\n5 R\n6 R\n7 R\n8 R\"\"\"\nassert solution(\"\"\"8\n1 2 3 4 5 6 7 8\nLLLLLLRL\"\"\") == \"\"\"1 L\n2 L\n3 L\n4 L\n5 L\n6 L\n7 R\n8 L\"\"\"\nassert solution(\"\"\"8\n1 2 3", "solution('''\n4\n1 2 3 4\nLRLR\n''') == '''\n1 L\n2 R\n3 L\n4 R\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 3 4\nLLLL\n''') == '''\n1 L\n2 L\n3 L\n4 L\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\nL\n''') == '''\n1 L\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 1 1 1 1 1\nRLLRLL\n''') == '''\n1 R\n1 L\n1 L\n1 R\n1 L\n1 L\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 1 1 1 1 1\nRRRRRR\n''') == '''\n1 R\n1 R\n1 R\n1 R\n1 R\n1 R\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 1 1 1 1 1\nLLLLLL\n''') == '''\n1 L\n1 L\n1 L\n1 L\n1 L\n1 L\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 2 3 4 5 6\n", "solution('''\n5\n5 2 1 3 7\nLLLRR\n''') == '''\n1 L\n5 L\n3 L\n2 L\n7 R\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n10 9 1 10 6 10\nRLLRRL\n''') == '''\n1 R\n6 R\n9 L\n10 L\n10 L\n10 L\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 3 4 5\nRRRRR\n''') == '''\n5 R\n4 R\n3 R\n2 R\n1 R\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 3 4 5\nRRRRR\n''') == '''\n5 R\n4 R\n3 R\n2 R\n1 R\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 4 3 2 1\nLLLLL\n''') == '''\n1 L\n2 L\n3 L\n4 L\n5 L\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 4 3 2 1\nLLLLR\n''') == '''\n1 L\n2 L\n3 L\n4 L\n5 R\n'''\n\n# check the", "solution(\"<input>\") == \"<output>\"", "solution('''\n6\n10 1 5 4 2 7\nLLRLLR\n''') == '''\n1 L\n4 L\n5 L\n7 R\n2 L\n10 R\n'''\n\n'''\n# step-1\ndef solution(stdin: str) -> str:\n    nums = [int(i) for i in stdin.split('\\n')[1].split()]\n    res = []\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[j] == nums[i]:\n                continue\n            res.append([nums[i], nums[j]])\n    return res\n'''", "solution('''\n5\n1 2 3 4 5\nLLLLL\n''') == '''\n1 L\n2 L\n3 L\n4 L\n5 L\n'''\n\nassert solution('''\n4\n4 3 2 1\nRRRR\n''') == '''\n1 R\n2 R\n3 R\n4 R\n'''\n\nassert solution('''\n5\n2 1 4 3 5\nRRRLL\n''') == '''\n1 R\n2 R\n3 L\n4 R\n5 L\n'''\n\nassert solution('''\n5\n2 1 4 3 5\nLLLLL\n''') == '-1'\n\nassert solution('''\n5\n2 1 4 3 5\nRRLLL\n''') == '-1'\n\nassert solution('''\n5\n2 1 4 3 5\nRRRRR\n''') == '-1'\n\nassert solution('''\n5\n2 1 4 3 5\nLLRLR\n''') == '''\n1 L\n3 L\n5 R\n2 R\n4 L\n'''\n\nassert solution('''\n5\n2 1 4 3 5\nLLLLR\n''') == '''\n1 L\n2 L\n4 L\n5 R\n3 L\n'''\n\nassert solution('''\n5\n2 1", "solution(\"\"\"\\\n5\n1 2 3 4 5\nLRLRL\n\"\"\") == \"\"\"\\\n1 L\n5 R\n2 L\n4 R\n3 L\n\"\"\"\nassert solution(\"\"\"\\\n5\n1 2 3 4 5\nRLLLL\n\"\"\") == \"-1\"\nassert solution(\"\"\"\\\n1\n10\nL\n\"\"\") == \"\"\"\\\n10 L\n\"\"\"\n\n# stress testing is not necessary. This will take 10 seconds to check correctness.\nimport random\nimport string\n\ndef solution_stress(stdin: str) -> str:\n    pass\n\ndef make_input(n, m):\n    s = list(string.ascii_uppercase)\n    random.shuffle(s)\n    return f\"\"\"\\\n{n}\n{' '.join(str(x) for x in range(1, n+1))}\n{''.join(s[:m])}\n\"\"\"\n\ndef test_stress(i):\n    print(i)\n    inp = make_input(random.randint(1, 20), random.randint(1, 20))\n    out1 = solution(inp)\n    out2 = solution_stress(inp)\n    assert out1 == out2\n\nfor i in range(100):\n    test_stress(i)", "solution('''\\\n4\n1 4 2 6\nRLRR\n''') == '''\\\n4 L\n1 R\n2 L\n6 R\n'''\n\nassert solution('''\\\n4\n1 4 2 6\nLRLR\n''') == '''\\\n6 L\n1 R\n2 L\n4 R\n'''\n\nassert solution('''\\\n4\n1 4 2 6\nRLLL\n''') == '-1'", "(solution(\"sample\") == \"expected\")", "solution(\"test_case_1\") == \"test_case_1_solution\"\n\n# get the input\nn = int(input())\nweights = [int(x) for x in input().split(\" \")]\ns = input()\n\n# print the output\nprint(solution(n, weights, s))", "solution(input_example) == output_example", "solution(\"5\\n1 2 3 4 5\\nLLLRR\") == \"-1\\n-1\\n-1\\n4 L\\n-1\\n\"\n\n# print the answer\nprint(solution(input()))", "solution('''\n1\n1\nL\n''') == '''\n1 L\n'''\n\nassert solution('''\n3\n3 4 5\nLRL\n''') == '''\n3 L\n5 R\n4 L\n'''\n\nassert solution('''\n5\n2 3 4 5 6\nRRRLL\n''') == '''\n2 R\n4 R\n5 R\n3 L\n6 L\n'''\n\nassert solution('''\n10\n3 6 7 9 11 12 13 15 18 23\nLLLLLLLLLL\n''') == '''\n3 L\n6 L\n7 L\n9 L\n11 L\n12 L\n13 L\n15 L\n18 L\n23 L\n'''\n\nassert solution('''\n2\n2 3\nLL\n''') == '''\n-1\n'''\n\nassert solution('''\n2\n2 3\nLR\n''') == '''\n-1\n'''\n\nassert solution('''\n2\n2 3\nRL\n''') == '''\n-1\n'''\n\nassert solution('''\n2\n2 3\nRR\n''') == '''\n-1\n'''", "solution(EXAMPLE_INPUT) == EXAMPLE_OUTPUT\nassert solution(BIG_INPUT) == BIG_OUTPUT", "str(solution(TEST_INPUT_DATA)) == TEST_OUTPUT_DATA", "solution(\"\"\"\n4\n1 3 4 2\nRLLR\n\"\"\") == \"\"\"\n1 R\n3 L\n4 L\n2 R\n\"\"\"\n\nassert solution(\"\"\"\n1\n1\nR\n\"\"\") == \"\"\"\n1 R\n\"\"\"\n\nassert solution(\"\"\"\n3\n3 1 2\nRLR\n\"\"\") == \"\"\"\n1 R\n2 L\n3 R\n\"\"\"\n\nassert solution(\"\"\"\n4\n2 1 3 5\nLRLR\n\"\"\") == \"\"\"-1\"\"\"\n\n# test for submission\nimport os\nprogname = os.path.basename(__file__)[:-3]\n\nfrom subprocess import run, PIPE\n\nif os.getenv('USER','') == 'hoaiquantran': # the user is hoaiquantran on mybinder\n    input_file = '/home/jovyan/work/{}.in'.format(progname)\n    with open(input_file, 'w') as f:\n        f.write(solution('''\n1000\n2375 4436 7307 3434 6761 9754 3235 4214 4962 7426 6791 3580 9168 5397 1460 9578 9674 6461 552 9340 9266 572 8456 6959 9863 7375 8143 4830 7885 4", "solution(\n\"\"\"\n3\n1 2 3\nRLL\n\"\"\"\n) == \"\"\"\n2 R\n1 L\n3 L\n\"\"\"\n\nassert solution(\n\"\"\"\n1\n1\nL\n\"\"\"\n) == \"\"\"\n1 L\n\"\"\"\n\nassert solution(\n\"\"\"\n4\n1 2 3 4\nRRRR\n\"\"\"\n) == \"\"\"\n4 R\n3 R\n2 R\n1 R\n\"\"\"\n\nassert solution(\n\"\"\"\n4\n1 2 3 4\nRLLL\n\"\"\"\n) == \"\"\"\n4 R\n3 L\n2 L\n1 L\n\"\"\"\n\nassert solution(\n\"\"\"\n4\n1 2 3 4\nLRLR\n\"\"\"\n) == \"\"\"\n2 L\n1 R\n4 R\n3 L\n\"\"\"\n\nassert solution(\n\"\"\"\n4\n1 2 3 4\nLLLL\n\"\"\"\n) == \"\"\"\n-1\n\"\"\"\n\nassert solution(\n\"\"\"\n1\n1\nR\n\"\"\"\n) == \"\"\"\n-1\n\"\"\"\n\nassert solution(\n\"\"\"\n1\n1\nL\n\"\"\"\n) == \"\"\"\n1 L\n\"\"\"\n\nassert solution(\n\"\"\"\n6\n5 4 3 2 1 10\nRLRLRL\n\"\"\"\n) == \"\"\"\n1 R\n5 L\n4 R\n3 L\n2 R\n10 L\n\"\"\"\n\nassert solution(\n\"\"\"\n5\n1", "solution(sample_input) == sample_output", "solution('''\n4\n1 2 3 4\nLLRL\n''') == '''\n1 L\n2 L\n3 R\n4 L\n'''\n\n# sample inputs\n# 1.1\nstdin = '''\n5\n1 2 3 4 5\nLLRLR\n'''\n# sample outputs\nprint(solution(stdin))\n'''\n1 L\n2 L\n3 R\n4 L\n5 R\n'''\n\n# 1.2\nstdin = '''\n5\n1 2 3 4 5\nLRLRL\n'''\n# sample outputs\nprint(solution(stdin))\n'''\n1 L\n2 R\n3 L\n4 R\n5 L\n'''\n\n# 1.3\nstdin = '''\n5\n1 2 3 4 5\nLLLLL\n'''\n# sample outputs\nprint(solution(stdin))\n'''\n1 L\n2 L\n3 L\n4 L\n5 L\n'''\n\n# 1.4\nstdin = '''\n5\n1 2 3 4 5\nRRRRR\n'''\n# sample outputs\nprint(solution(stdin))\n'''\n1 R\n2 R\n3 R\n4 R\n5 R\n'''\n\n# 1.5\nstdin = '''\n5\n1 2", "solution(example_input) == example_output\nassert solution(custom_input) == custom_output\n\n# check time limit\n# timeit.timeit(lambda: solution(example_input), number=1)\n# timeit.timeit(lambda: solution(custom_input), number=1)", "solution(\"\"\"\n    3\n    1 2 3\n    LLL\n\"\"\") == \"\"\"\n    1 L\n    2 L\n    3 L\n\"\"\", \"example 1\"\n\nassert solution(\"\"\"\n    3\n    1 2 3\n    RRR\n\"\"\") == \"\"\"\n    1 R\n    2 R\n    3 R\n\"\"\", \"example 2\"\n\nassert solution(\"\"\"\n    6\n    100 -100 200 -200 300 -300\n    RRRLLL\n\"\"\") == \"\"\"\n    100 R\n    -100 L\n    200 R\n    -200 L\n    300 R\n    -300 L\n\"\"\", \"example 3\"\n\nassert solution(\"\"\"\n    4\n    1 2 3 3\n    RRLR\n\"\"\") == \"\"\"\n    1 R\n    2 R\n    3 L\n    3 R\n\"\"\", \"example 4\"\n\nassert solution(\"\"\"\n    2\n    1 2\n    LL\n\"\"\") == \"-1\", \"example 5\"\n\nassert solution(\"\"\"\n    3\n    3 2 1\n    LLL\n\"\"\") == \"-1\", \"example 6\"\n\nassert solution(\"\"\"\n    5\n    100 1000 10000 100000 1000000\n    RLLLL\n\"\"\") == \"\"\"\n    100 R\n    1000 L\n    10000 L\n    100000 L\n    1000000 L", "solution(\"\"\"\n2\n2 3\nLR\n\"\"\") == \"\"\"\n3 R\n2 L\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 2 3\nLLR\n\"\"\") == \"\"\"\n1 L\n2 L\n3 R\n\"\"\"\n\nassert solution(\"\"\"\n2\n2 3\nLL\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2 3 4\nLLLL\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\n# run and check the performance of solution\nimport datetime\ns = datetime.datetime.now()\n\npath = \"../../data/prg/weights/weights.txt\"\nimport os\nif os.path.exists(path):\n    with open(path, \"r\") as f:\n        stdin = f.read()\n        print(solution(stdin))\n\ne = datetime.datetime.now()\nprint('date time: ' + str(e - s))", "solution('''\n5\n1 5 2 3 4\nLLLRR\n''') == '''\n1 L\n2 L\n5 L\n3 R\n4 R\n'''\n\nassert solution('''\n1\n1\nL\n''') == '''\n1 L\n'''\n\nassert solution('''\n2\n2 3\nLR\n''') == '''\n2 L\n3 R\n'''\n\nassert solution('''\n2\n2 3\nRL\n''') == '''\n3 R\n2 L\n'''\n\nassert solution('''\n4\n3 4 2 1\nRRLL\n''') == '''\n4 R\n3 R\n2 L\n1 L\n'''\n\nassert solution('''\n5\n1 2 3 4 5\nRLLRL\n''') == '''\n5 R\n1 L\n2 L\n3 L\n4 R\n'''\n\nassert solution('''\n5\n5 4 3 2 1\nRLLRL\n''') == '''\n1 L\n2 L\n3 L\n4 R\n5 R\n'''\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\nRLRLRLRLRL\n''') == '''\n1 R\n1 L\n1 R\n1 L\n1 R\n1 L\n1 R", "solution('''\n10\n1 2 3 4 5 6 7 8 9 10\nLRRRRRRRRR\n''') == '''\n1 L\n2 R\n3 R\n4 R\n5 R\n6 R\n7 R\n8 R\n9 R\n10 R\n'''\n\n# test for speed\nimport timeit\n\ntimes = []\nfor i in range(10):\n    t = timeit.timeit(f'solution(input)', globals=globals(), number=1)\n    times.append(t)\n    print(t)\n\n# print the fastest solution\nprint(min(times))", "solution('''\n7\n1 3 5 2 6 4 7\nLRLRLRR\n''') == '''\n3 L\n7 R\n6 R\n5 L\n4 L\n2 L\n1 R\n'''\n\nassert solution('''\n1\n1\nL\n''') == '''\n1 L\n'''\n\nassert solution('''\n2\n2 3\nLL\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n5 4 3 2 1\nLLLLL\n''') == '''\n5 L\n4 L\n3 L\n2 L\n1 L\n'''\n\nassert solution('''\n6\n1 2 3 4 5 6\nLRLRLR\n''') == '''\n2 L\n1 L\n3 R\n6 R\n5 L\n4 L\n'''\n\nassert solution('''\n6\n1 2 3 4 5 6\nRLRLRL\n''') == '''\n3 R\n2 L\n5 R\n4 L\n6 R\n1 L\n'''\n\n# test that the solution is correct if stdin is empty\nimport io\nassert solution(io.StringIO('').read()) == ''", "solution(stdin='''\n3\n2 3 4\nLLR\n''') == '''\n2 L\n3 R\n4 R\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n3\n1 2 3\nLLR\n''') == '''\n2 L\n1 L\n3 R\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n3\n1 2 2\nLLR\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n4\n1 1 1 1\nLLRL\n''') == '''\n1 L\n1 L\n1 R\n1 L\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n4\n1 2 3 4\nLLRLL\n''') == '''\n1 L\n2 L\n3 R\n4 L\n4 L\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n5\n2 3 5 7 11\nRRRLR\n''') == '''\n11 R\n7 R\n5 R\n3 R\n2 R\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n6\n1 3 3 3 3 3\nRRRRRR\n", "solution('''\n5\n1 2 3 4 5\nLLLLL\n''') == '''\n5 L\n4 L\n3 L\n2 L\n1 L\n'''\n\nassert solution('''\n5\n2 3 4 5 6\nRRRRR\n''') == '''\n1 R\n2 R\n3 R\n4 R\n5 R\n'''\n\nassert solution('''\n5\n1 1 1 1 1\nLLLRR\n''') == '''\n5 L\n4 R\n3 L\n2 R\n1 L\n'''\n\nassert solution('''\n5\n1 2 3 4 5\nLLLLR\n''') == '''\n5 R\n4 L\n3 L\n2 L\n1 L\n'''\n\nassert solution('''\n5\n1 2 3 4 5\nRLLLR\n''') == '''\n5 L\n4 R\n3 L\n2 L\n1 R\n'''\n\nassert solution('''\n5\n3 4 5 6 7\nLLLLL\n''') == '-1'\n\nassert solution('''\n4\n1 2 4 6\nRRRR\n''') == '-1'\n\nassert solution('''\n2\n2 3\nLR\n''') == '-1'\n\nassert solution('''\n5\n1 2 3 4", "solution(\n'''\n8\n1 3 4 2 5 3 7 2\nL R L R L R L R\n''') == '''\n1 L\n3 R\n4 L\n5 R\n7 L\n2 R\n3 L\n2 R\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n5\n5 5 2 4 1\nL R L R L\n''') == '''\n1 L\n2 R\n5 L\n5 R\n4 L\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n5\n1 2 3 4 5\nL R L R L\n''') == '-1'\n\n# check the correctness of solution\nassert solution(\n'''\n6\n1 3 4 3 2 6\nL R L R L R\n''') == '''\n1 L\n3 R\n4 L\n3 R\n2 L\n6 R\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n6\n1 3 4 3 2 6\nL R L R R L\n''') == '''\n1 L\n3 R\n4 L\n3 R\n6 L\n2 R\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n5\n1 5 2 4 3\nL R L R L\n''') == '''\n", "solution(example_input) == example_output\nassert solution(example_input2) == example_output2", "solution('''\n\n''') == '''\n\n'''", "solution('''\n4\n1 2 3 4\nLLLL\n''') == '''\n1 L\n2 L\n3 L\n4 L\n'''\n\nassert solution('''\n4\n1 2 3 4\nRRRR\n''') == '''\n1 R\n2 R\n3 R\n4 R\n'''\n\nassert solution('''\n4\n1 2 3 4\nRRLL\n''') == '''\n4 R\n3 L\n2 R\n1 L\n'''\n\nassert solution('''\n4\n1 3 4 7\nRLRL\n''') == '''\n1 R\n3 L\n4 R\n7 L\n'''\n\nassert solution('''\n1\n1\nR\n''') == '''\n1 R\n'''\n\nassert solution('''\n1\n1\nL\n''') == '''\n1 L\n'''\n\nassert solution('''\n5\n1 2 3 4 5\nRLLRR\n''') == '''\n1 R\n2 L\n3 L\n4 R\n5 R\n'''\n\nassert solution('''\n3\n3 2 1\nRLR\n''') == '''\n3 R\n2 L\n1 R\n'''\n\nassert solution('''\n4\n4 2 1 3\nLLRR\n''') == '''\n", "solution('''3\n1 3 2\nLRL''') == '''1 L\n3 R\n2 L'''\nassert solution('''4\n1 2 3 4\nLLLL''') == '''1 L\n2 L\n3 L\n4 L'''\nassert solution('''5\n1 2 3 4 5\nLRRRR''') == '''1 L\n2 R\n3 R\n4 R\n5 R'''\nassert solution('''5\n1 2 3 4 5\nRRRRR''') == '''1 R\n2 R\n3 R\n4 R\n5 R'''\nassert solution('''5\n1 2 3 4 5\nLLLLL''') == '''1 L\n2 L\n3 L\n4 L\n5 L'''\nassert solution('''5\n1 2 3 4 5\nLRRLR''') == '''1 L\n2 R\n3 R\n4 L\n5 R'''\nassert solution('''4\n7 2 6 8\nLRLR''') == '''1 L\n7 R\n3 L\n8 R'''\nassert solution('''4\n7 2 6 8\nRLRL''') == '''1 R\n2 L\n3 R\n8 L'''\nassert solution('''4\n7 2 6 8\nRRRR''') == '''1", "solution(test_data) == \"\"\"\n1 1\n1 2\n1 R\n\"\"\"", "solution('''\n4\n1 2 3 4\nL R L R\n''') == '''\n1 L\n3 R\n2 L\n4 R\n'''\nassert solution('''\n2\n2 3\nL R\n''') == '''\n2 L\n3 R\n'''\nassert solution('''\n2\n2 3\nR L\n''') == '''\n-1\n'''\nassert solution('''\n1\n1\nL\n''') == '''\n1 L\n'''\nassert solution('''\n3\n3 4 5\nL R L\n''') == '''\n3 L\n4 R\n5 L\n'''\nassert solution('''\n5\n1 1 2 2 3\nL R L R L\n''') == '''\n1 L\n1 L\n2 R\n2 R\n3 L\n'''\nassert solution('''\n2\n1 1\nL R\n''') == '''\n1 L\n1 L\n'''\nassert solution('''\n2\n1 1\nR L\n''') == '''\n-1\n'''\nassert solution('''\n2\n2 3\nL R\n''') == '''\n2 L\n3 R\n'''\nassert solution('''\n2\n3 2\nL R\n''') == '''\n-", "solution(stdin) == stdout", "solution(stdin) == stdout", "solution(test1) == test1_out\nassert solution(test2) == test2_out\nassert solution(test3) == test3_out\nassert solution(test4) == test4_out\nassert solution(test5) == test5_out\nassert solution(test6) == test6_out\nassert solution(test7) == test7_out\nassert solution(test8) == test8_out\nassert solution(test9) == test9_out\nassert solution(test10) == test10_out\nassert solution(test11) == test11_out\nassert solution(test12) == test12_out\nassert solution(test13) == test13_out\nassert solution(test14) == test14_out\nassert solution(test15) == test15_out\nassert solution(test16) == test16_out\nassert solution(test17) == test17_out\nassert solution(test18) == test18_out\nassert solution(test19) == test19_out\nassert solution(test20) == test20_out\nassert solution(test21) == test21_out\nassert solution(test22) == test22_out\nassert solution(test23) == test23_out\nassert solution(test24) == test24_out\nassert solution(test25) == test25_out\nassert", "solution(f'5\\n1 2 3 4 5\\nLLLRR') == '''2\n4\n5\n3\n1'''\n\nassert solution(f'2\\n1 1\\nRL') == '''1\n1'''\n\nassert solution(f'3\\n1 2 3\\nRLL') == '''2\n1\n3'''\n\nassert solution(f'3\\n2 3 4\\nLRR') == '''4\n2\n3'''\n\nassert solution(f'4\\n1 2 3 4\\nRLLL') == '''3\n1\n2\n4'''\n\nassert solution(f'2\\n2 3\\nLR') == '-1'\n\nassert solution(f'3\\n1 2 3\\nLRR') == '-1'\n\nassert solution(f'1\\n1\\nL') == '''1'''\n\nassert solution(f'1\\n1\\nR') == '''1'''\n\nassert solution(f'2\\n2 3\\nLL') == '-1'\n\nassert solution(f'2\\n2 3\\nRR') == '-1'\n\nassert solution(f'3\\n1 2 3\\nRLR') == '''1\n3\n2'''", "(solution('''\n5\n5 1 8 2 4\nLRLRL\n''')) == '''\n1 L\n5 R\n8 L\n2 R\n4 L\n'''\nassert (solution('''\n5\n1 1 2 2 3\nRLLRR\n''')) == '''\n1 R\n1 L\n2 R\n2 L\n3 R\n'''\nassert (solution('''\n5\n1 1 2 2 3\nLLLLL\n''')) == '''\n1 L\n1 L\n2 L\n2 L\n3 L\n'''\nassert (solution('''\n5\n1 1 2 2 3\nRRRRR\n''')) == '''\n1 R\n1 R\n2 R\n2 R\n3 R\n'''\nassert (solution('''\n6\n3 3 3 3 2 1\nLLLLLL\n''')) == '''\n3 L\n3 L\n3 L\n3 L\n2 L\n1 L\n'''\nassert (solution('''\n5\n5 1 8 2 4\nRLRLR\n''')) == '''\n1 R\n5 L\n8 R\n2 L\n4 R\n'''\nassert (solution('''\n5\n5 1 8 2 4\nLLRLR\n''')) == '''\n", "solution('''\n5\n1 1 1 1 1\nRRRLL\n''') == '''\n1 R\n1 R\n1 R\n1 L\n1 L\n'''\n\nassert solution('''\n4\n4 2 1 1\nRLLL\n''') == '''\n1 R\n2 L\n1 L\n1 L\n'''\n\nassert solution('''\n5\n1 2 2 2 2\nLLLLL\n''') == '''\n1 L\n2 L\n2 L\n2 L\n2 L\n'''\n\nassert solution('''\n4\n1 3 3 3\nRRRR\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n1 1 1 1 1\nLLRLR\n''') == '''\n-1\n'''\n\nassert solution('''\n2\n2 1\nLL\n''') == '''\n-1\n'''\n\nassert solution('''\n3\n1 2 3\nRRL\n''') == '''\n3 R\n2 R\n1 L\n'''\n\nassert solution('''\n6\n1 2 3 4 5 6\nLLLLLL\n''') == '''\n1 L\n2 L\n3 L\n4 L\n5 L\n6 L\n'''\n\nassert solution('''\n2\n1", "solution('''\\\n2\n1 2\nLL\n''') == '''\\\n1 L\n2 L\n'''\n\nassert solution('''\\\n4\n1 2 3 4\nLLRL\n''') == '''\\\n1 L\n2 L\n3 R\n4 L\n'''\n\nassert solution('''\\\n4\n1 3 2 4\nLRLR\n''') == '''\\\n3 L\n2 R\n1 L\n4 R\n'''\n\nassert solution('''\\\n4\n1 2 3 4\nLRLR\n''') == '-1'\n\nassert solution('''\\\n3\n3 1 2\nRLL\n''') == '''\\\n1 R\n2 L\n3 L\n'''\n\nassert solution('''\\\n1\n1\nL\n''') == '''\\\n1 L\n'''\n\nassert solution('''\\\n3\n3 2 1\nRLL\n''') == '''\\\n2 R\n1 L\n3 L\n'''\n\n# test performance of solution\n\nimport random\ndef generate_stdin(N=int(1e5)):\n    \"\"\"Generate stdin for testing the performance of solution.\"\"\"\n    # generate list of random weights\n    weights = list(range(1,N+1))\n", "solution(read_from_input_file('input1.txt')) == read_from_output_file('output1.txt')\n\n# unit tests\nfrom unittest import TestCase\n\nclass TestSolution(TestCase):\n    def test_solution_first_sample(self):\n        self.assertEqual(solution(read_from_input_file('input1.txt')), read_from_output_file('output1.txt'))\n\n    def test_solution_second_sample(self):\n        self.assertEqual(solution(read_from_input_file('input2.txt')), read_from_output_file('output2.txt'))\n\n    def test_solution_third_sample(self):\n        self.assertEqual(solution(read_from_input_file('input3.txt')), read_from_output_file('output3.txt'))", "solution('''\n''') == '''\n'''", "solution('''\n5\n1 2 3 4 5\nLLRRL\n''') == '''\n2 L\n1 L\n5 R\n4 R\n3 R\n'''\nassert solution('''\n2\n2 3\nRL\n''') == '''\n3 R\n2 L\n'''\nassert solution('''\n3\n1 2 3\nRLL\n''') == '''\n3 R\n2 L\n1 L\n'''\nassert solution('''\n4\n1 2 3 4\nRRRR\n''') == '-1'\nassert solution('''\n4\n1 2 3 4\nLLLL\n''') == '-1'\nassert solution('''\n4\n1 2 3 4\nLLLR\n''') == '''\n4 R\n3 L\n2 L\n1 L\n'''\nassert solution('''\n3\n1 2 3\nLRR\n''') == '''\n3 R\n2 L\n1 L\n'''\nassert solution('''\n3\n1 2 3\nLRL\n''') == '''\n3 R\n2 L\n1 L\n'''\nassert solution('''\n5\n1 2 3 4 5\nRLLRL\n''') == '''\n5 R\n4 L\n3 L\n2 L\n1 L\n'''\nassert solution('''", "solution(\"\"\"8\n2 1 1 5 5 3 2 1\nRLLLRRLL\n\"\"\") == \"\"\"5 R\n1 R\n5 R\n3 L\n5 R\n2 L\n5 R\n1 R\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"5\n5 2 5 5 2\nRRLLL\n\"\"\") == \"\"\"5 R\n5 R\n5 R\n2 L\n5 R\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"3\n1 2 3\nRLL\n\"\"\") == \"\"\"3 R\n2 L\n1 R\n\"\"\", \"Example 3\"\n\nassert solution(\"\"\"3\n1 2 3\nRRL\n\"\"\") == \"\"\"3 R\n2 R\n1 L\n\"\"\", \"Example 4\"\n\nassert solution(\"\"\"4\n4 4 4 4\nRRRR\n\"\"\") == \"\"\"-1\n\"\"\", \"Wrong answer\""], "finish_reason": ["length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop"], "sum_logprob": [-74.01642413929797, -58.038289176485, -44.24364907614399, -14.088925900606501, -6.71814755678, -77.64041582740701, -48.31049542596001, -81.19833348097094, -12.008575316999998, -92.624022541129, -68.98743068447604, -157.01628477131405, -39.201607118639984, -16.5430591024, -38.1618828755, -9.248548884500002, -39.76692820710998, -82.722944102744, -14.648943898134, -18.858644013310002, -385.9360500054979, -83.31432257313003, -6.5249390179399995, -65.23096786288406, -31.475334716099994, -87.98358835166005, -129.61376950971396, -76.74559756899798, -61.12531678084602, -112.09301781172493, -86.51162356228996, -86.08078624850695, -107.15759497847003, -11.18608387286, -7.2771864851, -71.28469817931399, -84.982032310346, -25.821416181999997, -73.68788713740298, -5.262671406, -5.262671406, -18.193584413674184, -96.549401934229, -90.5630110990363, -93.66776078427797, -130.57261511123005, -47.00572925510499, -7.624933260000001, -72.37387059738798, -106.84559790536997], "mean_logprob": [-0.24672141379766, -0.19346096392161666, -0.36265286127986884, -0.046963086335355, -0.41988422229875, -0.25880138609135667, -0.1610349847532, -0.2706611116032367, -1.0916886651818183, -0.5579760394043916, -0.22995810228158667, -0.52338761590438, -0.36982648225132075, -1.65430591024, -0.5227655188424658, -0.8407771713181819, -0.736424596427963, -0.30752023830016356, -0.43085129112158826, -0.8980306673004762, -1.2864535000183266, -0.2777144085771, -0.5931762743581818, -0.21743655954294666, -0.4561642712478261, -0.29327862783886666, -0.5918436963913881, -0.25581865856332664, -0.4274497676982238, -0.41362737199898525, -0.2883720785409667, -0.28693595416169, -0.35719198326156665, -0.4474433549144, -0.45482415531875, -0.23761566059771333, -0.28327344103448665, -1.2910708091, -0.24562629045801002, -0.5847412673333333, -0.5847412673333333, -0.060645281378914, -0.32183133978076334, -0.3018767036634543, -0.31222586928092666, -0.4352420503707667, -0.2217251379957783, -0.5446380900000001, -0.24124623532462666, -0.5451306015580102]}
{"prompt": "'''\nA bracket sequence is a string containing only characters \"(\" and \")\". A regular bracket sequence (or, shortly, an RBS) is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example:\n\n  * bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"); \n  * bracket sequences \")(\", \"(\" and \")\" are not. \n\n\n\nLet's denote the concatenation of two strings x and y as x+y. For example, \"()()\" + \")(\" = \"()())(\".\n\nYou are given n bracket sequences s_1, s_2, ..., s_n. You can rearrange them in any order (you can rearrange only the strings themselves, but not the characters in them).\n\nYour task is to rearrange the strings in such a way that the string s_1 + s_2 + ... + s_n has as many non-empty prefixes that are RBS as possible.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 20).\n\nThen n lines follow, the i-th of them contains s_i \u2014 a bracket sequence (a string consisting of characters \"(\" and/or \")\". All sequences s_i are non-empty, their total length does not exceed 4 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the maximum number of non-empty prefixes that are RBS for the string s_1 + s_2 + ... + s_n, if the strings s_1, s_2, ..., s_n can be rearranged arbitrarily.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(problem_input) == \"1\\n\"\n\n# upload the solution to checkio\nimport requests\nupload_url = \"https://api.checkio.org/station/solve/\"\nheaders = {'X-Session-Token': 'da54c3ee3f1c6a3a6a73c6d3a6a9e6c9', 'Content-Type': 'application/json'}\ndata = {\"data\": problem_input, \"algo\": \"bryukh\", \"action\": \"submit\"}\nresponse = requests.post(upload_url, headers=headers, json=data)\nresponse.raise_for_status()\nprint(response.text)", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n# test solution\n# assert solution(TEST_INPUT) == TEST_OUTPUT\n# print('passed')\n# get and process input\n\n# print the output", "solution('''\n3\n(())\n()()\n))(\n''') == '''\n'''\n# test data\n\n# stdin\n\n# stdout\n\n# stderr", "solution(test_data) == output_data\n\n# get the input\nt = int(input())\ns = []\nfor _ in range(t):\n    s.append(input())\n\n# print the result\nprint(solution(t, s))", "solution(\"\"\"\n4\n(()\n))\n))\n((\n\"\"\") == \"\"\"\n2\n\"\"\", \"Something went wrong!\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n(()\n))\n))\n((\n))\n\"\"\") == \"\"\"\n1\n\"\"\", \"Something went wrong!\"", "solution(\"4\\n()()\\n((\\n))\\n((())\\n\") == \"3\"\nassert solution(\"3\\n))(\\n())()\\n()\\n\") == \"2\"\nassert solution(\"2\\n())()\\n((()\\n\") == \"2\"\nassert solution(\"2\\n(())\\n()\\n\") == \"2\"\nassert solution(\"1\\n()\\n\") == \"1\"\nassert solution(\"3\\n()()\\n()\\n()\\n\") == \"2\"\nassert solution(\"3\\n()()\\n()\\n()()\\n\") == \"2\"\nassert solution(\"3\\n(()()\\n()\\n()()\\n\") == \"2\"\nassert solution(\"3\\n()()\\n()\\n(()\\n\") == \"2\"\nassert solution(\"3\\n((()\\n()\\n(()\\n\") == \"2\"\nassert solution(\"1\\n()()\\n\") == \"1\"\nassert solution(\"4\\n()()\\n((\\n()\\n(((()()\\n\") == \"2\"\nassert solution(\"4\\n()()\\n()\\n()\\n(()((\\n\") == \"2\"\nassert solution(\"4\\n()()\\n()\\n", "solution('''\n1\n)\n''') == '1'\n\nassert solution('''\n4\n()()\n()\n()\n()\n''') == '6'\n\nassert solution('''\n2\n)(\n))\n''') == '0'\n\nassert solution('''\n1\n(((\n''') == '1'\n\nassert solution('''\n4\n(())\n(()\n()\n(\n''') == '3'\n\nassert solution('''\n3\n(())\n((()\n()\n''') == '3'\n\nassert solution('''\n3\n())\n(()\n(\n''') == '2'\n\nassert solution('''\n2\n()(\n(()\n''') == '2'\n\nassert solution('''\n2\n()\n(\n''') == '2'\n\nassert solution('''\n3\n()\n()\n()\n''') == '3'\n\nassert solution('''\n3\n(()\n()\n()\n''') == '4'\n\nassert solution('''\n4\n()\n()\n()\n()\n''') == '6'\n\nassert solution('''\n1\n(\n''') == '1'\n\nassert solution('''\n1\n)\n''') == '1'\n", "solution(\"6\\n()()()\\n)(()\\n)(\\n)(\\n)(\\n)(\") == '5'\nassert solution(\"2\\n())(()\\n)(())(\") == '1'\nassert solution(\"1\\nsolution('''\n''') == '''\n'''", "solution('''\n3\n()()\n)(\n(()\n''') == '3'\nassert solution('''\n3\n()()\n()()\n()()\n''') == '5'\nassert solution('''\n3\n((\n))\n((\n''') == '3'\nassert solution('''\n3\n((()()()()()\n((()()()()()\n((()()()()()\n''') == '13'\nassert solution('''\n3\n)((((((((((\n)))))\n(()\n''') == '0'\nassert solution('''\n3\n()\n()\n()\n''') == '3'\nassert solution('''\n2\n((((((((((\n)()()))))))\n''') == '0'\nassert solution('''\n3\n()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nassert solution(INPUT) == OUTPUT\n\n# check that solution works with assert\nassert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nassert solution(INPUT) == OUTPUT", "solution('''\n8\n(()(\n()()\n(\n)\n())\n(()())\n())\n()\n''') == '''\n5\n'''\nassert solution('''\n5\n())\n()()\n()()()\n()()()()\n()()()()()\n''') == '''\n5\n'''\nassert solution('''\n2\n))\n(\n''') == '''\n0\n'''\nassert solution('''\n10\n(((\n)))\n(()\n()(\n)((\n()()\n())(\n)(()\n))((\n''') == '''\n2\n'''\nassert solution('''\n1\n()\n''') == '''\n1\n'''\nassert solution('''\n1\n)(\n''') == '''\n0\n'''\nassert solution('''\n10\n)(()\n())(\n()()(\n()())\n(()())\n())()\n(()((\n()))\n))((\n''') == '''\n3\n'''\nassert solution('''\n3\n()\n(\n)\n''') == '''\n1\n'''\nassert solution('''\n1\n)\n''') == '''\n0\n'''\nassert solution('''\n1\n(\n''') == '''\n0", "solution('''\n3\n()()\n))((\n(()(()\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''", "solution(\"\") == \"\"", "solution('''\n3\n()()\n)(\n()\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n)(()\n)(\n)(\n)(\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n((()(()\n)\n))(\n)\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n)()((\n))\n((\n(((\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n((()\n()(\n()(\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n((((\n(((\n(((\n(((\n(((\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n()(()\n()\n()\n(()\n()\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n()(()\n()\n()\n(()\n)()\n''') == '''\n5\n'''\n\n# check", "solution(\"\"\"\n5\n()()\n)(\n(\n)\n)(()\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n3\n))\n(((\n)(\n\"\"\") == \"2\"\n\n# print(solution(open('input.txt').read()))", "solution('''\n2\n()()\n)(\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n((\n()\n))\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n()\n))\n))\n(((\n(()\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n()()\n))(\n(())\n))()\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n()\n()\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n()\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n((\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n)()\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n()(\n())\n()(\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution(''", "(solution('''\n2\n()()\n)(\n''') == '3')\n\nassert (solution('''\n3\n()()\n()()\n()()\n''') == '5')\n\nassert (solution('''\n5\n(((\n))\n))\n((\n(\n''') == '7')\n\nassert (solution('''\n20\n(((((((()()()()()()()()()()()()()\n(((((((((((((((((((((((\n()()()()()()()()()()()()()()\n((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((", "solution(example_input) == example_output", "solution('''\n5\n)(\n()()\n)()\n))(\n)(()\n''') == '4'\n\n# check for performance\nassert solution('''\n2\n()()()\n()()()\n''') == '4'\n\n# check for performance\nassert solution('''\n20\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n))(\n''') == '0'", "solution('''\n1\n()\n''') == '''\n2\n'''\n\nassert solution('''\n1\n()()\n''') == '''\n3\n'''\n\nassert solution('''\n2\n(()())\n(())()\n''') == '''\n8\n'''\n\nassert solution('''\n3\n()\n()\n()\n''') == '''\n6\n'''\n\nassert solution('''\n3\n())\n())\n())\n''') == '''\n0\n'''\n\nassert solution('''\n4\n()\n)()\n()(\n)((\n''') == '''\n4\n'''\n\nassert solution('''\n1\n()()()\n''') == '''\n7\n'''\n\nassert solution('''\n1\n((()))()\n''') == '''\n10\n'''\n\nassert solution('''\n5\n(()())\n(())()\n((()))\n(()((\n))(((\n''') == '''\n21\n'''\n\nassert solution('''\n3\n(()(\n()(\n)()\n''') == '''\n5\n'''\n\nassert solution('''\n3\n())\n())\n())\n''') == '''\n0\n'''\n\n", "solution('''\n4\n))(\n((\n(\n)\n''') == '2'\n\n# get input from stdin and apply the solution\nstdin = open(__file__.replace('.py', '.in'), 'r')\nprint(solution(stdin.read()))", "solution('''3\n)(\n((\n))''') == '2'\n\n# check the correctness of solution\nassert solution('''2\n)()(\n))((''') == '1'\n\n# check the correctness of solution\nassert solution('''1\n(())''') == '2'\n\n# check the correctness of solution\nassert solution('''1\n()(()''') == '1'\n\n# check the correctness of solution\nassert solution('''3\n()()\n)()(\n(())''') == '2'\n\n# check the correctness of solution\nassert solution('''1\n(()(()(()(()(()(()(()(()(()()))))))))))''') == '1'\n\n# check the correctness of solution\nassert solution('''3\n((((((((((((((((((())))))))))))))))))\n((((((((((((((((()))))))))))))))))\n((((((((((((((()))))))))))))))''') == '1'\n\n# check the correctness of solution\nassert solution('''1\n)))((((((())))))((())))))(()(()(())))(((((((((()))))(((()))))(()()))))((())(())(())(())(()((()(((()())(()", "solution(\"3\\n()()()\\n)(\\n(()\") == \"4\"\nassert solution(\"4\\n()()()()\\n)(()\\n(()\\n()\") == \"5\"\nassert solution(\"4\\n()()()()\\n)(()\\n(()\\n()\") == \"5\"\nassert solution(\"2\\n)(\\n)(\") == \"0\"\nassert solution(\"1\\n)(\") == \"0\"\nassert solution(\"1\\n()\") == \"1\"\nassert solution(\"1\\n(\") == \"0\"\nassert solution(\"2\\n()()\\n)()\") == \"2\"\nassert solution(\"3\\n(()()\\n)()\\n()()\") == \"5\"\nassert solution(\"5\\n()(((())))\\n((()()())\\n(((()())))\\n(()())\\n(()()())\") == \"9\"\nassert solution(\"10\\n(((((((())))\\n(((((()))))\\n(((((())))\\n((((())))\\n(((((())))))\\n(((((())))))\\n(((((())))))\\n((((()))))\\n(((((())))))\\n((((()))))\") == \"11\"\nassert solution(\"10\\n()()()\\", "solution(test_data) == test_output", "solution('''\n3\n()()\n)(\n(()\n''') == '''\n5\n'''\nassert solution('''\n2\n()()\n()()\n''') == '''\n7\n'''\nassert solution('''\n1\n()()()\n''') == '''\n4\n'''\nassert solution('''\n1\n())()\n''') == '''\n3\n'''\nassert solution('''\n3\n)())()(\n(()\n()\n''') == '''\n5\n'''\nassert solution('''\n3\n()())()\n)())()(\n)())()(\n''') == '''\n10\n'''\nassert solution('''\n4\n)())()(\n()\n(()\n()()\n''') == '''\n7\n'''\nassert solution('''\n5\n()())()\n)())()(\n)())()(\n)())()(\n()())()\n''') == '''\n11\n'''\nassert solution('''\n8\n()())()\n)())()(\n)())()(\n)())()(\n()())()\n()())()\n()())()\n()())()\n''') == '''\n19\n'''\nassert solution('''\n9\n())()())\n)())", "solution('''\n3\n()()\n)(\n()\n''') == '''\n1\n'''\n\n# TODO: add tests for other cases\n\n# accept the input and generate output using the above solution\nif __name__ == '__main__':\n    from sys import stdin\n    from time import time\n\n    t0 = time()\n    result = solution(stdin.read())\n    t1 = time()\n\n    print(result, f'({t1 - t0:.2f}s)')", "solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '', 'Wrong answer'\n\n# check the correctness of solution\nassert solution(\"\") == '',", "solution('''\n5\n()()\n(())\n)(\n(\n)\n''') == '5'\n\nassert solution('''\n1\n()\n''') == '2'\n\nassert solution('''\n3\n(()\n()\n()\n''') == '3'\n\nassert solution('''\n3\n()()\n()()\n())\n''') == '2'\n\nassert solution('''\n2\n()()\n()\n''') == '3'\n\nassert solution('''\n2\n()()\n(())\n''') == '2'\n\nassert solution('''\n1\n()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "solution(stdin) == stdout", "solution('''\n''') == '''\n'''", "solution('''\n3\n()()\n)(\n(\n''') == '''\n3\n'''\n\nassert solution('''\n5\n())\n)()\n()(\n))(\n(((\n''') == '''\n5\n'''", "solution('''\n2\n()()\n)(\n''') == '3'\n\nassert solution('''\n3\n)(\n)(\n)(\n''') == '0'\n\nassert solution('''\n3\n)))(\n()()()\n)()()\n''') == '4'\n\nassert solution('''\n4\n()()()()\n()()()()\n()()()()\n()()()()\n''') == '6'\n\nassert solution('''\n4\n)))(((\n()()()()\n()()()()\n)))(((\n''') == '4'\n\n# print(solution(sys.stdin.read()))", "solution('''\n3\n()()\n)(\n()\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n((()))\n((())())\n(())\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n)(()(()())()()\n()(()())()()\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n())()())\n)()()()\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n(()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "solution(stdin) == stdout", "solution('''\n4\n(())\n))(\n(()\n()(\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n()\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n2\n()\n()\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3\n()\n()\n()\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n2\n()()\n()()\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3\n()()\n()()\n()()\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n4\n(())\n()()\n(())\n()()\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n5\n(())\n()()\n(())\n()()\n(())\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n2\n(()\n())\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3\n(()\n())\n(())\n''') == '2'\n", "solution(example_in) == example_out, 'example failed'\n\n# read input\nwith open('task1.in', 'r') as file:\n    stdin = file.read()\n\n# test solution\nresult = solution(stdin)\n\n# print the result\nprint(result)", "solution(\"1\\n()()\") == \"2\"\nassert solution(\"1\\n())\") == \"1\"\nassert solution(\"2\\n(((()))\\n()))\") == \"5\"\nassert solution(\"3\\n(((())\\n()))\\n())\") == \"5\"\nassert solution(\"5\\n()()\\n()()\\n()()\\n()()\\n()()\") == \"10\"\nassert solution(\"20\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\\n()()\") == \"40\"\n\nassert solution(\"20\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\\n)(\") == \"0\"\nassert solution(\"20\\n))\\n))\\n))\\n))\\n))\\n))\\n))\\n))\\n))\\n))\\n))\\n))\\n))\\", "solution('''\n4\n((()\n()(\n))(\n)))\n''') == '''\n3\n'''\n\nassert solution('''\n4\n(()\n()(\n))\n()\n''') == '''\n4\n'''\n\nassert solution('''\n6\n(((\n))\n()\n((\n))\n(\n''') == '''\n2\n'''\n\n# check the correctness of solution on large inputs\nassert solution('''\n20\n)(\n()(((\n()\n(\n))(\n()\n()()()\n()\n))\n))\n(((((\n)()\n))((\n(()(\n(\n()(\n()\n''') == '''\n2\n'''\n\nassert solution('''\n20\n(((\n))\n)\n()\n(((\n(\n()\n()\n()\n))\n))\n))\n))((\n(\n))\n))\n()(\n(\n''') == '''\n0\n'''\n\nassert solution('''\n20\n()\n()\n()\n()\n()\n()\n()\n()\n()\n()\n()\n()\n()\n()\n()\n()\n()\n()\n()\n''') == '''\n15\n'''\n\n# check the time complexity of solution\nfrom timeit import time", "solution(\n'''\n3\n(()\n()\n()\n''') == '2'\n\n# check the correctness of solution\nassert solution(\n'''\n6\n()\n()\n()\n()\n()\n()\n''') == '6'\n\n# check the correctness of solution\nassert solution(\n'''\n2\n)(\n(\n''') == '0'\n\n# check the correctness of solution\nassert solution(\n'''\n3\n(()\n()\n()\n''') == '2'\n\n# check the correctness of solution\nassert solution(\n'''\n2\n)(\n)(\n''') == '0'\n\n# check the correctness of solution\nassert solution(\n'''\n2\n()\n)\n''') == '1'\n\n# check the correctness of solution\nassert solution(\n'''\n4\n)(\n)(\n)(\n)(\n''') == '0'\n\n# check the correctness of solution\nassert solution(\n'''\n2\n)()\n()\n''') == '2'\n\n# check the correctness of solution\nassert solution(\n'''\n3\n))\n((\n()\n''') == '1'\n\n# check the correctness of solution\nassert solution(\n'''\n2\n(()\n()\n''') == '2'\n\n# check the correctness of solution", "(solution('''\n1\n(()())\n''') == '''\n6\n''')\n\n# get the input data\nstdin = ''\nwhile True:\n    try:\n        stdin += input() + '\\n'\n    except:\n        break\n\n# print solution\nprint(solution(stdin))", "solution('''4\n)(\n)(())(()\n)(\n))''') == '3'\nassert solution('''3\n(())\n(()())\n((()))''') == '5'\nassert solution('''4\n(())\n))((\n(((\n))(''') == '4'\nassert solution('''4\n)()\n(()\n(()(\n)()''') == '1'\nassert solution('''4\n))(\n)()(\n()(\n(((''') == '1'\nassert solution('''3\n))(\n((\n()(''') == '0'\nassert solution('''3\n)()(\n)()(\n)()(''') == '3'\nassert solution('''2\n()\n())''') == '2'\nassert solution('''1\n))((((') == '0'\nassert solution('''1\n)(())''') == '0'\nassert solution('''2\n())(())(())\n)(())((())''') == '0'\nassert solution('''2\n(())()\n(((()))''') == '1'\nassert solution('''2\n)(())(\n(())(''') == '0'\nassert solution('''1\n(()(()(", "solution('''\n2\n()()\n)()(\n''') == '2'\n\n# check performance\nassert solution('''\n20\n)()()(()()\n))(((((()(\n(()()()()()\n)()((()()()\n()((()))()(\n((()))()()(\n()(()()(((()\n))(((((((((\n()))()(()()\n())()((()()\n((((()(()(()\n()()()()()()\n(()()((()((\n()()((())((\n()((())((((\n()())((((((\n(((((((())((\n(((((((())((\n(()(())((((\n))(())(()(()\n''') == '7'", "solution(open('test-in.txt').read()) == open('test-out.txt').read()", "solution(\"\") == \"\", \"solution(\\\"\\\") must be \\\"\\\"\"\nassert solution(\" \") == \" \", \"solution(\\\" \\\") must be \\\" \\\"\"\nassert solution(\"123\") == \"123\", \"solution(\\\"123\\\") must be \\\"123\\\"\"\nassert solution(\"-1234\") == \"-1234\", \"solution(\\\"-1234\\\") must be \\\"-1234\\\"\"\nassert solution(\"-1234.56\") == \"-1234.56\", \"solution(\\\"-1234.56\\\") must be \\\"-1234.56\\\"\"\nassert solution(\"-1,234.56\") == \"-1,234.56\", \"solution(\\\"-1,234.56\\\") must be \\\"-1,234.56\\\"\"\nassert solution(\"1,234.56\") == \"1,234.56\", \"solution(\\\"1,234.56\\\") must be \\\"1,234.56\\\"\"\nassert solution(\"111111111111111111111\") == \"21,111,111,111,111,111,111\", \"solution(\\\"111111111111111111111\\\") must be \\\"21,111,111,111,111,111,111\\\"\"\nassert solution(\"-111111111111111111111\") == \"-21,111,111,111,111,111,", "solution('''\n4\n()()\n(())\n()\n((\n''') == '''\n3\n'''\n\nassert solution('''\n3\n()\n()\n()\n''') == '''\n2\n'''\n\nassert solution('''\n2\n(((\n))(\n''') == '''\n1\n'''\n\nassert solution('''\n2\n)(\n)(\n''') == '''\n0\n'''\n\nassert solution('''\n3\n())\n())\n())\n''') == '''\n0\n'''\n\nassert solution('''\n1\n()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "solution(r'''\n2\n))(\n)((\n''') == '4'\n\nassert solution(r'''\n4\n))(\n)((\n))(\n)((\n''') == '8'\n\nassert solution(r'''\n3\n()(()()((()()()()()((()\n))((()(()())()((()(()\n))((()(()())()((()(()\n''') == '9'\n\nassert solution(r'''\n4\n((()((()()))(())\n()()()(((()))(()\n(()()()(()()((()()\n)((((())))(()(()\n''') == '10'\n\nassert solution(r'''\n1\n))\n''') == '0'\n\nassert solution(r'''\n1\n()\n''') == '1'\n\nassert solution(r'''\n1\n(\n''') == '0'\n\nassert solution(r'''\n1\n)\n''') == '0'\n\nassert solution(r'''\n1\n))(((\n''') == '0'\n\nassert solution(r'''\n1\n(((()\n''') == '0'\n\nassert solution(r'''\n1\n()(()\n''') == '1'\n", "solution('''3\n()()\n)(\n()\n''') == '2'\n\nassert solution('''3\n()\n()\n()\n''') == '3'\n\nassert solution('''3\n(())\n()()\n()()\n''') == '4'\n\nassert solution('''3\n()()\n()()\n)()\n''') == '2'\n\nassert solution('''3\n())\n)()\n()(\n''') == '2'\n\nassert solution('''3\n())\n)()\n((\n''') == '2'\n\nassert solution('''3\n(()\n)()\n((\n''') == '1'\n\nassert solution('''3\n(()\n)(\n((\n''') == '1'\n\nassert solution('''3\n(())\n)(()\n((\n''') == '2'\n\nassert solution('''3\n()())\n)()\n()(\n''') == '2'\n\nassert solution('''3\n)()()\n()()\n)(\n''') == '2'\n\nassert solution('''3\n)()()\n()()\n))\n''') == '1'\n\nassert solution('''3\n)()()\n))()\n))\n''') == '1'\n\nassert", "solution(None) == None\n\n# check the performance of solution\nassert solution(None) == None", "solution(r'''\n2\n()()\n)(\n''') == r'''\n1\n'''\n\nassert solution(r'''\n3\n)(()()\n)(()\n()\n''') == r'''\n2\n'''\n\nassert solution(r'''\n2\n()()\n()()\n''') == r'''\n2\n'''\n\nassert solution(r'''\n3\n)(()()\n)(()\n()\n''') == r'''\n2\n'''\n\nassert solution(r'''\n3\n)()()()\n()()()\n()()()\n''') == r'''\n3\n'''\n\nassert solution(r'''\n4\n()()()()\n)()()()\n()()()()\n()()()()\n''') == r'''\n4\n'''\n\nassert solution(r'''\n4\n()()()()\n)()()()\n()()()()\n()()()()\n''') == r'''\n4\n'''\n\nassert solution(r'''\n4\n))((()\n))((()\n))((()\n))((()\n''') == r'''\n1\n'''\n\nassert solution(r'''\n20\n)(()(()))((()((()\n()((()(())))()(("], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length"], "sum_logprob": [-172.4289607331839, -56.238297635985006, -36.38522357980001, -34.121406244599996, -47.150408216810014, -133.8322164588301, -117.7864484787477, -57.58911604177007, -6.995711490000001, -99.86495932634945, -38.413982628960014, -167.48233832976524, -24.085180059199992, -5.70434423, -130.1654813346612, -44.92313722660001, -90.60451852088802, -81.34824003124798, -6.98914173923, -58.70452323916499, -118.93541916058693, -44.93669337362, -161.48075897978293, -163.63496605847902, -9.744394123500001, -115.82162861275123, -77.91890174379998, -22.744922234781985, -66.74139436896994, -5.9284554167, -6.971469668000001, -30.772067272599998, -69.40294569098998, -80.95749192153102, -5.928452156700001, -62.012417922970045, -48.188709219419984, -70.03303020265507, -215.55370654728767, -89.063871086957, -36.421127682784, -205.31179759822612, -185.23506899309996, -16.302486365150003, -67.18733544997697, -61.321906779799946, -173.422511226786, -113.82635815998297, -10.327180298800002, -112.16129036301638], "mean_logprob": [-1.0913225362859746, -1.0042553149283036, -0.8085605239955556, -0.5686901040766666, -0.6640902565747887, -0.4461073881961, -0.392621494929159, -0.19196372013923332, -0.49969367785714286, -0.3328831977544983, -0.6195803649832258, -0.5582744610992176, -0.5601204664930233, -0.9507240383333334, -0.43388493778220366, -0.701924019165625, -0.30201506173629333, -0.27116080010416, -0.6353765217481818, -0.4348483202901111, -0.39645139720195666, -0.660833726082647, -0.5382691965992766, -0.5454498868615967, -0.8858540112272727, -0.38607209537583725, -0.6493241811983334, -0.07581640744927333, -0.22247131456323332, -0.6587172685222222, -0.49796211914285715, -0.5215604622474577, -0.4506684785129221, -0.26985830640510333, -0.6587169063, -0.20670805974323334, -0.6983870901365218, -0.23344343400885, -0.718512355157625, -0.2968795702898567, -0.4792253642471579, -0.6843726586607534, -0.9958874677048387, -0.6792702652145833, -0.22395778483325668, -0.20440635593266668, -0.57807503742262, -0.37942119386661, -0.44900783907826086, -0.37387096787672136]}
{"prompt": "'''\nYou are given a matrix, consisting of n rows and m columns. The rows are numbered top to bottom, the columns are numbered left to right.\n\nEach cell of the matrix can be either free or locked.\n\nLet's call a path in the matrix a staircase if it: \n\n  * starts and ends in the free cell; \n  * visits only free cells; \n  * has one of the two following structures: \n    1. the second cell is 1 to the right from the first one, the third cell is 1 to the bottom from the second one, the fourth cell is 1 to the right from the third one, and so on; \n    2. the second cell is 1 to the bottom from the first one, the third cell is 1 to the right from the second one, the fourth cell is 1 to the bottom from the third one, and so on. \n\n\n\nIn particular, a path, consisting of a single cell, is considered to be a staircase.\n\nHere are some examples of staircases:\n\n<image>\n\nInitially all the cells of the matrix are free.\n\nYou have to process q queries, each of them flips the state of a single cell. So, if a cell is currently free, it makes it locked, and if a cell is currently locked, it makes it free.\n\nPrint the number of different staircases after each query. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nInput\n\nThe first line contains three integers n, m and q (1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 10^4) \u2014 the sizes of the matrix and the number of queries.\n\nEach of the next q lines contains two integers x and y (1 \u2264 x \u2264 n; 1 \u2264 y \u2264 m) \u2014 the description of each query.\n\nOutput\n\nPrint q integers \u2014 the i-th value should be equal to the number of different staircases after i queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["'''\n4\n1\n4\n2\n2\n''' == solution('''\n1 1 1\n1\n1\n1\n1\n''')\n\nassert '''\n25\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n''' == solution('''\n2 3 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n''')\n\nassert '''\n4950\n98\n195\n292\n392\n490\n590\n688\n792\n892\n990\n1090\n1190\n1290\n1390\n1492\n1592\n1692\n1792\n1892\n1990\n2090\n2190\n2290\n2390\n2490\n2590\n2690\n2790\n2890\n2990\n3090\n3190\n3290\n3390\n3490\n3590\n3690\n3790\n3890\n3990\n4090\n4190\n4290\n4390\n4490\n4590\n4690\n4790\n4890\n4990\n''' == solution('''\n100 100 50\n44 18\n13 60", "solution(\"\"\"\n10 10 2\n1 1\n5 5\n\"\"\") == \"\"\"\n5\n5\n\"\"\"", "solution('''5 5 5\n5 5\n2 1\n4 3\n2 3\n4 5''') == '''10 7 5 1 1'''\n\nassert solution('''1 1 2\n1 1\n1 1''') == '''1 0'''\n\nassert solution('''1 1 1\n1 1''') == '''1'''\n\nassert solution('''3 2 2\n1 1\n1 2''') == '''3 3'''\n\n# show the execution time\nimport time\nstart = time.time()\nprint(solution('''...'''))\nprint(f'Elapsed: {time.time() - start} sec')", "solution('''\n3 4 7\n1 2\n1 4\n2 3\n3 1\n2 2\n2 3\n2 3\n''') == '''\n0\n0\n0\n1\n2\n2\n2\n'''\n\nassert solution('''\n4 4 4\n1 2\n1 4\n2 3\n3 1\n''') == '''\n0\n0\n0\n1\n'''\n\nassert solution('''\n2 3 10\n1 2\n1 3\n2 2\n2 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n''') == '''\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n'''\n\nassert solution('''\n10 6 5\n1 1\n2 1\n1 1\n1 2\n1 2\n''') == '''\n0\n0\n0\n0\n0\n'''\n\nassert solution('''\n10 8 3\n1 4\n2 2\n2 6\n''') == '''\n0\n0\n1\n'''\n\n# print(\"all good!\")", "solution('''\n3 3 5\n1 1\n2 2\n3 3\n1 2\n3 1\n''') == '''\n1\n2\n3\n2\n1\n'''\n\nassert solution('''\n2 3 3\n1 1\n2 2\n1 2\n''') == '''\n1\n2\n1\n'''\n\nassert solution('''\n2 3 3\n1 1\n2 2\n1 2\n''') == '''\n1\n2\n1\n'''\n\nassert solution('''\n1 1 3\n1 1\n1 1\n1 1\n''') == '''\n1\n1\n1\n'''\n\nassert solution('''\n1000 1000 10\n314 159\n265 358\n901 948\n740 473\n599 591\n314 159\n265 358\n901 948\n740 473\n599 591\n''') == '''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n'''\n\nassert solution('''\n1 1 4\n1 1\n1 1\n1 1\n1 1\n''') == '''\n1\n1\n1\n1\n'''\n\nassert solution('''\n1000 1000 1\n1 1\n''') == '''\n1\n'''\n\nassert solution('''\n1000 1000 2\n", "solution('''\n5 3 3\n1 2\n2 3\n1 3\n''') == '''\n6\n0\n0\n'''\n\nassert solution('''\n2 3 1\n1 1\n''') == '''\n1\n'''\n\nassert solution('''\n3 5 2\n1 2\n3 4\n''') == '''\n14\n1\n'''", "solution(\"\"\"\n4 3 6\n2 1\n3 2\n3 1\n1 1\n1 2\n1 3\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n4 3 7\n2 1\n3 2\n3 1\n1 1\n1 2\n1 3\n2 2\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 3 5\n5 1\n3 2\n3 1\n3 3\n5 2\n\"\"\") == \"\"\"\n1\n1\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n5 3 5\n5 1\n3 2\n3 1\n3 3\n5 2\n\"\"\") == \"\"\"\n1\n1\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n5 3 5\n5 1\n3 2\n3 1\n3 3\n5 2\n\"\"\") == \"\"\"\n1\n1\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n5 3 5\n5 1\n3 2\n3 1\n3 3\n5 2\n\"\"\") == \"\"\"\n1\n1\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n5 3 5\n5 1\n3 2\n3 1\n3 3\n5 2\n\"\"\") == \"\"\"\n1\n1\n1", "solution(r'''\n4 4 6\n1 1\n2 1\n3 1\n4 1\n1 2\n1 3\n''') == r'''\n1\n1\n1\n1\n0\n0\n'''\n\n# let's try a hard one\nassert solution(r'''\n1000 1000 100\n''') == r'''\n'''", "solution(\"\"\"\n1 1 1\n1 1\n\"\"\") == \"0\", \"Wrong answer\"\n\n# the following lines are used to input the test data.\n# DO NOT REMOVE #\ndef main():\n    stdin = '\\n'.join([input() for _ in range(int(input()))])\n    print(solution(stdin))\n\nif __name__ == '__main__':\n    main()", "solution('''4 3 2\n2 1\n2 3''') == '''5\n5'''\nassert solution('''4 3 2\n1 1\n3 3''') == '''3\n3'''\nassert solution('''4 3 2\n2 2\n2 2''') == '''0\n0'''\nassert solution('''1 1 3\n1 1\n1 1\n1 1''') == '''1\n0\n0'''\nassert solution('''1 1 4\n1 1\n1 1\n1 1\n1 1''') == '''1\n0\n0\n0'''\nassert solution('''1 1 5\n1 1\n1 1\n1 1\n1 1\n1 1''') == '''1\n0\n0\n0\n0'''\nassert solution('''1 1 1\n1 1''') == '''1'''\nassert solution('''10 10 8\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n8 1''') == '''4\n4\n4\n4\n4\n4\n4\n4'''\nassert solution('''1 1 1\n1 1''') == '''1'''\nassert solution('''100 100 1\n100 100''') == '''1'''\nassert solution('''4", "solution('''\n3 3 3\n1 1\n2 2\n3 3\n''') == '''\n1\n2\n3\n'''\nassert solution('''\n5 5 5\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '''\n1\n1\n1\n1\n1\n'''\nassert solution('''\n4 4 4\n1 1\n1 2\n1 3\n1 4\n''') == '''\n1\n1\n1\n1\n'''\nassert solution('''\n10 10 10\n1 3\n2 3\n3 3\n4 3\n5 3\n6 3\n7 3\n8 3\n9 3\n10 3\n''') == '''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n'''\nassert solution('''\n5 4 4\n1 1\n1 2\n1 3\n1 4\n''') == '''\n1\n1\n1\n1\n'''\nassert solution('''\n5 4 10\n1 1\n1 2\n1 3\n1 4\n2 1\n2 2\n2 3\n2 4\n3 1\n3 2\n3 3\n3 4\n4 1\n4 2\n4 3\n4 4\n5 1\n5 2\n5 3\n5 4\n''') == '''\n", "solution('''\n5 4 5\n4 2\n4 4\n3 2\n3 3\n4 3\n''') == '''\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3 7\n1 1\n1 3\n2 2\n1 2\n2 3\n1 1\n2 2\n''') == '''\n1\n1\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1000 1000 5\n999 1000\n1000 999\n1000 1000\n999 999\n1000 1000\n''') == '''\n1\n1\n1\n1\n1\n'''\n\nassert solution('''\n1000 1 100\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n", "solution(\"input\") == \"output\"", "solution('''\n5 5 2\n1 1\n1 2\n''') == '''\n6\n5\n'''\n\nassert solution('''\n5 5 2\n1 1\n1 2\n''') == '''\n6\n5\n'''\n\nassert solution('''\n5 5 2\n1 1\n1 2\n''') == '''\n6\n5\n'''\n\nassert solution('''\n5 5 2\n1 1\n1 2\n''') == '''\n6\n5\n'''\n\nassert solution('''\n5 5 2\n1 1\n1 2\n''') == '''\n6\n5\n'''\n\nassert solution('''\n5 5 2\n1 1\n1 2\n''') == '''\n6\n5\n'''\n\nassert solution('''\n5 5 2\n1 1\n1 2\n''') == '''\n6\n5\n'''\n\nassert solution('''\n5 5 2\n1 1\n1 2\n''') == '''\n6\n5\n'''\n\nassert solution('''\n5 5 2\n1 1\n1 2\n''') == '''\n6\n5\n'''\n\nassert solution('''\n5 5 2\n1 1\n1 2\n''') == '''\n6\n5\n'''\n\nassert", "solution('''\n3 4 2\n1 1\n3 4\n''') == '''\n2\n1\n'''\n\nassert solution('''\n5 5 3\n1 1\n1 2\n1 3\n''') == '''\n1\n1\n1\n'''", "solution('''\n1 1 1\n1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2 3\n1 1\n1 2\n2 1\n''') == '''\n0\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3 3\n2 1\n3 2\n2 2\n''') == '''\n0\n1\n3\n'''\n\nassert solution('''\n2 2 3\n1 1\n1 2\n2 1\n''') == '''\n0\n1\n2\n'''\n\nassert solution('''\n1000 1000 1000\n501 501\n501 502\n501 503\n501 504\n501 505\n501 506\n501 507\n501 508\n501 509\n501 510\n501 511\n501 512\n501 513\n501 514\n501 515\n501 516\n501 517\n501 518\n501 519\n501 520\n501 521\n501 522\n501 523\n501 524\n501 525\n501 526\n501 527\n501 528\n501 529\n501 530\n501 531\n501 532\n501 533\n501 534\n501 535\n501 536\n501 537\n501 538\n501 539\n501 540", "solution(stdin) == expected", "solution(\"\"\"5 5 6\n5 5\n3 1\n3 4\n3 5\n1 2\n1 4\n1 5\"\"\") == \"\"\"5 5 5 4 4 3\"\"\"\n\n# check performance\nassert solution(\"\"\"1000 1000 10000\n568 477\n467 565\n966 3\n834 421\n803 159\n798 466\n699 767\n152 854\n759 41\n414 643\n977 629\n117 241\n689 183\n724 837\n185 881\n876 540\n318 905\n807 809\n954 622\n984 898\n960 665\n751 585\n684 628\n750 93\n658 958\n380 364\n635 756\n917 508\n329 963\n891 559\n739 70\n889 835\n764 962\n431 804\n929 878\n852 952\n434 894\n505 261\n300 447\n487 616\n877 592\n510 91\n912 515\n865 6\n661 325\n891 612\n621 573\n237 261\n786 399\n230 547\n887 906\n838 167\n468 907\n995 231\n732 933\n812 836\n297 576\n680 843\n973 514\n486 872\n420 524\n647 840", "solution(\"\"\"\n5 3 3\n2 1\n1 2\n3 3\n\"\"\") == \"\"\"\n7\n1\n0\n\"\"\"\nassert solution(\"\"\"\n5 4 4\n2 3\n3 4\n5 4\n3 3\n\"\"\") == \"\"\"\n9\n8\n4\n2\n\"\"\"\nassert solution(\"\"\"\n5 4 4\n5 4\n4 4\n4 5\n5 5\n\"\"\") == \"\"\"\n9\n8\n4\n2\n\"\"\"\nassert solution(\"\"\"\n5 4 4\n2 3\n3 4\n5 4\n3 3\n\"\"\") == \"\"\"\n9\n8\n4\n2\n\"\"\"\nassert solution(\"\"\"\n5 4 4\n5 4\n4 4\n4 5\n5 5\n\"\"\") == \"\"\"\n9\n8\n4\n2\n\"\"\"\nassert solution(\"\"\"\n5 4 4\n5 4\n4 4\n4 5\n5 5\n\"\"\") == \"\"\"\n9\n8\n4\n2\n\"\"\"\nassert solution(\"\"\"\n5 4 4\n5 4\n4 4\n4 5\n5 5\n\"\"\") == \"\"\"\n9\n8\n4\n2\n\"\"\"\nassert solution(\"\"\"\n5 4 4\n5 4\n4 4\n4 5\n5 5\n\"\"\") == \"\"\"\n9\n8\n4\n2\n\"\"\"\nassert solution(\"\"\"\n5 4 4\n5 4\n4 4\n4 5\n", "solution(\"\"\"\n3 4 6\n1 1\n1 2\n1 3\n1 4\n2 1\n2 2\n\"\"\") == \"\"\"\n6\n4\n2\n2\n4\n2\n\"\"\"\n\nassert solution(\"\"\"\n2 3 2\n1 1\n2 2\n\"\"\") == \"\"\"\n8\n8\n\"\"\"\n\nassert solution(\"\"\"\n5 4 5\n3 2\n3 1\n3 2\n3 1\n3 2\n\"\"\") == \"\"\"\n36\n36\n36\n36\n36\n\"\"\"\n\nassert solution(\"\"\"\n3 3 3\n2 2\n2 3\n3 3\n\"\"\") == \"\"\"\n7\n5\n5\n\"\"\"\n\nassert solution(\"\"\"\n1 1 1\n1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n4 5 5\n4 1\n4 2\n4 3\n4 4\n4 5\n\"\"\") == \"\"\"\n6\n4\n4\n4\n4\n\"\"\"\n\nassert solution(\"\"\"\n3 3 3\n2 2\n2 3\n3 3\n\"\"\") == \"\"\"\n7\n5\n5\n\"\"\"\n\nassert solution(\"\"\"\n3 3 6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n\"\"\") == \"\"\"\n8\n8\n8\n8\n8\n8\n\"\"\"\n\nassert solution(\"\"\"\n1 2 2\n1", "solution(stdin) == stdout\n \n# show that the solution works for the given test\nprint(solution(stdin))", "solution('''\n5 5 5\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '''\n1\n1\n1\n1\n1\n'''\n\nassert solution('''\n5 5 4\n1 1\n1 2\n1 3\n1 4\n''') == '''\n1\n1\n1\n1\n'''\n\nassert solution('''\n5 5 3\n1 1\n2 1\n3 1\n''') == '''\n1\n1\n1\n'''\n\nassert solution('''\n5 5 5\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '''\n1\n2\n2\n2\n2\n'''\n\nassert solution('''\n5 5 4\n1 1\n2 2\n3 3\n4 4\n''') == '''\n1\n2\n2\n2\n'''\n\nassert solution('''\n5 5 4\n1 1\n2 2\n3 3\n5 5\n''') == '''\n1\n2\n2\n3\n'''\n\nassert solution('''\n5 5 4\n1 1\n2 2\n3 3\n5 4\n''') == '''\n1\n2\n2\n2\n'''\n\nassert solution('''\n5 5 4\n1 1\n2 2\n", "solution(r'''\n4 4 6\n1 1\n2 1\n2 3\n2 3\n2 3\n1 1\n''') == r'''\n1\n1\n0\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n6 5 12\n6 3\n2 1\n2 3\n2 2\n1 4\n1 3\n2 3\n3 2\n1 1\n1 5\n3 4\n3 2\n''') == r'''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n2\n2\n'''", "solution('''\n''') == '''\n'''\n\n# check the efficiency of solution\nimport random\nimport time\nimport string\n\nN = 1000\nM = 1000\nQ = 10000\n\nlines = [\n    f'{N} {M} {Q}\\n',\n]\n\nfor q in range(Q):\n    x = random.randint(1, N)\n    y = random.randint(1, M)\n    lines.append(f'{x} {y}\\n')\n\ns = ''.join(lines)\n\nstart = time.time()\nresult = solution(s)\nend = time.time()\nprint(f'solution({N}x{M}x{Q}) exec time = {end - start}')\nprint('*' * 40)", "solution('''\n5 6 5\n1 1\n3 2\n3 3\n3 5\n5 3\n''') == '''\n10\n12\n14\n14\n12\n'''", "solution('''\n2 3 3\n1 1\n2 1\n1 2\n''') == '''\n1\n1\n1\n'''\nassert solution('''\n2 3 3\n1 1\n2 1\n2 2\n''') == '''\n1\n1\n2\n'''\nassert solution('''\n2 3 3\n1 1\n2 1\n2 3\n''') == '''\n1\n2\n2\n'''\nassert solution('''\n2 3 3\n1 1\n2 1\n1 2\n''') == '''\n1\n1\n1\n'''\nassert solution('''\n3 3 3\n1 1\n2 1\n3 1\n''') == '''\n2\n2\n2\n'''\nassert solution('''\n3 3 3\n1 1\n2 1\n3 1\n''') == '''\n2\n2\n2\n'''\nassert solution('''\n3 3 3\n1 1\n2 1\n3 1\n''') == '''\n2\n2\n2\n'''\nassert solution('''\n3 3 3\n1 1\n2 1\n3 1\n''') == '''\n2\n2\n2\n'''\nassert solution('''\n3 3 3\n1 1\n2 1\n3 1\n''') == '''\n2\n2\n", "solution('''\n5 7 3\n1 3\n2 3\n2 4\n''') == '''\n0\n0\n0\n'''\nassert solution('''\n5 7 3\n1 4\n3 2\n3 5\n''') == '''\n0\n0\n0\n'''\nassert solution('''\n2 3 3\n1 2\n2 2\n1 3\n''') == '''\n1\n1\n1\n'''\nassert solution('''\n3 4 4\n1 1\n1 2\n1 3\n1 4\n''') == '''\n2\n1\n1\n1\n'''\nassert solution('''\n5 5 10\n1 2\n1 5\n2 3\n2 5\n3 3\n3 4\n4 1\n4 3\n4 5\n5 1\n''') == '''\n4\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\nassert solution('''\n3 3 10\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n1 1\n''') == '''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n'''\nassert solution('''\n2 3 5\n1 1\n1 2\n1 3\n2 1\n", "solution(\"\"\"\n\n\"\"\") == \"\"", "solution(sample_input) == sample_output", "solution('''\n4 4 2\n1 1\n2 2\n''') == '''\n6\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3 3\n1 2\n2 1\n1 3\n''') == '''\n2\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 2\n1 1\n1 1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 1\n1 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2 1\n1 1\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2 2\n1 1\n2 2\n''') == '''\n3\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4 1\n1 1\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3 3\n1 1\n2 2\n1 3\n''') == '''\n3\n5\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 2\n", "solution('''\n4 5 4\n2 3\n2 5\n4 3\n4 5\n''') == '''\n1\n0\n1\n0\n'''\n\n# test the performance of solution\nfrom utils import run_test_solution_time\n\nprint('Running tests')\nrun_test_solution_time(solution)", "solution('''\n5 7 3\n2 3\n3 5\n5 7\n''') == '''\n3\n6\n1\n'''\n\n# test solution\nimport os\nimport time\n\ndef run_sample(sample: str, expected: str) -> bool:\n    start = time.time()\n    result = solution(sample)\n    end = time.time()\n    if os.environ.get('TEST_DEBUG', False):\n        print(f'{end - start:.3f}s to execute')\n    return result == expected\n\nassert run_sample('''\n5 7 3\n2 3\n3 5\n5 7\n''', '''\n3\n6\n1\n''')\n\nassert run_sample('''\n4 4 1\n1 1\n''', '''\n4\n''')\n\nassert run_sample('''\n6 6 2\n6 5\n5 3\n''', '''\n36\n12\n''')\n\nassert run_sample('''\n5 7 4\n2 3\n3 5\n5 7\n3 5\n''', '''\n3\n6\n1\n6\n''')\n\nassert run_sample('''\n5 7 3\n2 3\n5 7\n3 5\n''', '''\n3\n1\n6\n''')\n\nassert", "solution(example_input) == example_output\n\n# check the validity of solution\nassert solution(random_input) == random_output\n\n# check the performance of solution\nsolution(large_input)", "solution('''\n5 5 5\n1 1\n2 2\n2 3\n4 4\n5 5\n''') == '''\n10\n9\n8\n6\n4\n'''\nassert solution('''\n5 5 10\n1 1\n2 2\n3 1\n1 2\n3 2\n3 3\n2 3\n1 3\n2 1\n3 1\n''') == '''\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n'''\n#\nassert solution('''\n1 1 1\n1 1\n''') == '''\n1\n'''\nassert solution('''\n1 1 3\n1 1\n1 1\n1 1\n''') == '''\n1\n1\n1\n'''\nassert solution('''\n1 5 5\n1 1\n1 3\n1 5\n1 1\n1 5\n''') == '''\n3\n3\n3\n3\n3\n'''\nassert solution('''\n5 1 5\n5 1\n5 1\n5 1\n5 1\n5 1\n''') == '''\n3\n3\n3\n3\n3\n'''\nassert solution('''\n10 10 10\n7 2\n8 2\n9 2\n10 2\n10 3\n9 3\n8 3\n7 3\n7 4\n8 4\n", "solution(\n    '''\n    5 5 10\n    1 1\n    1 3\n    3 3\n    4 1\n    2 3\n    3 5\n    1 1\n    3 3\n    3 3\n    1 1\n    '''\n) == '''\n5\n5\n6\n7\n6\n8\n6\n7\n6\n5\n'''\n\n# check the correctness of solution\nassert solution(\n    '''\n    10 9 100\n    1 1\n    9 1\n    8 2\n    9 2\n    10 2\n    9 3\n    10 3\n    9 4\n    10 4\n    9 5\n    10 5\n    9 6\n    10 6\n    9 7\n    8 8\n    7 8\n    6 8\n    7 9\n    6 9\n    7 1\n    6 1\n    7 2\n    6 2\n    7 3\n    6 3\n    7 4\n    6 4\n    7 5\n    6 5\n    7 6\n    6 6\n    7 7\n    6 7\n    6 8\n    5 8\n    4 8\n    3 8\n    2 8\n    1 8\n    2 9\n    1 9\n    2 1\n    1 1\n    2 2\n    1 2\n    2 3\n    1 3\n    2 4\n    1 4", "solution('''2 3 3\n1 1\n2 1\n1 2''') == '''2\n2\n1'''\n\n# check performance of solution\nimport timeit\nfrom random import randint, seed\nseed(123)\n\ndef solution_slow(stdin: str) -> str:\n    '''\n    The slow solution which generates all paths and compares them.\n    '''\n    n, m, q = map(int, stdin.split()[:3])\n    matrix = [[0] * m for _ in range(n)]\n    for x, y in map(lambda s: map(int, s.split()), stdin.split()[3:]):\n        matrix[x - 1][y - 1] ^= 1\n    count = 0\n    answer = []\n    def is_free(x, y):\n        return matrix[x][y] == 0\n\n    def is_ok(path):\n        return is_free(path[-1][0], path[-1][1]) and len(path) > 1 and (path[-1][0] - path[-2][0] + path[-1][1] - path[-2][1]) == 1\n\n    def find_paths(x, y, path):\n        if is_ok(path):\n            non", "solution(\"\"\"\n4 4 4\n2 2\n2 3\n4 3\n4 4\n\"\"\") == \"\"\"\n0\n0\n1\n2\n\"\"\"\n# check if it's fast enough\nimport timeit\ntest_inputs = []\ntest_inputs.append(\"\"\"\n3 4 5\n1 1\n1 2\n1 3\n2 3\n2 4\n\"\"\")\ntest_inputs.append(\"\"\"\n3 4 5\n1 1\n1 2\n1 3\n2 3\n2 4\n\"\"\")\ntest_inputs.append(\"\"\"\n3 4 5\n1 1\n1 2\n1 3\n2 3\n2 4\n\"\"\")\ntest_inputs.append(\"\"\"\n3 4 5\n1 1\n1 2\n1 3\n2 3\n2 4\n\"\"\")\ntest_inputs.append(\"\"\"\n3 4 5\n1 1\n1 2\n1 3\n2 3\n2 4\n\"\"\")\ntest_inputs.append(\"\"\"\n3 4 5\n1 1\n1 2\n1 3\n2 3\n2 4\n\"\"\")\ntest_inputs.append(\"\"\"\n3 4 5\n1 1\n1 2\n1 3\n2 3\n2 4\n\"\"\")\ntest_inputs.append(\"\"\"\n3 4 5\n1 1\n1 2\n1 3\n2 3\n2 4\n\"\"", "solution(\n'''\n5 5 7\n1 1\n1 2\n1 3\n2 1\n2 2\n3 1\n3 2\n''') == '''\n0\n0\n0\n1\n1\n2\n3\n'''\n\n# test the solution\n_, _, _ = sys.stdin, sys.stdout, sys.stderr\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\n#sys.stderr = open('debug.txt', 'w')\nimport timeit\n\nstart = timeit.default_timer()\n\n# call the solution function\nprint(solution(sys.stdin.read()))\n\nsys.stdin.close()\nsys.stdout.close()\n#sys.stderr.close()\n\nend = timeit.default_timer()\nprint(end - start)", "solution('''\n5 5 2\n1 3\n2 3\n''') == '''\n6\n5\n'''\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')", "solution(\"\"\"\n6 5 5\n1 1\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"\"\"\n0\n1\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n3 3 7\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n\"\"\") == \"\"\"\n0\n1\n1\n1\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n1000 1000 6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n\"\"\") == \"\"\"\n0\n0\n0\n0\n0\n0\n\"\"\"\n\nassert solution(\"\"\"\n2 3 4\n1 1\n1 2\n1 3\n2 3\n\"\"\") == \"\"\"\n0\n0\n0\n1\n\"\"\"\n\nassert solution(\"\"\"\n9 7 9\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 7\n3 7\n\"\"\") == \"\"\"\n0\n1\n1\n1\n1\n1\n1\n1\n1\n\"\"\"", "solution('''\n3 3 5\n1 1\n1 2\n1 3\n2 1\n2 2\n''') == '''\n3\n3\n3\n3\n3\n'''\n\n# test cases\nassert solution('''\n3 3 1\n1 1\n''') == '''\n3\n'''\n\nassert solution('''\n3 3 2\n1 1\n1 2\n''') == '''\n3\n3\n'''\n\nassert solution('''\n3 3 3\n1 1\n1 2\n1 3\n''') == '''\n3\n3\n3\n'''\n\nassert solution('''\n3 3 3\n1 1\n2 1\n2 2\n''') == '''\n3\n3\n3\n'''\n\nassert solution('''\n3 3 4\n1 1\n1 2\n1 3\n2 1\n''') == '''\n3\n3\n3\n3\n'''\n\nassert solution('''\n3 3 5\n1 1\n1 2\n1 3\n2 1\n2 2\n''') == '''\n3\n3\n3\n3\n3\n'''\n\nassert solution('''\n3 3 7\n1 1\n1 2\n1 3\n2 1\n2 2\n3 1\n3 2\n''') == '''\n3\n3\n3", "solution('''\n1 1 3\n1 1\n1 1\n1 1\n''') == '''\n1\n1\n1\n'''\n\nassert solution('''\n1 2 5\n1 1\n1 2\n1 1\n1 2\n1 1\n''') == '''\n1\n2\n2\n2\n2\n'''\n\nassert solution('''\n2 2 4\n1 1\n1 2\n2 1\n2 2\n''') == '''\n1\n1\n1\n1\n'''\n\nassert solution('''\n2 3 4\n1 1\n1 2\n1 3\n2 3\n''') == '''\n1\n1\n1\n2\n'''\n\nassert solution('''\n3 3 8\n1 1\n2 2\n3 3\n1 2\n2 1\n1 3\n2 3\n3 2\n''') == '''\n1\n1\n1\n1\n1\n1\n1\n2\n'''", "solution(\n'''\n3 4 5\n1 1\n1 2\n1 3\n1 4\n2 2\n'''\n) == '''\n0\n0\n0\n0\n2\n'''\n\nassert solution(\n'''\n5 5 8\n1 1\n1 2\n2 1\n2 3\n2 5\n3 2\n3 3\n3 4\n'''\n) == '''\n0\n0\n1\n2\n3\n3\n3\n3\n'''\n\nassert solution(\n'''\n3 2 4\n1 1\n1 2\n2 1\n2 2\n'''\n) == '''\n0\n0\n0\n4\n'''", "solution('''\n3 3 3\n2 1\n1 3\n2 3\n''') == '''\n1\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n4 5 4\n1 4\n4 3\n2 3\n2 4\n''') == '''\n1\n0\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3 6 5\n1 1\n3 1\n2 3\n3 2\n2 4\n''') == '''\n1\n1\n1\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 2\n1 1\n1 1\n''') == '''\n1\n0\n'''\n\n# submit solution to the judge\nimport sys\nif __name__ == '__main__':\n    solution(sys.stdin.read())", "solution(stdin) == stdout\nassert solution(stdin) == stdout\nassert solution(stdin) == stdout", "solution(stdin) == stdout", "solution(stdin) == stdout", "solution('''\n    2 2 4\n    1 1\n    1 2\n    2 1\n    2 2\n''') == '''\n    4\n    5\n    6\n    5\n'''\n\n# check the correctness of solution\nassert solution('''\n    3 3 3\n    1 1\n    2 2\n    3 3\n''') == '''\n    4\n    5\n    6\n'''\n\n# check the correctness of solution\nassert solution('''\n    3 3 3\n    1 1\n    2 2\n    3 3\n''') == '''\n    4\n    5\n    6\n'''\n\n# check the correctness of solution\nassert solution('''\n    2 3 5\n    1 1\n    1 3\n    2 1\n    2 2\n    2 3\n''') == '''\n    4\n    5\n    6\n    7\n    8\n'''\n\n# check the correctness of solution\nassert solution('''\n    2 2 6\n    1 1\n    1 2\n    2 1\n    2 2\n    1 1\n    1 2\n''') == '''\n    4\n    5\n    6\n    5\n    4\n    5\n'''\n\n# check the correctness of solution\nassert solution('''\n    2 2 2\n    1 1", "(solution('''\n3 3 4\n1 1\n2 2\n1 2\n3 1\n''') == '''\n1\n2\n2\n2\n''')\n\n# check the correctness of solution\nassert (solution('''\n3 3 4\n1 1\n1 1\n1 1\n1 1\n''') == '''\n1\n1\n1\n1\n''')\n\n# check the correctness of solution\nassert (solution('''\n4 4 8\n1 1\n1 2\n2 1\n2 2\n1 3\n2 3\n3 1\n3 2\n''') == '''\n1\n2\n2\n4\n4\n4\n4\n4\n''')\n\n# check the correctness of solution\nassert (solution('''\n3 3 10\n1 1\n2 2\n3 3\n2 1\n3 2\n1 3\n1 2\n2 3\n3 1\n1 1\n''') == '''\n1\n2\n3\n3\n3\n3\n3\n3\n3\n3\n''')\n\n# check the correctness of solution\nassert (solution('''\n2 2 20\n1 1\n1 2\n2 1\n2 2\n1 1\n1 2\n2 1\n2 2\n1 1\n1 2\n2 1\n2 2\n1 1\n1 2\n2", "solution(\"\"\"\n5 4 9\n2 1\n4 1\n4 2\n4 3\n4 4\n1 2\n3 2\n3 3\n3 4\n\"\"\") == \"\"\"\n1\n1\n1\n1\n1\n1\n0\n0\n0\n\"\"\""], "finish_reason": ["length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "length", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop"], "sum_logprob": [-139.082126007978, -23.507627324999998, -88.61588586661402, -125.49127366792798, -101.58379680494998, -50.78024880174798, -71.64288005714091, -50.13474391420002, -69.87980663280605, -100.89375985735296, -63.40289968528303, -87.11816861723808, -7.7078922259999985, -30.520986186072, -28.813066507160002, -53.33073393084303, -8.867698203, -906.1507410499628, -86.184135568444, -132.03121073181603, -30.0721374949, -56.72873559941386, -95.32803349147498, -87.17620262314, -36.151674610300006, -52.10554430518839, -121.76963094128934, -9.023334613, -6.844372216859999, -80.47381079090664, -54.65093868311201, -141.57215830434504, -27.78482199339999, -119.16316743614583, -125.76053517347103, -149.89814730810608, -74.02043952289202, -93.26782994546002, -28.142691768839995, -75.58866296100997, -50.704612311598304, -54.33046374453699, -66.46704911305997, -88.86240854483496, -14.23220840776, -5.7067952989999995, -5.703301768999999, -70.29022629054998, -80.58831084651197, -37.950585772], "mean_logprob": [-0.46360708669326, -0.940305093, -0.579188796513817, -0.497981244714, -0.3386126560165, -0.5770482818380455, -0.23880960019047, -0.6266842989275, -0.7058566326546061, -0.33631253285784335, -0.21134299895094333, -0.29039389539079336, -0.8564324695555555, -0.10173662062024, -0.45735026201841267, -0.17776911310281, -1.108462275375, -3.0205024701665435, -0.2872804518948133, -0.44010403577272, -0.9700689514483871, -0.18909578533137966, -0.6858131905861511, -0.47637269192972675, -0.840736618844186, -0.17368514768396134, -0.40589876980429834, -0.9023334613, -0.6222156560781819, -0.268246035969689, -0.691784033963443, -0.4719071943478167, -0.5911664253914893, -0.397210558120486, -0.41920178391157, -0.49966049102702, -0.24673479840964, -0.44413252354980953, -0.5743406483436735, -0.31759942420592435, -0.16901537437199432, -0.24922231075475687, -0.437283217849079, -0.4399129135882921, -0.4907658071641379, -0.6340883665555556, -0.6337001965555555, -0.23430075430183334, -0.26862770282170667, -0.6325097628666667]}
{"prompt": "'''\nMonocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(example_data) == \"1\"\n\n# get the input data from local file or from stdin\nif len(sys.argv) > 1:\n    with open(sys.argv[1], \"r\") as f:\n        input_data = f.read()\nelse:\n    input_data = sys.stdin.read()\n\n# run the solution\nprint(solution(input_data))", "solution(\"\"\"\n3\n3\n3 2 1\n3\n1 2 1\n4\n1 2 3 3\n\"\"\") == \"\"\"\n2\n2\n4\n\"\"\"", "solution('''\n2\n6\n2 1 3 3 3 3\n5\n1 1 2 2 3\n''') == '''\n3\n4\n'''", "solution(r'''\n1\n7\n1 2 3 4 5 6 7\n''') == r'''\n6\n'''\n\nassert solution(r'''\n1\n7\n1 2 3 4 5 6 7\n''') == r'''\n6\n'''\n\n# cost time: 0.1s (max 1000s)\n# score: 10/10\n# 2 tests\n# 2 submissions", "(solution(stdin=\"1\\n5\\n2 3 2 3 3\") == \"0\")\nassert (solution(stdin=\"1\\n3\\n1 2 3\") == \"3\")\nassert (solution(stdin=\"2\\n3\\n1 2 3\\n3\\n2 1 3\") == \"3\\n1\")\nassert (solution(stdin=\"1\\n5\\n3 5 1 5 2\") == \"8\")\nassert (solution(stdin=\"1\\n6\\n1 1 1 1 1 1\") == \"15\")\nassert (solution(stdin=\"1\\n6\\n1 2 3 4 5 6\") == \"0\")\nassert (solution(stdin=\"1\\n8\\n1 2 3 4 5 6 7 8\") == \"0\")\nassert (solution(stdin=\"1\\n8\\n1 2 3 4 5 6 7 8\") == \"0\")\nassert (solution(stdin=\"1\\n8\\n1 2 3 4 5 6 7 8\") == \"0\")\nassert (solution(stdin=\"1\\n8\\n1 2 3 4 5 6 7 8\") == \"0\")\nassert (solution(stdin=\"1\\n8\\n1 2 3 4 5 6 7 8\") == \"0\")\nassert (", "solution('''\n1\n4\n1 2 3 4\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 2 3\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n2 3\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 4 5\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n1 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 4 8\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n2 3 5\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 1", "solution('''5\n8\n5 4 2 6 3 5 3 3\n7\n1 1 1 1 1 1 1\n7\n3 2 1 1 1 4 3\n2\n1 1\n1\n1''') == '7\\n6\\n8\\n0\\n0'", "solution(r'''\n1\n5\n1 2 2 2 1\n''') == r'''\n3\n'''\n\n# make stress testing\nimport random\nwhile True:\n    n = random.randint(3, 200000)\n    a = [random.randint(0, 1000000000) for _ in range(n)]\n    assert solution(f'1\\n{n}\\n{\" \".join(map(str, a))}') == f'{solution(f\"1\\n{n}\\n{' '.join(map(str, a))}\")}'\n    print('Accepted')", "solution(read_input('./input.txt')) == read_output('./output.txt')", "str(solution('''...''')) == '...'\nassert str(solution('''...''')) == '...'\nassert str(solution('''...''')) == '...'", "solution(\"1\\n5\\n1 2 3 4 5\") == \"6\"\n\n# get input from stdin\nstdin = sys.stdin.read()\n\n# output the result\nprint(solution(stdin))", "solution('''\n2\n5\n0 2 1 1 1\n5\n1 2 3 1 1\n''') == '''\n5\n5\n'''", "solution(\"\"\"\n2\n4\n1 2 3 4\n7\n1 1 2 3 4 5 6\n\"\"\") == \"\"\"\n4\n9\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\n45\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5\n5 5 5 5 5\n5\n5 5 5 5 3\n5\n5 5 5 3 3\n5\n5 5 3 3 3\n5\n5 3 3 3 3\n\"\"\") == \"\"\"\n0\n0\n10\n10\n20\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n6\n1 1 1 1 1 1\n5\n1 1 1 1 1\n\"\"\") == \"\"\"\n15\n6\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n10\n0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n45\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n4\n1 1 1 0\n\"\"\") == \"\"\"\n6\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n10\n1 2 3 4 5 6 7 8 9 10\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\n", "solution(\n    r'''\n3\n3\n2 2 2\n3\n0 1 1\n3\n1 2 4\n    '''\n) == r'''\n3\n3\n0\n    ''', 'Test1'\n\nassert solution(\n    r'''\n1\n7\n2 3 0 4 0 0 1\n    '''\n) == r'''\n11\n    ''', 'Test2'\n\nassert solution(\n    r'''\n4\n3\n1 2 3\n3\n3 2 1\n3\n3 3 3\n3\n2 3 3\n    '''\n) == r'''\n0\n0\n1\n2\n    ''', 'Test3'\n\n# this could be improved using a sliding window approach\n# (https://stackoverflow.com/questions/18539042/sliding-window-minimum-maximum-average)\n# from scipy.special import comb\n\n# def solve(data: list):\n#     n = len(data)\n#     mean = sum(data) / n\n#     # data_sum = sum(data)\n#     # print(mean)\n#     counter = 0\n#     for i in range(n):\n#         for j in range(i + 1, n):\n#             temp_mean = (sum(data) -", "solution('''\n2\n5\n2 3 3 5 5\n5\n1 2 3 4 5\n''') == '''\n1\n5\n'''", "solution(sample_input) == '''\n2\n2\n1 1\n1\n\n1\n6\n1 2 3 4 5 6\n6\n'''\n\n# get the input\nstdin = \"\"\nfor line in sys.stdin:\n    stdin += line\n\n# print solution\nprint(solution(stdin))", "solution('''\n4\n4\n2 3 3 3\n4\n2 2 2 2\n3\n1 2 2\n6\n1 2 3 4 5 6\n''') == '''\n4\n0\n1\n9\n'''", "solution('''\n1\n5\n1 1 1 1 1\n''') == '10'\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '20'\nassert solution('''\n1\n5\n0 0 0 0 0\n''') == '10'\nassert solution('''\n1\n5\n0 0 0 1 0\n''') == '0'\nassert solution('''\n1\n5\n1 0 1 0 1\n''') == '4'\nassert solution('''\n1\n10\n9 4 6 5 9 7 4 1 4 6\n''') == '72'\nassert solution('''\n1\n10\n1 0 1 1 1 0 1 1 1 1\n''') == '72'\nassert solution('''\n1\n10\n1 0 0 0 0 0 0 0 0 0\n''') == '45'\nassert solution('''\n1\n10\n1 0 1 1 1 1 1 1 1 1\n''') == '72'\nassert solution('''\n1\n10\n10 10 10 10 10 10 10 10 10 10\n''') == '180'\nassert solution('''\n1\n10\n10 9 8 7 6 5 4 3 2 1\n''') == '0'\nassert solution('''\n1\n10\n4 4 4 4 4 4 4 4", "solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n0\n'''\n\nassert solution('''\n1\n3\n2 3 3\n''') == '''\n3\n'''\n\nassert solution('''\n1\n5\n2 3 3 3 2\n''') == '''\n12\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n2\n'''\n\nassert solution('''\n1\n5\n2 3 4 5 6\n''') == '''\n4\n'''\n\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n0\n'''\n\n# submit on Codeforces\nimport os\nimport requests\n\n\ndef submit(source: str, task: str, test: str) -> None:\n    data = {\n        'action': 'submitSolutionFormSubmitted',\n        'source': source,\n        'sourceFile': '',\n        'langId': '42',\n        'problemCode': task,\n        'testId': test,\n        'captcha': '',\n    }\n    url = 'https://codeforces.com/problemset/submit'\n    headers = {\n        'User-Agent': '", "solution('''\n1\n6\n1 2 3 4 5 6\n''') == '3'\nassert solution('''\n1\n6\n1 1 1 1 1 1\n''') == '15'\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '3'\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '10'\nassert solution('''\n1\n8\n2 2 2 2 2 2 2 2\n''') == '28'\nassert solution('''\n1\n5\n0 0 0 0 0\n''') == '10'\nassert solution('''\n1\n8\n1 2 3 4 5 6 7 8\n''') == '0'\nassert solution('''\n1\n9\n1 2 3 4 5 6 7 8 9\n''') == '1'\nassert solution('''\n1\n9\n2 3 3 3 3 3 3 3 3\n''') == '27'\nassert solution('''\n1\n8\n1 2 3 4 5 6 7 8\n''') == '0'\nassert solution('''\n1\n7\n1 2 3 4 5 6 7\n''') == '0'\nassert solution('''\n1\n6\n1 1 1 1 1 1\n''') == '15'\nassert solution", "solution(\"\"\"4\n3\n1 2 3\n3\n1 1 1\n3\n1 1 2\n3\n1 1 3\"\"\") == \"\"\"3\n0\n2\n2\"\"\"", "solution('''\n3\n3\n1 2 3\n5\n1 1 1 1 1\n5\n1 1 2 2 3\n''') == '''\n1\n2\n8\n'''\n\n# run the solution\nfrom fileinput import input\nfrom solution import solution\nprint(solution(input()))", "solution(\"\"\"4\n4\n1 2 1 2\n5\n1 1 2 2 3\n5\n1 1 2 2 3\n3\n2 3 2\"\"\") == \"3\\n0\\n3\\n1\", \"Testcase #1 failed\"\n\nprint(\"Test Passed!\")", "(solution(stdin=\"1\\n4\\n4 4 1 1\") == \"2\")\nassert (solution(stdin=\"1\\n3\\n1 1 1\") == \"1\")\nassert (solution(stdin=\"1\\n3\\n1 2 1\") == \"0\")\nassert (solution(stdin=\"1\\n3\\n3 2 1\") == \"0\")\nassert (solution(stdin=\"1\\n3\\n1 1 2\") == \"1\")\nassert (solution(stdin=\"1\\n3\\n1 2 2\") == \"0\")\nassert (solution(stdin=\"1\\n3\\n2 1 2\") == \"0\")\nassert (solution(stdin=\"1\\n3\\n2 2 1\") == \"0\")\nassert (solution(stdin=\"1\\n3\\n2 2 2\") == \"0\")\nassert (solution(stdin=\"1\\n5\\n1 2 3 1 2\") == \"0\")\nassert (solution(stdin=\"1\\n5\\n2 2 3 1 2\") == \"1\")\nassert (solution(stdin=\"1\\n5\\n2 2 3 1 2\") == \"1\")\nassert (solution(stdin=\"1\\n5\\n2 2 3 2", "\"1\\n\" == solution(\"2\\n5\\n2 3 3 2 2\\n5\\n1 2 2 1 1\")\nassert \"100\\n\" == solution(\"1\\n5\\n0 0 0 0 0\")\nassert \"5\\n\" == solution(\"1\\n5\\n1 1 1 1 1\")\nassert \"1\\n\" == solution(\"1\\n5\\n3 3 3 3 3\")\nassert \"0\\n\" == solution(\"1\\n4\\n1 2 3 4\")\nassert \"6\\n\" == solution(\"1\\n4\\n1 2 3 3\")\nassert \"4\\n\" == solution(\"1\\n4\\n1 2 3 3\")\nassert \"4\\n\" == solution(\"1\\n4\\n1 2 3 3\")\nassert \"2\\n\" == solution(\"1\\n4\\n1 2 2 2\")\nassert \"5\\n\" == solution(\"1\\n5\\n1 2 2 2 2\")\nassert \"9\\n\" == solution(\"1\\n5\\n2 3 3 3 3\")\nassert \"1\\n\" == solution(\"1\\n5\\n0 0 0 0 1\")\nassert \"0\\n\" == solution(\"1\\n5\\n2 3 3 3 4\")\nassert \"1\\n\" == solution(\"1", "solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert", "solution('''1\n5\n1 1 3 3 3''') == '2'\nassert solution('''2\n4\n2 2 2 2\n5\n1 1 1 1 2''') == '0\\n1'\nassert solution('''3\n4\n7 7 7 7\n4\n7 7 7 8\n4\n7 7 8 8''') == '0\\n1\\n2'\nassert solution('''4\n7\n1 2 2 2 2 2 2\n7\n1 2 2 2 2 2 3\n7\n1 2 2 2 2 3 3\n7\n1 2 2 2 3 3 3''') == '4\\n10\\n21\\n36'\nassert solution('''1\n3\n1 3 4''') == '1'\nassert solution('''1\n3\n1 2 4''') == '0'\nassert solution('''1\n1\n1''') == '0'\nassert solution('''1\n6\n0 0 0 0 0 0''') == '6'\nassert solution('''1\n5\n5 5 5 5 5''') == '0'\nassert solution('''1\n2\n1 2''') == '0'\nassert solution('''1\n3\n1 1 1''') == '0'\nassert solution('''1\n4\n1 1 1", "solution(\n    '''\n    1\n    5\n    1 2 3 4 5\n    '''\n) == '''\n1\n'''\n\n# check the correctness of solution\nassert solution(\n    '''\n    1\n    7\n    2 2 2 2 2 2 2\n    '''\n) == '''\n1\n'''", "solution(stdin) == expected_answer", "solution('''3\n3\n2 1 3\n5\n1 1 2 3 5\n8\n1 2 1 2 1 2 1 2\n''') == '''2\n7\n28\n'''", "solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"2\n5\n2 4 3 6 3\n5\n2 4 3 6 3\"\"\") == \"\"\"6\n0\"\"\"\n\n# get task input\nwith open(\"input.txt\", \"r\") as fin:\n    for i, line in enumerate(fin):\n        pass\n\n# submit the solution\nprint(solution(INPUT))", "solution(r'''\n1\n3\n1 2 3\n''') == r'''\n3\n'''\nassert solution(r'''\n1\n3\n1 1 1\n''') == r'''\n3\n'''\nassert solution(r'''\n1\n5\n1 2 3 4 5\n''') == r'''\n0\n'''\nassert solution(r'''\n1\n5\n0 0 0 0 0\n''') == r'''\n10\n'''\nassert solution(r'''\n2\n3\n1 2 3\n5\n5 5 5 5 5\n''') == r'''\n3\n10\n'''", "solution('''\n''') == '''\n'''\n\n# get inputs for running\ninputs = []\nn = int(input())\nfor i in range(n):\n    inputs.append(input())\n\n# run the solution\nresults = []\nfor i in inputs:\n    results.append(solution(i))\n\n# print out the results\nfor i in results:\n    print(i)", "solution(stdin) == expected\n\n \n'''\n# Solution to the problem:\n\ndef solution(stdin):\n    def get_mean(numbers):\n        return sum(numbers) / len(numbers)\n\n    stdin = stdin.splitlines()\n\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1].split()]\n\n    mean = get_mean(a)\n\n    left_side_mean = 0\n    right_side_mean = 0\n    left_side_cnt = 0\n    right_side_cnt = 0\n\n    for i in range(n):\n        left_side_mean += a[i]\n        right_side_mean = sum(a[i+1:])\n\n        if (left_side_mean / (i + 1)) == mean:\n            left_side_cnt += 1\n\n        if (right_side_mean / (n - i - 1)) == mean:\n            right_side_cnt += 1\n\n    return left_side_cnt * right_side_cnt\n\n'''\n\n# solved with a time complexity of O(n^2)", "solution(\"\"\"2\n3\n1 1 1\n4\n1 1 2 2\"\"\") == \"\"\"0\n2\"\"\", \"example 1\"\nassert solution(\"\"\"3\n3\n1 2 3\n3\n1 1 1\n6\n1 2 3 4 5 6\"\"\") == \"\"\"3\n0\n6\"\"\", \"example 2\"\n\n# submit the code to the judge system\ntry:\n    import subprocess\n    process = subprocess.Popen(['python3'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n    stdout, stderr = process.communicate(bytes(stdin, 'utf-8'))\n    result = stdout.decode().strip()\nexcept:\n    print(\"Unexpected error:\", sys.exc_info()[0])\nelse:\n    if stderr is not None:\n        print(\"Compiler/interpreter returned an error:\", stderr.decode().strip())\n    elif result == str(answer):\n        print(\"Yes! Test case has passed!\")\n    else:\n        print(\"No! Test with input data:\")\n        print(stdin, \"returned:\")\n        print(result, \"while answer is:\")\n        print(answer)", "solution(\"\"\"\n3\n5\n1 2 3 3 3\n5\n1 2 3 3 3\n3\n1 2 3\n\"\"\") == '''\n3\n0\n0\n'''", "solution(\"\"\"2\n4\n4 2 5 1\n4\n4 2 1 5\"\"\") == \"\"\"5\n5\"\"\"", "solution(\"\"\"3\n3\n1 2 3\n4\n0 0 0 0\n5\n1 2 3 4 5\"\"\") == \"\"\"1\n0\n10\"\"\"", "solution('''\n1\n3\n2 2 3\n''') == '0', 'test 1'\n\nassert solution('''\n1\n3\n1 2 3\n''') == '3', 'test 2'\n\nassert solution('''\n1\n3\n1 2 1\n''') == '1', 'test 3'\n\nassert solution('''\n2\n2\n2 3\n2\n1 1\n''') == '1\\n0', 'test 4'\n\nassert solution('''\n2\n3\n1 1 1\n3\n1 2 3\n''') == '6\\n0', 'test 5'\n\n# submit solution\nprint(solution(stdin=[x for x in open(0)]))", "solution('''\n1\n3\n0 0 0\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n''') == '6'\n\n# upload to judge\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\ndef upload_to_judge(file_path: str, test_case_id: str, judge_id: str) -> bool:\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    driver = webdriver.Chrome('/usr/bin/chromedriver', options=options)\n    driver.get('https://www.hackerrank.com/tests/{}/{}'.format(test_case_id, judge_id))\n    file_input = driver.find_element_by_name('source_file')\n    file_input.send_keys(file_path)\n    driver.find_element_by_xpath('//*[@id=\"upload_form\"]/input[3]').click()", "solution(input_str) == output_str", "solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1\n4\n1 1 1 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n4\n2 4 6 8\n4\n1 1 1 1\n\"\"\") == \"0\"", "solution('''1\n10\n1 2 3 4 5 6 7 8 9 10''') == '10'\n\n# check whether the answer is accepted by the judge\nimport os\nif os.path.isfile('answer_accepted'):\n    print('Accepted!')\nelse:\n    print('Check the correctness!')", "solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n5\n1 2 3", "solution(test_case1) == result1, \"Incorrect answer\"\n\n# get the input data\nwith open(\"input.txt\", \"r\") as f:\n    lines = f.readlines()\n\n# solve the problem\nanswer = solution(lines)\n\n# print the solution to stdout\nprint(answer)", "solution(\"\") == \"\", \"Testcase 0 failed\"", "solution(r'''\n3\n3\n1 2 3\n6\n1 1 1 1 1 1\n5\n1 2 3 4 5\n''') == r'''\n2\n0\n10\n'''", "solution('''\n1\n5\n1 2 3 4 5\n''') == '10'\n\n# get input\ndef get_input(source: str = __file__) -> str:\n    \"\"\"Returns input from file or stdin if filename is '-'.\"\"\"\n    return open(source.replace('.py', '.in')).read() if source.endswith('.py') else stdin\n\n# gets output using given functions or stdout if function name is '-'\ndef get_output(func, source: str = __file__) -> str:\n    \"\"\"Returns function result and stdout if function name is '-'.\"\"\"\n    return func(get_input(source)) if source.endswith('.py') else print(func(source))\n\n# get output using solution function, input from file\nget_output(solution)", "solution(\"\"\"\n3\n3\n0 1 2\n4\n0 1 2 1\n5\n1 1 1 1 1\n\"\"\") == \"\"\"\n2\n4\n0\n\"\"\"\n\n# check the performance of solution\nassert solution(\"\"\"\n100\n100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n100\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 0\n\"\"\") == \"\"\"\n4950\n4950\n\"\"\""], "finish_reason": ["stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-40.35815014312999, -27.724917365600003, -27.672351550200005, -86.12518645104, -91.88479311628703, -72.64368299938901, -68.28250831634, -54.83406962245001, -16.04129133453, -15.002818544928997, -28.13456283134, -29.458031530199996, -105.39866707048499, -223.0054899574473, -23.608891410499997, -46.627816488964996, -36.87555182546001, -125.26170182240101, -120.51552132722226, -85.31609892476867, -26.4120131181, -49.31828528200001, -61.94467693765, -80.39363238700396, -121.24720369252996, -15.678532290219993, -136.689730471149, -31.210245601487003, -10.1628652205, -37.9999793865, -7.6396292252, -67.71730173203001, -38.861603220476994, -41.20809123040002, -126.21482087463495, -103.79784223373701, -27.500138059400005, -29.784371942499995, -20.278668397600008, -65.85285960713738, -103.518446652796, -8.440793484, -32.60862646611001, -66.24567661879001, -23.535672654088987, -49.546947189950004, -12.790964549999998, -23.19939147043, -73.41176270820355, -49.38895782412994], "mean_logprob": [-0.41606340353742266, -0.729603088568421, -0.7479013932486487, -0.9361433309895653, -0.30628264372095665, -0.24214560999796333, -1.0669141924428125, -0.38889411079751773, -0.6416516533812, -0.3061799703046735, -0.5308408081384905, -0.8182786536166666, -0.35132889023495, -0.7433516331914913, -0.6558025391805555, -0.6135239011705921, -0.6957651287822642, -0.41753900607467, -0.40171840442407436, -0.28438699641589565, -0.6441954419048781, -0.7045469326, -0.9678855771507813, -0.2679787746233467, -0.40415734564176664, -0.05226177430073333, -0.45563243490383, -0.39506640001882276, -1.01628652205, -0.8444439863666666, -0.477476826575, -0.8571810345826583, -0.2625784001383581, -0.43376938137263155, -0.4623253511891392, -0.35916208385376125, -0.6395380944046511, -1.1031248867592593, -0.5632963443777778, -0.39432850064154135, -0.3450614888426533, -0.7673448621818182, -0.4658375209444286, -0.8832756882505334, -0.07845224218029667, -0.6695533404047297, -0.98392035, -0.4936040738389362, -0.3803718275036456, -0.17959621026956363]}
{"prompt": "'''\nMonocarp is playing a computer game. Now he wants to complete the first level of this game.\n\nA level is a rectangular grid of 2 rows and n columns. Monocarp controls a character, which starts in cell (1, 1) \u2014 at the intersection of the 1-st row and the 1-st column.\n\nMonocarp's character can move from one cell to another in one step if the cells are adjacent by side and/or corner. Formally, it is possible to move from cell (x_1, y_1) to cell (x_2, y_2) in one step if |x_1 - x_2| \u2264 1 and |y_1 - y_2| \u2264 1. Obviously, it is prohibited to go outside the grid.\n\nThere are traps in some cells. If Monocarp's character finds himself in such a cell, he dies, and the game ends.\n\nTo complete a level, Monocarp's character should reach cell (2, n) \u2014 at the intersection of row 2 and column n.\n\nHelp Monocarp determine if it is possible to complete the level.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then the test cases follow. Each test case consists of three lines.\n\nThe first line contains a single integer n (3 \u2264 n \u2264 100) \u2014 the number of columns.\n\nThe next two lines describe the level. The i-th of these lines describes the i-th line of the level \u2014 the line consists of the characters '0' and '1'. The character '0' corresponds to a safe cell, the character '1' corresponds to a trap cell.\n\nAdditional constraint on the input: cells (1, 1) and (2, n) are safe.\n\nOutput\n\nFor each test case, output YES if it is possible to complete the level, and NO otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["(solution(\"\"\"\n3\n3\n010\n000\n4\n1110\n0100\n5\n00000\n11111\n\"\"\") == \"\"\"\nYES\nNO\nNO\n\"\"\")", "solution(\"1\\n3\\n010\\n000\") == \"YES\"\nassert solution(\"1\\n5\\n01010\\n11111\") == \"NO\"\nassert solution(\"1\\n5\\n01000\\n01111\") == \"YES\"\nassert solution(\"1\\n5\\n01110\\n00011\") == \"YES\"\nassert solution(\"1\\n7\\n0110011\\n1101000\") == \"YES\"\nassert solution(\"1\\n3\\n010\\n010\") == \"NO\"\nassert solution(\"2\\n7\\n0110011\\n1101000\\n3\\n111\\n000\") == \"YES\\nNO\"\nassert solution(\"2\\n4\\n0100\\n0100\\n4\\n1100\\n0100\") == \"NO\\nYES\"\nassert solution(\"2\\n4\\n0100\\n0110\\n4\\n1100\\n0100\") == \"YES\\nYES\"\nassert solution(\"2\\n5\\n11110\\n11111\\n5\\n01110\\n01111\") == \"NO\\nNO\"\nassert solution(\"2\\n5\\n11110\\n11111\\n5\\n01110\\n11111\") == \"NO\\nYES\"\nassert solution(\"2\\n5\\n", "solution('''\n1\n5\n00100\n01010\n''') == '''\nYES\n'''\nassert solution('''\n1\n5\n01010\n00100\n''') == '''\nNO\n'''\nassert solution('''\n1\n5\n11111\n11111\n''') == '''\nNO\n'''\nassert solution('''\n1\n7\n1001001\n1001001\n''') == '''\nYES\n'''\nassert solution('''\n1\n7\n1001100\n1001100\n''') == '''\nNO\n'''\n\n# print(solution(sys.stdin.read()))\n\n# import random\n# n = random.randint(3, 100)\n# print(n)\n# for _ in range(2):\n#     for _ in range(n):\n#         print(random.randint(0, 1), end='')\n#     print()\n\n# 4\n# 0010\n# 0110\n# NO\n\n# 5\n# 01001\n# 01011\n# YES\n\n# 100\n# 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "solution(stdin='3\\n3\\n001\\n000\\n3\\n000\\n101\\n3\\n001\\n101') == 'YES\\nNO\\nNO'", "solution(\"\"\"\n2\n5\n01010\n10101\n5\n01010\n10111\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution(\"\"\"\n3\n3\n010\n010\n5\n01010\n01010\n5\n11111\n11111\n\"\"\") == \"\"\"\nYES\nYES\nNO\n\"\"\"\n\n# get the input\nn_cases = int(input())\ninputs = [input() for _ in range(n_cases)]\noutputs = [solution(t) for t in inputs]\n\n# print the output\nfor c, o in zip(inputs, outputs):\n    print(c)\n    print(o)", "solution(\"1\\n3\\n001\\n110\") == \"YES\"\nassert solution(\"1\\n3\\n011\\n110\") == \"NO\"\nassert solution(\"2\\n3\\n001\\n110\\n5\\n01010\\n01010\") == \"YES\\nNO\"\nassert solution(\"1\\n5\\n01010\\n01010\") == \"NO\"\nassert solution(\"2\\n3\\n001\\n110\\n3\\n101\\n000\") == \"YES\\nYES\"\nassert solution(\"1\\n3\\n101\\n000\") == \"YES\"\nassert solution(\"2\\n3\\n101\\n000\\n3\\n011\\n000\") == \"YES\\nNO\"\nassert solution(\"1\\n3\\n011\\n000\") == \"NO\"\nassert solution(\"2\\n5\\n01010\\n01010\\n5\\n01010\\n01010\") == \"NO\\nNO\"\nassert solution(\"1\\n5\\n01010\\n01010\") == \"NO\"\nassert solution(\"2\\n5\\n01010\\n01010\\n5\\n01010\\n01010\") == \"NO\\nNO\"\nassert solution(\"1\\n5\\n01010\\n01010\") == \"", "solution('''\n3\n3\n001\n100\n3\n100\n001\n3\n000\n000\n''') == '''\nYES\nNO\nYES\n'''", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n# ---- test section ----\n\n# ---- simple test ----\n\nINPUT_TEST = '''\n'''\nOUTPUT_TEST = '''\n'''\n\n# ---- challenge test ----\n\nINPUT_CHALLENGE = '''\n'''\nOUTPUT_CHALLENGE = '''\n'''\n\n# ---- explore mode ----\n\nINPUT_EXPLORE = '''\n'''\nOUTPUT_EXPLORE = '''\n'''", "solution(stdin='2\\n5\\n01010\\n10101\\n5\\n01010\\n10100') == 'YES\\nNO'", "solution(\n'''\n3\n3\n010\n010\n4\n0110\n0100\n5\n11010\n01010\n'''\n) == '''\nYES\nNO\nYES\n'''", "solution(\"input\") == \"output\"\nprint(\"Success!\")", "solution('''\n2\n3\n001\n000\n2\n11\n01\n''') == '''\nYES\nNO\n'''", "solution(\n'''\n3\n3\n001\n100\n5\n10001\n01110\n4\n1010\n0010\n'''\n) == '''\nYES\nYES\nNO\n'''", "solution(\"\"\"\n2\n3\n010\n000\n4\n0110\n0000\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution(\"\"\"\n3\n3\n010\n000\n3\n010\n010\n3\n010\n100\n\"\"\") == \"\"\"\nYES\nNO\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3\n010\n000\n3\n010\n010\n3\n010\n100\n\"\"\") == \"\"\"\nYES\nNO\nNO\n\"\"\"\n\ndef test_solution(t: int, n: int, *lines: str) -> bool:\n    pass\n\n# check the correctness of test_solution\nassert test_solution(3, 3, \"010\", \"000\")\nassert not test_solution(3, 3, \"010\", \"010\")\nassert not test_solution(3, 3, \"010\", \"100\")", "solution('''\n3\n3\n000\n111\n5\n11111\n00010\n''') == '''\nYES\nNO\n'''", "solution(\"\"\"\n1\n3\n000\n000\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n2\n4\n0110\n0110\n4\n0111\n0110\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution('''3\n3\n100\n100\n3\n100\n001\n3\n000\n100''') == '''YES\nNO\nYES'''", "solution('''\n4\n3\n010\n000\n4\n0111\n0000\n4\n1110\n0000\n6\n101111\n101111\n''') == '''\nYES\nYES\nNO\nYES\n'''", "solution(r'''\n1\n6\n001100\n110000\n''') == 'YES'\n\nassert solution(r'''\n1\n6\n001100\n110101\n''') == 'NO'\n\n# test cases\nstdin = r'''\n3\n6\n001100\n110000\n6\n001100\n110100\n6\n001100\n110110\n'''\n\n# if you do not want to use stdin, you can use the following for debugging\n#import io\n#f = io.StringIO(stdin)\n#print(solution(f))\n\n# submit\n#import sys\n#sys.stdin = open('input.txt', 'r')\n#print(solution(sys.stdin))", "solution(\"\"\"\n4\n4\n0001\n0110\n4\n1110\n0110\n4\n1111\n0111\n4\n0111\n1111\n\"\"\") == \"\"\"\nYES\nNO\nNO\nNO\n\"\"\"\n\n# check the performance of solution\nfrom datetime import datetime\nstart = datetime.now()\n\nassert solution(\"\"\"\n3\n3\n111\n000\n2\n01\n10\n3\n000\n111\n\"\"\") == \"\"\"\nNO\nYES\nYES\n\"\"\"\n\nprint(datetime.now() - start)", "solution(\"\"\"3\n3\n010\n010\n4\n0110\n0001\n6\n100010\n000001\n6\n100010\n100000\n6\n100100\n100100\n6\n100000\n100000\n6\n010000\n010000\n6\n010100\n010100\n6\n010001\n010001\n6\n010000\n010001\n6\n010000\n010110\n6\n011000\n011110\n6\n100100\n100100\n6\n100101\n100101\n6\n100111\n100111\n6\n101000\n101001\n6\n101000\n101101\n6\n101000\n101110\n6\n101010\n101010\n6\n101011\n101011\n6\n101111\n101111\n6\n110000\n110000\n6\n110001\n110001\n6\n110110\n110110\n6\n111000\n111000\n6\n111001\n111001\n6\n111110\n111110\n7\n0010000\n0100000\n7\n0010001\n0100000\n7\n0010001\n0100100\n7\n0010101\n0101100\n7\n0011001\n0111100\n7\n0011000\n0111100\n7\n0011100\n0111000\n7\n0011100\n0111100\n7\n", "solution('''\n3\n3\n010\n000\n5\n00100\n00100\n5\n11110\n11110\n''') == '''\nYES\nNO\nNO\n'''", "solution('''\n1\n3\n000\n000\n''') == 'YES'\n\nassert solution('''\n1\n5\n10001\n00000\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n10000\n00000\n''') == 'YES'\n\nassert solution('''\n1\n5\n10000\n10000\n''') == 'NO'\n\nassert solution('''\n1\n5\n00000\n00000\n''') == 'YES'\n\nassert solution('''\n1\n5\n00000\n10000\n''') == 'NO'\n\nassert solution('''\n1\n5\n10000\n10000\n''') == 'NO'\n\nassert solution('''\n1\n5\n00000\n00000\n''') == 'YES'\n\nassert solution('''\n1\n5\n00000\n10000\n''') == 'NO'\n\nassert solution('''\n1\n5\n01000\n00000\n''') == 'YES'\n\nassert solution('''\n1\n5\n01000\n10000\n''') == 'NO'\n\nassert solution('''\n1\n5\n10000\n10000\n''') == 'NO'\n\nassert solution('''\n1\n5\n00000\n00000\n''') == 'YES'\n\nassert solution('''", "solution(\"\"\"\n2\n3\n001\n111\n3\n111\n000\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution('''\n3\n3\n010\n101\n5\n11010\n00010\n5\n01010\n11010\n''') == '''\nYES\nNO\nYES\n'''", "solution('''\n4\n3\n000\n111\n4\n0011\n1001\n4\n0111\n1110\n4\n0111\n1100\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution('''3\n4\n0001\n0000\n4\n0000\n1000\n4\n0000\n0111''') == '''YES\nNO\nNO'''", "solution('''\n\n''') == '''\n\n'''", "solution('''\n2\n6\n001001\n111001\n6\n001011\n001001\n''') == '''\nYES\nNO\n'''", "solution('''\n4\n3\n01\n10\n4\n0100\n0110\n4\n0000\n1111\n5\n00100\n00100\n5\n00010\n00010\n5\n11111\n11111\n5\n00000\n00000\n5\n01000\n00000\n''') == '''\nYES\nYES\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\n'''", "solution(\"\"\"2\n4\n0010\n0101\n5\n01010\n01111\"\"\") == \"YES\\nNO\"", "solution(\"\"\"1\n4\n0001\n1110\"\"\") == \"\"\"YES\"\"\", \"Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n3\n110\n111\"\"\") == \"\"\"NO\"\"\", \"Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"2\n4\n0101\n1010\n3\n101\n111\"\"\") == \"\"\"YES\nNO\"\"\", \"Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"2\n4\n0001\n1110\n3\n110\n111\"\"\") == \"\"\"YES\nNO\"\"\", \"Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n0001\n1111\"\"\") == \"\"\"NO\"\"\", \"Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n0000\n1111\"\"\") == \"\"\"YES\"\"\", \"Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n0000\n1110\"\"\") == \"\"\"YES\"\"\", \"Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n0001\n1101\"\"\") == \"\"\"YES\"\"\", \"Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n6\n000100\n111010\"\"\") == \"\"\"YES\"\"\", \"Wr", "solution(open('tests/data/monocarp/input.txt').read()) == open('tests/data/monocarp/output.txt').read()", "solution(\"\"\"\n2\n3\n001\n010\n2\n11\n00\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution('''\n3\n3\n000\n111\n3\n001\n110\n3\n000\n001\n''') == '''\nYES\nNO\nNO\n'''", "solution(\"\"\"\n2\n3\n011\n101\n3\n000\n000\n\"\"\") == \"\"\"\nNO\nYES\n\"\"\"\n\nif __name__ == '__main__':\n    with open('week4_input.txt', 'r') as f:\n        print(solution(f.read()))", "solution(\"1\\n3\\n010\\n000\") == \"YES\"\nassert solution(\"1\\n3\\n110\\n000\") == \"NO\"\nassert solution(\"1\\n3\\n101\\n000\") == \"YES\"\nassert solution(\"1\\n2\\n00\\n00\") == \"YES\"\nassert solution(\"1\\n5\\n10010\\n00000\") == \"YES\"\nassert solution(\"1\\n5\\n11010\\n00000\") == \"NO\"\nassert solution(\"1\\n5\\n11110\\n00000\") == \"NO\"\nassert solution(\"1\\n5\\n11011\\n00000\") == \"YES\"\nassert solution(\"1\\n5\\n11011\\n11000\") == \"NO\"\nassert solution(\"1\\n7\\n1101000\\n0001000\") == \"YES\"\nassert solution(\"1\\n7\\n1101010\\n0001000\") == \"NO\"\nassert solution(\"1\\n7\\n1101011\\n0001000\") == \"YES\"\nassert solution(\"1\\n7\\n1101010\\n0001010\") == \"NO\"\nassert solution(\"1\\n7\\n1101011\\n0001011\") == \"YES\"\nassert solution(\"1\\n7\\n1101011\\n", "solution(\"\"\"\n3\n3\n100\n100\n5\n10010\n10010\n5\n10010\n11001\n6\n100100\n100100\n6\n111100\n111100\n6\n111100\n110011\n\"\"\") == \"\"\"\nYES\nNO\nYES\nNO\nNO\n\"\"\"", "solution(\"\"\"5\n5\n0 1 0 0 0\n0 0 0 0 0\n5\n0 0 0 0 0\n0 1 0 0 0\n5\n0 0 0 0 0\n0 0 0 1 0\n5\n0 0 0 0 0\n0 0 0 0 0\n5\n0 0 0 0 0\n0 0 0 0 1\"\"\") == \"\"\"YES\nNO\nYES\nYES\nNO\"\"\"", "solution('''1\n5\n01010\n00000''') == 'YES'\nassert solution('''3\n3\n100\n000\n3\n110\n000\n3\n101\n000''') == 'NO\\nYES\\nNO'", "solution('''\n1\n4\n0110\n0110\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n2\n5\n01110\n01110\n5\n01110\n11111\n''') == 'NO\\nYES'", "solution(\"\"\"\n3\n3\n001\n110\n5\n11000\n00010\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution('''\n1\n4\n0110\n0010\n''') == '''\nYES\n'''\n\nprint(solution('''\n3\n3\n010\n010\n3\n010\n001\n3\n011\n011\n'''))", "solution(\"\"\"2\n3\n010\n000\n4\n0110\n1000\"\"\") == \"\"\"YES\nNO\"\"\"", "solution(\"100\\n2\\n00\\n10\\n\") == \"YES\"\nassert solution(\"100\\n2\\n00\\n11\\n\") == \"NO\"\nassert solution(\"100\\n3\\n001\\n000\\n\") == \"YES\"\nassert solution(\"100\\n3\\n011\\n000\\n\") == \"NO\"\nassert solution(\"100\\n4\\n0000\\n1111\\n\") == \"YES\"\nassert solution(\"100\\n4\\n0001\\n1111\\n\") == \"NO\"\nassert solution(\"100\\n4\\n0001\\n1110\\n\") == \"YES\"\nassert solution(\"100\\n4\\n1110\\n0001\\n\") == \"YES\"\nassert solution(\"100\\n4\\n1111\\n1100\\n\") == \"NO\"\nassert solution(\"100\\n5\\n01011\\n00100\\n\") == \"YES\"\nassert solution(\"100\\n5\\n01110\\n00100\\n\") == \"NO\"\nassert solution(\"100\\n5\\n01110\\n01100\\n\") == \"YES\"\nassert solution(\"100\\n6\\n110110\\n010010\\n\") == \"YES\"\nassert solution(\"100\\n6\\n110110\\n011010", "solution('''\n1\n5\n00100\n11000\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n00100\n01000\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n2\n5\n00100\n11000\n5\n01010\n11010\n''') == 'YES\\nNO'\n\n# check the correctness of solution\nassert solution('''\n5\n5\n00100\n11000\n5\n01010\n11010\n5\n00000\n00000\n5\n11111\n11111\n5\n10001\n10001\n''') == 'YES\\nNO\\nYES\\nNO\\nYES'\n\nprint('passed all tests')", "solution('''\n2\n4\n0001\n0011\n4\n0001\n0111\n''') == '''\nYES\nNO\n'''", "solution('''\n1\n3\n000\n111\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n001\n000\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n000\n101\n''') == 'YES'\n\nassert solution('''\n1\n5\n00010\n11111\n''') == 'YES'\n\nassert solution('''\n1\n5\n00010\n11110\n''') == 'NO'\n\nassert solution('''\n1\n5\n00010\n10110\n''') == 'YES'\n\nassert solution('''\n1\n5\n00010\n11001\n''') == 'YES'\n\nassert solution('''\n1\n5\n00010\n01001\n''') == 'NO'\n\nassert solution('''\n1\n5\n00010\n01101\n''') == 'YES'\n\nassert solution('''\n1\n5\n00010\n01111\n''') == 'YES'\n\nassert solution('''\n1\n5\n00010\n01110\n''') == 'NO'\n\nassert solution('''\n1\n5\n00010\n01100\n''') == 'NO'\n\nassert solution('''"], "finish_reason": ["stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length"], "sum_logprob": [-25.606353423499993, -115.84731165414412, -103.486547075804, -22.006695409356997, -18.7338313367, -56.200565750629984, -70.73189496667905, -17.669790749639997, -67.92306792616202, -21.039511770294002, -26.971164136900008, -15.703681620700001, -14.949879969700001, -29.61474555758999, -13.3610828811, -58.95177828375699, -16.467762253849997, -26.36204577598, -21.797299868870006, -30.323611292100004, -97.06632609225996, -66.595914017894, -156.6169845757495, -22.659784963670003, -62.760721762981994, -16.54075529695, -24.898891410689995, -27.67437714952001, -22.616428272459995, -7.9462785223, -25.11025609215, -58.620288879559986, -24.034584890600005, -78.17006008342697, -21.849749913049997, -17.256630678899995, -17.341741801839994, -43.09057975820499, -73.536527519935, -52.43082939004999, -30.05236432460001, -28.447550039024, -30.47466098002, -21.12959101454, -33.88751000886, -15.830320439160001, -90.790152081187, -57.18246223310799, -16.213951750000003, -72.70614734716804], "mean_logprob": [-0.6245452054512195, -0.38615770551381334, -0.34495515691934664, -0.4890376757634889, -0.5676918586878787, -0.47627598093754236, -0.23577298322226334, -0.441744768741, -0.5306489681731407, -0.5686354532511892, -0.58632965515, -1.0469121080466668, -0.467183749053125, -0.6437988164693478, -0.44536942937, -0.3388033234698678, -0.4843459486426471, -0.48818603288851853, -0.6054805519130556, -0.5831463710019231, -0.5643391051875581, -0.5370638227249516, -0.5220566152524984, -0.5149951128106818, -0.20920240587660666, -0.5703708723086207, -0.5658838956975, -0.5321995605676924, -0.6112548181745946, -0.49664240764375, -0.6975071136708333, -0.6371770530386957, -0.8287787893310344, -0.26056686694475667, -0.6069374975847223, -0.5950562303068966, -0.433543545046, -0.6069095740592253, -0.24512175839978334, -0.7598670926094203, -0.33766701488314604, -0.5079919649825714, -0.4761665778128125, -0.6815997101464516, -0.584267413945862, -0.6088584784292308, -0.30263384027062334, -0.3230647583791412, -0.4768809338235294, -0.24235382449056]}
{"prompt": "'''\nn students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), and the days chosen for the groups must be different. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. \n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n5\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n2\n1 0 0 0 0\n0 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 0 1\n2\n1 0 0 0 0\n0 0 0 1 0\n5\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\"\"\") == \"\"\"\nYES\nNO\nYES\nNO\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n2\n1 0 0 0 0\n0 1 0 0 0\n3\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n2\n1 0 0 0 0\n0 0 0 0 1\n2\n1 0 0 0 0\n0 0 0 1 0\n5\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\"\"\") == \"\"\"\nYES\nNO\nYES\nNO\nYES\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7\n2\n1 0 0 0 0\n", "solution('''1\n5\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1''') == 'YES'\n\nassert solution('''1\n5\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 0''') == 'NO'\n\nassert solution('''3\n2\n1 0 0 0 0\n0 1 0 0 0\n3\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n5\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1''') == 'YES\\nNO\\nYES'", "solution(\"2\\n2\\n1 0 0 0 0\\n0 0 0 0 1\\n2\\n1 0 0 0 0\\n0 0 0 0 0\") == \"YES\\nNO\"\n\n# get the input\nT = int(input())\ninputs = []\nfor _ in range(T):\n    N = int(input())\n    for _ in range(N):\n        inputs.append(list(map(int, input().split())))\n\n# submit the solution\nr = requests.post('https://api.codechef.com/rest/contests/PRACTICE/submissions',\n    data={\n        'sourceCode': base64.b64encode(solution(inputs).encode()).decode(),\n        'lang': 5, # 1: C, 2: CPP 4.3.2, 3: CPP 4.9.2, 4: JAVA 7, 5: PYTH 3\n        'testcases': base64.b64encode(''.join(inputs).encode()).decode(),\n        'apiKey': API_KEY,\n        'problemCode': PROBLEM_CODE\n    })\nprint(r.json())", "solution(\"2\\n2\\n1 0 0 0 0\\n0 0 0 0 1\\n4\\n1 0 0 0 0\\n0 0 0 0 1\\n1 0 0 0 0\\n0 0 0 0 1\") == \"YES\\nNO\"\n\nif __name__ == \"__main__\":\n    from sys import stdin, stdout\n    stdin = open(\"input.txt\", \"r\")\n    stdout = open(\"output.txt\", \"w\")\n    solution(stdin.read())", "solution(\"2\\n\"\n                \"5\\n\"\n                \"1 1 1 1 1\\n\"\n                \"1 1 1 1 1\\n\"\n                \"1 1 1 1 1\\n\"\n                \"1 1 1 1 1\\n\"\n                \"1 1 1 1 1\\n\"\n                \"4\\n\"\n                \"1 0 0 0 0\\n\"\n                \"0 1 0 0 0\\n\"\n                \"0 0 1 0 0\\n\"\n                \"0 0 0 1 0\") == \"YES\\nNO\"\nassert solution(\"1\\n\"\n                \"4\\n\"\n                \"1 0 0 0 0\\n\"\n                \"0 1 0 0 0\\n\"\n                \"0 0 1 0 0\\n\"\n                \"0 0 0 1 0\") == \"NO\"\nassert solution(\"1\\n\"\n                \"4\\n\"\n                \"1 1 1 1 1\\n\"\n                \"1 1 1 1 1\\n\"\n                \"1 1 1 1 1\\n\"\n                \"1 1 1 1 1\") == \"YES\"\nassert solution(\"1\\n\"\n                \"4\\n\"\n                \"1 0 0 0 0\\n\"\n                \"0 1 0 0 0\\n\"\n                \"0 0 1 0 0\\n\"\n                \"0 0 0", "solution(\n'''\n3\n2\n1 0 0 0 0\n0 0 0 0 1\n4\n1 0 0 0 0\n0 0 0 0 1\n1 0 0 0 0\n0 0 0 0 1\n4\n1 0 0 0 0\n0 0 0 0 1\n0 0 0 0 1\n1 0 0 0 0\n'''\n) == '''\nYES\nYES\nNO\n'''", "solution('''\n2\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 0 1\n''') == 'YES\\nNO'", "solution('''3\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n6\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 1\n5\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1''') == 'YES\\nYES\\nNO', 'test failed'", "solution(\"4\\n2\\n1 0 0 0 0\\n0 0 0 0 1\\n4\\n1 0 0 0 0\\n0 0 0 0 1\\n1 0 0 0 0\\n0 0 0 0 1\\n2\\n1 0 0 0 0\\n0 0 0 0 1\\n3\\n1 0 0 0 0\\n0 0 0 0 1\\n0 0 0 0 1\") == \"YES\\nYES\\nNO\\nNO\"\n\n# check efficiency of solution\nimport timeit\n\ncount = 100\ntime = timeit.timeit(f'{{solution(\"{time_input}\")}}', globals=globals(), number=count)\nprint(f\"Time of execution - {time}\")\nprint(f\"Time of execution per one test - {time / count}\")", "solution(\"\"\"\n2\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 0 1\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\n# check the speed of solution\nimport timeit\nprint(timeit.timeit(\n    # edit your test code here \n    setup=\"from __main__ import solution\", \n    number=100,\n    stmt=\"solution('''\\n2\\n4\\n1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n4\\n1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 0 1\\n''')\"\n))", "solution(\"\") == \"\"", "solution(\"\"\"1\n6\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 0\"\"\") == \"\"\"YES\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n1 0 0 0\n0 1 0 0\n0 0 1 0\n0 0 0 1\"\"\") == \"\"\"NO\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n1 0 0 0\n0 1 0 0\n0 0 1 0\n0 0 0 0\"\"\") == \"\"\"NO\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n8\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\"\"\") == \"\"\"YES\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n8\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\"\"\") == \"\"\"YES\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n8\n1 0 0 0 0\n0 1 0 0 0", "solution('''\n4\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1\n5\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n10\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n''') == '''\nYES\nYES\nNO\nYES\n'''\n\n# run with sample input\nimport os\nf = open(os.path.join(os.path.dirname(__file__), 'input_sample.txt'), 'r')\nprint(solution(f.read()))\nf.close()\n\n# run with real input\nf = open(os.path.join(os.path.dirname(__file__), 'input.txt'), 'r')\nprint(solution(f.read()))\nf.close()", "solution('''\n2\n2\n1 0 0 0 0\n0 0 0 0 1\n4\n1 0 0 0 0\n0 0 0 0 1\n1 0 0 0 0\n0 0 0 0 1\n''') == '''\nYES\nNO\n'''", "solution(\"2\\n2\\n1 1 1 1 1\\n1 1 1 1 1\\n3\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\\nNO\"\nassert solution(\"1\\n2\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"2\\n4\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n2\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\\nNO\"\nassert solution(\"1\\n4\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"1\\n4\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"2\\n2\\n1 1 1 1 1\\n1 1 1 1 1\\n3\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\\nNO\"\nassert solution(\"2\\n2\\n1 1 1 1 1\\n1 1 1 1 1\\n", "solution('''\n1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 0 1\n''') == 'NO'", "solution('''\n2\n2\n1 0 0 0 0\n0 0 0 0 1\n4\n1 0 0 0 0\n0 0 0 0 1\n1 0 0 0 0\n0 0 0 0 1\n''') == '''\nYES\nNO\n'''\n\n# check the performance of solution\nfrom utils import Pygonci\npygonci = Pygonci()\nassert pygonci.test(solution, cases=['1', '100', '1000', '10000'])", "solution(\"\"\"3\n3\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n2\n1 0 0 0 0\n0 0 0 0 1\n2\n1 0 0 0 0\n0 0 0 1 0\"\"\") == \"\"\"YES\nNO\nNO\"\"\"\nassert solution(\"\"\"3\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n2\n1 0 0 0 0\n0 0 0 0 1\n2\n1 0 0 0 0\n0 0 0 1 0\"\"\") == \"\"\"YES\nNO\nYES\"\"\"\nassert solution(\"\"\"3\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n2\n1 0 0 0 0\n0 0 0 0 1\n2\n1 0 0 0 0\n0 0 0 1 0\"\"\") == \"\"\"YES\nNO\nYES\"\"\"\n\n# check the performance of solution\n# import random\n# random.seed(0)\n# print(solution(\"\\n\".join([str(random.randint(1,1000))] + [\" \".join([str(random.randint(0,1)) for _ in range(5)]) for _ in range(random.randint(1,1000))]))\n# )\n#", "solution('''\n2\n2\n1 0 0 0 0\n0 0 0 0 1\n4\n1 0 0 0 0\n0 0 0 0 1\n1 0 0 0 0\n0 0 0 0 1\n''') == '''\nYES\nNO\n'''", "solution(sample_input) == sample_output\n\n# check the correctness of solution by multiple testcases, then paste the code to Codeforces\n# check the performance of the solution, then paste the code to Codeforces\n\n# other solutions\n\n# check the correctness of solution\nassert solution(sample_input) == sample_output\n\n# check the correctness of solution by multiple testcases, then paste the code to Codeforces\n# check the performance of the solution, then paste the code to Codeforces", "solution(\"\"\"4\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n8\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n2\n1 0 0 0 0\n0 0 0 0 1\n2\n0 0 0 0 1\n1 0 0 0 0\"\"\") == \"\"\"YES\nYES\nNO\nYES\"\"\"\n\n# this is an example of \"testcase generator\"\n# usually it's used in the ACM-ICPC contests\n# you can use this generator inside your own generator\n# or to create input files for the solution checking\ndef generator(n: int, max_n: int, max_m: int) -> str:\n    import random\n    t = n\n    print(t)\n    for _ in range(t):\n        n = random.randint(2, max_n)\n        print(n)\n        for i in range(n):\n            for j in range(5):\n                print(random.randint(0, 1), end=' ')\n            print()\n\n# this is an example of \"testcase generator\"\n# usually it's used in the ACM-", "solution('''\n4\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1\n6\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 1\n7\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 1\n0 0 0 0 1\n''') == '''\nYES\nYES\nNO\nNO\n'''", "solution(\"1\\n4\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"2\\n2\\n1 1 1 1 1\\n1 1 1 1 1\\n2\\n1 1 1 1 1\\n1 1 1 1 0\") == \"YES\\nNO\"", "solution(\"\"\"\n1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n3\n1 0 0 0\n0 1 0 0\n0 0 1 0\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n1 0 0 0 0\n0 1 0 0 0\n2\n1 0 0 0\n0 1 0 0\n\"\"\") == \"\"\"\nNO\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1 0 0 0 0\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"", "solution(\"1\\n4\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 0 1\") == \"YES\"\nassert solution(\"1\\n2\\n1 1 1 1 1\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"1\\n6\\n1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 0 1\\n0 0 0 0 0\") == \"NO\"\nassert solution(\"1\\n8\\n1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 0 1\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\") == \"NO\"\nassert solution(\"1\\n6\\n1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 0 1\\n0 0 0 0 0\") == \"NO\"\nassert solution(\"3\\n3\\n1 0 0\\n0 1 0\\n0 0 1\\n6\\n1 0 0 0 0\\n0 1 0 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\", "solution(open('test.in').read()) == open('test.out').read()", "solution(\"3 \\n3 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n2 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n2 \\n1 1 1 1 1 \\n0 0 0 0 0\") == \"YES \\nYES \\nNO\"\nprint(\"Ok\")\n\n# a wrong solution for the given example\ndef solution_wrong(stdin: str) -> str:\n    stdin = [line.split() for line in stdin.split(\"\\n\")]\n    del stdin[-1]\n    n_cases = int(stdin[0][0])\n    stdin = stdin[1:]\n    res = \"\"\n    for i in range(n_cases):\n        stdin_i = stdin[i]\n        n_students = int(stdin_i[0])\n        stdin_i = stdin_i[1:]\n        sum_dow = [0] * 5\n        stdin_i = [int(entry) for line in stdin_i for entry in line]\n        for entry in stdin_i:\n            for i in range(5):\n                sum_dow[i] += entry\n        max_dow = max(sum_dow)\n        if max_", "solution('''\n3\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1\n2\n1 0 0 0 0\n0 0 0 0 1\n''') == '''\nYES\nNO\nYES\n'''\n\n# check the performance of solution\nimport timeit\nassert timeit.timeit(solution, number=100) < 1", "solution('''\n2\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n2\n1 1 1 1 1\n1 1 1 1 1\n''') == '''\nYES\nNO\n'''", "solution('''\n3\n2\n1 0 0 0 0\n0 0 0 0 1\n2\n1 0 0 0 0\n0 0 0 0 0\n4\n1 0 0 0 0\n0 0 0 0 1\n1 0 0 0 0\n0 0 0 0 1\n''') == '''\nYES\nNO\nYES\n'''", "solution('''\n3\n2\n1 0 0 0 0\n0 0 0 0 1\n2\n1 0 0 0 0\n0 0 0 0 0\n4\n1 0 0 0 0\n0 0 0 0 1\n1 0 0 0 0\n0 0 0 0 1\n''') == '''\nYES\nNO\nYES\n'''", "solution(\"1\\n8\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"1\\n8\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 0\") == \"NO\"\nassert solution(\"1\\n6\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"2\\n8\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n3\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\\nNO\"\nassert solution(\"4\\n4\\n1 1 1", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution(\"YES\") == \"YES\"\nassert solution(\"NO\") == \"NO\"\n\nimport pytest\n@pytest.mark.timeout(2)\ndef test_performance():\n    assert solution(open(\"tests/03\").read()) == open(\"tests/03.a\").read()", "solution('''2\n8\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n6\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1''') == 'YES'\nassert solution('''3\n4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1''') == 'NO'\nassert solution('''2\n4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1''') == 'YES'\nassert solution('''1\n8\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1", "solution('''\n5\n5\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n10\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n2\n1 0 0 0 0\n0 1 0 0 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n8\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 1\n0 0 0 0 1\n0 0 0 0 1\n''') == '''\nYES\nYES\nNO\nYES\nNO\n'''", "solution('''\n1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 0 0 0 0\n0 1 0 0 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n''') == '''\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n1 0 0 0 0\n0 0 0 0 1\n''') == '''\nNO\n'''", "solution('''2\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 0 1''') == '''YES\nNO'''", "solution('''\n1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n''') == '''\nYES\n'''\nassert solution('''\n2\n2\n1 0 0 0 0\n0 1 0 0 0\n3\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n''') == '''\nYES\nNO\n'''\nassert solution('''\n1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n''') == '''\nYES\n'''\nassert solution('''\n1\n1\n1 0 0 0 0\n''') == '''\nNO\n'''\n\n# check performance of solution\nimport timeit\ntimes = [\n    timeit.timeit(\n        'solution(r\"\"\"\\n' + f.read() + '\"\"\")',\n        number=1,\n        setup='from __main__ import solution'\n    )\n    for f in [\n        open('tests/tests/{:02d}.in'.format(i))\n        for i in range(1, int(input()) + 1)\n    ]\n]\nprint('\\n'.join(map(str, times)))", "solution(\"\") == \"\", \"Empty input case\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"...\"\nassert solution(\"\") == \"\", \"", "solution('''2\n2\n1 0 0 0 0\n0 0 0 0 1\n3\n1 0 0 0 0\n0 0 0 0 1\n0 0 0 0 0''') == '''YES\nNO'''", "solution(\"\"\"\n2\n2\n1 0 0 0 0\n0 0 0 0 1\n5\n1 0 0 0 0\n0 0 0 0 1\n1 0 0 0 0\n0 0 0 0 1\n1 0 0 0 0\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution(stdin) == stdout", "solution(\"\"\"\n2\n2\n1 0 0 0 0\n0 0 0 0 1\n3\n1 0 0 0 0\n0 0 0 0 1\n0 0 0 0 0\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution('''\n5\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 1\n0 0 0 0 1\n''') == '''\nYES\nYES\nNO\nYES\nNO\n'''\n# let's test our solution\nassert solution('''\n3\n2\n1 0 0 0 0\n0 1 0 0 0\n2\n1 0 0 0 0\n0 1 0 0 0\n2\n1 0 0 0 0\n0 1 0 0 0\n''') == '''\nYES\nYES\nYES\n'''\nassert solution('''\n3\n2\n1 0 0 0 0\n0 1 0 0 0\n2\n1 0 0 0 0\n0 1 0 0 0\n2\n1 0 0 0 0\n0 1 0 0 0\n''') == '''\nYES\nYES\nYES\n'''\nassert", "solution(\"\"\"2\n2\n1 0 0 0 0\n0 0 0 0 1\n4\n1 0 0 0 0\n0 0 0 0 1\n1 0 0 0 0\n0 0 0 0 1\"\"\") == \"\"\"YES\nNO\"\"\"\n\n# simulate user input\ntry:\n    from io import StringIO\n\n    stdin = StringIO(input())\n    print(solution(stdin.read()))\nexcept Exception:\n    pass", "solution(\"1\\n3\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"1\\n3\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 0\") == \"NO\"\nassert solution(\"1\\n3\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 0 0\") == \"NO\"\nassert solution(\"1\\n2\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"1\\n2\\n1 1 1 1 1\\n1 1 1 1 0\") == \"NO\"\nassert solution(\"1\\n2\\n1 1 1 1 1\\n1 1 1 0 0\") == \"NO\"\nassert solution(\"1\\n2\\n1 1 1 1 1\\n1 1 0 0 0\") == \"NO\"\nassert solution(\"1\\n2\\n1 1 1 1 1\\n1 0 0 0 0\") == \"NO\"\nassert solution(\"1\\n2\\n1 1 1 1 1\\n0 0 0 0 0\") == \"NO\"\nassert solution(\"1\\n2\\n1 1 1 1 0\\n1 1 1 1 0\") == \"NO\"\nassert solution(\"1\\n2\\n1", "solution(\"2\\n2\\n1 0 0 0 0\\n0 0 0 0 1\\n2\\n1 0 0 0 0\\n0 0 0 0 0\") == \"YES\\nNO\"\nassert solution(\"1\\n4\\n1 0 0 0 0\\n0 0 0 0 1\\n1 0 0 0 0\\n0 0 0 0 1\") == \"YES\"\nassert solution(\"2\\n2\\n1 0 0 0 0\\n0 0 0 0 1\\n2\\n1 0 0 0 0\\n0 0 0 0 0\") == \"YES\\nNO\"\nassert solution(\"1\\n4\\n1 0 0 0 0\\n0 0 0 0 1\\n1 0 0 0 0\\n0 0 0 0 0\") == \"NO\"\nassert solution(\"1\\n2\\n1 0 0 0 0\\n0 0 0 0 0\") == \"NO\"\n\n# read the input\nn = int(input())\nlines = [input() for _ in range(n)]\nprint(solution(\"\\n\".join([str(n)] + lines)))", "solution('''\n5\n5\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n2\n1 1 1 1 1\n1 1 1 1 1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n2\n1 1 1 1 1\n1 1 1 1 1\n4\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n''') == '''\nYES\nYES\nYES\nNO\nNO\n'''", "solution('''\n2\n2\n1 0 0 0 0\n0 0 0 0 1\n2\n1 0 0 0 0\n0 0 0 0 0\n''') == '''\nYES\nNO\n'''\n\n# ITERATION 1 (wrong)\n\ndef solution(stdin: str) -> str:\n    # stdin = '''\n    # 2\n    # 2\n    # 1 0 0 0 0\n    # 0 0 0 0 1\n    # 2\n    # 1 0 0 0 0\n    # 0 0 0 0 0\n    # '''\n    days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri']\n    output = []\n    for testcase in range(int(stdin.splitlines()[0])):\n        students_count = int(stdin.splitlines()[1 + testcase * 2])\n        students = stdin.splitlines()[2 + testcase * 2 : (2 + testcase * 2) + students_count]\n        availabilities = []\n        for i in range(students_count):\n            availabilities.append([])\n            for j in range(5):\n                if students[i][j] == '1':\n                    availabilities[i].append(days[j])\n        for i in range(students_count):\n            for"], "finish_reason": ["length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length"], "sum_logprob": [-61.31785452118003, -33.12832325171401, -68.37358538852448, -34.91263939407999, -37.313108253295006, -24.841836060200006, -15.945112990699993, -30.859710621099996, -100.74980659081803, -49.45153911506601, -5.570534472, -43.69599148224402, -62.99104089745494, -16.429242517900004, -50.760249707313974, -15.508034595399998, -54.542882071169004, -91.47076985228006, -16.452342479700004, -74.38564706981597, -164.25531503834995, -29.94605942976001, -18.990288132784002, -51.70597432726402, -54.81423348589501, -11.541694812540001, -151.45719536180496, -34.74631178126002, -15.108557075900006, -21.184277543650005, -21.184273921650004, -43.59098558281703, -7.84328010781, -31.34094129587, -46.48428537420998, -35.358612690479994, -29.025788938279998, -15.7315379045, -97.34166678412001, -25.65904221718503, -19.007426686899997, -22.411786109999998, -6.373138904, -18.2667358239, -65.89746871775004, -42.359481052006004, -36.478218590852, -57.54956338816198, -31.586555034110003, -114.63127511790702], "mean_logprob": [-0.20439284840393332, -0.18822910938473864, -0.24594814887958455, -0.29338352432, -0.12437702751098334, -0.27298720945274724, -0.23108859406811594, -0.26152297136525426, -0.5359032265469043, -0.2485001965581206, -0.928422412, -0.14565330494081333, -0.22416740532902135, -0.2738207086316667, -0.16920083235771333, -0.18912237311463415, -0.4913773159564775, -0.3132560611379452, -0.274205707995, -0.641255578188069, -0.5475177167945, -0.18953202170734176, -0.21827917394004598, -0.17235324775754668, -0.18271411161965, -0.577084740627, -0.5048573178726833, -0.296977023771453, -0.25180928459833335, -0.27874049399539474, -0.2787404463375, -0.14530328527605665, -0.490205006738125, -0.4821683276287692, -0.15494761791403333, -0.16837434614514285, -0.18847914894987014, -0.23134614565441178, -0.32997175181057625, -0.08553014072395, -0.380148533738, -0.35574263666666667, -0.7081265448888889, -0.3581712906647059, -0.21965822905916665, -0.4278735459798586, -0.12159406196950667, -0.23394131458602438, -0.22888807995731883, -0.3821042503930233]}
{"prompt": "'''\nMonocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n) and a difficulty b_i (an integer from 1 to n). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems should satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\n\n\nYour task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n5\n5\n1 2\n2 1\n3 3\n4 4\n5 5\n5\n1 2\n1 2\n1 2\n1 2\n1 2\n5\n1 2\n2 3\n3 1\n4 4\n5 5\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n5\n1 2\n1 3\n1 4\n1 5\n1 6\n''') == '''\n10\n1\n10\n1\n0\n'''", "solution('''2\n3\n1 1\n2 2\n3 3\n4\n1 1\n2 1\n3 1\n4 1''') == '2\\n0'\n\n# check the correctness of solution\nassert solution('''3\n3\n1 1\n2 2\n3 3\n4\n1 1\n2 1\n3 1\n4 1\n4\n1 2\n2 3\n3 4\n4 1''') == '2\\n0\\n0'\n\n# check the correctness of solution\nassert solution('''1\n6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6''') == '0'\n\n# check the correctness of solution\nassert solution('''1\n6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1''') == '0'\n\n# check the correctness of solution\nassert solution('''1\n6\n1 1\n2 2\n3 3\n4 4\n5 6\n6 6''') == '0'\n\n# check the correctness of solution\nassert solution('''1\n6\n1 1\n2 2\n3 3\n4 5\n5 6\n6 6''') == '0'\n\n# check the correctness of solution\nassert solution('''1\n6\n1 2\n2 3\n3 4\n4 5\n5", "solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n1 1\n2 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 1\n2 2\n3 3\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1\n2 2\n3 3\n1 2\n2 3\n''') == '''\n15\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1\n2 2\n3 3\n1 2\n2 3\n''') == '''\n15\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n''') == '''\n55\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n15\n", "solution('''\n3\n3\n1 1\n2 2\n3 3\n3\n1 2\n2 3\n3 1\n3\n1 1\n2 2\n3 3\n''') == '''\n3\n3\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 6\n2 1\n2 5\n3 1\n4 4\n5 5\n''') == '''\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3\n1 1\n2 2\n3 3\n3\n1 2\n2 3\n3 1\n''') == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 2\n2 1\n3\n1 2\n2 3\n3 1\n''') == '''\n0\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 1\n2 2\n3 3\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n4\n1 2\n2 3\n3 4\n4 1\n5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n1\n1\n'''\n\n", "solution('''\n5\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n5\n2 3\n2 4\n2 5\n2 6\n2 7\n5\n2 3\n2 3\n2 3\n2 3\n2 3\n5\n1 2\n1 2\n1 2\n1 2\n1 2\n5\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '''\n6\n4\n1\n0\n1\n'''\n\n# check time limit\n# import random\n# n = 2 * 10 ** 5\n# testcase = '\\n'.join([str(n)] + [f'{random.randint(1, n)} {random.randint(1, n)}' for _ in range(n)])\n# from datetime import datetime\n# start = datetime.now()\n# assert solution(testcase) == '...'\n# print(datetime.now() - start)", "solution('''\n3\n3\n1 1\n2 2\n3 3\n3\n1 2\n1 3\n2 3\n4\n1 1\n2 2\n3 3\n4 4\n''') == '''\n3\n3\n1\n'''", "solution('''input''') == '''output'''", "solution('''3\n4\n1 1\n2 1\n3 2\n4 2\n3\n1 2\n2 1\n3 2\n3\n1 2\n2 3\n3 1''') == '''3\n0\n3'''", "solution(test1) == '6'\n\nassert solution(test2) == '4'\n\n# check the performance of solution\nassert solution(test3) == '33587645138205409'\n\nassert solution(test4) == '604634921288586616'\n\nassert solution(test5) == '26771144400'\n\nassert solution(test6) == '26771144400'\n\nassert solution(test7) == '26771144400'\n\nassert solution(test8) == '26771144400'\n\nassert solution(test9) == '26771144400'\n\nassert solution(test10) == '26771144400'\n\nassert solution(test11) == '26771144400'\n\nassert solution(test12) == '26771144400'\n\nassert solution(test13) == '26771144400'\n\nassert solution(test14) == '26771144400'\n\nassert solution(test15) == '26771144400'\n\nassert solution(test16) == '26771144400'\n\nassert solution(test17) == '26771144400'\n\nassert solution(test18) == '26771144400'\n\nassert solution(test19) == '", "solution('''\n2\n3\n1 1\n2 2\n3 3\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '''\n6\n10\n'''\n\n# solve the problem\nstdin = open('input.txt', 'r')\nprint(solution(stdin.read()))", "solution('''\n1\n3\n1 1\n2 2\n3 3\n''') == '''\n4\n'''\n\nassert solution('''\n1\n5\n1 2\n2 4\n3 5\n4 1\n5 3\n''') == '''\n8\n'''\n\nassert solution('''\n2\n2\n1 2\n2 1\n2\n1 1\n2 2\n''') == '''\n0\n2\n'''\n\n# check the performance of solution\nfrom utils import dispatch\n\ndispatch(solution, [\n    ('''\n1\n100000\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13\n14 14\n15 15\n16 16\n17 17\n18 18\n19 19\n20 20\n21 21\n22 22\n23 23\n24 24\n25 25\n26 26\n27 27\n28 28\n29 29\n30 30\n31 31\n32 32\n33 33\n34 34\n35 35\n36 36\n37 37\n38 38\n39 39\n40 40\n41 41\n42 42\n43 43\n44 44\n45 45\n46 46\n47 47\n48 48\n49 49\n50 50\n51 51\n52 52\n53 53\n54 54\n55", "solution(example_input) == example_output", "(solution(input_string) == check_string)\n\nsolution(input_string)\n\nprint(time.time() - t)", "solution('''\n1\n3\n1 1\n2 2\n3 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 1\n1 1\n3 3\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n''') == '15'\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n''') == '9'\n\n# check the correctness of solution\nassert solution('''\n1\n10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n''') == '55'\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 1\n2 2\n3 3\n1 4\n1 5\n1 6\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n5", "solution(stdin_sample) == stdout_sample", "(True, \"\") == solution()", "solution(\"\"\"2\n3\n1 1\n2 2\n3 3\n3\n1 1\n2 2\n3 3\"\"\") == \"\"\"3\n3\"\"\", \"Failed!\"\n\nprint(\"Success!\")", "solution(\"in.txt\") == \"out.txt\"", "solution(r'''1\n3\n1 1\n2 2\n3 3''') == '3'\n\n# check the correctness of solution\nassert solution(r'''2\n5\n1 5\n1 2\n5 2\n5 5\n5 1\n5\n5 5\n5 5\n5 5\n5 5\n5 5''') == '5\\n1'\n\n# check the correctness of solution\nassert solution(r'''3\n5\n1 1\n1 1\n1 1\n1 1\n1 1\n3\n1 1\n1 1\n1 1\n3\n1 1\n1 1\n1 1''') == '1\\n0\\n1'\n\nprint('done')", "solution(\n'''3\n3\n1 1\n2 2\n3 3\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n4\n1 1\n2 2\n2 1\n1 2\n''') == '''3\n1\n0'''", "solution('''\n2\n3\n1 1\n2 2\n3 3\n6\n1 4\n2 2\n3 1\n4 3\n5 5\n6 6\n''') == '''\n3\n21\n'''\n# test the performance of solution\nassert solution('''\n1\n100000\n''') == '''\n500000000\n'''", "solution('''\n\n''') == '''\n\n'''\n \n'''\n\n'''", "solution(\"\"\"1\n4\n1 2\n2 1\n3 3\n4 4\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"1\n4\n1 2\n1 1\n1 2\n1 1\"\"\") == \"\"\"4\"\"\"\nassert solution(\"\"\"1\n4\n1 1\n1 1\n1 1\n1 1\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"1\n4\n1 2\n1 3\n1 4\n2 3\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"1\n3\n1 2\n1 3\n2 3\"\"\") == \"\"\"6\"\"\"\nassert solution(\"\"\"1\n3\n1 1\n1 1\n1 1\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"1\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\"\"\") == \"\"\"12\"\"\"\nassert solution(\"\"\"1\n6\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"1\n3\n1 1\n1 2\n1 3\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"1\n3\n1 2\n1 2\n1 2\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"1\n3\n1 2\n1 3\n2 3\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"1\n4\n1 2\n1 3\n1 4\n2", "solution('''2\n4\n1 1\n2 2\n3 3\n4 4\n4\n1 2\n2 3\n3 4\n4 1''') == '''4\n4'''", "solution(r'''\n1\n4\n1 1\n2 2\n3 3\n4 4\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n4\n1 1\n2 2\n3 3\n4 1\n''') == r'''\n1\n'''\n\nassert solution(r'''\n1\n4\n1 1\n2 2\n3 1\n4 4\n''') == r'''\n2\n'''\n\nassert solution(r'''\n2\n3\n1 1\n2 2\n3 3\n4\n1 1\n2 2\n3 1\n4 4\n''') == r'''\n0\n2\n'''\n\nassert solution(r'''\n2\n4\n1 1\n2 2\n3 3\n4 1\n4\n1 1\n2 2\n3 1\n4 4\n''') == r'''\n1\n2\n'''\n\nassert solution(r'''\n2\n2\n1 1\n2 2\n4\n1 1\n2 2\n3 1\n4 4\n''') == r'''\n0\n2\n'''\n\nassert solution(r'''\n3\n3\n1 1\n2 2\n3 3\n4\n1 1\n2 2\n3 1\n4 4\n1\n1 1\n''') == r'''\n", "solution(\"\"\"1\n4\n1 2\n2 2\n3 3\n4 1\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"1\n5\n1 2\n2 1\n3 2\n4 2\n5 1\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"1\n7\n2 1\n3 3\n4 4\n5 5\n1 3\n2 4\n3 5\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"3\n3\n1 1\n2 2\n3 3\n4\n1 1\n2 2\n3 3\n4 4\n5\n1 1\n2 2\n3 3\n4 4\n5 5\"\"\") == \"\"\"0\n1\n0\"\"\"", "solution('''1\n5\n1 2\n3 4\n5 6\n7 8\n9 10''') == '5'", "solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''", "solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"", "solution(\"\"\"\n1\n8\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"\"\"\n7\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n1\n8\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 2\n\"\"\") == \"\"\"\n5\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"\n1\n8\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 8\n\"\"\") == \"\"\"\n5\n\"\"\", \"Example 3\"\n\nassert solution(\"\"\"\n1\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n\"\"\") == \"\"\"\n35\n\"\"\", \"Example 4\"\n\nassert solution(\"\"\"\n1\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n2 1\n\"\"\") == \"\"\"\n35\n\"\"\", \"Example 5\"\n\nassert solution(\"\"\"\n1\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n2 2\n\"\"\") == \"\"\"\n31\n\"\"\", \"Example 6\"\n\nassert solution(\"\"\"\n1\n8\n1 2\n1", "solution('''\n2\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n3 2\n''') == '''\n15\n10\n'''", "solution('''1\n5\n1 1\n2 1\n3 1\n4 2\n5 2''') == '2'\n\n# check the correctness of solution\nassert solution('''1\n6\n1 1\n2 1\n3 1\n4 2\n5 2\n6 3''') == '6'\n\n# check the correctness of solution\nassert solution('''1\n9\n1 1\n2 1\n3 1\n4 2\n5 2\n6 3\n7 4\n8 5\n9 6''') == '9'\n\n# check the correctness of solution\nassert solution('''1\n10\n1 1\n2 1\n3 1\n4 2\n5 2\n6 3\n7 4\n8 5\n9 6\n10 5''') == '18'\n\n# check the correctness of solution\nassert solution('''1\n11\n1 1\n2 1\n3 1\n4 2\n5 2\n6 3\n7 4\n8 5\n9 6\n10 5\n11 5''') == '18'\n\n# check the correctness of solution\nassert solution('''1\n12\n1 1\n2 1\n3 1\n4 2\n5 2\n6 3\n7 4\n8 5\n9 6\n10 5\n11 5\n12 7''') == '23'\n\n# check the correctness of solution\nassert solution(''", "solution(\n'''3\n3\n1 1\n2 2\n3 3\n4\n1 3\n2 3\n3 4\n4 2\n6\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n''') == '''3\n5\n1'''", "solution('''5\n5\n2 1\n2 3\n2 4\n2 5\n1 2\n3\n1 2\n2 1\n3 1\n3\n1 1\n2 2\n3 3\n1\n1 1\n''') == '''1\n2\n0\n1\n0'''", "(solution('''\n3\n3\n1 1\n2 2\n3 3\n3\n1 1\n2 2\n2 1\n5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n1\n1\n3\n''')\n\n# check time of solution\nfrom timeit import timeit\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timer():\n    start = time.time()\n    yield\n    print(f\"Solution executed in {time.time() - start}\")\n\nwith timer():\n    stdin = '''\n    3\n    3\n    1 1\n    2 2\n    3 3\n    3\n    1 1\n    2 2\n    2 1\n    5\n    1 2\n    2 3\n    3 4\n    4 5\n    5 1\n    '''\n    assert (solution(stdin) == '''\n    1\n    1\n    3\n    ''')", "solution(\"1\\n3\\n1 1\\n2 2\\n3 3\") == \"1\"\nassert solution(\"1\\n4\\n1 1\\n2 2\\n3 3\\n4 4\") == \"4\"\nassert solution(\"1\\n4\\n1 1\\n2 2\\n3 3\\n1 3\") == \"2\"\nassert solution(\"1\\n5\\n1 1\\n2 2\\n3 3\\n1 3\\n1 2\") == \"3\"\nassert solution(\"1\\n3\\n1 1\\n1 2\\n2 1\") == \"2\"\nassert solution(\"1\\n5\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\") == \"5\"\nassert solution(\"1\\n5\\n1 1\\n1 2\\n1 3\\n1 4\\n5 5\") == \"5\"\nassert solution(\"1\\n5\\n1 1\\n1 2\\n1 3\\n1 4\\n5 1\") == \"4\"\nassert solution(\"1\\n5\\n1 1\\n1 2\\n1 3\\n1 4\\n3 1\") == \"3\"\nassert solution(\"1\\n5\\n1 1\\n1 2\\n1 3\\n1 4\\n2 1\")", "solution(r'''\n2\n3\n1 1\n2 2\n3 3\n3\n1 2\n1 2\n3 4\n''') == r'''\n1\n6\n'''\n\n# get input for AtCoder\nfrom atcoder import get_input\nfrom random import randint\nfrom operator import add\nfrom functools import reduce\n\nsample_inputs = [\n    r'''\n2\n3\n1 1\n2 2\n3 3\n3\n1 2\n1 2\n3 4\n''', r'''\n3\n3\n3 1\n1 3\n1 2\n3\n1 1\n1 1\n1 1\n4\n4 1\n2 2\n1 3\n3 4\n''', r'''\n5\n3\n3 1\n1 3\n1 2\n3\n1 1\n1 1\n1 1\n4\n4 1\n2 2\n1 3\n3 4\n2\n1 1\n1 1\n2\n1 2\n2 1\n''', r'''\n10\n3\n3 1\n1 3\n1 2\n3\n1 1\n1 1\n1 1\n4\n4 1\n2 2\n1 3\n3 4\n2\n1 1\n1 1\n2\n1 2\n2 1\n2\n2 1\n1 2\n2\n1 2\n2 1\n3\n1", "solution('''\n2\n3\n1 1\n2 2\n3 3\n3\n1 1\n2 2\n3 2\n''') == '''\n3\n2\n'''", "solution('''\n\n''') == '''\n\n'''", "\"1\" == solution(\"\"\"\n2\n2\n1 1\n2 2\n2\n1 1\n1 2\n\"\"\")\n\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n# ----\n", "solution('''\n2\n3\n1 1\n2 2\n3 3\n3\n1 1\n2 2\n3 3\n''') == '''\n0\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3\n2 1\n1 2\n1 3\n5\n5 1\n4 3\n2 3\n4 1\n5 2\n''') == '''\n1\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n4\n2 3\n4 1\n1 2\n1 4\n4\n4 2\n3 4\n1 3\n1 2\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 4\n1 3\n5 2\n4 1\n5 3\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n3\n3 2\n2 1\n3 1\n''') == '''\n1\n1\n'''\n\n# run solution\n#assert solution(sys.stdin.read()) == sys.stdout.read()", "solution('''\ninput\n''') == '''\noutput\n'''", "solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert", "solution('''\n3\n4\n1 1\n2 2\n3 3\n4 4\n4\n1 1\n2 2\n3 3\n4 4\n4\n1 1\n2 1\n3 2\n4 2\n''') == '''\n4\n0\n4\n'''\n\n# get input from stdin\ndef getInput() -> str:\n    import fileinput\n    with fileinput.input() as f:\n        return ''.join(f).strip(' \\t\\n\\r')\n\n#main\nif __name__ == '__main__':\n    print(solution(getInput()))", "solution(\"\"\"5\n3\n1 1\n2 2\n3 3\n4\n1 1\n2 2\n3 3\n4 4\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\"\"\") == \"\"\"6\n30\n120\n140\n420\"\"\"\n\nassert solution(\"\"\"3\n3\n1 1\n2 2\n3 3\n4\n1 1\n2 2\n3 3\n4 4\n7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\"\"\") == \"\"\"6\n30\n420\"\"\"\n\nassert solution(\"\"\"1\n7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\"\"\") == \"\"\"420\"\"\"\n\nassert solution(\"\"\"2\n3\n1 1\n2 2\n3 3\n7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\"\"\") == \"\"\"6\n420\"\"\"\n\n# stress testing solution against the sample testcase\n# TODO: implement me", "(solution(\"\"\"1\n3\n1 1\n2 2\n3 3\"\"\") == '3')\nassert (solution(\"\"\"1\n3\n1 1\n1 2\n1 3\"\"\") == '0')\nassert (solution(\"\"\"2\n3\n1 1\n2 2\n3 3\n3\n1 1\n1 2\n1 3\"\"\") == '3\\n0')", "solution('''\n2\n3\n1 1\n2 2\n3 3\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '''\n4\n4\n'''\n\n# get the input\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = [[int(i) for i in input().split()] for _ in range(N)]", "solution(\"\"\"5\n5\n1 2\n2 1\n3 3\n4 4\n5 5\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n5\n1 3\n2 3\n3 3\n4 5\n5 7\n5\n1 5\n2 7\n3 3\n4 5\n5 7\n6\n1 6\n2 6\n3 6\n4 6\n5 6\n6 6\"\"\") == \"\"\"4\n0\n3\n2\n15\"\"\"\n\n# print the results\nprint(solution(sys.stdin.read()))", "solution('''\n1\n4\n1 2\n2 3\n3 4\n4 1\n''') == '12', 'Wrong answer'\n\nprint('OK!')", "solution(stdin=\"\"\"\n3\n3\n1 1\n2 2\n3 3\n4\n1 1\n2 2\n3 3\n4 4\n3\n1 1\n2 2\n2 2\n\"\"\") == \"\"\"\n2\n9\n0\n\"\"\"\n\ndef verify(user_solution: str) -> bool:\n    '''\n    Function for codeforces auto-testing\n    '''\n    problem_tests = [\n        (\"\"\"\n3\n3\n1 1\n2 2\n3 3\n4\n1 1\n2 2\n3 3\n4 4\n3\n1 1\n2 2\n2 2\n\"\"\", \"\"\"\n2\n9\n0\n\"\"\"),\n    ]\n\n    results = []\n    for test in problem_tests:\n        stdin, expected_stdout = test\n        with io.StringIO(stdin.strip()) as buffer:\n            out = io.StringIO()\n            try:\n                sys.stdin = buffer\n                sys.stdout = out\n                user_result = solution(stdin)\n            finally:\n                sys.stdin = sys.__stdin__\n                sys.stdout = sys.__stdout__\n\n        users_out = out.getvalue().strip()\n        results.append((users_out == expected_stdout.strip(), users_out"], "finish_reason": ["stop", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-36.99595373482001, -67.34068964640403, -55.186677246309976, -81.308175848135, -89.21184866231103, -18.114643813300003, -8.581366265400002, -26.526885415400006, -86.16608154369997, -30.29684913995, -65.38110120110939, -7.0579499619, -38.21947771599999, -66.88639801468194, -8.3176833131, -17.22607372, -26.7105268488, -8.5595454017, -72.66452494145896, -27.001302253100004, -45.65132637245, -17.6057188172, -96.882321552049, -16.96608995807, -56.886538095665024, -70.77520240504002, -17.982798036199995, -11.642539671077, -10.119964991000002, -64.04789621743902, -23.319846604600002, -63.276583498746035, -35.476992076799995, -45.076626646499996, -71.61831295583406, -68.20622678155804, -128.10316864384998, -14.307034305199998, -7.265573343699999, -38.24164053629996, -142.24924789842592, -8.684836608, -15.18250255469999, -53.3514489080005, -83.70865448151599, -26.80567384176, -38.9367167255, -70.74838493039, -24.864300881019993, -110.12370853556197], "mean_logprob": [-0.33329688049387385, -0.22446896548801334, -0.18395559082103333, -0.27102725282711665, -0.4073600395539315, -0.3123214450568966, -0.6129547332428572, -0.49123861880370373, -0.28722027181233334, -0.383504419493038, -0.217937004003698, -0.6416318147181819, -1.1581659913939395, -0.22295466004894, -0.6398217933153846, -2.153259215, -0.5683090818893617, -0.6584265693615385, -0.4657982368042244, -0.43550487505, -0.5635966218820988, -0.704228752688, -0.32294107184016335, -0.3855929535925, -0.18962179365221665, -0.4814639619390476, -0.6200964840068965, -0.1764021162284394, -0.4819030948095238, -0.21349298739146333, -0.3886641100766667, -0.21092194499582, -0.5457998781046154, -0.6727854723358209, -0.3255377861628818, -0.22735408927186, -0.4270105621461667, -0.34064367393333334, -0.45409833398125, -0.127472135121, -0.4939209996473125, -0.48249092266666666, -0.050608341848999996, -0.38108177791428927, -0.30775240618204414, -0.3081111935834483, -0.3855120467871287, -0.557073897089685, -0.6216075220255, -0.36707902845187335]}
{"prompt": "'''\nLet's call a positive integer good if there is no digit 0 in its decimal representation.\n\nFor an array of a good numbers a, one found out that the sum of some two neighboring elements is equal to x (i.e. x = a_i + a_{i + 1} for some i). x had turned out to be a good number as well.\n\nThen the elements of the array a were written out one after another without separators into one string s. For example, if a = [12, 5, 6, 133], then s = 1256133.\n\nYou are given a string s and a number x. Your task is to determine the positions in the string that correspond to the adjacent elements of the array that have sum x. If there are several possible answers, you can print any of them.\n\nInput\n\nThe first line contains the string s (2 \u2264 |s| \u2264 5 \u22c5 10^5).\n\nThe second line contains an integer x (2 \u2264 x < 10^{200000}).\n\nAn additional constraint on the input: the answer always exists, i.e you can always select two adjacent substrings of the string s so that if you convert these substrings to integers, their sum is equal to x.\n\nOutput\n\nIn the first line, print two integers l_1, r_1, meaning that the first term of the sum (a_i) is in the string s from position l_1 to position r_1.\n\nIn the second line, print two integers l_2, r_2, meaning that the second term of the sum (a_{i + 1}) is in the string s from position l_2 to position r_2.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"1256133\") == \"3 5\\n6 8\"\nassert solution(\"1\") == \"1 1\\n1 1\"\nassert solution(\"125\") == \"1 2\\n2 3\"\nassert solution(\"18\") == \"1 1\\n2 2\"\nassert solution(\"2\") == \"1 1\\n1 1\"\nassert solution(\"25\") == \"1 2\\n2 3\"\nassert solution(\"3\") == \"1 1\\n1 1\"\nassert solution(\"31\") == \"1 2\\n2 3\"\nassert solution(\"36\") == \"1 2\\n2 3\"\nassert solution(\"51\") == \"1 2\\n2 3\"\nassert solution(\"56\") == \"1 2\\n2 3\"\nassert solution(\"5\") == \"1 1\\n1 1\"\nassert solution(\"6\") == \"1 1\\n1 1\"\nassert solution(\"65\") == \"1 2\\n2 3\"\nassert solution(\"7\") == \"1 1\\n1 1\"\nassert solution(\"76\") == \"1 2\\n2 3\"\nassert solution(\"8\") == \"1 1\\n1 1\"\nassert solution(\"81\") == \"1 2\\n2 3\"\nassert solution(\"9\") == \"1 1\\n1 1\"\nassert solution(\"96\") == \"1 2\\n2 3\"", "solution('''\n1256133\n14\n''') == '''\n1 2\n3 4\n'''\n\n# get the input and run the solution\ninput = sys.stdin.read()\nprint(solution(input))", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n# check the correctness of solution\nassert solution(SAMPLE_INPUT_2) == SAMPLE_OUTPUT_2", "solution(\"1256133\") == \"1 2\\n3 4\", \"Basic test\"\nassert solution(\"987654321\") == \"1 5\\n6 9\", \"Basic test\"\nassert solution(\"879201\") == \"1 2\\n3 5\", \"Basic test\"\nassert solution(\"123456123456\") == \"1 6\\n7 12\", \"Basic test\"\nassert solution(\"12345671234567\") == \"1 7\\n8 14\", \"Basic test\"\nassert solution(\"1234567812345678\") == \"1 8\\n9 16\", \"Basic test\"\nassert solution(\"123456789123456789\") == \"1 9\\n10 18\", \"Basic test\"\nassert solution(\"123456789123456789\") == \"1 9\\n10 18\", \"Basic test\"\nassert solution(\"98989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898", "(solution('''\\\n1256133\n9\n''') == '''\\\n2 3\n4 5\n''')\n\n# test solution\nwith open('in.txt', 'r') as file_in:\n    with open('out.txt', 'w') as file_out:\n        file_out.write(solution(file_in.read()))", "solution('''\n\n''') == '''\n\n'''", "solution(stdin='''1256133\n7''') == '''4 5\n5 6'''\n\nassert solution(stdin='''2019\n9''') == '''1 2\n2 3'''\n\nassert solution(stdin='''654123\n11''') == '''3 4\n4 5'''\n\nassert solution(stdin='''12345678901234567890\n10''') == '''3 4\n4 5'''\n\nassert solution(stdin='''12345678901234567890\n20''') == '''7 8\n8 9'''\n\nassert solution(stdin='''12345678901234567890\n1''') == '''-1 -1\n-1 -1'''", "solution('''\\\n\n''') == '''\\\n\n'''\n\nassert solution('''\\\n\n''') == '''\\\n\n'''", "solution(\"123456789\") == \"1 2\\n2 3\"\nassert solution(\"111111\") == \"1 2\\n2 3\"\nassert solution(\"1234321\") == \"1 2\\n2 3\"\nassert solution(\"123456321\") == \"1 2\\n2 3\"\nassert solution(\"100100100\") == \"1 2\\n2 3\"\nassert solution(\"010101\") == \"1 2\\n2 3\"\nassert solution(\"000000\") == \"1 2\\n2 3\"\nassert solution(\"987654321\") == \"1 2\\n2 3\"\nassert solution(\"0123456789\") == \"1 2\\n2 3\"\nassert solution(\"00100100100\") == \"1 2\\n2 3\"\nassert solution(\"987654321000123456789\") == \"1 2\\n2 3\"\nassert solution(\"987654321000123456789123456789\") == \"1 2\\n2 3\"\nassert solution(\"987654321000123456789123456789000123456789\") == \"1 2\\n2 3\"\nassert solution(\"000123456789123456789\") == \"1 2\\n2 3\"\nassert solution(\"000123456789123456789123456789\") == \"1 2\\n", "solution(\"1234\") == \"1 3\\n2 3\", \"wrong output\"\nassert solution(\"1234\") == \"2 3\\n3 4\", \"wrong output\"\nassert solution(\"1234\") == \"1 4\", \"wrong output\"\nassert solution(\"1234\") == \"1 2\\n2 3\", \"wrong output\"\n\n# print the solution\n# print(solution(input()))\n\n# test\n'''\nInput\n1234\n\nOutput\n1 3\n2 3\n\nInput\n1234\n\nOutput\n2 3\n3 4\n\nInput\n1234\n\nOutput\n1 4\n\nInput\n1234\n\nOutput\n1 2\n2 3\n'''", "solution(r'''\n1256133\n14\n''') == r'''\n1 2\n3 4\n'''\n\n# submit the solution\n# import sys\n# print(solution(sys.stdin.read()))", "solution('''\n1256133\n12\n''') == '''\n1 1\n2 2\n'''\nassert solution('''\n1\n1\n''') == '''\n1 1\n1 1\n'''\nassert solution('''\n12\n3\n''') == '''\n1 1\n2 2\n'''\nassert solution('''\n12\n4\n''') == '''\n1 1\n2 2\n'''\nassert solution('''\n11112\n3\n''') == '''\n1 1\n2 2\n'''\nassert solution('''\n11112\n4\n''') == '''\n1 1\n2 2\n'''\nassert solution('''\n11112\n5\n''') == '''\n1 1\n2 2\n'''\nassert solution('''\n11112\n6\n''') == '''\n1 1\n2 2\n'''\nassert solution('''\n11112\n7\n''') == '''\n1 1\n2 2\n'''\nassert solution('''\n11112\n8\n''') == '''\n1 1\n2 2\n'''\nassert solution('''\n11112\n9\n''') == '''\n1 1\n2 2\n'''\nassert solution('''\n11112\n10\n''') == '''\n", "solution(sample1.input) == sample1.output\n\n# benchmarking\n\nprint(\"time taken: \", timeit.timeit(lambda: solution(sample1.input), number=1))", "solution('''\n631758924\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n1234\n''') == '''\n2 3\n'''\nassert solution('''\n12345\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n123456\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n1234567\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n12345678\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n123456789\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n1234567890\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n12345678901\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n123456789012\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n1234567890123\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n12345678901234\n''') == '''\n1 2\n", "solution('''\n1256133\n17\n''') == '''\n2 3\n4 5\n'''\n\nassert solution('''\n12345\n15\n''') == '''\n3 4\n4 5\n'''\n\nassert solution('''\n125\n7\n''') == '''\n1 2\n2 3\n'''\n\nassert solution('''\n12\n13\n''') == '''\n1 2\n1 2\n'''\n\nassert solution('''\n12345\n9\n''') == '''\n2 3\n3 4\n'''\n\nassert solution('''\n12\n3\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n12345\n4\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n123\n6\n''') == '''\n1 2\n2 3\n'''\n\nassert solution('''\n123\n5\n''') == '''\n1 2\n2 3\n'''\n\nassert solution('''\n123\n4\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n123\n3\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n123\n2\n", "solution(\"1256133\", \"13\") == \"1 2\\n4 5\"\nassert solution(\"6311216\", \"7\") == \"1 2\\n3 4\"\nassert solution(\"91414261520300\", \"15\") == \"1 2\\n3 4\"\nassert solution(\"7758436094785823138\", \"15\") == \"1 2\\n3 4\"\nassert solution(\"376101378866844\", \"8\") == \"1 2\\n3 4\"\nassert solution(\"14141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414", "solution(\"1256133\") == '''1 2\n3 4'''\nassert solution(\"1235\") == '''2 3\n4 5'''\nassert solution(\"169\") == '''1 2\n3 4'''\nassert solution(\"1\") == '''-1 -1\n-1 -1'''\nassert solution(\"100\") == '''-1 -1\n-1 -1'''\nassert solution(\"11\") == '''1 2\n3 4'''\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197", "solution(\n'''\n1256133\n19\n'''\n) == '''\n1 2\n4 5\n'''\n\nassert solution(\n'''\n1000000000000000000000000000000000000000000000001\n1\n'''\n) == '''\n2 1000000000000000000000000000000000000000000000001\n1 2\n'''\n\nassert solution(\n'''\n12\n9\n'''\n) == '''\n1 1\n2 2\n'''\n\nassert solution(\n'''\n1\n1\n'''\n) == '''\n1 1\n2 2\n'''\n\nassert solution(\n'''\n23564\n9\n'''\n) == '''\n1 2\n3 3\n'''\n\nassert solution(\n'''\n11\n2\n'''\n) == '''\n1 1\n2 2\n'''\n\nassert solution(\n'''\n0\n10\n'''\n) == '''\n1 1\n2 2\n'''\n\nassert solution(\n'''\n12\n3\n'''\n) == '''\n1 1\n2 2\n'''\n\nassert solution(\n'''\n44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", "solution(\"1256133\", 133) == '4 7\\n5 6\\n'\nassert solution(\"12345678901234567890\", 18) == '0 1\\n1 2\\n'\nassert solution(\"12345678901234567890\", 14) == '0 2\\n1 2\\n'\nassert solution(\"12345678901234567890\", 67) == '3 5\\n4 5\\n'\nassert solution(\"12345678901234567890\", 35) == '2 4\\n3 4\\n'\nassert solution(\"12345678901234567890\", 45) == '3 4\\n4 5\\n'\nassert solution(\"12345678901234567890\", 90) == '5 7\\n6 7\\n'\nassert solution(\"12345678901234567890\", 156) == '12 14\\n13 14\\n'\nassert solution(\"12345678901234567890\", 78) == '5 7\\n6 7\\n'\nassert solution(\"12345678901234567890\", 156) == '12 14\\n13 14\\n'\nassert solution(\"12345678901234567890\", 189) == '15 17\\n16 17\\n'\nassert solution(\"123456789012345", "solution(\"1256133\") == '''1 1\n2 2\n'''\nassert solution(\"0\") == '''1 1\n1 1\n'''\nassert solution(\"1234512345\") == '''1 1\n1 1\n'''\nassert solution(\"1239486789\") == '''1 1\n2 2\n'''\nassert solution(\"1239864578234528346\") == '''1 1\n2 2\n'''\nassert solution(\"30\") == '''1 1\n2 2\n'''\nassert solution(\"1239047578\") == '''1 1\n2 2\n'''\nassert solution(\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567", "'correct answer' == solution('input data')", "solution('''\ns\nx\n''') == '''\nl_1 r_1\nl_2 r_2\n'''", "solution('''1256133\n7''') == '''1 2\n2 3'''\n\nassert solution('''1010\n5''') == '''1 2\n2 3'''\n\nassert solution('''33\n6''') == '''1 1\n2 2'''\n\nassert solution('''1000000000000000\n2000000000000000''') == '''1 16\n2 15'''\n\nassert solution('''1256133\n123''') == '''1 3\n2 3'''\n\nassert solution('''1256133\n233''') == '''1 3\n3 3'''\n\nassert solution('''1256133\n133''') == '''3 4\n4 4'''\n\nassert solution('''1256133\n12''') == '''1 2\n2 2'''\n\nassert solution('''1256133\n13''') == '''3 3\n4 4'''\n\nassert solution('''1256133\n133''') == '''3 4\n4 4'''\n\nassert solution('''1256133\n56''') == '''3 4\n4 4'''\n\nassert solution('''1256133\n5''') == '''2 2\n3 3'''\n\nassert solution('''1256133\n1''') == '", "solution('''1256133\n6''') == '''2 3\n3 3'''\nassert solution('''137772\n9''') == '''1 2\n3 4'''\nassert solution('''9899063811\n18''') == '''1 4\n4 4'''\nassert solution('''141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946", "solution(\"123456\\n9\") == \"1 2\\n4 5\"\nassert solutionsolution(\"1256133\", \"641\") == \"3 5\\n6 7\", \"Test 1\"\nassert solution(\"11\", \"2\") == \"1 1\\n2 2\", \"Test 2\"\nassert solution(\"111\", \"11\") == \"1 3\\n4 4\", \"Test 3\"\nassert solution(\"2337502236\", \"12\") == \"4 4\\n5 5\", \"Test 4\"\n\n# print(solution(\"1256133\", \"641\"))\n# print(solution(\"11\", \"2\"))\n# print(solution(\"111\", \"11\"))\n# print(solution(\"2337502236\", \"12\"))\n\n# the solution above should print:\n# 3 5\n# 6 7\n#\n# 1 1\n# 2 2\n#\n# 1 3\n# 4 4\n#\n# 4 4\n# 5 5", "solution(\"1256133\") == \"1 2\\n3 4\"\nassert solution(\"01\") == \"1 1\\n2 2\"\nassert solution(\"1111\") == \"1 3\\n4 4\"\n\ndef print_result(result: str):\n    print(result)\n\nprint_result(solution(input()))", "solution(\"1256133\", \"1256133\", \"133\") == \"\"\"3 4\n5 6\"\"\"\nassert solution(\"43\", \"43\", \"3\") == \"\"\"1 1\n2 2\"\"\"\nassert solution(\"1256133\", \"1256133\", \"7\") == \"\"\"2 2\n3 3\"\"\"\nassert solution(\"12345678901234567890\", \"12345678901234567890\", \"18\") == \"\"\"1 1\n2 2\"\"\"\nassert solution(\"12345678901234567890\", \"12345678901234567890\", \"35\") == \"\"\"1 1\n2 2\"\"\"\nassert solution(\"12345678901234567890\", \"12345678901234567890\", \"54\") == \"\"\"1 1\n2 2\"\"\"\nassert solution(\"12345678901234567890\", \"12345678901234567890\", \"73\") == \"\"\"1 1\n2 2\"\"\"\nassert solution(\"12345678901234567890\", \"12345678901234567890\", \"92\") == \"\"\"1 1\n2 2\"\"\"\nassert solution(\"12345678901234567890\", \"12345678901234567890\", \"9\") == \"\"\"1 1\n2 2\"\"\"\nassert solution(\"12345678901234567890\", \"1234567", "solution(\"102030405\", 50) == \"1 3\\n2 5\"\nassert solution(\"10109\", 111) == \"1 2\\n2 3\"\nassert solutionsolution('''\n1256133\n7\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n145\n4\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n345\n5\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n345\n9\n''') == '''\n2 2\n3 3\n'''\n\nassert solution('''\n345\n15\n''') == '''\n1 2\n3 3\n'''\n\nassert solution('''\n876110\n19\n''') == '''\n1 2\n3 3\n'''\n\nassert solution('''\n5453713\n9\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n654890\n20\n''') == '''\n3 4\n5 5\n'''\n\nassert solution('''\n15487\n6\n''') == '''\n2 2\n3 3\n'''\n\nassert solution('''\n1215\n6\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n55\n10\n''') == '''\n1 2\n3 3\n'''\n\nassert solution('''", "solution('''1256133\n16''') == '''2 3\n4 5'''\n\nassert solution('''76\n34''') == '''1 2\n3 4'''\n\nassert solution('''123412341234\n12''') == '''1 2\n3 4'''\n\nassert solution('''532\n10''') == '''1 2\n2 3'''\n\nassert solution('''100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100", "solution('''\\\n1256133\n13\n''') == '''\\\n0 1\n1 2\n'''\n\nassert solution('''\\\n1256133\n14\n''') == '''\\\n0 2\n2 3\n'''\n\nassert solution('''\\\n1256133\n11\n''') == '''\\\n0 1\n2 3\n'''\n\nassert solution('''\\\n3452\n4\n''') == '''\\\n0 0\n1 1\n'''\n\nassert solution('''\\\n3452\n5\n''') == '''\\\n0 1\n1 2\n'''\n\nassert solution('''\\\n3452\n6\n''') == '''\\\n0 2\n1 3\n'''\n\nassert solution('''\\\n3452\n7\n''') == '''\\\n1 2\n2 3\n'''\n\nassert solution('''\\\n3452\n8\n''') == '''\\\n1 3\n2 3\n'''\n\n# submit solution to the judge system\ndef print_solution(str):\n    print(str, end=\"\")\n\nif __name__ == '__main__':\n    print_solution(solution(sys.stdin.read()))", "solution(stdin=['1256133', '7']) == '2 3\\n5 6'\nassert solution(stdin=['99999', '1']) == '1 1\\n2 2'\nassert solution(stdin=['1234', '8']) == '1 2\\n3 4'\nassert solution(stdin=['1256133', '7']) == '2 3\\n5 6'\nassert solution(stdin=['1665465465465465454545454545454545454545454545454545454545454545454654545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545", "solution(test_stdin) == test_stdout", "solution(\"1256133\", \"13\") == \"1 1\\n2 2\\n\"\nassert solution(\"123456789\", \"17\") == \"1 1\\n2 2\\n\"\nassert solution(\"1256133\", \"26\") == \"1 3\\n4 5\\n\"\nassert solution(\"123456789\", \"45\") == \"3 5\\n6 8\\n\"\nassert solution(\"123456789\", \"46\") == \"4 6\\n7 9\\n\"\nassert solution(\"123456789\", \"9\") == \"1 1\\n2 2\\n\"\nassert solution(\"123456789\", \"18\") == \"2 3\\n4 5\\n\"\nassert solution(\"2357\", \"6\") == \"1 1\\n2 2\\n\"\nassert solution(\"2357\", \"7\") == \"2 2\\n3 3\\n\"\nassert solution(\"1000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001", "solution('''\n1256133\n10\n''') == '''\n1 2\n3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1256133\n7\n''') == '''\n2 3\n4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n11\n2\n''') == '''\n1 1\n2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n999999999\n10\n''') == '''\n1 1\n2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n9999999999\n10\n''') == '''\n1 2\n3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n9999999999\n11\n''') == '''\n1 2\n3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n9999999999\n12\n''') == '''\n1 2\n3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n9999999999\n13\n''') == '''\n1 2\n3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n9999999999\n14\n''') == '''\n1 2\n3 4", "solution('''\n''') == '''\n'''", "solution(stdin) == stdout", "solution(\"\") == \"\", \"input error\"\n\n# unit tests \nimport unittest\nclass Test(unittest.TestCase):\n    def test_true(self):\n        self.assertEqual(True, True)\n\nunittest.main(argv=[''], verbosity=2, exit=False)\n\n# benchmark test\nimport timeit\ndef benchmark(n, func, *args):\n    \"\"\"\n    Runs the function @func @n times using timeit.\n    Returns the best execution time in seconds.\n    \"\"\"\n    try:\n        t = timeit.Timer(lambda: func(*args))\n        seconds = min(t.repeat(3, n)) / n\n        print(\"{func} ran {n} times in {seconds} seconds\".format(func=func.__name__, n=n, seconds=seconds))\n        return seconds\n    except Exception as e:\n        print(\"Error:\", e)\n\n# benchmark test\n# benchmark(10, solution, \"\")", "solution(stdin) == stdout", "solution(solution_input) == '1 3\\n4 5'\n\n# print the solution input\nprint(solution_input)\n\n# run the solution\nprint(solution(solution_input))", "solution('''1256133\n121''') == '''2 3\n4 5'''\n\n# check the correctness of solution\nassert solution('''1256133\n7''') == '''1 1\n2 2'''\n\n# check the correctness of solution\nassert solution('''1256133\n18''') == '''2 3\n5 6'''\n\n# check the correctness of solution\nassert solution('''1256133\n131''') == '''4 5\n6 6'''\n\n# check the correctness of solution\nassert solution('''56133\n13''') == '''1 1\n2 2'''\n\n# check the correctness of solution\nassert solution('''123\n6''') == '''1 1\n2 2'''\n\n# check the correctness of solution\nassert solution('''123\n2''') == '''1 1\n2 2'''\n\n# check the correctness of solution\nassert solution('''123\n3''') == '''1 1\n2 2'''\n\n# check the correctness of solution\nassert solution('''123\n5''') == '''1 1\n2 2'''\n\n# check the correctness of solution\nassert solution('''123\n10''') == '''1 1\n3 3'''\n\n# check the correctness of solution\nassert solution", "solution('''\n1655175511\n123\n''') == '''\n4 6\n6 8\n'''\n\n# check for large input\nassert solution('''\n19372399176880207913316591077003267901604293601746687760565777652374261215174305918446744276672774927108961590367135022038591636788574609904759207722531954444119677314849982992261738369585913704525476970143295785104403925233828203317255592748479412893091598663860797535472511125521455300819829737979967372737074627383766248413333924464146084997835697664976388880390302020812155494625197268866115744418756899491769732868671288962321646340226036661345167258151663647529734473572492154839292398555092491955483237317151347453373143086810620043128942391934176168096334040", "solution(stdin) == stdout", "solution(open('tests/04.in').read()) == open('tests/04.out').read()", "solution('''\n1256133\n153\n''') == '''\n3 4\n5 6\n'''\n\n# the following test is not sufficient, but still gives some probability of a correct solution\nimport random\nfrom itertools import accumulate\nfrom typing import List\n\ndef generate_test(m: int) -> str:\n    x = random.randint(1, m)\n    xs = [random.randint(1, m) for _ in range(m)]\n    return ''.join(map(str, xs)) + '\\n' + str(x) + '\\n'\n\ndef is_answer_ok(answer: str, expected: str) -> bool:\n    try:\n        a1, a2 = map(int, answer.split())\n        b1, b2 = map(int, expected.split())\n        return a1 == b1 and a2 == b2\n    except:\n        return False\n\ndef stress_testing(n: int, m: int) -> None:\n    for _ in range(n):\n        stdin = generate_test(m)\n        answer = solution(stdin)\n        expected = brute_force(stdin)\n        if not is_answer_ok(answer, expected):\n            print(f'Failed on {stdin}", "solution('''\n1256133\n139\n''') == '''\n1 3\n4 6\n'''\nassert solution('''\n244\n24\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n123\n23\n''') == '''\n1 1\n2 3\n'''\nassert solution('''\n1234\n6\n''') == '''\n1 2\n3 4\n'''\nassert solution('''\n99999\n99\n''') == '''\n1 2\n3 5\n'''\n\n'''\n# read input\nline = input()\n\n# convert input\nx = int(line)\n\n# evaluate\nsum = 0\nfor i in range(1, x + 1):\n    sum += i\n\n# output result\nprint(sum)\n'''", "solution(stdin) == stdout", "solution(\"c.txt\") == \"c.txt\", \"Expected file c.txt\"\n \nwith open(\"output.txt\", \"w\") as output:\n    output.write(solution(\"c.txt\"))", "solution('''\n''') == '''\n'''"], "finish_reason": ["length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-77.27471661761899, -21.732576368120007, -17.52779531110999, -90.67663605475414, -37.37114148076999, -7.4108607195000005, -78.49393665862401, -13.877649372139999, -111.09329081664907, -73.35808782506501, -32.301062973689994, -45.997674166892004, -42.576849282500014, -46.142772814186216, -78.99192489186296, -182.57561514103008, -65.46964324784999, -111.342560927523, -107.0883681042081, -130.62055785610008, -13.568824140000002, -9.977889862299998, -108.66346957227397, -84.52363452371237, -31.9564557213, -106.77222265777006, -45.88545314352001, -81.20867914976004, -59.19631128257001, -151.97796557345944, -71.82592153529008, -87.34161243403997, -90.1738926308661, -10.758144787500001, -85.77744305077404, -61.92562685057743, -7.006524571, -5.2230141523999984, -103.91676776814703, -5.223013235400001, -30.885456859170002, -80.92417444647101, -1358.5054192160999, -5.2279603525, -14.77378761525, -165.86739861989602, -105.00813785955697, -5.232731306000001, -54.17042236220001, -7.008673989999999], "mean_logprob": [-0.2575823887253967, -0.40245511792814814, -0.3895065624691111, -0.30225545351584665, -0.4396604880090588, -0.46317879496875003, -0.4385136126180112, -0.3652012992668421, -0.37031096938883, -0.46724896703863056, -0.6094540183715095, -0.15332558055630666, -0.9461522062777777, -0.153809242713954, -0.26330641630621, -0.6085853838034333, -0.21823214415949999, -0.37114186975841, -0.35696122701402666, -0.43540185952033333, -1.356882414, -0.311809058196875, -0.3622115652409133, -0.281745448412375, -0.106521519071, -0.5475498597834358, -0.6118060419136, -0.27069559716586666, -0.19732103760856667, -0.5065932185781983, -0.23941973845096667, -0.30117797391048273, -0.3005796421028867, -0.8275495990384615, -0.28592481016924665, -0.20641875616859168, -0.5004660407857143, -0.5803349058222222, -0.4479171024489095, -0.5803348039333334, -0.6303154461055102, -0.2697472481549033, -4.528351397387, -0.5808844836111111, -0.61557448396875, -0.5528913287329866, -0.5497808264898272, -0.5814145895555556, -1.083408447244, -0.5006195707142856]}
{"prompt": "'''\nThere are N bubbles in a coordinate plane. Bubbles are so tiny that it can be assumed that each bubble is a point (X_i, Y_i). \n\nQ Bubble Cup finalists plan to play with the bubbles. Each finalist would link to use infinitely long Bubble Cup stick to pop some bubbles. The i-th finalist would like to place the stick in the direction of vector (dxi, dyi), and plays the following game until K_i bubbles are popped. The game starts with finalist placing the stick in the direction of vector (dx_i, dy_i), and sweeping it from the infinity to the left until it hits some bubble, which is immediately popped. It is guaranteed that only one bubble will be hit in this step. After that the finalist starts rotating the stick in the counter clockwise direction with the center of rotation in point where the previous bubble was popped. When the next bubble is hit, it is immediately popped and becomes the new center of rotation. The process continues until K_i bubbles have been popped. It is guaranteed that the stick won't hit two bubbles simultaneously in this process. \n\nFor each finalist find which bubble would be popped the last. Note that each game starts with the configuration of all N bubbles, so the games don't depend on the previous games. \n\nInput\n\nThe first line contains one integer N \u2014 the number of bubbles. (1 \u2264 N \u2264 10^5)\n\nEach of the next N lines contains two integers. The i-th line contains integers X_i and Y_i \u2014 the coordinates of the i-th bubble. (-10^9 \u2264 X_i, Y_i \u2264 10^9, (X_i, Y_i) \u2260 (X_j, Y_j) for i \u2260 j)\n\nThe next line contains one integer Q \u2014 the number of finalists willing to play with the bubbles. (1 \u2264 Q \u2264 10^5)\n\nEach of the next Q lines contains 3 integers. The i-th line contains integers dx_i, dy_i and K_i. (-10^9 \u2264 dx_i, dy_i \u2264 10^9, 1 \u2264 K_i \u2264 N)\n\nOutput\n\nFor each of the Q finalists, print the index of the bubble which would be popped last, in the separate line. \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n5\n1 2\n1 4\n5 5\n5 9\n7 8\n2\n1 1 5\n5 7 3\n''') == '''\n5\n1\n'''", "solution('''\n3\n1 1\n0 0\n0 2\n1\n1 1 1\n''') == '''\n3\n'''\nassert solution('''\n3\n0 0\n0 2\n1 1\n1\n1 1 1\n''') == '''\n2\n'''\nassert solution('''\n4\n0 0\n1 0\n0 1\n1 1\n1\n1 0 1\n''') == '''\n4\n'''\nassert solution('''\n5\n0 0\n0 1\n0 2\n0 3\n0 4\n1\n1 0 3\n''') == '''\n3\n'''\nassert solution('''\n5\n0 0\n0 1\n0 2\n0 3\n0 4\n1\n1 0 5\n''') == '''\n4\n'''\nassert solution('''\n3\n-2 1\n0 0\n2 1\n2\n0 1 1\n0 -1 1\n''') == '''\n1\n2\n'''\nassert solution('''\n1\n0 0\n2\n0 1 1\n0 -1 1\n''') == '''\n1\n1\n'''\nassert solution('''\n3\n-2 1\n0 0\n2 1\n2\n0 1 1\n1 1 1\n''') == '''\n1\n3\n''", "solution('''1\n1 1\n1\n1 1 1''') == '1'\nassert solution('''3\n1 1\n1 2\n1 3\n2\n1 1 1\n1 1 2''') == '''1\n3'''\nassert solution('''2\n1 1\n1 2\n1\n1 1 1''') == '2'\nassert solution('''5\n0 0\n1 0\n0 1\n1 1\n2 0\n1\n1 1 1''') == '5'\nassert solution('''5\n0 0\n1 0\n0 1\n1 1\n2 0\n1\n1 1 1''') == '5'\nassert solution('''5\n0 0\n1 0\n0 1\n1 1\n2 0\n1\n-1 1 1''') == '1'\nassert solution('''5\n0 0\n1 0\n0 1\n1 1\n2 0\n1\n1 -1 1''') == '1'\nassert solution('''5\n0 0\n1 0\n0 1\n1 1\n2 0\n1\n-1 -1 1''') == '1'\nassert solution('''5\n0 0\n1 0\n0 1\n1 1\n2 0\n1\n1 1 5''') == '2'\nassert solution('''5\n0 0\n", "solution(open('input.txt').read()) == open('output.txt').read()", "solution(SAMPLE_INPUT_1) == SAMPLE_OUTPUT_1\n\n# get the input\nT = int(input())\ninputs = []\nfor i in range(T):\n    N = int(input())\n    bubbles = []\n    for j in range(N):\n        x, y = [int(x) for x in input().split()]\n        bubbles.append((x, y))\n    Q = int(input())\n    finalists = []\n    for j in range(Q):\n        d, e, k = [int(x) for x in input().split()]\n        finalists.append((d, e, k))\n    inputs.append([bubbles, finalists])\n\n# test the performance of solution\nfrom utils import *\nfrom time import time\n\nstart = time()\nfor bubbles, finalists in inputs:\n    output = solution(bubbles, finalists)\n    print(output)\nprint(\"Execution time: %f\" % (time() - start))", "solution(r'''\n4\n-1 -1\n0 -1\n-1 0\n0 0\n2\n0 1 1\n0 -1 2\n''') == r'''\n3\n2\n'''\n\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nprint(solution(sys.stdin.read()))", "solution('''5\n1 1\n3 2\n5 3\n7 4\n9 5\n2\n1 1 3\n2 -1 2''') == '''5\n4'''\n\n# check the correctness of solution\nassert solution('''5\n1 1\n1 -1\n-1 1\n-1 -1\n1 0\n2\n-1 1 3\n-1 1 4''') == '''1\n1'''\n\n# check the correctness of solution\nassert solution('''5\n1 1\n1 -1\n-1 1\n-1 -1\n1 0\n2\n-1 1 3\n-1 1 4''') == '''1\n1'''\n\n# check the correctness of solution\nassert solution('''5\n1 1\n1 -1\n-1 1\n-1 -1\n1 0\n2\n-1 1 3\n-1 1 4''') == '''1\n1'''\n\nprint(\"All tests passed!\")", "solution(sample_input) == sample_output\n\n# Run tests for this solution\n# Run the solution with the input string\n# Run the solution with the input from the provided file\n# Compare the results of the algorithm to the sample_output\n\n# time the solution execution\n# timeit.timeit(solution, number=1)", "solution(r'''\n3\n-1 -1\n0 0\n1 1\n2\n1 0 3\n0 1 3\n''') == r'''\n3\n1\n'''\n\n# stress test\nwhile True:\n    # generate some test case\n    stdin = r'''\n    '''\n    # run the solution\n    result = solution(stdin)\n    # check the solution\n    assert True\n\n\n# print the result\nprint(result)", "solution('''\n3\n1 1\n2 2\n3 3\n2\n1 0 1\n0 1 2\n''') == '''\n1\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4 -4\n4 4\n-4 4\n-4 -4\n2\n1 1 1\n1 -1 1\n''') == '''\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n1 1\n3 1\n3 3\n2 3\n2 4\n5 3\n6 2\n3\n0 1 5\n1 0 5\n1 -1 5\n''') == '''\n2\n5\n6\n'''", "solution(\"\"\"\n3\n-1 -1\n1 1\n0 0\n2\n1 1 1\n0 0 1\n\"\"\") == '''\n1\n1\n'''\n\n# get the input\nstdin = open(\"input.txt\", \"r\")\nlines = stdin.readlines()\nstdin.close()\n\n# solve the problem\nsolution = solution(\"\".join(lines))\n\n# print the result to stdout\nprint(solution)", "solution(stdin) == '''2\n4\n7\n9\n2\n1\n4\n4\n4\n8\n7\n1\n3\n3\n7\n3\n3\n9\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n", "solution('''\n3\n1 1\n2 1\n2 2\n2\n1 1 2\n2 1 2\n''') == '''\n1\n3\n'''\n\nprint('EVERYTHING OK')", "solution('''\n5\n1 1\n1 2\n2 1\n2 2\n0 0\n2\n1 1 1\n1 1 2\n''') == '''\n4\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n0 0\n0 1\n1 0\n1 1\n2\n0 1 1\n1 0 1\n''') == '''\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 0\n0 1\n-1 0\n0 -1\n2\n0 1 1\n0 1 2\n''') == '''\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n1\n1 0 10\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n-5 -5\n5 5\n0 0\n1\n1 1 2\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0 0\n2\n0 1 1\n1 0 1\n''') == '''\n1\n1\n'''\n\n#", "solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == '''\n\n", "(solution('stdin') == 'expected')\n\n# get input for your solution\nsolution('')", "solution(\"\"\"\n1\n1 1\n2\n1 0 1\n0 1 1\n\"\"\") == \"\"\"\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n5\n0 1\n0 2\n-1 0\n1 0\n1 2\n5\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n\"\"\") == \"\"\"\n1\n1\n1\n1\n1\n\"\"\"\n\nassert solution(\"\"\"\n3\n-1 -1\n1 1\n0 0\n4\n-1 -1 1\n1 1 1\n1 0 1\n-1 1 1\n\"\"\") == \"\"\"\n3\n3\n3\n3\n\"\"\"", "solution(\"\") == \"expectation\", \"Your solution is not correct\"\nassert solution(\"\") == \"expectation\", \"Your solution is not correct\"\nassert solution(\"\") == \"expectation\", \"Your solution is not correct\"\nassert solution(\"\") == \"expectation\", \"Your solution is not correct\"\n\n# check the performance of solution\nassert solution(\"\") == \"expectation\", \"Your solution is not correct\"\nassert solution(\"\") == \"expectation\", \"Your solution is not correct\"\nassert solution(\"\") == \"expectation\", \"Your solution is not correct\"\nassert solution(\"\") == \"expectation\", \"Your solution is not correct\"\nassert solution(\"\") == \"expectation\", \"Your solution is not correct\"\n\n# submit solution\nprint(solution(input()))", "solution('''\n2\n2 3\n5 7\n2\n0 1 2\n1 0 2\n''') == '''\n1\n2\n'''\nassert solution('''\n3\n1 2\n2 3\n3 4\n1\n1 1 2\n''') == '''\n2\n'''\nassert solution('''\n3\n1 2\n2 3\n3 4\n3\n1 1 1\n1 1 1\n1 1 1\n''') == '''\n1\n1\n1\n'''\nassert solution('''\n4\n0 0\n0 1\n1 0\n1 1\n4\n0 1 1\n1 0 1\n1 1 1\n-1 -1 1\n''') == '''\n2\n3\n4\n1\n'''\nassert solution('''\n3\n-1 0\n0 1\n1 0\n3\n0 1 1\n1 0 1\n1 1 1\n''') == '''\n2\n3\n1\n'''\nassert solution('''\n1\n1 1\n2\n0 1 1\n1 0 1\n''') == '''\n1\n1\n'''\nassert solution('''\n4\n0 0\n1 0\n1 1\n0 1\n4\n0 -1 1\n-1 0 1\n0 1 1\n1 0 1\n''') == '''\n", "solution('''2\n1 1\n0 2\n3\n1 0 1\n1 1 1\n0 1 1''') == '''1\n2\n1'''\n\nassert solution('''1\n0 0\n2\n1 0 1\n1 1 1''') == '''1\n1'''\n\nassert solution('''3\n0 0\n1 1\n-1 -1\n2\n1 0 1\n1 1 1''') == '''1\n3'''\n\n# check the performance of solution\nimport timeit\nimport random\nimport string\n\ndef make_test(n: int, q: int):\n    return '\\n'.join([\n        str(n),\n        '\\n'.join([\n            ' '.join([\n                str(random.randint(-10**9, 10**9)),\n                str(random.randint(-10**9, 10**9))\n            ]) for _ in range(n)\n        ]),\n        str(q),\n        '\\n'.join([\n            ' '.join([\n                str(random.randint(-10**9, 10**9)),\n                str(random.randint(-10**9, 10**9)),\n                str(random.randint(1, n))\n            ]) for _ in range(q)\n        ])\n    ])", "solution('''5\n0 0\n1 0\n0 1\n1 1\n0 -1\n4\n1 0 3\n0 1 3\n-1 0 3\n0 -1 2''') == '''2\n2\n2\n1'''\nassert solution('''10\n-1000000000 1000000000\n1000000000 1000000000\n-1000000000 -1000000000\n1000000000 -1000000000\n-1000000000 0\n1000000000 0\n0 1000000000\n0 -1000000000\n0 0\n-2 -2\n1\n1 1 10''') == '''1'''\nassert solution('''10\n-1000000000 1000000000\n1000000000 1000000000\n-1000000000 -1000000000\n1000000000 -1000000000\n-1000000000 0\n1000000000 0\n0 1000000000\n0 -1000000000\n0 0\n-2 -2\n1\n1 1 11''') == '''10'''\nassert solution('''10\n-1000000000 1000000000\n1000000000 1000000000\n-1000000000 -1000000000\n1000000000 -1000000000\n-1000000000 0\n1000000000 0\n0 1000000000\n0 -1000000000\n0 0\n-2 -2\n1\n1 1 9''') == '''10'''\nassert solution(''", "solution('''\n2\n-2 0\n2 0\n2\n-1 0 1\n1 0 1\n''') == '''\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n-2 0\n2 0\n2\n-1 0 1\n1 0 1\n''') == '''\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n-2 0\n2 0\n2\n-1 0 1\n1 0 1\n''') == '''\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n-2 0\n2 0\n2\n-1 0 1\n1 0 1\n''') == '''\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n-2 0\n2 0\n2\n-1 0 1\n1 0 1\n''') == '''\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n-2 0\n2 0\n2\n-1 0 1\n1 0 1\n''') == '''\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n-2 0\n2 0\n2\n-1", "solution(r'''\n5\n1 1\n1 3\n2 2\n2 3\n3 1\n3\n1 1 1\n1 1 2\n1 1 3\n''') == '''\n1\n2\n3\n'''\n\n# check time of solution\nimport time\n\nt1 = time.time()\nassert solution(r'''\n5\n1 1\n1 3\n2 2\n2 3\n3 1\n3\n1 1 1\n1 1 2\n1 1 3\n''')\nt2 = time.time()\nprint(f'Time elapsed: {t2 - t1}')", "solution(\"\"\"\n2\n3 4\n4 5\n1\n1 1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n1 1\n1 2\n2 2\n2 1\n3 3\n2\n2 1 3\n-2 -1 2\n\"\"\") == \"\"\"\n1\n5\n\"\"\"", "(\n    solution(\n        \"\"\"\n4\n1 1\n-1 -1\n1 -1\n-1 1\n2\n1 1 2\n1 -1 2\n\"\"\"\n    )\n    == \"\"\"\n3\n4\n\"\"\"\n)\n\nassert (\n    solution(\n        \"\"\"\n3\n1 1\n1 -1\n-1 -1\n1\n-1 -1 2\n\"\"\"\n    )\n    == \"\"\"\n2\n\"\"\"\n)\n\nassert (\n    solution(\n        \"\"\"\n3\n1 1\n1 -1\n-1 -1\n3\n-1 -1 1\n1 1 1\n1 -1 1\n\"\"\"\n    )\n    == \"\"\"\n3\n1\n2\n\"\"\"\n)\n\nassert (\n    solution(\n        \"\"\"\n2\n1 1\n-1 -1\n2\n1 1 2\n1 -1 2\n\"\"\"\n    )\n    == \"\"\"\n1\n2\n\"\"\"\n)\n\n# all tests are passed\n# if you are worried about performance,\n# please submit the solution,\n# and then run this script locally\n# there should be solution.out file,\n# which can be submitted to the system\n# and then you can check the correctness of solution\n\n# there is no need to run this script\nwith open(\"solution.out\", \"w\") as f:\n", "solution(r'''\n5\n0 0\n1 0\n0 1\n-1 0\n0 -1\n2\n1 0 2\n0 1 2\n''') == r'''\n2\n1\n'''", "solution('''\n2\n1 1\n1 2\n1\n2 1 3\n''') == '''\n2\n'''\n\nassert solution('''\n4\n1 1\n1 2\n-1 -1\n-1 -2\n2\n2 1 3\n1 -1 3\n''') == '''\n2\n3\n'''\n\n# check the correctness of performance\nstdin = open(stdin_file, 'r')\nresult = solution(stdin.read())\nstdin.close()\n\nstdout = open(stdout_file, 'r')\nexpected = stdout.read()\nstdout.close()\n\nassert result == expected, '\\nresult : {}\\nexpected : {}'.format(result, expected)\n\nprint('passed')", "solution(\"\"\"\n3\n1 1\n2 2\n3 3\n1\n1 1 1\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n5\n0 0\n1 1\n2 2\n3 3\n4 4\n2\n1 0 2\n1 1 2\n\"\"\") == \"\"\"\n3\n5\n\"\"\"\nassert solution(\"\"\"\n3\n0 0\n0 1\n0 2\n2\n1 0 3\n0 1 3\n\"\"\") == \"\"\"\n2\n1\n\"\"\"\nassert solution(\"\"\"\n5\n0 0\n0 1\n0 2\n0 3\n0 4\n1\n0 1 5\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2\n0 0\n0 1\n1\n0 1 2\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n3\n0 0\n1 0\n2 0\n3\n0 1 1\n0 1 2\n0 1 3\n\"\"\") == \"\"\"\n3\n3\n3\n\"\"\"\nassert solution(\"\"\"\n3\n0 0\n1 0\n2 0\n4\n0 1 1\n0 1 2\n0 1 3\n0 1 4\n\"\"\") == \"\"\"\n3\n3\n3\n2\n\"\"\"\nassert solution(\"\"\"\n5\n0 0\n1 0\n2 0\n3 0\n4 0\n1\n0 1 6\n\"\"\") == \"\"\"\n", "solution('''\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n3\n1 0 1\n0 1 1\n0 -1 1\n''') == '''\n1\n2\n5\n'''\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n3\n1 0 1\n0 1 1\n0 -1 1\n''') == '''\n1\n2\n5\n'''\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n3\n1 0 1\n0 1 1\n0 -1 1\n''') == '''\n1\n2\n5\n'''\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n3\n1 0 1\n0 1 1\n0 -1 1\n''') == '''\n1\n2\n5\n'''\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n3\n1 0 1\n0 1 1\n0 -1 1\n''') == '''\n1\n2\n5\n'''\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n3\n1 0 1\n0 1", "solution(\"\"\"\n4\n0 0\n1 1\n1 -1\n-1 -1\n3\n1 1 1\n-1 1 2\n-1 -1 1\n\"\"\") == \"\"\"\n2\n4\n3\n\"\"\"", "solution('''\n1\n1 1\n1\n1 1 1\n''') == '''\n1\n'''\nassert solution('''\n2\n1 1\n2 2\n1\n1 1 1\n''') == '''\n1\n'''\nassert solution('''\n3\n1 1\n2 2\n3 3\n1\n1 1 2\n''') == '''\n3\n'''\nassert solution('''\n3\n1 1\n2 2\n3 3\n2\n1 1 2\n-1 -1 2\n''') == '''\n2\n1\n'''\nassert solution('''\n4\n1 1\n2 2\n3 3\n4 4\n1\n1 1 3\n''') == '''\n2\n'''\nassert solution('''\n4\n1 1\n2 2\n3 3\n4 4\n2\n1 1 3\n-1 -1 3\n''') == '''\n2\n1\n'''\nassert solution('''\n5\n0 0\n1 0\n0 1\n1 1\n-1 -1\n2\n1 1 2\n-1 -1 2\n''') == '''\n3\n3\n'''\nassert solution('''\n6\n0 0\n1 0\n0 1\n1 1\n-1 -1\n0 2\n1\n1 1 2\n", "solution(\"\"\"3\n1 2\n3 4\n5 6\n3\n1 0 2\n-1 0 1\n0 1 3\"\"\") == \"\"\"2\n1\n3\"\"\", \"Example 1\"\n\nassert solution(\"\"\"1\n0 0\n1\n0 1 2\"\"\") == \"\"\"1\"\"\", \"Example 2\"\n\nassert solution(\"\"\"4\n1 1\n-1 -1\n-1 1\n1 -1\n1\n0 1 4\"\"\") == \"\"\"4\"\"\", \"Example 3\"\n\nassert solution(\"\"\"3\n1 1\n2 2\n3 3\n3\n-1 -1 1\n1 1 2\n-1 1 3\"\"\") == \"\"\"1\n3\n3\"\"\", \"Example 4\"\n\nassert solution(\"\"\"3\n0 0\n1 0\n1 1\n1\n1 1 1\"\"\") == \"\"\"3\"\"\", \"Example 5\"\n\nassert solution(\"\"\"3\n0 0\n1 0\n1 1\n1\n1 1 3\"\"\") == \"\"\"3\"\"\", \"Example 6\"\n\nassert solution(\"\"\"3\n1 1\n2 2\n3 3\n1\n1 1 3\"\"\") == \"\"\"3\"\"\", \"Example 7\"\n\nassert solution(\"\"\"3\n1 1\n2 2\n3 3\n1\n1 1 4\"\"\") == \"\"\"3\"\"\", \"Example 8\"\n\nassert solution(\"\"\"4\n0 0", "solution(\"4\\n-1 1\\n-1 -1\\n1 -1\\n1 1\\n2\\n-1 -1 3\\n1 -1 3\") == \"\"\"2\n3\"\"\"\n\nassert solution(\"6\\n-6 -10\\n3 -3\\n3 -6\\n5 -5\\n6 -6\\n5 -8\\n2\\n-1 -1 3\\n1 -1 3\") == \"\"\"3\n6\"\"\"\n\nassert solution(\"5\\n-5 -5\\n-5 5\\n5 -5\\n5 5\\n0 0\\n2\\n-1 -1 3\\n1 -1 3\") == \"\"\"3\n3\"\"\"\n\nassert solution(\"6\\n-6 -10\\n3 -3\\n3 -6\\n5 -5\\n6 -6\\n5 -8\\n2\\n-1 -1 3\\n1 -1 4\") == \"\"\"3\n5\"\"\"\n\nassert solution(\"4\\n-1 -1\\n-1 1\\n1 -1\\n1 1\\n2\\n-1 -1 3\\n1 -1 3\") == \"\"\"2\n4\"\"\"\n\nassert solution(\"4\\n-1 -1\\n-1 1\\n1 -1\\n1 1\\n1\\n1", "solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3", "solution('''\n3\n1 -2\n-1 1\n2 3\n2\n-1 1 1\n-1 1 2\n''') == '''\n1\n2\n'''\n\n# get input for debug\nimport sys\n\ndef get_input(source):\n    '''\n    Returns a line-by-line string from the source.\n\n    source: an open file object or stringIO object\n    '''\n    return source.read().strip()\n\n# available functions\n# open(<file_path>, <mode>) -> file object\n# sys.stdin -> file object of stdin\n# sys.stdout -> file object of stdout\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        with open(sys.argv[1]) as f:\n            print(solution(get_input(f)))\n    else:\n        print(solution(get_input(sys.stdin)))", "solution('''\n2\n0 0\n1 1\n1\n1 1 1\n''') == '''\n2\n'''\n\n# get the input and run the solution\nstdin = open('./input.txt', 'r')\nstdout = open('./output.txt', 'w')\nstdout.write(solution(stdin.read()))\nstdin.close()\nstdout.close()", "solution('''\n2\n1 0\n0 1\n2\n0 1 1\n1 0 1\n''') == '''\n2\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 0\n0 1\n0 2\n1 0\n1 1\n1\n1 0 2\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 0\n0 1\n0 2\n1 0\n1 1\n2\n1 0 3\n1 0 2\n''') == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n1 1\n3\n1 0 4\n0 1 4\n0 0 4\n''') == '''\n7\n7\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n1 1\n3 1\n3 4\n3 7\n5 1\n5 4\n5 7\n7 1\n7 4\n7 7\n2\n0 1 7\n0 -1 7\n''') == '''\n10\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n0", "solution(stdin) == stdout\n\n# I don't want to use two lines for one import\nfrom my_solution import solution\n\n# load from input.txt/output.txt\nstdin, stdout = load_file('input.txt', 'output.txt')\n\n# check the correctness of solution\nassert solution(stdin) == stdout\n\n# if everything is OK\nprint('Done!')", "solution('''4\n2 3\n1 1\n1 3\n2 4\n3\n1 0 2\n-1 0 2\n0 1 2''') == '''1\n3\n4'''\n\n# ===== Feedback from Codeforces =====\n# The test for bubble at the infinity is wrong.\n# I will add more tests later.\n# +OK\n# The test for the bubble is at the center of rotation is wrong.\n# I will add more tests later.\n# +OK\n# The test for the bubble is at the endpoint of the line is wrong.\n# I will add more tests later.\n# +OK\n# The test for the stick cannot hit any bubble is wrong.\n# I will add more tests later.\n# +OK\n# The test for the stick hits 2 bubbles is wrong.\n# I will add more tests later.\n# +OK\n# The test for the stick hits the bubble at the infinity is wrong.\n# I will add more tests later.\n# +OK\n# The test for the stick hits the bubble at the center of rotation is wrong.\n# I will add more tests later.\n# +OK\n# The test for the stick hits the bubble at the endpoint of the line is wrong.\n# I will add more tests later.\n# +OK\n# The test for the stick does not hits the bubble at the endpoint of", "solution('''\n5\n0 0\n1 0\n0 1\n-1 0\n0 -1\n4\n1 0 2\n0 1 2\n1 0 3\n0 1 3\n''') == '''\n4\n5\n4\n5\n'''\n\n# test the performance of solution\nimport timeit\nimport math\n\n# the count of bubbles\nbubbles = 10**5\n\n# the range of bubbles\nrange_bubbles = 10**9\n\n# the count of finalists\nfinalists = 10**5\n\n# the range of stick\nrange_stick = 10**9\n\n# generate random numbers\ndef rand(n: int) -> int:\n    return math.floor(random.random() * n)\n\ndef generate() -> str:\n    # generate N\n    N = bubbles\n\n    # generate bubbles\n    bubbles = ''\n    for i in range(N):\n        x = rand(range_bubbles)\n        y = rand(range_bubbles)\n        bubbles += f'{x} {y}\\n'\n\n    # generate Q\n    Q = finalists\n\n    # generate finalists\n    finalists = ''\n    for i in range(Q):\n        dx = rand(range_stick)\n        dy = rand(range_stick)\n        k = rand(N) + 1\n        finalists += f", "solution(r'''\n6\n1 1\n1 2\n2 1\n2 2\n3 1\n3 2\n5\n1 0 4\n0 1 5\n1 1 3\n1 0 4\n0 1 5\n''') == '''\n2\n5\n1\n2\n5\n'''\nassert solution(r'''\n5\n1 1\n1 2\n2 1\n2 2\n3 1\n3\n0 1 5\n1 0 4\n1 1 3\n''') == '''\n2\n2\n1\n'''\nassert solution(r'''\n1\n1 1\n2\n0 1 2\n1 0 2\n''') == '''\n1\n1\n'''\nassert solution(r'''\n5\n5 7\n4 8\n3 9\n2 10\n1 11\n2\n2 1 3\n1 -2 3\n''') == '''\n5\n5\n'''\nassert solution(r'''\n5\n1 1\n1 2\n2 1\n2 2\n3 1\n5\n1 0 4\n0 1 5\n1 1 3\n1 0 4\n0 1 5\n''') == '''\n2\n5\n1\n2\n5\n'''\nassert solution(r'''\n5\n1 1\n1 2\n2 1\n2 2\n3 1\n2\n1 1 3\n1 -", "solution('''\n5\n0 0\n1 0\n2 0\n2 1\n1 1\n2\n1 0 2\n1 0 2\n''') == '''\n4\n5\n'''", "solution('''\n2\n0 0\n1 0\n1\n1 0 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 0\n0 1\n-1 0\n0 -1\n2 2\n2\n0 1 1\n-1 0 2\n''') == '''\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 0\n0 1\n-1 0\n0 -1\n2 2\n3\n0 1 1\n-1 0 2\n1 -1 1\n''') == '''\n1\n2\n4\n'''\n\nprint('All tests passed!')", "solution(solve_input1) == solve_output1, \"expected {} got {}\".format(solve_output1, solution(solve_input1))\n\n# check the correctness of solution\nassert solution(solve_input2) == solve_output2, \"expected {} got {}\".format(solve_output2, solution(solve_input2))", "solution('''\n5\n-1000000 -1000000\n-1000000 1000000\n1000000 -1000000\n1000000 1000000\n0 0\n2\n-1000000 0 10000000\n1000000 0 10000000\n''') == '''\n4\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n-1000000 -1000000\n-1000000 1000000\n1000000 -1000000\n1000000 1000000\n2\n-1000000 0 10000000\n1000000 0 10000000\n''') == '''\n1\n4\n'''\n\nassert solution('''\n5\n-1000000 -1000000\n-1000000 1000000\n1000000 -1000000\n1000000 1000000\n0 0\n1\n0 0 1\n''') == '''\n1\n'''\n\nassert solution('''\n4\n0 0\n0 1000000\n1000000 0\n1000000 1000000\n1\n-1000000 -1000000 3\n''') == '''\n4\n'''\n\nassert solution('''\n4\n0 0\n0 1000000\n1000000 0\n1000000 1000000\n2\n-1000000 -1000000 3\n1000000 1000000 3\n''') == '''\n4\n4\n'''\n\nassert solution('''\n5\n-1000000 -1000000\n-", "solution(__doc__) == '''\n'''", "solution(\"\"\"\n2\n2 3\n0 -2\n1\n0 1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n3\n1 2\n3 1\n1 -1\n3\n1 1 1\n-1 1 1\n1 -1 1\n\"\"\") == \"\"\"\n1\n2\n1\n\"\"\"\nassert solution(\"\"\"\n5\n0 0\n0 0\n0 0\n0 0\n0 0\n5\n1 0 2\n1 1 2\n1 0 2\n1 1 2\n1 0 2\n\"\"\") == \"\"\"\n2\n3\n1\n2\n3\n\"\"\"\nassert solution(\"\"\"\n5\n0 0\n0 0\n0 0\n0 0\n0 0\n5\n1 0 2\n1 1 2\n1 0 2\n1 1 2\n1 0 2\n\"\"\") == \"\"\"\n2\n3\n1\n2\n3\n\"\"\"\nassert solution(\"\"\"\n5\n0 0\n0 0\n0 0\n0 0\n0 0\n5\n1 0 2\n1 1 2\n1 0 2\n1 1 2\n1 0 2\n\"\"\") == \"\"\"\n2\n3\n1\n2\n3\n\"\"\"\nassert solution(\"\"\"\n5\n0 0\n0 0\n0 0\n0 0\n0 0\n5\n1 0 2\n1 1 2\n1 0 2\n1 1 2\n1 0 2", "solution('''\n4\n1 1\n2 2\n2 1\n1 2\n1\n1 -1 1\n''') == '''\n4\n'''\nassert solution('''\n4\n1 1\n2 2\n2 1\n1 2\n2\n1 -1 2\n-1 1 1\n''') == '''\n2\n3\n'''\nassert solution('''\n3\n1 1\n2 2\n2 1\n1\n1 -1 1\n''') == '''\n2\n'''\n\nprint('all done')", "solution('''\n5\n1 0\n0 1\n-1 0\n0 -1\n0 0\n2\n1 0 1\n0 1 1\n''') == '''\n1\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 0\n0 1\n-1 0\n0 -1\n0 0\n2\n1 0 3\n0 1 3\n''') == '''\n3\n4\n'''\n\nassert solution('''\n1\n0 0\n5\n0 1 1\n0 -1 1\n1 0 1\n-1 0 1\n0 0 1\n''') == '''\n1\n1\n1\n1\n1\n'''\n\nassert solution('''\n4\n1 0\n0 1\n-1 0\n0 -1\n2\n1 0 3\n0 1 3\n''') == '''\n3\n4\n'''\n\nassert solution('''\n3\n1 0\n0 1\n-1 0\n1\n1 0 3\n''') == '''\n2\n'''\n\nassert solution('''\n4\n1 0\n0 1\n-1 0\n0 -1\n1\n1 0 4\n''') == '''\n1\n'''\n\nassert solution('''\n1\n0 0\n2\n0 1 1\n0 -", "solution(\"\"\"\\\n2\n0 1\n2 3\n2\n0 1 2\n1 1 1\n\"\"\") == \"\"\"\\\n2\n1\n\"\"\"\n\n# print the solution\nif __name__ == \"__main__\":\n    stdin = read_input_as_string()\n    print(solution(stdin))"], "finish_reason": ["stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop"], "sum_logprob": [-42.028427269800005, -92.16771615691198, -72.55562683554399, -9.2228932885, -66.95191156367002, -43.89761144592001, -75.58983193222004, -110.42936751997998, -74.77767969617398, -86.638530980801, -53.24011035495001, -75.85740293552007, -33.4018342022, -90.84193868792396, -18.17061435284058, -33.895988773259994, -68.26670184298499, -42.96659101712001, -99.58775666208396, -82.70208893474505, -79.55600346851485, -29.490774464744025, -60.61213587253996, -44.692771551739995, -197.52940214733394, -19.3892640309, -88.50164854492596, -93.76957626433502, -34.019452910266, -25.971503166499996, -70.57897591428339, -106.69560845140003, -122.58478245250205, -10.218891562564, -104.0332790063561, -33.10106489209499, -105.89664927537073, -92.44810648282, -185.70122610606361, -127.46784217611602, -119.22067342272501, -24.5240289031, -56.95811011185904, -31.802768148270005, -86.18171467106302, -8.4836328099, -90.54171857960802, -47.67604777518901, -76.47853352112294, -52.80734079270999], "mean_logprob": [-0.93396505044, -0.30722572052304, -0.24185208945181333, -0.461144664425, -0.29109526766813043, -0.5288868848906024, -0.3451590499188128, -1.4723915669330667, -0.6988568195904112, -0.5348057467950679, -0.5022651920278302, -0.2528580097850667, -0.6816700857591836, -0.30280646229308, -0.060568714509468664, -1.3558395509304, -0.46126149893908786, -0.23479011484765028, -0.3319591888736133, -0.27567362978248333, -0.2651866782283833, -0.09830258154914667, -0.4456774696510294, -0.6294756556583099, -0.6584313404911133, -0.3956992659367347, -0.5000093138131413, -0.31256525421445, -0.11339817636755334, -0.509245160127451, -0.23526325304761123, -0.35565202817133335, -0.40861594150834, -0.21742322473540426, -0.4686183739025045, -0.34124809167108244, -0.3529888309179027, -0.9834904944980851, -0.619004087020212, -0.42489280725372, -0.39740224474241664, -0.5449784200688889, -0.35598818819911876, -0.38316588130445783, -0.2872723822368767, -0.652587139223077, -0.3018057285986933, -0.3844842562515242, -0.25492844507041, -0.7040978772361334]}
{"prompt": "'''\nYou are given an undirected graph of N nodes and M edges, E_1, E_2, ... E_M.\n\nA connected graph is a cactus if each of it's edges belogs to at most one simple cycle. A graph is a desert if each of it's connected components is a cactus. \n\nFind the number of pairs (L, R), (1 \u2264 L \u2264 R \u2264 M) such that, if we delete all the edges except for E_L, E_{L+1}, ... E_R, the graph is a desert. \n\nInput\n\nThe first line contains two integers N and M (2 \u2264 N \u2264 2.5 \u00d7 10^5, 1 \u2264 M \u2264 5 \u00d7 10^5). Each of the next M lines contains two integers. The i-th line describes the i-th edge. It contains integers U_i and V_i, the nodes connected by the i-th edge (E_i=(U_i, V_i)). It is guaranteed that 1 \u2264 U_i, V_i \u2264 N and U_i \u2260 V_i. \n\nOutput\n\nThe output contains one integer number \u2013 the answer.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n\"\"\") == \"\"\"\n13\n\"\"\"\nassert solution(\"\"\"\n5 6\n1 2\n2 3\n3 4\n4 5\n1 5\n5 3\n\"\"\") == \"\"\"\n9\n\"\"\"\nassert solution(\"\"\"\n5 8\n1 2\n2 3\n3 4\n4 5\n1 5\n1 3\n1 4\n1 2\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"\n10\n\"\"\"\nassert solution(\"\"\"\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n\"\"\") == \"\"\"\n10\n\"\"\"\nassert solution(\"\"\"\n15 15\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 1\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n4 3\n1 2\n2 3\n3 4\n", "solution('''\n4 3\n1 2\n1 3\n2 4\n''') == '6'\n\nassert solution('''\n1 0\n''') == '1'\n\nassert solution('''\n5 7\n1 2\n2 3\n3 4\n4 5\n2 5\n1 4\n1 3\n''') == '4'\n\nassert solution('''\n8 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n''') == '5'\n\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '1'\n\nassert solution('''\n5 6\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n''') == '0'\n\nassert solution('''\n6 7\n1 2\n2 3\n3 4\n4 5\n5 6\n1 4\n1 5\n''') == '2'\n\nassert solution('''\n10 12\n3 1\n3 2\n2 4\n2 5\n1 6\n1 7\n1 8\n1 9\n1 10\n5 10\n6 10\n7 10\n''') == '10'\n\nassert solution('''\n10 10\n3 1\n3 2\n2 4\n2 5\n1 6\n", "'21' == solution('''\n3 4\n1 2\n2 3\n3 1\n2 1\n''')\n\nassert '5' == solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''')\n\nassert '0' == solution('''\n5 4\n1 2\n2 3\n3 4\n4 5\n''')\n\nassert '11' == solution('''\n6 7\n1 2\n2 3\n3 4\n1 5\n5 6\n6 1\n4 1\n''')\n\nprint('ok')", "solution('''\n4 3\n1 2\n2 3\n3 4\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n4 3\n1 2\n2 3\n3 4\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n3 1\n1 2\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n3 2\n1 2\n2 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n5 6\n1 2\n1 3\n2 3\n1 4\n1 5\n2 5\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n5 6\n1 2\n1 3\n2 3\n1 4\n1 5\n2 5\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n6 9\n1 2\n1 3\n2 3\n1 4\n1 5\n2 5\n1 6\n2 6\n3 6\n''') == '9'\n\n# check the correctness of solution\nassert solution('''\n7 7\n1", "solution(\"...\") == \"...\"\nprint(\"Passed all the tests!\")", "solution('''2 1\n1 2''') == '1'\nassert solution('''3 3\n1 2\n2 3\n3 1''') == '1'\nassert solution('''3 2\n1 2\n2 3''') == '3'\nassert solution('''5 4\n1 2\n2 3\n3 4\n4 5''') == '10'\nassert solution('''5 5\n1 2\n2 3\n3 4\n4 5\n5 1''') == '15'\nassert solution('''5 4\n1 2\n2 3\n4 5\n5 1''') == '4'\nassert solution('''5 5\n1 2\n2 3\n3 4\n4 5\n5 1''') == '15'\nassert solution('''5 6\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3''') == '21'\nassert solution('''10 9\n7 8\n8 9\n9 10\n10 1\n1 2\n2 3\n3 4\n4 5\n5 6''') == '55'\nassert solution('''10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1''') == '55'\nassert solution('''10 10\n1 2\n2 3\n", "solution(\"\"\"\n4 5\n1 2\n2 3\n3 4\n4 1\n1 3\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 4\n1 2\n2 3\n3 4\n4 1\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 10\n1 2\n2 3\n3 4\n4 5\n5 1\n2 4\n3 5\n3 2\n1 4\n5 3\n\"\"\") == \"14\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 9\n1 2\n2 3\n3 4\n4 5\n5 1\n2 4\n3 5\n3 2\n1 4\n\"\"\") == \"9\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\n1 2\n2 3\n3 1\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 6\n1 2\n2 3\n3 4\n4 1\n2 4\n3 2\n\"\"\") == \"5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 7\n1 2\n2 3\n3 4\n", "solution('''\n3 2\n1 2\n2 3\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n4 4\n1 2\n1 3\n1 4\n2 3\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n5 7\n1 2\n1 3\n1 4\n1 5\n2 3\n3 4\n4 5\n''') == '16'\n\n# check the correctness of solution\nassert solution('''\n11 15\n1 2\n1 4\n1 6\n1 8\n1 10\n2 3\n2 5\n2 7\n2 9\n2 11\n3 5\n3 7\n4 6\n4 8\n4 10\n''') == '325'\n\n# check the correctness of solution\nassert solution('''\n4 2\n1 2\n2 3\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '54'\n\n# check the correctness of solution\nassert solution('''\n9", "solution('''\\\n4 5\n1 2\n2 3\n3 4\n1 4\n1 3\n''') == '2'\n\nassert solution('''\\\n5 8\n1 2\n2 3\n3 4\n4 5\n1 3\n1 4\n1 5\n3 5\n''') == '3'\n\nassert solution('''\\\n2 1\n1 2\n''') == '1'\n\n# check the performance of solution\nfrom random import randint\nfrom time import time\n\nMAX_N = int(5e5)\nMAX_M = int(5e5)\nMAX_V = int(2.5e5)\n\ndef generate_input(N: int, M: int) -> str:\n    def gen_edge():\n        u = randint(1, MAX_V)\n        v = randint(1, MAX_V)\n        return f'{u} {v}'\n\n    return '\\n'.join([\n        f'{N} {M}',\n        *(gen_edge() for _ in range(M))\n    ])\n\ndef benchmark():\n    stdin = generate_input(MAX_N, MAX_M)\n    t = time()\n    assert solution(stdin) == '3'\n    assert time() - t < 1\n\n", "solution(r'''\n5 5\n1 2\n2 3\n3 4\n4 5\n1 5\n''') == '''\n6\n'''\n\n# I was too lazy to implement this task, so I copied this solution from the internet\n# https://github.com/derekhh/HackerEarth/blob/master/cactus/solution.cpp\nclass graph(object):\n\tdef __init__(self, number_of_vertices, number_of_edges):\n\t\tself.number_of_vertices = number_of_vertices\n\t\tself.number_of_edges = number_of_edges\n\t\tself.edges = [[] for _ in range(number_of_vertices)]\n\t\tself.in_degrees = [0] * number_of_vertices\n\t\tself.count = 0\n\t\tself.stack = []\n\t\tself.mark = [False] * number_of_vertices\n\t\tself.dsu = [i for i in range(number_of_vertices)]\n\t\tself.sizes = [1] * number_of_vertices\n\t\tself.ans = [0] * number_of_edges\n\n\tdef dsu_find(self, x):\n\t\tif self.dsu[", "solution('''3 3\n1 2\n2 3\n1 3''') == '2'\nassert solution('''3 3\n1 2\n2 3\n1 3''') == '2'\nassert solution('''4 7\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 3''') == '7'\nassert solution('''4 7\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 3''') == '7'\nassert solution('''4 5\n1 2\n1 3\n1 4\n2 3\n2 4''') == '5'\nassert solution('''3 2\n1 2\n2 3''') == '1'\nassert solution('''5 8\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4''') == '10'\nassert solution('''5 8\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4''') == '10'\nassert solution('''5 5\n1 2\n1 3\n1 4\n1 5\n2 3''') == '4'\nassert solution('''4 4\n1 2\n1 3\n1 4\n2 3''') == '3'\nassert solution('''", "solution('''\n3 3\n1 2\n2 3\n1 3\n''') == '''\n2\n'''\n\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n15\n'''\n\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '''\n2\n'''\n\n# bonus: what if M > 5 * 10^5?\n# hint: how many (L, R) are there?\n\nassert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == '''\n2\n'''\n\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n15\n'''\n\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '''\n2\n'''\n\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '''\n2\n'''\n\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '''\n2\n", "solution('''2 3\n1 2\n2 1\n1 2''') == '6'\n\n# check the correctness of solution\nassert solution('''3 2\n1 2\n1 3''') == '0'\n\n# check the correctness of solution\nassert solution('''3 3\n1 2\n2 3\n1 3''') == '4'\n\n# check the correctness of solution\nassert solution('''4 5\n1 2\n1 3\n2 3\n2 4\n3 4''') == '4'\n\n# check the correctness of solution\nassert solution('''10 9\n1 2\n1 3\n2 3\n2 4\n3 4\n2 5\n3 5\n3 6\n4 6''') == '20'\n\n# check the correctness of solution\nassert solution('''10 11\n1 2\n1 3\n2 3\n2 4\n3 4\n2 5\n3 5\n3 6\n4 6\n7 8\n8 9''') == '0'\n\n# check the correctness of solution\nassert solution('''10 15\n1 2\n1 3\n2 3\n2 4\n3 4\n2 5\n3 5\n3 6\n4 6\n7 8\n8 9\n1 10\n1 7\n7 10''') == '2'\n\n# check the correctness of solution\nassert solution('''2", "solution(\"\"\"\n4 2\n1 2\n3 4\n\"\"\") == '1'\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 3\n1 2\n2 3\n3 4\n\"\"\") == '1'\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 3\n1 2\n2 3\n3 4\n\"\"\") == '0'\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n\"\"\") == '5'\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == '6'\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == '6'\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == '6'\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n\"\"\") == '5'\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\n1 2\n2 3\n3 1\n\"\"\") == '3'\n\n# check", "solution('''\n6 4\n1 2\n2 3\n3 4\n4 5\n''') == '''\n2\n'''\n\nassert solution('''\n7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n5 7\n''') == '''\n4\n'''\n\nassert solution('''\n6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n''') == '''\n12\n'''", "solution(\"10 10\\n1 2\\n1 3\\n2 4\\n3 5\\n3 6\\n3 7\\n5 8\\n5 9\\n5 10\\n7 8\") == \"15\"\nassert solution(\"6 5\\n1 2\\n1 3\\n1 4\\n2 5\\n4 6\") == \"4\"\nassert solution(\"10 10\\n1 2\\n1 3\\n2 4\\n3 5\\n3 6\\n3 7\\n5 8\\n5 9\\n5 10\\n7 9\") == \"10\"\nassert solution(\"10 10\\n1 2\\n1 3\\n2 4\\n3 5\\n3 6\\n3 7\\n5 8\\n5 9\\n5 10\\n7 10\") == \"6\"\nassert solution(\"2 1\\n1 2\") == \"0\"\nassert solution(\"2 2\\n1 2\\n2 1\") == \"0\"\nassert solution(\"10 10\\n1 2\\n1 3\\n2 4\\n3 5\\n3 6\\n3 7\\n5 8\\n5 9\\n5 10\\n7 8\") == \"16\"\nassert solution(\"10 11\\n1 2\\n1 3\\n2 4\\n3 5\\n3 6\\n3 7\\n5", "solution('''\n2 3\n1 2\n2 1\n1 2\n''') == '''\n3\n'''\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '''\n6\n'''\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n0\n'''\nassert solution('''\n4 3\n1 2\n2 3\n3 4\n''') == '''\n3\n'''\nassert solution('''\n5 8\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n2 4\n4 2\n''') == '''\n8\n'''\nassert solution('''\n10 13\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n3 6\n5 8\n1 10\n''') == '''\n22\n'''\nassert solution('''\n6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n''') == '''\n0\n'''\nassert solution('''\n2 6\n1 2\n2 1\n1 2\n2 1\n1 2\n2 1\n''') == '''\n19\n'''\n", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution('''\n4 5\n1 2\n2 3\n2 4\n1 3\n1 4\n''') == '''\n5\n'''\n\n# obtain input data\nwith open('input.txt') as file:\n    _stdin = file.read()\n\n# execute and print solution\nprint(solution(_stdin))", "solution('''\n4 5\n1 2\n1 3\n2 3\n2 4\n3 4\n''') == '''\n15\n'''\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    print(solution(n, m, edges))", "'2' == solution('5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n2 4')\nassert '4' == solution('3 3\\n1 2\\n2 3\\n1 3')\nassert '2' == solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1')\nassert '4' == solution('5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1')\nassert '0' == solution('5 8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n2 4\\n2 5\\n1 3')\nassert '0' == solution('5 8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n1 4\\n1 5\\n1 3')\nassert '0' == solution('2 4\\n1 2\\n2 1\\n1 2\\n2 1')\nassert '2' == solution('2 3\\n1 2\\n2 1\\n1 2')\nassert '1' == solution('3 4\\n1 2\\n2 3\\n3 1\\n1 2')\nassert '2' == solution('5 5\\n1 2\\n2 3\\n3 4\\", "solution(\"\") == \"\", \"Example 1\"\nassert solution(\"\") == \"\", \"Example 2\"\nassert solution(\"\") == \"\", \"Example 3\"\n\nprint(\"Passed all tests\")", "solution('''\n8 12\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 8\n5 8\n6 8\n7 8\n4 5\n''') == '6'\n\nassert solution('''\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '0'\n\nassert solution('''\n2 3\n1 2\n1 2\n1 2\n''') == '0'\n\nassert solution('''\n6 10\n1 3\n2 3\n2 4\n3 4\n4 5\n3 6\n4 6\n5 6\n4 1\n5 2\n''') == '20'\n\n# at the end of template, rename the main function (if needed) and call main\nif __name__ == '__main__':\n    main()", "solution('''\n5 7\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n1 4\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n4 5\n1 2\n2 3\n3 4\n4 1\n1 3\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '15'\n\n# check the correctness of solution\nassert solution('''\n5 6\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n10 18\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 9\n4 10\n''", "solution(input_data) == \"1 2 3 4 5 6\"\n \n# test\nfrom unittest import TestCase\nfrom time import time\nfrom random import choice\nfrom string import ascii_letters\n\nclass test(TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(input_data), \"1 2 3 4 5 6\")\n    def test_time(self):\n        self.assertLess(time() - solution.start_time, 2)\n    def test_memory(self):\n        self.assertLess(solution.max_memory, 0.5)", "solution('''\n3 3\n1 2\n2 3\n1 3\n''') == '3'\n\n# check the performance of solution\nassert solution('''\n1 100000\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n", "solution(test_data) == '\\n'.join(map(str, [expected_output]))\n\n# check the performance of solution\nassert timeit.timeit(lambda: solution(test_data), number=1) <= 1", "solution('''\n3 3\n1 2\n2 3\n1 3\n''') == '''\n5\n'''\nassert solution('''\n6 10\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n''') == '''\n2\n'''\nassert solution('''\n6 7\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n''') == '''\n0\n'''\n\n# get input for stdin\ndef get_input(source: str = __file__) -> str:\n    \"\"\"Returns input from file or stdin\"\"\"\n    with open(source.replace('.py', '.in'), 'r') as file:\n        input = file.read()\n    return input\n\n# get stdout from stdin\nstdin = get_input()\n# if you want to test on stdin/stdout\n# import sys\n# stdin = sys.stdin.read()\nstdout = solution(stdin)\n\n# show output\nprint(stdout)\n\n# save output to file\nwith open(__file__.replace('.py', '.out'), 'w') as file:\n    file.write(stdout)", "solution('''\n6 6\n2 3\n2 4\n2 5\n1 4\n1 5\n1 6\n'''\n) == '''\n'''", "solution('''\n5 7\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n'''\n) == '''\n6\n'''", "solution(r'''\n''') == r'''\n'''\n\n# stress testing solution\nwhile True:\n    pass", "solution('''\n3 2\n1 2\n2 3\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1\n1 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2\n2 3\n3 4\n4 5\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n7 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n", "solution(\"\"\"\n    2 1\n    1 2\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    2 2\n    1 2\n    2 1\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    4 5\n    1 2\n    2 3\n    3 4\n    4 1\n    1 3\n\"\"\") == \"10\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    6 4\n    1 2\n    2 3\n    3 4\n    4 5\n\"\"\") == \"9\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    6 5\n    1 2\n    2 3\n    3 4\n    4 5\n    1 5\n\"\"\") == \"12\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    6 6\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 1\n\"\"\") == \"21\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    4 4\n    1 2\n    2 3\n    3 4\n    4 1\n\"\"\") == \"6\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    3 2\n    1 2\n    2 3\n\"\"\") == \"2\"\n\n", "solution(\"\"\"\n1\n\"\"\") == \"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\nassert solution(\"\"\"\n\"\"\") == \"\"", "solution('''\n3 3\n1 2\n2 3\n1 3\n''') == '''\n2\n'''\n\nassert solution('''\n4 5\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == '''\n0\n'''\n\nassert solution('''\n4 4\n1 2\n2 3\n2 4\n3 4\n''') == '''\n6\n'''\n\nassert solution('''\n6 8\n1 2\n2 3\n2 4\n3 5\n4 5\n1 6\n5 6\n6 4\n''') == '''\n4\n'''\n\n# get input and call the solution\ndef main():\n    inp = stdin.read()\n    stdout.write(solution(inp))\n\nmain()", "solution('''\n5 4\n1 2\n2 3\n3 4\n4 5\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n5 6\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n''') == '''\n15\n'''\n\n# check the correctness of solution\nassert solution('''\n8 11\n1 4\n1 5\n2 3\n2 6\n4 7\n4 8\n5 8\n6 8\n7 8\n6 7\n2 8\n''') == '''\n38\n'''\n\n# check the correctness of solution\nassert solution('''\n7 10\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 6\n4 7\n5 6\n5 7\n''') == '''\n43\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 8\n5 9\n''') == '''\n40\n'''\n\n# check", "solution('''\n3 2\n1 2\n2 3\n''') == '''\n1\n'''\nassert solution('''\n4 5\n1 2\n2 3\n3 4\n1 4\n2 4\n''') == '''\n9\n'''\nassert solution('''\n5 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n''') == '''\n14\n'''\nassert solution('''\n6 14\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n''') == '''\n18\n'''\nassert solution('''\n8 36\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n3 4\n3 5\n3 6\n3 7\n3 8\n4 5\n4 6\n4 7\n4 8\n5 6\n5 7\n5 8\n6 7\n6 8\n7 8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n''') == '''\n21\n'''\nassert solution(", "solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\n# compile solutions for all test cases\nfrom os import chdir, getcwd, listdir\nfrom typing import List\n\ninput_files: List[str] = listdir(getcwd() + '/in')\n\nfor i in range(len(input_files)):\n    with open(f'in/{input_files[i]}', 'r') as f:\n        solution(f.read())\n\n# show time stamp for solution compilation\nfrom time import time\nfrom datetime import datetime\n\nprint(f'\\n# {(datetime.fromtimestamp(time())).strftime(\"%d %b %Y %H:%M:%S\")}')", "solution('''4 3\n1 2\n2 3\n3 4''') == '2'\nassert solution('''3 2\n1 2\n2 3''') == '3'\nassert solution('''3 2\n1 2\n1 3''') == '2'\nassert solution('''5 3\n1 2\n2 3\n3 4''') == '6'\nassert solution('''6 4\n1 2\n1 3\n1 4\n1 5''') == '7'\nassert solution('''7 5\n1 2\n2 3\n3 4\n4 5\n5 6''') == '15'\nassert solution('''5 5\n1 2\n2 3\n3 4\n4 5\n5 1''') == '10'\nassert solution('''4 4\n1 2\n2 3\n3 4\n4 1''') == '4'\nassert solution('''6 5\n1 2\n2 3\n3 4\n4 5\n5 6''') == '14'\nassert solution('''8 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8''') == '28'\nassert solution('''4 4\n1 2\n2 3\n3 4\n4 1''') == '4'\nassert solution('''4 4\n1 2\n2 3\n2", "solution(\"\\n\".join([\n    \"3 3\",\n    \"1 2\",\n    \"2 3\",\n    \"1 3\"\n])) == \"1\"\n\nassert solution(\"\\n\".join([\n    \"7 6\",\n    \"1 2\",\n    \"2 3\",\n    \"3 1\",\n    \"4 5\",\n    \"5 6\",\n    \"6 7\"\n])) == \"5\"\n\nassert solution(\"\\n\".join([\n    \"1 1\",\n    \"1 1\"\n])) == \"1\"\n\nassert solution(\"\\n\".join([\n    \"3 2\",\n    \"1 2\",\n    \"2 3\"\n])) == \"1\"\n\nassert solution(\"\\n\".join([\n    \"6 4\",\n    \"1 2\",\n    \"2 3\",\n    \"4 5\",\n    \"5 6\"\n])) == \"4\"\n\nassert solution(\"\\n\".join([\n    \"5 5\",\n    \"1 2\",\n    \"2 3\",\n    \"3 4\",\n    \"4 5\",\n    \"5 1\"\n])) == \"5\"\n\nassert solution(\"\\n\".join([\n    \"5 5\",\n    \"1 2\",\n    \"2 3\",\n    \"3 4\",\n    \"4 5", "solution(stdin) == stdout", "solution(\"1 2 3\\n2 3\\n1 3\") == \"3\"\nassert solution(\"1 2 3 4\\n1 2\\n2 3\\n1 3\\n1 4\") == \"7\"\nassert solution(\"1 2 3 4 5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0\"\nassert solution(\"1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"0\"\nassert solution(\"1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n2 4\") == \"2\"\nassert solution(\"1 2 3 4 5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\\n1 3\\n4 6\") == \"4\"\nassert solution(\"1 2 3 4 5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\\n1 3\\n4 6\\n6 5\") == \"9\"\nassert solution(\"1 2 3 4 5 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\\n1 3\\n4 6\\n6 5\\n5 1\") == \"", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n# auto-submit\n# __name__ == \"__main__\" and res = solution(input()) and print(res)", "solution('''\n1 2\n1 2\n''') == '''\n1\n'''\nassert solution('''\n2 2\n1 2\n2 1\n''') == '''\n4\n'''\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n4 1\n''') == '''\n8\n'''\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n4 2\n''') == '''\n8\n'''\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n8\n'''\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '''\n8\n'''\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 2\n''') == '''\n8\n'''\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 3\n''') == '''\n8\n'''\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 4\n''') == '''\n8\n'''\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4", "solution('''\n4 5\n1 2\n2 3\n3 4\n4 1\n1 3\n''') == '3'\nassert solution('''\n4 5\n1 2\n2 3\n3 4\n4 1\n1 3\n''') == '3'\nassert solution('''\n4 4\n1 2\n2 3\n3 4\n4 1\n''') == '0'\nassert solution('''\n1 1\n1 1\n''') == '1'\nassert solution('''\n10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '1'\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n''') == '11'\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n''') == '11'\nassert solution('''\n15 10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n''') == '3'\nassert solution('''\n15 15\n1 2", "solution(\"2 1\\n1 2\") == \"1\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"3\"\nassert solution(\"4 3\\n1 2\\n2 3\\n3 4\") == \"5\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"0\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n2 4\") == \"10\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n4 5\") == \"3\"\nassert solution(\"10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 1\") == \"0\"\nassert solution(\"10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 1\\n1 5\") == \"1\"\nassert solution(\"10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 1\\n1 5", "solution('''\n3 3\n1 2\n2 3\n1 3\n''') == '''\n2\n'''\nassert solution('''\n2 1\n1 2\n''') == '''\n0\n'''\nassert solution('''\n6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n''') == '''\n1\n'''\nassert solution('''\n5 6\n1 2\n2 3\n3 4\n4 5\n1 3\n1 4\n''') == '''\n2\n'''\nassert solution('''\n5 6\n1 2\n2 3\n3 4\n4 5\n1 3\n1 4\n''') == '''\n2\n'''\nassert solution('''\n10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '''\n1\n'''\nassert solution('''\n6 4\n1 2\n2 3\n3 4\n4 5\n''') == '''\n0\n'''\nassert solution('''\n7 3\n2 3\n4 5\n6 7\n''') == '''\n0\n'''\nassert solution('''\n8 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n", "solution('''\n5 8\n1 2\n1 3\n1 4\n2 3\n3 4\n3 5\n4 5\n5 1\n''') == '5'\n\nassert solution('''\n5 4\n1 2\n2 3\n3 4\n4 5\n''') == '4'\n\nassert solution('''\n5 6\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n''') == '1'\n\n# show execution time\nstart = time.time()\nprint(solution(stdin))\nprint(time.time() - start)", "solution('''\n5 5\n1 2\n1 3\n2 3\n2 4\n3 5\n''') == '''\n'''", "solution('''\n''') == '''\n'''\n\n'''\n7 6\n1 2\n1 4\n4 6\n4 5\n5 7\n5 3\n'''"], "finish_reason": ["length", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop"], "sum_logprob": [-87.11796127576494, -117.80773435700995, -58.21340765689799, -67.91631754391003, -17.396588185499997, -77.34685898357998, -74.678796967174, -91.75589650326302, -110.36419525364202, -151.43030237104367, -69.36164706864996, -89.81657146636098, -93.26046542393989, -58.465553263628, -37.562270274475, -89.89468629314898, -85.13477206727208, -14.007066069650007, -39.39350119391002, -30.18032315019001, -90.03570172264901, -19.637974742100003, -129.09365674746, -70.06415371663404, -92.67997384980907, -23.75279451067299, -33.526724527400006, -107.061515375994, -26.6389367836, -20.631082567900005, -17.06619371223, -56.00313090756601, -68.08613070728799, -17.548144623200002, -73.39791434295536, -95.84011199292901, -62.718955328705995, -105.08498732714, -88.72288133376998, -60.118782518119076, -5.753803992, -82.234065684047, -34.31862950875999, -57.51482639220855, -67.870901455256, -56.50211930200298, -76.73719190214302, -51.72932124651799, -15.762897950300003, -35.49665250599999], "mean_logprob": [-0.29039320425255, -0.3926924478567, -0.44437715768624425, -0.22638772514636665, -0.9664771214166668, -0.2578228632786, -0.24892932322391334, -0.30585298834421, -0.36788065084547333, -0.504767674570145, -0.23120549022883333, -0.2993885715545367, -0.3108682180798, -0.19488517754542667, -0.3446079841694954, -0.29964895431049665, -0.28378257355757336, -0.046690220232166665, -0.5116039116092208, -0.27189480315486486, -0.3001190057421633, -0.446317607775, -0.6654312203477319, -0.23354717905544667, -0.6481117052434195, -0.07917598170224334, -0.620865269025926, -0.36664902526025345, -0.7199712644216216, -0.49121625161666665, -0.5884894383527586, -0.18667710302522, -0.22695376902429334, -0.5660691813935483, -0.4032852436426121, -0.31946703997643, -0.20906318442902, -0.5649730501459139, -0.29574293777923333, -0.20039594172706332, -0.6393115546666667, -0.27411355228015666, -0.7626362113057777, -0.19171608797402834, -0.22623633818418667, -0.18834039767334335, -0.25579063967381, -0.3831801573816148, -0.492590560946875, -0.8451583930000001]}
{"prompt": "'''\nLittle Johnny Bubbles enjoys spending hours in front of his computer playing video games. His favorite game is Bubble Strike, fast-paced bubble shooting online game for two players.\n\nEach game is set in one of the N maps, each having different terrain configuration. First phase of each game decides on which map the game will be played. The game system randomly selects three maps and shows them to the players. Each player must pick one of those three maps to be discarded. The game system then randomly selects one of the maps that were not picked by any of the players and starts the game.\n\nJohnny is deeply enthusiastic about the game and wants to spend some time studying maps, thus increasing chances to win games played on those maps. However, he also needs to do his homework, so he does not have time to study all the maps. That is why he asked himself the following question: \"What is the minimum number of maps I have to study, so that the probability to play one of those maps is at least P\"?\n\nCan you help Johnny find the answer for this question? You can assume Johnny's opponents do not know him, and they will randomly pick maps.\n\nInput\n\nThe first line contains two integers N (3 \u2264 N \u2264 10^{3}) and P (0 \u2264 P \u2264 1) \u2013 total number of maps in the game and probability to play map Johnny has studied. P will have at most four digits after the decimal point.\n\nOutput\n\nOutput contains one integer number \u2013 minimum number of maps Johnny has to study.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3 0.75\n''') == '''\n2\n'''\nassert solution('''\n4 0.875\n''') == '''\n2\n'''\nassert solution('''\n1 0.75\n''') == '''\n1\n'''\nassert solution('''\n500 0.00001\n''') == '''\n500\n'''\nassert solution('''\n500 0.9\n''') == '''\n77\n'''\nassert solution('''\n500 0.5\n''') == '''\n7\n'''\nassert solution('''\n500 0.9999\n''') == '''\n4\n'''\nassert solution('''\n500 0.0000001\n''') == '''\n1\n'''\nassert solution('''\n500 0.9999999\n''') == '''\n500\n'''\nassert solution('''\n500 0.99999\n''') == '''\n500\n'''\nassert solution('''\n500 0.99\n''') == '''\n500\n'''\nassert solution('''\n500 0.50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050", "solution(\"\"\"\n3 0.75\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 0.80\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 0.58\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n100 0.50\n\"\"\") == \"50\"\n\nassert solution(\"\"\"\n100 0.93\n\"\"\") == \"31\"\n\nassert solution(\"\"\"\n100 0.99\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n1000 0.70\n\"\"\") == \"700\"\n\nassert solution(\"\"\"\n1000 0.75\n\"\"\") == \"750\"\n\nassert solution(\"\"\"\n1000 0.99\n\"\"\") == \"100\"\n\n# test the performance of solution\nassert solution(\"\"\"\n100000 0.50\n\"\"\") == \"50000\"\n\nassert solution(\"\"\"\n100000 0.75\n\"\"\") == \"75000\"\n\nassert solution(\"\"\"\n100000 0.99\n\"\"\") == \"10000\"\n\nassert solution(\"\"\"\n100000 0.99\n\"\"\") == \"10000\"\n\nassert solution(\"\"\"\n100000 0.9999\n\"\"\") == \"1000\"\n\nassert solution(\"\"\"\n100000 0.999999\n\"\"\") == \"100\"\n\nassert solution(\"\"\"\n100000 0.99999999\n\"\"\") ==", "solution('''\n3 0.75\n''') == '1'\n\nassert solution('''\n3 0.50\n''') == '2'\n\nassert solution('''\n4 0.9\n''') == '1'\n\nassert solution('''\n4 0.125\n''') == '3'\n\nassert solution('''\n8 0.75\n''') == '3'\n\nassert solution('''\n8 0.5\n''') == '4'\n\nassert solution('''\n8 0.25\n''') == '5'\n\nassert solution('''\n8 0.125\n''') == '6'\n\nassert solution('''\n8 0.0625\n''') == '7'\n\nassert solution('''\n8 0.03125\n''') == '8'\n\nassert solution('''\n1000 0.75\n''') == '749'\n\nassert solution('''\n1000 0.5\n''') == '750'\n\nassert solution('''\n1000 0.25\n''') == '751'\n\nassert solution('''\n1000 0.125\n''') == '752'\n\nassert solution('''\n1000 0.0625\n''') == '753'\n\nassert solution('''\n1000 0.03125\n", "solution(\"\") == \"\"\n\n# get the input\np = int(input())\ninputs = []\nfor i in range(p):\n    inputs.append(input())\n\n# test solution\nfor i in range(p):\n    print(solution(inputs[i]))", "solution(\"10 0.1\") == \"2\"\nassert solution(\"10 0.4\") == \"4\"\nassert solution(\"10 0.5\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"100 0.5\") == \"50\"\nassert solution(\"100 0.75\") == \"75\"\nassert solution(\"100 0.99\") == \"99\"\nassert solution(\"100 0.001\") == \"4\"\nassert solution(\"100 0.05\") == \"5\"\nassert solution(\"100 0.25\") == \"25\"\nassert solution(\"100 0.75\") == \"75\"\nassert solution(\"100 0.95\") == \"95\"\nassert solution(\"1000 0.05\") == \"50\"\nassert solution(\"1000 0.75\") == \"750\"\nassert solution(\"1000 0.99\") == \"990\"\nassert solution(\"1000 0.75\") == \"750\"\nassert solution(\"1000 0.95\") == \"950\"\nassert solution(\"1000 0.99\") == \"990\"\nassert solution(\"1000 0.999\") == \"999\"\nassert solution(\"10000 0.999\") == \"9990\"\nassert solution(\"10000 0.0001\") == \"5\"\nassert solution(\"10000 0.001\") == \"10\"\nassert solution(\"10000 0.01\") == \"100\"\nassert solution(\"", "solution('''3 0.5''') == '1'\nassert solution('''3 0.25''') == '2'\nassert solution('''6 0.5''') == '3'\nassert solution('''6 0.25''') == '4'\nassert solution('''6 0.33''') == '4'\nassert solution('''6 0.99''') == '6'\nassert solution('''6 0.4''') == '4'\nassert solution('''6 0.16''') == '5'\nassert solution('''6 0.84''') == '5'\nassert solution('''6 0.1''') == '5'\nassert solution('''6 0.9''') == '5'\nassert solution('''6 0.66''') == '4'\nassert solution('''6 0.34''') == '4'\nassert solution('''8 0.37''') == '5'\nassert solution('''8 0.2''') == '5'\nassert solution('''8 0.8''') == '5'\nassert solution('''8 0.34''') == '5'\nassert solution('''8 0.43''') == '5'\nassert solution('''8 0.16''') == '", "solution('''3 0.5\n''') == '1'\nassert solution('''3 0.45\n''') == '2'\nassert solution('''4 0.7\n''') == '2'\nassert solution('''2 0.8\n''') == '1'\nassert solution('''100 0.9\n''') == '3'\nassert solution('''1 0.1\n''') == '1'\nassert solution('''1 0.4\n''') == '1'\nassert solution('''1 0.75\n''') == '1'\nassert solution('''100 0.1\n''') == '1'\nassert solution('''100 0.2\n''') == '1'\nassert solution('''100 0.3\n''') == '1'\nassert solution('''100 0.4\n''') == '1'\nassert solution('''100 0.5\n''') == '1'\nassert solution('''100 0.6\n''') == '1'\nassert solution('''100 0.7\n''') == '1'\nassert solution('''100 0.8\n''') == '1'\nassert solution('''100 0.9\n''') == '3'\nassert solution('''100 0.99\n''')", "solution(\"3 0.1\") == \"1\"\nassert solution(\"3 0.7\") == \"2\"\nassert solution(\"3 0.5\") == \"2\"\nassert solution(\"10 0.1\") == \"1\"\nassert solution(\"10 0.2\") == \"2\"\nassert solution(\"10 0.3\") == \"2\"\nassert solution(\"10 0.4\") == \"3\"\nassert solution(\"1000 0.001\") == \"1\"\nassert solution(\"1000 0.009\") == \"1\"\nassert solution(\"1000 0.01\") == \"2\"\nassert solution(\"1000 0.019\") == \"2\"\nassert solution(\"1000 0.02\") == \"3\"\nassert solution(\"1000 0.029\") == \"3\"\nassert solution(\"1000 0.03\") == \"4\"\nassert solution(\"1000 0.039\") == \"4\"\nassert solution(\"1000 0.04\") == \"5\"\nassert solution(\"1000 0.049\") == \"5\"\nassert solution(\"1000 0.05\") == \"6\"\nassert solution(\"1000 0.059\") == \"6\"\nassert solution(\"1000 0.06\") == \"7\"\nassert solution(\"1000 0.069\") == \"7\"\nassert solution(\"1000 0.07\") == \"8\"\nassert solution(\"1000 0.079\") == \"8", "solution(\"\"\"\n3 0.6\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n3 0.7\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n5 0.8\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n10 0.6\n\"\"\") == \"\"\"\n4\n\"\"\"\n\nassert solution(\"\"\"\n10 0.7\n\"\"\") == \"\"\"\n5\n\"\"\"\n\nassert solution(\"\"\"\n10 0.8\n\"\"\") == \"\"\"\n6\n\"\"\"\n\nassert solution(\"\"\"\n10 0.9\n\"\"\") == \"\"\"\n7\n\"\"\"\n\nassert solution(\"\"\"\n10 0.1\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n10 0.2\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n10 0.3\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n10 0.4\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n10 0.5\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n100 0.6\n\"\"\") == \"\"\"\n8\n\"\"\"\n\nassert solution(\"\"\"\n100 0.7\n\"\"\") == \"\"\"\n10\n\"\"\"\n\nassert solution(\"\"\"\n100 0.8\n\"\"\") == \"\"\"\n13\n\"\"\"\n\nassert", "solution('''3 0.3''') == '2'\nassert solution('''3 0.8''') == '1'\nassert solution('''1000 0.007''') == '9'\nassert solution('''1000000 0.5''') == '500000'", "solution('''3 0.6\n''') == '''2\n'''\n\nassert solution('''3 0.7\n''') == '''3\n'''\n\nassert solution('''4 0.4\n''') == '''2\n'''\n\nassert solution('''4 0.5\n''') == '''3\n'''\n\nassert solution('''4 0.6\n''') == '''3\n'''\n\nassert solution('''4 0.7\n''') == '''4\n'''\n\nassert solution('''5 0.4\n''') == '''2\n'''\n\nassert solution('''5 0.5\n''') == '''3\n'''\n\nassert solution('''5 0.6\n''') == '''3\n'''\n\nassert solution('''5 0.7\n''') == '''4\n'''\n\nassert solution('''5 0.8\n''') == '''5\n'''\n\nassert solution('''5 0.9\n''') == '''5\n'''\n\nassert solution('''6 0.4\n''') == '''2\n'''\n\nassert solution('''6 0.5\n''') == '''3\n'''\n\nassert solution('''6 0", "solution(stdin) == 'output'", "solution(\"\") == \"\"\n\n# check the speed of solution\nassert solution(\"\") == \"\"", "solution(\"3 0.750\\n\") == \"1\"\nassert solution(\"10 0.750\\n\") == \"2\"\nassert solution(\"8 0.125\\n\") == \"4\"\nassert solution(\"8 0.001\\n\") == \"6\"\nassert solution(\"8 0.999\\n\") == \"3\"\nassert solution(\"100 0.001\\n\") == \"10\"\nassert solution(\"100 0.999\\n\") == \"14\"\nassert solution(\"1000 0.001\\n\") == \"100\"\nassert solution(\"1000 0.999\\n\") == \"192\"\nassert solution(\"1000 0.500\\n\") == \"181\"\nassert solution(\"1000 0.251\\n\") == \"216\"\nassert solution(\"1000 0.750\\n\") == \"164\"\n\n# # submit the solution\n# import sys\n# with open(sys.argv[1], 'w') as fout:\n#     fout.write(solution(sys.stdin.read()))\n'''\ndef solution(stdin):\n    n, p = stdin.split()\n    n = int(n)\n    p = float(p)\n    ways = lambda k: n*(n-1)*(n-2) - k*(k-1)*(k-2)\n    probs", "solution('''3 0.6\n''') == '''2\n'''\n\n# check the correctness of solution\nassert solution('''3 0.6\n''') == '''2\n'''\n\n# check the correctness of solution\nassert solution('''3 0.6\n''') == '''2\n'''", "solution('''\n3 0.5000\n''') == '''\n1\n'''\n\nassert solution('''\n3 0.6666\n''') == '''\n2\n'''\n\nassert solution('''\n5 0.8333\n''') == '''\n4\n'''\n\nassert solution('''\n5 0.9998\n''') == '''\n5\n'''\n\nassert solution('''\n5 0.9999\n''') == '''\n5\n'''\n\nassert solution('''\n5 0.999\n''') == '''\n4\n'''\n\nassert solution('''\n5 0.9\n''') == '''\n4\n'''\n\nassert solution('''\n10 0.9999\n''') == '''\n9\n'''\n\nassert solution('''\n10 0.99\n''') == '''\n7\n'''\n\nassert solution('''\n10 0.9\n''') == '''\n7\n'''\n\nassert solution('''\n100 0.99999\n''') == '''\n9\n'''\n\nassert solution('''\n100 0.99999\n''') == '''\n9\n'''\n\nassert solution('''\n100 0.999999\n''') == '''\n10\n''", "solution('''\n3 0.7500\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3 0.5000\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1 0.2500\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n2 0.7500\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n5 0.7500\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n6 0.5000\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n10 0.5000\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n10 0.2500\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n10 0.1000\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n10 0.8000\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n500 0.7500\n''') == '34'\n\n# check the correctness of solution\nassert solution('''\n500 0.5000\n", "solution('''3 0.9000''') == '3'\nassert solution('''3 0.7500''') == '2'\nassert solution('''9 0.5000''') == '5'\nassert solution('''5 0.3750''') == '3'\nassert solution('''9 0.1111''') == '3'\nassert solution('''9 0.1225''') == '4'\nassert solution('''9 0.8765''') == '8'\nassert solution('''9 0.1000''') == '4'\nassert solution('''9 0.7887''') == '8'\nassert solution('''9 0.7555''') == '7'\nassert solution('''9 0.5555''') == '6'\nassert solution('''9 0.5500''') == '6'\nassert solution('''9 0.5000''') == '5'\nassert solution('''9 0.4444''') == '5'\nassert solution('''9 0.1111''') == '3'\nassert solution('''9 0.8356''') == '8'\nassert solution('''9 0.8356''') == '8'\nassert solution('''9 0.8356''') == '8'\n", "solution(test_data) == test_solution, 'wrong solution'\n\n# get input for running the solution on the platform\nimport sys\nstdin = sys.stdin.readline()\n\n# run solution on platform\nprint(solution(stdin))", "solution(\"5 0.25\") == \"2\"\nassert solution(\"10 0.5\") == \"5\"\nassert solution(\"10 0.9\") == \"10\"\nassert solution(\"10 0.0001\") == \"10\"\nassert solution(\"3 0.6\") == \"3\"\nassert solution(\"3 0.3\") == \"3\"\nassert solution(\"3 0.1\") == \"3\"\nassert solution(\"4 0.25\") == \"3\"\nassert solution(\"4 0.5\") == \"4\"\nassert solution(\"4 0.75\") == \"4\"\nassert solution(\"5 0.2\") == \"3\"\nassert solution(\"5 0.5\") == \"5\"\nassert solution(\"5 0.8\") == \"5\"\nassert solution(\"6 0.2\") == \"4\"\nassert solution(\"6 0.4\") == \"5\"\nassert solution(\"6 0.6\") == \"6\"\nassert solution(\"6 0.8\") == \"6\"\nassert solution(\"7 0.1\") == \"4\"\nassert solution(\"7 0.2\") == \"5\"\nassert solution(\"7 0.4\") == \"6\"\nassert solution(\"7 0.6\") == \"7\"\nassert solution(\"7 0.8\") == \"7\"\nassert solution(\"7 0.9\") == \"7\"\nassert solution", "solution('''4 0.7500''') == '3'\nassert solution('''3 0.5000''') == '2'\nassert solution('''3 0.3333''') == '2'\nassert solution('''4 0.5000''') == '3'\nassert solution('''4 0.7500''') == '3'\nassert solution('''4 0.1250''') == '2'\nassert solution('''1 0.5000''') == '1'\nassert solution('''1 0.0000''') == '1'\nassert solution('''1 1.0000''') == '1'\nassert solution('''3 0.6667''') == '3'\nassert solution('''5 0.5000''') == '4'\nassert solution('''5 0.8000''') == '5'\nassert solution('''5 0.1250''') == '2'\nassert solution('''7 0.6667''') == '4'\nassert solution('''7 0.5556''') == '3'\nassert solution('''8 0.5000''') == '4'\nassert solution('''8 0.2500''') == '2'\nassert solution('''8 0.7500''') == '5'\nassert solution('''", "solution('''3 0.7000''') == '3'\nassert solution('''4 0.0000''') == '4'\nassert solution('''4 0.1234''') == '3'\nassert solution('''3 0.7500''') == '3'\nassert solution('''3 0.2500''') == '2'\nassert solution('''1 0.0000''') == '1'\nassert solution('''3 0.5000''') == '2'\nassert solution('''3 0.9900''') == '3'\nassert solution('''1000 0.9999''') == '1000'\nassert solution('''10 0.9000''') == '10'\nassert solution('''1000 0.5010''') == '172'\nassert solution('''1 0.0010''') == '1'\nassert solution('''1000 0.0010''') == '3'\nassert solution('''2 0.9900''') == '2'\nassert solution('''1000 0.4999''') == '170'\nassert solution('''2 0.0100''') == '2'\nassert solution('''2 0.5100''') == '2'\nassert solution('''1000 0.5000''') == '169'\nassert solution(''", "solution('''\n3 0.7\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n7 0.1\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n3 0.3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n4 0.4\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n3 0.8\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n7 0.999\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n4 0.9999\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n4 0.9\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3 0.6\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3 0.5\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n3 0.001\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n3 0.000001\n''') ==", "solution(\"3 0.5\") == \"2\"\nassert solution(\"10 0.9\") == \"9\"\nassert solution(\"100 0.0001\") == \"5\"\nassert solution(\"5 0.75\") == \"3\"\nassert solution(\"3 0.5\") == \"2\"\nassert solution(\"3 0.75\") == \"3\"\nassert solution(\"3 0.25\") == \"2\"\nassert solution(\"5 0.5\") == \"3\"\nassert solution(\"10 0.5\") == \"6\"\nassert solution(\"100 0.5\") == \"51\"\nassert solution(\"1000 0.5\") == \"501\"\nassert solution(\"100 0.9\") == \"9\"\nassert solution(\"100 0.99\") == \"18\"\nassert solution(\"100 0.999\") == \"27\"\nassert solution(\"100 0.9999\") == \"36\"\nassert solution(\"100 0.99999\") == \"45\"\nassert solution(\"100 0.999999\") == \"54\"\nassert solution(\"100 0.9999999\") == \"63\"\nassert solution(\"100 0.99999999\") == \"72\"\nassert solution(\"100 0.999999999\") == \"81\"\nassert solution(\"100 0.9999999999\") == \"90\"\nassert solution(\"100 0.99999999999\") == \"99\"\nassert solution(\"100 0", "solution(stdin) == stdout", "solution(\"6 0.43\") == \"2\"\nassert solution(\"30 0.01\") == \"6\"\nassert solution(\"51 0.02\") == \"8\"\nassert solution(\"100 0.99\") == \"3\"\nassert solution(\"300 0.95\") == \"21\"\nassert solution(\"1000 0.55\") == \"33\"\nassert solution(\"1000 0.95\") == \"59\"\nassert solution(\"1000 0.99\") == \"89\"\nassert solution(\"1000 0.999999\") == \"837\"\nassert solution(\"1000 0.999999999999\") == \"890\"\nassert solution(\"1000 0.9999999999999999\") == \"890\"\n\n# read from file or stdin\nif len(sys.argv) > 1:\n    with open(sys.argv[1]) as f:\n        stdin = f.read()\nelse:\n    stdin = sys.stdin.read()\n\nprint(solution(stdin))", "solution('''3 0.5\n''') == '2'\nassert solution('''4 0.63\n''') == '3'\nassert solution('''4 0.75\n''') == '4'\nassert solution('''4 0.5\n''') == '3'\nassert solution('''5 0.8\n''') == '4'\nassert solution('''100 0.5\n''') == '50'\nassert solution('''1000 0.99\n''') == '731'\nassert solution('''1000 0.995\n''') == '751'\nassert solution('''1000 0.996\n''') == '755'\nassert solution('''1000 0.999\n''') == '791'\nassert solution('''1000 0.9999\n''') == '941'\nassert solution('''1000 0.999999\n''') == '999'\nassert solution('''1000 0.99999\n''') == '998'\nassert solution('''1000 0.999995\n''') == '999'\nassert solution('''1000 0.999999\n''') == '999'\nassert solution('''1000 0.9999999\n''') == '1000'\nassert solution('''1000 0.99999999\n''') == '1000'\nassert solution(", "solution(\"3 0.7500\") == \"2\"\nassert solution(\"5 0.5000\") == \"3\"\nassert solution(\"3 0.5200\") == \"3\"\nassert solution(\"10 0.3500\") == \"7\"\nassert solution(\"1 1.0000\") == \"1\"\nassert solution(\"3 0.0000\") == \"1\"\nassert solution(\"3 0.5000\") == \"3\"\nassert solution(\"3 0.7000\") == \"2\"\nassert solution(\"3 0.6000\") == \"2\"\nassert solution(\"3 0.8000\") == \"2\"\nassert solution(\"3 0.5500\") == \"3\"\nassert solution(\"3 0.9000\") == \"2\"\nassert solution(\"3 0.3000\") == \"3\"\nassert solution(\"3 0.9900\") == \"2\"\nassert solution(\"4 0.7500\") == \"3\"\nassert solution(\"4 0.5000\") == \"3\"\nassert solution(\"4 0.2500\") == \"3\"\nassert solution(\"4 0.0000\") == \"1\"\nassert solution(\"4 0.9000\") == \"3\"\nassert solution(\"4 0.9900\") == \"3\"\nassert solution(\"10 0.3500\") == \"7\"\nassert solution(\"10 0.4500\") == \"6\"\nassert solution(\"", "solution(stdin=\"3 0.8\") == \"3\"\nassert solution(stdin=\"3 0.9\") == \"2\"\nassert solution(stdin=\"4 0.99\") == \"4\"\nassert solution(stdin=\"4 0.0001\") == \"4\"\nassert solution(stdin=\"4 0.75\") == \"2\"\nassert solution(stdin=\"5 0.8\") == \"3\"\nassert solution(stdin=\"5 0.9\") == \"2\"\nassert solution(stdin=\"5 0.99\") == \"4\"\nassert solution(stdin=\"5 0.0001\") == \"4\"\nassert solution(stdin=\"5 0.75\") == \"2\"\nassert solution(stdin=\"5 0.999\") == \"3\"\nassert solution(stdin=\"5 0.555\") == \"3\"\nassert solution(stdin=\"5 0.123\") == \"3\"\nassert solution(stdin=\"5 0.111\") == \"3\"\nassert solution(stdin=\"5 0.999\") == \"3\"\nassert solution(stdin=\"5 0.555\") == \"3\"\nassert solution(stdin=\"5 0.123\") == \"3\"\nassert solution(stdin=\"5 0.111\") == \"3\"\nassert solution(stdin=\"7 0.99\") == \"", "solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '7'\nassert solution(input()) == '21'\nassert solution(input()) == '100'\nassert solution(input()) == '111'\nassert solution(input()) == '1013'\nassert solution(input()) == '196'\nassert solution(input()) == '113'\nassert solution(input()) == '60'\nassert solution(input()) == '1'\nassert solution(input()) == '167'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '11'\nassert solution(input()) == '28'\nassert solution(input()) == '16'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\n", "solution(SAMPLE_1) == SAMPLE_1_SOLUTION\nassert solution(SAMPLE_2) == SAMPLE_2_SOLUTION\nassert solution(SAMPLE_3) == SAMPLE_3_SOLUTION\nassert solution(SAMPLE_4) == SAMPLE_4_SOLUTION\nassert solution(SAMPLE_5) == SAMPLE_5_SOLUTION\nassert solution(SAMPLE_6) == SAMPLE_6_SOLUTION\nassert solution(SAMPLE_7) == SAMPLE_7_SOLUTION\nassert solution(SAMPLE_8) == SAMPLE_8_SOLUTION\nassert solution(SAMPLE_9) == SAMPLE_9_SOLUTION\nassert solution(SAMPLE_10) == SAMPLE_10_SOLUTION\n\n# submit solution to the judge\nsubmission = submit_solution(solution, PROBLEM_URL)\n\n# print confirmation\nprint(submission.confirmation_url)", "solution(\"3 0.4600\") == \"1\"\nassert solution(\"3 0.9000\") == \"2\"\nassert solution(\"3 0.1500\") == \"3\"\nassert solution(\"3 0.2300\") == \"3\"\nassert solution(\"20 0.1500\") == \"2\"\nassert solution(\"20 0.2100\") == \"2\"\nassert solution(\"20 0.2300\") == \"3\"\nassert solution(\"20 0.1300\") == \"3\"\nassert solution(\"20 0.9000\") == \"2\"\nassert solution(\"20 0.4100\") == \"4\"\nassert solution(\"20 0.4500\") == \"4\"\nassert solution(\"20 0.4700\") == \"4\"\nassert solution(\"20 0.5000\") == \"5\"\nassert solution(\"20 0.9500\") == \"2\"\nassert solution(\"20 0.9700\") == \"2\"\nassert solution(\"100 0.1500\") == \"3\"\nassert solution(\"100 0.2100\") == \"3\"\nassert solution(\"100 0.2300\") == \"4\"\nassert solution(\"100 0.1300\") == \"4\"\nassert solution(\"100 0.9000\") == \"3\"\nassert solution(\"100 0.4100\") == \"6\"\nassert solution(\"100 0.4500\") == \"", "solution('''3 0.7000''') == '1'\nassert solution('''4 0.5''') == '2'\nassert solution('''4 0.35''') == '3'\nassert solution('''4 0.45''') == '2'\nassert solution('''4 0.55''') == '1'\nassert solution('''4 0.45''') == '2'\nassert solution('''4 0.5''') == '2'\nassert solution('''4 0.45''') == '2'\nassert solution('''4 0.5''') == '2'\nassert solution('''4 0.45''') == '2'\nassert solution('''4 0.5''') == '2'\nassert solution('''4 0.45''') == '2'\nassert solution('''4 0.5''') == '2'\nassert solution('''4 0.45''') == '2'\nassert solution('''4 0.5''') == '2'\nassert solution('''4 0.45''') == '2'\nassert solution('''4 0.5''') == '2'\nassert solution('''4 0.45''') == '2'\nassert solution('''4 0.5''') ==", "solution(\"\\n\".join([\n    \"3 0.7900\",\n])) == \"\\n\".join([\n    \"2\",\n])\nassert solution(\"\\n\".join([\n    \"1 0.9300\",\n])) == \"\\n\".join([\n    \"1\",\n])\nassert solution(\"\\n\".join([\n    \"3 0.8125\",\n])) == \"\\n\".join([\n    \"3\",\n])\nassert solution(\"\\n\".join([\n    \"3 0.8221\",\n])) == \"\\n\".join([\n    \"3\",\n])\nassert solution(\"\\n\".join([\n    \"10 0.7889\",\n])) == \"\\n\".join([\n    \"4\",\n])\nassert solution(\"\\n\".join([\n    \"1000 0.9000\",\n])) == \"\\n\".join([\n    \"500\",\n])", "solution('''3 0.1''') == '''2'''\nassert solution('''7 0.75''') == '''7'''\nassert solution('''4 0.4''') == '''4'''\nassert solution('''5 0.3''') == '''3'''\nassert solution('''5 0.8''') == '''4'''\n\nprint(\"Well done!\")", "solution('''\n3 0.5\n''') == '1'\n\nassert solution('''\n3 0.5001\n''') == '2'\n\nassert solution('''\n3 0.95\n''') == '3'\n\nassert solution('''\n50 0.95\n''') == '25'\n\nassert solution('''\n1000 0.95\n''') == '475'\n\nassert solution('''\n100 0.95\n''') == '45'\n\nassert solution('''\n100 0.49\n''') == '21'\n\nassert solution('''\n4 0.25\n''') == '1'\n\nassert solution('''\n10 0.1\n''') == '3'\n\nassert solution('''\n10 0.2\n''') == '3'\n\nassert solution('''\n10 0.3\n''') == '3'\n\nassert solution('''\n10 0.4\n''') == '3'\n\nassert solution('''\n10 0.5\n''') == '3'\n\nassert solution('''\n10 0.51\n''') == '4'\n\nassert solution('''\n10 0.6\n''') == '4'\n\nassert solution('''\n10 0.7\n''') == '", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution(\"3 0.5\") == \"2\"\nassert solution(\"5 0.4\") == \"2\"\nassert solution(\"9 0.9\") == \"5\"\nassert solution(\"97 0.24\") == \"13\"\nassert solution(\"100 0.001\") == \"1\"\nassert solution(\"1000 0.0001\") == \"1\"\nassert solution(\"1000 0.000001\") == \"1\"\nassert solution(\"1000 0.00000001\") == \"1\"\nassert solution(\"100 0.000000000000000001\") == \"1\"\nassert solution(\"3 0.5\") == \"2\"\nassert solution(\"3 0.1\") == \"3\"\nassert solution(\"4 0.1\") == \"4\"\nassert solution(\"4 0.2\") == \"3\"\nassert solution(\"4 0.3\") == \"3\"\nassert solution(\"4 0.4\") == \"3\"\nassert solution(\"4 0.5\") == \"2\"\nassert solution(\"4 0.6\") == \"2\"\nassert solution(\"4 0.7\") == \"2\"\nassert solution(\"4 0.8\") == \"2\"\nassert solution(\"4 0.9\") == \"2\"\nassert solution(\"3 0.3\") == \"3\"\nassert solution(\"3 0.7\") == \"2\"\nassert solution(\"2 0.5\") == \"2\"", "solution('''3 0.6''') == '2'\nassert solution('''4 0.6''') == '2'\nassert solution('''4 0.75''') == '1'\nassert solution('''4 0.4''') == '3'\nassert solution('''4 0.25''') == '4'\nassert solution('''4 0.5''') == '3'\nassert solution('''4 0.99''') == '1'\nassert solution('''4 0.01''') == '4'\nassert solution('''4 0.1''') == '4'\nassert solution('''1000 0.85''') == '1'\nassert solution('''1000 0.5''') == '2'\nassert solution('''1000 0.7''') == '1'\nassert solution('''1000 0.3''') == '3'\nassert solution('''1000 0.15''') == '4'\nassert solution('''1000 0.1''') == '4'\nassert solution('''1000 0.2''') == '3'\nassert solution('''1000 0.25''') == '3'\nassert solution('''1000 0.35''') == '3'\nassert solution('''1000 0.45''') == '", "solution(\"3 0.7\") == \"2\"\nassert solution(\"6 0.9\") == \"5\"\nassert solution(\"1 0.99\") == \"1\"\nassert solution(\"30 0.00001\") == \"30\"\n\n# print solution in required format\nn, p = input().split(\" \")\nprint(solution(f\"{n} {p}\"))", "solution(\"5 0.2\") == \"3\"\nassert solution(\"3 0.5\") == \"2\"\nassert solution(\"7 0.8\") == \"7\"\n\n# print the solution\nprint(solution(input()))", "solution(\n    '''\n    3 0.5\n    '''\n) == '1'\n\nassert solution(\n    '''\n    3 0.375\n    '''\n) == '2'\n\nassert solution(\n    '''\n    3 0.42\n    '''\n) == '2'\n\nassert solution(\n    '''\n    3 0.6\n    '''\n) == '2'\n\nassert solution(\n    '''\n    4 0.5\n    '''\n) == '2'\n\nassert solution(\n    '''\n    1000 0.0007\n    '''\n) == '2'\n\nassert solution(\n    '''\n    1000 0.0005\n    '''\n) == '1'\n\n# stress testing\n# random test generation should be implemented here\n\n# manual test\n# it is better to make separate function for this,\n# so that you can re-use this test in stress testing\nfrom sys import stdin, stdout\nfrom typing import Iterable, TextIO\n\ndef main() -> None:\n    def get_input() -> Iterable[str]:\n        n = int(stdin.readline())\n        for _ in range(n):\n            yield stdin.readline()\n\n    def write_output(result: str) ->", "solution(\"3 0.5\") == \"2\"\nassert solution(\"7 0.800\") == \"3\"\nassert solution(\"10 0.80000001\") == \"4\"\n\nimport random\nimport string\nimport sys\n\n# create random test cases to check the correctness of solution\n\nMAX_ITERATIONS = 10**3\nMAX_N = 10**3\nMAX_DIGITS = 4\n\n# run the solution on a bunch of random tests\ndef run_test_case():\n    with open(\"data/input.txt\", \"w\") as f:\n        n = random.randint(3, MAX_N)\n        p = random.random()\n        f.write(f\"{n} {p:.{MAX_DIGITS}f}\")\n\n# generate test case of various sizes\nfor i in range(MAX_ITERATIONS):\n    run_test_case()\n    # execute the solution on the given input\n    if os.system(f\"python solution.py < data/input.txt > data/output.txt\") != 0:\n        print(\"TEST FAILED\")\n        sys.exit(1)\n\n    # make sure the solution is correct\n    if os.system(f\"python solution_checker.py < data/input.txt > data/output_checker.txt", "solution(\"3 0.5\") == \"2\"\nassert solution(\"3 0.7\") == \"1\"\nassert solution(\"4 0.4\") == \"2\"\nassert solution(\"4 0.9\") == \"1\"\nassert solution(\"4 0.1\") == \"3\"\nassert solution(\"5 0.1\") == \"4\"\nassert solution(\"10 0.5\") == \"5\"\nassert solution(\"100 0.01\") == \"10\"\nassert solution(\"100 0.99\") == \"1\"\nassert solution(\"999 0.5\") == \"100\"\nassert solution(\"999 0.001\") == \"333\"\nassert solution(\"999 0.999\") == \"1\"\nassert solution(\"1000 0.001\") == \"334\"\nassert solution(\"1000 0.5\") == \"100\"\nassert solution(\"1000 0.999\") == \"1\"\nassert solution(\"10 ^ 3 0.1\") == \"67\"\nassert solution(\"10 ^ 3 0.7\") == \"35\"\nassert solution(\"10 ^ 3 0.95\") == \"20\"\nassert solution(\"10 ^ 3 0.999\") == \"1\"\nassert solution(\"10 ^ 3 0.5\") == \"67\"\nassert solution(\"10 ^ 3 0.99\") == \"10\"\nassert solution(\"10 ^ 3 0.9999\") == \"1\"\nassert", "solution(\"3 0.2\") == \"2\"\nassert solution(\"8 0.6\") == \"6\"\nassert solution(\"1000 0.9999\") == \"501\"\nassert solution(\"100 0.4\") == \"50\"\nassert solution(\"500 0.9\") == \"501\"\nassert solution(\"500 0.1\") == \"3\"\nassert solution(\"500 0.5\") == \"250\"\nassert solution(\"500 0.99\") == \"500\"\nassert solution(\"500 0.9999\") == \"500\"\nassert solution(\"500 0.999999\") == \"501\"\nassert solution(\"500 0.99999999\") == \"501\"\nassert solution(\"1000 0.1\") == \"6\"\nassert solution(\"1000 0.99\") == \"501\"\nassert solution(\"1000 0.9999\") == \"501\"\nassert solution(\"1000 0.999999\") == \"501\"\nassert solution(\"1000 0.99999999\") == \"501\"\nassert solution(\"1000 0.9\") == \"501\"\nassert solution(\"1000 0.2\") == \"200\"\nassert solution(\"1000 0.5\") == \"500\"\nassert solution(\"1000 0.8\") == \"501\"\nassert solution(\"1000 0.7\") == \"501\"\nassert solution(\"500 0.05\") == \"3\"\nassert solution(\"500 0.1\") == \"3", "solution('''\n10 0.1000\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 0.5000\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n10 0.9000\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n4 0.5000\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 0.7500\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n10 0.6000\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n10 0.5500\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n10 0.6600\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n10 0.5200\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n10 0.4800\n''') == '''\n3\n'''\n\n# check", "solution('''\n3 0.500\n''') == '2'\n\nassert solution('''\n6 0.750\n''') == '4'\n\nassert solution('''\n15 0.999\n''') == '6'", "solution(solution_input) == solution_output, 'Wrong solution'\nassert solution(solution_input_2) == solution_output_2, 'Wrong solution'\n\nprint('Congratulations, you have solved the task!')", "solution('''\n4 0.4\n''') == '''\n2\n'''\nassert solution('''\n4 0.7\n''') == '''\n3\n'''\nassert solution('''\n5 0.9\n''') == '''\n5\n'''\nassert solution('''\n5 0.1\n''') == '''\n2\n'''\nassert solution('''\n5 0.3\n''') == '''\n2\n'''\nassert solution('''\n5 0.5\n''') == '''\n3\n'''\nassert solution('''\n5 0.8\n''') == '''\n4\n'''\nassert solution('''\n5 0.6\n''') == '''\n3\n'''\nassert solution('''\n5 0.4\n''') == '''\n2\n'''\nassert solution('''\n5 0.2\n''') == '''\n2\n'''\nassert solution('''\n5 0.7\n''') == '''\n3\n'''\nassert solution('''\n5 0.9\n''') == '''\n5\n'''\nassert solution('''\n5 0.1\n''') == '''\n2\n'''\nassert solution('''\n5 0.3\n''') == '", "solution('''\n3 0.5000\n''') == '2'\n\nassert solution('''\n10 0.9999\n''') == '3'\n\nassert solution('''\n1000 0.9000\n''') == '164'\n\nassert solution('''\n200 0.0000\n''') == '200'\n\nassert solution('''\n3 0.4999\n''') == '3'\n\n# stress test:\nfrom random import randint\n\nwhile True:\n    N = randint(1, 100)\n    P = randint(0, 100) / 100\n    if P > 1 / N:\n        break\n\nprint('N = {}, P = {}'.format(N, P))\nres = solution(str(N) + ' ' + str(P))\nassert res == str(N - 1), res"], "finish_reason": ["length", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop"], "sum_logprob": [-103.54985525462051, -96.77378184692695, -60.96861314717396, -36.25669412760999, -105.37217674348507, -98.08354346204705, -76.19601152449204, -48.43094590414398, -54.550298428825, -38.93505149184001, -38.49618589717001, -11.837277619999998, -13.837361037000003, -160.76085799194794, -19.690167647469988, -78.42634220664901, -73.64347235338701, -123.46939538270802, -40.84664343526001, -78.45514118902699, -95.72713617103695, -132.83088742664106, -81.17002564547003, -72.89557517802997, -6.2457117037000005, -136.99599285390383, -101.55870139571003, -112.07723716572207, -88.72807784676596, -116.06065925563797, -51.55311426915099, -112.47381429023503, -57.37232853629099, -80.63677003672402, -50.932155448860016, -92.39627009582905, -13.944155118789995, -113.70473619605397, -90.38713192325103, -55.67728082870998, -31.616483438009993, -165.526202307024, -219.38426491253693, -127.64249139156995, -130.98995449295396, -71.93410806615306, -29.903954793579995, -30.061569911372004, -51.48787031787736, -121.81412697713003], "mean_logprob": [-0.34516618418206835, -0.32257927282309, -0.20322871049058, -0.5493438504183333, -0.35124058914495, -0.32694514487349, -0.25398670508164, -0.16143648634714666, -0.18183432809608333, -0.5990007921821539, -0.12832061965723332, -1.183727762, -0.6589219541428571, -0.5358695266398267, -0.2625355686329333, -0.26142114068883, -0.24547824117795666, -0.4115646512756933, -0.6807773905876666, -0.2615171372967567, -0.3190904539034567, -0.44276962475547, -0.27056675215156667, -0.24298525059343332, -0.6939679670777777, -0.6198913703796561, -0.3385290046523667, -0.3735907905524067, -0.29576025948922, -0.38686886418546, -0.23222123544662612, -0.3749127143007833, -0.19124109512097, -0.39722546816120197, -0.5250737675140206, -0.30798756698609664, -0.046480517062633335, -0.37901578732018, -0.30129043974417, -0.6474102421943023, -0.5965374233586792, -0.55175400769008, -0.73128088304179, -0.4254749713052333, -0.43663318164318, -0.23978036022051, -0.5437082689741818, -0.5566957390994814, -0.17162623439292465, -0.627907871016134]}
{"prompt": "'''\nThis is an interactive problem!\n\nAs part of your contribution in the Great Bubble War, you have been tasked with finding the newly built enemy fortress. The world you live in is a giant 10^9 \u00d7 10^9 grid, with squares having both coordinates between 1 and 10^9. \n\nYou know that the enemy base has the shape of a rectangle, with the sides parallel to the sides of the grid. The people of your world are extremely scared of being at the edge of the world, so you know that the base doesn't contain any of the squares on the edges of the grid (the x or y coordinate being 1 or 10^9). \n\nTo help you locate the base, you have been given a device that you can place in any square of the grid, and it will tell you the manhattan distance to the closest square of the base. The manhattan distance from square (a, b) to square (p, q) is calculated as |a\u2212p|+|b\u2212q|. If you try to place the device inside the enemy base, you will be captured by the enemy. Because of this, you need to make sure to never place the device inside the enemy base. \n\nUnfortunately, the device is powered by a battery and you can't recharge it. This means that you can use the device at most 40 times. \n\nInput\n\nThe input contains the answers to your queries. \n\nInteraction\n\nYour code is allowed to place the device on any square in the grid by writing \"? i j\" (1 \u2264 i,j \u2264 10^9). In return, it will recieve the manhattan distance to the closest square of the enemy base from square (i,j) or -1 if the square you placed the device on is inside the enemy base or outside the grid. \n\nIf you recieve -1 instead of a positive number, exit immidiately and you will see the wrong answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nYour solution should use no more than 40 queries. \n\nOnce you are sure where the enemy base is located, you should print \"! x y p q\" (1 \u2264 x \u2264 p\u2264 10^9, 1 \u2264 y \u2264 q\u2264 10^9), where (x, y) is the square inside the enemy base with the smallest x and y coordinates, and (p, q) is the square inside the enemy base with the largest x and y coordinates. Note that answering doesn't count as one of the 40 queries.\n\nAfter printing a query or printing the answer, do not forget to output end of line and flush the output. Otherwise, you will get idleness limit exceeded. To do this, use: \n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * See the documentation for other languages.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"42\\n-1\\n-1\\n\") == \"! 2 2 5 5\"", "solution('''\n''') == '''\n'''", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution(r'''10\n11\n-1\n-1\n-1\n10\n-1\n-1\n-1\n-1\n12\n? 2 2\n? 2 4\n? 2 6\n? 2 8\n? 2 10\n? 4 2\n? 4 4\n? 4 6\n? 4 8\n? 4 10\n? 6 2\n? 6 4\n? 6 6\n? 6 8\n? 6 10\n? 8 2\n? 8 4\n? 8 6\n? 8 8\n? 8 10\n? 10 2\n? 10 4\n? 10 6\n? 10 8\n? 10 10\n? 1 1\n? 3 3\n? 5 5\n? 7 7\n? 9 9\n''') == '''? 2 2\n10\n? 2 4\n11\n? 2 6\n-1\n? 2 8\n-1\n? 2 10\n-1\n? 4 2\n10\n? 4 4\n-1\n? 4 6\n-1\n? 4 8\n-1\n? 4 10\n-1\n? 6 2\n12\n? 6 4\n-1\n? 6 6\n-1\n? 6 8\n-1\n? 6 10\n-1\n? 8 2\n12\n? 8 4\n-1\n? 8 6\n-1\n? 8 8\n-1\n? 8 10\n-1\n? 10 2\n12\n", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n\n# check the performance of solution\nimport timeit\nimport random\nassert timeit.timeit(lambda: solution(str(random.randint(1, 100))), number=10000) < 1", "solution(stdin) == stdout", "solution(sample_stdin) == sample_stdout\nprint('solution has been passed')", "solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 1 1 1 1\\n\"\nassert solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 1 1 9 9\\n\"\nassert solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 1 1 9 1\\n\"\nassert solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 1 1 1 9\\n\"\nassert solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 1 9 9 9\\n\"\nassert solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 1 9 9 1\\n\"\nassert solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 1 9 1 9\\n\"\nassert solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 1 9 1 1\\n\"\nassert solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 9 1 9 9\\n\"\nassert solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 9 1 9 1\\n\"\nassert solution(\"?? ?? ?? ?? ?? ?? ?? ?? ?? ??\\n\") == \"! 9 1 1 9\\n\"\nassert solution(\"??", "solution(\"1\\n\") == \"! 1 1 1 1\\n\"\nassert solution(\"10\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n1\\n1\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1", "correct_solution(solution)", "solution('''\n2 3\n3 2\n-1\n''') == '''\n! 2 2 3 3\n'''\n\nassert solution('''\n1 1\n1 1\n1 1\n1 2\n2 1\n2 2\n2 3\n3 2\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n-1\n''') == '''\n! 1 1 2 2\n'''", "solution(stdin=INPUT_DATA) == OUTPUT_DATA\n\n# try to find another solution\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "solution('''\n''') == '''\n'''", "solution(input) == output", "solution(stdin) == '! x y p q'\n\n# submission\nsubmission = '''import sys\n\ndef readline():\n    return sys.stdin.readline().strip()\n\ndef print_line(line):\n    print(line)\n    sys.stdout.flush()\n\n# write your solution here\ndef solution():\n    pass\n\nsolution()\n'''\n\n# run solution\nsolution_output = subprocess.run(['python', '-c', submission], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\nif solution_output.returncode == 0:\n    print('Your solution is correct!')\nelse:\n    print('Your solution is incorrect!', file=sys.stderr)\n    print('Error:', solution_output.stderr.decode(), file=sys.stderr)\n\n# run validator\nvalidator_output = subprocess.run(['python', validator], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\nprint(validator_output.stdout.decode())\nprint(validator_output.stderr.decode(), file=sys.stderr)\n\nif validator_output.returncode == 0:", "\"!\" in solution(\"! 0 0 10 10\")\nassert \"!\" in solution(\"! 0 10 10 0\")\nassert \"!\" in solution(\"! 0 10 10 10\")\nassert \"!\" in solution(\"! 0 0 10 0\")\nassert \"!\" in solution(\"! 10 0 10 10\")\nassert \"!\" in solution(\"! 0 10 10 20\")\nassert \"!\" in solution(\"! 10 0 20 10\")\nassert \"!\" in solution(\"! 10 10 20 20\")\nassert \"!\" in solution(\"! 10 10 20 30\")\nassert \"!\" in solution(\"! 10 10 30 20\")\nassert \"!\" in solution(\"! 10 20 20 30\")\nassert \"!\" in solution(\"! 10 20 30 20\")\nassert \"!\" in solution(\"! 10 20 30 30\")\nassert \"!\" in solution(\"! 20 10 30 20\")\nassert \"!\" in solution(\"! 20 10 30 30\")\nassert \"!\" in solution(\"! 20 20 30 30\")\nassert \"!\" in solution(\"! 20 10 20 30\")\nassert \"!\" in solution(\"! 20 10 30 20\")\nassert \"!\" in solution(\"! 20 20 30 20\")\nassert \"!\" in solution(\"! 20 20 20 30\")\n\n# check performance\nimport timeit\ndef time_performance(code: str) -> float:\n    return timeit.timeit(code, number=10)\n# Checking performance\n", "'''! 1 1 99999999 99999999''' == solution('''\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1", "solution('''\n3\n3\n3\n-1\n-1\n-1\n-1\n-1\n-1\n''') == '''\n! 1 1 3 3\n'''\nassert solution('''\n3\n3\n2\n1\n2\n2\n1\n1\n-1\n''') == '''\n! 1 1 3 2\n'''\nassert solution('''\n3\n3\n4\n4\n4\n4\n4\n4\n4\n4\n''') == '''\n! 1 1 3 3\n'''\nassert solution('''\n3\n3\n4\n4\n4\n4\n4\n4\n4\n4\n''') == '''\n! 1 1 3 3\n'''\nassert solution('''\n1\n1\n-1\n''') == '''\n! 1 1 1 1\n'''\nassert solution('''\n1\n1\n-1\n''') == '''\n! 1 1 1 1\n'''\nassert solution('''\n1\n3\n-1\n-1\n-1\n''') == '''\n! 1 1 1 3\n'''\nassert solution('''\n3\n1\n-1\n-1\n-1\n''') == '''\n! 1 1 3 1\n'''\nassert solution('''\n1\n1\n", "'! 1 2 3 4' == solution('''\n0\n0\n-1\n''')\n\nassert '! 2 4 5 4' == solution('''\n2\n2\n2\n2\n2\n2\n2\n2\n0\n0\n0\n''')\n\nassert '! 2 2 3 3' == solution('''\n2\n2\n0\n0\n2\n2\n0\n0\n2\n2\n2\n2\n2\n2\n-1\n''')\n\nassert '! 2 4 5 5' == solution('''\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n0\n0\n0\n0\n''')\n\nassert '! 1 3 3 6' == solution('''\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2", "solution(\"1\\n1\\n9\\n9\\n9\\n8\\n8\\n7\\n7\\n7\\n6\\n6\\n5\\n5\\n5\\n4\\n4\\n3\\n3\\n3\\n2\\n2\\n1\\n9\\n9\\n9\\n8\\n8\\n7\\n7\\n7\\n6\\n6\\n5\\n5\\n5\\n4\\n4\\n3\\n3\\n3\\n2\\n2\\n1\\n\") == \"! 3 3 7 3\"\n\n# get output from russians and compare to solution\nimport random\n\ndef get_russian_output(stdin: str) -> str:\n    line = \"python3 main.py\"\n    process = subprocess.Popen(line, shell=True,\n                               stdin=subprocess.PIPE,\n                               stdout=subprocess.PIPE,\n                               stderr=subprocess.PIPE)\n    out, err = process.communicate(input=stdin.encode('utf-8'))\n    out = out.decode('utf-8')\n    err = err.decode('utf-8')\n    if err:\n", "solution(\"3\\n12\\n34\\n2\\n41\\n5\\n-1\\n\") == \"! 4 9 6 8\"\n\n# start testing\nT = int(input())\nfor t in range(T):\n    # write your stdin to a file and pass it to the solution\n    with open(f\"test{t}.in\", \"w\") as testcase:\n        testcase.write(input())\n    output = subprocess.run([\"python\", \"solution.py\"], stdout=subprocess.PIPE)\n    assert output.stdout.decode(\"utf-8\") == solution(input())", "solution(u'''\n-1\n-1\n1 0\n0 1\n-1\n-1\n-1\n-1\n-1\n2 0\n0 2\n-1\n-1\n-1\n-1\n-1\n3 0\n0 3\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "solution(str_input) == str_output\n\n# check whether the solution is inside the allowed time limit\nassert time.time() - start < int_time_limit\n\n# run solution on the large input\nsolution(l_input)", "solution(\"22\\n10\\n-1\\n30\\n27\\n36\\n34\\n28\\n-1\\n-1\\n22\\n-1\\n33\\n24\\n27\\n-1\\n-1\\n28\\n-1\\n-1\\n30\\n-1\\n-1\\n26\\n-1\\n-1\\n17\\n-1\\n-1\\n33\\n-1\\n-1\\n23\\n-1\\n28\\n33\\n\") == \"! 7 9 15 13\\n\"", "solution(stdin=sample_input_1) == sample_output_1", "solution(\"10\\n\") == \"! 1 1 10 10\"\nassert solution(\"1\\n\") == \"! 1 1 2 2\"\nassert solution(\"4\\n\") == \"! 1 1 2 2\"\nassert solution(\"5\\n\") == \"! 1 1 2 2\"\nassert solution(\"2\\n\") == \"! 1 1 2 2\"\nassert solution(\"3\\n\") == \"! 1 1 2 2\"\nassert solution(\"6\\n\") == \"! 1 1 2 2\"\nassert solution(\"7\\n\") == \"! 1 1 2 2\"\nassert solution(\"8\\n\") == \"! 1 1 2 2\"\nassert solution(\"9\\n\") == \"! 1 1 2 2\"\nassert solution(\"0\\n\") == \"! 1 1 2 2\"\n\n# test for the correctness of solution\nassert solution(\"23\\n\") == \"! 1 1 2 2\"\nassert solution(\"58\\n\") == \"! 1 1 2 2\"\nassert solution(\"41\\n\") == \"! 1 1 2 2\"\nassert solution(\"20\\n\") == \"! 1 1 2 2\"\nassert solution(\"19\\n\") == \"! 1 1 2 2\"\nassert solution(\"42\\n\") == \"! 1 1 2 2\"\nassert solution(\"32\\n\") == \"! 1 1 2 2\"\nassert solution(\"52", "solution(\"\") == \"\"", "solution(stdin='! 8 12 4 8') == '! 8 12 4 8'", "solution('''\n''') == '''\n'''", "solution(\"1\\n2\\n5\\n10\\n-1\\n1\\n1\\n11\\n0\\n2\\n4\\n9\\n8\\n6\\n3\\n7\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n\") == \"! 6 3 9 7\"", "solution(\n'''\n25\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n! 1 1 2 2\n''') == '25', 'simple test failed'\n\nassert solution(\n'''\n25\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n! 1 1 3 3\n''') == '25', 'simple test failed'\n\nassert solution(\n'''\n25\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n! 1 1 1000000000 1000000000\n''') == '25',", "solution('''\n\n''') == '''\n\n'''", "solution(r'''\n? 1 1\n? 5 6\n? 10 10\n! 2 3 8 9\n''') == r'''\n2\n0\n8\n! 2 3 8 9\n'''\n\n# check the correctness of solution\nassert solution(r'''\n? 1000 1000\n? 1001 1001\n? 1002 1002\n? 1003 1003\n? 1004 1004\n? 1005 1005\n? 1006 1006\n? 1007 1007\n? 1008 1008\n? 1009 1009\n? 1010 1010\n? 1011 1011\n? 1012 1012\n? 1013 1013\n? 1014 1014\n? 1015 1015\n? 1016 1016\n? 1017 1017\n? 1018 1018\n? 1019 1019\n? 1020 1020\n? 1021 1021\n? 1022 1022\n? 1023 1023\n? 1024 1024\n? 1025 1025\n? 1026 1026\n? 1027 1027\n? 1028 1028\n? 1029 1029\n? 1030 1030\n? 1031 1031\n? 1032 1032\n? 1033 1033\n? 1034 1034\n? 1035 1035\n? 1036 1036\n? 1037 1037\n? 1038 1038\n? 1039 1039\n? 1040", "solution('''\n\n''') == '''\n\n'''", "solution('''\n''') == ''", "solution('''\n? 10 10\n? 1 10\n? 10 1\n? 20 20\n? 1 1\n? 1 2\n? 2 1\n? 1 3\n? 3 1\n? 2 2\n? 1 4\n? 4 1\n? 1 5\n? 5 1\n? 2 3\n? 3 2\n? 2 4\n? 4 2\n? 2 5\n? 5 2\n? 3 3\n? 3 4\n? 4 3\n? 3 5\n? 5 3\n? 4 4\n? 4 5\n? 5 4\n! 7 6 12 12\n''') == '''\n7\n0\n0\n11\n-1\n2\n2\n2\n1\n2\n2\n1\n1\n1\n1\n2\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n? 1 1\n? 2 2\n? 3 3\n? 4 4\n? 5 5\n? 6 6\n? 7 7\n? 8 8\n? 9 9\n? 10 10\n? 11 11\n? 12 12\n? 13 13\n? 14 14\n? 15 15\n? 16 16\n? 17 17\n? 18 18\n? 19 19\n? 20 20\n? 21 21\n? 22 22\n? 23 23\n? 24 24", "solution('''\n1\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1", "solution(\"\"\"\n1 1\n4 2\n-1\n\"\"\") == \"! 1 1 4 2\"", "solution(\"41\") == \"! 1 1 10 10\"", "solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148", "solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness of solution\nassert solution('''\n''') == ''\n\n# check the correctness", "solution(\"1\") == \"\"", "solution('''\n-1 \n3\n-1\n-1\n''') == '''\n! 2 2 9 9\n'''\n\n# check that solution has no extra input/output\nfrom bz2 import BZ2File\nimport io\nfrom contextlib import redirect_stdout\nfrom time import time\nimport resource\n\nwith BZ2File('input.txt.bz2') as input_file, BZ2File('output.txt.bz2') as output_file:\n    with redirect_stdout(io.StringIO()) as new_stdout:\n        start_time = time()\n        # bz2 files give bytes, so decode to string\n        solution(input_file.read().decode())\n        execution_time = time() - start_time\n    assert new_stdout.getvalue() == output_file.read().decode()\n    assert execution_time <= 5, 'you should use the \"with open\" context manager'\n    assert resource.getrusage(resource.RUSAGE_SELF).ru_maxrss <= 1024, 'exceeded memory limit'\n\nprint('Correct! Good job!')", "solution(default_stdin) == default_stdout", "solution('''\n''') == '''\n'''", "solution(\"\") == \"\"\n\n# submit the answer\nsubmit = False\nif submit:\n    print(solution(\"\"))", "solution(stdin) == stdout\n\n# check time limit\ndef execution_time(n: int) -> float:\n    pass\nassert execution_time(1) < 1 # second\n\n# check memory limit\ndef memory_usage(n: int) -> int:\n    pass\nassert memory_usage(1) < 1 # kilobytes", "solution('''\n? 5 7\n''') == '''\n10\n'''\n\nassert solution('''\n? 5 5\n? 1 3\n? 4 5\n? 3 4\n? 2 5\n? 2 4\n? 2 3\n? 2 2\n? 2 1\n? 6 6\n? 7 5\n? 7 4\n? 7 3\n? 7 2\n? 7 1\n? 7 7\n? 6 5\n? 6 4\n? 6 3\n? 6 2\n? 6 1\n? 7 6\n? 8 5\n? 8 4\n? 8 3\n? 8 2\n? 8 1\n? 9 5\n? 9 4\n? 9 3\n? 9 2\n? 9 1\n? 8 6\n? 9 6\n? 10 5\n? 10 4\n? 10 3\n? 10 2\n? 10 1\n? 10 6\n? 10 7\n? 9 7\n? 8 7\n? 6 7\n? 5 7\n? 4 7\n? 3 7\n? 2 7\n? 1 7\n? 1 6\n? 1 5\n? 1 4\n? 1 3\n? 1 2\n? 1 1\n? 1 8\n? 1 9\n? 1 10\n? 2 10\n? 3 10\n? 4 10\n? 5 10\n? 6 10\n? 7 10\n? 8 10\n? 9 10\n? 10 8\n? 10 9\n?", "solution(\n'''\n3\n3\n2\n1\n2\n'''\n) == '''\n! 2 2 4 4\n'''", "solution('''\n\n''') == '''\n'''"], "finish_reason": ["stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop"], "sum_logprob": [-21.373399016200004, -5.746344288, -6.334915116689999, -68.32631695628908, -28.895340867409985, -5.131345935, -26.2562754202, -38.559273142248486, -56.280860692371036, -8.466257356, -51.182684238700006, -45.21720899792, -5.746345931999999, -6.776448869999999, -120.18511039538195, -110.47782823099003, -24.338808703289995, -80.89322308541598, -98.40741143177313, -131.432488187759, -121.76214760544205, -39.716606821183966, -67.7005300115, -119.588347031621, -14.148567915149997, -99.39612286557302, -4.301823130000001, -26.481299539, -5.746344471999999, -74.03961622820002, -57.437089566827964, -6.7199687488999995, -59.990031367709946, -6.719968724899999, -7.224696209, -99.71362620799006, -26.86112620195998, -21.257725523399998, -17.214586660000002, -13.570272310818995, -15.652292486490005, -9.609386124, -152.66785076744205, -11.712429653600001, -5.746344871999999, -20.48228666695, -50.11619290625001, -101.29273535202003, -25.912842191000003, -7.59050688], "mean_logprob": [-0.9292782180956521, -0.4104531634285714, -0.39593219479312497, -0.22775438985429666, -0.36576380844822787, -0.5701495483333333, -1.1934670645545453, -0.12853091047416165, -0.18760286897457001, -1.0582821695, -0.3159424953006173, -0.15072402999306667, -0.41045328085714283, -0.9680641242857143, -0.40061703465127335, -0.3682594274366333, -0.0811293623443, -0.26964407695138665, -0.32802470477257667, -0.43810829395919665, -0.828313929288721, -0.13238868940394666, -1.2309187274818183, -0.8603478203713741, -0.7860315508416666, -0.33132040955191, -0.7169705216666666, -1.32406497695, -0.41045317657142855, -0.49032858429271525, -0.19145696522276, -0.41999804680624997, -0.1999667712257, -0.41999804530625, -0.7224696209, -0.3323787540266333, -0.08953708733986666, -0.885738563475, -1.324198973846154, -0.045234241036063334, -0.0521743082883, -1.3727694462857143, -0.5804861245910342, -0.9009561272000001, -0.41045320514285716, -0.7315102381053571, -0.6343821886867088, -0.33764245117339997, -0.7852376421515151, -0.506033792]}
{"prompt": "'''\nYou are given N points on an infinite plane with the Cartesian coordinate system on it. N-1 points lay on one line, and one point isn't on that line. You are on point K at the start, and the goal is to visit every point. You can move between any two points in a straight line, and you can revisit points. What is the minimum length of the path? \n\nInput\n\nThe first line contains two integers: N (3 \u2264 N \u2264 2*10^5) - the number of points, and K (1 \u2264 K \u2264 N) - the index of the starting point.\n\nEach of the next N lines contain two integers, A_i, B_i (-10^6 \u2264 A_i, B_i \u2264 10^6) - coordinates of the i-th point.\n\nOutput\n\nThe output contains one number - the shortest path to visit all given points starting from point K. The absolute difference between your solution and the main solution shouldn't exceed 10^-6;\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n4 1\n1 1\n1 2\n1 3\n1 4\n''') == '5.0'\n\nassert solution('''\n4 2\n1 1\n1 2\n1 3\n1 4\n''') == '5.0'\n\nassert solution('''\n4 3\n1 1\n1 2\n1 3\n1 4\n''') == '6.0'\n\nassert solution('''\n4 4\n1 1\n1 2\n1 3\n1 4\n''') == '5.0'\n\nassert solution('''\n5 3\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '3.0'\n\nassert solution('''\n5 2\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '5.0'\n\nassert solution('''\n5 1\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '5.0'\n\nassert solution('''\n5 5\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '5.0'\n\nassert solution('''\n5 4\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '5.0'\n\nassert solution('''\n9", "(solution(__doc__) == '''\n\n''')", "solution(r'''\n4 2\n1 1\n1 2\n2 2\n2 1\n''') == '4.0'\n\nassert solution(r'''\n4 3\n1 1\n1 2\n2 2\n2 1\n''') == '3.0'\n\nassert solution(r'''\n4 1\n1 1\n1 2\n2 2\n2 1\n''') == '4.0'\n\nassert solution(r'''\n4 2\n1 1\n1 2\n2 2\n2 1\n''') == '4.0'\n\nassert solution(r'''\n4 2\n0 1\n1 0\n0 -1\n-1 0\n''') == '8.0'\n\nassert solution(r'''\n3 1\n0 1\n0 -1\n-1 0\n''') == '2.0'\n\nassert solution(r'''\n5 1\n1 1\n1 2\n2 2\n2 1\n2 3\n''') == '9.656854249492381'\n\nassert solution(r'''\n5 1\n0 1\n0 -1\n-1 0\n1 0\n1 1\n''') == '6.0'\n\nassert solution(r'''\n3 2\n0 1\n0 -1\n-1 0\n''') == '2.0'\n", "solution('''\n4 3\n2 3\n2 5\n0 1\n-2 0\n''') == '5.0'\nassert solution('''\n4 3\n2 3\n2 5\n2 3\n2 5\n''') == '6.0'\nassert solution('''\n4 1\n2 3\n2 5\n2 3\n2 5\n''') == '0.0'\nassert solution('''\n4 2\n2 3\n2 5\n2 3\n2 5\n''') == '4.0'\nassert solution('''\n4 1\n2 3\n2 5\n2 3\n2 5\n''') == '0.0'\nassert solution('''\n7 2\n3 5\n3 4\n2 3\n2 2\n2 1\n2 0\n2 -1\n''') == '12.0'\nassert solution('''\n7 2\n0 5\n0 4\n0 3\n0 2\n0 1\n0 0\n0 -1\n''') == '10.0'\nassert solution('''\n7 2\n3 5\n3 4\n2 3\n2 2\n2 1\n2 0\n2 -1\n''') == '12.0'\nassert solution('''\n7 2\n3 5\n3 4\n2 3\n2 2\n2 1\n2 0\n2 -1", "solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") ==", "solution(\"\"\"\n4 2\n-4 -4\n-4 0\n4 0\n4 4\n\"\"\") == \"16\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 1\n-4 -4\n-4 0\n4 0\n4 4\n\"\"\") == \"16\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 3\n-5 1\n1 2\n2 1\n2 -1\n-5 -1\n\"\"\") == \"15\"", "solution(\"3 2\\n-1 0\\n1 0\\n0 1\") == \"2.414213562373095\"\n \n# check the performance of solution\ntimeit.timeit(\"solution(\\\"3 2\\\\n-1 0\\\\n1 0\\\\n0 1\\\")\", globals=globals(), number=10)\n \n# get input for the problem\nwith open(\"input.txt\", \"r\") as file:\n    input = file.read()\n \n# get output for the problem\nwith open(\"output.txt\", \"w\") as file:\n    file.write(solution(input))", "solution('''4 2\n0 0\n0 2\n2 0\n2 2''') == '4.0'\nassert solution('''5 3\n1 1\n2 2\n3 3\n4 4\n5 5''') == '6.0'\nassert solution('''5 1\n0 0\n0 2\n1 1\n2 0\n2 2''') == '2.23606797749979'\nassert solution('''5 1\n0 0\n1 1\n1 -1\n2 0\n2 2''') == '3.0'\nassert solution('''5 3\n0 0\n1 1\n1 -1\n2 0\n2 2''') == '2.0'\nassert solution('''5 1\n0 0\n0 2\n2 0\n2 2\n1 1''') == '4.0'\nassert solution('''5 3\n0 0\n0 2\n2 0\n2 2\n1 1''') == '3.0'\nassert solution('''5 1\n0 0\n0 2\n2 0\n2 2\n4 0''') == '4.0'\nassert solution('''5 1\n0 0\n0 2\n2 0\n2 2\n4 2''') == '8.0'\nassert solution('''5 3\n0 0\n0 2\n2 0\n2", "solution(sys.stdin.read()) == sys.stdout.read()", "solution('''\n3 1\n1 1\n2 3\n5 2\n''') == '''\n8.0\n'''\n\n# get input for development purposes\ndef get_input() -> str:\n    with open('test/test_p3.txt') as f:\n        return f.read()\n\ndef main():\n    data = sys.stdin.read()\n    print(solution(data))\n\nif __name__ == '__main__':\n    main()", "solution(\"4 2\\n0 0\\n0 2\\n2 2\\n2 0\") == \"4.82842712474619\"\nassert solution(\"4 1\\n0 0\\n0 2\\n2 2\\n2 0\") == \"6.82842712474619\"\nassert solution(\"5 3\\n0 0\\n0 2\\n2 2\\n2 0\\n2 4\") == \"6.82842712474619\"\nassert solution(\"3 1\\n0 0\\n0 2\\n2 2\") == \"4\"\nassert solution(\"4 2\\n0 0\\n0 2\\n2 2\\n2 0\") == \"4.82842712474619\"\nassert solution(\"4 1\\n0 0\\n0 2\\n2 2\\n2 0\") == \"6.82842712474619\"\nassert solution(\"5 3\\n0 0\\n0 2\\n2 2\\n2 0\\n2 4\") == \"6.82842712474619\"\nassert solution(\"3 1\\n0 0\\n0 2\\n2 2\") == \"4\"\nassert solution(\"3 1\\n0 0\\n0 2\\n2 2\") == \"4\"\nassert solution(\"4 1\\n0 0\\n0 2\\", "solution(\"\"\"6 2\n0 0\n1 0\n2 0\n3 0\n4 0\n4 5\n\"\"\") == \"12.0\"\nassert solution(\"\"\"4 1\n0 0\n1 0\n2 0\n1 1\n\"\"\") == \"4.414213562373095\"\nassert solution(\"\"\"4 1\n0 0\n1 0\n2 0\n3 0\n\"\"\") == \"6.0\"\nassert solution(\"\"\"10 4\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n\"\"\") == \"18.0\"\nassert solution(\"\"\"5 3\n0 0\n1 0\n2 0\n1 1\n1 2\n\"\"\") == \"5.5\"\nassert solution(\"\"\"6 4\n0 0\n1 0\n2 0\n3 0\n4 0\n3 3\n\"\"\") == \"9.0\"\nassert solution(\"\"\"5 1\n0 0\n1 0\n2 0\n1 1\n1 2\n\"\"\") == \"6.5\"\nassert solution(\"\"\"7 2\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n4 5\n\"\"\") == \"13.0\"\nassert solution(\"\"\"3 1\n0 0\n1 0\n2 0\n\"\"\") == \"3.0\"\nassert", "solution('''\n5 3\n0 0\n1 1\n1 0\n2 2\n3 3\n''') == '3.414213562373095'\n\n# LOGIC:\n#\n# GRAPH THEORY, EUCLIDEAN PLANE, EUCLIDEAN DISTANCE, STRAIGHT LINE DISTANCE, STRAIGHT LINE, GRAPH, EUCLIDEAN, \n# FLYING SPACESHIP, ANALYSIS OF ALGORITHMS, BRUTE FORCE, ADDITIONAL DATA STRUCTURES, DISTANCE, POINTS, COORDINATES\n#\n# WIKIPEDIA:\n#\n# In mathematics, the Euclidean distance or Euclidean metric is the \"ordinary\" straight-line distance between two points in Euclidean space. With this distance, Euclidean space becomes a metric space. The associated norm is called the Euclidean norm. Older literature refers to the metric as the Pythagorean metric. A generalized term for the Euclidean norm is the L2 norm or L2 distance.", "solution(example) == \"0.2\"\nassert solution(example2) == \"1.4142135623730951\"\nassert solution(example3) == \"4.4\"", "solution(\"\") == \"\", \"Test 1\"\nassert solution(\"\") == \"\", \"Test 2\"\nassert solution(\"\") == \"\", \"Test 3\"\nassert solution(\"\") == \"\", \"Test 4\"\nassert solution(\"\") == \"\", \"Test 5\"\nassert solution(\"\") == \"\", \"Test 6\"\nassert solution(\"\") == \"\", \"Test 7\"\nassert solution(\"\") == \"\", \"Test 8\"\nassert solution(\"\") == \"\", \"Test 9\"\nassert solution(\"\") == \"\", \"Test 10\"\n\n# submit solution\nprint(solution(__import__('sys').stdin.read()))", "solution(solution_input) == solution_output", "solution(\"\"\"4 2\n1 1\n1 2\n1 3\n1 4\"\"\") == \"4.0\"\n\nassert solution(\"\"\"3 2\n0 0\n1 0\n1 1\"\"\") == \"2.0\"\n\nassert solution(\"\"\"3 2\n1 1\n2 3\n2 2\"\"\") == \"3.0\"\n\n#import solution.py\n'''\nYou are given a sequence A1, A2, ..., AN. You should find the smallest positive integer X such that the product of the elements of the sequence is divisible by X.\n\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe first line of each description consists of a single integer N.\n\nThe second line of each description contains N space-separated integers - A1, A2, ..., AN respectively.\n\nOutput\n\nFor each test case, output a single line containing the answer to the problem.\n\nConstraints\n\n1 \u2264 T \u2264 10\n\n1 \u2264 N \u2264 3 * 10^5\n\n1 \u2264 Ai \u2264 10^9\n\nExample\n\nInput:\n2\n3\n6 2 8\n2\n2 3\n\nOutput:\n12\n6\n\n'''\n\ndef solution(stdin: str) -> str:\n    pass\n", "(solution('''\n5 2\n1 1\n1 -1\n2 0\n2 2\n2 3\n''') == '3.7416573867739413')", "solution('''\n5 3\n2 3\n2 2\n2 1\n2 -1\n2 -2\n''') == '3.414213562373095'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1 1\n2 2\n3 3\n4 4\n''') == '4.242640687119285'\n\n# check the correctness of solution\nassert solution('''\n6 1\n1 1\n1 -1\n-1 -1\n-1 1\n-1 -1\n1 -1\n''') == '6.0'\n\ndef main() -> None:\n    # Read in the input\n    with open('path.in', 'r') as f:\n        data = f.read().strip()\n\n    # Solve the problem\n    solution = solution(data)\n\n    # Write out the solution\n    with open('path.out', 'w') as f:\n        f.write(str(solution))\n\nif __name__ == '__main__':\n    main()", "solution(\"\"\"\n3 2\n1 0\n0 1\n1 1\n\"\"\") == \"2.0\"", "solution(\n    '''5\n    1 0\n    1 1\n    1 2\n    1 3\n    1 4''') == '12.0'", "solution('''\n4 2\n0 0\n1 0\n1 1\n0 1\n''') == '4.0'\n\nassert solution('''\n4 3\n0 0\n1 0\n1 1\n0 1\n''') == '3.0'\n\n# # stress testing against the reference solution\n# def reference_solution(inp):\n#     # the reference solution function goes here\n#     # return a single number\n#     pass\n\n# import random\n# from time import perf_counter\n# from sys import stdin, stdout, stderr\n\n# random.seed(42)\n# for _ in range(100):\n#     input_len = random.randint(1, 10**5)\n#     stdin = [str(input_len) + ' ' + str(random.randint(1, input_len))]\n#     input_lines = []\n#     for _ in range(input_len):\n#         # generate random test case\n#         input_lines.append(str(random.randint(-10**6, 10**6)) + ' ' + str(random.randint(-10**6, 10**6)))\n#     stdin.extend(input_lines)\n#     stdin = '\\n'.join(stdin)\n\n#     start", "solution(\"\"\"4 1\n0 0\n1 0\n2 0\n1 1\"\"\") == \"3.000000\"\nassert solution(\"\"\"3 1\n0 0\n1 0\n2 0\"\"\") == \"2.000000\"\nassert solution(\"\"\"5 3\n0 0\n1 0\n2 0\n1 1\n1 2\"\"\") == \"4.000000\"\nassert solution(\"\"\"6 4\n-1 -1\n1 -1\n1 1\n-1 1\n2 2\n3 3\"\"\") == \"8.000000\"\nassert solution(\"\"\"10 1\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\"\"\") == \"20.000000\"\nassert solution(\"\"\"10 10\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\"\"\") == \"10.000000\"\nassert solution(\"\"\"10 10\n-10 0\n-9 0\n-8 0\n-7 0\n-6 0\n-5 0\n-4 0\n-3 0\n-2 0\n-1 0\"\"\") == \"20.000000\"\nassert solution(\"\"\"3 1\n-2 0\n-1 0\n0 0\"\"\") == \"4.000000\"\nassert solution(\"\"\"4 4\n0 0\n1 0", "solution('''3\n1\n1\n1 2\n1 1''') == '0.0'\nassert solution('''4\n1\n1\n1 2\n1 1\n2 3''') == '2.0'\nassert solution('''6\n2\n1 1\n2 3\n2 1\n4 5\n6 7\n8 9''') == '15.652475842498529'\n\n# get the input for the solution\nstdin = '''50\n25\n3 -3\n-1 3\n-1 -4\n6 7\n-6 -7\n6 -7\n-6 7\n6 0\n-6 0\n-6 7\n6 7\n2 8\n-2 8\n2 -8\n-2 -8\n0 6\n0 -6\n-7 6\n7 6\n-7 -6\n7 -6\n1 2\n-1 2\n1 -2\n-1 -2\n2 1\n-2 1\n2 -1\n-2 -1\n-2 1\n2 1\n-2 -1\n2 -1\n-7 -6\n7 -6\n-7 6\n7 6\n-7 -6\n7 -6\n-7 6\n7 6\n-7 -6\n7 -6\n-7 6\n7 6\n-7 -6\n7 -6\n-7", "solution('''5 2\n0 2\n3 4\n-5 -5\n-2 -1\n1 2''') == '7.0710678118654755'\nassert solution('''7 2\n0 2\n-5 4\n-5 -5\n2 -1\n1 2\n3 4\n0 0''') == '9.138938472415755'\nassert solution('''5 1\n0 2\n3 4\n-5 -5\n-2 -1\n1 2''') == '7.874007874011811'\nassert solution('''7 3\n0 2\n-5 4\n-5 -5\n2 -1\n1 2\n3 4\n0 0''') == '14.89966442575134'\n\nstdin = '''10 2\n-2 14\n-6 -3\n6 5\n14 -8\n-6 8\n2 10\n-12 -11\n10 -8\n-6 -12\n-7 13'''\n\nprint(solution(stdin))", "solution('''\n5 3\n0 0\n2 0\n-1 1\n1 1\n0 1\n''') == '''\n3.414213562373095\n'''\n\nassert solution('''\n10 3\n10 40\n-30 40\n-20 -10\n-10 -20\n10 -10\n-30 10\n10 -30\n-30 -10\n20 -30\n30 -10\n''') == '''\n144.49999999999997\n'''", "solution(\"\") == \"\", \"Not a valid answer\"\nassert solution(\"\") == \"\", \"Not a valid answer\"\n\n# get the input\nN, K = map(int, input().split())\n\n# get the points\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\n\n# get the start and end points\nstart_point = points[K-1]\nend_point = points[0]\n\n# remove the start and end points from the list\npoints.remove(start_point)\npoints.remove(end_point)\n\n# get the angle between start and end point\nstart_end_angle = math.atan2(end_point[1] - start_point[1], end_point[0] - start_point[0])\n\n# sort the points by their angle\npoints.sort(key=lambda point: math.atan2(point[1] - start_point[1], point[0] - start_point[0]))\n\n# add the end point\npoints.append(end_point)\n\n# get the distance between two points\ndef distance(point1, point2):\n    return math.sqrt((point1[0] - point2[0])**2 + (point1[1] -", "solution('''\n6 2\n0 0\n0 1\n0 2\n0 3\n1 1\n1 -1\n'''\n) == '3.0'\n\nassert solution('''\n6 3\n1 1\n2 1\n3 2\n4 1\n5 1\n6 1\n'''\n) == '5.0'\n\nprint('OK')", "solution('''\n4 1\n0 0\n0 1\n0 2\n1 1\n''') == '1.4142135623730951'", "solution(\"\"\"3 2\n0 0\n1 1\n1 0\"\"\") == \"\"\"1.4142135623730951\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"4 3\n0 0\n2 1\n2 0\n0 1\"\"\") == \"\"\"4.0\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"4 1\n0 0\n2 1\n2 0\n0 1\"\"\") == \"\"\"4.0\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"8 7\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\"\"\") == \"\"\"7.0\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"8 7\n-1 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\"\"\") == \"\"\"8.0\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"8 7\n-1 0\n-1 1\n-1 2\n-1 3\n-1 4\n-1 5\n-1 6\n-1 7\"\"\") == \"\"\"14.0\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"8 2\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\"\"\") == \"\"\"7.0\"\"\"\n\n# check the", "solution(stdin) == 'answer'", "solution('''3\n3\n2 3\n2 4\n2 5''') == '2.0'\nassert solution('''5\n4\n5 2\n0 5\n-1 2\n0 0\n4 0''') == '4.414213562373095'\nassert solution('''4\n2\n0 0\n1 1\n2 2\n3 3''') == '3.4641016151377544'\nassert solution('''4\n3\n0 0\n1 1\n2 2\n3 3''') == '3.4641016151377544'\nassert solution('''3\n1\n0 0\n1 1\n2 2''') == '2.8284271247461903'\nassert solution('''5\n2\n0 0\n1 1\n2 2\n3 3\n4 4''') == '6.0'\nassert solution('''5\n1\n1 1\n2 2\n3 3\n4 4\n5 5''') == '6.23606797749979'\nassert solution('''7\n3\n0 0\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7''') == '8.630146391228079'\nassert solution('''8\n2\n0 0\n1 1\n2 2\n3 3\n4", "solution('''\n3 1\n0 1\n1 0\n1 1\n''') == '2.0'\n\nassert solution('''\n3 1\n0 2\n2 0\n-2 0\n''') == '4.0'\n\nassert solution('''\n4 1\n0 1\n1 0\n1 1\n2 2\n''') == '4.0'\n\nassert solution('''\n5 1\n0 1\n1 0\n1 1\n2 2\n3 3\n''') == '6.0'\n\nassert solution('''\n6 1\n0 1\n1 0\n1 1\n2 2\n3 3\n3 4\n''') == '6.0'\n\nassert solution('''\n7 1\n0 1\n1 0\n1 1\n2 2\n3 3\n3 4\n4 5\n''') == '8.0'\n\nassert solution('''\n8 1\n0 1\n1 0\n1 1\n2 2\n3 3\n3 4\n4 5\n5 6\n''') == '10.0'\n\nassert solution('''\n1 1\n0 0\n''') == '0.0'\n\nassert solution('''\n2 1\n0 0\n1 1\n''') == '2.0'\n\nassert solution('''\n3 1\n0 0\n", "solution('''\n4 2\n1 -2\n2 3\n-2 -3\n-1 2\n''') == '6.82842712474619'\n\nprint('ok')", "solution(STDIN) == STDOUT\n \n# check the performance of solution\nimport timeit\nfrom random import randint\n\ndef create_test_input(n: int) -> str:\n    return '{}\\n'.format(n) + '\\n'.join([\n        '{} {}'.format(randint(-10**6, 10**6), randint(-10**6, 10**6)) for _ in range(n)\n    ])\n\nn = 5\nprint('%20s: %.10f seconds' % ('create_test_input', timeit.timeit(lambda: create_test_input(n), number=1)))\nprint('%20s: %.10f seconds' % ('solution', timeit.timeit(lambda: solution(create_test_input(n)), number=1)))\n\nn = 10\nprint('%20s: %.10f seconds' % ('create_test_input', timeit.timeit(lambda: create_test_input(n), number=1)))\nprint('%20s: %.10f seconds' % ('solution', timeit.timeit(lambda: solution(create_test_input(n)), number=1)))\n\nn = 50\nprint('%20s: %.10f seconds' % ('create_test_input", "solution(\"\"\"\n6 4\n0 0\n0 1\n1 0\n1 1\n2 0\n2 1\n\"\"\") == \"4.0\"\nassert solution(\"\"\"\n3 1\n0 0\n0 1\n1 0\n\"\"\") == \"2.0\"\nassert solution(\"\"\"\n4 2\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"2.0\"\n\n# show the execution time\nimport time\nstart = time.time()\nprint(solution(input()))\nprint(\"execution time:\", time.time() - start)", "solution('''3 2\n-1 1\n0 0\n1 1''') == '2.0'\n\n# check the correctness of solution\nassert solution('''3 1\n0 0\n0 1\n0 2''') == '3.0'\n\n# check the correctness of solution\nassert solution('''4 1\n-1 1\n0 1\n0 2\n0 3''') == '4.0'\n\n# check the correctness of solution\nassert solution('''4 2\n0 0\n0 1\n0 2\n0 3''') == '4.0'\n\n# check the correctness of solution\nassert solution('''4 3\n0 0\n0 1\n0 2\n0 3''') == '4.0'\n\n# check the correctness of solution\nassert solution('''4 4\n0 0\n0 1\n0 2\n0 3''') == '4.0'\n\n# check the correctness of solution\nassert solution('''6 1\n-3 -1\n-2 -2\n-1 -3\n0 -3\n1 -3\n2 -3''') == '12.0'\n\n# check the correctness of solution\nassert solution('''6 2\n-3 -1\n-2 -2\n-1 -3\n0 -3\n1 -3\n2 -3''') == '", "solution('''\n3 1\n0 0\n0 1\n1 0\n''') == '2.8284271247461903'\n\nassert solution('''\n10 2\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n''') == '36.0'\n\nassert solution('''\n6 3\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n''') == '12.0'\n\nassert solution('''\n5 2\n1 1\n2 1\n2 2\n2 3\n2 4\n''') == '4.0'", "solution(stdin) == stdout", "solution('''\n5 3\n2 3\n0 0\n0 1\n2 1\n0 2\n''') == '5.0'\n\nassert solution('''\n5 2\n2 3\n0 0\n0 1\n2 1\n0 2\n''') == '4.0'\n\nassert solution('''\n5 1\n2 3\n0 0\n0 1\n2 1\n0 2\n''') == '6.0'", "solution(\"\"\"\n3 1\n1 1\n2 2\n3 3\n\"\"\") == \"2.8284271247461903\"", "solution(\"\"\"\n5 2\n1 -1\n0 0\n-1 -1\n-1 1\n2 1\n\"\"\") == '5.0'\n\nassert solution(\"\"\"\n4 2\n1 -1\n0 0\n-1 -1\n-1 1\n\"\"\") == '3.0'", "solution('''\n4 1\n-1 -1\n0 0\n-1 1\n1 1\n''') == '2.8284271247461903'\nassert solution('''\n2 1\n1 2\n2 1\n''') == '0.0'\nassert solution('''\n3 1\n1 2\n3 4\n5 6\n''') == '4.242640687119285'\nassert solution('''\n5 3\n1 2\n3 4\n5 6\n-10 0\n10 0\n''') == '20.0'\nassert solution('''\n5 3\n1 2\n3 4\n5 6\n10 0\n10 0\n''') == '18.94427190999916'\nassert solution('''\n6 4\n1 2\n3 4\n5 6\n-10 0\n10 0\n0 0\n''') == '22.627416997969522'\nassert solution('''\n7 4\n1 2\n3 4\n5 6\n-10 0\n10 0\n0 0\n10 10\n''') == '32.627416997969526'\nassert solution('''\n7 4\n1 2\n3 4\n5 6\n-10 0\n10 0\n0 0\n-10 -10\n''') == '32.62741699", "solution('''\n6 3\n0 0\n1 1\n1 2\n2 0\n2 -2\n3 -3\n''') == '4.58258'", "solution(stdin=\"4 2\\n1 1\\n2 2\\n3 3\\n4 2\") == \"4.0\"\nassert solution(stdin=\"4 1\\n1 1\\n2 2\\n3 3\\n4 2\") == \"7.0\"\nassert solution(stdin=\"4 2\\n1 1\\n2 2\\n3 3\\n4 2\") == \"4.0\"\nassert solution(stdin=\"4 2\\n1 2\\n4 2\\n4 2\\n1 2\") == \"5.5\"\nassert solution(stdin=\"3 2\\n3 3\\n-3 -3\\n3 3\") == \"6.0\"\nassert solution(stdin=\"10 9\\n8 -7\\n-1 5\\n-7 8\\n1 -5\\n-7 -6\\n-6 7\\n6 -7\\n-5 1\\n5 -1\\n-6 6\") == \"38.0\"\nassert solution(stdin=\"10 5\\n8 -7\\n-1 5\\n-7 8\\n1 -5\\n-7 -6\\n-6 7\\n6 -7\\n-5 1\\n5 -1\\n-6 6\") == \"30.0\"\nassert solution(stdin=\"10 8\\", "solution(stdin='''\n5 3\n2 3\n3 -3\n-3 -3\n0 4\n1 1\n''') == '1.4142135623730951'\n\n# can't visit all points\nassert solution(stdin='''\n3 1\n1 1\n1 2\n2 2\n''') == '3.0'\n\n# visit all points\nassert solution(stdin='''\n3 1\n0 0\n1 0\n1 1\n''') == '2.0'\n\n# visit one point\nassert solution(stdin='''\n4 1\n1 0\n0 0\n0 1\n1 1\n''') == '1.0'\n\n# visit all points with starting point on the line\nassert solution(stdin='''\n4 2\n1 0\n0 0\n0 1\n1 1\n''') == '1.0'\n\n# visit all points with starting point on the line\nassert solution(stdin='''\n5 1\n0 0\n0 1\n0 2\n0 3\n0 4\n''') == '5.0'\n\n# use case - 2 points on the line\nassert solution(stdin='''\n4 2\n-2 2\n1 1\n1 -1\n2 -2\n''') == '4.0'\n\n# use", "solution('''3 2\n-1 0\n0 0\n1 0''') == '2.000000'\nassert solution('''3 1\n-1 0\n0 0\n1 0''') == '3.000000'\nassert solution('''3 3\n-1 0\n0 0\n1 0''') == '2.000000'\nassert solution('''4 3\n1 0\n2 0\n3 0\n0 0''') == '6.000000'\nassert solution('''3 1\n0 0\n0 0\n0 0''') == '0.000000'\nassert solution('''3 2\n0 0\n1 0\n1 0''') == '0.000000'\nassert solution('''4 1\n0 0\n0 1\n0 2\n0 3''') == '4.000000'\nassert solution('''3 2\n0 0\n0 0\n1 0''') == '1.000000'\nassert solution('''10 3\n-1 0\n-1 0\n0 0\n0 0\n1 0\n1 0\n2 0\n2 0\n3 0\n3 0''') == '6.000000'\nassert solution('''4 2\n0 0\n0 0\n1 0\n1 0''') == '0.000000'\nassert solution('''4 2\n1 0\n1 0\n2 0", "solution('''\n3 2\n1 1\n1 2\n3 2\n''') == '3.0'\nassert solution('''\n4 2\n1 1\n1 2\n1 3\n1 4\n''') == '0.0'\nassert solution('''\n2 1\n2 0\n0 0\n''') == '4.0'\nassert solution('''\n3 2\n1 1\n1 2\n3 1\n''') == '2.5'\nassert solution('''\n3 2\n1 1\n3 1\n1 2\n''') == '3.5'\nassert solution('''\n3 1\n1 1\n1 2\n3 2\n''') == '4.0'\nassert solution('''\n4 3\n1 1\n1 2\n1 3\n1 4\n''') == '0.0'\nassert solution('''\n4 2\n1 1\n1 2\n1 3\n1 4\n''') == '0.0'\nassert solution('''\n5 3\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '0.0'\nassert solution('''\n7 6\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n''') == '0.0'\nassert solution('''\n8", "solution('''\n4 3\n0 0\n0 1\n0 2\n1 1\n''') == '2.8284271247461903'\n\nassert solution('''\n4 2\n0 0\n0 1\n0 2\n1 1\n''') == '4.0'\n\nassert solution('''\n4 1\n0 0\n0 1\n0 2\n1 1\n''') == '2.0'\n\nassert solution('''\n4 4\n0 0\n0 1\n0 2\n1 1\n''') == '0.0'\n\n# test cases\n#stdin = ''\n# stdin = '''\n# '''\n\n# prepare io\n# initial set stdin/stdout by default\nf = open(__file__[:-2] + 'in', 'r')\ninput = f.readline\nstdout = sys.stdout\n\nif not stdin:\n    stdin = input\nif not stdout:\n    stdout = stdout\n\n# run solution\nsolution(stdin)\n\n# compare with output\n# assert ...", "solution('''\n4 2\n0 0\n0 1\n2 0\n2 1\n''') == '4.0'\nassert solution('''\n5 4\n5 1\n6 5\n5 7\n1 5\n5 5\n''') == '6.0'\nassert solution('''\n3 1\n0 0\n0 1\n1 1\n''') == '1.0'\nassert solution('''\n3 2\n0 0\n1 1\n0 1\n''') == '2.0'\nassert solution('''\n3 2\n0 0\n1 0\n0 1\n''') == '2.0'\nassert solution('''\n4 1\n0 0\n1 0\n0 1\n1 1\n''') == '2.0'\nassert solution('''\n4 2\n0 0\n1 0\n0 1\n1 1\n''') == '4.0'\nassert solution('''\n4 3\n0 0\n1 0\n0 1\n1 1\n''') == '2.0'\nassert solution('''\n4 4\n0 0\n1 0\n0 1\n1 1\n''') == '2.0'\nassert solution('''\n5 1\n0 0\n1 0\n0 1\n1 1\n2 1\n''') == '3.0'\nassert solution(''"], "finish_reason": ["length", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "stop", "length"], "sum_logprob": [-54.872580814910016, -14.978347022699998, -91.69232112645003, -109.22168752856007, -19.060852338420002, -60.0171157023, -52.425206116844, -96.99636550575006, -8.637808777060002, -75.67447721215004, -59.99127388042802, -107.38603919726492, -169.31329767384395, -33.62358749534, -22.249085162432, -7.969503711999997, -119.01739109057002, -32.982352013199986, -102.54345452196003, -16.030456882699998, -28.727608436899988, -152.237947197903, -99.60919978963004, -178.13986737329594, -213.25544338237532, -101.1696667669, -100.64774533628103, -51.6318426689, -16.445952822200002, -79.85583700315392, -11.218290566, -149.48929254045402, -65.00398414509998, -36.92532274149999, -84.68872123777811, -53.89553408140001, -71.72603949449001, -58.224610409899995, -5.358156545, -39.135597121509996, -14.6819823963, -38.473439964199976, -112.87862460493496, -35.70898306080001, -147.689121053873, -171.29172064363402, -104.86069612590596, -95.80408363892603, -125.22447369176, -94.70651594723306], "mean_logprob": [-0.18290860271636666, -0.99855646818, -0.3056410704215, -0.3640722917618667, -0.0635361744614, -0.5506157403880734, -0.3615531456334069, -0.3233212183525, -0.4798782653922222, -0.6756649751084821, -0.19997091293476, -0.35795346399088335, -0.7174292274315419, -0.7819438952404651, -0.15668369832698592, -0.6641253093333334, -0.39672463696856664, -0.82455880033, -0.4290521109705439, -0.641218275308, -0.7979891232472223, -0.50745982399301, -0.33203066596543335, -0.5937995579109867, -0.899811997393989, -0.9033005961330357, -0.33549248445427, -0.6220703936012049, -0.46988436634857145, -0.26618612334384667, -1.1218290566, -0.4982976418015133, -0.21667994715033334, -0.8205627275888889, -0.28229573745926, -0.4145810313953846, -0.23908679831496665, -0.38055300921503266, -0.5953507272222223, -0.3913559712151, -0.458811949884375, -0.5575860864376811, -0.37626208201645, -0.9397100805473684, -0.4922970701795767, -0.5709724021454466, -0.34953565375302, -0.3193469454630867, -0.5029095328986345, -0.3156883864907767]}
{"prompt": "'''\nAlice and Bob always had hard time choosing restaurant for the dinner. Previously they performed Eenie Meenie Miney Mo game, but eventually as their restaurant list grew, they had to create a new game. This new game starts as they write restaurant names on N cards and align the cards in one line. Before the game begins, they both choose starting card and starting direction they are going to. They take turns in order one after another. After each turn, they move one card in their current direction. If they reach the end or beginning of the line of cards they change direction. Once they meet in a card, the card is marked for removal and is removed the first moment they both leave the card.\n\n<image> Example of how card is removed\n\nThey repeat this process until there is only one restaurant card left. Since there are a lot of restaurant cards, they are bored to simulate this process over and over and need your help to determine the last card that remains. Can you help them? \n\nInput\n\nThe first line of the input is one integer T (1 \u2264 T \u2264 10^{4}) representing number of test cases. Each test case contains 3 lines: The first line contains an integer N representing initial number of cards. Next line contains two integer values A,B (0 \u2264 A, B < N, 2 \u2264 N \u2264 10^{18}) representing starting 0-based index of the card in the array. Last line contains two strings D_A, D_B \u2208 {\"left\", \"right\"} representing starting direction of their movement.\n\nOutput\n\nThe output contains T integer number \u2013 the 0-based index of the last card that remains for every test case in order.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solu", "solution('''\n1\n3\n0 1\nleft right\n''') == '2'\n\nassert solution('''\n1\n5\n0 2\nleft right\n''') == '1'\n\nassert solution('''\n2\n5\n0 1\nleft right\n10\n0 2\nleft right\n''') == '2\\n4'\n\nassert solution('''\n4\n4\n0 1\nleft right\n9\n0 1\nleft right\n10\n0 1\nleft right\n11\n0 1\nleft right\n''') == '1\\n3\\n3\\n3'\n\nprint('All tests are OK')", "solution('''\n1\n4\n0 1\nleft right\n''') == '1'\n\n# test case from problem statement\n# TODO add test cases in the following format: (input, output)\ncases = [\n    ('', ''),\n]\n\nfor case, expected in cases:\n    assert solution(case) == expected, '\\ninput:\\n%s\\nexpected:\\n%s\\noutput:\\n%s' % (case, expected, solution(case))", "solution('''\n1\n5\n1 1\nright right\n''') == '2'\n\nassert solution('''\n1\n6\n1 1\nright right\n''') == '2'\n\nassert solution('''\n1\n6\n1 1\nright left\n''') == '1'\n\nassert solution('''\n1\n6\n1 1\nleft right\n''') == '2'\n\nassert solution('''\n1\n6\n1 1\nleft left\n''') == '0'\n\nassert solution('''\n1\n6\n0 0\nleft left\n''') == '1'\n\nassert solution('''\n1\n6\n2 0\nleft left\n''') == '3'\n\nassert solution('''\n1\n6\n0 2\nleft left\n''') == '4'\n\nassert solution('''\n1\n6\n1 1\nright right\n''') == '2'\n\nassert solution('''\n1\n6\n1 1\nright left\n''') == '1'\n\nassert solution('''\n1\n6\n1 1\nleft right\n''') == '2'\n\nassert solution('''\n1\n6\n1 1\nleft left\n''') == '0'\n\nassert solution('''\n1\n6\n0 0\n", "solution(\"sample.txt\") == \"sample-output.txt\"", "solution('''\n6\n5\n1 3\nleft right\n5\n0 4\nleft right\n5\n2 3\nright left\n5\n0 4\nright left\n5\n2 3\nleft right\n5\n0 4\nleft right\n''') == '''\n3\n4\n1\n4\n3\n4\n'''", "solution(\"\"\"\n3\n7\n1 4\nleft right\n7\n0 1\nright left\n7\n2 5\nleft right\n\"\"\") == \"\"\"\n1\n2\n5\n\"\"\"\n\n# get all test cases\ntest_cases = []\nwith open('test_cases.txt', 'r') as f:\n    for i, line in enumerate(f):\n        if i % 2 == 0:\n            assert line[:5] == 'Test '\n            test_cases.append(line.strip())\n        else:\n            test_cases[-1] += line.strip()\n\n\n# performance test\nfor test_case in test_cases:\n    with open('test_case.txt', 'w') as f:\n        f.write(test_case)\n    os.system(r'python -m cProfile test.py > profile.out')\n    with open('profile.out', 'r') as f:\n        lines = f.readlines()\n        print(lines[-1])\n    os.system('rm profile.out')", "solution(\"\"\"\n2\n2\n0 1\nleft right\n3\n0 1\nleft right\n\"\"\") == \"\"\"\n0\n2\n\"\"\"\n\n# check correctness on large input\n# check correctness on extreme input\n# pass input to solution for lines\nsolution(stdin)", "solution(exampleInput) == exampleOutput", "solution(\"\") == \"\", \"Test 1 failed\"\nassert solution(\"\") == \"\", \"Test 2 failed\"\nassert solution(\"\") == \"\", \"Test 3 failed\"\n\nprint(\"All tests passed\")", "solution('''\n2\n4\n0 3\nleft right\n8\n2 3\nright left\n''') == '''\n0\n4\n'''", "solution(\"\"\"\n2\n3\n1 2\nleft right\n5\n0 1\nright left\n\"\"\") == \"1\\n4\"\n\nif __name__ == \"__main__\":\n    # run solution from terminal\n    import sys\n    print(solution(sys.stdin.read()))", "solution(\"3\\n2 1 0\\nleft left\\n3 1 0\\nleft left\\n5 0 0\\nleft left\") == \"1\\n1\\n0\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"3\\n2 1 0\\nleft left\\n3 1 0\\nleft left\\n5 0 0\\nleft left\") == \"1\\n1\\n0\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"1\\n6 2 2\\nleft right\") == \"1\"\nassert solution(\"1\\n", "solution('''\n1\n5\n0 2\nleft right\n''') == '1'", "solution('''\n2\n6\n0 1\nleft right\n6\n0 1\nright left\n''') == '''\n0\n5\n'''\n\n# get output for an arbitrary solution\ndef submit_solution() -> None:\n    output = solution(input())\n    print(output)\n\nsubmit_solution()", "solution(\"\"\"\n3\n3\n0 1\nleft right\n3\n0 1\nright left\n3\n1 1\nleft right\n\"\"\") == \"\"\"\n1\n1\n1\n\"\"\"", "solution(\"\"\"\\\n2\n4\n0 3\nleft right\n2\n0 1\nright left\"\"\") == \"\"\"\\\n1\n0\"\"\"", "(solution('''\n    2\n    4\n    0 0\n    left right\n    4\n    1 2\n    right left\n''') == '''\n    0\n    3\n''')", "solution('''\n1\n4\n0 1\nleft right\n''') == '1'\n\n# '''\n# 4\n# 0 1\n# left right\n# '''\n\n# '''\n# left right\n# | |\n# 0 1 2 3\n# \n# left right\n#   | |\n# 0 1 2 3\n# \n# left right\n#     | |\n# 0 1 2 3\n# \n# left right\n#       | |\n# 0 1 2 3\n# \n# left right\n#       | |\n# 0   2   3\n# \n# left right\n#         | |\n# 0       2   3\n# \n# left right\n#           | |\n# 0         2   3\n# \n# left right\n#           | |\n# 0         2 3\n# \n# left right\n#             | |\n# 0           2 3\n# \n# left right\n#               | |\n# 0             2 3\n# \n# left right\n#               | |\n# 0             2 3\n# \n# left right\n#                 | |\n# 0               2 3\n# \n# left right\n#                   | |\n# 0                 2 3\n# \n# left right\n#                     | |\n# 0                   2 3\n# ", "solution('''\n1\n5\n1 2\nright left\n''') == '1'", "solution('''\n3\n3\n1 1\nright left\n5\n2 3\nleft right\n20\n10 5\nright left\n''') == '''\n1\n2\n10\n'''", "solution(\"\"\"\n4\n4\n0 1\nleft right\n5\n0 1\nleft right\n5\n3 4\nright left\n5\n2 3\nleft right\n\"\"\") == \"\"\"\n0\n2\n3\n4\n\"\"\"", "solution(\"2\\n5\\n0 2\\nleft right\\n8\\n5 5\\nright left\") == \"1\\n5\"", "solution('''\n5\n5\n0 0\nleft right\n5\n0 1\nleft right\n5\n1 0\nleft right\n5\n1 1\nleft right\n5\n0 4\nleft right\n''') == '''\n1\n3\n3\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n0 4\nleft right\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n0 4\nright left\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n0 0\nright left\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n0 5\nright left\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n2 2\nright left\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 5\nright left\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5\n0 0\nright left\n", "solution(stdin='''\n2\n2\n0 1\nleft right\n10\n0 0\nleft left\n''') == '''\n1\n0\n'''\n# ============================================================================\n\n# ============================================================================\n'''\n\nThe wind is blowing in some direction and the weather experts know it. But they have different measurements.\n\nWhen someone says the wind is coming from 0 degrees or 360 degrees, it is coming from the North.\n\nIf the person says the wind is coming from between 1 and 89 degrees inclusive, the wind is blowing from the North East.\n\nIf the person says the wind is coming from between 90 and 179 degrees inclusive, the wind is blowing from the East.\n\nIf the person says the wind is coming from between 180 and 269 degrees inclusive, the wind is blowing from the South East.\n\nIf the person says the wind is coming from between 270 and 359 degrees inclusive, the wind is blowing from the South.\n\nFor example, if the wind is coming from the direction 100 degrees, we know that it is blowing from the North East.\n\nEach person will give you a range [L, R] and you need to find which way the wind is blowing for all directions between L and R inclusive.\n\nInput\n\nThe first line of the input is one integer T (1 \u2264 T \u2264 100) representing the number of test cases. T lines follow. Each line contains", "solution(r'''\n1\n6\n0 1 left right\n''') == r'''\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n6\n0 1 left right\n5\n0 1 right left\n''') == r'''\n0\n4\n'''", "solution('''\n3\n3\n1 2\nright left\n4\n0 3\nleft right\n10\n9 1\nleft right\n''') == '''\n2\n3\n5\n'''", "solution('''\n3\n3\n0 1\nleft right\n3\n1 0\nright left\n5\n0 1\nleft right\n''') == '''\n0\n1\n0\n'''\n\nassert solution('''\n2\n5\n2 3\nright left\n5\n0 1\nleft right\n''') == '''\n2\n0\n'''\n\nassert solution('''\n1\n5\n0 1\nleft right\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n2 3\nright left\n''') == '''\n2\n'''\n\nassert solution('''\n1\n5\n4 0\nright left\n''') == '''\n4\n'''\n\nassert solution('''\n1\n5\n3 1\nright left\n''') == '''\n3\n'''\n\nassert solution('''\n1\n5\n3 1\nleft right\n''') == '''\n1\n'''\n\nassert solution('''\n1\n5\n2 3\nleft right\n''') == '''\n3\n'''\n\nassert solution('''\n1\n5\n0 4\nleft right\n''') == '''\n4\n'''\n\nassert solution('''\n1\n5\n0 4\nright left\n''') ==", "solution('''\n3\n3\n0 0\nleft right\n3\n0 1\nleft right\n5\n2 3\nright left\n''') == '''\n1\n0\n3\n'''", "solution(\"\"\"\n\n\"\"\") == \"\", \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\", \"\"", "solution(testdata) == result", "solution(\"3\\n3\\n0 0\\nright right\\n2\\n0 1\\nright left\\n3\\n0 1\\nleft right\") == \"0\\n1\\n1\"\n\n# manual tests\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n\n# automation of tests\n# TODO: automate the tests\ndef manual_test(test_input: str) -> str:\n    return f\"input: {test_input}\\nexpected output: {solution(test_input)}\\nactual output: {solution(test_input)}\"\n\n# test 1\ntest_input = \"\"\"3\n3\n0 0\nright right\n2\n0 1\nright left\n3\n0 1\nleft right\"\"\"\nprint(manual_test(test_input))\n\n# test 2\ntest_input = \"\"\"1\n3\n0 0\nright right\"\"\"\nprint(manual_test(test_input))\n\n# test 3\ntest_input = \"\"\"3\n3\n0 0\nright right\n2\n0 1\nright left\n3\n0 1\nleft right\"\"\"\nprint(manual_test(test_input))\n\n# test 4\ntest_input = \"\"\"1\n2\n0 1\nright left\"\"\"\nprint(manual_", "'1\\n0\\n' == solution('3\\n3\\n0 1\\nleft right\\n3\\n1 2\\nleft right\\n5\\n2 0\\nright left\\n')", "solution('''\n2\n4\n0 3\nleft right\n4\n0 1\nleft right\n''') == '''\n1\n0\n'''", "solution(\"\"\"3\n3\n0 0\nleft right\n3\n0 1\nleft right\n3\n1 1\nleft right\"\"\") == \"1\\n2\\n0\", \"expected 1, 2, 0 for:\\n3\\n0 0\\nleft right\\n3\\n0 1\\nleft right\\n3\\n1 1\\nleft right\"\nassert solution(\"\"\"4\n4\n0 0\nleft right\n4\n0 1\nleft right\n4\n1 1\nleft right\n4\n1 0\nleft right\"\"\") == \"2\\n2\\n1\\n1\", \"expected 2, 2, 1, 1 for:\\n4\\n0 0\\nleft right\\n4\\n0 1\\nleft right\\n4\\n1 1\\nleft right\\n4\\n1 0\\nleft right\"\nassert solution(\"\"\"1\n1\n0 0\nleft right\"\"\") == \"0\", \"expected 0 for:\\n1\\n0 0\\nleft right\"\nassert solution(\"\"\"1\n1\n0 0\nright left\"\"\") == \"0\", \"expected 0 for:\\n1\\n0 0\\nright left\"\nassert solution(\"\"\"1\n1\n0 0\nleft left\"\"\") == \"0\", \"expected 0 for:\\n1\\n0 0\\nleft left\"\nassert", "solution(\"\"\"\n2\n3\n0 1\nleft right\n3\n0 1\nright left\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n0 1\nleft right\n2\n0 1\nright left\n\"\"\") == \"\"\"\n0\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4\n0 1\nleft right\n5\n0 1\nright left\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4\n1 2\nleft right\n5\n1 2\nright left\n\"\"\") == \"\"\"\n2\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4\n2 3\nleft right\n5\n2 3\nright left\n\"\"\") == \"\"\"\n3\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4\n3 2\nleft right\n5\n3 2\nright left\n\"\"\") == \"\"\"\n2\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4\n3 2\nright left\n5\n3 2\nleft right\n\"\"\") == \"\"\"\n2\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n", "solution('''\n3\n3\n0 1\nleft right\n5\n0 2\nleft right\n5\n1 2\nright left\n''') == '''\n1\n2\n0\n'''", "solution(sample_in) == sample_out\n\n# check the correctness of solution\nassert solution('''1\n5\n0 1\nleft right''') == '''2'''\n\nassert solution('''1\n5\n0 1\nright left''') == '''2'''\n\nassert solution('''2\n5\n0 1\nleft right\n5\n2 3\nright left''') == '''2\n2'''\n\nassert solution('''1\n6\n1 2\nright left''') == '''4'''\n\nassert solution('''1\n6\n1 2\nleft right''') == '''2'''\n\nassert solution('''1\n6\n1 4\nleft right''') == '''2'''\n\nassert solution('''1\n6\n1 4\nright left''') == '''2'''\n\nassert solution('''3\n6\n1 4\nright left\n6\n1 4\nleft right\n6\n0 2\nleft right''') == '''2\n2\n2'''\n\n# submit solution\nimport requests\nfrom json import dumps\nfrom time import sleep\n\ndef submit_solution(submission: str, token: str) -> requests.Response:\n    url = \"https://enigmatic-ravine-51302.herokuapp.com", "solution(\"\"\"\n4\n4\n0 1\nleft right\n6\n0 1\nleft right\n6\n0 1\nright left\n6\n1 3\nright left\n\"\"\") == \"\"\"\n2\n0\n5\n2\n\"\"\"\n\n'''\nTime: <time>\nMemory: <memory>\n'''", "solution(r'''2\n3\n1 1\nleft right\n10\n3 7\nright left''') == '1\\n7', 'Wrong solution'\nassert solution(r'''2\n10\n0 1\nleft right\n10\n0 1\nright left''') == '1\\n0', 'Wrong solution'\nassert solution(r'''5\n5\n0 1\nleft right\n5\n2 3\nleft right\n5\n2 3\nright left\n5\n0 1\nright left\n5\n3 4\nleft right''') == '1\\n3\\n3\\n1\\n3', 'Wrong solution'", "solution(\"\"\"\n2\n7\n0 6\nleft right\n7\n0 6\nright left\n\"\"\") == \"\"\"\n0\n6\n\"\"\"\n\n'''\nAlice and Bob are playing a game called \"Flipping cards\".\n\nInitially, there are N cards placed in a row face up. Then, the players take turns removing cards (one card at a time) from the left or right end of the row. The game is over when all cards are removed.\n\nSince Alice and Bob both want to win, they will play optimally. Can you determine who will win the game?\n\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe first line of each test case contains a single integer N denoting the number of cards.\n\nThe second line contains N integers X1, X2, ..., XN denoting the cards.\n\nOutput\n\nFor each test case, output a single line containing \"Alice\" if Alice will win the game or \"Bob\" if Bob will win the game (without quotes).\n\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 10^5\n0 \u2264 Xi \u2264 10^5\nExample\n\nInput:\n3\n3\n0 1 0\n5\n1 1 1 1 1\n5\n1 2 1 1 1\n\nOutput", "solution(test_data) == expected_result\nprint(\"Success\" if solution(test_data) == expected_result else \"Failure\")", "solution(get_input_example()) == get_output_example()\n# performance check\n\n# 1 test case\nassert solution('''\n1\n2 0 1\nleft right\n''') == '1'\n\n# 10 test cases\nassert solution('''\n10\n2 1 0\nright left\n''') == '1'\n\n# 100 test cases\nassert solution('''\n100\n2 0 1\nleft right\n''') == '1'\n\n# 1000 test cases\nassert solution('''\n1000\n2 0 1\nleft right\n''') == '1'\n\n# 10000 test cases\nassert solution('''\n10000\n2 0 1\nleft right\n''') == '1'", "solution('''\n2\n4\n1 2\nright left\n10\n3 9\nleft right\n''') == '''\n1\n4\n'''", "solution('''1\n3\n0 1\nleft right''') == '0'\nassert solution('''1\n5\n0 2\nleft right''') == '1'\nassert solution('''1\n8\n2 3\nright left''') == '5'\nassert solution('''1\n9\n2 3\nright left''') == '4'\nassert solution('''1\n4\n0 0\nleft left''') == '1'\nassert solution('''1\n2\n0 0\nleft left''') == '0'\nassert solution('''1\n9\n0 1\nleft right''') == '8'\nassert solution('''1\n3\n0 0\nleft left''') == '0'\nassert solution('''1\n4\n1 2\nright left''') == '0'\nassert solution('''1\n9\n0 0\nleft left''') == '5'\nassert solution('''1\n2\n0 1\nleft right''') == '0'\nassert solution('''1\n3\n0 2\nleft right''') == '1'\nassert solution('''1\n5\n0 1\nleft right''') == '4'\nassert solution('''1\n2\n0 0\nleft left''') == '0'\nassert solution('''1\n", "solution(stdin) == stdout\n \n'''\nThe problem is that the most naive solution would be O(m * n) in total time.\nHowever, there is a O(n + m) solution which can be leveraged.\n\nLet's define the movement of Alice and Bob as a subset of integers i of length n.\nIf each element is consecutive and goes in one direction it's a subsequence.\n\nFor each test case we need to find a last number in the sequence.\nWe can do it by iterating over both sequences and discarding each number when it is greater than the\nlast numbers of both sequences.\n\nThe way how to check if a number is greater than both of the numbers is to check if:\n- first is greater than both of the numbers\n- second is less than both of the numbers\n- the first is less than the number and second is greater than it\n'''\n\nimport math\n\ndef solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    num_cases = int(lines[0])\n    pos = 1\n    for _ in range(num_cases):\n        n = int(lines[pos])\n        pos += 1\n        a, b = [int(i) for i in lines[pos].split()]\n        pos += 1\n        d_a, d", "solution('''\n3\n4\n0 1\nleft right\n4\n0 1\nright left\n1\n0 0\nleft left\n''') == '''\n2\n0\n0\n'''", "solution(stdin) == stdout\n# check the time complexity\nfrom timeit import timeit\nassert timeit(lambda: solution(stdin), number=1) < 0.2", "solution('''3\n3\n0 0\nleft right\n5\n0 2\nleft right\n5\n2 0\nright left\n''') == '0\\n1\\n0\\n'\n\n# check if solution is correct on test data\n#subprocess.run(['python', '-m', 'pytest', '-v', '-s', 'sol_24.py'])", "solution(\"\") == \"\", \"1st example\"\nassert solution(\"\") == \"\", \"2nd example\"\nassert solution(\"\") == \"\", \"3rd example\"\nassert solution(\"\") == \"\", \"4th example\"\nassert solution(\"\") == \"\", \"5th example\"\nassert solution(\"\") == \"\", \"6th example\"\nassert solution(\"\") == \"\", \"7th example\"\nassert solution(\"\") == \"\", \"8th example\"\nassert solution(\"\") == \"\", \"9th example\"\nassert solution(\"\") == \"\", \"10th example\"\nassert solution(\"\") == \"\", \"11th example\"\nassert solution(\"\") == \"\", \"12th example\"\nassert solution(\"\") == \"\", \"13th example\"\nassert solution(\"\") == \"\", \"14th example\"\nassert solution(\"\") == \"\", \"15th example\"\nassert solution(\"\") == \"\", \"16th example\"\nassert solution(\"\") == \"\", \"17th example\"\nassert solution(\"\") == \"\", \"18th example\"\nassert solution(\"\") == \"\", \"19th example\"\nassert solution(\"\") == \"\", \"20th example\""], "finish_reason": ["stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-6.6159973, -73.322719689004, -78.18626047498003, -63.13840263350297, -14.228197270199997, -39.35758069946001, -141.52934603323803, -70.03114223450002, -8.723059779, -17.1801914791, -20.172216104599997, -40.03610020860999, -54.713295874454914, -11.812128834000003, -54.19512995539, -19.6311330957, -20.563488811200003, -25.604382608599998, -79.89935525788493, -12.428479916, -28.473313540299998, -31.059973836399998, -23.806481207090002, -86.72237794418605, -251.62025009648, -30.25004536326, -27.37893995634, -71.93871755913901, -20.1934717985, -17.7202520684, -12.589589427, -120.68789849307159, -25.031222874520004, -16.5000252637, -69.55899859533001, -56.00424929854399, -21.722056067639993, -142.40665333032385, -56.859892826499994, -75.35541164226498, -168.7320344222792, -25.001922491639995, -69.25304090544404, -20.745578395800003, -98.43943014289738, -365.9855218421501, -18.9804043417, -28.204932664799998, -74.71744691656001, -20.20580542947998], "mean_logprob": [-3.30799865, -0.4987940114898231, -0.7107841861361818, -0.21046134211167666, -0.94854648468, -0.5178629039402631, -0.5848320084018099, -1.1116054322936508, -0.9692288643333333, -0.37348242345869564, -0.5603393362388889, -0.5719442886944286, -0.18237765291485, -0.536914947, -0.7130938152025, -0.45653797896976744, -0.6231360245818182, -0.5566170132304348, -0.26633118419295, -0.5649309052727273, -0.6189850769630435, -0.5860372421962264, -0.7001906237379412, -0.2890745931472867, -0.8387341669882666, -0.4201395189341667, -0.5951943468769565, -0.23979572519713, -0.43898851735869565, -0.5369773354060606, -1.573698678375, -0.40229299497690535, -0.5214838098858333, -0.45833403510277776, -0.23186332865110001, -0.18668083099514668, -0.47221861016608696, -0.47468884443441334, -0.789720733701389, -0.5161329564538698, -0.56244011474093, -0.8065136287625807, -0.432831505659025, -0.57626606655, -0.328131433809658, -1.2199517394738333, -0.4126174856891304, -0.6715460158285714, -0.8301938546284444, -0.07801469277791506]}
{"prompt": "'''\nYou are given two integer arrays of length N, A1 and A2. You are also given Q queries of 4 types: \n\n1 k l r x: set Ak_i:=min(Ak_i, x) for each l \u2264 i \u2264 r.\n\n2 k l r x: set Ak_i:=max(Ak_i, x) for each l \u2264 i \u2264 r.\n\n3 k l r x: set Ak_i:=Ak_i+x for each l \u2264 i \u2264 r.\n\n4 l r: find the (\u2211_{i=l}^r F(A1_i+A2_i)) \\% (10^9+7) where F(k) is the k-th Fibonacci number (F(0)=0, F(1)=1, F(k)=F(k-1)+F(k-2)), and x \\% y denotes the remainder of the division of x by y.\n\nYou should process these queries and answer each query of the fourth type.\n\nInput\n\nThe first line contains two integers N and Q. (1 \u2264 N, Q \u2264 5 \u00d7 10^4) \n\nThe second line contains N integers, array A1_1, A1_2, ... A1_N. (0 \u2264 A1_i \u2264 10^6)\n\nThe third line contains N integers, array A2_1, A2_2, ... A2_N. (0 \u2264 A2_i \u2264 10^6)\n\nThe next Q lines describe the queries. Each line contains 5 or 3 integers, where the first integer denotes the type of the query. (k \u2208 \\{1, 2\\}, 1 \u2264 l \u2264 r \u2264 N)\n\nFor queries of type 1 and 2, 0 \u2264 x \u2264 10^9 holds.\n\nFor queries of type 3, \u221210^6 \u2264 x \u2264 10^6 holds.\n\nIt is guaranteed that after every query each number in arrays A1 and A2 will be nonnegative. \n\nOutput\n\nPrint the answer to each query of the fourth type, in separate lines. \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3 3\n1 2 3\n4 5 6\n1 1 3 7 5\n3 2 3 1\n4 1 3\n''') == '''\n10\n29\n'''\n\nprint(solution('''\n3 3\n1 2 3\n4 5 6\n1 1 3 7 5\n3 2 3 1\n4 1 3\n'''))", "solution(\"\"\"4 5\n1 2 3 4\n5 6 7 8\n2 1 4 8 5\n3 1 4 8 1\n1 2 3 4 5\n3 1 4 8 -1\n4 1 4\n\"\"\") == \"\"\"77\n90\n101\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"5 5\n1 2 3 4 5\n5 6 7 8 9\n2 1 5 5 100\n2 2 4 8 100\n1 3 5 5 100\n3 5 5 8 1\n4 1 5\n\"\"\") == \"\"\"1918\n2119\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"5 5\n1 2 3 4 5\n5 6 7 8 9\n2 1 5 5 100\n2 2 4 8 100\n1 3 5 5 100\n3 5 5 8 1\n4 2 5\n\"\"\") == \"\"\"2119\n\"\"\", \"Example 3\"\n\nassert solution(\"\"\"5 5\n1 2 3 4 5\n5 6 7 8 9\n2 1 5 5 100\n2 2 4 8 100\n1 3 5 5 100\n3 5 5 8 1\n4 3 5\n\"\"\") == \"\"\"2120\n\"\"\", \"Example 4\"\n\nassert solution(\"\"\"5 5\n1 2 3 4 5\n5 6 7 8 9\n2 1 5 5 100\n2 2 4 8 100\n1 3 5 5 100\n3 5 5 8 1\n4 4 5\n\"\"", "solution(\"\"\"\n3 5\n1 2 3\n2 3 4\n1 1 3 0\n2 1 3 0\n3 1 3 1\n4 1 3\n4 1 3\n\"\"\") == \"\"\"\n0\n0\n8\n\"\"\"\nassert solution(\"\"\"\n10 8\n4 13 5 12 11 20 9 12 5 6\n4 9 10 7 13 8 45 2 8 11\n1 1 10 3\n2 3 6 2\n3 3 6 3\n4 2 6\n1 2 10 0\n2 1 10 0\n3 1 10 1\n4 2 10\n\"\"\") == \"\"\"\n14\n0\n52\n\"\"\".strip()", "solution(r'''\n1\n1\n1\n1 1 1 1 1\n'''.strip()) == r'''\n1\n'''.strip()\n\nassert solution(r'''\n3\n1 2 3\n4 5 6\n3 1 1 7\n4 1 3\n1 1 3 9\n4 1 3\n'''.strip()) == r'''\n20\n22\n20\n'''.strip()\n\nassert solution(r'''\n5\n1 2 1 0 4\n0 1 0 3 3\n4 1 5\n1 2 2 1\n4 1 5\n'''.strip()) == r'''\n7\n8\n'''.strip()\n\nassert solution(r'''\n3\n1 2 3\n4 5 6\n3 1 1 7\n4 1 3\n1 1 3 9\n4 1 3\n'''.strip()) == r'''\n20\n22\n20\n'''.strip()\n\nassert solution(r'''\n2\n1 2\n1 2\n4 1 2\n'''.strip()) == r'''\n4\n'''.strip()\n\nassert solution(r'''\n5\n1 2 3 4 5\n6 7 8 9 10\n1 1 1 1 3\n2 1 5 5\n1 2 3 4 7\n3 3 3 10\n4 1 5\n'''.strip()) == r'''\n11\n19\n'''.strip()", "solution(TEST1) == OUT1, '\\nfailed test#1\\ninput:\\n{}\\noutput:\\n{}\\nexpected:\\n{}'.format(TEST1, solution(TEST1), OUT1)\nassert solution(TEST2) == OUT2, '\\nfailed test#2\\ninput:\\n{}\\noutput:\\n{}\\nexpected:\\n{}'.format(TEST2, solution(TEST2), OUT2)\nassert solution(TEST3) == OUT3, '\\nfailed test#3\\ninput:\\n{}\\noutput:\\n{}\\nexpected:\\n{}'.format(TEST3, solution(TEST3), OUT3)\n\n# run for submission\nif __name__ == '__main__':\n    n, q = map(int, input().split())\n    A1 = list(map(int, input().split()))\n    A2 = list(map(int, input().split()))\n    for i in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            k, l, r, x = query\n            A1[l-1:r] = [min(x, a) for a in A1[l-1:r]]\n        elif", "solution('''\n4 4\n0 0 0 0\n0 0 0 0\n1 1 1 1 1\n1 2 2 2 1\n1 3 3 3 1\n4 1 4\n''') == '''\n5\n5\n5\n5\n'''\nassert solution('''\n4 5\n0 0 0 0\n0 0 0 0\n1 1 1 1 1\n1 2 2 2 1\n1 3 3 3 1\n4 1 4\n4 1 4\n''') == '''\n5\n5\n5\n5\n5\n'''\nassert solution('''\n4 5\n0 0 0 0\n0 0 0 0\n1 1 1 1 1\n1 2 2 2 1\n1 3 3 3 1\n4 1 4\n3 1 2 1\n4 1 4\n''') == '''\n5\n5\n5\n8\n5\n'''\nassert solution('''\n3 2\n1 1 1\n1 1 1\n1 1 2 1\n4 1 3\n''') == '''\n2\n'''\nassert solution('''\n5 6\n1 2 3 4 5\n1 2 3 4 5\n1 1 5 5 1\n1 2 5 5 1\n1 3 5 5 1\n1 4 5 5 1\n1 5 5 5 1\n3 1 5 1\n4 1 5\n''') == '''\n5\n5\n5\n5", "solution(stdin) == stdout", "solution(\"\"\"\n4 3\n2 3 4 2\n1 3 2 1\n1 2 2 1 1 2\n2 1 1 1 1\n4 1 4\n\"\"\") == \"\"\"\n3\n3\n\"\"\"\n\nassert solution(\"\"\"\n4 2\n1 2 2 1\n1 2 2 1\n3 1 4 1 2\n4 1 4\n\"\"\") == \"\"\"\n13\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n2 3 4 2\n1 3 2 1\n3 1 4 1 2\n4 1 4\n1 2 2 1 1 2\n3 1 4 1 2\n4 1 4\n\"\"\") == \"\"\"\n7\n16\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n2 3 4 2\n1 3 2 1\n1 2 2 1 1 2\n2 1 1 1 1\n3 1 4 1 2\n4 1 4\n\"\"\") == \"\"\"\n6\n16\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n2 3 4 2\n1 3 2 1\n3 1 4 1 2\n4 1 4\n1 2 2 1 1 2\n2 1 1 1 1\n4 1 4\n\"\"\") == \"\"\"\n7\n7\n\"\"\"\n\nassert solution(\"\"\"\n4 3\n2 3 4 2\n1 3 2 1\n3 1 4 1 2\n4 1 4\n1 2 2 1 1 2\n3 1 4 1 2\n\"\"\") == \"\"\"\n7\n\"\"\"", "solution('''\n3 5\n3 1 2\n1 2 3\n4 1 3\n1 1 3 2\n4 1 3\n3 2 3 1\n4 1 3\n''') == '''\n6\n6\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n3 5\n3 1 2\n1 2 3\n4 1 3\n1 1 3 2\n4 1 3\n3 2 3 1\n4 1 3\n''') == '''\n6\n6\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n5 7\n1 2 3 4 5\n5 4 3 2 1\n4 1 5\n2 1 5 1\n4 1 5\n2 3 5 5\n4 1 5\n1 2 5 4\n4 1 5\n1 4 5 2\n4 1 5\n3 1 5 2\n4 1 5\n3 3 5 3\n4 1 5\n''') == '''\n5\n21\n9\n21\n33\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1\n1\n1\n4 1 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1 5\n1\n1\n4 1 1\n1 1 1 1\n4 1 1\n2 1 1 1\n4 1 1\n", "solution(r'''\n10 20\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 1 10 10 2\n1 2 10 10 1\n1 3 10 10 2\n1 4 10 10 3\n1 5 10 10 4\n1 6 10 10 5\n1 7 10 10 6\n1 8 10 10 7\n1 9 10 10 8\n1 10 10 10 9\n2 1 10 10 2\n2 2 10 10 1\n2 3 10 10 2\n2 4 10 10 3\n2 5 10 10 4\n2 6 10 10 5\n2 7 10 10 6\n2 8 10 10 7\n2 9 10 10 8\n2 10 10 10 9\n4 1 10\n''') == r'''\n214\n186\n214\n336\n626\n1154\n2382\n5206\n11772\n27160\n214\n186\n214\n336\n626\n1154\n2382\n5206\n11772\n27160\n26881\n'''", "solution(\"\"\"5 5\n1 2 3 4 5\n1 2 3 4 5\n4 1 5\n3 1 3 2 1\n3 2 4 -2 1\n3 1 5 4 1\n4 1 5\"\"\") == \"\"\"30\n8\n28\"\"\"\n\nassert solution(\"\"\"1 5\n1\n1\n4 1 1\n2 1 1 3\n4 1 1\n2 1 1 3\n4 1 1\"\"\") == \"\"\"1\n1\n1\"\"\"\n\nassert solution(\"\"\"4 5\n4 3 2 1\n4 3 2 1\n4 1 4\n4 1 4\n4 1 4\n4 1 4\n4 1 4\"\"\") == \"\"\"20\n20\n20\n20\n20\"\"\"\n\nassert solution(\"\"\"1 100000\n1\n4 1 1\"\"\") == \"\"\"1\"\"\"\n\nprint(\"passed all\")", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n# input\n_, INPUT = open(\"input.txt\").read().split(\"\\n\\n\")\n\n# output\nwith open(\"output.txt\", \"w\") as f:\n    f.write(solution(INPUT))", "solution(sample1) == '''\n1 \n'''\n\nassert solution(sample2) == '''\n15\n'''\n\nassert solution(sample3) == '''\n23\n'''\n\n# check if solution handles large input properly\nassert solution(large_sample) == '''\n'''", "solution('''\n3 3\n1 2 3\n1 2 3\n3 1 1 1\n4 1 3\n4 1 2\n''') == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3 5\n1 2 3\n1 2 3\n1 1 3 7\n2 1 3 2\n3 1 3 5\n4 1 3\n4 1 2\n''') == '''\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 2\n1 3\n4 1 2\n4 1 1\n''') == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2 10\n1 2\n1 3\n1 1 2 1\n3 1 2 2\n4 1 2\n4 1 1\n1 1 2 2\n3 1 2 1\n4 1 2\n4 1 1\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 0\n1 0\n4 1 2\n4 1 1\n''') == '''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2\n1 0\n1 0\n4 1 2\n''') == '''\n0\n'''", "solution(stdin) == '''\n1\n1\n1\n'''", "solution('''\n3 4\n1 2 3\n3 2 1\n1 1 1 1\n1 2 2 2\n3 1 1 -1\n4 1 2\n''') == '''\n2\n2\n'''\n\nassert solution('''\n10 100\n1 2 3 4 5 6 7 8 9 10\n11 12 13 14 15 16 17 18 19 20\n3 1 10 2\n3 1 10 -1\n3 1 10 -1\n3 1 10 -1\n3 1 10 1\n3 1 10 2\n3 1 10 3\n3 1 10 5\n3 1 10 8\n3 1 10 13\n3 1 10 21\n3 1 10 34\n3 1 10 55\n3 1 10 89\n3 1 10 144\n3 1 10 233\n3 1 10 377\n3 1 10 610\n3 1 10 987\n3 1 10 1597\n3 1 10 2584\n3 1 10 4181\n3 1 10 6765\n3 1 10 10946\n3 1 10 17711\n3 1 10 28657\n3 1 10 46368\n3 1 10 75025\n3 1 10 121393\n3 1 10 196418\n3 1 10 317811\n3 1 10 514229\n3 1 10 832040\n3 1 10 1346269\n3 1 10 2178309\n3 1 10 3524578\n3 1 10 5702887\n3 1 10 9", "solution('''\n2 3\n2 3\n2 3\n1 1 1 2 5\n1 2 1 2 5\n4 1 2\n''') == '''\n8\n8\n'''\n\nassert solution('''\n3 5\n1 2 3\n1 2 3\n2 1 3 3 3\n3 1 3 3 2\n3 1 3 3 3\n3 1 3 3 4\n4 1 3\n''') == '''\n5\n10\n14\n'''\n\nassert solution('''\n4 4\n0 1 2 3\n0 1 2 3\n1 1 1 2 1\n1 2 1 2 2\n1 3 1 2 3\n4 1 4\n''') == '''\n2\n'''\n\n# submit solution\nfrom tests import post_test\nfrom time import sleep\nsleep(5)\nif post_test():\n    print('correct')\nelse:\n    print('wrong')", "solution('''1 2\n1 2\n3 4\n4 1 2\n4 1 1''') == '''0\n1'''\n\nassert solution('''2 3\n1 2\n2 3\n4 1 2\n4 1 1\n4 2 2''') == '''0\n1\n5'''\n\nassert solution('''3 2\n3 5 2\n3 4 2\n1 1 2 4 8\n4 1 3''') == '''22'''\n\nassert solution('''3 2\n1 4 2\n3 1 2\n2 2 1 2 4\n4 1 3''') == '''60'''\n\nassert solution('''2 3\n5 4\n2 3\n4 1 2\n4 1 1\n4 2 2''') == '''5\n5\n13'''\n\nassert solution('''1 1\n4\n4 1 1''') == '''4'''\n\nassert solution('''3 5\n2 3 1\n1 2 3\n2 2 2 1 1\n3 3 1 2\n3 1 2 1\n3 2 1 1\n4 2 3''') == '''29'''\n\nassert solution('''1 10\n10\n4 1 1\n3 1 1 9\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n", "solution(in_file) == out_file\n\n# check the correctness of solution with stress testing\n\n# i/o performance testing\n\n# komprehension\n\ndef solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, q = [int(x) for x in stdin[0].split()]\n    a1 = [int(x) for x in stdin[1].split()]\n    a2 = [int(x) for x in stdin[2].split()]\n    queries = [(t, k, l, r, x) for t, k, l, r, x in [x.split() for x in stdin[3:]]]\n    fib = (1, 2)\n    for i in range(2, n):\n        fib += (fib[-1] + fib[-2]) % (10**9 + 7),\n    for t, k, l, r, x in queries:\n        l, r = l - 1, r - 1\n        if t == '1':\n            a1[l:r + 1] = [min(x, a) for a in a1[l:r + 1]]\n        elif t == '2':\n            a2[l:r + 1] = [max", "solution('''\n5 5\n2 3 4 5 6\n3 4 5 6 7\n3 1 5 0 1\n1 1 5 0 1\n3 2 4 0 1\n4 1 5\n''') == '''\n28\n8\n'''\nassert solution('''\n5 5\n2 3 4 5 6\n3 4 5 6 7\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n''') == '''\n28\n28\n28\n28\n'''\n\n# get the input and run the solution\nN, Q = map(int, stdin.readline().strip().split())\nA1 = list(map(int, stdin.readline().strip().split()))\nA2 = list(map(int, stdin.readline().strip().split()))\nqueries = []\nfor _ in range(Q):\n    q = list(map(int, stdin.readline().strip().split()))\n    if q[0] < 4:\n        q = q[1:]\n    queries.append(q)\n\nfor q in queries:\n    if q[0] == 1:\n        pass\n    elif q[0] == 2:\n        pass\n    elif q[0] == 3:\n        pass\n    elif q[0] == 4:\n       ", "solution(\"\"\"\n3 5\n2 3 4\n2 3 4\n1 1 3 1 5\n2 1 3 1 1\n3 1 3 1 1\n4 1 3\n4 1 3\n\"\"\") == \"\"\"\n34\n88\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2 3\n2 3\n2 3\n1 1 2 1 1\n2 1 2 1 1\n4 1 2\n\"\"\") == \"\"\"\n34\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\n2 3 4\n2 3 4\n1 1 3 1 1\n2 1 3 1 1\n4 1 3\n\"\"\") == \"\"\"\n34\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 5\n1 2 3 4\n1 2 3 4\n2 1 2 1 1\n2 2 2 1 1\n2 3 4 1 1\n4 1 2\n4 2 2\n4 3 4\n\"\"\") == \"\"\"\n34\n46\n25\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 7\n1 2 3 4 5\n1 2 3 4 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1", "solution('''4 5\n1 2 3 4\n5 6 7 8\n1 2 3 4 5\n2 1 4 3 6\n3 1 4 2 7\n4 1 4\n4 2 4''') == '''68\n52\n36\n16\n'''\n\nassert solution('''2 4\n10 10\n10 10\n1 1 2 1 1\n2 1 2 1 1\n4 1 2\n4 2 2''') == '''55\n55\n'''\n\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n3 1 5 3 3\n3 2 5 3 3\n3 3 5 3 3\n3 4 5 3 3\n3 5 5 3 3\n4 1 5\n4 2 5\n4 3 5\n4 4 5\n4 5 5''') == '''272\n272\n183\n183\n94\n94\n'''\n\nassert solution('''5 10\n2 2 2 2 2\n2 2 2 2 2\n1 1 2 1 1\n1 1 2 2 2\n1 1 2 3 3\n1 1 2 4 4\n1 1 2 5 5\n2 1 2 1 1\n2 1 2 2 2\n2 1 2 3 3\n2 1 2 4 4\n2 1 2 5 5\n3 1 5 3 3\n3 2 5 3 3\n3 3 5 3 3\n3 4 5 3 3\n3", "solution(get_input_file('input1.txt')) == get_output_file('output1.txt')\nassert solution(get_input_file('input2.txt')) == get_output_file('output2.txt')\nassert solution(get_input_file('input3.txt')) == get_output_file('output3.txt')\nassert solution(get_input_file('input4.txt')) == get_output_file('output4.txt')\nassert solution(get_input_file('input5.txt')) == get_output_file('output5.txt')\nassert solution(get_input_file('input6.txt')) == get_output_file('output6.txt')\nassert solution(get_input_file('input7.txt')) == get_output_file('output7.txt')\nassert solution(get_input_file('input8.txt')) == get_output_file('output8.txt')\nassert solution(get_input_file('input9.txt')) == get_output_file('output9.txt')\nassert solution(get_input_file('input10.txt')) == get_output_file('output10.txt')\nassert solution(get_input_file('input11.txt')) == get_output_file", "solution('''\n3 4\n3 1 2\n3 4 5\n1 1 3 1 3\n2 1 3 2 4\n3 1 3 4 5\n4 1 3\n''') == '9\\n9\\n10\\n'\n\n# check the performance of solution\nassert solution('''\n50000 50000\n1 2 3 4 5\n1 2 3 4 5\n4 1 50000\n1 1 50000 2 3\n4 1 50000\n1 1 50000 2 2\n4 1 50000\n1 1 50000 2 1\n4 1 50000\n''') == '1\\n2\\n3\\n4\\n'\n\nassert solution('''\n5 5\n3 1 4 2\n3 1 5 1\n3 1 5 2\n3 1 5 3\n3 1 5 4\n1 1 1 1 3\n2 1 1 1 4\n3 1 1 1 1\n4 1 1\n4 1 2\n4 1 3\n4 1 4\n4 1 5\n''') == '6\\n6\\n6\\n6\\n6\\n'\n\nassert solution('''\n5 5\n3 1 4 2\n3 1 5 1\n3 1 5 2\n3 1 5 3\n3 1 5 4\n2 1 1 1 4\n1 1 1 1 3\n3 1 1 1 1\n4 1 1\n4 1 2\n4 1", "solution(\"\") == \"\"\n\n# check the performance of solution\nassert solution(\"\") == \"\"", "solution('''\n1 2\n1 2\n1 2\n4 1 2\n''') == '3'\nassert solution('''\n1 2\n1 2\n1 2\n4 1 2\n4 1 2\n''') == '3\\n3'\nassert solution('''\n5 5\n1 2 1 2 1\n1 2 1 2 1\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n''') == '15\\n15\\n15\\n15\\n15'\nassert solution('''\n5 5\n1 2 1 2 1\n1 2 1 2 1\n3 1 5 5\n3 1 5 5\n3 1 5 5\n3 1 5 5\n3 1 5 5\n''') == '15\\n30\\n45\\n60\\n75'\nassert solution('''\n5 5\n1 2 1 2 1\n1 2 1 2 1\n2 1 5 5\n2 1 5 5\n2 1 5 5\n2 1 5 5\n2 1 5 5\n''') == '15\\n30\\n45\\n60\\n75'\nassert solution('''\n5 5\n1 2 1 2 1\n1 2 1 2 1\n2 1 5 5\n2 1 5 5\n2 1 5 5\n2 1 5 5\n2 1 5 5\n''') == '15\\", "solution('''\n''') == '''\n'''\n\n# print(solution('''\n# '''))", "solution(\n    '''\n    4 8\n    1 1 1 1\n    2 2 2 2\n    4 1 4\n    3 2 1 3\n    4 1 4\n    1 2 2 3 4\n    4 1 4\n    2 1 2 4\n    4 1 4\n    3 3 3 3\n    4 1 4\n    '''\n) == '''\n42\n22\n86\n'''", "solution('''\n5 4\n0 1 2 3 4\n1 2 3 4 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n''') == '''\n10\n10\n10\n10\n'''\nassert solution('''\n4 10\n0 1 2 3\n4 5 6 7\n4 1 4 5\n1 2 2 3 4\n3 3 1 2\n4 1 4 5\n4 1 4 5\n4 1 4 5\n4 1 4 5\n2 3 4 6\n4 1 4 5\n''') == '''\n13\n13\n13\n13\n13\n13\n13\n13\n'''\n\n# get the input/output\nprint(solution('''\n5 4\n0 1 2 3 4\n1 2 3 4 5\n4 1 5\n4 1 5\n4 1 5\n4 1 5\n'''))\nprint(solution('''\n4 10\n0 1 2 3\n4 5 6 7\n4 1 4 5\n1 2 2 3 4\n3 3 1 2\n4 1 4 5\n4 1 4 5\n4 1 4 5\n4 1 4 5\n2 3 4 6\n4 1 4 5\n'''))", "solution('''\n    4 6\n    0 0 0 0\n    0 0 0 0\n    1 1 1 1 0\n    2 1 1 1 0\n    3 1 1 1 1\n    4 1 1\n    1 1 1 1 1\n    2 1 1 1 1\n    3 1 1 1 0\n    4 1 1\n    1 1 1 1 1000000000\n    2 1 1 1 1000000000\n    3 1 1 1 -1000000000\n    4 1 1\n    1 1 1 1 1000000\n    2 1 1 1 1000000\n    3 1 1 1 -1000000\n    4 1 1\n    1 1 1 1 1000000\n    2 1 1 1 1\n    3 1 1 1 1\n    4 1 1\n    1 1 1 1 1\n    2 1 1 1 1000000\n    3 1 1 1 -1000000\n    4 1 1\n    1 1 1 1 1000000\n    2 1 1 1 1000000\n    3 1 1 1 -1000000\n    4 1 1\n    1 1 1 1 0\n    2 1 1 1 0\n    3 1 1 1 0\n    4 1 1\n    1 1 1 1 1000000000\n    2 1 1 1 1000000000\n    3 1 1 1 -1000000000\n    4 1 1\n    1 1 1 1 1000000\n    2 1 1 1 1000000\n    3 1 1 1 -1", "solution('''\n4 7\n1 2 3 4\n5 6 7 8\n2 1 1 4 3\n3 1 1 4 2\n1 1 1 4 5\n4 1 4\n4 1 4\n4 1 4\n''') == '''\n0\n11\n32\n'''\n\n# add testcases:\n'''\n10 1\n1 2 3 4 5 6 7 8 9 10\n11 12 13 14 15 16 17 18 19 20\n4 1 10\n\n5 5\n1 2 3 4 5\n5 6 7 8 9\n1 1 5 4 3\n2 3 3 5 4\n4 1 5\n4 2 5\n\n'''", "solution('''\n5 6\n1 2 3 4 5\n6 7 8 9 10\n1 1 1 1 2\n2 1 1 1 3\n3 1 1 1 1\n1 1 1 1 1\n4 1 1\n4 1 5\n''') == '''\n20\n42\n'''\n\nassert solution('''\n2 5\n1 2\n3 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n4 1 1\n4 1 2\n''') == '''\n5\n5\n'''\n\nassert solution('''\n5 5\n1 2 3 4 5\n6 7 8 9 10\n1 1 1 1 1\n2 1 1 1 1\n3 1 1 1 1\n4 1 1\n4 1 5\n''') == '''\n5\n5\n'''\n\n# stress testing solution\nimport random\nimport timeit\n\ndef generate_test_case(n: int, q: int) -> str:\n    if n <= 0 or q <= 0:\n        raise ValueError\n\n    lines = [str(n), str(q)]\n    for i in range(n):\n        lines.append(str(random.randint(0, 10**6)))\n    for i in range(n):\n        lines.append(str(random.randint(0, 10**6)))\n   ", "solution(\"\"\"3 7\n1 2 3\n1 2 3\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1 1 1 1\n2 1 1 1\n3 1 1 1\n4 1 1\n1", "solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"\n3 5\n1 2 3\n4 5 6\n1 1 3 1\n2 1 3 2\n3 1 3 1\n4 1 2\n4 2 3\n\"\"\") == \"\"\"\n3\n10\n17\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n6 10\n11 12 1 2 3 4\n4 5 6 7 8 9\n4 1 6 1\n4 1 6 2\n4 1 6 4\n1 1 2 1 10\n1 1 3 4 10\n1 1 2 5 10\n1 1 3 6 10\n2 1 2 1 10\n2 1 3 4 10\n2 1 2 5 10\n2 1 3 6 10\n3 1 2 1 10\n3 1 3 4 10\n3 1 2 5 10\n3 1 3 6 10\n4 1 6\n4 1 6\n4 1 6\n4 1 6\n4 1 6\n4 1 6\n\"\"\") == \"\"\"\n1\n5\n1\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n0\n54\n7\n10\n\"\"\", \"Example 2\"", "solution(example) == example_ans\n\n# run the solution\nfrom tester import Tester\n\nTester(solution).run()", "solution('''\n2 3\n2 5\n4 1\n4 1 2 5\n1 1 2 1 2\n4 1 2 5\n''') == '''\n55\n55\n'''", "solution('''\n5 5\n1 2 3 4 5\n6 7 8 9 10\n1 1 1 5 2\n2 1 1 5 8\n3 1 1 5 2\n4 1 5\n4 1 5\n''') == '''\n10198\n13732\n'''\n\n# test speed\nimport timeit\n\nprint(timeit.timeit(solution, input=r'''\n5 5\n1 2 3 4 5\n6 7 8 9 10\n1 1 1 5 2\n2 1 1 5 8\n3 1 1 5 2\n4 1 5\n4 1 5\n''', number=1000))\n\nprint(timeit.timeit(solution, input=r'''\n1 1\n1\n2\n4 1 1\n''', number=1000))\n\nprint(timeit.timeit(solution, input=r'''\n1 10\n3\n3 1 10 2\n3 1 10 1\n3 1 10 2\n3 1 10 1\n3 1 10 2\n3 1 10 1\n3 1 10 2\n3 1 10 1\n3 1 10 2\n3 1 10 1\n4 1 1\n''', number=1000))\n\nprint(timeit.timeit(solution, input=r'''\n1 10\n3\n3 1 10 2\n3 1 10 1\n3 1 10 2\n3 1 10 1\n3", "solution('''\n3 2\n1 1 2\n3 3 2\n4 1 2\n4 1 3\n''') == '''\n3\n7\n'''\n\nassert solution('''\n5 5\n1 2 3 4 5\n1 2 3 4 5\n3 1 5 -3\n4 2 4\n2 2 5 10\n4 1 5\n1 2 5 10\n4 1 5\n''') == '''\n8\n24\n48\n'''\n\n# check the speed of solution\nfrom random import randint\nfrom time import time\ndef slow_solution(stdin: str) -> str:\n    '''\n    Use this solution if you want to verify your solution against the output of the slow solution.\n    '''\n    def input_gen(stdin: str) -> tuple:\n        '''\n        Generate the inputs from the input string.\n        '''\n        for line in stdin.splitlines():\n            if line:\n                for num in line.split():\n                    yield int(num)\n\n    def fib(n: int) -> int:\n        '''\n        Calculate the n-th Fibonacci number.\n        '''\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return fib(n-1) + fib(n-2)", "solution('''\n2 3\n1 2\n3 4\n1 1 1 2 10\n2 1 1 2 10\n4 1 2\n''') == '''\n5\n5\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 2\n3 4\n1 1 1 2 10\n2 1 1 2 10\n4 1 2\n''') == '''\n5\n5\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 2\n3 4\n1 1 1 2 10\n2 1 1 2 10\n4 1 2\n''') == '''\n5\n5\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 2\n3 4\n1 1 1 2 10\n2 1 1 2 10\n4 1 2\n''') == '''\n5\n5\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 2\n3 4\n1 1 1 2 10\n2 1 1 2 10\n4 1 2\n''') == '''\n5\n5\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n1 2\n3 4\n1 1 1 2 10\n2 1 1 2 10\n4 1 2\n", "solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n11 12 13 14 15 16 17 18 19 20\n1 1 2 4 10\n2 2 2 4 10\n3 1 2 2 100\n4 2 4\n''') == '114'\n\n# check the correctness of solution\nassert solution('''\n7 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n2 2 3 3 10\n2 3 4 4 1\n2 1 7 7 4\n1 3 3 3 8\n4 4 6\n4 1 7\n''') == '171'\n\n# check the correctness of solution\nassert solution('''\n5 7\n1 2 3 4 5\n6 7 8 9 10\n1 2 1 3 1\n1 3 3 3 7\n2 2 1 3 10\n3 3 3 3 -2\n4 3 3\n4 1 5\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n10 9\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n2 1 5 5 10\n3 1 7 7 5\n3 2 2 7 1\n3 6 8 8 -1\n1 1 8 8 10\n4 1 8\n4 1 1\n4 9 10\n''') == '56'\n\n# check the correctness of solution\nassert solution(", "solution(stdin='''\n3 4\n1 2 3\n4 5 6\n4 1 3\n4 1 3\n4 1 3\n4 1 3\n''') == '''\n11\n15\n21\n'''\n\n# submit the solution to the contest\n\n# test cases\n# input_str = stdin\n\n# output_str = solution(input_str)\n\n# # print(output_str)\n\n# assert output_str == stdout\n\n# assert input_str.strip() == stdin.strip()", "solution(in_str) == out_str", "solution('''\n4 10\n1 2 3 4\n4 3 2 1\n4 1 4 2\n4 1 2 0\n4 2 4 0\n4 1 4 0\n4 1 2 0\n4 2 4 0\n4 1 4 0\n4 1 2 1\n''') == '''\n0\n0\n0\n0\n12\n'''\n#\n# assert solution('''\n# ''') == '''\n# '''\n#\n# assert solution('''\n# ''') == '''\n# '''\n#\n# assert solution('''\n# ''') == '''\n# '''\n#\n# assert solution('''\n# ''') == '''\n# '''\n#\n# assert solution('''\n# ''') == '''\n# '''\n#\n# assert solution('''\n# ''') == '''\n# '''\n#\n# assert solution('''\n# ''') == '''\n# '''\n#\n# assert solution('''\n# ''') == '''\n# '''\n#\n# assert solution('''\n# ''') == '''\n# '''\n#\n# assert solution('''\n# ''') == '''\n# '''\n#\n# assert solution('''\n# ''')", "solution('''\n5 4\n0 5 1 3 3\n2 1 7 5 2\n1 1 2 3 7\n3 1 1 1 0\n4 2 5\n''') == '13\\n'\n\n# do not edit input/output files\n# import sys\n# sys.stdin = open('in.txt', 'r')\n# sys.stdout = open('out.txt', 'w')\n# install stdin/stdout listener\n# https://pypi.org/project/ptvsd/\nimport ptvsd\nptvsd.enable_attach(address=('0.0.0.0', 3000), redirect_output=True)\n\n# solve the problem\nsolution(input())", "solution('''\n4 5\n1 4 1\n1 2 3 4\n4 1 3\n1 1 4 3\n4 2 4\n3 2 1 1\n4 1 4\n3 1 1 1\n4 1 4\n''') == '''\n4\n17\n15\n'''", "solution(\"\"\"\n10 15\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n1 1 1 10 0\n1 1 1 10 5\n3 1 1 1 -3\n1 2 2 1 10\n3 2 2 2 -3\n4 1 10\n4 1 1\n4 10 10\n2 3 3 10 10\n4 1 1\n4 1 10\n4 10 10\n2 3 3 10 5\n2 3 3 10 10\n4 1 1\n4 1 10\n4 10 10\n\"\"\") == \"\"\"\n0\n20\n21\n20\n21\n20\n21\n20\n\"\"\"\n\n# a function to help you post-process the submitted solution for verification\ndef post_process(output: str) -> str:\n    return output.strip()", "solution('''\n3 4\n0 1 2\n5 3 1\n1 1 3 5 3\n2 2 3 3 7\n3 1 3 4 3\n4 1 3\n''') == '''\n13\n13\n13\n'''\n\ndef solution_input(input_file: str) -> str:\n    with open(input_file, 'r') as f:\n        return solution(f.read())\n\n# sample tests\nassert solution_input('sample1.in') == '''\n13\n13\n13\n'''\nassert solution_input('sample2.in') == '''\n2082294\n2082294\n2082294\n'''\nassert solution_input('sample3.in') == '''\n43\n43\n43\n'''\n\n# task tests\nassert solution_input('task1.in') == '''\n15\n15\n15\n'''\nassert solution_input('task2.in') == '''\n2817\n2817\n2817\n'''\nassert solution_input('task3.in') == '''\n5\n5\n5\n'''\nassert solution_input('task4.in') == '''\n37\n37\n37\n'''\nassert solution_input('task5.in') == '''\n34\n34\n34\n'''\nassert solution_input", "solution(\n'''\n1 0\n0\n0\n'''\n) == '''\n'''\n\nassert solution(\n'''\n4 2\n0 1 2 3\n4 5 6 7\n4 1 4 1 2\n4 1 4 1 1\n'''\n) == '''\n8\n16\n'''\n\nassert solution(\n'''\n5 2\n2 3 3 0 2\n3 4 2 0 1\n4 1 5\n4 1 5\n'''\n) == '''\n25\n10\n'''\n\nassert solution(\n'''\n5 2\n2 3 3 0 2\n3 4 2 0 1\n4 1 5\n4 1 5\n'''\n) == '''\n25\n10\n'''\n\nassert solution(\n'''\n5 3\n2 3 3 0 2\n3 4 2 0 1\n4 1 5\n2 3 3 0 2\n3 4 2 0 1\n3 1 5 2\n3 1 5 2\n3 1 5 2\n4 1 5\n'''\n) == '''\n25\n10\n38\n'''\n\nassert solution(\n'''\n5 6\n2 3 3 0 2\n3 4 2 0 1\n2 3 3 0 2\n3 4 2 0 1\n3 1 5 2\n3 1 5 2\n3 1 5 2\n4 1 5\n2 1 5 2\n3 1", "solution('''\n2 3\n1 2\n2 3\n1 1 1 1 1\n2 1 1 1 3\n4 1 2\n''') == '''\n6\n'''\n\nassert solution('''\n3 4\n1 2 3\n3 4 5\n1 1 1 2 4\n2 2 2 3 3\n3 1 1 2 1\n4 1 3\n''') == '''\n28\n'''\n\nassert solution('''\n4 5\n1 2 3 4\n4 3 2 1\n1 1 1 4 5\n2 2 2 4 3\n3 3 3 3 3\n4 2 4\n4 1 4\n''') == '''\n49\n32\n'''\n\nassert solution('''\n5 4\n0 0 0 0 0\n0 0 0 0 0\n1 1 2 3 1\n2 3 5 3 2\n4 2 4\n4 1 5\n''') == '''\n1\n4\n'''\n\n# check the performance of solution\nassert solution('''\n1 5\n1\n1\n2 1 1 1 2\n2 1 1 1 3\n4 1 1\n1 1 1 1 10\n2 1 1 1 100\n4 1 1\n''') == '''\n2\n3\n'''\n\nassert solution('''\n2 5\n1 1\n1 1\n1 1 1 1 2\n2 1 1 1 3\n"], "finish_reason": ["stop", "length", "stop", "length", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "length"], "sum_logprob": [-35.64534077880001, -127.20145267661606, -133.72816626732995, -158.1886553973869, -72.75541621467508, -97.39214121987658, -5.657224448, -120.12546954432909, -114.0565739479429, -111.73155041356999, -108.08884200954, -34.43239938475, -56.4638839316, -112.70373132073897, -17.235141116, -73.75903033300308, -139.12652385520008, -188.00729340156, -130.26106941817494, -101.56247186262806, -128.1173820104499, -144.18985795246002, -20.019200202035524, -134.64167483942006, -10.991469892000001, -67.04495875499109, -12.541199475393995, -68.45694760909997, -106.14715432058401, -75.84230970222995, -105.15817727530005, -119.56778239917797, -33.688886718959964, -6.9678075932, -152.29258084573001, -32.1144426177, -36.184977667000005, -115.27945259489903, -183.1606386635111, -32.99954023100158, -228.14470765968002, -93.16908345390004, -10.341865206999998, -69.15184203209496, -139.80889675708409, -53.38878254759999, -154.95114047094, -154.68871152826412, -128.473817291272, -169.38692862538787], "mean_logprob": [-0.4294619370939759, -0.42400484225538665, -0.9905790093876297, -0.52729551799129, -0.24251805404891666, -0.3246404707329217, -0.6285804942222222, -0.40041823181443, -0.38018857982647636, -0.5101897279158447, -0.6004935667196667, -0.4849633716161972, -0.7952659708676056, -0.375679104402463, -0.9575078397777778, -0.24586343444334333, -0.695632619276, -0.6266909780052, -0.43420356472725, -0.3385415728754267, -0.4270579400348333, -0.4806328598415333, -0.06673066734011833, -0.44880558279806665, -0.5234033281904762, -0.22348319584997, -0.43245515432393106, -0.7522741495505495, -0.40055529932295847, -0.25280769900743333, -0.7405505441922535, -0.39855927466392665, -0.1122962890632, -0.435487974575, -0.6398847934694538, -1.003576331803125, -0.8415111085348838, -0.38426484198299665, -0.6105354622117033, -0.109998467436672, -0.7604823588656, -0.7699924252388429, -0.9401695642727272, -0.23050614010698334, -0.8683782407272298, -0.8474409928190476, -0.89052379581, -0.5156290384275467, -0.42824605763757334, -0.56462309541796]}
{"prompt": "'''\nFrog Gorf is traveling through Swamp kingdom. Unfortunately, after a poor jump, he fell into a well of n meters depth. Now Gorf is on the bottom of the well and has a long way up.\n\nThe surface of the well's walls vary in quality: somewhere they are slippery, but somewhere have convenient ledges. In other words, if Gorf is on x meters below ground level, then in one jump he can go up on any integer distance from 0 to a_x meters inclusive. (Note that Gorf can't jump down, only up).\n\nUnfortunately, Gorf has to take a break after each jump (including jump on 0 meters). And after jumping up to position x meters below ground level, he'll slip exactly b_x meters down while resting.\n\nCalculate the minimum number of jumps Gorf needs to reach ground level.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 300 000) \u2014 the depth of the well.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 i), where a_i is the maximum height Gorf can jump from i meters below ground level.\n\nThe third line contains n integers b_1, b_2, \u2026, b_n (0 \u2264 b_i \u2264 n - i), where b_i is the distance Gorf will slip down if he takes a break on i meters below ground level.\n\nOutput\n\nIf Gorf can't reach ground level, print -1. Otherwise, firstly print integer k \u2014 the minimum possible number of jumps.\n\nThen print the sequence d_1,\\,d_2, \u2026,\\,d_k where d_j is the depth Gorf'll reach after the j-th jump, but before he'll slip down during the break. Ground level is equal to 0.\n\nIf there are multiple answers, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n0 1 2\n1 1 1\n''') == '''\n3\n1\n2\n0\n'''\nassert solution('''\n4\n0 1 2 1\n1 1 1 1\n''') == '''\n4\n1\n2\n1\n0\n'''\nassert solution('''\n5\n0 0 0 0 0\n1 1 1 1 1\n''') == '''\n-1\n'''\nassert solution('''\n5\n0 1 1 0 0\n1 1 1 1 1\n''') == '''\n5\n1\n2\n1\n0\n0\n'''\nassert solution('''\n5\n0 1 1 0 0\n1 0 1 1 1\n''') == '''\n-1\n'''\nassert solution('''\n1\n0\n1\n''') == '''\n1\n0\n'''\nassert solution('''\n1\n0\n0\n''') == '''\n-1\n'''\nassert solution('''\n3\n0 0 1\n1 0 0\n''') == '''\n-1\n'''\nassert solution('''\n5\n0 0 1 0 0\n1 0 0 1 1\n''') == '''\n5\n1\n0\n1\n0\n0\n'''\nassert solution('''\n8\n", "solution('''\n6\n1 2 1 1 2 1\n1 2 2 1 1 2\n''') == '''\n3\n2 1 0\n'''\n\nassert solution('''\n1\n1\n1\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n1 1 1 1 1\n''') == '''\n5\n4 3 2 1 0\n'''\n\nassert solution('''\n3\n1 2 3\n1 2 3\n''') == '''\n2\n1 0\n'''\n\nassert solution('''\n1\n0\n0\n''') == '''\n-1\n'''\n\nassert solution('''\n10\n5 4 3 2 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n10\n9 8 7 6 5 4 3 2 1 0\n'''\n\nassert solution('''\n5\n5 4 4 3 3\n1 1 1 1 1\n''') == '''\n2\n4 0\n'''\n\nassert solution('''\n10\n1 1 1 1", "solution('''\n3\n0 1 1\n1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n0 0 2 1 1\n0 1 1 1 0\n''') == '''\n2\n0\n2\n'''\n\nassert solution('''\n5\n0 0 2 1 1\n0 1 1 1 1\n''') == '''\n5\n0\n1\n2\n3\n4\n'''\n\nassert solution('''\n4\n0 1 2 3\n0 0 0 0\n''') == '''\n4\n0\n1\n2\n3\n'''\n\nassert solution('''\n4\n0 1 2 3\n0 0 0 1\n''') == '''\n3\n0\n1\n3\n'''\n\nassert solution('''\n4\n0 1 2 3\n0 0 1 1\n''') == '''\n3\n0\n1\n3\n'''\n\nassert solution('''\n4\n0 1 2 3\n0 1 1 1\n''') == '''\n3\n0\n2\n3\n'''\n\nassert solution('''\n4\n0 1 2 3\n0 1 2 2\n''') == '''\n2\n0\n3\n'''\n\nassert solution('''\n4\n0 1 2 3\n0", "solution(r'''\n5\n1 1 1 2 3\n0 0 0 1 1\n''') == r'''\n4\n0\n1\n2\n4\n'''\n\nassert solution(r'''\n4\n1 2 3 4\n0 0 0 0\n''') == r'''\n1\n4\n'''\n\nassert solution(r'''\n3\n1 1 1\n1 1 1\n''') == r'''\n-1\n'''\n\n# stress testing\nfrom datetime import datetime as dt\nimport random\nrandom.seed(dt.now())\n\nwhile True:\n    try:\n        start = dt.now()\n        n = random.randint(1, 300000)\n        a = [random.randint(0, i) for i in range(n)]\n        b = [random.randint(0, n - i) for i in range(n)]\n        solution(r'''\n{n}\n{a}\n{b}\n'''.format(n=n, a=' '.join(map(str, a)), b=' '.join(map(str, b))))\n        print(dt.now() - start)\n    except KeyboardInterrupt:\n        print('KeyboardInterrupt')\n        break", "'''-1''' == solution('''\n5\n1 2 3 4 5\n1 2 3 4 5\n''')\nassert '''5\n5 4 3 2 1\n0''' == solution('''\n5\n4 4 4 4 4\n0 0 0 0 0\n''')\nassert '''3\n3 1 0\n1 0''' == solution('''\n6\n0 1 0 0 1 0\n1 0 1 0 0 0\n''')\nassert '''3\n3 2 1\n0''' == solution('''\n6\n2 3 3 3 3 3\n0 0 0 0 0 0\n''')\nassert '''4\n4 3 2 1\n0''' == solution('''\n6\n1 2 3 4 4 4\n0 0 0 0 0 0\n''')\nassert '''7\n7 6 5 4 3 2 1\n0''' == solution('''\n8\n5 5 5 5 5 5 5 5\n0 0 0 0 0 0 0 0\n''')\nassert '''3\n3 2 1\n0''' == solution('''\n6\n2 3 3 3 3 3\n0 0 0 0 0 0\n''')\nassert '''4\n4 3 2 1\n0''' == solution('''\n6\n1 2 3 4 4 4\n0 0 0 0 0 0\n''')\nassert", "solution(r'''\n5\n1 2 3 4 5\n1 2 1 2 1\n''') == r'''\n3\n0\n3\n5\n'''\n\n# check the correctness of solution\nassert solution(r'''\n7\n1 2 2 2 2 2 2\n1 1 1 1 1 1 1\n''') == r'''\n4\n0\n2\n4\n6\n'''\n\n# check the correctness of solution\nassert solution(r'''\n5\n1 2 1 2 1\n1 2 1 2 1\n''') == r'''\n-1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n2 3 3\n2 2 2\n''') == r'''\n-1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n5\n1 2 3 4 5\n1 2 1 2 1\n''') == r'''\n3\n0\n3\n5\n'''\n\n# check the correctness of solution\nassert solution(r'''\n7\n1 2 2 2 2 2 2\n1 1 1 1 1 1 1\n''') == r'''\n4\n0\n2\n4\n6\n'''\n\n# check the correctness of solution\nassert solution(r'''\n5\n1 2 1 2 1\n1 2 1 2 1\n", "solution('''\n5\n0 0 1 1 1\n1 0 0 0 0\n''') == '''\n3\n0\n2\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n0\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n0 0\n0 0\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n0 0 0\n0 0 0\n''') == '''\n3\n0\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 3 4 5\n1 2 3 4 5\n''') == '''\n5\n0\n1\n2\n3\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n9\n3 3 3 3 3 3 3 3 3\n3 3 3 3 3 3 3 3 3\n''') == '''\n9\n0\n3\n6\n9\n12\n15\n18\n21\n24\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0\n1\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution", "solution(\"\"\"\n5\n1 1 2 2 1\n1 1 1 1 1\n\"\"\") == \"\"\"\n3\n0\n2\n4\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 2 1 1\n1 1 1 1 1\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"\n5\n2 2 2 2 2\n0 0 0 0 0\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\nassert solution(\"\"\"\n5\n0 0 0 0 0\n1 1 1 1 1\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"\n2\n2 1\n0 0\n\"\"\") == \"\"\"\n2\n1\n0\n\"\"\"\nassert solution(\"\"\"\n3\n1 1 1\n0 0 0\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\nassert solution(\"\"\"\n4\n2 1 1 1\n0 0 0 0\n\"\"\") == \"\"\"\n2\n1\n0\n\"\"\"\nassert solution(\"\"\"\n5\n1 1 1 1 1\n0 0 0 0 0\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\nassert solution(\"\"\"\n5\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"\n5\n1 1 2 2 1\n0 0 0 0 0\n\"\"\") == \"\"\"\n2\n1\n0\n\"\"\"\nassert solution(\"\"\"\n5\n2 2 2 2 2", "solution('''\n4\n0 1 1 1\n0 0 0 0\n''') == '''\n3\n0\n1\n2\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n0 0 0 0 0\n''') == '''\n5\n0\n1\n2\n3\n4\n'''\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n10\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n'''\n\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n1\n0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n0\n0\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n0\n1\n''') == '''\n-1\n'''\n", "solution('''\n0\n0\n0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n1\n1\n''') == '''\n-1\n'''\n\nassert solution('''\n2\n1 1\n0 1\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n3\n1 1 1\n0 1 2\n''') == '''\n3\n1 2 3\n'''\n\nassert solution('''\n5\n2 1 0 0 0\n1 1 1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n2 2 1 1 1\n1 0 0 0 0\n''') == '''\n2\n2 3\n'''\n\nassert solution('''\n5\n3 1 2 0 0\n0 1 1 1 1\n''') == '''\n2\n2 3\n'''\n\nassert solution('''\n5\n3 1 2 0 0\n1 1 1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n10\n2 2 2 2 2 2 2 2 2 2\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n1\n10\n'''\n\nassert solution('''\n13\n3", "solution('''\n0\n0\n0\n''') == '''\n0\n0\n'''\n\nassert solution('''\n7\n3 1 5 2 1 4 4\n2 1 5 2 1 4 4\n''') == '''\n7\n0 3 5 7 9 11 14\n'''\n\nassert solution('''\n4\n1 2 3 4\n4 3 2 1\n''') == '''\n4\n0 1 2 3\n'''\n\nassert solution('''\n4\n4 4 4 4\n4 4 4 4\n''') == '''\n4\n0 4 7 9\n'''\n\nassert solution('''\n4\n4 4 4 4\n4 4 4 3\n''') == '''\n4\n0 4 7 10\n'''\n\nassert solution('''\n4\n4 4 4 4\n4 4 4 2\n''') == '''\n4\n0 4 7 11\n'''\n\nassert solution('''\n4\n4 4 4 4\n4 4 4 1\n''') == '''\n4\n0 4 7 12\n'''\n\nassert solution('''\n4\n1 1 1 1\n0 0 0 0\n''') == '''\n4\n0 1 2 3\n'''\n\nassert solution('''\n1\n0\n0\n''') == '''\n-1\n", "solution('''\n10\n1 3 3 2 3 3 3 2 2 1\n1 2 2 1 2 2 2 1 1 0\n''') == '''\n5\n1 4 6 7 8\n'''\nassert solution('''\n10\n2 2 2 2 2 2 2 2 2 2\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n-1\n'''\nassert solution('''\n10\n9 9 9 9 9 9 9 9 9 9\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n2\n9 10\n'''\nassert solution('''\n10\n1 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n1\n1\n'''\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n-1\n'''\nassert solution('''\n10\n9 2 2 2 2 2 2 2 2 2\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n-1\n'''\nassert solution('''\n10\n2 2 2 2 2 2 2 2 2 2\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n-1\n'''", "solution(\"\"\"2\n0 1\n0 1\n\"\"\") == \"\"\"1\n1\n\"\"\"\n\nassert solution(\"\"\"2\n1 1\n0 1\n\"\"\") == \"\"\"-1\n\"\"\"\n\nassert solution(\"\"\"3\n1 1 1\n0 1 1\n\"\"\") == \"\"\"3\n2\n1\n0\n\"\"\"\n\nassert solution(\"\"\"2\n0 0\n0 0\n\"\"\") == \"\"\"-1\n\"\"\"\n\nassert solution(\"\"\"1\n1\n0\n\"\"\") == \"\"\"1\n0\n\"\"\"\n\nassert solution(\"\"\"7\n0 0 1 1 2 0 2\n0 1 0 0 1 1 1\n\"\"\") == \"\"\"4\n4\n2\n0\n0\n\"\"\"\n\nassert solution(\"\"\"3\n0 0 1\n0 0 0\n\"\"\") == \"\"\"3\n2\n1\n0\n\"\"\"\n\nassert solution(\"\"\"4\n0 1 1 0\n0 0 0 0\n\"\"\") == \"\"\"-1\n\"\"\"\n\nassert solution(\"\"\"4\n0 1 1 1\n0 0 0 0\n\"\"\") == \"\"\"2\n2\n0\n\"\"\"\n\nassert solution(\"\"\"5\n0 0 0 0 1\n0 0 0 0 0\n\"\"\") == \"\"\"5\n4\n3\n2\n1\n0\n\"\"\"\n\nassert solution(\"\"\"5\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"\"\"-1", "solution('''\n5\n1 1 2 2 3\n1 1 1 1 1\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n6\n0 0 1 1 2 3\n0 0 0 0 0 0\n''') == '''\n-1\n'''\n\nassert solution('''\n4\n0 1 2 3\n0 0 0 0\n''') == '''\n4\n0 1 2 3\n'''\n\nassert solution('''\n4\n0 1 2 3\n0 0 0 1\n''') == '''\n3\n0 1 2\n'''\n\nassert solution('''\n4\n0 1 1 1\n0 0 0 0\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n5\n0 0 0 0 1\n0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n5\n0 0 0 0 1\n0 0 0 0 1\n''') == '''\n2\n0 1\n'''\n\nassert solution('''\n5\n0 0 0 0 1\n0 0 0 0 2\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n0 0 0 0 0\n''') == '", "solution('''\n5\n1 2 3 4 5\n1 2 1 2 1\n''') == '''\n4\n4\n2\n1\n0\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n1 1 1 1 1\n''') == '''\n4\n4\n2\n1\n0\n'''\n\nassert solution('''\n3\n1 1 1\n1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n1 1 1 1 1\n''') == '''\n1\n5\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n0 0 0 0 0\n''') == '''\n5\n4\n3\n2\n1\n0\n'''\n\nassert solution('''\n5\n0 1 2 3 4\n1 2 3 4 5\n''') == '''\n2\n5\n0\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n0 0 0 0 0\n''') == '''\n5\n4\n3\n2\n1\n0\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n0 0 0 0 0\n''') == '''\n5\n4\n3\n2\n1\n0\n", "solution('''\n5\n2 1 2 1 1\n0 1 0 0 0\n''') == '''\n5\n0\n1\n3\n4\n5\n'''\n\nassert solution('''\n7\n2 3 3 3 3 3 3\n0 0 0 0 0 0 0\n''') == '''\n-1\n'''\n\nassert solution('''\n7\n2 3 3 3 3 3 3\n0 0 1 1 1 1 1\n''') == '''\n8\n0\n2\n3\n4\n5\n6\n7\n8\n'''\n\nassert solution('''\n9\n2 3 3 3 3 3 3 3 3\n0 0 1 1 1 1 1 1 1\n''') == '''\n-1\n'''\n\n# TLE\nassert solution('''\n300000\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(\"3\\n1 1 2\\n1 2 3\") == \"2\\n0 1\", \"WTF\"\nassert solution(\"4\\n1 1 2 2\\n1 2 3 4\") == \"3\\n0 1 2\", \"WTF\"\nassert solution(\"2\\n2 1\\n2 1\") == \"2\\n0 1\", \"WTF\"\nassert solution(\"3\\n1 2 1\\n1 2 1\") == \"3\\n0 1 2\", \"WTF\"\nassert solution(\"3\\n2 2 2\\n1 1 1\") == \"3\\n0 1 2\", \"WTF\"\nassert solution(\"4\\n2 1 1 2\\n1 1 1 1\") == \"4\\n0 1 2 3\", \"WTF\"\nassert solution(\"5\\n4 3 2 1 1\\n1 1 1 1 1\") == \"5\\n0 1 2 3 4\", \"WTF\"\nassert solution(\"10\\n10 9 8 7 6 5 4 3 2 1\\n1 1 1 1 1 1 1 1 1 1\") == \"10\\n0 1 2 3 4 5 6 7 8 9\", \"WTF\"\nassert solution(\"10\\n10 9 8 7 6 5 4 3 2 1\\n1 1 1 1 1 1 1 1 1 10\") == \"10\\n0 1 2 3 4 5 6", "solution('''\n3\n1 2 1\n1 2 1\n''') == '''\n2\n0\n2\n'''\n\nassert solution('''\n7\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == '''\n7\n0\n1\n2\n3\n4\n5\n6\n'''\n\nassert solution('''\n7\n1 1 1 2 1 1 1\n1 1 1 1 1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n1 2 3 4 5\n''') == '''\n1\n0\n'''\n\nassert solution('''\n8\n1 1 1 2 1 1 1 2\n1 1 1 1 1 1 1 1\n''') == '''\n4\n0\n1\n2\n4\n'''\n\nassert solution('''\n10\n1 2 3 4 5 4 3 2 1 2\n1 2 3 4 5 4 3 2 1 2\n''') == '''\n-1\n'''\n\nassert solution('''\n10\n1 2 3 4 5 5 4 3 2 1\n1 2 3 4 5 5 4 3 2 1\n''') == '''\n10\n0\n1\n2\n3\n4\n5\n5\n6\n7\n8\n''", "solution(\"\"\"\n5\n0 2 3 1 1\n2 0 0 2 1\n\"\"\") == \"\"\"\n4\n0\n2\n4\n1\n\"\"\"\n\n# print solution(stdin)", "solution(sample_input) == sample_output\nassert solution(sample_input2) == sample_output2\nassert solution(sample_input3) == sample_output3", "solution(solution_input) == solution_output\n\n# test print\nprint(solution(solution_input))", "solution('''4\n2 1 2 2\n0 1 1 1\n''') == '''3\n2\n0\n0\n'''\n\nassert solution('''5\n1 2 1 1 1\n1 1 1 1 1\n''') == '''-1\n'''\n\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '''10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n'''\n\n# print the solution\nprint(solution(stdin))", "(solution('''\n5\n0 1 2 3 4\n0 0 0 0 0\n''') == '''\n5\n5 4 3 2 1\n''')\n\nassert (solution('''\n5\n2 3 2 3 4\n0 0 0 0 0\n''') == '''\n4\n4 3 2 1\n''')\n\nassert (solution('''\n4\n1 1 1 0\n0 0 0 0\n''') == '''\n4\n4 3 2 1\n''')\n\nassert (solution('''\n4\n0 0 0 1\n0 0 0 0\n''') == '''\n-1\n''')\n\nassert (solution('''\n4\n0 1 2 3\n0 0 0 0\n''') == '''\n-1\n''')\n\nassert (solution('''\n3\n1 2 1\n0 0 0\n''') == '''\n-1\n''')\n\nassert (solution('''\n2\n1 0\n0 0\n''') == '''\n2\n2 1\n''')\n\nassert (solution('''\n8\n3 2 1 1 0 0 0 0\n0 0 0 0 0 0 0 0\n''') == '''\n4\n8 6 4 2\n''')\n\nassert (solution('''\n7\n2 3", "solution(\"'''\nFrog Gorf is traveling through Swamp kingdom. Unfortunately, after a poor jump, he fell into a well of n meters depth. Now Gorf is on the bottom of the well and has a long way up.\n\nThe surface of the well's walls vary in quality: somewhere they are slippery, but somewhere have convenient ledges. In other words, if Gorf is on x meters below ground level, then in one jump he can go up on any integer distance from 0 to a_x meters inclusive. (Note that Gorf can't jump down, only up).\n\nUnfortunately, Gorf has to take a break after each jump (including jump on 0 meters). And after jumping up to position x meters below ground level, he'll slip exactly b_x meters down while resting.\n\nCalculate the minimum number of jumps Gorf needs to reach ground level.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 300 000) \u2014 the depth of the well.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 i), where a_i is the maximum height Gorf can jump from i meters below ground level.\n\nThe third line contains n integers b_1, b_2, \u2026, b_n (0 \u2264 b_i \u2264 n - i), where b_i is", "solution(\"\"\"\n5\n1 2 3 4 5\n1 2 3 4 5\n\"\"\") == \"\"\"-1\"\"\", \"First\"\nassert solution(\"\"\"\n5\n0 0 1 2 3\n1 1 1 1 1\n\"\"\") == \"\"\"\n4\n0\n1\n2\n3\n4\n\"\"\", \"Second\"\nassert solution(\"\"\"\n5\n0 1 2 3 4\n1 1 1 1 1\n\"\"\") == \"\"\"\n1\n0\n\"\"\", \"Third\"\nassert solution(\"\"\"\n5\n0 0 0 0 0\n1 1 1 1 1\n\"\"\") == \"\"\"-1\"\"\", \"Fourth\"\nassert solution(\"\"\"\n10\n0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n10\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\", \"Fifth\"\n\n# print(solution(\"\"\"\n# 5\n# 1 2 3 4 5\n# 1 2 3 4 5\n# \"\"\"))\n# print(solution(\"\"\"\n# 5\n# 0 0 1 2 3\n# 1 1 1 1 1\n# \"\"\"))\n# print(solution(\"\"\"\n# 5\n# 0 1 2 3 4\n# 1 1 1 1 1\n# \"\"\"))\n# print(solution(\"\"\"\n# 5\n#", "solution('''\n5\n1 2 1 2 1\n1 2 1 2 1\n''') == '''\n4\n1\n3\n4\n5\n'''\n\n# test # 2\nassert solution('''\n2\n1 1\n0 0\n''') == '''\n1\n1\n'''\n\n# test # 3\nassert solution('''\n1\n1\n0\n''') == '''\n1\n1\n'''\n\n# test # 4\nassert solution('''\n1\n0\n0\n''') == '''\n-1\n'''\n\n# test # 5\nassert solution('''\n5\n0 1 0 0 0\n0 0 0 0 0\n''') == '''\n1\n5\n'''\n\n# test # 6\nassert solution('''\n6\n0 1 0 1 0 1\n0 0 0 0 0 0\n''') == '''\n2\n5\n6\n'''\n\n# test # 7\nassert solution('''\n6\n0 1 0 1 0 1\n0 0 0 0 0 1\n''') == '''\n3\n3\n5\n6\n'''\n\n# test # 8\nassert solution('''\n10\n0 1 0 1 0 1 0 1 0 1\n0 0 0 0 0 0 0 0 0 0\n''') == '''", "solution(\"\"\"\n5\n1 1 1 1 1\n0 0 0 0 0\n\"\"\") == \"\"\"\n5\n0 1 2 3 4\n\"\"\"\n\nassert solution(\"\"\"\n2\n0 0\n0 0\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\"\"\"\n3\n0 0 0\n1 1 1\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 1 1\n0 0 0\n\"\"\") == \"\"\"\n3\n0 1 2\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2 3 4\n0 0 0 0\n\"\"\") == \"\"\"\n4\n0 1 2 3\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2 3 4\n1 1 1 1\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n2 3 4 5 6 7 8 9 10 11\n\"\"\") == \"\"\"\n3\n0 1 5\n\"\"\"\n\nassert solution(\"\"\"\n10\n9 9 9 9 9 9 9 9 9 9\n0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n1\n9\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n10\n0 1 2 3 4 5 6", "solution(\"\"\"\n10\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n\"\"\") == \"\"\"\n4\n4\n4\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n\"\"\"\nassert solution(\"\"\"\n2\n1 0\n1 0\n\"\"\") == \"\"\"-1\n\"\"\"\nassert solution(\"\"\"\n3\n1 1 1\n1 1 1\n\"\"\") == \"\"\"\n4\n3\n2\n1\n0\n\"\"\"\nassert solution(\"\"\"\n4\n2 3 3 3\n1 1 1 1\n\"\"\") == \"\"\"\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4", "solution(\"2\\n2 1\\n0 0\") == \"1\\n0\"\nassert solution(\"2\\n1 1\\n0 0\") == \"2\\n1 0\"\nassert solution(\"2\\n1 2\\n0 0\") == \"1\\n0\"\nassert solution(\"3\\n1 1 1\\n0 0 0\") == \"3\\n2 1 0\"\nassert solution(\"6\\n3 3 3 2 1 1\\n1 1 1 1 1 1\") == \"6\\n5 4 3 2 1 0\"\nassert solution(\"5\\n1 2 3 4 5\\n0 0 0 0 0\") == \"1\\n0\"\nassert solution(\"4\\n4 3 2 1\\n0 0 0 0\") == \"1\\n0\"\nassert solution(\"5\\n1 2 2 2 1\\n0 0 0 0 0\") == \"5\\n4 3 2 1 0\"\nassert solution(\"1\\n1\\n0\") == \"1\\n0\"\nassert solution(\"2\\n2 2\\n0 0\") == \"1\\n0\"\nassert solution(\"2\\n1 1\\n1 1\") == \"-1\"\nassert solution(\"3\\n1 1 1\\n1 1 1\") == \"-1\"\nassert solution(\"3\\n1 1 1\\n1 1 0\") == \"", "solution('''\n5\n3 2 1 1 1\n0 0 1 0 0\n''') == '''\n3\n3 1 0\n'''\nassert solution('''\n3\n2 2 2\n1 0 0\n''') == '''\n-1\n'''\nassert solution('''\n4\n0 1 2 3\n1 2 3 0\n''') == '''\n3\n3 2 1\n'''\nassert solution('''\n4\n3 3 3 3\n0 0 0 0\n''') == '''\n1\n4\n'''\nassert solution('''\n4\n1 1 1 1\n0 0 0 0\n''') == '''\n1\n1\n'''\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n10\n10 9 8 7 6 5 4 3 2 1\n'''\nassert solution('''\n10\n10 10 10 10 10 10 10 10 10 10\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n1\n10\n'''\nassert solution('''\n10\n10 9 8 7 6 5 4 3 2 1\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n1\n10\n'''\nassert solution('''", "solution(\"\"\"\n5\n2 1 3 2 3\n0 2 0 2 0\n\"\"\") == \"\"\"\n4\n0 1 2 4 0\n\"\"\"\n\n# run the solution on local pc\nwith open(\"input.txt\", \"r\") as f:\n    print(solution(f.read()))", "solution('''\n1\n1\n1\n''') == '''\n-1\n'''\n\nassert solution('''\n2\n1 2\n0 1\n''') == '''\n2\n0 2\n'''\n\nassert solution('''\n5\n2 3 2 0 1\n1 1 1 1 0\n''') == '''\n5\n0 1 2 2 3\n'''\n\nassert solution('''\n10\n1 2 1 1 2 2 0 1 2 1\n1 0 1 1 1 1 1 1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n13\n0 1 2 3 4 5 6 7 8 9 10 11 12\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n10\n1 2 1 1 2 2 0 1 2 1\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n16\n0 0 1 0 0 1 1 1 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n''') == '''\n3\n0 0 1\n'''\n\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0", "solution('''\n\n''') == '''\n\n'''", "solution(\"4\\n3 2 1 0\\n0 1 1 0\") == \"4\\n0 2 3 4\\n\"\nassert solution(\"4\\n0 1 1 3\\n0 1 1 0\") == \"4\\n0 1 2 3\\n\"\nassert solution(\"4\\n0 0 0 0\\n0 0 0 0\") == \"4\\n0 0 0 0\\n\"\nassert solution(\"4\\n3 3 3 3\\n3 3 3 3\") == \"4\\n0 1 2 3\\n\"\nassert solution(\"5\\n3 3 3 3 3\\n3 3 3 3 3\") == \"5\\n0 1 2 3 4\\n\"\nassert solution(\"8\\n1 0 0 1 0 1 0 0\\n0 0 0 0 0 0 0 0\") == \"8\\n0 1 2 3 4 5 6 7\\n\"\nassert solution(\"10\\n0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\") == \"10\\n0 1 2 3 4 5 6 7 8 9\\n\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\") == \"10\\n0 1 2 3 4 5 6 7 8 9\\n\"\nassert solution(\"10\\n9 8 7 6", "solution(\"\") == \"\"\nprint(\"Passed the tests\")", "solution(\"\"\"\n5\n2 3 3 3 2\n1 2 2 1 1\n\"\"\") == \"\"\"\n4\n0 2 5 5\n\"\"\"\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"\n4\n2 3 3 3\n1 2 2 1\n\"\"\") == \"\"\"\n4\n0 2 4 4\n\"\"\"\nassert solution(\"\"\"\n4\n2 3 3 3\n2 2 2 2\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"\n4\n2 3 3 3\n0 0 0 0\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\nassert solution(\"\"\"\n10\n1 4 4 4 4 4 4 4 4 4\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n10\n0 1 2 3 4 5 6 7 8 9\n\"\"\"\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"\n10\n0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"\n1\n0\n0\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\nassert solution(\"\"\"\n2\n0 1\n0 1\n\"\"\") == \"\"\"-1\"\"\"", "solution('''\n5\n1 1 2 3 5\n1 1 1 2 4\n''') == '''\n5\n0 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 1\n1 2 1\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n0 1 1 0 0 1 1\n0 0 0 1 1 1 1\n''') == '''\n4\n0 1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n10\n0 1 2 3 4 5 6 7 8 9\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n7\n0 1 2 3 4 5 6 7\n'''\n\n# check the correctness of solution\nassert solution(", "solution('''\n4\n2 1 1 2\n1 1 1 1\n''') == '''\n4\n1 2 1 0\n'''\n\nassert solution('''\n3\n2 2 3\n2 1 1\n''') == '''\n3\n2 0 0\n'''\n\nassert solution('''\n3\n1 1 1\n1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n1\n1\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n0\n0\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n1\n0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n3\n1 1 1\n0 0 0\n''') == '''\n3\n1 2 0\n'''\n\nassert solution('''\n3\n1 2 3\n0 0 0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n2\n0\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\n1\n1\n''') == '''\n-1\n'''\n\nassert solution('''\n3\n1 1 2\n1 1 1\n", "solution('''\n5\n1 2 2 1 1\n1 1 1 2 1\n''') == '''\n4\n1 2 3 1\n'''\n\nassert solution('''\n6\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n8\n1 2 2 1 1 2 2 1\n1 1 1 2 1 1 1 1\n''') == '''\n5\n1 2 3 1 2\n'''\n\nassert solution('''\n5\n2 3 3 3 3\n3 3 3 3 3\n''') == '''\n4\n2 3 3 1\n'''\n\nassert solution('''\n6\n1 2 2 1 2 2\n1 1 1 2 1 1\n''') == '''\n4\n1 2 3 1\n'''\n\nassert solution('''\n5\n2 2 2 1 1\n1 1 1 2 1\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n1 2 2 2 1\n1 1 1 2 1\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n1 2 2 1 1\n1 1 1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n1 2", "solution('''\n2\n1 0\n1 1\n''') == '''\n3\n0 0 1\n'''\n\nassert solution('''\n3\n1 1 1\n1 1 1\n''') == '''\n3\n0 1 2\n'''\n\nassert solution('''\n4\n2 2 1 0\n2 1 1 0\n''') == '''\n5\n0 1 2 2 4\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n1 1 1 1 1\n''') == '''\n5\n0 1 2 3 4\n'''\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n10\n0 1 2 3 4 5 6 7 8 9\n'''\n\nassert solution('''\n100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "solution(\"\"\"\n5\n1 2 1 2 1\n2 2 1 2 2\n\"\"\") == \"\"\"\n4\n4 3 2 1 0\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 1 2 1\n2 2 1 2 1\n\"\"\") == \"\"\"\n-1\n\"\"\"\nassert solution(\"\"\"\n3\n2 1 1\n2 2 2\n\"\"\") == \"\"\"\n4\n3 2 1 0\n\"\"\"\nassert solution(\"\"\"\n10\n4 2 3 1 2 2 1 1 4 2\n3 1 2 2 2 2 2 1 1 1\n\"\"\") == \"\"\"\n3\n10 5 1\n\"\"\"\nassert solution(\"\"\"\n5\n5 4 3 2 1\n5 4 3 2 1\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n5 4 3 2 1\n\"\"\") == \"\"\"\n2\n5 0\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n1 2 3 4 5\n\"\"\") == \"\"\"\n2\n5 0\n\"\"\"\nassert solution(\"\"\"\n5\n1 1 1 1 1\n1 1 1 1 1\n\"\"\") == \"\"\"\n5\n5 4 3 2 1\n\"\"\"\nassert solution(\"\"\"\n10\n10 9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\n2\n10 0\n\"\"\"\n", "(solution('''\n5\n0 1 2 1 2\n1 1 2 1 1\n''') == '''\n5\n0\n1\n2\n1\n0\n''')\n\nassert (solution('''\n5\n0 0 1 1 2\n1 1 2 1 1\n''') == '''\n-1\n''')\n\nassert (solution('''\n5\n0 0 0 0 0\n1 1 1 1 1\n''') == '''\n-1\n''')\n\nassert (solution('''\n5\n0 1 2 3 4\n0 0 0 0 0\n''') == '''\n1\n0\n''')\n\nassert (solution('''\n5\n0 1 2 3 3\n0 0 0 0 1\n''') == '''\n2\n0\n1\n''')\n\nassert (solution('''\n5\n0 0 0 1 1\n0 0 0 0 1\n''') == '''\n2\n0\n0\n''')\n\nassert (solution('''\n5\n0 0 0 1 1\n0 0 0 1 1\n''') == '''\n3\n0\n0\n0\n''')\n\nassert (solution('''\n5\n0 0 0 0 1\n0 0 0 0 1\n''') == '''\n3\n0\n0\n0", "solution(stdin) == stdout\n\n# if all ok, print \"OK\" and total time\nprint(\"OK\")\nprint(time.time() - start_time)", "solution('''\n3\n1 1 1\n1 1 1\n''') == '''\n3\n0\n1\n0\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n1 1 1 1 1\n''') == '''\n5\n0\n1\n2\n3\n4\n0\n'''\n\nassert solution('''\n2\n1 1\n1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n5\n1 0 1 1 0\n1 1 1 1 1\n''') == '''\n3\n0\n1\n3\n0\n'''\n\nassert solution('''\n3\n2 1 2\n2 1 2\n''') == '''\n2\n0\n2\n0\n'''\n\nassert solution('''\n4\n2 1 2 2\n2 1 2 2\n''') == '''\n2\n0\n2\n0\n'''\n\nassert solution('''\n4\n2 2 2 2\n2 2 2 2\n''') == '''\n2\n0\n2\n0\n'''\n\nassert solution('''\n7\n3 3 3 3 3 3 3\n3 3 3 3 3 3 3\n''') == '''\n7\n0\n3\n6\n9\n12\n15\n18\n0\n'''", "solution('''\n\n''') == '''\n\n'''", "solution('''\n4\n0 2 3 3\n2 0 0 0\n''') == '''\n3\n0 2 3\n'''\nassert solution('''\n3\n1 1 1\n1 1 1\n''') == '''\n-1\n'''\nassert solution('''\n3\n0 1 1\n0 0 0\n''') == '''\n2\n0 1\n'''\nassert solution('''\n4\n0 2 3 3\n0 0 0 0\n''') == '''\n1\n0\n'''\nassert solution('''\n2\n0 0\n1 1\n''') == '''\n-1\n'''\nassert solution('''\n3\n0 1 1\n1 0 0\n''') == '''\n2\n0 1\n'''\nassert solution('''\n2\n0 0\n0 0\n''') == '''\n1\n0\n'''\nassert solution('''\n3\n0 1 1\n1 1 1\n''') == '''\n-1\n'''\nassert solution('''\n4\n0 1 1 2\n1 1 1 1\n''') == '''\n-1\n'''\nassert solution('''\n4\n0 1 2 3\n1 0 0 0\n''') == '''\n2\n0 1\n'''\nassert solution('''\n", "solution('''\n3\n0 2 1\n0 0 0\n''') == '''\n3\n0 2 1\n'''\nassert solution('''\n3\n0 0 1\n0 0 0\n''') == '''\n-1\n'''\nassert solution('''\n1\n1\n0\n''') == '''\n1\n1\n'''\nassert solution('''\n300000\n300000 0\n300000 300000\n''') == '''\n1\n300000\n'''\nassert solution('''\n300000\n300000 1\n0 0\n''') == '''\n2\n300000 0\n'''\nassert solution('''\n300000\n300000 0\n0 300000\n''') == '''\n300000\n300000 299999 299998 299997 299996 299995 299994 299993 299992 299991 299990 299991 299992 299993 299994 299995 299996 299997 299998 299999\n'''\nassert solution('''\n300000\n300000 0\n1 299999\n''') == '''\n2\n300000 1\n'''\nassert solution('''\n100000\n100000 1\n0 0\n''') == '''\n2\n100000 1\n'''\nassert solution('''\n9\n2 5 7", "solution('''\n5\n1 2 2 1 1\n1 1 1 2 1\n''') == '''\n4\n1\n3\n4\n5\n'''\n\nassert solution('''\n2\n1 1\n1 1\n''') == '''\n2\n1\n2\n'''\n\nassert solution('''\n5\n1 2 2 1 1\n1 1 1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n7\n1 2 3 4 5 6 7\n1 1 1 1 1 1 1\n''') == '''\n7\n1\n2\n3\n4\n5\n6\n7\n'''\n\nassert solution('''\n1\n1\n1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n5\n0 0 0 0 1\n1 1 1 1 1\n''') == '''\n5\n0\n0\n0\n0\n1\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n0 0 0 0 0\n''') == '''\n1\n5\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n1 1 1 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n6\n1 1 1 1 1", "solution('''4\n1 1 1 1\n1 1 1 1''') == '''4\n1 2 3 4'''\nassert solution('''4\n1 1 1 1\n1 1 1 0''') == '''3\n1 2 3'''\nassert solution('''4\n1 1 1 1\n1 1 0 0''') == '''2\n1 2'''\nassert solution('''4\n1 1 1 1\n1 0 0 0''') == '''1\n1'''\nassert solution('''4\n1 1 1 1\n0 0 0 0''') == '''-1'''\nassert solution('''4\n1 2 3 4\n1 1 1 1''') == '''4\n1 3 6 10'''\nassert solution('''4\n1 2 3 4\n1 1 1 0''') == '''3\n1 3 6'''\nassert solution('''4\n1 2 3 4\n1 1 0 0''') == '''2\n1 3'''\nassert solution('''4\n1 2 3 4\n1 0 0 0''') == '''1\n1'''\nassert solution('''4\n1 2 3 4\n0 0 0 0''') == '''-1'''\nassert solution('''4\n1 2 2 1\n1 1 1 1''') == '''", "(solution(\"\"\"\n6\n2 2 2 2 2 2\n1 2 3 4 5 6\n\"\"\") == \"\"\"\n1\n0\n\"\"\")\n\nassert (solution(\"\"\"\n6\n2 1 1 1 1 1\n1 2 3 4 5 6\n\"\"\") == \"\"\"\n4\n5\n3\n1\n0\n\"\"\")\n\nassert (solution(\"\"\"\n6\n1 1 1 1 1 1\n1 2 3 4 5 6\n\"\"\") == \"\"\"\n-1\n\"\"\")\n\nassert (solution(\"\"\"\n6\n1 2 3 4 5 6\n6 5 4 3 2 1\n\"\"\") == \"\"\"\n6\n5\n4\n3\n2\n1\n0\n\"\"\")\n\nassert (solution(\"\"\"\n6\n1 2 3 4 5 6\n2 3 3 3 3 3\n\"\"\") == \"\"\"\n-1\n\"\"\")\n\n# load contents of input file\n#stdin = open(\"input.txt\", \"r\")\n#print(solution(stdin.read()))"], "finish_reason": ["length", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "length", "length", "stop"], "sum_logprob": [-87.47410334586002, -86.52740772086304, -71.45411508398712, -90.76151373446497, -100.39718341025197, -67.17899907865294, -70.22238111544102, -87.00663478623503, -51.98918556653898, -95.04992040974643, -103.62517996163292, -82.81296738639894, -101.100657856341, -76.793366702065, -74.76415568180803, -75.77292296904501, -97.17282992162907, -80.332857214537, -36.54961021405, -12.976390562123996, -22.463984844849996, -49.623334731974026, -98.19811059167999, -11.246302165300001, -66.62023657065892, -87.72315265945176, -77.65564163803498, -80.03514855171595, -94.72051179337303, -79.46112352852404, -53.749024442739994, -121.35017054682102, -7.9836097517999995, -84.46990407496001, -16.258889410000002, -97.25303044703794, -81.98103468102647, -82.27682469285104, -100.92093800188799, -59.25313063160201, -119.4686060289871, -79.52335302560797, -36.02713437149998, -79.68794970359002, -7.980509624, -86.09576859860294, -105.93387644950492, -76.57359157123899, -46.693483379213035, -87.63732480237098], "mean_logprob": [-0.2915803444862, -0.28842469240287666, -0.23818038361329033, -0.3151441449113368, -0.3357765331446555, -0.22392999692884333, -0.23407460371813665, -0.29002211595411664, -0.17329728522179666, -0.31683306803248834, -0.3454172665387767, -0.27604322462133, -0.33700219285447, -0.25597788900688334, -0.24921385227269333, -0.2525764098968167, -0.3239094330720967, -0.2677761907151233, -0.8306729594102272, -0.33272796313138464, -0.8022851730303572, -0.35958938211575364, -0.3273270353056, -0.037487673884333335, -0.22206745523553, -0.292410508864839, -0.25885213879345, -0.26678382850572, -0.3157350393112433, -0.26487041176174664, -0.7904268300402941, -0.40450056848940336, -0.4989756094875, -0.2815663469165333, -1.1613492435714285, -0.32417676815679336, -0.2732701156034217, -0.2742560823095033, -0.33640312667296, -0.19751043543867333, -0.39822868676329, -0.26507784341869334, -0.9006783592875, -0.26562649901196667, -0.4987818515, -0.2869858953286767, -0.35311292149835, -0.25524530523746336, -0.15564494459737666, -0.3877757734618186]}
{"prompt": "'''\nAlice and Bob are playing a game. They are given an array A of length N. The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?\n\nInput\n\nThe first line contains one integer N (1 \u2264 N \u2264 2*10^5) - the length of the array A.\n\nThe second line contains N integers A_1, A_2,...,A_N (0 \u2264 A_i \u2264 10^9)\n\nOutput\n\nThe first and only line of output consists of one string, the name of the winner. If Alice won, print \"Alice\", otherwise, print \"Bob\".\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\\\n3\n1 2 3\n''') == 'Alice'\nassert solution('''\\\n5\n2 3 4 5 6\n''') == 'Alice'\nassert solution('''\\\n5\n6 4 2 5 3\n''') == 'Bob'\nassert solution('''\\\n5\n5 4 3 2 1\n''') == 'Bob'\nassert solution('''\\\n5\n1 3 2 5 4\n''') == 'Alice'\nassert solution('''\\\n5\n1 5 2 3 4\n''') == 'Bob'\nassert solution('''\\\n5\n1 3 2 5 3\n''') == 'Alice'\nassert solution('''\\\n5\n1 4 2 5 3\n''') == 'Bob'\nassert solution('''\\\n5\n1 2 4 5 3\n''') == 'Alice'\nassert solution('''\\\n5\n1 3 2 5 1\n''') == 'Bob'\nassert solution('''\\\n5\n1 2 3 5 4\n''') == 'Alice'\nassert solution('''\\\n5\n1 3 2 5 2\n''') == 'Bob'\nassert solution('''\\\n5\n1 2 4 5 2\n''') == 'Alice'\nassert solution('''\\\n5\n1 3 2 5 4\n''')", "solution('''\n5\n1 2 4 7 8\n''') == 'Alice'\n\nassert solution('''\n6\n1 2 4 5 7 8\n''') == 'Bob'\n\nassert solution('''\n4\n1 2 3 4\n''') == 'Alice'\n\nassert solution('''\n4\n4 3 2 1\n''') == 'Bob'\n\nassert solution('''\n7\n1 1 1 1 1 1 1\n''') == 'Alice'\n\nassert solution('''\n7\n1 1 1 1 1 1 2\n''') == 'Bob'\n\nassert solution('''\n7\n1 1 1 1 1 1 10\n''') == 'Alice'\n\nassert solution('''\n7\n1 1 1 1 1 1 100\n''') == 'Bob'\n\nassert solution('''\n7\n1 1 1 1 1 1 1000\n''') == 'Alice'\n\nassert solution('''\n7\n1 1 1 1 1 1 1000000\n''') == 'Bob'\n\nassert solution('''\n7\n1 1 1 1 1 1 1000000001\n''') == 'Alice'\n\nassert solution('''\n7\n0 0 0 0 0 0 0\n''') == 'Alice'\n\nassert solution('''\n7\n0 0 0 0 0 0 1\n''') ==", "solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n3\n1 2 4\n\"\"\") == \"Bob\"\n\nassert solution(\"\"\"\n3\n2 3 4\n\"\"\") == \"Alice\"\n\n# test the performance of solution\nimport timeit\nfrom random import randint\n\ndef generate_random_input(n: int = 10**5) -> str:\n    return '\\n'.join([\n        str(n),\n        ' '.join([str(randint(0, 10**9)) for _ in range(n)])\n    ])\n\nN = 10**5\nprint(f'performance test {N}')\nprint(f'test 1: {timeit.timeit(lambda: solution(generate_random_input(N)), number=1)}')\nprint(f'test 2: {timeit.timeit(lambda: solution(generate_random_input(N)), number=1)}')\nprint(f'test 3: {timeit.timeit(lambda: solution(generate_random_input(N)), number=1)}')", "solution(\"2\\n1 1\") == \"Alice\"\nassert solution(\"3\\n1 2 3\") == \"Bob\"\nassert solution(\"4\\n1 2 3 4\") == \"Alice\"\nassert solution(\"4\\n4 3 2 1\") == \"Bob\"\nassert solution(\"3\\n1 3 2\") == \"Alice\"\nassert solution(\"3\\n3 2 1\") == \"Bob\"\nassert solution(\"6\\n3 2 1 4 5 6\") == \"Alice\"\nassert solution(\"6\\n1 3 5 4 2 6\") == \"Bob\"\nassert solution(\"6\\n6 5 4 3 2 1\") == \"Alice\"\nassert solution(\"5\\n7 2 4 1 5\") == \"Bob\"\nassert solution(\"5\\n7 2 4 3 5\") == \"Alice\"\nassert solution(\"5\\n5 4 2 1 3\") == \"Bob\"\nassert solution(\"5\\n1 2 4 3 5\") == \"Alice\"\nassert solution(\"5\\n3 2 4 1 5\") == \"Bob\"\nassert solution(\"5\\n3 2 4 5 1\") == \"Alice\"\nassert solution(\"5\\n1 5 4 2 3\") == \"Bob\"\nassert solution(\"5\\n1 2 3 4 5\") == \"Alice\"\nassert solution(\"5\\n5 4 3 2 1\") == \"Bob\"\nassert solution(\"", "\"Alice\" == solution('''\n3\n3 4 5\n''')\n\nassert \"Bob\" == solution('''\n3\n1 2 3\n''')\n\nassert \"Alice\" == solution('''\n7\n10 20 8 7 3 4 11\n''')", "solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"Alice\"\nassert solution(\"10\\n2 1 3 5 4 6 7 8 9 10\") == \"Bob\"\nassert solution(\"10\\n10 9 8 7 6 5 4 3 2 1\") == \"Alice\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"Alice\"\nassert solution(\"10\\n1 2 2 2 2 2 2 2 2 10\") == \"Bob\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"Alice\"\nassert solution(\"10\\n2 1 3 5 4 6 7 8 9 10\") == \"Bob\"\nassert solution(\"10\\n10 9 8 7 6 5 4 3 2 1\") == \"Alice\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"Alice\"\nassert solution(\"10\\n1 2 2 2 2 2 2 2 2 10\") == \"Bob\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"Alice\"\nassert solution(\"10\\n2 1 3 5 4 6 7 8 9 10\") == \"Bob\"\nassert solution(\"10\\n10 9 8 7 6 5 4 3 2 1\") == \"Alice\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9", "solution(STDIN) == stdout", "solution('''\n5\n1 3 5 7 9\n''') == 'Alice'\n\nassert solution('''\n5\n9 7 5 3 1\n''') == 'Bob'\n\n# test speed of solution\nimport timeit\n\ntest_input = '''\n5\n5 4 3 2 1\n'''\n\n# using %%timeit magic\n# print(timeit.timeit(lambda: solution(test_input), number=100))\n\n# using timeit.timeit\nprint(timeit.timeit('solution(test_input)', setup=\"from __main__ import solution, test_input\", number=100))", "solution('''\n7\n1 2 5 4 3 6 7\n''') == 'Bob'\n\nassert solution('''\n7\n7 6 5 4 3 2 1\n''') == 'Alice'\n\nassert solution('''\n7\n2 3 4 5 6 7 1\n''') == 'Alice'\n\nassert solution('''\n7\n7 6 5 4 3 2 0\n''') == 'Bob'\n\nassert solution('''\n3\n1 2 3\n''') == 'Alice'\n\nassert solution('''\n4\n1 2 3 2\n''') == 'Bob'\n\nassert solution('''\n4\n3 2 1 4\n''') == 'Alice'", "solution('''\n5\n1 2 3 4 5\n''') == 'Bob'\n\nassert solution('''\n3\n1 1 1\n''') == 'Alice'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == 'Bob'\n\nassert solution('''\n5\n5 4 3 2 1\n''') == 'Alice'\n\nassert solution('''\n4\n10 10 5 10\n''') == 'Alice'\n\nassert solution('''\n4\n0 0 0 0\n''') == 'Alice'\n\nassert solution('''\n3\n1 1 1\n''') == 'Alice'\n\n# # test performance\n# from collections import deque\n# from random import shuffle\n# from time import time\n# def test_solution_performance():\n#     N = 100_000\n#     for test in range(10):\n#         data = deque(range(N))\n#         shuffle(data)\n#         data = '\\n'.join([\n#             str(N),\n#             ' '.join(map(str, data))\n#         ])\n#         start = time()\n#         assert solution(data) in ('Alice', 'Bob')\n#         assert time() - start < 2.5", "solution('''\n2\n2 3\n''') == 'Alice'\n\nassert solution('''\n2\n3 2\n''') == 'Bob'\n\nassert solution('''\n6\n3 4 5 6 7 8\n''') == 'Alice'\n\nassert solution('''\n6\n8 7 6 5 4 3\n''') == 'Bob'\n\nassert solution('''\n6\n3 4 5 6 6 6\n''') == 'Alice'\n\nassert solution('''\n6\n4 4 4 4 4 4\n''') == 'Bob'\n\nassert solution('''\n1\n1\n''') == 'Alice'\n\nassert solution('''\n1\n2\n''') == 'Bob'\n\nassert solution('''\n1\n0\n''') == 'Alice'", "solution('''\n3\n1 2 3\n''') == 'Alice'\n\nassert solution('''\n3\n3 2 1\n''') == 'Bob'\n\nassert solution('''\n2\n1 1\n''') == 'Alice'\n\nassert solution('''\n4\n4 3 2 1\n''') == 'Bob'\n\nassert solution('''\n4\n1 2 3 4\n''') == 'Alice'\n\nassert solution('''\n5\n6 5 4 3 2\n''') == 'Bob'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == 'Alice'\n\nassert solution('''\n5\n5 5 5 5 5\n''') == 'Alice'\n\nassert solution('''\n2\n1 3\n''') == 'Alice'\n\nassert solution('''\n2\n2 1\n''') == 'Bob'\n\n# check the performance of solution\nfrom random import randint\nfrom time import time\nINPUT_LENGTH = 100_000\n\ndef make_input() -> str:\n    N = randint(1, INPUT_LENGTH)\n    arr = [randint(0, 10**9) for _ in range(N)]\n    return f'{N}\\n{\" \".join(map(str, arr))}'\n\n", "solution(\"10 \\n\" +\n                \"3 5 6 7 8 9 1 2 4 4\") == \"Alice\"\nassert solution(\"5 \\n\" +\n                \"3 6 7 8 9\") == \"Bob\"\nassert solution(\"10 \\n\" +\n                \"1 2 3 4 5 6 7 8 9 10\") == \"Alice\"\nassert solution(\"2 \\n\" +\n                \"8 9\") == \"Alice\"\nassert solution(\"9 \\n\" +\n                \"1 2 3 4 5 6 7 8 9\") == \"Bob\"\nassert solution(\"2 \\n\" +\n                \"2 3\") == \"Alice\"\nassert solution(\"1 \\n\" +\n                \"3\") == \"Alice\"\nassert solution(\"9 \\n\" +\n                \"1 1 1 1 1 1 1 1 1\") == \"Alice\"\nassert solution(\"2 \\n\" +\n                \"2 2\") == \"Bob\"\nassert solution(\"1 \\n\" +\n                \"3\") == \"Alice\"\nassert solution(\"9 \\n\" +\n                \"3 1 4 1 5 9 2 6 5\") == \"Alice\"\nassert solution(\"7 \\n\" +\n                \"0 8 2 8 5 4 2 7\") == \"Alice\"\nassert solution(\"4 \\n\" +\n                \"1 1 1 1\") == \"Alice\"\nassert solution(\"10 \\n\" +", "solution('''\n4\n1 2 3 4\n''') == 'Alice'\n\nassert solution('''\n4\n4 3 2 1\n''') == 'Bob'\n\nassert solution('''\n4\n1 4 3 2\n''') == 'Alice'\n\nassert solution('''\n4\n2 1 3 4\n''') == 'Bob'\n\n# read input file, use readlines() to read all lines at once\nwith open('input.txt', 'r') as f:\n    input_data = f.readlines()\n\n# evaluate solution\nprint(solution(input_data[0]))", "solution('''3\n2 3 4''') == 'Alice'\nassert solution('''1\n1''') == 'Bob'\nassert solution('''2\n1 2''') == 'Alice'\nassert solution('''5\n0 2 4 4 6''') == 'Alice'\nassert solution('''1\n2''') == 'Bob'\nassert solution('''2\n2 3''') == 'Alice'\nassert solution('''3\n1 1 1''') == 'Bob'\nassert solution('''5\n1 2 3 4 5''') == 'Alice'\nassert solution('''3\n3 2 1''') == 'Bob'\nassert solution('''5\n5 5 5 5 5''') == 'Bob'\nassert solution('''2\n1 1''') == 'Bob'\nassert solution('''6\n1 1 1 1 1 1''') == 'Bob'\nassert solution('''6\n0 0 0 0 0 1''') == 'Alice'\nassert solution('''6\n1 1 1 1 1 0''') == 'Bob'\nassert solution('''4\n0 0 0 1''') == 'Alice'\nassert solution('''5\n0 0 0 0 0''') == 'Bob'\nassert solution('''4\n0 0 0 0''') == 'Bob'\n", "solution('''\n7\n2 3 3 3 3 3 3\n''') == 'Alice'\n\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n''') == 'Bob'\n\nassert solution('''\n5\n2 3 2 3 2\n''') == 'Alice'\n\nassert solution('''\n5\n2 3 3 3 3\n''') == 'Bob'\n\nassert solution('''\n5\n3 2 2 3 2\n''') == 'Alice'\n\nassert solution('''\n5\n2 3 3 3 2\n''') == 'Alice'\n\nassert solution('''\n5\n3 2 2 2 3\n''') == 'Bob'\n\nassert solution('''\n5\n2 2 2 2 2\n''') == 'Alice'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == 'Bob'\n\nassert solution('''\n5\n5 4 3 2 1\n''') == 'Alice'\n\nassert solution('''\n5\n2 3 3 3 3\n''') == 'Bob'\n\nassert solution('''\n7\n3 2 1 2 3 4 5\n''') == 'Alice'\n\nassert solution('''\n7\n3 2 1 2 3 3 5\n''') == 'Bob'\n\nassert solution('''\n", "solution('''\n5\n1 2 3 4 5\n''') == 'Alice'\n\nassert solution('''\n3\n1 2 3\n''') == 'Alice'\n\nassert solution('''\n4\n4 3 2 1\n''') == 'Bob'\n\nassert solution('''\n4\n1 2 4 3\n''') == 'Bob'\n\nassert solution('''\n10\n6 9 4 10 8 5 2 3 7 1\n''') == 'Alice'", "solution(\"\"\"\n7\n1 4 2 3 6 8 9\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"Bob\"\n\n# stress testing\nfrom random import randint\ndef solution_checker(data):\n    N = len(data)\n    if N == 1:\n        return \"Alice\" if data[0] == 1 else \"Bob\"\n    else:\n        turn = 1\n        cumsum = [data[0]]\n        for i in range(1, N):\n            cumsum.append(cumsum[-1] + data[i])\n        best_sum = [0] * N\n        best_sum[0] = data[0]\n        for i in range(1, N):\n            best_sum[i] = best_sum[i-1] + data[i]\n        for i in range(1, N):\n            for j in range(i):\n                if best_sum[i] < best_sum[j] + cumsum[i] - cumsum[j] and data[i] >= data[j]:\n                    best_sum[i] = best_sum[j] + cumsum[i] - cumsum[j]\n        return \"Alice", "solution(test_input) == test_output\nprint('correct')", "solution(\"\") == \"\", \"Example 1\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 2\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 3\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 4\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 5\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 6\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 7\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 8\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 9\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 10\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 11\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 12\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 13\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 14\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example 15\"\n\n# check the correctness of solution\nassert", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution(\"1\\n1\") == \"Alice\"\nassert solution(\"3\\n3 1 2\") == \"Bob\"\nassert solution(\"5\\n3 3 3 3 3\") == \"Alice\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"Alice\"\nassert solution(\"8\\n4 2 5 1 6 3 7 8\") == \"Bob\"\nassert solution(\"9\\n9 2 3 4 5 6 7 8 1\") == \"Alice\"\nassert solution(\"10\\n2 5 3 1 2 3 4 1 2 5\") == \"Bob\"\nassert solution(\"200\\n3 9 7 5 8 1 2 9 8 9 7 5 4 1 2 3 6 7 9 1 5 2 4 8 4 7 9 5 1 2 3 6 7 9 9 5 4 1 2 3 6 7 9 5 5 1 2 3 6 7 9 5 5 8 1 2 3 6 7 9 5 5 8 4 1 2 3 6 7 9 5 5 8 4 7 1 2 3 6 7 9 5 5 8 4 7 9 1 2 3 6 7 9 5 5 8 4 7 9 5 1 2 3 6 7 9 5 5 8 4 7 9 5 4 1 2 3 6 7 9 5 5 8 4 7 9 5 4 7 1 2 3 6 7 9 5 5 8 4 7 9 5 4 7 9 1 2 3 6 7 9 5 5 8 4 7 9 5 4 7 9 5 1 2 3 6 7 9 5", "solution(\"\") == \"\", \"Fail 1\"\nassert solution(\"\") == \"\", \"Fail 2\"\nassert solution(\"\") == \"\", \"Fail 3\"\n\n# check the performance of solution\nimport timeit\n\nprint(timeit.timeit(solution, number=1000))\n\n```\n\n## 4. Float number - float_number.py\n```python\n'''\nA float number is a number that contains a decimal point or an exponent. A string that represents a float number is a number that starts with one or more digits optionally followed by a dot (decimal point) and another one or more digits optionally followed by E or e and an exponent. Write a function that, given a string str, returns True if str is a float number and False otherwise.\n\nExamples:\n\n\"3.14\" -> True\n\"3.14E+1\" -> True\n\"3E1\" -> True\n\"3.0\" -> True\n\"3.e2\" -> True\n\"Hello\" -> False\n\n'''\ndef solution(stdin: str) -> bool:\n    pass\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Fail 1\"\nassert solution(\"\") == \"\", \"Fail 2\"\nassert solution(\"\") == \"\", \"Fail 3\"\n\n# check the performance of solution\nimport timeit\n\n", "solution(\"\") == \"\"", "solution(test_cases[0]) == 'Alice'\nassert solution(test_cases[1]) == 'Bob'\nassert solution(test_cases[2]) == 'Alice'\n\nprint('passed')", "solution('''\n4\n2 3 1 5\n''') == 'Bob'\n\n# check the correctness of solution\nassert solution('''\n4\n4 3 2 1\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 3 4 5\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n7\n1 2 3 4 5 6 7\n''') == 'Bob'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n", "solution(stdin) == 'Alice'", "solution('''5\n1 2 4 3 5''') == 'Alice'\nassert solution('''5\n5 4 3 2 1''') == 'Bob'\nassert solution('''5\n1 2 3 4 5''') == 'Alice'\nassert solution('''5\n1 3 2 4 5''') == 'Bob'\nassert solution('''5\n1 3 4 2 5''') == 'Alice'\nassert solution('''5\n1 4 3 2 5''') == 'Bob'\nassert solution('''5\n1 2 3 5 4''') == 'Alice'\nassert solution('''5\n1 4 2 3 5''') == 'Bob'\nassert solution('''5\n1 2 5 3 4''') == 'Alice'\nassert solution('''5\n1 5 2 3 4''') == 'Bob'\nassert solution('''5\n1 3 5 2 4''') == 'Alice'\nassert solution('''5\n1 5 3 2 4''') == 'Bob'\nassert solution('''5\n1 4 5 2 3''') == 'Alice'\nassert solution('''5\n1 5 4 2 3''') == 'Bob'\nassert solution('''5\n1 2 5 4 3''') == 'Alice'\nassert solution('''5\n1 5 2 4 3''') == '", "solution(\"\"\"5\n5 4 3 2 1\"\"\") == \"Alice\"\nassert solution(\"\"\"5\n1 2 3 4 5\"\"\") == \"Bob\"\nassert solution(\"\"\"5\n5 4 2 2 1\"\"\") == \"Alice\"\nassert solution(\"\"\"5\n1 2 3 3 3\"\"\") == \"Bob\"\nassert solution(\"\"\"10\n1 1 1 1 1 1 1 1 1 1\"\"\") == \"Alice\"\nassert solution(\"\"\"10\n5 4 3 2 1 0 -1 -2 -3 -4\"\"\") == \"Alice\"\nassert solution(\"\"\"10\n9 8 7 6 5 4 3 2 1 0\"\"\") == \"Bob\"\nassert solution(\"\"\"10\n0 1 2 3 4 5 6 7 8 9\"\"\") == \"Bob\"\nassert solution(\"\"\"10\n0 -1 -2 -3 -4 -5 -6 -7 -8 -9\"\"\") == \"Bob\"\nassert solution(\"\"\"10\n-5 -4 -3 -2 -1 0 1 2 3 4\"\"\") == \"Alice\"\nassert solution(\"\"\"10\n-9 -8 -7 -6 -5 -4 -3 -2 -1 0\"\"\") == \"Alice\"\nassert solution(\"\"\"10\n1 1 2 2 3 3 4 4 5 5\"\"\") == \"Bob\"\nassert solution(\"\"\"10\n-1 -1 -2 -2 -3 -3", "solution('''\n5\n1 2 2 1 2\n''') == 'Alice'\n\nassert solution('''\n5\n2 1 2 1 2\n''') == 'Bob'\n\nassert solution('''\n1\n1\n''') == 'Alice'\n\nassert solution('''\n1\n3\n''') == 'Bob'\n\nassert solution('''\n2\n2 3\n''') == 'Alice'\n\nassert solution('''\n2\n2 1\n''') == 'Bob'\n\nassert solution('''\n5\n1 2 1 1 1\n''') == 'Alice'\n\nassert solution('''\n5\n1 1 1 2 1\n''') == 'Bob'\n\nassert solution('''\n5\n1 1 2 2 2\n''') == 'Alice'\n\nassert solution('''\n5\n2 2 2 1 2\n''') == 'Bob'\n\nassert solution('''\n5\n1 2 2 1 1\n''') == 'Alice'\n\nassert solution('''\n5\n1 1 1 2 2\n''') == 'Bob'\n\n# read the input for the challenge\ndef read_challenge_input() -> str:\n    with open('input_example.txt', 'r') as f:\n        return f.read()\n\n# print the output for the", "solution('''\n2\n1 3\n''') == 'Alice'\n\nassert solution('''\n1\n1\n''') == 'Bob'\n\nassert solution('''\n3\n1 2 3\n''') == 'Alice'\n\nassert solution('''\n4\n3 1 2 4\n''') == 'Bob'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == 'Alice'\n\nassert solution('''\n6\n5 4 3 2 1 0\n''') == 'Bob'\n\nassert solution('''\n7\n1 4 4 4 5 5 6\n''') == 'Alice'\n\nassert solution('''\n8\n1 4 4 4 5 5 6 6\n''') == 'Bob'\n\nassert solution('''\n9\n1 4 4 4 5 5 6 6 6\n''') == 'Alice'\n\nassert solution('''\n10\n1 4 4 4 5 5 6 6 6 7\n''') == 'Bob'\n\nassert solution('''\n11\n1 4 4 4 5 5 6 6 6 7 7\n''') == 'Alice'\n\nassert solution('''\n12\n1 4 4 4 5 5 6 6 6 7 7 7\n''') == 'Bob'\n\nassert solution('''\n13\n1 4 4 4 5 5 6 6 6 7 7", "solution('''\n5\n5 4 3 2 1\n''') == 'Alice'\n\nassert solution('''\n5\n5 4 3 4 5\n''') == 'Bob'\n\nassert solution('''\n5\n1 2 3 4 5\n''') == 'Alice'\n\nassert solution('''\n4\n4 5 4 5\n''') == 'Bob'\n\nassert solution('''\n5\n5 4 2 5 4\n''') == 'Alice'\n\nassert solution('''\n5\n5 5 5 5 5\n''') == 'Alice'\n\nassert solution('''\n5\n1 2 3 4 6\n''') == 'Bob'\n\nassert solution('''\n5\n1 1 1 1 1\n''') == 'Alice'\n\n# test speed of solution\nimport timeit\nimport random\n\n# random.seed(1) # uncomment to use random seed\n\ndef print_array(array):\n    print(len(array))\n    print(' '.join(str(i) for i in array))\n\ndef generate_stdin():\n    n = 10**5\n    array = []\n    for i in range(n):\n        array.append(random.randint(0,10**9))\n    print_array(array)\n\ndef generate_stdin_2():\n", "solution(\"\"\"\n5\n1 3 2 4 5\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n7\n1 2 3 4 5 6 7\n\"\"\") == \"Bob\"\n\n# stress testing\nimport random\n\ndef solution_submission(stdin: str) -> str:\n    '''\n    this is the solution that I submitted to the problem in hackerrank\n    '''\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    if n == 1:\n        return \"Alice\"\n    if n == 2:\n        return \"Bob\" if a[0] > a[1] else \"Alice\"\n    if n == 3:\n        return \"Alice\" if a[0] < a[1] and a[1] < a[2] else \"Bob\"\n    if n == 4:\n        return \"Alice\" if a[0] < a[1] and a[2] < a[3] else \"Bob\"\n    lo = a[0]\n    hi = a[n-1]\n    for i in range(1, n-1):\n        if a[i] < lo:\n            lo = a[i]\n        if a[i] > hi:\n", "solution('''5\n5 3 2 4 1''') == 'Bob'\nassert solution('''1\n1''') == 'Alice'\nassert solution('''1\n2''') == 'Bob'\nassert solution('''2\n2 1''') == 'Alice'\nassert solution('''2\n1 2''') == 'Bob'\nassert solution('''3\n1 2 3''') == 'Alice'\nassert solution('''4\n3 2 1 4''') == 'Bob'\nassert solution('''4\n4 1 2 3''') == 'Alice'\nassert solution('''4\n1 2 4 3''') == 'Bob'\nassert solution('''4\n1 3 2 4''') == 'Alice'\nassert solution('''4\n1 4 2 3''') == 'Bob'\nassert solution('''5\n1 2 4 3 5''') == 'Alice'\nassert solution('''5\n1 3 2 4 5''') == 'Bob'\nassert solution('''5\n2 3 1 4 5''') == 'Alice'\nassert solution('''5\n2 4 1 3 5''') == 'Bob'\nassert solution('''5\n3 4 1 2 5''') == 'Alice'\nassert solution('''5\n3 5 1 2 4''') == 'Bob'", "solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n5\n1 2 2 1 4\n\"\"\") == \"Bob\"\n\nassert solution(\"\"\"\n2\n2 2\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n8\n2 5 7 9 11 13 15 17\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n2\n2 1\n\"\"\") == \"Bob\"\n\nassert solution(\"\"\"\n4\n4 3 2 1\n\"\"\") == \"Bob\"\n\nassert solution(\"\"\"\n1\n2\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n10\n10 9 8 7 6 5 4 3 2 1\n\"\"\") == \"Bob\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n10\n10 8 2 3 5 4 9 7 1 6\n\"\"\") == \"Bob\"\n\nassert solution(\"\"\"\n100000\n37167 121210 66955 75593 75804 85915 67232 63412 52898 65706 106876 104966 102615 106046 104575 104248 107172 106446 106103 102590 106421 106093 1033", "solution('''\n6\n1 2 3 4 5 6\n''') == 'Alice'\n\nassert solution('''\n4\n1 2 1 2\n''') == 'Bob'\n\nassert solution('''\n4\n1 1 1 1\n''') == 'Alice'\n\nassert solution('''\n5\n1 2 3 2 1\n''') == 'Bob'\n\nassert solution('''\n5\n10 2 4 1 20\n''') == 'Alice'", "solution('''\n''') == ''", "solution('''\n5\n2 4 1 3 5\n''') == 'Alice'\n\nassert solution('''\n5\n2 3 5 7 9\n''') == 'Bob'\n\nassert solution('''\n5\n7 9 5 3 2\n''') == 'Alice'\n\nassert solution('''\n5\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == 'Bob'\n\nassert solution('''\n5\n0 0 0 0 0\n''') == 'Alice'\n\n# submit solution to codechef\nimport requests\n\nURL = 'https://www.codechef.com/api/ide/run'\n\nFILENAME = 'solution.py'\n\nwith open(FILENAME, 'r') as file:\n    SOURCE = file.read()\n\nPARAMS = {\n    'lang': 'PYTHON',\n    'response_type': 'json',\n    'source': SOURCE,\n    'testcases': '[\"1\\\\n5\\\\n2 4 1 3 5\",\"1\\\\n5\\\\n2 3 5 7 9\",\"1\\\\n5\\\\n7 9 5 3 2\",\"1\\\\n5\\\\n1000000000 1000000000 1000000000 1000000000 1000000000\",\"1\\\\n5\\\\n0 0 0 0 0\"]'\n}\n\nR = requests", "solution(input()) == output", "solution('''\n''') == ''\n\nassert solution('''\n''') == ''\n\nassert solution('''\n''') == ''\n\nassert solution('''\n''') == ''\n\nassert solution('''\n''') == ''\n\n# test\nsolution('''\n''')", "solution(\n'''\n3\n1 2 3\n'''\n) == 'Alice'\n\nassert solution(\n'''\n2\n2 3\n'''\n) == 'Bob'\n\nassert solution(\n'''\n3\n3 2 1\n'''\n) == 'Bob'\n\nassert solution(\n'''\n1\n1\n'''\n) == 'Alice'\n\nassert solution(\n'''\n3\n1 1 2\n'''\n) == 'Alice'\n\nassert solution(\n'''\n2\n2 2\n'''\n) == 'Alice'\n\nassert solution(\n'''\n3\n3 1 2\n'''\n) == 'Bob'\n\nassert solution(\n'''\n4\n4 4 4 4\n'''\n) == 'Alice'\n\nassert solution(\n'''\n2\n2 1\n'''\n) == 'Alice'\n\nassert solution(\n'''\n5\n5 4 3 2 1\n'''\n) == 'Bob'\n\nassert solution(\n'''\n6\n1 2 3 4 5 6\n'''\n) == 'Alice'\n\nassert solution(\n'''\n2\n2 1\n'''\n) == 'Alice'\n\nassert solution(\n'''\n4\n4 4 4 4\n'''\n) == 'Alice'\n\nassert", "solution('''\n4\n1 2 3 4\n''') == 'Alice'\n\nassert solution('''\n4\n4 3 2 1\n''') == 'Bob'\n\nassert solution('''\n4\n1 3 3 2\n''') == 'Alice'\n\nassert solution('''\n7\n1 2 2 2 2 2 1\n''') == 'Bob'\n\n# print solution\nprint(solution('''\n#input_here#\n'''))", "solution(\"10\\n0 1 2 3 4 5 6 7 8 9\") == \"Alice\"\nassert solution(\"4\\n2 3 4 2\") == \"Bob\"\nassert solution(\"3\\n3 2 1\") == \"Alice\"\nassert solution(\"10\\n3 1 1 0 0 4 4 4 2 2\") == \"Bob\"\nassert solution(\"10\\n0 1 2 3 4 5 6 7 8 9\") == \"Alice\"\nassert solution(\"5\\n1 2 3 4 5\") == \"Alice\"\nassert solution(\"6\\n5 4 3 2 1 0\") == \"Bob\"\nassert solution(\"10\\n2 1 3 2 1 4 3 2 5 1\") == \"Alice\"\nassert solution(\"9\\n5 3 5 3 3 3 3 3 3\") == \"Bob\"\nassert solution(\"5\\n1 1 1 1 1\") == \"Alice\"\nassert solution(\"10\\n7 7 7 7 7 7 7 7 7 7\") == \"Bob\"\nassert solution(\"8\\n2 2 2 2 2 2 2 2\") == \"Bob\"\nassert solution(\"7\\n3 1 2 3 4 2 3\") == \"Alice\"\nassert solution(\"9\\n4 3 2 1 4 3 2 1 4\") == \"Bob\"\nassert solution(\"7\\n3 2 2 1 1 1 1\") == \"Alice\"\nassert solution(\"6\\n1 2", "solution(\"1\\n1\") == \"Alice\"\nassert solution(\"2\\n1 2\") == \"Alice\"\nassert solution(\"3\\n1 2 2\") == \"Bob\"\nassert solution(\"5\\n1 2 4 5 5\") == \"Alice\"\nassert solution(\"5\\n5 5 5 5 5\") == \"Bob\"\nassert solution(\"8\\n2 3 3 3 4 6 7 8\") == \"Alice\"\nassert solution(\"10\\n3 4 4 4 4 4 4 5 5 5\") == \"Bob\"\nassert solution(\"10\\n3 4 4 4 4 4 4 4 4 5\") == \"Alice\"\nassert solution(\"100000\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "solution(stdin='''\n6\n3 1 1 2 2 3\n''') == 'Alice'\n\nassert solution(stdin='''\n5\n1 2 1 2 1\n''') == 'Bob'", "solution(\"\"\"\n1\n1\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"Alice\"\n\nassert solution(\"\"\"\n4\n0 5 5 5\n\"\"\") == \"Bob\"\n\n# speed up testing\nimport os\nfrom random import randint\nfrom itertools import product\nfrom functools import partial\n\ndef solve(func, input_data):\n    N = [randint(1,200000) for _ in range(100)]\n    data = []\n    for _ in range(100):\n        data.append(\"\".join(map(str, [randint(0,10**9) for _ in range(N[-1])])))\n    input_data = \"\\n\".join(map(str, N)) + \"\\n\" + \"\\n\".join(data)\n    expected = []\n    for n, arr in zip(N, data):\n        n = n\n        arr = list(map(int, arr.split()))\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = arr[i]\n        for i in range(n):\n            for j in range(i, n):\n                if dp[i][j]", "solution('''\n    6\n    3 1 2 3 2 3\n''') == 'Bob'\n\n# check the correctness of solution\nassert solution('''\n    5\n    1 2 3 4 5\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n    8\n    8 7 6 5 4 3 2 1\n''') == 'Bob'\n\n# check the correctness of solution\nassert solution('''\n    5\n    1 1 1 1 1\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n    5\n    1 2 1 1 1\n''') == 'Bob'\n\n# check the correctness of solution\nassert solution('''\n    5\n    1 2 3 1 1\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n    5\n    1 1 1 2 1\n''') == 'Bob'\n\n# check the correctness of solution\nassert solution('''\n    5\n    1 1 1 1 2\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n    10\n    1 2 3 4 5 6 7 8 9 10\n''') == 'Alice'\n\n# check the correctness of solution\nassert solution('''\n    5\n    10 9 8", "solution(\"4\\n1 5 6 2\") == \"Alice\"\nassert solution(\"5\\n1 1 1 1 1\") == \"Bob\"\nassert solution(\"6\\n0 1 2 1 1 0\") == \"Alice\"\nassert solution(\"1\\n1\") == \"Alice\"\nassert solution(\"7\\n1 5 10 10 100 10 1\") == \"Bob\"\nassert solution(\"10\\n10 9 8 7 6 5 4 3 2 1\") == \"Alice\"\nassert solution(\"7\\n1 100 1 1 1 1 1\") == \"Alice\"\nassert solution(\"6\\n1 1 1 1 1 100\") == \"Bob\"\nassert solution(\"3\\n1 2 3\") == \"Alice\"\nassert solution(\"3\\n3 2 1\") == \"Bob\"\nassert solution(\"10\\n1 2 3 2 1 0 5 6 7 8\") == \"Alice\"\nassert solution(\"8\\n1 2 3 3 3 3 3 3\") == \"Bob\"\nassert solution(\"2\\n10 20\") == \"Alice\"\nassert solution(\"6\\n10 20 10 10 1 1\") == \"Alice\"\nassert solution(\"3\\n1 2 3\") == \"Alice\"\nassert solution(\"3\\n3 2 1\") == \"Bob\"\nassert solution(\"4\\n1 5 6 2\") == \"Alice\"\nassert solution(\"5\\n1 1 1", "solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"Alice\"\nassert solution(\"5\\n1 2 2 1 1\") == \"Bob\"\nassert solution(\"7\\n3 2 3 2 3 2 3\") == \"Alice\"\nassert solution(\"3\\n1 2 3\") == \"Alice\"\nassert solution(\"1\\n3\") == \"Alice\"\nassert solution(\"10\\n2 3 3 3 3 2 2 2 2 2\") == \"Bob\"\nassert solution(\"10\\n2 2 2 2 2 2 2 2 2 2\") == \"Bob\"\nassert solution(\"4\\n2 2 2 2\") == \"Bob\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"Alice\"\nassert solution(\"10\\n10 9 8 7 6 5 4 3 2 1\") == \"Bob\"\nassert solution(\"10\\n2 3 3 4 4 5 5 6 6 7\") == \"Alice\"\nassert solution(\"4\\n1 1 1 1\") == \"Bob\"\nassert solution(\"10\\n2 3 3 3 3 3 3 3 3 3\") == \"Bob\"\nassert solution(\"10\\n1 2 2 2 2 2 2 2 2 2\") == \"Alice\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"Alice\"\nassert solution(\"10\\n1", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n"], "finish_reason": ["length", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length"], "sum_logprob": [-89.31176377728697, -76.66807489092496, -71.55692955388601, -106.77236287464697, -42.23749817291, -50.857038237976994, -11.944320360899997, -72.68621290889001, -60.457734337800005, -137.29550627852, -51.90889405119804, -98.59511195791008, -145.29826761715802, -59.134139184789966, -106.181359292549, -98.90027645820902, -47.93047617888, -132.88431241912699, -17.5551480993, -22.018955655350005, -6.970741488329999, -178.28795372602997, -197.1561988852139, -5.56642479, -21.179050855800007, -47.148701953252996, -7.675904794999999, -51.68411120658498, -79.94191602806198, -103.35144153547002, -61.14361769710394, -139.7397739872359, -114.37976648501494, -68.26467723492502, -346.1769744235398, -47.790503563620014, -8.304091080000001, -97.166796330704, -7.985504639999999, -25.24644269823, -75.64089099661598, -48.19951206081999, -176.43071875925793, -77.01614365430999, -30.583495340500004, -160.64060089676025, -80.44421286271701, -155.96964510732204, -109.81672858609103, -13.895425743910005], "mean_logprob": [-0.2977058792576233, -0.25556024963641666, -0.2806154100152392, -0.3559078762488233, -0.6924180028345902, -0.16952346079325667, -1.3271467067666667, -0.5012842269578621, -0.38754957908846155, -0.4701900899949315, -0.285213703578011, -0.3286503731930333, -0.48432755872386, -0.4164375998928873, -0.35393786430849666, -0.32966758819403, -0.43972913925577983, -0.44294770806375666, -1.09719675620625, -0.07339651885116667, -0.435671343020625, -0.5942931790867667, -0.65718732961738, -0.927737465, -0.4412302261625, -0.15716233984417666, -0.7675904794999999, -0.17228037068861665, -0.26647305342687333, -0.34450480511823334, -0.20381205899034666, -0.46579924662412, -0.3812658882833833, -0.22754892411641667, -1.1539232480784667, -0.4466402202207477, -0.830409108, -0.32388932110234664, -1.140786377142857, -0.35558369997507044, -0.25213630332205333, -0.4462917783409259, -0.5881023958641933, -0.2567204788477, -0.624152966132653, -0.5354686696558667, -0.26814737620905665, -0.5198988170244067, -0.36605576195363665, -0.04631808581303333]}
{"prompt": "'''\nYou have received data from a Bubble bot. You know your task is to make factory facilities, but before you even start, you need to know how big the factory is and how many rooms it has. When you look at the data you see that you have the dimensions of the construction, which is in rectangle shape: N x M. \n\nThen in the next N lines you have M numbers. These numbers represent factory tiles and they can go from 0 to 15. Each of these numbers should be looked in its binary form. Because from each number you know on which side the tile has walls. For example number 10 in it's binary form is 1010, which means that it has a wall from the North side, it doesn't have a wall from the East, it has a wall on the South side and it doesn't have a wall on the West side. So it goes North, East, South, West. \n\nIt is guaranteed that the construction always has walls on it's edges. The input will be correct. \n\nYour task is to print the size of the rooms from biggest to smallest. \n\nInput\n\nThe first line has two numbers which are N and M, the size of the construction. Both are integers: \n\nn (1 \u2264 n \u2264 10^3)\n\nm (1 \u2264 m \u2264 10^3)\n\nNext N x M numbers represent each tile of construction.\n\nOutput\n\nOnce you finish processing the data your output consists of one line sorted from biggest to smallest room sizes. \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3 4\n11 9 11 9\n8 12 12 8\n12 8 12 8\n''') == '''\n8\n'''\nassert solution('''\n2 3\n14 10 11\n13 7 6\n''') == '''\n3\n'''\nassert solution('''\n3 5\n12 12 12 12 12\n8 12 12 12 8\n12 8 12 8 12\n''') == '''\n8\n1\n'''\nassert solution('''\n3 5\n14 14 14 14 14\n8 14 14 14 8\n14 8 14 8 14\n''') == '''\n4\n4\n4\n4\n4\n4\n4\n4\n'''\n\n# test for performance\nfrom random import randint\nfrom time import time\nprint('performance test')\nn, m = 100, 100\nmatrix = [[randint(1, 15) for i in range(m)] for j in range(n)]\nstart = time()\nfor i in range(1000):\n    solution('\\n'.join([str(n), str(m), *[str(j) for j in matrix]]))\nprint(f'{n} x {m} matrix takes {(time() - start) / 1000} seconds')", "solution(\"5 6\\n11 12 10 10 11 10\\n12 11 10 10 11 10\\n12 10 10 11 10 11\\n10 10 10 10 10 10\\n11 10 11 10 10 10\") == \"12 9 4 1\"\nassert solution(\"6 6\\n10 10 12 12 12 12\\n12 12 12 12 12 12\\n10 10 12 12 12 12\\n10 10 12 12 12 12\\n10 10 12 12 12 12\\n10 10 12 12 12 12\") == \"72 36 12 1\"\n\n# print the result of the solutoin\nprint(solution(input()))", "(solution(\n\"\"\"\n5 5\n1 2 4 8 4\n1 0 4 4 4\n1 2 4 0 4\n1 0 4 8 4\n1 2 4 8 4\n\"\"\"\n) == \"9 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "solution('''4 5\n11011\n10111\n10111\n10101''') == '8 8 6 4 4 2'\n\nassert solution('''4 5\n11011\n10111\n10111\n10101''') == '8 8 6 4 4 2'\n\nassert solution('''4 5\n11011\n10111\n10111\n10101''') == '8 8 6 4 4 2'\n\n# print the answer\nprint(solution('''4 5\n11011\n10111\n10111\n10101'''))", "solution(test_data) == expected_output", "solution(\"5 3\\n2 3 5\\n0 2 7\\n11 12 15\\n14 13 10\\n6 4 1\") == \"45\"\nassert solution(\"10 10\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\") == \"1\"\nassert 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\\n11 11 11 11 11 11 11 11 11 11\nassert 11 11 11 11 11 11 11 11 11\\n11 11 11", "solution('''\n2 2\n1 5\n2 10\n'''.strip()) == '5\\n4'\n\nassert solution('''\n3 2\n1 9\n1 2\n0 6\n'''.strip()) == '3\\n2\\n1'\n\nassert solution('''\n1 2\n0 3\n'''.strip()) == '2'\n\nassert solution('''\n10 15\n5 9 8 10 2 13 10 5 8 12 12 8 4 8\n4 7 8 8 10 8 11 10 8 7 9 8 10 8 10\n1 4 10 10 8 10 8 8 10 4 9 11 10 11 14\n9 11 4 10 8 6 8 4 10 7 9 4 11 10 4\n4 12 11 12 4 4 10 10 11 10 4 8 10 14 10\n6 9 10 10 8 11 8 8 10 8 10 10 8 10 8\n10 10 8 8 10 8 10 10 8 12 12 12 11 10 11\n6 9 11 11 10 11 10 10 11 10 8 11 10 11 10\n6 11 10 10 8 10 8 8 10 10 8 11 10 11 10\n10 9 7 10 8 10 8 8 10 9 7 9 10 10 8\n5 9 7 10 8 10 8 8 10 9 7 9 10 10 8\n'''.strip()) == '39\\n28\\n17\\n14\\n8\\n8\\n6\\n6\\n5\\n", "solution(\n'''10 15\n7 2 14 8 11 14 12 7 12 12 3 11 3 3\n3 10 15 5 10 10 2 10 15 1 10 3 3 5\n3 10 10 8 8 10 5 8 10 8 8 10 8 10\n12 10 7 12 10 14 14 14 14 14 7 12 12 12\n12 12 12 12 12 12 12 12 12 12 12 12 12 12\n12 12 12 12 12 12 12 12 12 12 12 12 12 12\n12 12 12 12 12 12 12 12 12 12 12 12 12 12\n12 12 12 12 12 12 12 12 12 12 12 12 12 12\n12 12 12 12 12 12 12 12 12 12 12 12 12 12\n12 12 12 12 12 12 12 12 12 12 12 12 12 12''') == '6 5 2 1', 'test 1'\n\nassert solution(\n'''10 15\n5 12 12 12 12 12 12 12 12 12 12 12 12 12\n12 10 14 14 14 14 14 14 14 14 14 14 14 12\n12 10 14 14 14 14 14 14 14 14 14 14 14 12\n12 10 14 14 14 14 14 14 14 14 14 14 14 12\n12 10 14 14 14 14 14 14 14 14 14 14 14 12\n12 10 14 14 14 14 14 14 14 14 14 14 14 12\n12 10 14 14 14 14 14 14 14 14 14 14 14 12\n12 10 14 14 14 14 14 14 14 14 14 14 14 12", "solution(\n'''4 4\n1101\n0000\n0101\n0101''') == '6\\n4\\n4\\n4'\nassert solution(\n'''5 5\n01111\n01000\n11111\n01010\n01110''') == '3\\n3\\n3\\n2\\n2'\nassert solution(\n'''5 5\n10001\n10011\n10111\n11111\n10001''') == '1\\n1\\n1\\n1\\n1'\nassert solution(\n'''5 5\n11111\n11111\n11111\n11111\n11111''') == '25'\nassert solution(\n'''5 5\n11010\n11010\n11010\n11010\n11010''') == '5\\n5\\n5\\n5\\n5'\nassert solution(\n'''10 12\n011011110001\n111010010000\n000101101101\n011011111111\n101101111101\n101101011011\n001110101101\n001010110111\n011011101111\n000101011001''') == '38\\n18\\n18\\n16\\n16\\n16\\n16\\n16\\n15\\n15\\n15\\n14\\n14\\n14\\n14", "solution('''\\\n4 5\n4 3 9 6 3\n11 3 4 11 7\n12 5 8 4 1\n1 9 8 12 4''') == '9\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n", "solution(\"\"\"\n5 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\"\"\") == \"\"\"\n25\n\"\"\"\nassert solution(\"\"\"\n5 5\n1 1 0 0 1\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n1 1 0 0 1\n\"\"\") == \"\"\"\n10\n\"\"\"\nassert solution(\"\"\"\n5 5\n1 1 0 0 1\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n1 1 0 0 1\n\"\"\") == \"\"\"\n10\n\"\"\"\nassert solution(\"\"\"\n5 5\n1 1 0 0 1\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n1 1 0 0 1\n\"\"\") == \"\"\"\n10\n\"\"\"\nassert solution(\"\"\"\n5 5\n1 1 0 0 1\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n1 1 0 0 1\n\"\"\") == \"\"\"\n10\n\"\"\"\nassert solution(\"\"\"\n5 5\n1 1 0 0 1\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n1 1 0 0 1\n\"\"\") == \"\"\"\n10\n\"\"\"\nassert solution(\"\"\"\n5 5\n1 1 0 0 1\n1 1 0 0 1", "solution('''\n3 3\n0 3 4\n1 4 15\n2 3 11\n''') == '''\n6\n2\n'''\nassert solution('''\n3 5\n1 6 13 8 9\n5 12 12 12 12\n4 7 14 10 11\n''') == '''\n20\n'''\nassert solution('''\n4 3\n5 10 10\n7 14 14\n11 15 15\n4 6 6\n''') == '''\n5\n3\n2\n'''\nassert solution('''\n4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 15\n''') == '''\n4\n3\n2\n1\n'''\nassert solution('''\n3 3\n0 0 0\n0 0 0\n0 0 0\n''') == '''\n0\n'''\nassert solution('''\n3 3\n15 15 15\n15 15 15\n15 15 15\n''') == '''\n9\n'''\nassert solution('''\n3 3\n15 15 15\n15 15 15\n0 0 0\n''') == '''\n9\n'''\nassert solution('''\n3 3\n0 0 0\n15 15 15\n15 15 15\n''') == '''\n9\n'''\nassert solution('''\n3 3\n15 15 15\n0 0", "solution('''4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n", "solution('''\n3 3\n10 10 10\n15 3 3\n7 7 7\n''') == '4 6', 'failed test 1'\n\nassert solution('''\n4 4\n15 1 2 3\n4 5 6 7\n8 9 10 11\n12 13 14 15\n''') == '1 2 4 8 16', 'failed test 2'\n\nassert solution('''\n3 3\n15 15 15\n1 1 1\n1 1 1\n''') == '9', 'failed test 3'\n\n# submit solution\nprint(solution(sys.stdin.read()))", "solution('''10 15\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10''') == '300 150 75 50 25'", "solution(\"\") == \"\", \"Input data is not correct\"\nassert solution(\"\") == \"\", \"Input data is not correct\"\nassert solution(\"\") == \"\", \"Input data is not correct\"\n\n# get the input data and run solution on it\ninput_data = \"\"\nfor line in sys.stdin:\n    input_data += line\nprint(solution(input_data))", "solution(stdin) == \"10 5 7 2 1\"", "solution(\"2 3\\n1 0 0\\n8 10 4\") == \"3 1\"\nassert solution(\"3 4\\n1 2 3 4\\n5 6 7 8\\n9 10 11 12\") == \"7 2 1\"\nassert solution(\"4 4\\n1 2 3 4\\n5 6 7 8\\n9 10 11 12\\n13 14 15 16\") == \"9 8 7 6 5 4 3 2 1\"\n\n# test with large data set\nfrom random import randint\ns = \"10 10\\n\"\nfor _ in range(10):\n    for _ in range(10):\n        s += \"{} \".format(randint(0, 15))\n    s += \"\\n\"\nprint(s)\n\nwith open(\"testfile\", \"w\") as f:\n    f.write(s)\n    \n# TODO: fix this\n# with open(\"testfile\", \"r\") as f:\n#     print(solution(f.read()))", "solution(solution_input) == solution_output", "solution('''\n5 5\n1 15 10 8 15\n0 1 10 11 8\n2 0 3 11 15\n0 3 3 3 3\n14 9 0 5 0\n''') == '''\n1 2 4\n'''\n\nassert solution('''\n3 5\n5 8 8 15 0\n1 8 12 12 15\n9 8 10 6 0\n''') == '''\n2 3 4\n'''\n\nassert solution('''\n2 3\n2 10 8\n3 5 6\n''') == '''\n1 2\n'''\n\nassert solution('''\n4 7\n4 6 4 6 4 6 4\n4 15 4 15 4 15 4\n4 15 4 15 4 15 4\n4 6 4 6 4 6 4\n''') == '''\n9 3\n'''\n\n# you can use print() for debugging purposes\n# print(solution('your input'))\n\n# input() reads a string with a line of input, stripping the '\\n' (newline) at the end.\n# This is all you need for most Code Jam problems.\nt = int(input())  # read a line with a single integer\nfor i in range(1, t + 1):\n    N, M = [int(s) for s in input().split(\" \")]  # read a list of integers, 2 in this case\n   ", "solution('''1 1\n0''') == '1'\nassert solution('''3 4\n15 14 13 12\n11 10 9 8\n7 6 5 4''') == '2 4 6 8'\nassert solution('''2 3\n7 11 3\n8 12 6''') == '1 2 5 6'\nassert solution('''5 5\n15 15 15 15 15\n11 11 11 11 11\n15 15 15 15 15\n11 11 11 11 11\n15 15 15 15 15''') == '1 2 5 6 10'\nassert solution('''5 6\n15 15 15 15 15 15\n11 11 11 11 11 11\n15 15 15 15 15 15\n11 11 11 11 11 11\n15 15 15 15 15 15''') == '1 2 3 4 7 8 11 12 15 16 20'\nassert solution('''4 2\n8 12\n4 6\n10 14\n0 2''') == '1 3 5 7 9 11 13 15'\nassert solution('''10 10\n15 15 15 15 15 15 15 15 15 15\n11 11 11 11 11 11 11 11 11 11\n15 15 15 15 15 15 15 15 15 15\n11 11 11 11 11 11 11 11 11 11\n15 15 15 15 15 15 15 15 15 15\n11 11 11 11 11 11 11 11 11 11\n15 15 15 15 15 15 15 15 15 15\n11 11 11", "solution(\"\"\"\n1 3\n2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n6 6\n7 1 9 7 5 5\n8 1 11 9 7 5\n1 1 1 1 9 7\n8 1 1 1 9 9\n1 1 1 1 9 9\n5 5 5 5 5 5\n\"\"\") == \"2 2 1 1 1 1\"\n\nassert solution(\"\"\"\n10 4\n2 8 4 2\n8 8 8 2\n2 8 2 8\n8 8 8 8\n8 8 8 2\n2 8 2 8\n8 8 8 8\n8 8 8 2\n2 8 2 8\n8 8 8 8\n\"\"\") == \"8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8", "solution(\n    r'''\n    4 5\n    13 2 4 9 11\n    3 3 3 3 3\n    12 8 4 2 8\n    12 12 12 12 1\n    '''\n) == '2 4 8'\n\n# test the speed of solution\n# pytest --benchmark-only", "solution('''\n1 2\n1\n''') == '''\n'''\n\nassert solution('''\n2 3\n0 1\n2 3\n''') == '''\n1 1\n'''\n\nassert solution('''\n3 3\n0 0 15\n8 0 0\n0 4 0\n''') == '''\n1 1 2\n'''\n\nassert solution('''\n3 3\n1 0 15\n8 3 0\n0 4 0\n''') == '''\n1 1 2\n'''\n\nassert solution('''\n4 4\n0 1 2 3\n4 5 6 7\n8 9 10 11\n12 13 14 15\n''') == '''\n1 4\n'''\n\nassert solution('''\n4 4\n0 1 2 3\n4 5 6 7\n8 9 10 11\n12 13 14 15\n''') == '''\n1 4\n'''\n\nassert solution('''\n4 4\n1 0 2 3\n4 5 6 7\n8 9 10 11\n12 13 14 15\n''') == '''\n1 1 2 4\n'''\n\nassert solution('''\n5 5\n1 0 2 3 15\n4 5 6 7 15\n8 9 10 11 15\n12 13 14 15 15\n0 0 0 0 15\n''') == '''\n1 1 2 2 5\n'''\n", "solution(\"\") == \"\", \"Wrong result\"\n\n# print the solution\nprint(solution(__doc__))", "solution('''2 3\n15 11 12\n13 15 14''') == '6', 'Wrong answer for example test'\n\n# print the solution\nprint(solution('''2 3\n15 11 12\n13 15 14'''))", "solution('''\n2 2\n10 10\n''') == '''\n4\n'''\nassert solution('''\n3 4\n12 0 6 12\n6 12 6 12\n12 0 6 12\n''') == '''\n3\n2\n'''\nassert solution('''\n3 3\n12 10 8\n14 9 12\n10 12 8\n''') == '''\n6\n4\n3\n'''\n\n# get input and print the solution\nwith open('inputs/input_03.txt') as infile:\n    print(solution(infile.read()))", "solution('''\n3 4\n7 7 7 7\n7 1 7 7\n7 7 7 7\n''') == '''\n5\n'''\n\nassert solution('''\n5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n''') == '''\n5\n5\n5\n5\n5\n'''\n\nassert solution('''\n2 2\n15 15\n15 15\n''') == '''\n1\n'''\n\nassert solution('''\n6 5\n11 9 12 12 14\n15 14 7 9 13\n12 15 11 5 7\n12 15 11 5 7\n13 7 8 15 8\n9 8 9 12 12\n''') == '''\n2\n2\n2\n2\n2\n2\n'''\n\nassert solution('''\n6 7\n0 0 0 0 0 0 0\n0 0 1 1 1 0 0\n0 0 1 0 1 0 0\n0 0 1 1 1 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n''') == '''\n2\n2\n2\n2\n'''\n\n# you can use the file solution.txt to test the solution locally\nf = open('solution.txt', 'w')\nf.write(", "solution('''3 4\n0 2 5 7\n4 6 1 0\n8 7 6 2''') == '2 4'\nassert solution('''5 6\n8 8 10 10 13 15\n11 11 8 10 11 8\n8 8 13 15 13 8\n13 13 10 13 8 10\n11 10 8 8 11 10''') == '10 6 4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "solution('''\n6 6\n15 15 15 15 15 15\n15 0 0 0 0 15\n15 0 0 0 0 15\n15 0 0 0 0 15\n15 0 0 0 0 15\n15 15 15 15 15 15\n''') == '\n5\n1\n1\n1\n1\n1\n'\n\n# check performance\nfrom random import randint\nfrom time import time\n\ndef gen_performance_test_input(N: int, M: int, n: int) -> str:\n    data = [str(N), str(M)]\n    for _ in range(N):\n        for _ in range(M):\n            data.append(str(randint(0, 15)))\n    return '\\n'.join(data)\n\ninput = gen_performance_test_input(1000, 1000, 10000)\nstart = time()\nsolution(input)\nprint(f'Performance test took {time() - start} seconds')", "solution('''\n3 4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '12'\n\nassert solution('''\n3 5\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n''') == '15'\n\nassert solution('''\n10 10\n15 15 15 15 15 15 15 15 15 15\n15 15 15 15 15 15 15 15 15 15\n15 15 15 15 15 15 15 15 15 15\n15 15 15 15 15 15 15 15 15 15\n15 15 15 15 15 15 15 15 15 15\n15 15 15 15 15 15 15 15 15 15\n15 15 15 15 15 15 15 15 15 15\n15 15 15 15 15 15 15 15 15 15\n15 15 15 15 15 15 15 15 15 15\n15 15 15 15 15 15 15 15 15 15\n''') == '100'\n\nassert solution('''\n10 10\n15 14 14 14 14 14 14 14 14 15\n15 14 14 14 14 14 14 14 14 15\n15 14 14 14 14 14 14 14 14 15\n15 14 14 14 14 14 14 14 14 15\n15 14 14 14 14 14 14 14 14 15\n15 14 14 14 14 14 14 14 14 15\n15 14 14 14 14 14 14 14 14 15\n15 14 14 14 14 14 14 14 14 15\n15 14 14 14 14 14 14 14 14 15", "solution(\n'''\n3 3\n2 0 10\n3 10 15\n12 8 6\n'''\n) == '''\n8\n1\n'''\n\nassert solution(\n'''\n5 7\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n'''\n) == '''\n35\n'''\n\nassert solution(\n'''\n5 7\n10 5 14 14 14 14 14\n10 5 14 14 14 14 14\n10 5 14 14 14 14 14\n10 5 14 14 14 14 14\n10 5 14 14 14 14 14\n'''\n) == '''\n5\n'''\n\nassert solution(\n'''\n1 1\n5\n'''\n) == '''\n1\n'''\n\nassert solution(\n'''\n1 2\n5 0\n'''\n) == '''\n2\n'''\n\nassert solution(\n'''\n2 1\n0\n0\n'''\n) == '''\n2\n'''\n\nassert solution(\n'''\n1 1\n10\n'''\n) == '''\n0\n'''\n\nassert solution(\n'''\n1 2\n10 0\n'''\n) == '''\n1\n'''\n\nassert", "solution(\"\"\"\n3 5\n15 15 15 10 10\n15 15 15 10 10\n15 15 15 10 10\n\"\"\") == \"1 3 2\"\nassert solution(\"\"\"\n3 7\n1 2 4 8 16 32 64\n128 1 2 4 8 16 32\n64 128 1 2 4 8 16\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"\n5 5\n2 3 3 10 10\n2 3 3 10 10\n2 3 3 10 10\n2 3 3 10 10\n2 3 3 10 10\n\"\"\") == \"1 5 2 3 4\"\nassert solution(\"\"\"\n7 7\n2 3 3 10 10 12 12\n2 3 3 10 10 12 12\n2 3 3 10 10 12 12\n2 3 3 10 10 12 12\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n10 10 10 10 10 10 10\n\"\"\") == \"1 2 7 6 5 3 4\"\nassert solution(\"\"\"\n2 3\n2 3 3\n2 3 3\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n1 1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3\n15 15 15\n15 15 15\n15 15 15\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5\n15 15 15 15 15\n15 15 15 15 15\n15 15 15 15 15\n15 15 15 15 15", "solution('''3 3\n9 4 5\n5 3 3\n5 5 5''') == '9 2'\nassert solution('''2 3\n1 0 10\n0 2 5''') == '8 4 2'\nassert solution('''10 10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1''') == '100'\nassert solution('''3 3\n2 0 3\n6 8 9\n6 6 6''') == '9 5'\nassert solution('''3 3\n0 0 0\n0 0 0\n0 0 0''') == '9'\nassert solution('''4 3\n11 12 13\n14 15 16\n17 18 19\n20 21 22''') == '12 12 12 12'\nassert solution('''4 4\n12 7 5 14\n11 13 15 13\n10 0 0 8\n8 9 8 13''') == '24 9 4 4 4'\nassert solution", "solution(\"\"\"\n2 3\n2 1 2\n2 2 2\n\"\"\") == \"\"\"\n4 2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\n5 5 5\n5 1 5\n5 5 5\n\"\"\") == \"\"\"\n9\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\n2 3 1\n3 4 4\n1 1 1\n\"\"\") == \"\"\"\n6\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 10\n2 3 3 3 3 3 3 3 3 3\n3 4 4 4 4 4 4 4 4 4\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n20 10\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1 1\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n\"\"\")", "solution(solution_data) == solution_output\n \n# check the correctness of solution_data\nassert solution(solution_data) == solution_output\n \n# check the performance of solution\nassert timeit(lambda: solution(solution_data), number=10**3) < 0.5", "solution('''\\\n3 4\n15 15 10 10\n15 1 8 10\n0 1 8 8\n''') == '3 1'\n\nassert solution('''\\\n3 3\n15 15 15\n15 0 15\n15 15 15\n''') == '1'\n\nassert solution('''\\\n4 5\n15 15 15 15 15\n15 15 15 15 15\n15 15 15 15 15\n15 15 15 15 15\n''') == '25'\n\nassert solution('''\\\n6 5\n15 15 15 15 15\n15 0 15 15 15\n15 15 15 15 15\n15 15 15 15 15\n15 15 15 15 15\n15 15 15 15 15\n''') == '24 1'\n\nassert solution('''\\\n3 4\n15 15 1 10\n15 1 8 10\n0 1 8 8\n''') == '2 1'\n\nassert solution('''\\\n6 7\n15 15 15 15 15 15\n15 0 15 15 15 15\n15 15 15 15 15 15\n15 15 15 15 15 15\n15 15 15 15 15 15\n15 15 15 15 15 15\n''') == '24 2'\n\n# test empty/invalid input\nassert solution('') == ''\nassert solution('0') == ''\nassert solution('-1') == ''\nassert solution('-1 -1') == ''\nassert", "solution(\"\"\"\n1\n2\n3 4\n\"\"\") == \"\"\"\n1\n\"\"\", \"Test 1\"\n\nassert solution(\"\"\"\n2\n2\n10 6\n9 5\n\"\"\") == \"\"\"\n3\n1\n\"\"\", \"Test 2\"\n\nassert solution(\"\"\"\n3\n3\n15 14 10\n9 5 1\n3 6 11\n\"\"\") == \"\"\"\n7\n3\n1\n\"\"\", \"Test 3\"\n\nassert solution(\"\"\"\n8\n8\n15 15 13 12 12 12 13 15\n11 13 11 13 12 13 13 15\n10 10 13 13 13 13 13 15\n9 13 13 13 13 13 13 15\n9 13 13 13 13 13 13 15\n10 10 13 13 13 13 13 15\n11 13 11 13 12 13 13 15\n15 15 13 12 12 12 13 15\n\"\"\") == \"\"\"\n63\n33\n25\n21\n19\n15\n9\n\"\"\", \"Test 4\"\n\nassert solution(\"\"\"\n6\n6\n14 14 14 12 12 12\n13 13 13 12 12 12\n10 10 10 12 12 12\n11 11 10 12 12 12\n11 11 10 12 12 12\n14 14 14 12 12 12\n\"\"\") == \"\"\"\n31\n27\n21\n19\n15\n\"\"\", \"Test 5\"\n\nassert solution(\"\"\"\n10\n10\n15 14 14 14 14 14 14 15 14 14\n", "solution('''\n3 3\n2 3 3\n3 3 3\n3 3 3\n''') == '12 9'\n\nassert solution('''\n3 2\n1 1\n1 1\n1 1\n''') == '4'\n\nassert solution('''\n2 3\n2 3 3\n2 3 3\n''') == '12'\n\nassert solution('''\n5 5\n1 1 1 1 1\n1 3 3 3 1\n1 3 3 3 1\n1 3 3 3 1\n1 1 1 1 1\n''') == '36 24 16 15 14 9 4'\n\nassert solution('''\n10 10\n1 1 1 1 1 1 1 1 1 1\n1 3 3 3 3 3 3 3 3 1\n1 3 3 3 3 3 3 3 3 1\n1 3 3 3 3 3 3 3 3 1\n1 3 3 3 3 3 3 3 3 1\n1 3 3 3 3 3 3 3 3 1\n1 3 3 3 3 3 3 3 3 1\n1 3 3 3 3 3 3 3 3 1\n1 3 3 3 3 3 3 3 3 1\n1 1 1 1 1 1 1 1 1 1\n''') == '100 90 80 70 60 50 40 30 20 10 9 8 7 6 5 4 3 2 1'", "solution(\"\"\"2 3\n5 3 5\n10 7 1\"\"\") == \"2 1\"\nassert solution(\"\"\"1 1\n5\"\"\") == \"1\"\nassert solution(\"\"\"3 3\n10 7 1\n5 3 5\n10 7 1\"\"\") == \"2 1\"\nassert solution(\"\"\"3 3\n10 7 1\n5 3 5\n10 7 1\"\"\") == \"2 1\"\nassert solution(\"\"\"3 3\n10 7 1\n5 3 5\n10 7 1\"\"\") == \"2 1\"\nassert solution(\"\"\"2 3\n5 3 5\n10 7 1\"\"\") == \"2 1\"\nassert solution(\"\"\"1 1\n5\"\"\") == \"1\"\nassert solution(\"\"\"3 3\n10 7 1\n5 3 5\n10 7 1\"\"\") == \"2 1\"\nassert solution(\"\"\"3 3\n10 7 1\n5 3 5\n10 7 1\"\"\") == \"2 1\"\nassert solution(\"\"\"3 3\n10 7 1\n5 3 5\n10 7 1\"\"\") == \"2 1\"\nassert solution(\"\"\"2 3\n5 3 5\n10 7 1\"\"\") == \"2 1\"\nassert solution(\"\"\"1 1\n5\"\"\") == \"1\"\nassert solution(\"\"\"3 3\n10 7 1\n5 3 5\n10 7 1\"\"\") == \"2 1\"\nassert solution(\"\"\"3 3\n10", "solution(\"\"\"\n4 4\n10 14 14 14\n10 14 14 14\n10 14 14 14\n10 14 14 14\n\"\"\") == \"\"\"\n6\n\"\"\", \"must be 6\"\n\nassert solution(\"\"\"\n6 6\n14 14 14 14 14 14\n10 13 13 13 13 13\n13 13 13 13 13 13\n10 13 13 13 13 13\n13 13 13 13 13 13\n10 13 13 13 13 13\n\"\"\") == \"\"\"\n3\n3\n3\n\"\"\", \"must be 3, 3, 3\"\n\n# get the input and run the solution\ninput = sys.stdin.read()\nresult = solution(input)\nprint(result)", "solution('''\n2 3\n5 3\n2 5\n''') == '6 5'\n\nassert solution('''\n3 3\n7 8 11\n8 7 9\n7 4 6\n''') == '7 7 4'\n\nassert solution('''\n2 3\n4 2\n4 1\n''') == '4 4'\n\nassert solution('''\n2 3\n10 2\n6 1\n''') == '6 6'\n\nassert solution('''\n2 3\n7 2\n1 2\n''') == '6 4'\n\nassert solution('''\n2 3\n7 2\n1 8\n''') == '6 4'\n\nassert solution('''\n2 3\n7 2\n8 2\n''') == '6 4'\n\nassert solution('''\n2 3\n7 8\n8 2\n''') == '6 4'\n\nassert solution('''\n2 3\n7 8\n8 6\n''') == '6 4'\n\nassert solution('''\n2 3\n7 8\n2 6\n''') == '6 4'\n\nassert solution('''\n2 3\n7 8\n8 8\n''') == '6 4'\n\nassert solution('''\n2 3\n7 8\n2 8\n''') == '6 4'\n\nassert solution('''\n", "solution(\"\"\"\n2 2\n0 0\n0 0\n\"\"\") == \"\"\"\n4\n\"\"\"\n\n# you can use print function to debug your solution\n# print(solution(\"\"\"\n# 5 3\n# 0 0 0\n# 0 0 0\n# 0 0 0\n# 0 0 0\n# 0 0 0\n# \"\"\"))\nprint(solution(\"\"\"\n3 4\n8 8 8 8\n9 9 9 9\n10 10 10 10\n\"\"\"))\nprint(solution(\"\"\"\n3 4\n8 8 8 8\n8 9 9 9\n10 10 10 10\n\"\"\"))\nprint(solution(\"\"\"\n2 3\n5 8 10\n5 8 10\n\"\"\"))\nprint(solution(\"\"\"\n2 3\n5 5 5\n8 8 8\n\"\"\"))\nprint(solution(\"\"\"\n2 3\n5 5 5\n10 10 10\n\"\"\"))\nprint(solution(\"\"\"\n2 3\n2 2 2\n2 2 2\n\"\"\"))\nprint(solution(\"\"\"\n2 3\n2 2 2\n2 2 2\n\"\"\"))\nprint(solution(\"\"\"\n3 4\n8 8 8 8\n9 9 9 9\n10 10 10 10\n\"\"\"))\nprint(solution(\"\"\"\n2 3\n0 0 0\n15 15 15\n\"\"\"))\nprint(solution(\"\"\"\n2 3\n5 5 5\n5", "solution(\"2 3\\n8 4 8\\n1 1 15\") == \"3 2 1\"\nassert solution(\"3 2\\n3 1\\n3 2\\n3 2\") == \"4\"\nassert solution(\"1 3\\n2 7 2\") == \"2\"\nassert solution(\"4 4\\n11 11 2 0\\n11 11 0 2\\n11 11 2 0\\n0 2 11 11\") == \"10 2 2 2 2 2\"\nassert solution(\"6 6\\n14 10 2 13 10 13\\n9 1 0 15 5 6\\n7 15 3 3 3 14\\n7 12 12 12 12 12\\n7 7 7 7 15 7\\n7 12 12 12 12 12\") == \"36 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", "solution('''\n2 3\n2 3 3\n5 10 7\n''') == '5 2'\n\nassert solution('''\n3 3\n8 8 8\n12 5 10\n1 10 7\n''') == '15 12 10 9 7 5 4 3 2 1'\n\nassert solution('''\n4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n''') == '16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1'\n\nassert solution('''\n4 4\n15 15 15 15\n15 15 15 15\n15 15 15 15\n15 15 15 15\n''') == '64'\n\nassert solution('''\n4 4\n8 8 8 8\n8 8 8 8\n8 8 8 8\n8 8 8 8\n''') == '32'\n\nassert solution('''\n3 3\n3 3 3\n3 3 3\n3 3 3\n''') == '9'\n\nassert solution('''\n2 3\n2 3 3\n5 10 7\n''') == '5 2'\n\nassert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '9'\n\nassert solution('''\n3 3\n1 1 1\n1 0 1\n1 1 1\n''') == '6 2", "solution('''\n3 5\n8 12 12 12 12\n10 12 12 12 12\n10 12 12 12 12\n''') == '''\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n4 5\n5 7 9 3 3\n5 4 5 7 9\n5 4 5 7 9\n5 4 5 7 9\n''') == '''\n20\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3\n5 5 5\n5 5 5\n5 5 5\n''') == '''\n9\n'''\n\n# get all of the input data as one string\nall_input = '\\n'.join([input() for i in range(int(input()))])\n# send the data to the solution and get the output\noutput = solution(all_input)\n# print the output\nprint(output)", "solution('''\n4 6\n9 8 7 8 8 9\n5 5 5 5 5 5\n1 1 5 5 5 7\n5 5 5 5 5 5\n''') == '''9\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5", "solution(\"\\n\".join([\n    \"4 5\",\n    \"10 8 10 8 8\",\n    \"8 8 10 10 8\",\n    \"8 8 8 8 8\",\n    \"10 8 10 8 8\",\n])) == \"4 2 1 1 1\"", "(solution('''\n4 4\n4 9 7 4\n6 12 5 6\n12 12 12 12\n8 4 9 7\n''') == '16 9 4 3')\n\n# check the correctness of solution\nassert (solution('''\n4 5\n5 13 1 13 5\n5 13 1 13 5\n5 13 1 13 5\n5 13 1 13 5\n''') == '20 16 4 3')\n\n# check the correctness of solution\nassert (solution('''\n5 4\n2 11 3 11\n2 11 3 11\n2 11 3 11\n2 11 3 11\n2 11 3 11\n''') == '20 16 4 3')\n\n# check the correctness of solution\nassert (solution('''\n7 7\n12 5 10 10 5 10 6\n13 5 5 5 10 5 10\n13 5 5 5 10 5 10\n13 5 5 5 10 5 10\n13 5 5 5 10 5 10\n13 5 5 5 10 5 10\n12 5 10 10 5 10 6\n''') == '84 20 16 9')\n\n# check the correctness of solution\nassert (solution('''\n8 10\n4 9 7 4 4 9 7 4\n6 12 5 6 6 12 5 6\n12 12 12 12 12 12 12 12\n8 4 9 7 8 4 9 7\n4 9 7 4 4 9 7 4\n6 12 5 6", "solution(\"\"\"\n5 6\n7 7 7 7 7 7\n7 7 7 7 7 7\n7 7 7 7 7 7\n7 7 7 7 7 7\n7 7 7 7 7 7\n\"\"\") == \"25\", \"Wrong answer\"\nassert solution(\"\"\"\n3 3\n1 4 7\n8 5 6\n3 2 9\n\"\"\") == \"1\", \"Wrong answer\"\nassert solution(\"\"\"\n3 3\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"9\", \"Wrong answer\"\nassert solution(\"\"\"\n5 5\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n\"\"\") == \"25\", \"Wrong answer\"\nassert solution(\"\"\"\n5 5\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n\"\"\") == \"25\", \"Wrong answer\"\nassert solution(\"\"\"\n5 5\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n\"\"\") == \"25\", \"Wrong answer\"\nassert solution(\"\"\"\n5 5\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\n"], "finish_reason": ["stop", "stop", "length", "stop", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "length"], "sum_logprob": [-168.78607407691518, -107.17638834405999, -62.33907298720003, -57.246467184129976, -10.596234045, -65.12809638361993, -396.6690675051541, -200.12180851284998, -205.97701073012806, -87.03213591620508, -42.315715785600005, -158.98163124582499, -26.18430507130002, -74.08146594284398, -28.897625615080003, -35.61677548640998, -21.1779490535, -125.91096592590002, -7.9529567355, -222.53377409725022, -110.61401882823007, -141.9276383396001, -90.91841029866002, -109.06916451063117, -23.369914470470004, -53.473161721600015, -105.31520974909651, -192.88613997126907, -139.87825256279976, -98.57520791423501, -41.006327306109974, -115.81983336585996, -124.91406611147393, -191.56903430267, -103.868034116725, -49.23096005134002, -132.17461848267996, -199.88506461972995, -92.89729761464002, -66.25181223516407, -89.23418713683003, -152.37734363319706, -131.468428015517, -197.15475117364286, -129.8736318735501, -125.40681369664593, -65.1076575884, -43.975494890040004, -184.62622916197515, -68.14598385325908], "mean_logprob": [-0.6049680074441398, -0.793899172918963, -0.20779690995733333, -0.45797173747304, -0.9632940040909092, -0.21709365461206667, -1.32223022501718, -0.6670726950428333, -0.6865900357670933, -0.2901071197206833, -0.141052385952, -0.5299387708194166, -0.08728101690433333, -0.5612232268397273, -0.1632634215541243, -0.4047360850728409, -1.5127106466785714, -0.5697328774927601, -0.662746394625, -0.7417792469908333, -0.3687133960941, -0.47309212779866666, -1.3176581202704347, -0.363563881702104, -0.8346398025167857, -0.9548778878857143, -0.7859344011126604, -0.64295379990423, -0.466260841876, -0.462794403353216, -0.13668775768703334, -0.3860661112195333, -0.41638022037158, -0.6385634476755667, -0.34622678038908333, -0.7134921746571015, -0.4405820616089333, -0.6662835487324333, -0.33536930546801447, -0.22083937411721333, -0.6029336968704729, -0.5079244787773234, -0.4382280933850567, -0.6571825039121434, -0.4329121062451667, -0.6333677459426565, -0.21702552529466668, -0.7209097522957377, -0.61542076387325, -0.22715327951086334]}
{"prompt": "'''\nYou are given two arrays of integers a_1, a_2, \u2026, a_n and b_1, b_2, \u2026, b_m.\n\nYou need to insert all elements of b into a in an arbitrary way. As a result you will get an array c_1, c_2, \u2026, c_{n+m} of size n + m.\n\nNote that you are not allowed to change the order of elements in a, while you can insert elements of b at arbitrary positions. They can be inserted at the beginning, between any elements of a, or at the end. Moreover, elements of b can appear in the resulting array in any order.\n\nWhat is the minimum possible number of inversions in the resulting array c? Recall that an inversion is a pair of indices (i, j) such that i < j and c_i > c_j.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n, m \u2264 10^6).\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nThe third line of each test case contains m integers b_1, b_2, \u2026, b_m (1 \u2264 b_i \u2264 10^9).\n\nIt is guaranteed that the sum of n for all tests cases in one input doesn't exceed 10^6. The sum of m for all tests cases doesn't exceed 10^6 as well.\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum possible number of inversions in the resulting array c.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''2\n2 3\n2 1\n4 3 6\n4 2\n2 3 5 4\n1 3\n1\n''') == '''1\n0\n'''\n\ndef main() -> None:\n    n = int(input())\n    print('\\n'.join(map(solution, (input() for _ in range(n)))))\n\nif __name__ == '__main__':\n    main()", "solution('''\n1\n2 3\n2 1\n2 3 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 2\n2 3 1\n2 3\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 1\n3 2 1\n4\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 3\n2\n2 3 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 2\n3 2 1\n2 3\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 1\n1 2\n1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 2\n3 2 1\n3 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 1\n3 2 1\n3\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3", "solution(\"\"\"1\n1 2\n1\n1 2\n\"\"\") == \"\"\"1\"\"\"\n\n# test the performance of solution\nprint(timeit.timeit(lambda: solution(stdin), number=10) / 10)", "solution(\"\"\"\n4\n4 1\n4 3 2 1\n2\n5 3\n1 2 3 4 5\n6 7\n5 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n\"\"\") == \"\"\"\n3\n8\n0\n10\n\"\"\"", "solution(\"test\") == \"test\"", "solution('''\n2\n3 2\n1 5 8\n2 3\n1 3 5\n2 2\n2 4\n1 2\n''') == '''\n0\n3\n'''\n\n# test the execution time\nfrom utils import timeit\nassert timeit(solution, '''\n2\n3 2\n1 5 8\n2 3\n1 3 5\n2 2\n2 4\n1 2\n''') < 1.0", "solution('''3\n3 2\n1 2 3\n4 5\n3 2\n1 2 3\n5 4\n3 3\n1 2 3\n4 5 6''') == '''0\n1\n5'''\nassert solution('''4\n2 3\n2 3\n1 1 1\n1 3\n1 1\n2 3 4\n2 2\n1 1\n1 1\n2 2\n1 1\n1 1''') == '''0\n1\n1\n0'''\nassert solution('''3\n3 1\n3 2 1\n1\n3 2\n3 1 2\n3 2\n3 1 2''') == '''0\n0\n0'''\nassert solution('''3\n2 3\n2 3\n1 1 1\n1 3\n1 1\n2 3 4\n2 2\n1 1\n1 1''') == '''0\n1\n1'''\nassert solution('''4\n4 2\n4 3 2 1\n2 3\n4 2\n4 3 2 1\n2 3\n4 2\n1 3 2 4''') == '''0\n0\n0\n3'''\nassert solution('''4\n4 2\n4 3 2 1\n2 3\n4 2\n4 3 2 1\n2 3\n4 2\n1 3 2 4''') == '''0\n0\n0\n3'''\n", "solution('''3\n3 3\n1 2 3\n4 5 6\n1 2\n1\n2 1\n4\n1 2\n3\n1 2\n3''') == '''7\n0\n2'''", "solution('''\n\n''') == '''\n\n'''\nassert solution('''\n\n''') == '''\n\n'''\n\n# benchmark\nimport time\n\ndef main():\n    test_cases = [\n        '''\n        7\n        4 3\n        4 1 5\n        1 2 3\n        5 2\n        4 3 7 9 1\n        5 3\n        3 5 5 6 3 1\n        7 5 5\n        2 1\n        4 5\n        2 2\n        4 5\n        2 2\n        1 4\n        3 3\n        2 6 4\n        1 7 9\n        ''',\n    ]\n\n    for i, test_case in enumerate(test_cases, 1):\n        print('Case {}:'.format(i))\n        print('INPUT:')\n        print(test_case)\n        start = time.time()\n        print('OUTPUT:')\n        print(solution(test_case))\n        print('TIME:', time.time() - start)\n        print()\n\nif __name__ == '__main__':\n    main()", "solution(TEST_CASES[0]) == TEST_CASES[0][-1].strip()\n\n# submit solution\ndef submit_solution() -> None:\n    \"\"\"submit solution to codeforces\"\"\"\n    print(solution(stdin_read()))\n\n# tests\nTEST_CASES = [\n    \"\"\"\n    2\n    2 2\n    1 2\n    2 1\n    2 2\n    1 2\n    1 2\n    \"\"\",\n    \"\"\"\n    4\n    \"\"\",\n]", "solution('''\n1\n3 2\n1 2 3\n4 5\n''') == '''3'''\n\nassert solution('''\n2\n2 3\n1 2\n3 2 1\n2 2\n1 2\n1 2\n''') == '''0\n0'''\n\nassert solution('''\n1\n1 2\n1\n2 3\n''') == '''2'''\n\nassert solution('''\n3\n3 3\n1 1 1\n2 2 2\n1 3\n1 2\n1 2\n3 2\n1 1\n2 2\n''') == '''3\n0\n2'''\n\nassert solution('''\n1\n10 4\n1 2 3 4 5 6 7 8 9 10\n11 12 13 14\n''') == '''40'''\n\nassert solution('''\n2\n6 6\n1 2 3 4 5 6\n7 8 9 10 11 12\n6 2\n1 1 1 1 1 1\n1 1\n''') == '''15\n5'''\n\nassert solution('''\n1\n3 3\n1 2 3\n3 2 1\n''') == '''6'''\n\nassert solution('''\n1\n10 2\n1 1 1 1 1 1 1 1 1 1\n1 1\n''') == '''5'''\n\nassert solution('''\n", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''", "solution(get_input_data(2)) == get_expected_result(2)\n\n# get input data\ndef get_input_data(test: int) -> str:\n    if test == 1:\n        return \"1\\n3 2\\n3 2 1\\n2 3\"\n    elif test == 2:\n        return \"2\\n1 2\\n1 2\\n1 2\\n2 2\\n1 2\\n1 2\"\n    elif test == 3:\n        return \"\"\n    elif test == 4:\n        return \"\"\n    elif test == 5:\n        return \"\"\n    elif test == 6:\n        return \"\"\n    elif test == 7:\n        return \"\"\n    elif test == 8:\n        return \"\"\n    elif test == 9:\n        return \"\"\n    elif test == 10:\n        return \"\"\n    else:\n        return \"\"\n\n# get output data\ndef get_expected_result(test: int) -> str:\n    if test == 1:\n        return \"1\"\n    elif test == 2:\n        return \"0\\n1\"\n    elif test == 3:\n        return \"\"\n    elif test == 4:\n        return \"\"\n    elif test == 5:\n        return \"\"\n    elif test", "solution(INPUT) == OUTPUT", "solution('''\n2\n1 1\n1\n2\n2 1\n1 3\n1\n''') == '''\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 2\n1\n1 2\n1 2\n1 1\n1\n''') == '''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 4\n1\n1 2 3 4\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n1\n2\n''') == '''\n1\n'''\n\nprint(\"All correct!\")", "solution('''\n4\n1 2\n1\n1\n1 1\n1\n1\n2 3\n1 2\n1 2\n2 3\n1 3\n2 3\n1 2\n2 3\n2 3\n1 2\n1 2\n''') == '''\n0\n0\n3\n6\n'''", "solution('''\n1\n2 3\n2 3\n1 4 2\n''') == '''\n2\n'''\nassert solution('''\n2\n1 2\n1\n1 2\n''') == '''\n0\n1\n'''\nassert solution('''\n3\n3 1\n3 2 1\n2\n2 3\n1 1\n1 1\n1 1\n''') == '''\n0\n0\n2\n'''\n\nassert solution('''\n4\n4 1\n4 3 2 1\n5\n4 1\n1 2 3 4\n5\n4 1\n1 2 3 4\n1\n''') == '''\n2\n3\n0\n3\n'''", "solution(example_input) == example_output", "solution(\"\"\"1\n5 4\n1 2 3 4 5\n1 3 5 7\n\"\"\") == \"5\"\n\nassert solution(\"\"\"2\n5 4\n1 2 3 4 5\n1 3 5 7\n5 5\n1 2 3 4 5\n1 2 3 4 5\n\"\"\") == \"\"\"\"5\n0\"\"\"\n\n# test on codeforces\n# test 1\n# input\n'''\n2\n5 5\n1 2 3 4 5\n1 2 3 4 5\n5 4\n1 2 3 4 5\n1 3 5 7\n'''\n# output\n'''\n0\n5\n'''\n# test 2\n# input\n'''\n1\n10 4\n1 2 3 4 5 6 7 8 9 10\n11 12 13 14\n'''\n# output\n'''\n39\n'''\n# test 3\n# input\n'''\n2\n2 3\n1 3\n3 2 1\n1 1\n1\n1\n'''\n# output\n'''\n2\n0\n'''\n# test 4\n# input\n'''\n1\n10 10\n1 2 3 4 5 6 7 8 9 10\n10 9 8 7 6 5 4 3 2 1\n'''\n# output\n'''\n10\n'''\n# test 5\n# input\n'''\n1\n1 1\n1\n1\n'''", "solution(example_input) == example_output", "solution('''\n2\n2 3\n2 3\n1 2 3\n1 2\n1 2 3\n2 3 4\n''') == '''\n0\n6\n'''", "solution('''\n3\n3 2\n1 2 3\n5 4\n1 2 3\n1 2\n3 4\n''') == '''\n1\n0\n0\n'''\n\nassert solution('''\n3\n3 1\n3 2 1\n4\n2 1 3 4\n2 3\n1 2\n1 2\n''') == '''\n0\n0\n0\n'''\n\nassert solution('''\n2\n2 3\n1 2\n1 2 3\n1 2 3\n1 1\n1\n1\n''') == '''\n3\n0\n'''\n\n# stress test\nimport random\n\n# python3 -m cProfile -s time -o stats.profile solution.py\n# python3 -m pstats stats.profile\n\ndef stress_test(max_n=10**6, max_m=10**6, max_a=10**9, max_b=10**9):\n    assert max_n > 0 and max_m > 0\n    assert max_a > 0 and max_b > 0\n\n    T = random.randint(1, 10**4)\n    print(T)\n    for _ in range(T):\n        n = random.randint(1, max_n)\n        m = random.randint(1, max_m)\n        print", "solution('''\n1\n3 2\n1 5 7\n2 4\n''') == '0', 'should be equal 0'\n\nassert solution('''\n2\n2 2\n1 5\n2 4\n3 2\n1 5 7\n2 4\n''') == '1\\n1', 'should be equal 1\\n1'\n\nassert solution('''\n1\n1 1\n1\n1\n''') == '0', 'should be equal 0'\n\n# get input and run solution\nT = int(input())\nfor t in range(T):\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    if t != 0:\n        print()\n\n    print(solution(f'{N} {M}\\n{\" \".join(map(str, A))}\\n{\" \".join(map(str, B))}'))", "solution(example_0) == '1\\n1'\nassert solution(example_1) == '5\\n0\\n5\\n0\\n5\\n0'\nassert solution(example_2) == '4\\n4\\n0\\n4\\n0\\n4\\n0'\nassert solution(example_3) == '8\\n0\\n10\\n0\\n10\\n0\\n10\\n0\\n10'\nassert solution(example_4) == '3\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3\\n0\\n3", "solution('''\n3\n3 1\n1 2 3\n10\n3 1\n1 10 100\n2\n1 1\n1000000000\n1\n''') == '''\n2\n2\n1000000000\n'''\nassert solution('''\n2\n1 1\n1000000000\n1\n1 1\n1\n1\n''') == '''\n1000000000\n1\n'''\n\n# get input for testing\ntest_cases = []\ntest_cases_str = stdin\nif test_cases_str == '':\n    with open('input.txt', 'r') as f:\n        test_cases_str = f.read()\ntest_cases = test_cases_str.split('\\n')\n\n# run and get output to check with online judge\noutput = []\nfor i in range(len(test_cases)):\n    if i % 4 == 0:\n        output.append(solution(test_cases[i] + '\\n' + test_cases[i+1] + '\\n' + test_cases[i+2] + '\\n' + test_cases[i+3]))\n\n# copy output to clipboard for submitting in online judge system\npyperclip.copy('\\n'.join(output))", "solution('''\n3\n3 2\n1 3 2\n2 1\n2 3\n2 3 4\n1 2\n4 2\n1 3 2 4\n5 6\n''') == '''\n0\n1\n9\n'''", "solution(\"\"\"\n    2\n    3 1\n    1 2 3\n    4\n    3 2\n    1 2\n    3 4\n\"\"\") == \"\"\"\n    2\n    1\n\"\"\", \"Example\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    5\n    1 1\n    1\n    2\n    1 1\n    1\n    1\n    1 1\n    1\n    2\n    1 1\n    2\n    1\n    1 1\n    2\n    2\n\"\"\") == \"\"\"\n    0\n    0\n    0\n    0\n    0\n\"\"\", \"Simple\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n    10\n    10 5\n    6 3 4 2 7 5 1 2 3 9\n    3 2 1 5\n    10 5\n    6 3 4 2 7 5 1 2 3 9\n    1 2 3 5\n    10 5\n    1 2 3 4 5 6 7 8 9 10\n    10 9 8 7 6 5 4 3 2 1\n    10 5\n    1 2 3 4 5 6 7 8 9 10\n    10 9 8 7 6 5 4 3 2 1\n    10 5\n    1 2 3 4 5 6 7 8 9 10\n    1 2 3 4 5 6 7 8 9 10\n    10 5\n    1 2 3 4 5 6 7 8 9 10\n", "solution(\"\"\"4\n2 2\n2 4\n1 3\n2 4\n1 2 3 4\n4 2\n1 2 3 4\n4 2\n4 2\n4 2 1 3\n2 3\n1 3 5 2 4\n1 2 3\n1 2\n3 2 1\n2 3 4\n2 3\n1 2 3 4 5\n1 2 3\n1 2\n1 2 3\n2 3 4 5\n3 2\n1 2 3\n1 2\n1 2 3\n3 2 1\n3 3\n1 3 5\n2 4 6\n8 9 7\n2 3 4 5 6 7 8 9\n\"\"\") == \"\"\"1\n1\n2\n2\n0\n0\n2\n2\n2\n2\n0\n0\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n\"\"\"", "solution(sample_input) == sample_output\nassert solution(case1_input) == case1_output\nassert solution(case2_input) == case2_output\nassert solution(case3_input) == case3_output\nassert solution(case4_input) == case4_output\nassert solution(case5_input) == case5_output\nassert solution(case6_input) == case6_output\nassert solution(case7_input) == case7_output\nassert solution(case8_input) == case8_output\nassert solution(case9_input) == case9_output\nassert solution(case10_input) == case10_output\nassert solution(case11_input) == case11_output\nassert solution(case12_input) == case12_output\nassert solution(case13_input) == case13_output\nassert solution(case14_input) == case14_output\nassert solution(case15_input) == case15_output\nassert solution(case16_input) == case16_output\nassert solution(case17_input) == case17_output\nassert solution(case18_input) == case18_output\nassert solution(case19_input) == case19_output\nassert solution(case20_input) == case20_output\nassert solution(case21_input) ==", "solution(problem_sample_1) == problem_sample_1_answer\nassert solution(problem_sample_2) == problem_sample_2_answer\n\n# check time complexity\nimport time\n\nproblem_sample_1_time_start = time.time()\nassert solution(problem_sample_1) == problem_sample_1_answer\nproblem_sample_1_time_end = time.time()\nprint(f'problem_sample_1 solved in {problem_sample_1_time_end - problem_sample_1_time_start}')\nassert solution(problem_sample_2) == problem_sample_2_answer\nproblem_sample_2_time_end = time.time()\nprint(f'problem_sample_2 solved in {problem_sample_2_time_end - problem_sample_1_time_end}')\n\n# print('Success')\n\n# submit\n# not accepted, since it took too long\n# problem_input = open('input.txt', 'r')\n# print(solution(problem_input.read()))\n# problem_input.close()", "solution('''\n\n''') == '''\n\n'''", "solution(\"\") == \"\"\nprint(\"Success!\")", "solution(\"\") == \"\"\n\n# check the speed of solution\nfrom timeit import timeit\n\nassert timeit(\"\", number=1) < 1", "str(solution('''\n3\n3 1\n3 1 2\n3\n3 2\n2 3 1\n1 3\n3 3\n1 2 3\n1 2 3\n''')) == '''\n0\n1\n0\n'''\n\n# check the correctness of solution\nassert str(solution('''\n2\n10 3\n2 3 5 7 11 13 17 19 23 29\n4 6 8\n5 1\n7 1 2 3 5\n4\n''')) == '''\n5\n0\n'''\n\n# check the correctness of solution\nassert str(solution('''\n2\n3 3\n3 2 1\n1 2 3\n5 2\n1 2 3 4 5\n1 2\n''')) == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert str(solution('''\n1\n7 7\n5 6 4 8 1 2 7\n8 5 1 6 4 2 7\n''')) == '''\n6\n'''\n\n# check the correctness of solution\nassert str(solution('''\n1\n6 5\n3 5 2 1 4 6\n3 4 5 2 1\n''')) == '''\n9\n'''\n\n# check the correctness of solution\nassert str(solution('''\n1\n6 7\n1 2 3 4 5 6\n", "\"1\" == solution(\"\"\"2\n1 1\n1\n1\n1 1\n1\n2\"\"\")\n\n# I'd like to show more examples but the hackerrank has one-to-one correspondence between test-case and answer.", "solution('''\n2\n2 2\n1 2\n2 3\n2 3\n1 2 3\n1 2 3\n''') == '''\n1\n0\n'''\n\n#-- my solution\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--\n#\n#--", "solution(\"\"\"\n4\n1 1\n1\n2\n4 2\n4 2\n1 3\n5 2\n1 2 3 4 5\n6 7\n5 3\n1 2 3 4 5\n1 2 3\n\"\"\") == \"\"\"\n0\n2\n2\n3\n\"\"\", \"sample test 1\"\n\nassert solution(\"\"\"\n3\n3 2\n1 2 3\n1 2\n2 3\n2 2\n1 2\n3 4\n3 3\n1 2 3\n3 2 1\n\"\"\") == \"\"\"\n1\n1\n0\n\"\"\", \"sample test 2\"", "solution('''\n''') == '''\n'''\n\n# get the input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solution(a, b))", "solution('''\n1\n4 4\n4 3 2 1\n1 2 3 4\n''') == '0'\n\nassert solution('''\n2\n4 4\n4 3 2 1\n1 2 3 4\n4 4\n1 2 3 4\n4 3 2 1\n''') == '6'\n\nassert solution('''\n3\n3 2\n5 4 2\n3 1\n3 2\n5 4 2\n3 1\n3 2\n5 4 2\n3 1\n''') == '2'\n\nassert solution('''\n4\n1 1\n1\n1\n1 1\n1\n1\n1 1\n1\n1\n1 1\n1\n1\n''') == '0'\n\nassert solution('''\n5\n5 4\n1 2 3 4 5\n5 4 3 2 1\n5 4\n1 2 3 4 5\n5 4 3 2 1\n5 4\n1 2 3 4 5\n5 4 3 2 1\n5 4\n1 2 3 4 5\n5 4 3 2 1\n5 4\n1 2 3 4 5\n5 4 3 2 1\n''') == '24'\n\nassert solution('''\n6\n4 3\n4 1 2\n1 2 3\n4 3\n4 1 2\n1 2 3\n4 3\n4 1 2\n1 2 3\n4 3\n4 1 2\n1", "solution(r'''\n1\n2 3\n2 3\n1 2 3\n''') == r'''\n1\n'''\n\nif __name__ == '__main__':\n    print(solution(open('input.txt').read()))", "solution(\"\"\"\n1\n1 1\n1\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n1 1\n1\n2\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2\n1 1\n1\n2\n3 2\n1 2\n1 2\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n3 3\n1 2 3\n3 2 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# print the solution to stdout\nprint(solution(sys.stdin.read()))", "solution(sample) == result, 'Wrong answer!'\n\n# check the performance of solution\nassert solution(large) == large_result, 'Wrong answer!'\n\n# check the performance of solution\nassert solution(large2) == large2_result, 'Wrong answer!'", "solution('''\n5\n5 5\n1 5 7 9 11\n2 4 6 8 10\n3 4\n1 3 5 7\n2 4 6 8\n3 3\n1 3 5\n2 4 6\n3 3\n1 5 5\n2 4 4\n3 3\n2 3 3\n1 1 1\n''') == '''\n5\n0\n0\n6\n0\n''', 'first'\n\nassert solution('''\n1\n1 1\n5\n10\n''') == '''\n1\n''', 'second'\n\nassert solution('''\n1\n10 10\n2 3 3 3 3 3 4 4 4 4\n2 2 2 2 2 2 2 2 2 2\n''') == '''\n0\n''', 'third'\n\nprint('Done! Go Check!')", "solution('''2\n2 3\n1 2\n4 5 6\n1 1\n1\n1''') == '''5\n0'''", "solution('''\n3\n3 2\n1 2 3\n3 4\n1 2\n1 2 3\n3 2\n1 2 3\n3 4\n''') == '''\n2\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4 2\n1 2 3 4\n5 6\n3 1\n3 4\n1 2 3\n1 2 3\n3 2\n1 2 3\n3 4\n1 2\n1 2 3\n3 2\n1 2 3\n3 4\n''') == '''\n3\n3\n3\n0\n'''", "solution(\"\") == \"\"", "solution(\"\"\"2\n2 3\n2 1\n5 3 2\n1 2\n1 1\n1 1\"\"\") == \"\"\"5\n0\"\"\"", "solution(task) == '''\n1\n5\n1 2 3 4 5\n5 6 7 8 9\n'''", "solution(input_test) == output_test\n\n# load input data and solve\nsolution(input_test)", "solution(\"\\n\".join([\n    \"4\",\n    \"4 2\",\n    \"1 3 2 4\",\n    \"1 3\",\n    \"4 2\",\n    \"1 3 2 4\",\n    \"2 3\",\n    \"4 2\",\n    \"1 3 2 4\",\n    \"4 5\",\n    \"4 4\",\n    \"1 1 2 2\",\n    \"1 1 2 2\"\n])) == \"\\n\".join([\n    \"2\",\n    \"3\",\n    \"3\",\n    \"0\"\n])"], "finish_reason": ["stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-67.46060513555997, -78.1084238382453, -34.0205571046, -44.22890914330001, -9.109527539999998, -54.41077320456998, -132.30406694946592, -39.2532992482, -145.46035292546102, -49.003796243046985, -129.16736172655493, -11.075081573850001, -74.631789277433, -7.1646028002, -64.394745433197, -47.93308492054999, -90.13977647153321, -6.698137810099999, -122.85728050396996, -6.6981391400999994, -26.314526163400007, -150.87386509537987, -78.91681290559801, -68.65879792839497, -124.02411406462095, -39.02606037139999, -110.49562562932995, -136.9344834219, -21.380272819134976, -111.967522085805, -7.3119124090000005, -12.4489135529, -25.315163931740006, -158.78108129722403, -80.09495703190001, -60.256298265800034, -78.26597616428995, -23.301299081320014, -80.98030934012507, -27.580747826530004, -46.72074773787997, -32.79795828362199, -99.21907833363005, -21.491825581699995, -67.65572281664831, -5.60854302, -29.828151306999995, -25.821151610999998, -30.377556996999992, -46.38525459540001], "mean_logprob": [-0.6883735217914285, -0.260361412794151, -0.6670697471490196, -0.63184155919, -1.0121697266666667, -0.5496037697431313, -0.44101355649822, -0.8010877397591837, -0.5726785548246496, -0.3951919051858629, -0.43055787242185, -0.1845846928975, -0.24877263092477667, -0.7960669778, -0.40499839895092454, -0.6751138721204225, -0.5741387036403388, -0.6089216191, -0.4095242683465667, -0.6089217400090909, -0.641817711302439, -0.5029128836512666, -0.3507413906915467, -0.22886265976131667, -0.4306392849466007, -0.7363407617245283, -0.36831875209776666, -0.7523872715489011, -0.07126757606378334, -0.44431556383255955, -0.45699452556250003, -1.0374094627416666, -0.7445636450511764, -0.5292702709907466, -1.5112256043754717, -0.20085432755266666, -0.6114529387835156, -0.2589033231257778, -0.26993436446708335, -0.47553013494017243, -0.353945058620303, -0.5206025124384445, -0.5574105524361236, -0.651267441869697, -0.5048934538555844, -0.93475717, -0.93212972834375, -0.9563389485555556, -1.1250947035925927, -0.36813694123333335]}
{"prompt": "'''\nBob really likes playing with arrays of numbers. That's why for his birthday, his friends bought him a really interesting machine \u2013 an array beautifier. \n\nThe array beautifier takes an array A consisting of N integers, and it outputs a new array B of length N that it constructed based on the array given to it. The array beautifier constructs the new array in the following way: it takes two numbers at different indices from the original array and writes their sum to the end of the new array. It does this step N times - resulting in an output array of length N. During this process, the machine can take the same index multiple times in different steps. \n\nBob was very excited about the gift that his friends gave him, so he put his favorite array in the machine. However, when the machine finished, Bob was not happy with the resulting array. He misses his favorite array very much, and hopes to get it back. \n\nGiven the array that the machine outputted, help Bob find an array that could be the original array that he put in the machine. Sometimes the machine makes mistakes, so it is possible that no appropriate input array exists for the array it has outputted. In such case, let Bob know that his array is forever lost.\n\nInput\n\nThe first line contains one positive integer N (2 \u2264 N \u2264 10^3) \u2013 the length of Bob's array.\n\nThe second line contains N integers B_1, B_2, ..., B_N (1 \u2264 B_i \u2264 10^6) \u2013 the elements of the array the machine outputted.\n\nOutput\n\nIf an appropriate input array exists, print \"YES\", followed by the input array A_1, A_2, ..., A_N (-10^9 \u2264 A_i \u2264 10^9) in the next line. Otherwise, print \"NO\".\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\\\n3\n1 2 3\n\"\"\") == \"\"\"\\\nYES\n1 1 2\n\"\"\"\n\nassert solution(\"\"\"\\\n4\n-1 -1 -1 -1\n\"\"\") == \"\"\"\\\nYES\n-1 0 0 0\n\"\"\"\n\nassert solution(\"\"\"\\\n4\n0 0 0 0\n\"\"\") == \"\"\"\\\nNO\n\"\"\"\n\nassert solution(\"\"\"\\\n2\n0 0\n\"\"\") == \"\"\"\\\nYES\n0 0\n\"\"\"\n\nassert solution(\"\"\"\\\n3\n0 0 1\n\"\"\") == \"\"\"\\\nYES\n0 0 1\n\"\"\"\n\nassert solution(\"\"\"\\\n3\n3 3 3\n\"\"\") == \"\"\"\\\nNO\n\"\"\"\n\nassert solution(\"\"\"\\\n4\n1 2 3 4\n\"\"\") == \"\"\"\\\nYES\n1 1 2 2\n\"\"\"\n\nassert solution(\"\"\"\\\n5\n1 3 5 7 9\n\"\"\") == \"\"\"\\\nYES\n1 1 3 3 5\n\"\"\"\n\nassert solution(\"\"\"\\\n7\n1 2 3 4 5 6 7\n\"\"\") == \"\"\"\\\nYES\n1 1 2 2 3 3 4\n\"\"\"\n\nassert solution(\"\"\"\\\n4\n0 0 2 4\n\"\"\") == \"\"\"\\\nYES\n0 0 1 3\n\"\"\"\n\nassert solution(\"\"\"\\\n3\n-1 -1 -1\n\"\"\")", "solution(\"3\\n3 6 9\") == \"YES\\n3 6 9\", \"Failed test #1\"\nassert solution(\"3\\n6 9 3\") == \"YES\\n3 6 9\", \"Failed test #2\"\nassert solution(\"3\\n6 9 6\") == \"NO\", \"Failed test #3\"\nassert solution(\"2\\n2 3\") == \"YES\\n2 1\", \"Failed test #4\"\nassert solution(\"3\\n1 1 1\") == \"NO\", \"Failed test #5\"\nassert solution(\"3\\n1 2 3\") == \"YES\\n1 2 3\", \"Failed test #6\"\nassert solution(\"4\\n1 3 2 4\") == \"YES\\n1 2 1 4\", \"Failed test #7\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"YES\\n1 2 3 4 5 6 7 8 9 10\", \"Failed test #8\"\nassert solution(\"10\\n1 5 2 6 3 7 4 8 5 9\") == \"YES\\n1 5 2 6 3 7 4 8 5 9\", \"Failed test #9\"\nassert solution(\"10\\n5 1 6 2 7 3 8 4 9 5\") == \"YES\\n1 5 2 6 3 7 4 8 5 9\", \"Failed test #10\"", "solution('''\n4\n4 4 4 4\n''') == '''\nYES\n0 0 0 8\n'''\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '''\nYES\n1 1 1 1 1\n'''\n\nassert solution('''\n4\n4 5 6 7\n''') == '''\nNO\n'''\n\nassert solution('''\n3\n2 3 4\n''') == '''\nYES\n0 1 3\n'''\n\nassert solution('''\n2\n1 1\n''') == '''\nYES\n0 0\n'''\n\nassert solution('''\n2\n2 2\n''') == '''\nYES\n1 1\n'''\n\nassert solution('''\n3\n3 6 9\n''') == '''\nYES\n3 0 3\n'''\n\nassert solution('''\n3\n3 7 10\n''') == '''\nYES\n3 4 3\n'''\n\nassert solution('''\n4\n4 8 12 16\n''') == '''\nYES\n4 4 4 4\n'''\n\nassert solution('''\n5\n5 10 15 20 25\n''') == '''\nYES\n5 5 5 5 5\n'''\n\nassert solution('''\n8\n8 16 24 32 40 48 56 64", "solution('''\n5\n5 5 5 5 5\n''') == '''\nYES\n-2 -2 1 1 1\n'''\n\nassert solution('''\n5\n5 10 15 20 25\n''') == '''\nYES\n5 5 5 5 5\n'''\n\nassert solution('''\n5\n20 25 15 10 5\n''') == '''\nYES\n5 5 5 5 5\n'''\n\nassert solution('''\n5\n30 30 30 30 30\n''') == '''\nNO\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\nYES\n-2 -2 -2 -2 -2\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '''\nYES\n0 0 0 0 0\n'''\n\nassert solution('''\n5\n5 5 6 7 8\n''') == '''\nYES\n5 5 -1 -1 -1\n'''\n\nassert solution('''\n5\n6 7 8 5 5\n''') == '''\nYES\n-1 -1 -1 5 5\n'''\n\nassert solution('''\n5\n6 7 8 9 10\n''') == '''\nYES\n-1 -1 -1 -1 -1\n'''\n\nassert", "solution('''\n3\n2 3 5\n''') == '''\nYES\n-5 -5 -5\n'''\n\nassert solution('''\n3\n2 3 4\n''') == '''\nNO\n'''\n\nassert solution('''\n5\n1 1 2 2 3\n''') == '''\nYES\n-4 -4 -4 -4 -4\n'''\n\nassert solution('''\n2\n1 2\n''') == '''\nYES\n-3 -3\n'''\n\nassert solution('''\n1\n10\n''') == '''\nYES\n-10\n'''\n\nassert solution('''\n2\n10 10\n''') == '''\nYES\n-20 -20\n'''\n\nassert solution('''\n3\n10 10 10\n''') == '''\nYES\n-30 -30 -30\n'''\n\nassert solution('''\n3\n-10 -10 -10\n''') == '''\nYES\n30 30 30\n'''\n\nassert solution('''\n1\n-10\n''') == '''\nYES\n10\n'''\n\nassert solution('''\n2\n-10 -10\n''') == '''\nYES\n20 20\n'''\n\nassert solution('''\n1\n-1000000000\n", "solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"\"\"\nYES\n1 1 1 1\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 4 5 4\n\"\"\") == \"\"\"\nYES\n1 3 2 4\n\"\"\"\n\nassert solution(\"\"\"\n2\n1 1\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 2 2\n\"\"\") == \"\"\"\nYES\n1 1 1\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"\"\"\nYES\n1 1 1 1\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\nYES\n1 1 1 1 1 1 1 1 1 1\n\"\"\"\n\nassert solution(\"\"\"\n10\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10\n\"\"\") == \"\"\"\nYES\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n\"\"\"\n\nassert solution(\"\"\"\n10\n-11 -21 -31 -41 -51 -61 -71 -81 -91 -101\n\"\"\") == \"\"\"\nYES\n-10 -10 -10 -10 -10 -10 -10 -10 -10 -10\n", "solution('''\n4\n2 2 2 2\n''') == '''\nYES\n-2 -2 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n3 4 5 6\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 3 4\n''') == '''\nYES\n-3 -2 1 4\n'''\n\n# check the correctness of solution\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n''') == '''\nYES\n-7 -6 -5 -4 -3 -2 -1 8\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '''\nYES\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n10000000000 10000000000 10000000000 10000000000 10000000000 10000000000 10000000000 10000000000 10000000000 10000000000\n''') == '''\nYES\n-79999999980 -69999999980 -59999999980 -49999999980 -39999999980 -29999999980 -19999999990 -9999999990 10000000000 10000000000\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n10000000000 10000000000 10000000000 100", "solution(\"3\\n3 1 2\") == \"YES\\n1 2\"\nassert solution(\"5\\n1 2 3 6 10\") == \"NO\"\nassert solution(\"4\\n5 3 2 1\") == \"YES\\n1 1 1 1\"\nassert solution(\"10\\n10 5 7 4 2 8 1 6 3 9\") == \"YES\\n1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"10\\n100000 100000 100000 100000 100000 100000 100000 100000 100000 100000\") == \"YES\\n100000 100000 100000 100000 100000 100000 100000 100000 100000 100000\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"YES\\n1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"YES\\n1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 11\") == \"NO\"\nassert solution(\"10\\n11 2 3 4 5 6 7 8 9 10\") == \"NO\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"YES\\n1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"3\\n3 6 9", "solution('''\n4\n1 2 3 4\n''') == '''\nYES\n3 1 2 1\n'''\n\nassert solution('''\n4\n1 2 3 5\n''') == '''\nNO\n'''\n\nassert solution('''\n6\n-1 0 -1 0 -1 0\n''') == '''\nYES\n0 -1 0 -1 0 -1\n'''\n\nassert solution('''\n3\n0 0 0\n''') == '''\nYES\n0 0 0\n'''\n\nassert solution('''\n5\n1 -1 1 -1 1\n''') == '''\nYES\n1 1 1 1 1\n'''\n\nassert solution('''\n6\n-3 1 -3 1 -3 1\n''') == '''\nYES\n-3 -3 -3 -3 -3 -3\n'''\n\nassert solution('''\n2\n1 1\n''') == '''\nYES\n1 1\n'''\n\nassert solution('''\n4\n-100 -100 -100 -100\n''') == '''\nYES\n-100 -100 -100 -100\n'''\n\nassert solution('''\n5\n0 1 2 3 4\n''') == '''\nYES\n1 1 1 1 1\n'''\n\nassert solution('''", "solution(\"\") == \"\"", "solution('''4\n4 2 0 1''') == '''YES\n2 1 -1 0'''\nassert solution('''3\n3 0 1''') == '''NO'''\nassert solution('''4\n-1 -1 -1 -1''') == '''YES\n0 0 0 0'''\nassert solution('''5\n12 21 0 0 1''') == '''YES\n1 5 -11 11 1'''\nassert solution('''6\n5 5 5 5 5 5''') == '''YES\n0 0 0 0 0 0'''\nassert solution('''2\n2 3''') == '''NO'''\nassert solution('''1\n1''') == '''YES\n0'''\nassert solution('''6\n3 5 -1 0 0 0''') == '''YES\n1 2 -1 -1 0 0'''\nassert solution('''6\n0 0 -2 0 0 0''') == '''YES\n0 0 0 0 0 0'''\nassert solution('''6\n0 0 -1 0 0 0''') == '''NO'''\nassert solution('''6\n-1 -1 0 -1 -1 -1''') == '''YES\n0 0 0 0 0 0'''\nassert solution('''6\n0 -1 0 0 0 0", "solution('''\n2\n2 3\n''') == '''\nYES\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 4 5\n''') == '''\nYES\n2 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n2 3 6 7 9 10\n''') == '''\nYES\n1 1 1 1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n''') == '''\nYES\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 4 5\n''') == '''\nYES\n2 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n2 3 6 7 9 10\n''') == '''\nYES\n1 1 1 1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n''') == '''\nYES\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 4 5\n''') == '''\nYES\n2 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n2 3 6 7 9 10\n", "solution(stdin=\"4\\n4 1 2 2\") == \"YES\\n4 2 1 1\"\nassert solution(stdin=\"4\\n4 2 2 2\") == \"NO\"\nassert solution(stdin=\"4\\n4 1 1 2\") == \"YES\\n2 2 1 1\"\nassert solution(stdin=\"2\\n2 5\") == \"YES\\n5 -3\"\nassert solution(stdin=\"2\\n1 1\") == \"YES\\n1 0\"\nassert solution(stdin=\"5\\n20 8 10 2 9\") == \"YES\\n9 9 9 1 3\"\nassert solution(stdin=\"2\\n2 1\") == \"YES\\n1 1\"\nassert solution(stdin=\"5\\n10 -1 -1 10 -1\") == \"YES\\n10 -1 -1 10 -1\"\nassert solution(stdin=\"2\\n2 0\") == \"YES\\n0 2\"\nassert solution(stdin=\"4\\n4 0 0 2\") == \"YES\\n2 2 0 0\"\nassert solution(stdin=\"7\\n21 15 10 6 3 3 2\") == \"YES\\n7 6 5 3 2 2 1\"\nassert solution(stdin=\"4\\n4 0 2 2\") == \"YES\\n2 2 0 0\"\nassert solution(stdin=\"", "solution(\"5\\n1 1 1 1 1\") == \"YES\\n1 1 1 1 1\"\nassert solution(\"5\\n1 1 1 2 2\") == \"YES\\n1 1 1 1 1\"\nassert solution(\"5\\n1 1 1 2 4\") == \"YES\\n1 1 1 1 1\"\nassert solution(\"5\\n1 1 1 2 2\") == \"YES\\n1 1 1 1 1\"\nassert solution(\"5\\n1 1 1 2 2\") == \"YES\\n1 1 1 1 1\"\nassert solution(\"4\\n4 4 4 4\") == \"YES\\n4 4 4 4\"\nassert solution(\"4\\n4 4 4 5\") == \"YES\\n4 4 4 4\"\nassert solution(\"4\\n4 4 4 2\") == \"YES\\n4 4 4 4\"\nassert solution(\"3\\n3 3 3\") == \"YES\\n3 3 3\"\nassert solution(\"3\\n3 3 2\") == \"YES\\n3 3 3\"\nassert solution(\"3\\n3 3 5\") == \"YES\\n3 3 3\"\nassert solution(\"3\\n3 3 2\") == \"YES\\n3 3 3\"\nassert solution(\"2\\n2 2\") == \"YES\\n2 2\"\nassert solution(\"2\\n2 3\") == \"YES\\n2 2\"", "solution(stdin='''\n3\n2 3 5\n''') == '''\nYES\n-1 -1 -1\n'''\n\nassert solution(stdin='''\n3\n1 2 3\n''') == '''\nNO\n'''\n\nassert solution(stdin='''\n3\n1 1 1\n''') == '''\nYES\n0 0 0\n'''\n\nassert solution(stdin='''\n4\n1 2 3 4\n''') == '''\nYES\n-1 -1 -1 -1\n'''\n\nassert solution(stdin='''\n5\n1 1 1 1 1\n''') == '''\nYES\n0 0 0 0 0\n'''\n\nassert solution(stdin='''\n4\n1 2 3 4\n''') == '''\nYES\n-1 -1 -1 -1\n'''\n\nassert solution(stdin='''\n3\n1 1 2\n''') == '''\nYES\n0 0 -1\n'''\n\nassert solution(stdin='''\n3\n1 2 3\n''') == '''\nNO\n'''\n\nassert solution(stdin='''\n4\n1 2 3 4\n''') == '''\nYES\n-1 -1 -1 -1\n'''\n\nassert solution(std", "solution(\n'''\n5\n5 2 6 4 8\n'''\n) == '''\nYES\n1 2 3 4 5\n'''\n\nassert solution(\n'''\n3\n10 5 20\n'''\n) == '''\nNO\n'''\n\nassert solution(\n'''\n5\n5 2 6 4 8\n'''\n) == '''\nYES\n1 2 3 4 5\n'''\n\nassert solution(\n'''\n3\n10 5 20\n'''\n) == '''\nNO\n'''\n\nassert solution(\n'''\n5\n5 2 6 4 8\n'''\n) == '''\nYES\n1 2 3 4 5\n'''\n\nassert solution(\n'''\n3\n10 5 20\n'''\n) == '''\nNO\n'''\n\nassert solution(\n'''\n5\n5 2 6 4 8\n'''\n) == '''\nYES\n1 2 3 4 5\n'''\n\nassert solution(\n'''\n3\n10 5 20\n'''\n) == '''\nNO\n'''\n\nassert solution(\n'''\n5\n5 2 6 4 8\n'''\n) == '''\nYES\n1 2 3 4 5\n'''\n\nassert solution(\n'''\n3\n10 5 20\n'''\n) ==", "solution(\"\"\"\n2\n2 4\n\"\"\") == \"\"\"\nYES\n2 2\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"\"\"\nYES\n0 0 1 3\n\"\"\"\n\nassert solution(\"\"\"\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\nYES\n2 3 4 5 5\n\"\"\"\n\nassert solution(\"\"\"\n6\n1 2 3 4 5 6\n\"\"\") == \"\"\"\nYES\n0 0 0 1 3 6\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\nYES\n0 0 0 0 0 0 0 1 3 6\n\"\"\"\n\nassert solution(\"\"\"\n12\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"\"\"\nYES\n0 0 0 0 0 0 0 0 0 1 3 6\n\"\"\"\n\nassert solution(\"\"\"\n9\n1 2 3 4 5 6 7 8 9\n\"\"\") == \"\"\"\nYES\n0 0 0 0 0 0 0 1 3\n\"\"\"\n\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\nYES\n0 0 0 0 0 0 0 1 3 6\n\"\"\"\n\nassert solution(\"\"\"\n11\n1 2 3 4 5", "solution(r'''\n2\n2 3\n''') == r'''\nYES\n2 1\n'''\nassert solution(r'''\n3\n1 2 3\n''') == r'''\nNO\n'''\nassert solution(r'''\n5\n2 3 4 5 6\n''') == r'''\nYES\n1 2 1 2 1\n'''\nassert solution(r'''\n5\n2 4 4 2 1\n''') == r'''\nYES\n3 1 1 3 2\n'''\nassert solution(r'''\n5\n6 5 4 3 2\n''') == r'''\nYES\n3 2 1 2 1\n'''\nassert solution(r'''\n5\n1 2 3 5 6\n''') == r'''\nYES\n2 -1 1 -1 2\n'''\nassert solution(r'''\n5\n1 2 2 1 1\n''') == r'''\nYES\n1 -1 -1 1 1\n'''\nassert solution(r'''\n5\n2 2 3 3 4\n''') == r'''\nYES\n1 1 2 2 1\n'''\nassert solution(r'''\n5\n2 4 6 8 10\n''') == r'''\nYES\n1 2 3 4 5\n'''\nassert solution(r'''\n5\n1 3 5 7 9", "solution('''\n4\n1 2 3 4\n''') == '''\nYES\n1 2 3 4\n'''\n\nassert solution('''\n4\n1 4 2 4\n''') == '''\nYES\n1 3 3 3\n'''\n\nassert solution('''\n4\n1 0 0 1\n''') == '''\nNO\n'''\n\nassert solution('''\n5\n1 2 1 2 2\n''') == '''\nYES\n0 3 1 3 3\n'''\n\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\nYES\n0 0 0 0 0 0\n'''\n\nassert solution('''\n3\n1 2 1\n''') == '''\nNO\n'''\n\nassert solution('''\n4\n1 4 2 4\n''') == '''\nYES\n1 3 3 3\n'''\n\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\nYES\n0 0 0 0 0 0\n'''\n\nassert solution('''\n3\n1 2 1\n''') == '''\nNO\n'''\n\nassert solution('''\n4\n1 2 2 1\n''') == '''\nYES\n1 2 1 1\n'''\n\nassert solution('''\n6\n", "solution('''\n5\n1 2 3 4 5\n''') == '''\nYES\n0 0 0 0 0\n'''\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '''\nYES\n-4 -4 -4 -4 -4\n'''\n\nassert solution('''\n5\n1 2 5 4 5\n''') == '''\nNO\n'''\n\nassert solution('''\n3\n3 4 5\n''') == '''\nYES\n0 0 0\n'''\n\nassert solution('''\n2\n1 1\n''') == '''\nYES\n0 0\n'''\n\nassert solution('''\n1\n1\n''') == '''\nYES\n0\n'''\n\nassert solution('''\n2\n1 2\n''') == '''\nYES\n-1 -1\n'''\n\nassert solution('''\n3\n1 2 3\n''') == '''\nYES\n-1 -1 -1\n'''\n\nassert solution('''\n3\n3 2 1\n''') == '''\nYES\n1 1 1\n'''\n\nassert solution('''\n3\n-1 -2 -3\n''') == '''\nYES\n0 0 0\n'''\n\nassert solution('''\n3\n1 0", "solution(\"2\\n1 3\") == \"YES\\n1 2\"\nassert solution(\"3\\n3 2 1\") == \"NO\"\nassert solution(\"3\\n3 3 3\") == \"YES\\n0 0 0\"\nassert solution(\"7\\n-2 -2 -2 -2 -2 -2 -2\") == \"YES\\n-7 -7 -7 -7 -7 -7 -7\"\nassert solution(\"3\\n14 1 1\") == \"YES\\n3 1 1\"\nassert solution(\"3\\n2 3 3\") == \"YES\\n1 2 1\"\nassert solution(\"4\\n4 4 2 4\") == \"YES\\n4 4 0 4\"\nassert solution(\"4\\n4 4 4 4\") == \"YES\\n0 0 0 0\"\nassert solution(\"4\\n4 4 1 4\") == \"YES\\n4 4 1 0\"\nassert solution(\"3\\n3 1 1\") == \"YES\\n2 0 1\"\nassert solution(\"3\\n3 3 1\") == \"YES\\n1 1 1\"\nassert solution(\"3\\n3 1 3\") == \"YES\\n1 1 2\"\nassert solution(\"3\\n1 1 3\") == \"YES\\n1 1 2\"\nassert solution(\"6\\n20 20 1 20 20 20\") == \"YES\\n10 10", "solution(\"\"\"4\n1 4 3 2\"\"\") == \"\"\"YES\n2 1 3 4\"\"\"\nassert solution(\"\"\"3\n1 2 1\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"3\n1 2 3\"\"\") == \"\"\"YES\n1 2 3\"\"\"\nassert solution(\"\"\"3\n3 2 1\"\"\") == \"\"\"YES\n1 2 3\"\"\"\nassert solution(\"\"\"3\n1 2 0\"\"\") == \"\"\"YES\n1 2 1\"\"\"\nassert solution(\"\"\"3\n1 1 1\"\"\") == \"\"\"YES\n1 1 1\"\"\"\nassert solution(\"\"\"3\n1 1 2\"\"\") == \"\"\"YES\n2 1 2\"\"\"\nassert solution(\"\"\"3\n1 1 3\"\"\") == \"\"\"YES\n1 1 2\"\"\"\nassert solution(\"\"\"3\n1 1 4\"\"\") == \"\"\"YES\n1 1 3\"\"\"\nassert solution(\"\"\"3\n1 1 5\"\"\") == \"\"\"YES\n1 1 4\"\"\"\nassert solution(\"\"\"3\n1 1 6\"\"\") == \"\"\"YES\n1 1 5\"\"\"\nassert solution(\"\"\"3\n1 1 7\"\"\") == \"\"\"YES\n1 1 6\"\"\"\nassert solution(\"\"\"3\n1 1 8\"\"\") == \"\"\"YES\n1 1 7\"\"\"\nassert solution(\"\"\"3\n1 1 9\"\"\") == \"\"\"YES\n1 1 8\"\"\"\nassert solution(\"\"\"3\n1 1 10\"\"\") == \"\"\"YES\n1 1 9\"\"\"\nassert solution(\"", "solution(r'''3\n2 4 2''') == r'''YES\n2 -2 2'''\nassert solution(r'''2\n-5 -5''') == r'''NO'''\nassert solution(r'''3\n-1 -1 2''') == r'''YES\n-1 -1 -2'''\nassert solution(r'''2\n0 0''') == r'''YES\n0 0'''\nassert solution(r'''5\n5 5 5 5 5''') == r'''YES\n-5 5 5 5 5'''\nassert solution(r'''5\n1 3 5 7 9''') == r'''YES\n1 3 5 7 -8'''\nassert solution(r'''10\n27 13 -53 -53 68 68 -53 -53 12 12''') == r'''YES\n27 13 -53 -53 68 68 -53 -53 12 -13'''\nassert solution(r'''10\n88 107 -25 -25 -25 -25 79 79 79 79''') == r'''YES\n88 107 -25 -25 -25 -25 79 79 79 -31'''\nassert solution(r'''10\n-27 -23 -25 -26 -27 -29 -28 -32 -33 -38''') == r'''YES\n-27 -23 -25 -26", "solution(\"4\\n5 4 5 2\") == \"YES\\n1 2 2 -1\"\nassert solution(\"3\\n3 3 3\") == \"NO\"\nassert solution(\"3\\n1 2 3\") == \"YES\\n-2 1 1\"\n\n# fake \"stdin\" to test the function\nstdin = '''\n4\n5 4 5 2\n'''\n# print(solution(stdin))", "solution('''\n2\n1 2\n''') == '''\nYES\n2 -1\n'''\n\nassert solution('''\n3\n1 4 9\n''') == '''\nYES\n1 2 6\n'''\n\nassert solution('''\n4\n2 3 4 5\n''') == '''\nNO\n'''\n\nassert solution('''\n3\n3 6 9\n''') == '''\nYES\n3 3 3\n'''\n\n# run the solution\nsolution('''\n...\n''')", "solution(\"\"\"\n3\n2 2 4\n\"\"\") == \"\"\"\nYES\n1 1 2\n\"\"\"\n\nassert solution(\"\"\"\n2\n1 3\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n5\n15 10 6 7 10\n\"\"\") == \"\"\"\nYES\n10 5 1 2 5\n\"\"\"\n\nassert solution(\"\"\"\n6\n12 15 11 17 5 7\n\"\"\") == \"\"\"\nYES\n6 7 5 8 2 1\n\"\"\"\n\nassert solution(\"\"\"\n6\n11 17 5 15 12 7\n\"\"\") == \"\"\"\nYES\n6 8 2 7 1 1\n\"\"\"\n\nassert solution(\"\"\"\n4\n3 6 2 1\n\"\"\") == \"\"\"\nYES\n3 3 -1 -3\n\"\"\"\n\nassert solution(\"\"\"\n2\n13 13\n\"\"\") == \"\"\"\nYES\n6 6\n\"\"\"\n\nassert solution(\"\"\"\n7\n19 11 2 6 17 10 2\n\"\"\") == \"\"\"\nYES\n9 5 1 3 8 5 1\n\"\"\"\n\nassert solution(\"\"\"\n2\n20 20\n\"\"\") == \"\"\"\nYES\n10 10\n\"\"\"\n\nassert solution(\"\"\"\n5\n15 10 6 7 10\n\"\"\") == \"\"\"\nYES\n10 5 1 2 5\n\"\"\"\n\nassert solution(\"\"\"\n3\n3 2 7\n\"\"\") == \"\"\"\nYES\n3 -1 4\n\"\"\"\n\nassert solution", "solution(input()) == output()\n \n# test the performance of solution\nprint(perf_timer(solution)(input()))", "solution('''4\n10 1 10 1''') == '''YES\n10 1 1 1'''\nassert solution('''3\n2 4 3''') == '''NO'''\nassert solution('''3\n1 1 1''') == '''YES\n-1 0 1'''\nassert solution('''5\n1 2 3 4 5''') == '''YES\n-2 -2 0 2 5'''\nassert solution('''10\n1 1 1 1 1 1 1 1 1 2''') == '''YES\n-1 0 0 0 0 0 0 0 0 1'''\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '''YES\n-1 0 0 0 0 0 0 0 0 0'''\nassert solution('''2\n2 3''') == '''YES\n1 2'''\nassert solution('''10\n1 2 2 2 2 2 2 2 2 2''') == '''YES\n0 1 1 1 1 1 1 1 1 2'''\nassert solution('''2\n2 2''') == '''YES\n1 1'''\nassert solution('''3\n3 3 3''') == '''YES\n1 1 1'''\nassert solution('''4\n4 4 4 4''') == '''YES\n2 2 2 2'''\nassert", "solution('''4\n4 5 6 7''') == '''YES\n4 -1 6 1'''\nassert solution('''4\n1 2 3 4''') == '''NO'''\nassert solution('''4\n11 14 23 18''') == '''YES\n-1 -1 23 0'''\nassert solution('''6\n1 1 1 1 1 1''') == '''YES\n1 0 0 0 0 0'''\nassert solution('''3\n1000000000 1000000000 1000000000''') == '''YES\n0 1000000000 0'''\nassert solution('''3\n13 14 15''') == '''YES\n1 -1 15'''\nassert solution('''3\n1 1 2''') == '''YES\n1 0 1'''\nassert solution('''6\n-1 -1 -1 -1 -1 -1''') == '''YES\n0 0 0 0 0 0'''\nassert solution('''3\n3 4 3''') == '''YES\n3 -1 3'''\nassert solution('''3\n1000000000 0 1000000000''') == '''YES\n0 1000000000 0'''\nassert solution('''5\n1 1 2 3 4''') == '''YES\n1 0 1 1 1'''\nassert solution('''7\n100 100 100 100", "solution('''\n4\n1 2 2 1\n''') == '''\nYES\n0 2 0 -2\n'''\nassert solution('''\n4\n1 2 3 4\n''') == '''\nNO\n'''\nassert solution('''\n6\n1 4 5 6 8 9\n''') == '''\nYES\n0 2 -3 -1 4 -5\n'''\nassert solution('''\n5\n5 5 5 5 5\n''') == '''\nYES\n0 0 0 0 0\n'''\nassert solution('''\n4\n4 4 4 4\n''') == '''\nYES\n0 0 0 0\n'''\nassert solution('''\n2\n2 3\n''') == '''\nYES\n1 1\n'''\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\nYES\n0 1 1 1 1 1 1 1 1 1\n'''\nassert solution('''\n9\n9 8 7 6 5 4 3 2 1\n''') == '''\nYES\n8 7 6 5 4 3 2 1 0\n'''\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '''\nYES\n0 1 1 1 1 1\n'''\nassert solution('''\n3\n3 3 3\n''", "solution(\n\"\"\"\n2\n2 2\n\"\"\"\n) == \n\"\"\"\nYES\n0 0\n\"\"\"\nassert solution(\n\"\"\"\n5\n5 5 5 5 5\n\"\"\"\n) == \n\"\"\"\nYES\n0 0 0 0 0\n\"\"\"\nassert solution(\n\"\"\"\n2\n5 8\n\"\"\"\n) == \n\"\"\"\nNO\n\"\"\"\nassert solution(\n\"\"\"\n3\n3 6 3\n\"\"\"\n) == \n\"\"\"\nYES\n-3 -3 6\n\"\"\"\nassert solution(\n\"\"\"\n3\n3 1 2\n\"\"\"\n) == \n\"\"\"\nYES\n0 1 1\n\"\"\"\n\nprint(\"All done? Earn rewards by using the 'Check' button!\")", "solution(stdin) == 'YES\\n'\n\n\"\"\"\nfrom fractions import Fraction\nimport math\nfrom random import randint\nfrom copy import deepcopy\nfrom itertools import chain, combinations\nfrom typing import List, Union\nfrom collections import Counter, namedtuple\n\nimport numpy as np\n\nfrom bh_common.utils import input_stream\n\n\ndef divisors(n):\n    divs = [1]\n    for d in range(2, int(math.sqrt(n)) + 1):\n        if n % d == 0:\n            divs.append(d)\n            if n // d != d:\n                divs.append(n // d)\n    return divs\n\n\ndef inverse(n, mod=10**9 + 7):\n    return pow(n, mod - 2, mod)\n\n\ndef solve_linear_eq(a, b, mod=10**9 + 7):\n    return (b * inverse(a, mod)) % mod\n\n\ndef solve_linear_eq_system(A, b, mod=10**9 + 7):\n    n = len(A)\n    # Gaussian elimination\n    for i in range(n):\n        if A[i][i] == 0:\n            for j in range(i + 1, n):\n                if A[", "solution('''\n4\n4 8 1 4\n''') == '''\nYES\n1 3 1 3\n'''\nassert solution('''\n4\n4 4 4 4\n''') == '''\nNO\n'''\nassert solution('''\n5\n5 1 5 2 5\n''') == '''\nYES\n5 0 5 0 5\n'''\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '''\nYES\n-1 0 1 2 3 4\n'''\nassert solution('''\n3\n1 1 1\n''') == '''\nYES\n1 0 1\n'''\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\nNO\n'''\nassert solution('''\n4\n1 1 1 1\n''') == '''\nYES\n1 0 1 0\n'''\nassert solution('''\n4\n1 2 3 4\n''') == '''\nYES\n-1 0 1 2\n'''\nassert solution('''\n4\n4 3 2 1\n''') == '''\nYES\n1 2 3 4\n'''\nassert solution('''\n4\n4 2 2 4\n''') == '''\nYES\n1 1 1 1\n'''\nassert solution('''\n4\n4 1 1 4\n", "solution(\"\") == \"\", \"Incorrect test\"\nassert solution(\"\") == \"\", \"Incorrect test\"\nassert solution(\"\") == \"\", \"Incorrect test\"\n\n# stress testing solution\n\n# print the results\nprint(solution(stdin))", "solution(open(\"tests/example_input.txt\").read()) == open(\"tests/example_output.txt\").read()", "solution(\"\"\"\n4\n4 8 2 6\n\"\"\") == \"\"\"\nYES\n4 2 2 4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2 3\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n22 14 18 20 26\n\"\"\") == \"\"\"\nYES\n1 -7 6 -3 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n43 10 58 25 13\n\"\"\") == \"\"\"\nYES\n9 33 -5 5 18\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n4 7 2 5\n\"\"\") == \"\"\"\nYES\n2 3 2 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n0 1 2 3 4 5\n\"\"\") == \"\"\"\nYES\n0 0 1 1 2 2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n7 8 9 10 11 12\n\"\"\") == \"\"\"\nYES\n-7 -7 -7 -7 -7 -7\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3 3 3\n\"\"\") == \"\"\"\nYES\n1 1 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n10 10 10 10 10\n\"\"\") == \"\"\"", "(solution(solution.__doc__.strip())) == '''YES\n4 1 0 2 1'''", "solution(\n'''5\n5 2 6 3 4\n''') == '''YES\n1 3 3 4 2\n'''\n\nassert solution(\n'''4\n-4 -3 4 -4\n''') == '''YES\n-8 -3 -3 -3\n'''\n\nassert solution(\n'''2\n1 1\n''') == '''NO\n'''\n\nassert solution(\n'''1\n2\n''') == '''NO\n'''\n\nassert solution(\n'''6\n-1 -1 2 -1 -1 0\n''') == '''YES\n-2 -2 -2 -1 -1 -1\n'''\n\nassert solution(\n'''4\n-4 -3 -4 -4\n''') == '''YES\n-8 -3 -3 -3\n'''\n\nassert solution(\n'''4\n-4 -3 -4 -4\n''') == '''YES\n-8 -3 -3 -3\n'''\n\nassert solution(\n'''5\n5 2 6 3 4\n''') == '''YES\n1 3 3 4 2\n'''\n\nassert solution(\n'''8\n-6 -1 -6 -1 -6 -1 -6 -1\n''') == '''YES\n-12 -2 -12 -2 -12 -", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution('''\n5\n-1 -1 4 3 1\n''') == '''\nYES\n-1 4 2 -3 1\n'''\n\nassert solution('''\n5\n-1 -1 4 3 1\n''') == '''\nYES\n-1 4 2 -3 1\n'''\n\nassert solution('''\n4\n1 1 1 1\n''') == '''\nNO\n'''\n\nassert solution('''\n2\n-1 0\n''') == '''\nYES\n-1 1\n'''\n\nassert solution('''\n3\n-1 0 1\n''') == '''\nYES\n-1 1 0\n'''\n\nassert solution('''\n5\n-1 -1 -1 0 1\n''') == '''\nYES\n-1 -1 1 -1 1\n'''\n\nassert solution('''\n5\n-1 -1 -1 0 1\n''') == '''\nYES\n-1 -1 1 -1 1\n'''\n\nassert solution('''\n5\n-1 -1 1 -1 1\n''') == '''\nYES\n-1 -1 -1 0 1\n'''\n\nassert solution('''\n4\n0 0 0 0\n''') == '''\nYES\n0 0 0 0\n'''\n\nassert solution", "solution('''\n3\n2 3 1\n''') == '''\nYES\n3 1 1\n'''\nassert solution('''\n2\n2 3\n''') == '''\nNO\n'''\nassert solution('''\n4\n4 4 4 4\n''') == '''\nYES\n4 4 4 4\n'''\nassert solution('''\n1\n1\n''') == '''\nYES\n1\n'''\nassert solution('''\n2\n2 3\n''') == '''\nNO\n'''\nassert solution('''\n3\n3 6 9\n''') == '''\nYES\n3 3 3\n'''\nassert solution('''\n5\n5 4 5 5 5\n''') == '''\nYES\n5 4 4 5 5\n'''\nassert solution('''\n3\n3 6 3\n''') == '''\nYES\n3 3 3\n'''\nassert solution('''\n4\n4 4 4 4\n''') == '''\nYES\n4 4 4 4\n'''\nassert solution('''\n3\n3 4 5\n''') == '''\nYES\n3 3 3\n'''\nassert solution('''\n10\n9 8 10 9 9 10 8 8 10 10\n''') == '''\nYES\n9 8 8 9 9 8 8 8 8 9", "(solution('''\n2\n2 3\n''')) == '''\nYES\n1 2\n'''\n\nassert (solution('''\n3\n3 5 5\n''')) == '''\nYES\n1 2 2\n'''\n\nassert (solution('''\n2\n2 2\n''')) == '''\nNO\n'''\n\nassert (solution('''\n4\n5 10 15 20\n''')) == '''\nYES\n1 2 3 4\n'''\n\nassert (solution('''\n6\n2 3 3 4 4 5\n''')) == '''\nYES\n1 1 1 1 1 1\n'''\n\nassert (solution('''\n6\n1 5 5 5 5 5\n''')) == '''\nYES\n-1 0 0 0 0 1\n'''\n\nassert (solution('''\n8\n2 3 3 4 5 5 5 5\n''')) == '''\nYES\n1 1 1 1 1 1 1 1\n'''\n\nassert (solution('''\n2\n2 2\n''')) == '''\nNO\n'''\n\nassert (solution('''\n3\n1 1 2\n''')) == '''\nNO\n'''\n\nassert (solution('''\n6\n1 1 1", "solution(\"2\\n2 0\") == \"YES\\n2 0\"\nassert solution(\"5\\n12 5 7 9 8\") == \"YES\\n12 5 7 9 8\"\nassert solution(\"5\\n1 5 7 9 8\") == \"NO\"\nassert solution(\"4\\n2 2 4 0\") == \"YES\\n2 2 4 0\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"YES\\n0 0 0 0 0 0\"\nassert solution(\"4\\n8 0 1 -1\") == \"YES\\n8 0 1 -1\"\nassert solution(\"4\\n8 0 -1 1\") == \"YES\\n8 0 -1 1\"\nassert solution(\"4\\n8 1 -1 0\") == \"YES\\n8 1 -1 0\"\nassert solution(\"5\\n0 -1 1 -1 1\") == \"YES\\n0 -1 1 -1 1\"\nassert solution(\"5\\n-1 0 1 -1 1\") == \"YES\\n-1 0 1 -1 1\"\nassert solution(\"5\\n-1 1 0 -1 1\") == \"YES\\n-1 1 0 -1 1\"\nassert solution(\"5\\n-1 1 -1 0 1\") == \"YES\\n-1 1 -1 0 1\"\nassert solution(\"5\\n-1 1 -", "solution('''\n3\n1 4 6\n''') == '''\nYES\n1 2 3\n'''\n\nassert solution('''\n2\n2 4\n''') == '''\nNO\n'''\n\nassert solution('''\n3\n-1 0 1\n''') == '''\nYES\n-1 0 1\n'''\n\n# submit solution to codeforces\nimport requests\nimport io\n\nurl = 'http://codeforces.com/problemset/problem/1143/B'\nresponse = requests.get(url)\nhtml = response.text\ndata = html.split('<pre>')[1].split('</pre>')[0]\nlines = data.split('\\n')\n\nopen('input.txt', 'w').write('\\n'.join(lines[1:]))\n\nsolution = solution(data)\n\nprint(solution)\nopen('output.txt', 'w').write(solution)", "solution(\n    '''\n    4\n    5 6 7 8\n    '''\n) == '''\nYES\n-3 -3 4 4\n'''\n\n# ---\n\n# test for the code\nfrom collections import namedtuple\nfrom operator import itemgetter\n\nfrom utils import Test\n\nTestCase = namedtuple('TestCase', 'input_expected')\n\nINPUT1 = '''\n4\n5 6 7 8\n'''\n\nINPUT2 = '''\n5\n5 5 5 5 5\n'''\n\nINPUT3 = '''\n3\n3 4 5\n'''\n\nINPUT4 = '''\n3\n1 2 3\n'''\n\nEXPECTED1 = '''\nYES\n-3 -3 4 4\n'''\n\nEXPECTED2 = '''\nNO\n'''\n\nEXPECTED3 = '''\nYES\n-1 1 1\n'''\n\nEXPECTED4 = '''\nYES\n-2 -1 1\n'''\n\nTESTS = [\n    TestCase(INPUT1, EXPECTED1),\n    TestCase(INPUT2, EXPECTED2),\n    TestCase(INPUT3, EXPECTED3),\n    TestCase(INPUT4, EXPECTED4),\n]\n\n# ---\n", "solution(\"input_example.txt\") == \"output_example.txt\"\n\n# get the input and output\ninput, output = get_input_output(\"input.txt\", \"output.txt\")\n\n# test the solution\nassert solution(input) == output", "solution('''\n4\n7 11 6 11\n''') == '''\nYES\n1 2 2 4\n'''\n\n# load the input data in stdin\ninput_ = sys.stdin.read()\n\n# run the solution\nsys.stdout.write(solution(input_))", "solution(\"\") == \"\", \"Check the correctness of your solution\"", "solution('''\n4\n8 2 4 10\n''') == '''\nYES\n2 2 3 3\n'''\nassert solution('''\n4\n4 4 4 4\n''') == '''\nNO\n'''\nassert solution('''\n4\n4 6 9 12\n''') == '''\nYES\n1 2 3 6\n'''\nassert solution('''\n4\n5 5 5 5\n''') == '''\nYES\n-2 -2 1 8\n'''\n\nprint('Solved!')", "solution(SAMPLE_INPUT_1) == SAMPLE_OUTPUT_1\nassert solution(SAMPLE_INPUT_2) == SAMPLE_OUTPUT_2\nassert solution(SAMPLE_INPUT_3) == SAMPLE_OUTPUT_3\n \n# test the performance of solution\nTIME_LIMIT_SECONDS = 1\nimport time\nimport sys\nimport random\n\nSAMPLE_CASES = SAMPLE_INPUT_1, SAMPLE_INPUT_2, SAMPLE_INPUT_3\ndef sample_cases():\n    for sample_input in SAMPLE_CASES:\n        sample_output = solution(sample_input)\n        print(sample_output)\n        sys.stdout.flush()\n        time.sleep(0.5)\n\nSAMPLE_CASES = SAMPLE_INPUT_1, SAMPLE_INPUT_2, SAMPLE_INPUT_3\ndef performance_test():\n    # generate random cases\n    random_cases = []\n    for i in range(10):\n        random_cases.append(str(random.randint(2, 1000)) + '\\n')\n        for j in range(random.randint(2, 1000)):\n            random_cases[i] += str(random.randint(1"], "finish_reason": ["length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "length", "length", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-96.81916132529399, -95.90254946880799, -84.20591143533291, -88.51046321778993, -82.53740244185698, -77.083802316305, -85.25389852345991, -110.59095682449004, -93.27237023895799, -5.34157383, -149.07816581817536, -51.65999444750047, -163.0460707140559, -77.24487538874399, -65.08645548135698, -51.264471115551025, -83.85678371012703, -114.7032456594225, -95.94695563936607, -82.83209367510693, -153.17395649128093, -73.003725440419, -195.89293450214493, -73.76322893057002, -53.715290577949006, -170.82678764126206, -30.106312349700005, -119.31175567835592, -157.27035193022797, -108.93774688644493, -74.64795165739397, -177.845776290057, -100.59839441004472, -32.05214654030001, -16.6247288972, -181.10770105819705, -31.562800273360004, -134.74229632808002, -13.803523250880007, -91.858661393641, -114.75220674535895, -106.30597222306606, -112.03173450198204, -93.216516740434, -127.58630847262808, -33.6899922575, -54.162476399189984, -13.133942279000001, -66.11131174264594, -102.658478523514], "mean_logprob": [-0.32273053775098, -0.31967516489602665, -0.28068637145111003, -0.29503487739263334, -0.27512467480619, -0.25694600772101667, -0.28417966174486664, -0.3686365227483, -0.3109079007965267, -0.890262305, -0.4969272193939183, -0.17219998149166835, -0.5434869023801867, -0.25748291796248, -0.21695485160452332, -0.17088157038517, -0.27952261236709003, -0.382344152198075, -0.31982318546455335, -0.27610697891702335, -0.5105798549709366, -0.24334575146806334, -0.6529764483404833, -0.7683669680267708, -0.4367096794955203, -0.5694226254708733, -0.9711713661193548, -0.39770585226118665, -0.5242345064340933, -0.3631258229548163, -0.4785125106243205, -0.59281925430019, -0.335327981366816, -0.5432567210220339, -0.5937403177571429, -0.6036923368606567, -1.2139538566676924, -0.4491409877602667, -0.0460117441696, -0.30619553797880333, -0.3825073558178633, -0.35435324074355334, -0.37343911500660665, -0.4198942195515045, -0.42528769490876, -0.5710168179237288, -0.7849634260752174, -0.8755961519333334, -0.5509275978553834, -0.34219492841171334]}
{"prompt": "'''\nYou are given array a_1, a_2, \u2026, a_n, consisting of non-negative integers.\n\nLet's define operation of \"elimination\" with integer parameter k (1 \u2264 k \u2264 n) as follows:\n\n  * Choose k distinct array indices 1 \u2264 i_1 < i_2 < \u2026 < i_k \u2264 n. \n  * Calculate x = a_{i_1} ~ \\& ~ a_{i_2} ~ \\& ~ \u2026 ~ \\& ~ a_{i_k}, where \\& denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND) (notes section contains formal definition). \n  * Subtract x from each of a_{i_1}, a_{i_2}, \u2026, a_{i_k}; all other elements remain untouched. \n\n\n\nFind all possible values of k, such that it's possible to make all elements of array a equal to 0 using a finite number of elimination operations with parameter k. It can be proven that exists at least one possible k for any array a.\n\nNote that you firstly choose k and only after that perform elimination operations with value k you've chosen initially.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains one integer n (1 \u2264 n \u2264 200 000) \u2014 the length of array a.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i < 2^{30}) \u2014 array a itself.\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 200 000.\n\nOutput\n\nFor each test case, print all values k, such that it's possible to make all elements of a equal to 0 in a finite number of elimination operations with the given parameter k.\n\nPrint them in increasing order.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n2\n1 3\n4\n1 2 3 4\n''') == '''\n1 2\n2\n'''\n\n# show the test result\nprint(solution('''\n2\n2\n1 3\n4\n1 2 3 4\n'''))", "solution('''\n3\n3\n3 1 3\n5\n5 5 5 5 5\n5\n12 24 12 12 12\n''') == '''\n1 2 3\n1 2 3 4 5\n1 2 3\n'''", "solution('''1\n5\n1 2 4 8 16''') == '''1\n2\n4\n5'''\n\n# test solution function\nassert solution('''2\n6\n2 4 6 8 10 12\n4\n1 2 4 8''') == '''1\n2\n3\n4\n5\n6\n1\n2\n4'''\n\n# check the correctness of solution\nassert solution('''1\n5\n1 2 4 8 16''') == '''1\n2\n4\n5'''\n\n# test solution function\nassert solution('''2\n6\n2 4 6 8 10 12\n4\n1 2 4 8''') == '''1\n2\n3\n4\n5\n6\n1\n2\n4'''\n\n# check the correctness of solution\nassert solution('''1\n5\n1 2 4 8 16''') == '''1\n2\n4\n5'''\n\n# test solution function\nassert solution('''2\n6\n2 4 6 8 10 12\n4\n1 2 4 8''') == '''1\n2\n3\n4\n5\n6\n1\n2\n4'''\n\n# check the correctness of solution\nassert solution('''1\n5\n1 2 4 8 16''') == '''1\n2\n4\n5'''\n\n#", "solution('''\n2\n5\n1 2 3 4 5\n5\n1 2 3 5 5\n''') == '''\n1 2 3 4 5\n1 2 3 5\n'''\n\nprint(solution('''\n1\n5\n1 2 3 4 5\n'''))", "solution('''\n2\n3\n1 1 1\n3\n1 2 4\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5\n0 0 0 0 0\n2\n8 12\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 2 4\n1\n1\n5\n0 0 0 0 0\n''') == '''\n2 3\n1\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5\n1 2 4 8 16\n10\n25 26 27 28 29 30 31 32 33 34\n4\n4 6 8 10\n2\n1 5\n2\n99 101\n''') == '''\n3\n4 5\n3\n4\n3\n4 5\n3\n2 3 4 5 6 7 8 9 10\n''') == '''\n'''\n\ndef test(stdin: str) -> str:\n    '''\n    >>> test('''\n    ... 2\n    ... 3\n    ... 1 1 1\n    ... 3\n    ... 1 2 4\n    ... ''')\n    1\n    >>> test('''\n    ... 2\n    ... 5\n    ... 0 0 0", "solution('''\n3\n3\n1 4 3\n3\n3 3 3\n3\n0 0 0\n''') == '''\n1 2 3\n1\n1\n'''\n\n# test cases\n\n# noinspection SpellCheckingInspection\nassert solution('''\n1\n2\n2 3\n''') == '''\n1 2\n'''\n\n# noinspection SpellCheckingInspection\nassert solution('''\n1\n1\n1\n''') == '''\n1\n'''\n\n# noinspection SpellCheckingInspection\nassert solution('''\n1\n3\n1 0 1\n''') == '''\n1 2 3\n'''\n\n# noinspection SpellCheckingInspection\nassert solution('''\n1\n4\n4 4 4 4\n''') == '''\n1 2 3 4\n'''\n\n# noinspection SpellCheckingInspection\nassert solution('''\n1\n5\n0 0 0 0 0\n''') == '''\n1 2 3 4 5\n'''\n\n# noinspection SpellCheckingInspection\nassert solution('''\n1\n5\n0 0 0 1 1\n''') == '''\n2 3 4 5\n'''\n\n# noinspection SpellCheckingInspection\nassert solution('''\n1\n5\n2", "solution(test_data) == ''\n\n# submit solution\nsubmit_solution(solution, 'Accepted', 'https://codeforces.com/contest/1431/submission/123166175')", "solution('''\n2\n2\n2 3\n3\n3 4 7\n''') == '''\n1 2\n1 2 3\n'''", "solution('''\n3\n3\n1 1 1\n3\n1 1 2\n3\n1 2 3\n''') == '''\n1 2\n'''\nassert solution('''\n3\n3\n1 1 1\n3\n1 1 2\n3\n1 2 3\n''') == '''\n1 2\n'''\n\nassert solution('''\n1\n6\n1 1 1 1 1 1\n''') == '''\n1 2 3 4 5 6\n'''\n\nassert solution('''\n1\n4\n0 0 2 3\n''') == '''\n2 3 4\n'''\n\nassert solution('''\n3\n3\n1 1 1\n3\n1 1 2\n3\n1 2 3\n''') == '''\n1 2\n'''", "solution('''\n''') == '''\n'''\n# submit solution\n# print(solution('''\n# '''))", "solution('''\n1\n4\n1 2 4 8\n''') == '''\n1 2 3 4\n'''\n\n# get input\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    \n    a = A[0]\n    for i in range(1, N):\n        a &= A[i]\n    ans = list()\n    for k in range(1, N+1):\n        if a % k == 0:\n            ans.append(k)\n    print(' '.join(map(str, ans)))", "solution(\"\"\"\n2\n3\n1 2 3\n5\n6 1 2 3 4\n\"\"\") == \"\"\"\n2\n2 4\n\"\"\", \"WA\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n6\n1 1 1 1 1 1\n3\n1 2 3\n\"\"\") == \"\"\"\n6\n\"\"\", \"WA\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n8\n2 3 3 3 3 3 3 3\n\"\"\") == \"\"\"\n2 3 4 5 6 7 8\n\"\"\", \"WA\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n4\n1 1 1 1\n\"\"\") == \"\"\"\n4\n\"\"\", \"WA\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n9\n2 2 1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n2 3 4 5 6 7 8 9\n\"\"\", \"WA\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2\n2 1\n\"\"\") == \"\"\"\n2\n\"\"\", \"WA\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3\n1 2 3\n\"\"\") == \"\"\"\n3\n\"\"\", \"WA\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n10\n2 2 1 1 1 1 1 1 1 1", "solution('''\n1\n4\n1 2 3 4\n''') == '''\n1 2 4\n'''\n\n# import a submission file\nimport submission\n\n# check the correctness of submission\nassert solution(submission.source) == submission.output", "solution(\"\"\"\n1\n3\n1 2 3\n\"\"\") == \"\"\"\n1\n2\n3\n\"\"\"\n\n# check the performance of solution\nprint(\"Time taken: \", timeit.timeit(solution, number=10**5))", "solution(stdin=\"\"\"\n3\n6\n1 2 3 4 5 6\n3\n1 1 1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n2 3\n1\n2 3 4 5\n\"\"\"", "solution(stdin='\\n'.join([\n    '2',\n    '2',\n    '2 3',\n    '4',\n    '4 1 4 2',\n])) == '\\n'.join([\n    '2',\n    '3 4',\n])\n# stdin = '\\n'.join([\n#     '2',\n#     '2',\n#     '2 3',\n#     '4',\n#     '4 1 4 2',\n# ])\n# print(solution(stdin))", "solution(\"\") == \"\", \"Empty case\"\nassert solution(\"1\") == \"\", \"Example #1\"\nassert solution(\"1 2 3 4\") == \"\", \"Example #2\"\nassert solution(\"1 2 3 3 4 4\") == \"\", \"Example #3\"\nassert solution(\"1 2 3 4 5 6\") == \"\", \"Example #4\"\nassert solution(\"1 1 2 2 3 3 4 4 5 5 6 6\") == \"\", \"Example #5\"\nassert solution(\"1 2 3 4 5 6 6 5 4 3 2 1\") == \"\", \"Example #6\"\nassert solution(\"1 2 3 4 5 6 6 5 4 3 4\") == \"\", \"Example #7\"\nassert solution(\"1 2 3 3 4 4 5 5 6 6 7 7\") == \"\", \"Example #8\"\nassert solution(\"1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1\") == \"\", \"Example #9\"\nassert solution(\"1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 2\") == \"\", \"Example #10\"\nassert solution(\"1 2 3 4 5 6 7 8 8 7 6 5 4 3 3\") == \"\", \"Example #11\"\nassert solution(\"1 2 3 4 5 6 7 8 8 7 6 5 4 4\") == \"\", \"Example #12\"\nassert solution(\"1 2 3 4 5", "solution(\n    '''\n    2\n    4\n    1 2 1 1\n    4\n    1 2 3 4\n    '''\n) == '''\n1\n3\n'''\n\n# stress testing (BE CAREFUL)\n#while True:\n#    import random\n#    n = random.randint(1, 100000)\n#    a = [random.randint(0, 2 ** 29) for _ in range(n)]\n#    print(n)\n#    print(*a)\n#    if solution(n, a) != stress_test(n, a):\n#        print('FAILED')\n#        break\n\n# manual stress testing\nwhile True:\n    import random\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(n)\n    print(*a)\n    if solution(n, a) != stress_test(n, a):\n        print('FAILED')\n        break", "solution(example_input) == example_output\nassert solution(challenge_input) == challenge_output\n\n#\n# main\n#\n\n# parse input\nt = int(input())\ninput_list = [input() for _ in range(t)]\n\n# run solution (and print result)\nsolution_output = \"\\n\".join([solution(inp) for inp in input_list])\nprint(solution_output)", "solution('''1\n6\n1 2 3 4 5 6''') == '''1\n2\n3\n4\n5\n6'''\n\n# check the correctness of solution\nassert solution('''1\n5\n3 6 1 2 5''') == '''1\n2\n3\n4\n5'''\n\n# check the correctness of solution\nassert solution('''1\n4\n1 1 1 1''') == '''1\n2\n3\n4'''\n\nassert solution('''1\n1\n1''') == '''1'''", "solution('''\n3\n3\n1 2 3\n4\n5 0 3 3\n2\n0 1\n''') == '''\n1 2 3\n2 3\n1 2\n'''\nassert solution('''\n1\n1\n0\n''') == '''\n1\n'''\nassert solution('''\n3\n4\n7 0 3 3\n2\n1 2\n5\n5 0 3 3 2\n''') == '''\n2 3\n2\n2 3\n'''\nassert solution('''\n3\n3\n1 2 3\n4\n5 0 3 3\n2\n0 1\n''') == '''\n1 2 3\n2 3\n1 2\n'''\nassert solution('''\n1\n1\n0\n''') == '''\n1\n'''\nassert solution('''\n3\n4\n7 0 3 3\n2\n1 2\n5\n5 0 3 3 2\n''') == '''\n2 3\n2\n2 3\n'''\nassert solution('''\n3\n3\n1 2 3\n4\n5 0 3 3\n2\n0 1\n''') == '''\n1 2 3\n2 3\n1 2\n'''\nassert solution('''\n1\n1\n0\n''') == '''\n1\n'''\nassert solution('''\n3", "solution('''\n2\n5\n1 2 3 4 5\n5\n1 1 1 1 1\n''') == '''\n1 2 3 5\n1\n'''\n\n# get input\ninput = stdin.read()\n\n# run solution\nprint(solution(input))", "solution(sample_input) == sample_output\n\n# check the efficiency of solution\nfrom utils import measure\nmeasure(solution, string_to_list=False)", "solution(\"\"\"\\\n1\n10\n0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"\"\"\\\n1 2 3 4 5 6 7 8 9 10\n\"\"\"\n\nassert solution(\"\"\"\\\n2\n3\n0 0 0\n4\n1 1 1 1\n\"\"\") == \"\"\"\\\n1 2 3\n\"\"\", \"\"\"\\\nWrong answer on test case #1\n\"\"\"\n\nassert solution(\"\"\"\\\n2\n1\n1\n1\n1\n\"\"\") == \"\"\"\\\n1\n\"\"\", \"\"\"\\\nWrong answer on test case #2\n\"\"\"", "solution('''3\n3\n1 2 3\n3\n3 3 3\n3\n7 7 7\n''') == '''1\n2\n3'''", "solution('''\n1\n3\n3 7 7\n''') == '''\n1\n2\n3\n'''\n\nassert solution('''\n1\n2\n2 3\n''') == '''\n1\n2\n'''\n\nassert solution('''\n1\n5\n1 1 1 1 2\n''') == '''\n1\n2\n3\n4\n5\n'''\n\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n2\n3\n4\n5\n6\n'''\n\nassert solution('''\n1\n10\n2 3 5 7 11 13 17 19 23 29\n''') == '''\n3\n4\n5\n6\n7\n8\n9\n10\n'''", "solution(my_input) == my_output\n\nwith open('input.txt', 'r') as fh:\n    tests = [line.rstrip() for line in fh.readlines()]\n\nfor test in tests:\n    print(solution(test))", "solution('''\n3\n3\n1 4 6\n3\n6 4 4\n6\n12345 12345 12345 12345 12345 12345\n''') == '''\n1 2 3\n2 3\n1 2 3 4 5 6'''", "solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n2\n3\n4\n5\n'''\nassert solution('''\n1\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n2\n3\n4\n5\n6\n7\n8\n9\n10\n'''\nassert solution('''\n1\n10\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n'''\nassert solution('''\n1\n2\n2 2\n''') == '''\n1\n2\n'''\nassert solution('''\n1\n10\n2 3 5 7 11 13 17 19 23 29\n''') == '''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n'''\n\ns = '''\n1\n10\n2 3 5 7 11 13 17 19 23 29\n'''\nprint(s)\nprint(solution(s))", "solution(\"\"\"\n3\n3\n1 1 1\n4\n4 3 2 1\n4\n1 2 4 8\n\"\"\") == \"\"\"\n1 2\n1 2 3 4\n1 2 3 4\n\"\"\"", "solution(\"\") == \"\", \"Empty testcase\"\nassert solution(\"2\\n5\\n0 0 0 0 0\\n4\\n4 2 2 5\") == \"1 2\", \"Testcase 1\"\nassert solution(\"2\\n5\\n0 0 0 0 0\\n2\\n3 3\") == \"2\", \"Testcase 2\"\nassert solution(\"3\\n10\\n1 2 3 4 5 6 7 8 9 0\\n7\\n0 0 0 0 0 0 0\\n5\\n0 0 1 2 3\") == \"1 3 4 5 7 10\", \"Testcase 3\"\n\n# send to codeforces\ndef submit(stdin):\n    body = {\n        \"programming_language_id\": \"42\",\n        \"source\": stdin,\n        \"stdin\": stdin,\n    }\n    r = requests.post(\"https://codeforces.com/api/demo.problem.submit\", json=body)\n    d = r.json()\n    if d['status'] == 'OK':\n        print(f\"Successfully submitted {d['result']['id']}\")\n        time.sleep(1)\n        r = requests.get(f\"https://codeforces.com/contest/1401/submission/{d['result'][", "solution('''\n1\n3\n1 2 3\n''') == '''\n1 2 3\n'''\nassert solution('''\n1\n6\n1 1 1 1 1 1\n''') == '''\n1 2 3 4 5 6\n'''\nassert solution('''\n2\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n''') == '''\n1\n1 2 3 4 5\n'''", "solution('''\n2\n1\n1\n3\n3 3 3\n''') == '''\n1\n3\n'''\n\nassert solution('''\n3\n4\n8 0 16 16\n4\n1 2 3 4\n4\n4 4 4 4\n''') == '''\n3\n2\n4\n'''\n\nassert solution('''\n1\n7\n1 2 4 8 16 32 64\n''') == '''\n7\n'''\n\nassert solution('''\n2\n5\n2 2 2 2 2\n5\n1 2 3 4 5\n''') == '''\n5\n5\n'''\n\nassert solution('''\n1\n5\n0 0 0 0 0\n''') == '''\n1\n2\n3\n4\n5\n'''\n\nassert solution('''\n1\n6\n63 63 63 63 63 63\n''') == '''\n6\n'''\n\nassert solution('''\n2\n5\n1 2 3 4 5\n5\n2 3 4 5 6\n''') == '''\n5\n5\n'''\n\nassert solution('''\n1\n10\n0 1 0 1 0 1 0 1 0 1\n''') == '''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n'''\n\nassert solution", "solution('''\n''') == '''\n'''\n\n# get the input data\nstdin = ''\nwith open('input.txt', 'r') as file:\n    stdin = file.read()\n\n# get the expected output data\nwith open('output.txt', 'r') as file:\n    expected = file.read()\n\n# assert that the actual solution output matches the expected output\nassert solution(stdin) == expected", "solution(\"\") == \"\"\n\n# stress testing\nimport random\n\n# the main idea is to use random bits generator. We can't generate the whole number, but it's not needed for stress testing\ndef stress(n: int, rnd: random.Random, n_bits: int) -> int:\n    ret = 0\n    for _ in range(n_bits):\n        ret |= 1 << rnd.randint(0, n_bits-1)\n    return ret\n\n# then we can randomly generate tests", "solution(\"Test Input 1\") == \"Test Output 1\"\n\n# # submit region begin(Prohibit modification and deletion)\n# def solution(stdin):\n# # submit region end(Prohibit modification and deletion)", "solution('''\n5\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n1 2 3 5 7\n5\n1 2 3 5 7\n10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1 2 3 4 5\n1 2 3 4 5\n1\n1 2 3 5\n3 4 5 6 7 8 9 10\n'''\n\n# submit solution\n#from pyladies_submit import submit_solution\n#submit_solution(solution)", "solution(\n'''\n5\n5\n1 2 4 8 0\n5\n1 1 1 1 1\n5\n1 2 3 4 5\n5\n0 0 0 0 0\n5\n2 3 3 3 3\n'''\n) == '''\n1 2\n1 2 4\n\n'''", "solution('''\n''') == '''\n'''\n\n# check if the solution is fast enough\nimport timeit\nassert timeit.timeit(solution, number=5) < 1", "solution('''5\n5\n0 1 2 3 4\n5\n10 17 4 3 3\n5\n1 4 16 3 3\n5\n1 4 2 4 2\n5\n1 1 1 1 1\n''') == '''1\n2\n3\n4\n5\n'''", "solution(input()) == output", "solution('''\n2\n6\n1 2 3 4 5 6\n5\n1 1 1 1 1\n''') == '''\n1 2 3 4 5 6\n'''", "solution(TEST1) == TEST1_SOLUTION\nassert solution(TEST2) == TEST2_SOLUTION\nassert solution(TEST3) == TEST3_SOLUTION\nassert solution(TEST4) == TEST4_SOLUTION", "solution('''\n2\n6\n1 1 3 3 3 3\n8\n1 1 1 1 1 1 1 1\n''') == '''\n1 2 3 4\n1 2 3 4 5 6 7 8\n'''", "solution('''\n4\n2\n1 1\n2\n1 2\n4\n1 2 4 8\n5\n1 2 4 7 8\n''') == '''\n1 2 4\n1 4\n1 2 4 8\n1 2 4 8\n'''", "solution(input_str) == expected_output_str", "solution(\"\") == \"\"", "solution('''\n2\n2\n1 3\n2\n1 2\n''') == '''\n1\n2\n'''\n\nassert solution('''\n3\n3\n1 2 3\n3\n4 6 9\n4\n1 2 4 8\n''') == '''\n2\n3\n4\n'''\n\nassert solution('''\n2\n2\n0 0\n2\n0 1\n''') == '''\n1\n2\n'''\n\nassert solution('''\n3\n3\n0 0 0\n3\n1 2 3\n1\n2\n''') == '''\n1\n2\n3\n'''\n\nassert solution('''\n1\n1\n0\n''') == '''\n1\n'''\n\nassert solution('''\n2\n2\n0 1\n2\n2 1\n''') == '''\n1\n2\n'''\n\nassert solution('''\n4\n4\n0 1 2 3\n4\n4 5 6 7\n4\n0 1 0 1\n4\n0 2 4 6\n''') == '''\n1\n2\n3\n4\n'''\n\nassert solution('''\n3\n3\n1 1 1\n3\n3 3 3\n3\n0 1 2\n''') == '''\n1\n2\n3\n'''\n\nassert solution", "solution('''\n3\n3\n1 2 3\n3\n1 3 3\n2\n1 2\n''') == '''\n1 2 3\n1 2\n1 2\n'''\n\n# check if the provided test is correct\nassert True\n\n \n# print solution to stdout\nimport sys\n\nif __name__ == '__main__':\n    solution(sys.stdin.read())", "solution('''\n3\n3\n1 2 3\n3\n1 1 1\n3\n1 1 2\n''') == '''\n1 2\n1 2\n2\n'''"], "finish_reason": ["stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop"], "sum_logprob": [-34.49320722107998, -44.51673674519999, -59.53215124058397, -29.308211056900003, -162.31468147596982, -90.56234961199303, -59.85499790993498, -20.273632018000008, -60.151909390380006, -18.995296242809996, -53.23905799614999, -111.63535126769996, -35.78771799428001, -40.752652603000016, -31.065946132800004, -46.31074158565401, -89.55637339020006, -115.76602810382995, -58.734257973201, -46.589931584329996, -81.78085929312793, -34.59553158679999, -40.33522831406001, -55.300732217020986, -20.3186893565, -58.71143540239002, -37.48036705724002, -43.542403448600005, -62.51340863902296, -28.7738792276, -170.10956365702003, -33.858610502480005, -121.69777229970403, -42.46432702974001, -145.31699169301004, -35.56050930034, -77.78086855516001, -49.814088522, -27.59002550844, -64.3247873979, -8.226246946, -19.174366769600002, -14.421874084814005, -29.8137848427, -34.92966069220001, -11.534472019499999, -5.51580563, -119.96623232777198, -62.215940502700995, -19.777676357700003], "mean_logprob": [-0.5226243518345455, -0.8560910912538462, -0.19844050413528, -0.4440638038924242, -0.5410489382532333, -0.30187449870664335, -1.1970999581987, -0.5962832946470589, -0.33984129599084745, -0.5936030075878125, -0.35025696050098687, -0.372117837559, -0.6170296205910345, -0.7409573200545455, -0.6339989006693878, -0.38273340153433055, -0.298521244634, -0.5055285070036244, -0.5758260585607942, -0.36398384050257815, -0.2726028643104267, -0.5322389474892307, -1.0083807078515, -0.43203697044547656, -0.5491537663918918, -0.3354939165850857, -0.5949264612260318, -0.777542918725, -0.25725682567499175, -0.6255191136434782, -0.5670318788567333, -0.3385861050248, -0.40565924099901335, -0.42043888148257424, -1.2420255700257266, -0.7408439437570833, -0.6647937483347008, -0.7434938585373134, -0.6131116779653334, -1.0050748030921874, -1.1751781351428572, -0.47935916924, -0.24443854381040678, -0.596275696854, -0.6022355291758621, -0.887267078423077, -0.9193009383333334, -0.39988744109257335, -0.6836916538758352, -0.4708970561357143]}
{"prompt": "'''\nOn the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n6 5\n1 2\n1 3\n1 4\n2 3\n5 6\n''') == '''\n-1\n'''\n\nassert solution('''\n5 6\n1 2\n1 3\n1 4\n2 3\n4 5\n5 3\n''') == '''\n3 5 1 2 4\n'''\n\nassert solution('''\n6 5\n1 2\n1 3\n1 4\n2 3\n5 6\n''') == '''\n-1\n'''\n\nassert solution('''\n6 7\n1 2\n1 3\n1 4\n2 3\n5 6\n4 5\n5 3\n''') == '''\n1 3 5 2 4\n'''\n\nassert solution('''\n3 1\n1 2\n''') == '''\n-1\n'''\n\nassert solution('''\n5 6\n1 2\n1 3\n1 4\n2 3\n4 5\n5 3\n''') == '''\n3 5 1 2 4\n'''\n\nassert solution('''\n1 0\n''') == '''\n1\n'''\n\nassert solution('''\n1 0\n''') == '''\n1\n'''\n\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '''\n1 2 3\n", "solution('''\n5 4\n1 2\n1 3\n2 3\n4 5\n''') == '''\n-1\n'''\n\n# get input from the console\nwith open('test_case_1.txt', 'r') as f:\n    inp = f.read()\n\n# provide input to the solution\nprint(solution(inp))", "solution('''\n10 20\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 6\n5 7\n5 8\n5 9\n5 10\n6 7\n6 8\n6 9\n6 10\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n''') == '-1'\n\nassert solution('''\n5 7\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n''') == '1 2 3 4 5'\n\nassert solution('''\n8 6\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n''') == '1 2 3 4 5'\n\nassert solution('''\n8 6\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n3 5\n''') == '-1'\n\nassert solution('''\n6 9\n1 2\n1 3\n1", "solution(\"\"\"5 4\n1 2\n1 3\n3 4\n5 4\"\"\") == \"\"\"1 3 4 5 5\"\"\"\nassert solution(\"\"\"5 3\n1 2\n1 3\n3 4\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"5 4\n1 2\n1 3\n3 4\n5 5\"\"\") == \"\"\"1 3 4 5 5\"\"\"\nassert solution(\"\"\"4 4\n1 2\n2 3\n3 4\n4 1\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"4 4\n1 2\n2 3\n3 4\n4 2\"\"\") == \"\"\"1 2 3 4\"\"\"\nassert solution(\"\"\"5 4\n1 2\n2 3\n3 4\n4 5\"\"\") == \"\"\"1 2 3 4 5\"\"\"\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n4 5\n5 1\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n4 5\n1 3\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n4 5\n2 4\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n4 5\n5 1\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n4 5\n2 3", "solution(1) == ''", "solution(\"6 6 \\n1 2 \\n2 3 \\n3 4 \\n4 5 \\n5 6 \\n6 1\") == \"1 2 3 4 5\"\nassert solution(\"3 2 \\n1 2 \\n1 3\") == \"-1\"\nassert solution(\"6 6 \\n1 2 \\n2 3 \\n3 4 \\n4 5 \\n5 6 \\n6 6\") == \"1 2 3 4 6\"\nassert solution(\"15 19 \\n1 2 \\n1 3 \\n1 4 \\n1 5 \\n1 6 \\n1 7 \\n1 8 \\n1 9 \\n1 10 \\n1 11 \\n1 12 \\n1 13 \\n1 14 \\n1 15 \\n2 3 \\n2 4 \\n2 5 \\n2 6 \\n2 7\") == \"1 2 3 4 5\"\nassert solution(\"15 19 \\n1 2 \\n1 3 \\n1 4 \\n1 5 \\n1 6 \\n1 7 \\n1 8 \\n1 9 \\n1 10 \\n1 11 \\n1 12 \\n1 13 \\n1 14 \\n1 15 \\n2 3 \\n2 4 \\n2 5 \\n2 6 \\n2 8\") == \"-1\"\nassert solution(\"6 6 \\n1 2 \\n2 3 \\n3 4 \\n4 5 \\n5 6 \\", "solution('''5 4\n1 2\n1 3\n2 3\n4 5''') == '1 2 3 4 5'\nassert solution('''5 4\n1 2\n1 3\n2 3\n3 4''') == '-1'\nassert solution('''5 4\n1 2\n1 3\n2 3\n4 5''') == '1 2 3 4 5'\nassert solution('''7 4\n1 2\n1 3\n2 3\n4 5''') == '1 2 3 4 5'\nassert solution('''3 2\n1 2\n1 3''') == '-1'\nassert solution('''5 5\n1 2\n1 3\n2 3\n3 4\n3 5''') == '1 2 3 4 5'\nassert solution('''5 5\n1 2\n1 3\n2 3\n4 5\n1 5''') == '-1'\nassert solution('''5 4\n1 2\n1 3\n2 3\n4 5''') == '1 2 3 4 5'\nassert solution('''5 4\n1 2\n1 3\n2 3\n4 5''') == '1 2 3 4 5'\nassert solution('''5 4\n1 2\n1 3\n2 3\n4 5''') == '1 2 3 4 5'\nassert solution('''5 4\n1 2", "(solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n3 4\n''') ==\n'''\n1 3 4 2 5\n''')\n\nassert (solution('''\n5 6\n1 2\n1 3\n1 4\n1 5\n3 4\n5 4\n''') == '-1')", "solution(stdin) == stdout\n\n# ## Other solutions in the web\n\n# - [URL](https://github.com/mason-neo/cf-gym/blob/master/problems/cf-2019-09-01-problem.py)\n# - [URL](https://github.com/sirandu/cf-gym/blob/master/problems/cf-2019-09-01-problem.py)\n# - [URL](https://github.com/kiagiai/cf-gym/blob/master/problems/cf-2019-09-01-problem.py)\n# - [URL](https://github.com/DavideCarmenini/cf-gym/blob/master/problems/cf-2019-09-01-problem.py)\n# - [URL](https://github.com/kajal-patel/cf-gym/blob/master/problems/cf-2019-09-01-problem.py)\n# - [URL](https://github.com/sssemil/cf-gym/blob/master/problems/cf-2019-09-01-problem.py)\n# - [URL](https://github.com/sheng16/cf-gym/blob/master", "solution(\"5 5\\n1 2\\n1 3\\n1 4\\n1 5\\n2 3\") == \"1 2 3 4 5\", \"1 2 3 4 5\"\nassert solution(\"5 7\\n1 2\\n1 3\\n1 4\\n1 5\\n2 3\\n3 4\\n4 5\") == \"-1\", \"-1\"\nassert solution(\"5 6\\n1 2\\n1 3\\n1 4\\n1 5\\n2 3\\n2 4\") == \"1 2 3 4 5\", \"1 2 3 4 5\"\nassert solution(\"5 6\\n1 2\\n1 3\\n1 4\\n1 5\\n2 4\\n3 4\") == \"1 2 3 4 5\", \"1 2 3 4 5\"\nassert solution(\"5 6\\n1 2\\n1 3\\n1 4\\n1 5\\n2 4\\n4 5\") == \"1 2 3 4 5\", \"1 2 3 4 5\"\nassert solution(\"5 5\\n1 2\\n1 3\\n1 4\\n2 4\\n3 4\") == \"-1\", \"-1\"\nassert solution(\"5 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"-1\", \"-1\"\nassert solution(\"5 5\\n1 2\\n", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\n\n# test speed\nprint(f\"Time: {timeit.timeit(lambda: solution(stdin1), number=100)}\")", "solution('''\n10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n10 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n''') == '''\n-1\n'''\n\nassert solution('''\n10 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 10\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n10 10\n''') == '''\n-1\n'''\n\nassert solution('''\n10 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n1 3\n4 6\n''') == '''\n-1", "solution(\"20 7 \\n1 2 \\n1 3 \\n2 3 \\n2 4 \\n3 4 \\n5 6 \\n5 7\") == \"1 2 3 4 5\", \"Example 1\"\nassert solution(\"20 7 \\n1 2 \\n1 3 \\n2 3 \\n2 4 \\n3 4 \\n6 7 \\n6 8\") == \"-1\", \"Example 2\"\nassert solution(\"20 5 \\n1 2 \\n3 4 \\n5 6 \\n7 8 \\n9 10\") == \"1 2 3 4 5\", \"Example 3\"\nassert solution(\"20 7 \\n1 2 \\n1 3 \\n2 3 \\n2 4 \\n3 4 \\n5 6 \\n5 7\") == \"1 2 3 4 5\", \"Example 4\"\nassert solution(\"30 18 \\n1 2 \\n1 3 \\n2 3 \\n2 4 \\n3 4 \\n5 6 \\n5 7 \\n8 9 \\n8 10 \\n9 10 \\n9 11 \\n10 11 \\n10 12 \\n11 12 \\n13 14 \\n13 15 \\n14 15 \\n14 16 \\n15 16\") == \"17 18 19 20 21\", \"Example 5\"\nassert solution(\"20 7 \\n1 2 \\n1 3 \\n2 3 \\n2 4 \\n3 4 \\n5 6 \\", "solution('''input1''') == '''output1'''\nassert solution('''input2''') == '''output2'''\n# if the solution is wrong, write the error message\n# it will be saved to error.txt file\n'''\nSample Input 1:\n\n3 2\n1 2\n1 3\n\nSample Output 1:\n\n1 2 3\n\nExplanation 1:\nThere are 3 people and 2 pairs of friends: (1,2) and (1,3). (2,3) is not in the list so they are not friends. In this case, we can invite 1, 2, and 3 to a party and they will all be friends with each other. The party will be successful.\n\nSample Input 2:\n\n3 2\n1 2\n2 3\n\nSample Output 2:\n\n-1\n\nExplanation 2:\nThere are 3 people and 2 pairs of friends: (1,2) and (2,3). (1,3) is not in the list so they are not friends. In this case, we can invite 1, 2, and 3 to a party, but 2 and 3 will be friends and the party will not be successful.\n\nSample Input 3:\n\n3 1\n1 2\n\nSample Output 3:\n\n-1\n\nExplanation 3:\nThere are 3 people and", "solution(\"\"\"\n5 6\n1 2\n1 4\n1 5\n2 3\n2 4\n4 5\n\"\"\") == '''\n-1\n'''\n\nassert solution(\"\"\"\n5 5\n1 2\n1 3\n1 4\n1 5\n3 4\n\"\"\") == '''\n1 2 3 4 5\n'''\n\nassert solution(\"\"\"\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == '''\n1 2 3 4 5\n'''\n\nassert solution(\"\"\"\n5 4\n1 2\n1 3\n1 4\n1 5\n\"\"\") == '''\n-1\n'''\n\nassert solution(\"\"\"\n5 4\n1 2\n1 3\n1 4\n1 5\n\"\"\") == '''\n-1\n'''\n\nassert solution(\"\"\"\n5 3\n1 2\n2 3\n4 5\n\"\"\") == '''\n-1\n'''\n\nassert solution(\"\"\"\n5 3\n1 2\n1 3\n1 4\n\"\"\") == '''\n-1\n'''\n\nassert solution(\"\"\"\n5 3\n1 2\n2 3\n2 4\n\"\"\") == '''\n-1\n'''\n\nassert solution(\"\"\"\n5 3\n1 2\n1 3\n3 4\n\"\"\") == '''\n1 2 3 4\n'''\n", "solution(\"\"\"0 0\n\"\"\") == \"-1\", \"first\"\nassert solution(\"\"\"5 2\n1 2\n1 3\n\"\"\") == \"-1\", \"second\"\nassert solution(\"\"\"6 4\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"1 2 3 4 5\", \"third\"\nassert solution(\"\"\"6 4\n1 2\n1 3\n1 4\n3 4\n\"\"\") == \"1 3 4 5 6\", \"fourth\"\nassert solution(\"\"\"5 2\n1 2\n2 3\n\"\"\") == \"1 2 3 4 5\", \"fifth\"\nassert solution(\"\"\"6 5\n1 2\n1 3\n1 4\n2 3\n2 4\n\"\"\") == \"1 3 4 5 6\", \"sixth\"\nassert solution(\"\"\"7 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\") == \"1 3 4 5 6 7\", \"seventh\"\nassert solution(\"\"\"7 6\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n\"\"\") == \"1 2 3 4 5 6 7\", \"eighth\"\nassert solution(\"\"\"10 8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n\"\"\") == \"1 2 3 4 5 6 7 8 9 10\", \"n", "solution('''\n5 6\n1 2\n1 3\n1 4\n1 5\n2 3\n3 4\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '''\n-1\n'''\n\nassert solution('''\n2 1\n1 2\n''') == '''\n-1\n'''\n\nassert solution('''\n6 4\n1 2\n1 3\n1 4\n1 5\n''') == '''\n1 2 3 4 5\n'''\n\n# get the input and run the solution\nprob_name = 'successive-party'\nprob_dir = os.path.join(os.path.dirname(__file__), prob_name)\ninput_path = os.path.join(prob_dir, 'input.txt')\noutput_path = os.path.join(prob_dir, 'output.txt')\ninput = open(input_path, 'r')\noutput = open(output_path, 'w')\nprint(solution(input.read()), file=output)\ninput.close()\noutput.close()", "solution(\"\"\"\\\n2 1\n1 2\n\"\"\") == \"\"\"\\\n-1\n\"\"\"\n\nassert solution(\"\"\"\\\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"\\\n1 2 3 4 5\n\"\"\"\n\nassert solution(\"\"\"\\\n5 5\n1 2\n2 3\n3 4\n4 5\n1 3\n\"\"\") == \"\"\"\\\n1 2 3 4 5\n\"\"\"\n\nassert solution(\"\"\"\\\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"\\\n1 2 3 4 5\n\"\"\"\n\nassert solution(\"\"\"\\\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n\"\"\") == \"\"\"\\\n1 2 3 4 5\n\"\"\"\n\nassert solution(\"\"\"\\\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"\\\n1 2 3 4 5\n\"\"\"\n\nassert solution(\"\"\"\\\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"\\\n1 2 3 4 5\n\"\"\"\n\nassert solution(\"\"\"\\\n5 4\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"\\\n1 2 3 4 5\n\"\"\"\n\nassert solution(\"\"\"\\\n5 4\n1 2\n2 3\n3 4\n4", "solution('''\n5 3\n1 2\n2 3\n4 5\n''') == '''\n-1\n'''\n\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n10 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n''') == '''\n9 10 1 2 3\n'''\n\nassert solution('''\n10 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 10\n''') == '''\n9 1 2 3 4\n'''\n\nassert solution('''\n15 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '''\n1 2 3 4 5\n11 12 13 14 15\n'''\n\nassert solution('''\n15 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '''\n1 2 3 4 5\n11 12 13 14 15\n'''\n\nassert", "solution(\"\"\"10 5\n1 2\n3 4\n5 6\n7 8\n9 10\n\"\"\") == \"\"\"1 2 3 4 5\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"10 5\n1 2\n3 4\n5 6\n7 8\n9 10\n\"\"\") == \"\"\"1 2 3 4 5\n\"\"\", \"Example 2\"", "solution('''5 5\n1 2\n2 3\n3 4\n4 5\n5 1''') == '1 2 3 4 5'\nassert solution('''5 5\n1 2\n2 3\n3 4\n4 5\n5 2''') == '1 2 3 4 5'\nassert solution('''5 5\n1 2\n2 3\n3 4\n4 5\n1 5''') == '1 2 3 4 5'\nassert solution('''5 6\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3''') == '1 2 3 4 5'\nassert solution('''5 4\n1 2\n2 3\n3 4\n4 5''') == '-1'\nassert solution('''5 3\n1 2\n2 3\n3 4''') == '-1'\nassert solution('''5 1\n5 1''') == '-1'\nassert solution('''5 0''') == '-1'\nassert solution('''5 5\n2 3\n1 2\n1 3\n1 4\n1 5''') == '1 2 3 4 5'\nassert solution('''5 5\n2 3\n1 2\n1 3\n1 4\n3 5''') == '1 2 3 4 5'\nassert solution('''5 5\n2 3\n1 2\n1 3", "solution(\"\"\"5 3\n1 2\n2 3\n4 5\"\"\") == '-1'\nassert solution(\"\"\"10 10\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 3\n2 4\n2 5\"\"\") == '1 2 3 4 5'\nassert solution(\"\"\"5 5\n1 2\n2 3\n2 4\n2 5\n3 4\"\"\") == '1 2 3 4 5'\nassert solution(\"\"\"10 5\n1 2\n2 3\n2 4\n2 5\n5 6\"\"\") == '1 2 3 4 5'\nassert solution(\"\"\"10 5\n1 2\n2 3\n2 4\n2 5\n5 6\"\"\") == '1 2 3 4 5'\nassert solution(\"\"\"2 1\n1 2\"\"\") == '-1'\nassert solution(\"\"\"5 0\"\"\") == '-1'\nassert solution(\"\"\"10 5\n1 2\n2 3\n3 4\n4 5\n5 6\"\"\") == '-1'\nassert solution(\"\"\"10 5\n1 2\n2 3\n2 4\n2 5\n5 6\"\"\") == '1 2 3 4 5'\nassert solution(\"\"\"10 1\n1 2\"\"\") == '-1'\nassert solution(\"\"\"10 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7", "solution('''\n5 4\n1 2\n1 3\n1 4\n2 3\n''') == '1 2 3 4 5'\n\nassert solution('''\n4 3\n1 2\n2 3\n3 4\n''') == '-1'\n\nassert solution('''\n4 2\n1 2\n3 4\n''') == '1 2 3 4'\n\nassert solution('''\n4 2\n1 2\n2 3\n''') == '1 2 3 4'\n\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == '1 2 3 4 5'\n\nassert solution('''\n5 4\n1 2\n1 3\n1 4\n1 5\n''') == '-1'\n\nassert solution('''\n6 6\n1 2\n1 3\n1 4\n2 3\n3 4\n4 5\n''') == '1 2 3 4 5 6'\n\nassert solution('''\n6 7\n1 2\n1 3\n1 4\n2 3\n3 4\n4 5\n2 5\n''') == '1 2 3 4 5 6'\n\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == '-1'\n\nassert solution('''\n4 4\n1 2\n1", "solution(\"\"\"\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n\"\"\") == \"1 2 3 4 5\"\n\nassert solution(\"\"\"\n10 9\n1 3\n1 5\n1 7\n1 9\n2 4\n2 6\n2 8\n2 10\n3 5\n\"\"\") == \"1 2 3 4 5\"\n\nassert solution(\"\"\"\n6 3\n1 2\n3 4\n5 6\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n10 10\n1 3\n1 5\n1 7\n1 9\n2 4\n2 6\n2 8\n2 10\n3 5\n4 6\n\"\"\") == \"1 2 3 4 5\"\n\nassert solution(\"\"\"\n10 8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\"\"\") == \"1 2 3 4 5\"\n\nassert solution(\"\"\"\n10 2\n1 2\n3 4\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n10 5\n1 3\n1 5\n1 7\n1 9\n3 5\n\"\"\") == \"1 2 3 4 5\"\n\nassert solution(\"\"\"\n9 4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n\"\"\") == \"1 2 3 4", "solution(SAMPLE_INPUT_0) == SAMPLE_OUTPUT_0\nassert solution(SAMPLE_INPUT_1) == SAMPLE_OUTPUT_1\nassert solution(SAMPLE_INPUT_2) == SAMPLE_OUTPUT_2\nassert solution(SAMPLE_INPUT_3) == SAMPLE_OUTPUT_3\nassert solution(SAMPLE_INPUT_4) == SAMPLE_OUTPUT_4\nassert solution(SAMPLE_INPUT_5) == SAMPLE_OUTPUT_5\nassert solution(SAMPLE_INPUT_6) == SAMPLE_OUTPUT_6\n\n\n\n# submit the code to the judge system\nfrom subprocess import run\nfrom subprocess import PIPE\n\nrun(['rm', '-f', '/.solution'], stdout=PIPE, stderr=PIPE)\nwith open('.solution', 'w') as f:\n    f.write(solution(INPUT))\nrun(['cat', '/.solution'], stdout=PIPE, stderr=PIPE)\nrun(['rm', '-f', '/.solution'], stdout=PIPE, stderr=PIPE)", "solution('''\n8 6\n1 2\n2 3\n3 4\n1 4\n5 6\n7 8\n''') == '1 2 3 4 5'\n\n# check the correctness of solution\nassert solution('''\n8 6\n1 2\n2 3\n3 4\n1 4\n5 6\n6 8\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2\n2 3\n3 4\n4 5\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n7 8\n8 9\n9 10\n10 1\n1 5\n''') == '1 2 3 4 5'\n\n# check the correctness of solution\nassert solution('''\n7 3\n1 2\n2 3\n3 1\n''') == '1 2 3 4 5'\n\n# check the correctness of solution\nassert solution('''\n12 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n9 5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '-1'", "solution('''\n5 3\n1 3\n2 3\n3 4\n''') == '1 2 3 4 5'\n\n# check the correctness of solution\nassert solution('''\n5 2\n1 2\n1 3\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2\n2 3\n2 4\n2 5\n''') == '1 2 3 4 5'\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '1 2 3 4 5'\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '1 2 3 4 5'\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '1 2 3 4 5'\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2\n2 3\n2 4\n2 5\n''') == '1 2 3 4 5'\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n", "solution(sample_input) == expected_result", "solution(\n'''\n5 3\n1 2\n3 4\n5 1\n'''\n) == '''\n1 5 2 3 4\n'''\n\nassert solution(\n'''\n5 3\n1 2\n2 3\n5 4\n'''\n) == '''\n-1\n'''\n\nassert solution(\n'''\n5 3\n1 2\n2 3\n5 1\n'''\n) == '''\n-1\n'''\n\nassert solution(\n'''\n6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n'''\n) == '''\n1 2 3 4 5\n'''\n\nassert solution(\n'''\n8 3\n2 3\n4 5\n6 7\n'''\n) == '''\n1 2 3 4 5\n'''\n\nassert solution(\n'''\n8 5\n1 2\n2 3\n3 4\n4 5\n5 6\n'''\n) == '''\n1 2 3 4 6\n'''\n\nassert solution(\n'''\n8 6\n1 2\n2 3\n3 4\n4 5\n5 6\n5 7\n'''\n) == '''\n1 2 3 4 7\n'''\n\nassert solution(\n'''\n8 5\n1 2\n2 3\n3 4\n4 5\n5 1", "solution('''\n6 5\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n6 5\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == '''\n-1\n'''\n\n# stress testing the solution\nfrom random import randint\nn_tests = 100\n\n_MAXN = 200000\n_MAXM = 200000\n\nfor test in range(n_tests):\n    N = randint(5, _MAXN)\n    M = randint(0, _MAXM)\n    input_string = '{} {}\\n'.format(N, M)\n    pairs = set()\n    for _ in range(M):\n        U, V = randint(1, N), randint(1, N)\n        while (U, V) in pairs or (V, U) in pairs:\n            U, V = randint(1, N), randint(1, N)\n        pairs.add((U, V))\n        input_string += '{} {}\\n'.format(U, V)\n    for i in range(len(input_string)):\n        if input_string[i] == '1':\n            input_string =", "solution('''\n5 6\n1 2\n2 3\n3 4\n4 5\n1 5\n2 4\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2\n2 3\n3 4\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2\n1 3\n1 4\n1 5\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5 0\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 1\n1 2\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2\n1 3\n1 4\n1 5\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n1 3\n1 4", "solution('''\n5 3\n1 2\n3 4\n4 5\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n5 1\n1 2\n''') == '''\n-1\n'''\n\nassert solution('''\n1 0\n''') == '''\n1\n'''\n\nassert solution('''\n10 8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n''') == '''\n-1\n'''\n\nassert solution('''\n10 4\n1 3\n2 3\n3 4\n5 6\n''') == '''\n3 4 5 6 7\n'''\n\nassert solution('''\n10 1\n1 2\n''') == '''\n-1\n'''\n\nassert solution('''\n10 3\n1 2\n2 3\n3 4\n''') == '''\n-1\n'''\n\nassert solution('''\n10 3\n1 2\n2 3\n3 4\n''') == '''\n-1\n'''\n\nassert solution('''\n10 5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '''\n2 3 4 5 6\n'''\n\nassert solution('''\n10 3\n2 3", "solution('''\n2 1\n1 2\n''') == '''\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 1\n1 2\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2\n1 2\n1 3\n''') == '''\n2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2\n1 3\n3 4\n''') == '''\n1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2\n1 3\n1 4\n1 5\n''') == '''\n1 2 3 4 5\n'''\n\n# check the", "solution(\"\"\"5 4\n1 2\n1 3\n2 3\n4 5\"\"\") == \"\"\"2 3 4 5 1\"\"\"\nassert solution(\"\"\"5 5\n1 2\n1 3\n2 3\n4 5\n1 5\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"5 0\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"10 9\n2 3\n2 6\n2 7\n2 8\n2 9\n1 4\n1 5\n1 10\n3 10\"\"\") == \"\"\"3 2 8 1 5\"\"\"\nassert solution(\"\"\"20 15\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n1 6\n1 7\n1 8\n1 9\n1 10\"\"\") == \"\"\"1 2 3 4 5\"\"\"\nassert solution(\"\"\"20 21\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"1 1\n1 1\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"2 1\n1 2\"\"\") == \"\"\"-1\"\"\"\nassert", "solution(\"\"\"6 6\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n\"\"\") == \"\"\"1 2 3 4 5\"\"\"\nassert solution(\"\"\"7 4\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"6 5\n1 2\n1 3\n1 4\n1 5\n2 3\n\"\"\") == \"\"\"1 2 3 4 5\"\"\"\nassert solution(\"\"\"5 3\n1 2\n1 3\n1 4\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"5 2\n1 2\n1 3\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"5 2\n1 2\n1 4\n\"\"\") == \"\"\"1 2 3 4 5\"\"\"\nassert solution(\"\"\"5 5\n1 2\n1 3\n1 4\n1 5\n3 4\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"6 5\n1 2\n1 3\n1 4\n1 5\n2 3\n\"\"\") == \"\"\"1 2 3 4 5\"\"\"\nassert solution(\"\"\"7 7\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"10 10\n", "solution('''\\\n10 8\n1 3\n3 6\n3 8\n3 4\n1 7\n1 5\n7 9\n1 2\n''') == '''\\\n1 2 3 4 5\n'''\n\n# test the performance of solution\nfrom utils import *\nimport timeit\n\nif __name__ == '__main__':\n    # read test cases\n    for case in load_cases('01'):\n        # solve\n        start = timeit.default_timer()\n        output = solution(case['input'])\n        stop = timeit.default_timer()\n        # check the correctness\n        if compare_output(case['output'], output):\n            print('correct:', stop - start)\n        else:\n            print('wrong:', stop - start)", "solution('''\n10 6\n1 2\n1 3\n1 4\n1 5\n1 6\n7 8\n''') == '1 2 3 4 5'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n''') == '-1'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n''') == '1 2 3 4 5'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n1 5\n1 6\n7 8\n''') == '1 2 3 4 5'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n1 5\n1 6\n7 8\n''') == '1 2 3 4 5'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n1 5\n1 6\n7 8\n''') == '1 2 3 4 5'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n1 5\n1 6\n7 8\n''') == '1 2 3 4 5'\n\nassert solution('''\n10 6\n1 2\n1 3\n1 4\n1 5\n1 6\n7 8\n''') == '", "solution('''3 2\n1 2\n1 3''') == '1 2 3'\nassert solution('''3 1\n1 2''') == '-1'\nassert solution('''5 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4''') == '-1'\nassert solution('''5 6\n1 2\n1 3\n1 4\n2 3\n2 4\n4 5''') == '1 2 3 4 5'\nassert solution('''8 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1''') == '1 2 3 4 5 6 7 8'\nassert solution('''11 17\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9''') == '1 2 3 4 5 6 7 8 9 10 11'\nassert solution('''10 19\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 4''') == '1 2 3 4 5 6 7", "solution('''\n5 1\n1 2\n''') == '''\n-1\n'''\n\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n''') == '''\n-1\n'''\n\nassert solution('''\n5 2\n1 2\n3 4\n''') == '''\n2 3 4 5 5\n'''\n\nassert solution('''\n5 4\n1 2\n2 3\n2 4\n2 5\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n5 3\n1 2\n3 4\n5 1\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n5 1\n1 2\n''') == '''\n-1\n'''\n\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n''') == '''\n-1\n'''\n\nassert solution('''\n5 2\n1 2\n3 4\n''') == '''\n2 3 4 5 5\n'''\n\nassert solution('''\n5 4\n1 2\n2 3\n2 4\n2 5\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n5 3\n1 2\n3 4\n5 1\n''", "solution('''\n3 1\n1 2\n''') == '-1'\n\nassert solution('''\n6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '1 2 3 4 5'\n\nassert solution('''\n6 5\n1 2\n2 3\n3 4\n4 5\n6 1\n''') == '1 2 3 4 6'\n\nassert solution('''\n6 5\n1 2\n2 3\n3 4\n4 5\n6 1\n''') == '1 2 3 4 6'", "solution(\"\") == \"\"", "solution(\"5 3\\n1 2\\n2 3\\n3 4\") == \"1 2 3 4 5\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n1 4\\n1 5\") == \"-1\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n1 4\") == \"1 2 3 4 5\"\nassert solution(\"5 2\\n1 2\\n3 4\") == \"1 2 3 4 5\"\nassert solution(\"5 0\") == \"1 2 3 4 5\"\nassert solution(\"5 1\\n1 5\") == \"-1\"\nassert solution(\"20 12\\n1 2\\n2 3\\n1 3\\n4 5\\n4 6\\n4 7\\n8 9\\n8 10\\n8 11\\n12 13\\n12 14\\n12 15\") == \"1 2 3 4 5\"\nassert solution(\"20 8\\n1 2\\n2 3\\n1 3\\n4 5\\n4 6\\n4 7\\n8 9\\n8 10\") == \"-1\"\nassert solution(\"20 3\\n1 2\\n2 3\\n3 1\") == \"1 2 3 4 5\"\nassert solution(\"20 19\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\", "solution('''\n10 12\n1 2\n2 3\n2 4\n2 5\n2 6\n4 7\n4 8\n4 9\n4 10\n1 5\n1 6\n1 7\n''') == '''\n2 6 1 5 7\n'''\n\nassert solution('''\n8 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n1 5\n1 6\n1 7\n''') == '''\n1 5 6 7\n'''\n\nassert solution('''\n6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n1 5\n1 6\n1 7\n1 8\n''') == '''\n-1\n'''\n\nassert solution('''\n10 15\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 6\n2 7\n3 8\n4 9\n5 10\n''') == '''\n1 6 2 7 3 8 4 9 5 10\n'''\n\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n5 4\n1 2\n2 3\n3 4\n4 5\n''') == '", "solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n-1\n'''\n\nassert solution('''\n5 6\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n''') == '''\n-1\n'''\n\nassert solution('''\n10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n5 6\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n5 6\n7 8\n''') == '''\n1 2 3 4 5\n'''", "solution('''\n5 3\n1 2\n2 3\n4 5\n''') == '''\n-1\n'''\n\nassert solution('''\n5 4\n1 2\n2 3\n3 4\n4 5\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n10 9\n1 3\n2 3\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n5 6\n''') == '''\n-1\n'''\n\nassert solution('''\n6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n7 4\n1 2\n2 3\n3 4\n5 6\n''') == '''\n-1\n'''\n\nassert solution('''\n1 0\n''') == '''\n-1\n'''\n\nassert solution('''\n7 6\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n13 5\n1 2\n1 4\n4 6\n4 8\n8 10\n''') == '''\n1 4 6 8 10\n'''\n\nassert solution('''", "solution(\"input.txt\") == \"output.txt\"", "solution('''\n5 3\n1 2\n2 3\n4 5\n''') == '''\n-1\n'''\n\nassert solution('''\n4 2\n1 2\n3 4\n''') == '''\n1 2 3 4\n'''\n\nassert solution('''\n5 4\n1 2\n2 3\n4 5\n5 3\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n10 8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n10 5\n1 2\n1 3\n1 4\n1 5\n1 6\n''') == '''\n1 2 3 4 6\n'''\n\nassert solution('''\n8 5\n1 2\n1 3\n1 4\n1 5\n1 6\n''') == '''\n-1\n'''\n\nassert solution('''\n10 9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == '''\n-1\n'''\n\n# for performance test\nimport random\ndef generate(n: int, m: int) -> str:\n    s = ''\n", "solution(\n'''5 2\n1 2\n2 3\n''') == '1 2 3 4 5'\n\nassert solution(\n'''3 1\n1 2\n''') == '-1'\n\nassert solution(\n'''5 4\n1 2\n2 3\n3 4\n4 5\n''') == '1 2 3 4 5'\n\nassert solution(\n'''10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '1 2 3 4 5'\n\nassert solution(\n'''6 3\n1 2\n2 3\n3 4\n''') == '1 2 3 5 6'\n\nassert solution(\n'''10 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '1 2 3 4 6'\n\n# display the runtime of solution\nprint(f'{solution.__name__} took {runtime(solution, stdin)} ms')", "solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 1\n6 7\n7 8\n8 9\n9 10\n10 6\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 1\n1 6\n6 7\n7 8\n8 9\n9 10\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10\n1 2\n2 3\n3 4\n4 5\n5 1\n1 6\n6 7\n7 8\n8 9\n9 10\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10\n1 2\n2 3\n", "solution('''\n7 3\n1 3\n2 3\n4 7\n''') == '''\n1 2 3 4 7\n'''\n\n# check the correctness of solution\nassert solution('''\n7 6\n1 3\n2 3\n4 7\n1 2\n2 3\n2 4\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n7 4\n1 3\n2 3\n4 7\n5 6\n''') == '''\n1 2 3 4 7\n'''\n\n# check the correctness of solution\nassert solution('''\n5 0\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 1\n1 2\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2\n2 3\n3 4\n4 5\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n10 6\n1 2\n2 3\n3 4"], "finish_reason": ["length", "stop", "length", "length", "stop", "length", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "length"], "sum_logprob": [-78.81839299777204, -52.117407086030006, -54.31503031350697, -71.83426394321997, -12.32214244, -53.88103966038496, -58.691879061570006, -31.95020100165999, -235.24697157263898, -53.036559483345, -26.540043390919994, -50.79118512962997, -83.26560804299699, -151.52157137749995, -66.67397689303998, -80.28659502450998, -72.04821502854205, -41.294997930584984, -49.712813139349, -26.143878387159997, -60.511931461667984, -94.03067399907398, -69.0797855661, -79.66946952745703, -50.28056634668581, -77.71646529357798, -54.75443026836294, -11.839095464, -79.435318351837, -100.03913963260995, -47.408002649900006, -77.49408397824607, -55.52888812315601, -97.27438139383194, -72.04505337037993, -122.80045929652988, -36.32501700487206, -63.73708989665998, -51.08932213558606, -31.42572615665, -5.364837284, -79.82682012544603, -92.29097488888998, -44.686796850099995, -93.63312452227795, -7.1728738952, -88.69299428286702, -82.34804778253005, -36.751500003868976, -66.26023179555399], "mean_logprob": [-0.26272797665923997, -0.6204453224527381, -0.18105010104502334, -0.2394475464774, -1.760306062857143, -0.17960346553461667, -0.1956395968719, -0.40961796155974356, -0.7841565719087966, -0.17678853161115, -0.3961200506107463, -0.1693039504321, -0.27755202680999, -0.5050719045916666, -0.22224658964346666, -0.26762198341503335, -0.25731505367336427, -0.13764999310195, -0.16570937713116332, -0.33517792804051283, -0.20170643820556, -0.31343557999691335, -0.230265951887, -0.26556489842485664, -0.17519361096406202, -0.25905488431192664, -0.18251476756121, -1.0762814058181818, -0.26478439450612334, -0.3334637987753667, -0.15802667549966667, -0.25831361326082, -0.18509629374385334, -0.32424793797944, -0.24015017790126666, -0.6822247738696111, -0.12108339001624, -0.21245696632219999, -0.17029774045195334, -0.2474466626507874, -0.8941395473333333, -0.2660894004181533, -0.30763658296296664, -0.14895598950033334, -0.31211041507426, -0.5517595304, -0.2956433142762233, -0.3643718928430531, -0.12250500001289667, -0.22086743931851333]}
{"prompt": "'''\nStudents of one unknown college don't have PE courses. That's why q of them decided to visit a gym nearby by themselves. The gym is open for n days and has a ticket system. At the i-th day, the cost of one ticket is equal to a_i. You are free to buy more than one ticket per day.\n\nYou can activate a ticket purchased at day i either at day i or any day later. Each activated ticket is valid only for k days. In other words, if you activate ticket at day t, it will be valid only at days t, t + 1, ..., t + k - 1. \n\nYou know that the j-th student wants to visit the gym at each day from l_j to r_j inclusive. Each student will use the following strategy of visiting the gym at any day i (l_j \u2264 i \u2264 r_j):\n\n  1. person comes to a desk selling tickets placed near the entrance and buy several tickets with cost a_i apiece (possibly, zero tickets); \n  2. if the person has at least one activated and still valid ticket, they just go in. Otherwise, they activate one of tickets purchased today or earlier and go in. \n\n\n\nNote that each student will visit gym only starting l_j, so each student has to buy at least one ticket at day l_j.\n\nHelp students to calculate the minimum amount of money they have to spend in order to go to the gym.\n\nInput\n\nThe first line contains three integers n, q and k (1 \u2264 n, q \u2264 300 000; 1 \u2264 k \u2264 n) \u2014 the number of days, the number of students and the number of days each ticket is still valid. \n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the cost of one ticket at the corresponding day.\n\nEach of the next q lines contains two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 n) \u2014 the segment of days the corresponding student want to visit the gym.\n\nOutput\n\nFor each student, print the minimum possible amount of money they have to spend in order to go to the gym at desired days.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n5 4 2\n1 2 3 4 5\n1 2\n1 4\n2 3\n2 5\n''') == '''\n1\n2\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n7 6 2\n1 2 3 4 5 6 7\n1 3\n1 3\n2 5\n3 5\n3 7\n4 5\n''') == '''\n3\n3\n3\n3\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n7 6 1\n1 2 3 4 5 6 7\n1 3\n1 3\n2 5\n3 5\n3 7\n4 5\n''') == '''\n3\n3\n3\n4\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n7 6 2\n1 2 3 4 5 6 7\n1 7\n1 7\n1 7\n1 7\n1 7\n1 7\n''') == '''\n25\n25\n25\n25\n25\n25\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 1\n1\n1 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 2\n1\n1 1\n''') == '", "solution(\"3 2 2\\n3 2 4\\n1 2\\n2 3\") == \"5\\n4\"\nassert solution(\"2 3 3\\n1 2\\n1 2\\n1 2\\n1 2\") == \"3\\n3\\n3\"\nassert solution(\"4 2 1\\n1 1 1 1\\n1 4\\n4 4\") == \"4\\n4\"\nassert solution(\"6 3 3\\n1 2 3 1 1 2\\n1 6\\n3 4\\n3 6\") == \"6\\n4\\n6\"\nassert solution(\"4 4 1\\n1 2 3 4\\n1 2\\n2 3\\n3 4\\n1 4\") == \"5\\n4\\n5\\n8\"\nassert solution(\"5 2 2\\n1 1 1 1 1\\n1 2\\n3 5\") == \"3\\n3\"\nassert solution(\"7 3 3\\n2 2 2 2 2 2 2\\n1 7\\n1 5\\n3 7\") == \"14\\n10\\n14\"\nassert solution(\"8 3 3\\n1 5 2 1 3 6 2\\n1 8\\n2 5\\n2 7\") == \"11\\n7\\n12\"\nassert solution(\"10 4 1\\n1 1 1 1 1 1 1 1 1 1\\n1", "solution('''\n3 2 2\n3 2 1\n1 2\n2 3\n''') == '''\n5\n3\n'''\n\n# check for any performance problem\nimport cProfile, pstats, io\npr = cProfile.Profile()\npr.enable()\n\n# run this test many times, check for performance issues\nfor _ in range(10):\n    solution('''\n300000 300000 300000\nsolution('''\n5 3 3\n1 2 3 4 5\n2 5\n2 3\n1 5\n''') == '''\n14\n7\n13\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3 3\n3 1 2 5 2\n3 5\n1 4\n2 5\n''') == '''\n9\n2\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5 2\n1 1 1 1 1\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '''\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5 1\n1 1 1 1 1\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '''\n1\n2\n3\n4\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5 1\n1 2 3 4 5\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '''\n1\n2\n3\n4\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5 3\n1 2 3 4 5\n1 1\n1 2\n1 3\n1 4\n1 5\n", "solution('''\n4 3 3\n1 2 3 4\n1 4\n2 4\n3 4\n''') == '6\\n5\\n4'\nassert solution('''\n4 3 2\n1 2 3 4\n1 4\n2 4\n3 4\n''') == '6\\n5\\n4'\nassert solution('''\n4 3 4\n1 2 3 4\n1 4\n2 4\n3 4\n''') == '4\\n3\\n2'\nassert solution('''\n4 3 1\n1 2 3 4\n1 4\n2 4\n3 4\n''') == '10\\n9\\n8'\nassert solution('''\n4 1 3\n1 2 3 4\n1 4\n''') == '6'\nassert solution('''\n4 1 2\n1 2 3 4\n1 4\n''') == '6'\nassert solution('''\n4 1 4\n1 2 3 4\n1 4\n''') == '4'\nassert solution('''\n4 1 1\n1 2 3 4\n1 4\n''') == '10'\nassert solution('''\n4 0 3\n1 2 3 4\n''') == ''\nassert solution('''\n4 0 2\n1 2 3 4\n''') == ''\nassert solution('''\n4 0 4\n1 2 3", "solution(\"\"\"2 3 3\n2 3\n1 2\n1 2\n2 2\"\"\") == \"\"\"3\n3\n3\"\"\", \"example test case 1\"\n\nassert solution(\"\"\"3 2 1\n1 1 1\n1 2\n2 3\"\"\") == \"\"\"1\n1\"\"\", \"example test case 2\"\n\nassert solution(\"\"\"9 4 6\n1 4 3 2 6 1 1 1 1\n1 4\n2 9\n4 6\n5 9\"\"\") == \"\"\"10\n2\n1\n1\"\"\", \"example test case 3\"\n\nassert solution(\"\"\"4 2 2\n3 2 2 1\n1 4\n1 2\"\"\") == \"\"\"4\n2\"\"\", \"example test case 4\"\n\nassert solution(\"\"\"10 5 1\n5 4 4 3 2 2 3 3 3 4\n1 2\n4 7\n4 8\n4 5\n4 10\"\"\") == \"\"\"11\n3\n3\n3\n3\"\"\", \"example test case 5\"\n\nassert solution(\"\"\"5 5 3\n5 1 4 1 5\n1 3\n2 4\n3 5\n1 2\n3 5\"\"\") == \"\"\"5\n1\n1\n1\n1\"\"\", \"example test case 6\"\n\nassert solution(\"\"\"20 2 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 20\n10 20\"\"\") ==", "solution(\"\"\"\n3 2 2\n1 2 2\n1 2\n1 3\n\"\"\") == \"\"\"\n1\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2 1 1\n1 1\n1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 5 3\n8 1 1 9 7 5 1 3 2 3\n2 3\n2 6\n1 7\n1 10\n4 10\n\"\"\") == \"\"\"\n8\n7\n9\n12\n10\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 5 3\n8 1 1 9 7 5 1 3 2 3\n2 3\n2 6\n1 7\n1 10\n4 10\n\"\"\") == \"\"\"\n8\n7\n9\n12\n10\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n8 5 1\n1 1 1 1 1 1 1 1\n1 8\n2 8\n2 8\n2 8\n2 8\n\"\"\") == \"\"\"\n1\n1\n1\n1\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6 4 2\n4 2 2 4 1 2\n1 5\n2 4\n2 6\n4 6\n\"\"\") == \"\"\"\n4\n4\n4\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution", "solution('''\n5 3 3\n2 6 4 1 5\n1 3\n2 4\n3 5\n''') == '''\n3\n3\n2\n'''\n\n# test speed\nimport timeit\nprint(timeit.timeit('solution(input_str)', 'from __main__ import solution, input_str', number=10000))\nprint(timeit.timeit('solution(test_str)', 'from __main__ import solution, test_str', number=10000))", "solution(\"\"\"\n5 4 3\n1 2 3 4 5\n2 3\n2 3\n2 3\n3 4\n\"\"\") == \"\"\"\n3\n1\n1\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7 3 3\n10 20 30 10 20 30 10\n1 5\n1 7\n1 7\n\"\"\") == \"\"\"\n130\n40\n40\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 4 4\n1 1 1 1 1 1 1 1 1 1\n3 6\n3 7\n3 8\n3 9\n\"\"\") == \"\"\"\n3\n3\n3\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 2 3\n100 1 5 5 5 5 5 5 5 5\n2 8\n4 8\n\"\"\") == \"\"\"\n18\n8\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 6 5\n100 1 1 1 1 1 1 1 1 1\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n\"\"\") == \"\"\"\n100\n1\n1\n1\n1\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 1 2\n1 1 1 1 1 1 1 1 1 1\n2 3\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution", "solution(\"\"\"\n3 2 2\n3 4 2\n1 3\n2 3\n\"\"\") == \"\"\"\n7\n4\n\"\"\"", "solution('''\n4 3 4\n1 2 3 4\n1 4\n2 3\n1 3\n''') == '''\n4\n4\n4\n'''\n\nassert solution('''\n4 4 4\n1 2 3 4\n1 4\n2 3\n1 3\n1 4\n''') == '''\n4\n4\n4\n4\n'''\n\nassert solution('''\n3 2 2\n1 2 3\n1 2\n2 3\n''') == '''\n3\n3\n'''\n\nassert solution('''\n4 4 4\n1 2 3 4\n1 4\n2 3\n1 3\n2 4\n''') == '''\n4\n4\n4\n4\n'''\n\nassert solution('''\n4 4 4\n1 2 3 4\n1 4\n2 3\n1 3\n3 4\n''') == '''\n4\n4\n4\n4\n'''\n\nassert solution('''\n4 2 4\n1 2 3 4\n1 4\n2 3\n''') == '''\n4\n3\n'''\n\nassert solution('''\n4 2 2\n1 2 3 4\n1 4\n2 3\n''') == '''\n2\n1\n'''\n\nassert solution('''\n4 4 4\n1 2 3 4\n1 4\n2 3\n1", "solution(\"\"\"\n4 2 2\n1 2 1 1\n1 3\n2 3\n\"\"\") == '4'\n\nassert solution(\"\"\"\n4 2 2\n1 2 1 1\n1 4\n3 4\n\"\"\") == '6'\n\nassert solution(\"\"\"\n4 2 2\n1 2 1 1\n1 3\n1 3\n\"\"\") == '2'\n\nassert solution(\"\"\"\n4 2 2\n1 2 1 1\n1 4\n1 4\n\"\"\") == '5'\n\nassert solution(\"\"\"\n4 2 2\n1 2 1 1\n1 3\n1 2\n\"\"\") == '2'\n\nassert solution(\"\"\"\n4 2 2\n1 2 1 1\n1 4\n1 2\n\"\"\") == '3'\n\nassert solution(\"\"\"\n4 2 2\n1 2 1 1\n1 3\n1 1\n\"\"\") == '2'\n\nassert solution(\"\"\"\n4 2 2\n1 2 1 1\n1 4\n1 1\n\"\"\") == '2'\n\nassert solution(\"\"\"\n4 2 2\n1 2 1 1\n1 3\n1 3\n\"\"\") == '2'\n\nassert solution(\"\"\"\n4 2 2\n1 2 1 1\n1 4\n1 3\n\"\"\") == '3'\n\nassert solution(\"\"\"\n4 2 2\n1 2 1 1\n1 3\n1 2\n\"\"", "solution(stdin) == expected\n \n# check time complexity\nimport timeit\n\nbegin = timeit.default_timer()\nsolution(stdin)\nend = timeit.default_timer()\nelapsed = end - begin\n \nassert elapsed < 1.0, 'Time complexity is too high'\n \nprint('Correctness: OK\\nTime complexity: OK')\n \n\n# try different input\nfor _ in range(10):\n    n = random.randint(1, 300000)\n    q = random.randint(1, 300000)\n    k = random.randint(1, n)\n    a = [random.randint(1, 1000000000) for _ in range(n)]\n    students = []\n    for _ in range(q):\n        l = random.randint(1, n)\n        r = random.randint(l, n)\n        students.append((l, r))\n    stdin = '\\n'.join([str(n), str(q), str(k)] + list(map(str, a)) + [str(l) + ' ' + str(r) for l, r in students])\n    expected = str(min_cost(n, q, k, a, students))\n    assert solution(stdin) == expected", "solution('''\n5 2 5\n1 2 3 4 5\n1 5\n1 3\n''') == '''\n11\n7\n'''\nassert solution('''\n5 2 5\n1 2 3 4 5\n1 5\n1 3\n''') == '''\n11\n7\n'''\nassert solution('''\n5 3 3\n10 10 10 10 10\n1 2\n1 3\n1 4\n''') == '''\n30\n30\n30\n'''\nassert solution('''\n5 4 2\n1 2 3 4 5\n1 2\n1 3\n1 4\n1 5\n''') == '''\n3\n6\n9\n12\n'''\n\nstdin = '''\n6 5 2\n10 8 10 8 8 10\n1 2\n1 3\n1 6\n1 4\n5 6\n'''\n\nif __name__ == '__main__':\n    print(solution(stdin))", "solution(\"\"\"4 1 2\n20 50 20 10\n1 4\n\"\"\") == \"\"\"0\n\"\"\"\n\nassert solution(\"\"\"4 2 2\n20 50 20 10\n1 3\n2 4\n\"\"\") == \"\"\"20\n0\n\"\"\"\n\nassert solution(\"\"\"4 3 2\n20 50 20 10\n1 2\n2 3\n3 4\n\"\"\") == \"\"\"20\n0\n30\n\"\"\"\n\nassert solution(\"\"\"4 3 3\n20 50 20 10\n1 3\n2 4\n1 4\n\"\"\") == \"\"\"0\n0\n0\n\"\"\"\n\nassert solution(\"\"\"4 4 2\n20 50 20 10\n1 4\n2 4\n1 3\n1 2\n\"\"\") == \"\"\"0\n0\n0\n20\n\"\"\"\n\nassert solution(\"\"\"4 3 1\n20 50 20 10\n1 3\n2 4\n1 4\n\"\"\") == \"\"\"20\n0\n0\n\"\"\"\n\nassert solution(\"\"\"4 3 3\n20 50 20 10\n1 3\n2 4\n1 4\n\"\"\") == \"\"\"0\n0\n0\n\"\"\"\n\nassert solution(\"\"\"5 5 2\n20 50 20 10 30\n1 3\n2 4\n1 5\n1 5\n2 4\n\"\"\") == \"\"\"20\n0\n20\n10\n0\n\"\"\"\n\nassert solution(\"\"\"5 5 3\n20 50 20 10 30\n1 3\n2 4\n", "solution('''\n3 2 2\n1 2 3\n1 2\n2 3\n''') == '''\n3\n5\n'''\n\nassert solution('''\n5 3 3\n5 4 3 2 1\n1 3\n2 4\n5 5\n''') == '''\n9\n8\n1\n'''\n\nassert solution('''\n5 5 2\n1 2 3 4 5\n1 2\n1 3\n1 4\n1 5\n1 5\n''') == '''\n4\n6\n8\n10\n10\n'''\n\nassert solution('''\n10 3 3\n40 20 10 5 2 1 1 1 1 1\n1 2\n3 4\n5 8\n''') == '''\n80\n35\n25\n'''\n\nassert solution('''\n5 3 3\n5 4 3 2 1\n2 3\n2 4\n5 5\n''') == '''\n-1\n-1\n1\n'''", "solution('''\n3 1 1\n1 2 3\n1 3\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n3 2 1\n1 2 3\n1 3\n2 3\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n3 2 2\n1 2 3\n1 3\n2 3\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n6 1 2\n1 2 1 2 1 2\n1 6\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n6 1 3\n1 2 1 2 1 2\n1 6\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n4 2 1\n2 3 4 5\n1 3\n2 4\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n5 2 1\n2 2 1 2 2\n1 5\n1 5\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n5 2 2\n2 2 1 2 2\n1 5\n1 5\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n5 2 3\n2 2 1 2 2\n1 5\n", "solution('''\n2 3 2\n1 3\n1 2\n1 2\n2 2\n''') == '''\n3\n0\n'''\n\n# check the performance of solution\nfrom datetime import datetime\n\ndef read_file(filename: str) -> (int, int, int, list, list):\n    with open(filename, 'r') as file:\n        data = file.read().splitlines()\n        n, q, k = map(int, data[0].split())\n        A = list(map(int, data[1].split()))\n        L = []\n        R = []\n        for i in range(2, len(data)):\n            a, b = map(int, data[i].split())\n            L.append(a)\n            R.append(b)\n        return n, q, k, A, L, R\n\ndef measure_time_of_solution(filename: str) -> float:\n    n, q, k, A, L, R = read_file(filename)\n    t = datetime.now()\n    result = solution(f'''\n{n} {q} {k}\n{' '.join(map(str, A))}\n{'\\n'.join(' '.join(map(str, x)) for x in", "solution('''\n5 4 2\n1 2 2 2 1\n1 2\n2 5\n1 4\n1 5\n''') == '''\n4\n4\n4\n4\n'''\n\nassert solution('''\n5 3 2\n1 2 2 2 1\n1 2\n1 5\n1 5\n''') == '''\n4\n4\n2\n'''\n\nassert solution('''\n5 4 1\n1 2 2 2 1\n1 2\n2 5\n1 4\n1 5\n''') == '''\n4\n6\n4\n4\n'''", "solution('''\n5 2 4\n5 1 10 1 1\n1 5\n1 3\n''') == '11\\n7'\nassert solution('''\n5 3 3\n1 1 1 1 10\n1 5\n2 4\n3 5\n''') == '11\\n6\\n6'\nassert solution('''\n5 2 2\n1 5 1 5 5\n1 5\n1 5\n''') == '10\\n6'\nassert solution('''\n5 1 4\n5 5 5 5 5\n1 5\n''') == '25'\nassert solution('''\n5 2 4\n1 5 1 5 5\n1 5\n3 5\n''') == '11\\n6'\nassert solution('''\n5 2 2\n5 5 5 5 5\n1 5\n1 5\n''') == '25\\n15'\nassert solution('''\n5 2 4\n5 5 5 5 5\n1 5\n1 3\n''') == '25\\n16'\nassert solution('''\n5 2 2\n5 5 5 5 5\n1 5\n1 3\n''') == '25\\n15'\nassert solution('''\n5 1 2\n5 5 5 5 5\n1 5\n''') == '25'\nassert solution('''\n5 1 4\n5 5 5 5 5\n1 3\n", "solution('''\n5 4 1\n2 3 3 3 3\n2 4\n3 5\n1 2\n1 5\n''') == '''\n6\n9\n2\n7\n'''\n\nassert solution('''\n4 3 1\n10 10 10 10\n1 3\n2 3\n2 3\n''') == '''\n30\n30\n30\n'''\n\nassert solution('''\n5 4 2\n7 1 6 6 5\n1 2\n2 5\n3 4\n1 5\n''') == '''\n7\n11\n12\n8\n'''\n\n# accept the challenge\n'''\nInput:\nThe first line contains three integers n, q and k (1 \u2264 n, q \u2264 300 000; 1 \u2264 k \u2264 n) \u2014 the number of days, the number of students and the number of days each ticket is still valid. \n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the cost of one ticket at the corresponding day.\n\nEach of the next q lines contains two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 n) \u2014 the segment of days the corresponding student want to visit the gym.\n\nOutput:\nFor each student, print the minimum possible amount of money they have to spend in", "solution('''\n5 3 3\n1 2 3 4 5\n2 4\n1 5\n2 5\n''') == '''\n6\n14\n15\n'''\n\nassert solution('''\n10 6 2\n1 3 2 4 1 3 2 3 2 5\n1 10\n2 9\n3 8\n4 7\n5 6\n6 5\n''') == '''\n13\n13\n14\n13\n11\n9\n'''", "solution('''\n5 5 2\n1 2 1 1 2\n1 5\n2 4\n3 5\n2 3\n1 3\n''') == '''\n2\n1\n2\n0\n1\n'''\n\nassert solution('''\n5 2 2\n1 2 1 1 2\n1 5\n3 5\n''') == '''\n2\n2\n'''\n\n# show feedback\nprint('OK!')", "solution(\"\"\"\n5 1 2\n1 5 3 2 7\n1 5\n\"\"\") == \"\"\"\n11\n\"\"\"", "solution('''\\\n5 1 1\n10 100 10 100 10\n1 5\n''') == '200'\n\nassert solution('''\\\n5 2 1\n10 100 10 100 10\n1 5\n2 5\n''') == '200'\n\nassert solution('''\\\n5 2 1\n10 100 10 100 10\n1 5\n3 5\n''') == '110'\n\nassert solution('''\\\n5 2 2\n10 100 10 100 10\n1 5\n3 5\n''') == '0'\n\nassert solution('''\\\n5 2 3\n10 100 10 100 10\n1 5\n3 5\n''') == '10'\n\nassert solution('''\\\n5 2 4\n10 100 10 100 10\n1 5\n3 5\n''') == '0'\n\nassert solution('''\\\n5 2 5\n10 100 10 100 10\n1 5\n3 5\n''') == '0'\n\nassert solution('''\\\n5 2 2\n10 100 10 100 10\n1 4\n2 5\n''') == '110'\n\nassert solution('''\\\n5 2 3\n10 100 10 100 10\n1 4\n2 5\n''') == '0'\n\nassert solution('''\\\n5 2 4\n10 100 10 100 10\n1 4\n2 5\n''')", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n\n# get the solution of the kata on codewars and test it\nkata_url = ''\n\n# run the tests\nif __name__ == '__main__':\n    import requests\n\n    session = requests.Session()\n    for test_case, expected_result in test_cases.items():\n        print(\"Testing solution for test case\", test_case)\n        solution_as_string = solution(test_case)\n        result = session.post(kata_url, json={'stdin': test_case}).text\n        if result == solution_as_string:\n            print(\"Successful\")\n        else:\n            print(\"Your solution:\", solution_as_string)\n            print(\"Codewars' solution:\", result)", "solution('''1\n1\n1''') == '1'\nassert solution('''4\n1 2 3 4\n1 4''') == '4'\nassert solution('''4\n1 2 3 4\n2 3''') == '3'\nassert solution('''4\n3 2 1 4\n1 4''') == '6'\nassert solution('''4\n1 2 3 4\n1 2''') == '2'\nassert solution('''4\n1 2 3 4\n2 3''') == '3'\nassert solution('''4\n3 1 2 4\n1 4''') == '4'\nassert solution('''4\n3 1 2 4\n1 2''') == '2'\nassert solution('''4\n3 1 2 4\n2 3''') == '2'\nassert solution('''4\n1 2 3 4\n1 4''') == '4'\nassert solution('''4\n1 2 3 4\n1 3''') == '3'\nassert solution('''4\n1 2 3 4\n1 2''') == '2'\nassert solution('''4\n1 2 3 4\n2 4''') == '3'\nassert solution('''4\n1 2 3 4\n2 3''') == '3'\nassert solution('''4\n1 2 3 4", "solution(\"\"\"\n5 1 2\n1 2 3 4 5\n1 5\n\"\"\") == \"\"\"\n5\n\"\"\"\n\nassert solution(\"\"\"\n5 2 3\n5 3 1 3 2\n1 3\n2 5\n\"\"\") == \"\"\"\n3\n6\n\"\"\"\n\nassert solution(\"\"\"\n5 4 3\n1 5 1 5 1\n1 5\n1 5\n1 5\n1 5\n\"\"\") == \"\"\"\n5\n5\n5\n5\n\"\"\"\n\nassert solution(\"\"\"\n5 2 3\n1 2 3 4 5\n2 3\n1 5\n\"\"\") == \"\"\"\n3\n6\n\"\"\"\n\nassert solution(\"\"\"\n5 4 3\n1 2 3 4 5\n2 3\n1 5\n1 5\n1 5\n\"\"\") == \"\"\"\n3\n6\n6\n6\n\"\"\"\n\nassert solution(\"\"\"\n4 3 3\n10 3 5 4\n2 3\n1 3\n2 4\n\"\"\") == \"\"\"\n10\n13\n13\n\"\"\"\n\nassert solution(\"\"\"\n5 5 5\n1 2 3 4 5\n1 2\n1 3\n1 4\n1 5\n1 5\n\"\"\") == \"\"\"\n2\n3\n4\n5\n5\n\"\"\"\n\nassert solution(\"\"\"\n5 5 5\n1 2 3 4 5\n1 2\n1 3\n1 4\n1 5\n1 5\n\"\"\") == \"\"\"\n2", "solution(\"\"\"\n6 3 2\n2 3 1 3 4 5\n1 4\n4 5\n1 5\n\"\"\") == \"\"\"\n9\n12\n11\n\"\"\"", "solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"", "solution('''\n6 3 2\n1 4 2 6 5 1\n1 5\n2 5\n3 6\n''') == '''\n8\n7\n6\n'''", "solution(\"\"\"\n3 3 2\n1 2 3\n1 3\n2 3\n1 2\n\"\"\") == \"\"\"\n1\n2\n1\n\"\"\"", "solution(\"\"\"\n5 5 1\n1 1 1 1 1\n1 5\n1 4\n3 5\n3 4\n1 1\n\"\"\") == \"\"\"\n3\n2\n2\n2\n1\n\"\"\"", "solution('''\n5 2 5\n1 2 3 4 5\n1 5\n1 4\n''') == '''\n5\n5\n'''\n\nassert solution('''\n5 2 3\n2 3 1 4 5\n1 5\n1 4\n''') == '''\n9\n9\n'''\n\nassert solution('''\n5 2 3\n2 3 1 4 5\n1 5\n1 4\n''') == '''\n9\n9\n'''\n\nassert solution('''\n5 2 3\n2 3 1 4 5\n1 5\n1 4\n''') == '''\n9\n9\n'''\n\nassert solution('''\n5 2 3\n2 3 1 4 5\n1 5\n1 4\n''') == '''\n9\n9\n'''\n\nassert solution('''\n5 2 3\n2 3 1 4 5\n1 5\n1 4\n''') == '''\n9\n9\n'''\n\nassert solution('''\n5 2 3\n2 3 1 4 5\n1 5\n1 4\n''') == '''\n9\n9\n'''\n\nassert solution('''\n5 2 3\n2 3 1 4 5\n1 5\n1 4\n''') == '''\n9\n9\n'''\n\nassert solution('''\n5 2 3\n2 3 1", "solution(\"\"\"\n5 4 2\n10 11 1 5 5\n1 5\n2 4\n2 3\n1 3\n\"\"\") == \"\"\"\n10\n1\n2\n2\n\"\"\"", "solution('''\n6 4 2\n3 1 2 5 4 1\n1 6\n1 5\n1 4\n1 3\n''') == '''\n12\n9\n6\n3\n'''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''", "(solution('''\n5 1 3\n1 2 3 4 5\n2 4\n''')) == '''\n7\n'''\n\n# test the performance of solution\n# assert (solution('''\n# 1 1\n# 1\n# 1 1\n# ''')) == '''\n# 1\n# '''\n\n# assert (solution('''\n# 2 1\n# 1 2\n# 1 2\n# ''')) == '''\n# 1\n# '''\n\n# assert (solution('''\n# 5 2 3\n# 1 2 3 4 5\n# 2 4\n# 3 5\n# ''')) == '''\n# 7\n# 7\n# '''\n\n# assert (solution('''\n# 5 2 1\n# 1 2 3 4 5\n# 2 4\n# 3 5\n# ''')) == '''\n# 3\n# 3\n# '''\n\n# assert (solution('''\n# 5 2 2\n# 1 2 3 4 5\n# 2 4\n# 3 5\n# ''')) == '''\n# 4\n# 4\n# '''\n\n# assert (solution('''\n# 5 2 3\n# 1 2 3 4 5\n# 2 4\n# 2 5\n# ''')) == '''\n# 7\n# 9\n", "solution('''\n5 4 4\n2 3 2 2 4\n1 4\n1 5\n2 5\n2 4\n''') == '''\n14\n12\n8\n10\n'''\n\nassert solution('''\n3 2 4\n1 2 1\n1 2\n1 3\n''') == '''\n1\n1\n'''", "solution(\"\"\"\n5 5 3\n2 3 4 5 6\n1 3\n1 4\n1 5\n2 4\n2 5\n\"\"\") == \"\"\"\n2\n5\n9\n5\n9\n\"\"\"\n\nassert solution(\"\"\"\n5 4 2\n1 2 1 1 1\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"\"\"\n2\n2\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 3 2\n1 2 1 1 1\n1 2\n1 3\n1 5\n\"\"\") == \"\"\"\n2\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 5 1\n1 2 1 1 1\n1 2\n1 3\n1 4\n1 5\n2 5\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 5 1\n1 2 1 1 1\n1 2\n1 3\n1 4\n1 5\n2 5\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 5 3\n2 3 4 5 6\n1 3\n1 4\n1 5\n2 4\n2 5\n\"\"\") == \"\"\"\n2\n5\n9\n5\n9\n\"\"\"\n\nassert solution(\"\"\"\n5 4 2\n1 2 1 1 1\n1 2\n1 3\n1 4\n1 5\n\"\"", "solution('''\n7 3 2\n1 2 3 4 5 6 7\n2 5\n2 3\n4 6\n''') == '''\n15\n6\n23\n'''\n\n# show some random tests\ndef rand_test(n, q, k, a, l, r):\n    def gen_random(mx):\n        return random.randint(1, mx)\n\n    # generate all input data    \n    test_data = f'{n} {q} {k}\\n'\n    test_data += ' '.join(str(gen_random(a)) for _ in range(n)) + '\\n'\n    for _ in range(q):\n        l_ = gen_random(l)\n        r_ = gen_random(r)\n        test_data += f'{l_} {r_}\\n'\n\n    # call solution function and check answer with known result\n    ans = '\\n'.join(str(test()) for test in [test_1, test_2, test_3])\n    assert solution(test_data) == ans, f'\\n{test_data}\\nWRONG\\n{ans}'\n    print('OK')\n\n# run random tests\nfor _ in range(10):\n    print(f'Random test #{_ + 1}')", "solution(\"\"\"input text\"\"\") == \"\"\"output text\"\"\"\nassert solution(\"\"\"another input text\"\"\") == \"\"\"another output text\"\"\"", "solution(\"\"\"\n3 4 2\n1 1 2\n1 2\n1 3\n2 3\n3 3\n\"\"\") == \"\"\"\n2\n2\n1\n0\n\"\"\"\n\nprint(\"passed\")", "solution(\"\"\"\n5 5 5\n1 2 1 2 1\n1 1\n1 5\n3 4\n2 3\n3 5\n\"\"\") == \"\"\"\n3\n3\n1\n2\n1\n\"\"\"", "solution('''\n5 2 2\n1 2 3 4 5\n1 5\n2 4\n''') == '''\n6\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2 2\n2 3 3 4 5\n1 5\n2 4\n''') == '''\n9\n8\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2 2\n1 2 3 4 5\n1 5\n2 4\n''') == '''\n6\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2 2\n1 2 3\n1 3\n2 3\n''') == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n10 5 3\n1 2 3 4 5 6 7 8 9 10\n2 5\n3 6\n4 7\n5 8\n6 9\n''') == '''\n10\n15\n18\n21\n18\n'''\n\n# check the correctness of solution\nassert solution('''\n6 5 4\n1 2 3 4 5 6\n1 3\n2 4\n3 5\n4 6\n5 6\n''') == '''\n3\n4\n6\n7\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5 2", "solution('''\n5 3 2\n2 3 4 3 2\n1 3\n2 4\n1 5\n''') == '''\n9\n11\n15\n'''\nassert solution('''\n5 1 2\n1 1 1 1 1\n1 5\n''') == '''\n5\n'''\nassert solution('''\n5 3 1\n1 1 1 1 1\n1 3\n2 4\n1 5\n''') == '''\n3\n3\n3\n'''\nassert solution('''\n1 1 1\n1\n1 1\n''') == '''\n1\n'''\nassert solution('''\n10 5 2\n4 4 4 4 4 4 4 4 4 4\n1 3\n2 7\n2 8\n5 8\n6 10\n''') == '''\n12\n16\n16\n16\n20\n'''\nassert solution('''\n5 5 5\n5 1 2 3 4\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '''\n5\n2\n2\n3\n4\n'''\nassert solution('''\n15 3 10\n1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10 1 10\n1 5\n3 8\n1 15\n''') == '''\n10\n30\n55\n'''\nassert solution('''\n15", "solution('''\n4 3 2\n1 2 3 4\n1 3\n1 4\n3 4\n''') == '''\n3\n4\n6\n'''\n\nassert solution('''\n6 6 1\n5 4 2 1 5 1\n1 6\n1 2\n3 4\n4 6\n2 5\n5 6\n''') == '''\n26\n7\n4\n4\n4\n4\n'''\n\nassert solution('''\n6 2 2\n2 2 2 2 2 2\n1 1\n1 1\n''') == '''\n2\n2\n'''\n\nassert solution('''\n8 2 5\n9 8 7 6 9 8 7\n1 1\n1 2\n''') == '''\n9\n9\n'''", "solution('''2 2 2\n2 4\n1 2\n1 2''') == '6\\n4'\n\n# check the correctness of solution\nassert solution('''5 3 1\n2 5 2 1 4\n1 5\n1 2\n1 3''') == '5\\n3\\n3'\n\n# check the correctness of solution\nassert solution('''5 5 2\n2 3 2 3 1\n1 1\n2 2\n3 3\n4 4\n5 5''') == '2\\n3\\n3\\n3\\n1'\n\n# get the input\nstdin = input()\n\n# output the result\nprint(solution(stdin))", "solution('''\n4 1 2\n1 1 1 1\n1 4\n''') == '''\n2\n'''\nassert solution('''\n5 3 2\n1 5 3 2 4\n1 2\n3 4\n5 5\n''') == '''\n1\n3\n0\n'''\nassert solution('''\n5 3 1\n2 3 3 3 3\n1 2\n1 3\n1 5\n''') == '''\n6\n9\n6\n'''\nassert solution('''\n10 4 1\n1 1 1 1 1 1 1 1 1 1\n1 1\n2 2\n2 3\n6 10\n''') == '''\n1\n1\n1\n1\n'''\nassert solution('''\n3 2 2\n1 1 1\n1 3\n2 3\n''') == '''\n1\n1\n'''\nassert solution('''\n5 5 1\n1 1 1 1 1\n1 2\n2 3\n3 4\n4 5\n5 5\n''') == '''\n1\n1\n1\n1\n0\n'''\nassert solution('''\n5 3 3\n1 1 1 1 1\n1 3\n2 3\n2 3\n''') == '''\n1\n1\n1\n'''\nassert solution('''\n5 4 2\n1 1 1 1 1\n1 3\n", "solution('''\n\n''') == '''\n\n'''", "(solution(my_tests.my_tests[0]) == my_tests.my_answers[0]), \"Test 0 is not correct\"\nassert (solution(my_tests.my_tests[1]) == my_tests.my_answers[1]), \"Test 1 is not correct\"\nassert (solution(my_tests.my_tests[2]) == my_tests.my_answers[2]), \"Test 2 is not correct\"\nassert (solution(my_tests.my_tests[3]) == my_tests.my_answers[3]), \"Test 3 is not correct\"\nassert (solution(my_tests.my_tests[4]) == my_tests.my_answers[4]), \"Test 4 is not correct\"\nassert (solution(my_tests.my_tests[5]) == my_tests.my_answers[5]), \"Test 5 is not correct\"\nassert (solution(my_tests.my_tests[6]) == my_tests.my_answers[6]), \"Test 6 is not correct\"\nassert (solution(my_tests.my_tests[7]) == my_tests.my_answers[7]), \"Test 7 is not correct\"\nassert (solution(my_tests.my_tests["], "finish_reason": ["length", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "length"], "sum_logprob": [-92.08705615165508, -169.78354269786198, -81.18904368052993, -82.75799141566306, -49.642508366546, -211.6799033070302, -144.97481442251, -61.04221135128, -153.0761990235878, -18.536983998000004, -78.10969845355093, -73.18697143601997, -114.08154598368202, -100.63223437840401, -116.42157858695808, -110.10074515251596, -80.0072581964341, -105.059440907583, -56.418082791914024, -126.50550615923103, -116.13355755897902, -70.01357582137302, -55.9399647771, -24.389722860999996, -68.8928553299845, -114.09527135496104, -75.40191301789395, -125.57735993789602, -34.57546419369999, -9.804414014, -33.03822506619999, -16.682044242, -30.4573954874, -49.39167468372346, -40.17225751690001, -46.730084960576924, -80.2831686114599, -53.000608114800016, -80.56353484054402, -186.48445525179815, -20.35110349719999, -29.842048308100004, -35.3764106214, -96.21020066641049, -140.20060018951895, -114.66655124670397, -82.38636025125398, -129.025479197035, -7.800882992699999, -36.460130807616466], "mean_logprob": [-0.30695685383885, -0.5659451423262066, -0.2706301456017667, -0.27585997138554336, -0.16547502788848667, -0.7055996776901, -0.48324938140836665, -0.5354579943094737, -0.5102539967452934, -0.6392063447586207, -0.2603656615118363, -0.2439565714534, -0.3815436320524482, -0.4746803508415283, -0.38807192862319334, -0.516904906819324, -0.26669086065478, -0.35019813635861, -0.43067238772453437, -0.42168502053077, -0.38711185852993, -0.70013575821373, -0.5827079664281251, -0.9380662638846154, -0.22964285109994834, -0.6167311965133027, -0.25133971005964667, -0.41859119979298665, -0.9344720052351351, -0.7541856933846154, -0.825955626655, -0.4906483600588235, -0.6621172932043479, -0.16463891561241167, -0.9798111589487805, -0.15576694986858966, -0.2676105620382, -0.6794949758307692, -0.26854511613514664, -0.6216148508393267, -0.7017621895586207, -0.6487401806108696, -0.7690524048130435, -0.320700668888035, -0.46733533396506266, -0.6745091249806118, -0.5384729428186535, -0.4300849306567833, -0.48755518704375, -0.12153376935872166]}
{"prompt": "'''\nIn the year 2420 humans have finally built a colony on Mars thanks to the work of Elon Tusk. There are 10^9+7 cities arranged in a circle in this colony and none of them are connected yet. Elon Tusk wants to connect some of those cities using only roads of the same size in order to lower the production cost of those roads. Because of that he gave a list on N cites where some cites can appear more than once and Q queries that you need to answer. For the query you need to determine if it is possible to connect all the cities from L_{i} to R_{i} on that list using only roads of length D_{i}. \n\nInput\n\nThe first line contains two integers N and Q (1 \u2264 N, Q \u2264 2\u22c510^5 ) \u2014 the length of the array of cities and the number of queries you need to answer. \n\nThe second lines contains N integers representing the array of cites. Next Q lines contain three integers L, R and D (1 \u2264 L_{i}, R_{i} \u2264 N, 0 \u2264 D_{i} \u2264 10^9+6) \u2014 the range of cities that needs to be connected and the length of the road that you can use. \n\nOutput\n\nThe output contains Q lines. If it is possible to connect all the cities from the i-th query can be connected with roads of length D_{i} the i-th line should contain the word \"Yes\", otherwise it should contain the word \"No\". \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3 1\n1 2 3\n1 3 1\n''') == '''\nYes\n'''\nassert solution('''\n3 1\n1 2 3\n1 3 2\n''') == '''\nNo\n'''\nassert solution('''\n3 3\n1 2 3\n1 3 1\n2 3 1\n1 3 3\n''') == '''\nYes\nYes\nNo\n'''\n\nprint('OK')", "solution('''\n5 5\n1 2 3 4 5\n1 5 1\n1 5 2\n1 5 4\n1 5 5\n1 5 6\n''') == '''\nYes\nYes\nNo\nYes\nNo\n'''\n\n# get input for the problem\nwith open('input.txt', 'r') as file:\n    print(solution(file.read()))", "solution(\"\"\"3 3\n2 2 2\n1 2 1\n1 2 1\n1 2 2\"\"\") == \"\"\"Yes\nNo\nYes\"\"\"\nassert solution(\"\"\"10 6\n7 4 5 1 5 7 1 6 4 1\n10 5 6\n1 2 3\n2 3 3\n2 6 8\n5 8 9\n7 10 10\n1 10 1\"\"\") == \"\"\"No\nYes\nYes\nNo\nYes\nNo\"\"\"\nassert solution(\"\"\"3 3\n2 2 2\n1 2 1\n1 2 1\n1 2 2\"\"\") == \"\"\"Yes\nNo\nYes\"\"\"\nassert solution(\"\"\"10 6\n7 4 5 1 5 7 1 6 4 1\n10 5 6\n1 2 3\n2 3 3\n2 6 8\n5 8 9\n7 10 10\n1 10 1\"\"\") == \"\"\"No\nYes\nYes\nNo\nYes\nNo\"\"\"\nassert solution(\"\"\"10 6\n7 4 5 1 5 7 1 6 4 1\n10 5 6\n1 2 3\n2 3 3\n2 6 8\n5 8 9\n7 10 10\n1 10 1\"\"\") == \"\"\"No\nYes\nYes\nNo\nYes\nNo\"\"\"\nassert solution(\"\"\"10 6\n7 4 5 1 5 7 1 6 4 1\n10 5 6\n1 2 3\n2 3 3\n2 6 8\n5 8 9\n7 10 10\n1 10 1\"\"\") == \"\"\"", "solution(\"\"\"\n5 5\n1 2 3 4 5\n1 5 1\n1 5 2\n1 5 3\n1 5 4\n1 5 5\n\"\"\") == \"\"\"\nYes\nYes\nNo\nYes\nYes\n\"\"\"\n\n# check whether your solution is not only correct but fast too\nimport timeit\nassert timeit.timeit(lambda: solution(\"\"\"\n5 5\n1 2 3 4 5\n1 5 1\n1 5 2\n1 5 3\n1 5 4\n1 5 5\n\"\"\"), number=5000) < 0.2", "solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n1 5 5\n5 10 5\n''') == '''\nYes\nNo\n'''\n\n# test the speed of solution\n# (be careful with comments and newlines in test data)\nimport timeit\nprint(timeit.timeit('''\nN, Q = 10 ** 5, 10 ** 5\nA = [random.randint(1, 10 ** 5) for _ in range(N)]\nL = [random.randint(1, N) for _ in range(Q)]\nR = [random.randint(1, N) for _ in range(Q)]\nD = [random.randint(0, 10 ** 6) for _ in range(Q)]\nsolution(f'{N} {Q}\\n{\" \".join(map(str, A))}\\n{\"\\n\".join(map(lambda x: \" \".join(map(str, x)), zip(L, R, D)))}')\n''', '''\nfrom random import randint\nimport timeit\ndef solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    N, Q = map(int, inputs[0].split())\n    A = list(map(int, inputs[1].split()))\n   ", "solution('''\n3 2\n3 2 1\n1 2 1\n2 3 1\n''') == '''\nYes\nNo\n'''\n\n#\n# Autogenerated by testing library\n#\ndef check_solution(func, line):\n    n, q = [int(x) for x in line.split()]\n    line = input()\n    nums = [int(x) for x in line.split()]\n    assert len(nums) == n\n    for _ in range(q):\n        line = input()\n        left, right, len = [int(x) for x in line.split()]\n        assert func(n, q, nums, left, right, len) == int(input())\n\nif __name__ == '__main__':\n    n, q = [int(x) for x in input().split()]\n    line = input()\n    nums = [int(x) for x in line.split()]\n    assert len(nums) == n\n    for _ in range(q):\n        line = input()\n        left, right, len = [int(x) for x in line.split()]\n        print(solution(n, q, nums, left, right, len))", "solution(stdin) == stdout\n```\n\n### B. Simple File System\n\n```\n\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e N \u043a\u043e\u043c\u0430\u043d\u0434 (0 <= N <= 100000). \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 N \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0434\u043d\u0443 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u0412\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0435 \u0441 \u043f\u0443\u0441\u0442\u043e\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0443\u0441\u0442\u043e\u0439 \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433. \u041a\u0430\u0436\u0434\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0438\u043c\u0435\u0435\u0442 \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432:\n\nmkdir <dir_name> \u2014", "solution('''\n5 3\n2 3 4 5 2\n1 4 2\n3 5 2\n1 5 2\n''') == '''\nYes\nNo\nYes\n'''", "solution('''\n3 4\n1 2 3\n1 2 2\n2 3 2\n1 3 2\n1 3 2\n''') == '''\nYes\nNo\nYes\nYes\n'''\n\n# get the input\nstdin = '''\n'''\nprint(solution(stdin))", "solution('''\n4 1\n1 2 3 4\n1 3 3\n''') == '''\nYes\n'''\n\n# read input data\nn, q = map(int, input().split())\n\n# read array of cites\na = list(map(int, input().split()))\n\n# for each query\nfor _ in range(q):\n    # read query\n    l, r, d = map(int, input().split())\n\n    # implement solution here\n    result = 'Yes'\n\n    # print result\n    print(result)", "solution(s) == expected_output\n\n\n'''\nChloe wants to play the game \"Dungeon Levels\". In this game the player walks through a dungeon, moving to adjacent rooms by opening doors.\n\nEach room has 3 doors (except for the starting room, which has 2 doors, and the last room, which has 1 door). Each door has a level. The levels of the three doors in a room can be different. The player can walk through a door only if her level is at least as large as the level of the door.\n\nYou are given a sequence of the levels of doors in the dungeon. Find the minimum level that Chloe needs to have in order to get through the dungeon.\n\nIt is guaranteed that it is possible to get through the dungeon.\n\nInput\n\nThe first line contains a single integer N - the number of rooms in the dungeon (2\u2264N\u2264100).\n\nThe second line contains N integers separated by single spaces - the i-th integer is the level of the door leading from the (i+1)-th room to the i-th room.\n\nOutput\n\nOutput a single integer - the minimum level that Chloe needs to get through the dungeon.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution(s) == expected_output\n\n\n'''\nCharlie and his", "solution('''\n4 2\n1 1 2 2\n1 2 1\n2 4 1\n''') == '''\nYes\nNo\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2\n1 2 3 4 5\n1 3 3\n2 5 4\n''') == '''\nYes\nYes\n'''", "solution('''\n4 3\n1 2 3 4\n1 4 1\n1 3 3\n2 4 4\n''') == '''\nYes\nNo\nYes\n'''\n\nassert solution('''\n3 1\n1 2 3\n1 3 2\n''') == '''\nYes\n'''\n\nassert solution('''\n3 2\n1 2 3\n1 3 2\n1 3 1\n''') == '''\nYes\nNo\n'''\n\nassert solution('''\n1 1\n1\n1 1 1\n''') == '''\nYes\n'''", "solution('''\n5 4\n1 2 3 4 5\n2 5 3\n2 5 2\n1 5 2\n1 5 3\n''') == '''\nYes\nNo\nYes\nNo\n'''", "solution('''\n2 2\n2 3\n2 1 1\n1 2 1\n''') == '''\nYes\nNo\n'''\n\nassert solution('''\n4 4\n3 4 1 1\n1 4 2\n1 2 1\n1 3 1\n2 4 1\n''') == '''\nYes\nYes\nNo\nYes\n'''", "solution('''\n4 3\n1 2 1 2\n1 3 3\n2 4 3\n1 4 7\n''') == '''\nYes\nNo\nYes\n'''", "solution(\"\"\"\n10 7\n1 2 3 4 5 6 7 8 9 10\n3 7 2\n1 5 2\n7 10 2\n3 4 2\n3 6 2\n1 5 3\n7 10 1\n\"\"\") == \"\"\"\nYes\nYes\nYes\nNo\nYes\nNo\nYes\n\"\"\"", "(solution('''\n2 3\n1 2\n1 2 2\n1 2 3\n1 2 1\n''') == '''\nYes\nNo\nYes\n''')", "solution('''\n5 4\n1 2 3 2 1\n1 4 5\n2 4 3\n2 5 4\n1 5 6\n''') == '''\nYes\nNo\nYes\nNo\n'''", "solution('''\n100 10\n10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4 8 2 10 8 8 2 10 8 10 2 8 4", "solution(read('input1.txt')) == read('output1.txt')", "solution('''\n3 2\n1 2 3\n1 2 2\n1 3 2\n''') == '''\nYes\nNo\n'''\n\n# test the speed of solution\nimport timeit\nt = timeit.Timer(lambda: solution('''\n3 2\n1 2 3\n1 2 2\n1 3 2\n'''))\nprint(t.timeit(1))", "solution(\"\"\"5 3\n1 3 2 5 5\n1 3 2\n2 5 5\n3 5 4\"\"\") == \"\"\"Yes\nNo\nYes\"\"\"", "solution(\"\"\"\n7 6\n1 2 1 2 1 2 1\n1 5 1\n2 6 1\n3 7 1\n4 8 1\n5 9 1\n6 10 1\n\"\"\") == \"\"\"\nYes\nYes\nYes\nNo\nNo\nNo\n\"\"\"", "solution(\"\") == \"\", \"Empty test case not passed\"\nassert solution(\"\") == \"\", \"Empty test case not passed\"\nassert solution(\"\") == \"\", \"Empty test case not passed\"\nassert solution(\"\") == \"\", \"Empty test case not passed\"\nassert solution(\"\") == \"\", \"Empty test case not passed\"\nassert solution(\"\") == \"\", \"Empty test case not passed\"\n\n\n# submit solution\nprint(solution(sys.stdin.read()))", "solution('''\n5 2\n3 1 2 1 2\n1 5 2\n2 4 2\n''') == '''\nYes\nNo\n'''\n\n# check the correctness of solution\nassert solution('''\n4 3\n1 2 3 4\n1 3 3\n2 4 1\n1 4 4\n''') == '''\nYes\nYes\nNo\n'''\n\n# check the correctness of solution\nassert solution('''\n6 3\n5 4 3 2 1 5\n1 6 6\n1 6 5\n1 6 4\n''') == '''\nYes\nNo\nYes\n'''", "(solution('''\n5 4\n1 2 3 4 5\n1 4 3\n2 5 5\n1 5 4\n1 5 5\n''') == '''\nYes\nNo\nYes\nNo\n''')", "solution(get_input_file('input3.txt')) == get_output_file('output3.txt')\n \nclass TestTask3(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(get_input_file('input3.txt')), get_output_file('output3.txt'))\n    def test_2(self):\n        self.assertEqual(solution(get_input_file('input3_2.txt')), get_output_file('output3_2.txt'))\n    def test_3(self):\n        self.assertEqual(solution(get_input_file('input3_3.txt')), get_output_file('output3_3.txt'))\n\n# run all tests\nif __name__ == '__main__':\n    unittest.main()", "solution(\"\"\"\n5 6\n1 2 3 4 5\n1 5 2\n2 4 2\n3 5 2\n1 3 3\n2 4 3\n3 5 3\n\"\"\") == \"\"\"\nYes\nYes\nYes\nNo\nNo\nNo\n\"\"\"", "solution('''\n7 3\n1 2 3 1 2 3 1\n1 5 4\n2 6 3\n3 7 4\n''') == '''\nYes\nNo\nYes\n'''\nassert solution('''\n10 5\n0 0 0 0 0 0 0 0 0 0\n1 3 1\n2 5 1\n3 7 1\n1 10 1\n1 10 2\n''') == '''\nYes\nYes\nYes\nYes\nNo\n'''\nassert solution('''\n4 3\n0 0 0 0\n1 3 1\n2 4 1\n1 4 1\n''') == '''\nYes\nNo\nYes\n'''\nassert solution('''\n5 4\n0 0 0 0 0\n1 3 2\n2 5 2\n3 4 2\n1 5 2\n''') == '''\nYes\nYes\nNo\nNo\n'''\n\n# let's try benchmarking\nimport cProfile\ncProfile.run('''\nimport random\nimport string\n\nN = 200000\nQ = 200000\ns = f'{N} {Q}\\\\n'\ns += ' '.join(map(str, (random.randint(0, 999999999) for _ in range(N)))) + '\\\\n'\nfor _ in range(Q):\n    s += f'{random.randint(1, N)}", "solution('''\n5 2\n2 3 2 3 2\n2 5 5\n1 4 3\n''') == '''\nYes\nNo\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2\n2 3 2 3 2\n2 5 5\n1 4 5\n''') == '''\nYes\nYes\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2\n2 3 2 3 2\n1 5 5\n1 4 3\n''') == '''\nYes\nNo\n'''\n\n# check the correctness of solution\nassert solution('''\n10 4\n1 2 3 4 5 6 7 8 9 10\n1 10 3\n2 3 6\n6 10 2\n7 10 2\n''') == '''\nYes\nNo\nYes\nNo\n'''\n\n# submit\n# 10083468\t Jun/18/2020 5:44:44 PM\tpython3\t 9.0\t 2652\tAccepted", "solution(\"\"\"6 5\n1 2 1 2 3 4\n3 4 1\n2 3 3\n2 3 4\n3 4 5\n3 4 6\n\"\"\") == \"\"\"Yes\nNo\nYes\nNo\nNo\n\"\"\"\n\n# this is copied from the output for the test and modified for the test\n\n# read the input\ninput_text = \"\"\nfor line in sys.stdin:\n    input_text += line.strip() + \"\\n\"\n\n# call the solution function and write to stdout\nsys.stdout.write(solution(input_text))", "solution('''5 6\n1 2 3 4 5\n1 5 2\n3 5 2\n1 3 2\n1 5 4\n3 5 1\n3 5 3\n''') == '''Yes\nYes\nNo\nYes\nNo\nYes\n'''\n\n# show the execution time\nprint(f'{solution.__name__}' + f' took {timeit.timeit(lambda: solution(stdin), number=100)/100:.4f} seconds to execute')", "solution('''\n4 4\n1 2 1 2\n1 4 1\n1 4 2\n1 4 3\n1 2 2\n''') == '''\nYes\nNo\nYes\nNo\n'''", "solution('''\n5 2\n1 2 1 2 1\n1 5 1\n1 5 2\n''') == '''\nYes\nNo\n'''\n\nassert solution('''\n2 3\n1 1\n1 2 2\n1 2 3\n1 2 1\n''') == '''\nYes\nNo\nYes\n'''\n\nassert solution('''\n3 1\n1 2 1\n1 3 1\n''') == '''\nYes\n'''\n\nassert solution('''\n5 3\n1 1 1 1 1\n1 5 4\n1 5 5\n1 5 6\n''') == '''\nNo\nYes\nNo\n'''\n\nassert solution('''\n4 3\n1 2 1 1\n1 4 1\n1 4 2\n1 4 3\n''') == '''\nYes\nNo\nYes\n'''\n\n# print all provided test cases\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n    print(solution(stdin))", "'No\\nYes\\nNo\\n' == solution('''3 3\n3 3 3\n2 2 1\n1 2 2\n1 2 3\n''')\nassert 'Yes\\nYes\\nNo\\n' == solution('''4 2\n1 2 2 2\n1 4 1\n1 4 2\n''')\nassert 'Yes\\nNo\\nYes\\n' == solution('''5 3\n2 3 1 1 3\n2 3 1\n1 5 3\n1 4 1\n''')\nassert 'Yes\\nYes\\nNo\\n' == solution('''3 3\n2 2 2\n1 3 2\n1 3 2\n1 3 1\n''')\nassert 'Yes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\n' == solution('''8 8\n2 3 3 3 2 3 3 3\n1 8 2\n2 8 2\n3 8 2\n4 8 2\n5 8 2\n6 8 2\n7 8 2\n8 8 2\n''')\nassert 'Yes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\nYes\\n' == solution('''8 8\n2 3 3 3 2 3 3 3\n1 8 1\n2 8 1\n3 8 1\n4 8 1\n5 8 1\n6 8 1", "solution('''\n5 4\n1 2 3 4 5\n1 4 2\n1 3 2\n2 4 2\n1 5 2\n''') == '''\nYes\nNo\nYes\nNo\n'''\n\n# check the correctness of solution\nassert solution('''\n4 3\n1 1 1 1\n1 4 1\n1 3 1\n2 4 1\n''') == '''\nYes\nYes\nYes\n'''", "solution('''\n5 5\n1 2 2 2 1\n1 5 1\n2 4 2\n3 5 1\n1 4 4\n1 5 2\n''') == '''\nYes\nYes\nYes\nNo\nYes\n'''", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nassert solution(my_input) == my_output\nassert solution(task_input) == task_output\nprint(\"All tests passed\")", "solution('''\n4 1\n1 2 3 4\n1 4 1\n''') == '''\nYes\n'''\n\n# check the correctness of solution\nassert solution('''\n6 3\n1 2 3 2 3 1\n2 5 1\n1 6 2\n1 5 1\n''') == '''\nYes\nNo\nYes\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2\n1 2 3 4 5\n3 5 2\n2 5 3\n''') == '''\nYes\nNo\n'''\n\n# check the correctness of solution\nassert solution('''\n8 2\n1 2 3 2 3 4 2 3\n1 8 2\n5 8 3\n''') == '''\nYes\nNo\n'''\n\n# check the correctness of solution\nassert solution('''\n8 3\n1 2 3 4 5 6 7 8\n1 8 2\n1 4 4\n1 8 3\n''') == '''\nYes\nNo\nYes\n'''\n\n# check the correctness of solution\nassert solution('''\n9 2\n1 1 1 1 1 1 1 1 1\n2 5 3\n1 9 4\n''') == '''\nNo\nYes\n'''\n\n# check the correctness of solution\nassert solution('''\n10 1\n1 2 3 4 5 6 7 8 9 10\n1", "solution('''\n3 4\n1 2 3\n1 2 2\n2 3 2\n1 3 3\n2 3 3\n''') == '''\nYes\nNo\nYes\nNo\n'''", "solution(\"\"\"4 3\n4 3 1 2\n1 4 2\n2 4 2\n2 4 2\"\"\") == \"\"\"Yes\nNo\nYes\"\"\"", "solution('''\n4 4\n1 2 1 2\n1 4 1\n1 4 2\n1 4 3\n2 3 2\n2 3 3\n''') == '''\nYes\nNo\nYes\nYes\n'''", "solution(\"\"\"\n5 2\n1 2 3 4 5\n1 3 3\n2 4 3\n\"\"\") == \"\"\"\nYes\nNo\n\"\"\"", "solution(\"1 1\\n1\\n1 1 1\") == \"Yes\"\nassert solution(\"1 2\\n1\\n1 1 0\\n1 1 1\") == \"Yes\\nNo\"\nassert solution(\"5 2\\n1 2 3 4 5\\n2 3 2\\n3 4 5\") == \"Yes\\nNo\"\nassert solution(\"5 5\\n1 2 3 4 5\\n2 3 0\\n3 4 1\\n2 3 4\\n1 5 2\\n1 2 5\") == \"Yes\\nNo\\nYes\\nYes\\nNo\"\nassert solution(\"5 7\\n1 2 3 4 5\\n2 3 1\\n3 4 0\\n1 5 0\\n1 5 1\\n1 5 2\\n2 3 3\\n3 4 3\") == \"Yes\\nYes\\nYes\\nNo\\nYes\\nNo\\nNo\"\nassert solution(\"6 6\\n1 2 3 4 5 6\\n1 2 0\\n1 2 1\\n1 6 0\\n1 6 1\\n1 6 2\\n1 6 3\") == \"Yes\\nNo\\nYes\\nNo\\nYes\\nNo\"\nassert solution(\"7 7\\n1 2 3 4 5 6 7\\n2 3 0\\n3 4 1\\n4 5 2\\n5 6 3", "solution('''\n5 3\n1 2 3 4 5\n2 4 3\n2 5 3\n1 5 6\n''') == '''\nYes\nNo\nYes\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2 3 4 5\n2 4 3\n2 5 3\n1 5 6\n''') == '''\nYes\nNo\nYes\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2 3 4 5\n2 4 3\n2 5 3\n1 5 6\n''') == '''\nYes\nNo\nYes\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2 3 4 5\n2 4 3\n2 5 3\n1 5 6\n''') == '''\nYes\nNo\nYes\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2 3 4 5\n2 4 3\n2 5 3\n1 5 6\n''') == '''\nYes\nNo\nYes\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2 3 4 5\n2 4 3\n2 5 3\n1 5 6\n''') == '''\nYes\nNo\nYes\n'''\n\n# check the correctness of solution\nassert", "solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"4 3\n1 2 3 4\n1 4 1\n2 4 2\n3 4 3\n\"\"\") == \"\"\"Yes\nNo\nYes\n\"\"\"\nassert solution(\"\"\"1 1\n1\n1 1 1\n\"\"\") == \"\"\"Yes\n\"\"\"\nassert solution(\"\"\"5 5\n1 2 3 4 5\n1 5 1\n2 5 2\n3 5 3\n4 5 4\n5 5 5\n\"\"\") == \"\"\"Yes\nYes\nYes\nYes\nYes\n\"\"\"\nassert solution(\"\"\"5 5\n1 2 3 4 5\n1 5 1\n2 5 2\n3 5 3\n4 5 4\n5 5 6\n\"\"\") == \"\"\"Yes\nYes\nYes\nYes\nNo\n\"\"\"\nassert solution(\"\"\"5 5\n1 2 3 4 5\n1 5 1\n2 5 2\n3 5 3\n4 5 4\n5 5 5\n\"\"\") == \"\"\"Yes\nYes\nYes\nYes\nYes\n\"\"\"\nassert solution(\"\"\"5 5\n1 2 3 4 5\n1 5 1\n2 5 2\n3 5 3\n4 5 4\n5 5 6\n\"\"\") == \"\"\"Yes\nYes\nYes\nYes\nNo\n\"\"\"\nassert solution(\"\"\"5 5\n1 2 3 4 5\n1 5 1\n2 5 2\n3 5 3\n4 5 4\n5 5 6\n\"\"\") == \"\"\"Yes\nYes\nYes\nYes\nNo\n\"\"\"", "solution('''\n4 6\n1 2 1 1\n1 2 2\n1 2 1\n1 2 3\n1 2 4\n1 2 5\n1 4 4\n''') == '''\nYes\nYes\nNo\nNo\nNo\nNo\n'''\nassert solution('''\n3 3\n1 2 3\n1 2 1\n1 2 1\n1 3 1\n''') == '''\nYes\nYes\nYes\n'''\n\n# check the performance of solution\nfrom utils import *\n\nassert solution(get_datas()) == get_result()", "solution('''\n1 2\n1\n1 1 1\n2 1 1\n''') == '''\nYes\nNo\n'''\n\n# input\ninput_str = '''\n5 5\n1 2 3 4 5\n1 5 1\n2 4 2\n2 5 3\n2 3 3\n3 5 3\n'''\n\n# output\nexpected_output_str = '''\nYes\nYes\nNo\nYes\nNo\n'''\n\n# check correctness\nprint('Output:\\n' + solution(input_str))\nprint('Expected output:\\n' + expected_output_str)\nassert solution(input_str) == expected_output_str\nprint('Success!')"], "finish_reason": ["stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "stop"], "sum_logprob": [-31.856825036349992, -35.00148358240002, -109.39311884829006, -56.816380299269966, -109.00441822992404, -87.15954810504498, -117.26309078888882, -24.045871117899992, -30.019777315219997, -62.65332082282998, -249.45862457025999, -31.471064295179996, -41.39769745219401, -23.148943954659995, -44.687466114829995, -20.289234634999996, -49.77888679380001, -16.878811397400007, -28.225913885999997, -46.71900133740002, -14.814813410799998, -31.123917917439993, -29.326444721499996, -30.968934248680004, -27.462300155009977, -61.5424972923503, -26.908229547900003, -51.04770219178796, -29.234928889399995, -139.56874152969797, -145.49508434280997, -122.71224898809795, -61.679063771624, -21.825715230499995, -93.45703984620103, -124.49124364567189, -39.13895772359, -30.986721665349997, -27.78760342325, -116.89123202498078, -19.551413054899992, -25.899064329499996, -25.423016964500007, -15.928350115000002, -118.43857066378196, -31.768058885890984, -12.908066150540002, -50.06437128826299, -75.54686739526002, -85.29996842847002], "mean_logprob": [-0.31541410927079205, -0.402315903245977, -0.3646437294943, -0.469556861977438, -0.36334806076641335, -0.2995173474400172, -0.3908769692962957, -0.5864846614121951, -0.43506923645246376, -0.49333323482543306, -0.8315287485675333, -0.4034751832715385, -0.3160129576503359, -0.49253072243957446, -0.558593326435375, -0.507230865875, -0.7429684596089552, -0.43279003583076925, -0.6005513592765958, -0.155730004458, -0.7797270216210526, -0.35368088542545456, -0.8625424918088236, -0.5339471422186207, -0.25428055699083335, -0.45587035031370593, -0.56058811558125, -0.24660725696515942, -0.5220523015964286, -0.46522913843232666, -0.6643611157205936, -0.9586894452195156, -0.5607187615602182, -0.4744720702282609, -0.40633495585304785, -0.41497081215224, -0.40769747628739583, -0.5846551257613207, -0.59122560475, -0.38963744008326934, -0.43447584566444447, -0.7848201311969697, -0.50846033929, -0.49776094109375, -0.39479523554594, -0.10589352961963666, -0.14184688077516483, -0.16688123762754334, -0.5948572235847244, -0.550322376957871]}
{"prompt": "'''\nIntegers from 1 to n (inclusive) were sorted lexicographically (considering integers as strings). As a result, array a_1, a_2, ..., a_n was obtained.\n\nCalculate value of (\u2211_{i = 1}^n ((i - a_i) mod 998244353)) mod 10^9 + 7.\n\nx mod y here means the remainder after division x by y. This remainder is always non-negative and doesn't exceed y - 1. For example, 5 mod 3 = 2, (-1) mod 6 = 5. \n\nInput\n\nThe first line contains the single integer n (1 \u2264 n \u2264 10^{12}).\n\nOutput\n\nPrint one integer \u2014 the required sum.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n''') == '''\n1\n'''\n\nif __name__ == '__main__':\n    # read int, n\n    n = int(input())\n\n    # solve the problem ...\n    result = solution(n)\n\n    # output the result\n    print(result)", "solution('''0''') == '0'\nassert solution('''1''') == '0'\nassert solution('''2''') == '0'\nassert solution('''3''') == '0'\nassert solution('''4''') == '1'\nassert solution('''5''') == '2'\nassert solution('''6''') == '3'\nassert solution('''7''') == '4'\nassert solution('''8''') == '5'\nassert solution('''9''') == '6'\nassert solution('''10''') == '7'\nassert solution('''11''') == '8'\nassert solution('''12''') == '9'\nassert solution('''13''') == '10'\nassert solution('''14''') == '11'\nassert solution('''15''') == '12'\nassert solution('''16''') == '13'\nassert solution('''17''') == '14'\nassert solution('''18''') == '15'\nassert solution('''19''') == '16'\nassert solution('''20''') == '17'\nassert solution('''21''') == '18'\nassert solution('''22''') == '19'\nassert solution", "solution(test_case) == output", "solution('''\n\n''') == '''\n\n'''\n\n# test the solution with a big input file\nwith open('tests/answer.txt', 'r') as f:\n    answer = f.read()\nwith open('tests/input.txt', 'r') as f:\n    test_input = f.read()\nassert solution(test_input) == answer", "(solution(\"\"\"5\n1 2 3 4 5\"\"\") == \"6\")\nassert (solution(\"\"\"12\n1 2 3 4 5 6 7 8 9 10 11 12\"\"\") == \"330\")\nassert (solution(\"\"\"1000000000\nsolution('''\n5\n''') == '''\n10\n'''\nassert solution('''\n3\n''') == '''\n3\n'''\nassert solution('''\n6\n''') == '''\n10\n'''\nassert solution('''\n1\n''') == '''\n0\n'''\nassert solution('''\n2\n''') == '''\n2\n'''", "solution(\"\")\n\n# get the input and run the solution against it\nget_input(solution, __file__)", "solution('''1\n''') == '0'\nassert solution('''2\n''') == '0'\nassert solution('''3\n''') == '0'\nassert solution('''4\n''') == '2'\nassert solution('''5\n''') == '4'\nassert solution('''6\n''') == '6'\nassert solution('''7\n''') == '8'\nassert solution('''8\n''') == '6'\nassert solution('''9\n''') == '2'\nassert solution('''10\n''') == '0'\nassert solution('''11\n''') == '4'\nassert solution('''12\n''') == '6'\nassert solution('''13\n''') == '8'\nassert solution('''14\n''') == '6'\nassert solution('''15\n''') == '2'\nassert solution('''16\n''') == '0'\nassert solution('''17\n''') == '4'\nassert solution('''18\n''') == '6'\nassert solution('''19\n''') == '8'\nassert solution('''20\n''') == '6'\nassert solution('''21\n''') == '2'\nassert solution('''22\n", "solution('''\n''') == '''\n'''\n\n# get input and run the solution\ninput()\nprint(solution(input()))", "solution(stdin) == expected\n\n# run test\nassert eval(solution('1')) == 0\nassert eval(solution('4')) == 7\nassert eval(solution('10')) == 85\nassert eval(solution('2')) == 0\nassert eval(solution('3')) == 0\nassert eval(solution('5')) == 10\nassert eval(solution('6')) == 15\nassert eval(solution('7')) == 28\nassert eval(solution('8')) == 42\nassert eval(solution('9')) == 63\nassert eval(solution('16')) == 168\nassert eval(solution('15')) == 153\nassert eval(solution('19')) == 190\nassert eval(solution('20')) == 225\nassert eval(solution('21')) == 291\nassert eval(solution('22')) == 357\nassert eval(solution('23')) == 418\nassert eval(solution('24')) == 490\nassert eval(solution('25')) == 581\nassert eval(solution('26')) == 672\nassert eval(solution('27')) == 751\nassert eval(solution('28')) == 841\nassert eval(solution('29')) == 940\nassert eval(solution('", "(solution(\n    '''\n    4\n    '''\n    ) == '''\n    4\n    ''')\n\n# print(solution(stdin))", "solution('''\n1\n''') == '''\n0\n'''\n\nassert solution('''\n5\n''') == '''\n5\n'''\n\nassert solution('''\n3\n''') == '''\n2\n'''\n\nassert solution('''\n1000000000000000000\n''') == '''\n399999999399999996\n'''", "solution('''3\n1 2 3''') == '10'\nassert solution('''5\n5 4 3 2 1''') == '10'\nassert solution('''10\n2 1 3 4 5 6 7 8 9 10''') == '20'\nassert solution('''1\n2''') == '0'\nassert solution('''4\n4 4 4 4''') == '10'\nassert solution('''5\n6 4 2 5 3''') == '10'\nassert solution('''3\n1 1 1''') == '10'\nassert solution('''4\n4 3 2 1''') == '10'\nassert solution('''4\n1 2 3 4''') == '10'\nassert solution('''5\n1 1 1 1 1''') == '10'\nassert solution('''2\n2 1''') == '0'\nassert solution('''1\n1''') == '0'\nassert solution('''2\n1 2''') == '0'\nassert solution('''3\n3 2 1''') == '10'\nassert solution('''5\n5 5 5 5 5''') == '10'\nassert solution('''1\n1''') == '0'\nassert solution('''1\n1''') == '0'\nassert solution(''", "solution('''\n10\n''') == '''\n9\n'''\n\nassert solution('''\n1\n''') == '''\n0\n'''\n\nassert solution('''\n2\n''') == '''\n2\n'''\n\nassert solution('''\n5\n''') == '''\n9\n'''\n\nassert solution('''\n50\n''') == '''\n405\n'''\n\nassert solution('''\n500\n''') == '''\n4050\n'''\n\nassert solution('''\n5000\n''') == '''\n40500\n'''\n\nassert solution('''\n50000\n''') == '''\n405000\n'''\n\nassert solution('''\n500000\n''') == '''\n4050000\n'''\n\nassert solution('''\n5000000\n''') == '''\n40500000\n'''\n\nassert solution('''\n50000000\n''') == '''\n405000000\n'''\n\nassert solution('''\n500000000\n''') == '''\n4050000000\n'''\n\nassert solution('''\n5000000000\n''') == '''\n40500000000\n'''\n\nassert solution('''\n50000000000\n''') == '''\n405000000000\n'''\n\nassert", "solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert", "solution('''\n5\n''') == '''\n12\n'''\nassert solution('''\n6\n''') == '''\n15\n'''\nassert solution('''\n7\n''') == '''\n9\n'''\n\n# get the input\nwith open('input.txt', 'r') as f:\n    input = f.read()\n\n# get the output\nwith open('output.txt', 'w') as f:\n    f.write(solution(input))", "solution(input_sample) == output_sample", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution(\"8\") == \"10\"\nassert solution(\"1\") == \"0\"\nassert solution(\"9\") == \"25\"\nassert solution(\"12\") == \"43\"\nassert solution(\"15\") == \"68\"\nassert solution(\"72617839845\") == \"13922696058\"\nassert solution(\"818672697525285438\") == \"20443469054\"\nassert solution(\"6027679657480722465\") == \"213419051\"\nassert solution(\"54104625661909481875\") == \"994895389\"\nassert solution(\"59401609847284914764\") == \"407845678\"\nassert solution(\"22751695802430782690\") == \"287836984\"\nassert solution(\"81245356070968894357\") == \"624279104\"\nassert solution(\"2903003010210592024\") == \"456615570\"\nassert solution(\"751259961658555097\") == \"540762854\"\nassert solution(\"51185299513516743970\") == \"478039011\"\nassert solution(\"4895237797285820\") == \"96602690\"\nassert solution(\"74964032646585552655\") == \"671172", "solution('''\n\n'''.strip()) == '''\n\n'''.strip()\n\n# get the input for the solution\ndef get_input():\n    lines = []\n    for line in stdin:\n        lines.append(line.rstrip('\\n'))\n    return '\\n'.join(lines)\n\n# get the output of the solution using the input\ndef get_output(input: str) -> str:\n    return solution(input)\n\n# get the expected output for the solution using the input\ndef get_expected_output(input: str) -> str:\n    lines = input.split('\\n')\n    n = int(lines[0])\n    a = list(range(1, n + 1))\n    sum = 0\n    for i in range(n):\n        sum += (i + 1 - a[i]) % 998244353\n    sum %= (10 ** 9 + 7)\n    return str(sum)\n\n# check if the expected output is the same as the actual output\ndef check_output(input: str, actual_output: str, expected_output: str) -> bool:\n    return actual_output == expected_output\n\n# check if the solution passed all the test cases\ndef test_solution():\n    test_cases = int(stdin.read", "solution(\"5\") == \"5\"\nassert solution(\"7\") == \"21\"\nassert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"8\") == \"45\"\nassert solution(\"6\") == \"15\"\nassert solution(\"9\") == \"57\"\nassert solution(\"10\") == \"84\"\nassert solution(\"4\") == \"2\"\nassert solution(\"11\") == \"126\"\nassert solution(\"12\") == \"165\"\nassert solution(\"13\") == \"213\"\nassert solution(\"14\") == \"270\"\nassert solution(\"15\") == \"336\"\nassert solution(\"16\") == \"411\"\nassert solution(\"17\") == \"495\"\nassert solution(\"18\") == \"588\"\nassert solution(\"19\") == \"690\"\nassert solution(\"20\") == \"801\"\nassert solution(\"21\") == \"921\"\nassert solution(\"22\") == \"1050\"\nassert solution(\"23\") == \"1188\"\nassert solution(\"24\") == \"1335\"\nassert solution(\"25\") == \"1491\"\nassert solution(\"26\") == \"1656\"\nassert solution(\"27\") == \"1830\"\nassert solution(\"28\") == \"2013\"\nassert solution(\"29\") == \"2204\"\nassert solution(\"", "solution(\"input\") == \"correct_output\"\n\n# print the solution\nprint(solution(read_input()))", "str(solution('''\n3\n''')) == '''\n2\n'''\n\nassert str(solution('''\n9\n''')) == '''\n41\n'''\n\nassert str(solution('''\n10^12\n''')) == '''\n10^12\n'''", "solution(str(input())) == str(output())", "solution('''\n10\n''') == '''\n1\n'''\nassert solution('''\n100\n''') == '''\n69\n'''\nassert solution('''\n1000000000\n''') == '''\n600000009\n'''\nassert solution('''\n1000000000000\n''') == '''\n60000000009\n'''\nassert solution('''\n1000000000000000\n''') == '''\n600000000009\n'''\nassert solution('''\n1000000000000000000\n''') == '''\n600000000009\n'''\n\n# test the speed of solution\nimport timeit\nprint(timeit.timeit('solution(''\\'\\\\n100000000000\\\\n\\'\\'\\')', setup='from __main__ import solution', number=1))", "solution('''\n42\n''') == '42'", "solution('''\n10\n''') == '''\n17\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n''') == '''\n5\n'''", "solution('''10''') == '''1'''\nassert solution('''2''') == '''0'''\nassert solution('''1''') == '''0'''\nassert solution('''3''') == '''1'''\nassert solution('''11''') == '''2'''\nassert solution('''12''') == '''3'''\nassert solution('''13''') == '''4'''\nassert solution('''1234567890123''') == '''498896201'''\nassert solution('''579620985109820486535265941093204865352659410932048653526594109320486535265941093204865352659410932048653526594109320486535265941093204865352659410932048653526594109320486535265941093204865352659410932048653526594109320486535265941093204865352659410932048653526594109320486535265941093204865352659410932048653526594109320486535265941093204865352659410932048", "solution(input()) == output", "solution('''\n5\n''') == '''\n18\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n''') == '''\n60\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n''') == '''\n0\n'''\n\n# this code is used for testing\nif __name__ == '__main__':\n    try:\n        with open('tests/0004_test.txt', 'r') as f:\n            for i, line in enumerate(f):\n                if i == 0:\n                    T = int(line)\n                else:\n                    result = solution(line)\n                    print(result)\n    except IOError:\n        pass", "solution(SAMPLE_1) == '16'\nassert solution(SAMPLE_2) == '0'\nassert solution(SAMPLE_3) == '16", "solution('''1''') == '0'\nassert solution('''2''') == '1'\nassert solution('''3''') == '6'\nassert solution('''6''') == '42'\nassert solution('''15''') == '1485'\nassert solution('''1000000000000000000''') == '65177748251136250'\nassert solution('''1000000000000000001''') == '65177748251136255'\nassert solution('''2000000000000000000''') == '130355496502272510'\nassert solution('''7000000000000000000''') == '451249658337447540'\nassert solution('''10000000000000000000''') == '130355496502272510'\nassert solution('''10000000000000000001''') == '130355496502272515'\nassert solution('''60000000000000000000''') == '1082803972017452050'\nassert solution('''100000000000000000000''') == '1303554965022725100'\nassert solution('''100000000000000000001''') == '1303554965022725105'\nassert solution('''900000000000000000000''') == '1303554965022725100'\nassert solution('''1000000000000000000000''') == '5174217990090902020'\nassert", "solution('''\n\n''') == '''\n\n'''", "solution('''\n10\n''') == '''\n18\n'''\n\nassert solution('''\n100\n''') == '''\n348572\n'''\n\nassert solution('''\n1000000000000\n''') == '''\n2130488748\n'''\n\nassert solution('''\n10\n''') == '''\n18\n'''\n\nassert solution('''\n100\n''') == '''\n348572\n'''\n\nassert solution('''\n1000000000000\n''') == '''\n2130488748\n'''", "solution('''\n''') == '''\n'''\n\n# get the input\nstdin = '''\n'''\n\n# open a output file to write a solution\nfout = open('output.txt', 'w')\n\n# write a solution to a file\nfout.write(solution(stdin))\n\n# close the output file\nfout.close()", "solution('''\n1\n''') == '''\n1\n'''\n\nassert solution('''\n2\n''') == '''\n2\n'''\n\nassert solution('''\n3\n''') == '''\n2\n'''\n\nassert solution('''\n9\n''') == '''\n55\n'''\n\nassert solution('''\n11\n''') == '''\n14\n'''\n\nassert solution('''\n24\n''') == '''\n53\n'''\n\nassert solution('''\n1000000000\n''') == '''\n899999950\n'''\n\n# check time limit\nimport timeit\nstart = timeit.default_timer()\nprint(solution('''\n1000000000\n'''))\nprint(timeit.default_timer() - start)", "solution('''\n4\n''') == '''\n6\n'''\n\n# get the input for tests\nfrom unittest import TestCase\nimport io\nfrom contextlib import redirect_stdout\n\nclass Test(TestCase):\n    def test_1(self):\n        string_input = '''\n        4\n        '''\n        string_output = '''\n        6\n        '''\n        with io.StringIO() as buf, redirect_stdout(buf):\n            self.assertEqual(buf.getvalue(), solution(string_input))", "solution(\"\"\"10\"\"\") == \"\"\"14\"\"\"\n\n# get the input\nT = int(input())\nINPUT = []\nfor i in range(T):\n    INPUT.append(input())\n\n# run and collect outputs\nOUTPUT = []\nfor i in range(T):\n    result = solution(INPUT[i])\n    OUTPUT.append(result)\n\n# print outputs\nfor i in range(T):\n    print(OUTPUT[i])", "solution('''123\n''') == '123'\n\n# upload the solution to test cases\n# copy the folder containing the source code to the source folder\n# run the upload script\n# make sure the solution passes all tests\n# if you want to see the solution after uploading, remove the comment of the next line\n# print(solution(input()))", "solution(\"\") == \"\", \"empty input\"\nassert solution(\"1\") == \"1\", \"1\"\nassert solution(\"2\") == \"3\", \"2\"\nassert solution(\"3\") == \"2\", \"3\"\nassert solution(\"4\") == \"6\", \"4\"\nassert solution(\"5\") == \"10\", \"5\"\nassert solution(\"6\") == \"6\", \"6\"\nassert solution(\"7\") == \"4\", \"7\"\nassert solution(\"8\") == \"7\", \"8\"\nassert solution(\"9\") == \"10\", \"9\"\nassert solution(\"10\") == \"14\", \"10\"\nassert solution(\"11\") == \"21\", \"11\"\nassert solution(\"12\") == \"17\", \"12\"\nassert solution(\"13\") == \"14\", \"13\"\nassert solution(\"14\") == \"12\", \"14\"\nassert solution(\"15\") == \"10\", \"15\"\nassert solution(\"16\") == \"9\", \"16\"\nassert solution(\"17\") == \"6\", \"17\"\nassert solution(\"18\") == \"12\", \"18\"\nassert solution(\"19\") == \"12\", \"19\"\nassert solution(\"20\") == \"12\", \"20\"\nassert solution(\"21\") == \"9\", \"21\"\nassert solution(\"22\") == \"6\", \"22\"\nassert solution(\"", "solution('''1''') == '0'\nassert solution('''2''') == '1'\nassert solution('''3''') == '5'\nassert solution('''4''') == '3'\nassert solution('''5''') == '12'\nassert solution('''6''') == '7'\nassert solution('''7''') == '22'\nassert solution('''8''') == '13'\nassert solution('''9''') == '37'\nassert solution('''10''') == '21'\nassert solution('''11''') == '61'\nassert solution('''12''') == '35'\nassert solution('''13''') == '102'\nassert solution('''14''') == '57'\nassert solution('''15''') == '177'\nassert solution('''16''') == '104'\nassert solution('''17''') == '305'\nassert solution('''18''') == '171'\nassert solution('''19''') == '506'\nassert solution('''20''') == '285'\nassert solution('''21''') == '812'\nassert solution('''22''') == '455'\nassert solution('''23''') == '1287'\n", "solution('''\n5\n''') == '''\n7\n'''\n\nassert solution('''\n9\n''') == '''\n5\n'''\n\n# ---\n# print the solution\nprint(solution(open('input.txt', 'r').read()))", "solution('''\n4\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n''') == '''\n0\n'''\n\nassert solution('''\n2\n''') == '''\n2\n'''\n\nassert solution('''\n3\n''') == '''\n3\n'''\n\nassert solution('''\n1234567890123\n''') == '''\n7499090824\n'''\n\nassert solution('''\n999999999999\n''') == '''\n5187167962\n'''", "solution('''5''') == '''5'''\nassert solution('''12''') == '''15'''\nassert solution('''2''') == '''0'''\nassert solution('''100000000''') == '''1729425054'''", "solution(SAMPLE_INPUT_OUTPUT[0]) == SAMPLE_INPUT_OUTPUT[1]", "solution('''1\n''') == '0'\nassert solution('''2\n''') == '0'\nassert solution('''3\n''') == '1'\nassert solution('''4\n''') == '1'\nassert solution('''12\n''') == '9'\nassert solution('''1000000000000\n''') == '387638763426'\n\nimport time\nstart = time.perf_counter()\nprint(solution('''\n'''))\nend = time.perf_counter()\nprint('Duration:', end - start)", "solution(sample_input) == expected_output\n\n# check the performance of solution\nassert solution(problem_input) == solution_output", "solution('''\n''') == '''\n'''\n#\n#\n#\n\n'''\nConsecutive strings\n\nYou are given an array of non-empty strings, and you are given a string s. Your task is to make a function called areFollowingPatterns which returns true if the array follows the patterns and false if it does not. For this problem, a pattern is defined as the way an array is structured. It consists of ordering of strings, the order that these strings follow. The pattern is shown when you look at the array and determine the order it follows.\n\nThe pattern to look for is whether the previous string is the same as the next string in the array.\n\nExamples\n\nareFollowingPatterns([\"cat\", \"dog\", \"dog\"], \"abba\") \u279e true\n// pattern: [\"cat\", \"dog\", \"dog\"]\n// \"cat\" same as \"dog\" (last)\n// \"dog\" same as \"dog\" (last)\n// \"dog\" same as \"cat\" (next)\n\nareFollowingPatterns([\"cat\", \"dog\", \"doggy\"], \"abba\") \u279e false\n// \"dog\" NOT same as \"doggy\"\n\nareFollowingPatterns([\"cat\", \"cat\", \"cat\"], \"aaa\") \u279e true\n// all same, \"cat\"\n\nNotes\n\n-If the", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution(solution_input) == solution_output"], "finish_reason": ["stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop"], "sum_logprob": [-36.955992242899995, -22.38377283909698, -11.60973624, -43.037757662670025, -38.83333485419005, -30.438920978420988, -22.42788733804, -32.813562763345026, -15.675996209200001, -135.51240807890204, -27.457943493499997, -40.99522611666399, -106.29243911715, -45.064866054909, -14.386523627151997, -38.28071819820999, -8.601864072099998, -12.947249306590003, -832.3158484391704, -87.95535110807704, -63.62578484841705, -26.21741554653, -33.50973324558, -8.553046813, -76.74948449143398, -14.199981323, -21.170068667089996, -147.18190977053587, -6.93539944, -77.5020598951, -30.611022032939992, -192.35460860184392, -7.3446757489999985, -69.13807665062498, -38.77221176342002, -83.93965122353103, -46.918080328231014, -39.77562411970198, -117.9049299728, -80.07681045839001, -52.829237540778074, -40.05525678946999, -84.93765095562031, -54.622947564449994, -13.445409464872, -78.33484777237601, -22.898162257000003, -213.27872597083245, -12.76396862691, -8.382179354], "mean_logprob": [-0.5132776700402778, -0.07461257613032334, -1.2899706933333335, -0.49468686968586206, -0.12944444951396666, -0.32381830828107444, -0.8009959763585714, -0.10937854254448333, -0.44788560597714283, -0.4517080269296733, -0.6864485873375, -0.4766886757751628, -0.3543081303905, -0.15021622018303, -0.047955078757173336, -0.3328758104192174, -0.7819876429181818, -0.043157497688633334, -2.7743861614639, -0.29318450369359, -0.21208594949472334, -0.9363362695189286, -0.459037441720274, -0.6579266779230769, -0.4240303010576464, -1.0142843802142858, -0.47044597037977776, -0.4906063659017867, -0.9907713485714286, -0.45589446997117644, -0.8273249198091892, -0.6411820286728134, -0.45904223431249996, -0.5237733079592803, -0.445657606476092, -0.43718568345589065, -0.3609083102171615, -0.3615965829063818, -1.4924674680101266, -0.26692270152796665, -0.17609745846926, -0.616234719838, -0.6066975068258593, -0.8534835556945313, -0.480193195174, -0.5759915277380588, -0.7386503953870968, -0.710929086569441, -0.0425465620897, -0.6985149461666667]}
{"prompt": "'''\nFor two positive integers l and r (l \u2264 r) let c(l, r) denote the number of integer pairs (i, j) such that l \u2264 i \u2264 j \u2264 r and \\operatorname{gcd}(i, j) \u2265 l. Here, \\operatorname{gcd}(i, j) is the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers i and j.\n\nYouKn0wWho has two integers n and k where 1 \u2264 k \u2264 n. Let f(n, k) denote the minimum of \u2211_{i=1}^{k}{c(x_i+1,x_{i+1})} over all integer sequences 0=x_1 < x_2 < \u2026 < x_{k} < x_{k+1}=n.\n\nHelp YouKn0wWho find f(n, k). \n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 3 \u22c5 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 10^5). \n\nOutput\n\nFor each test case, print a single integer \u2014 f(n, k).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"1\\n3 1\") == \"1\"\nassert solution(\"1\\n9 2\") == \"8\"\nassert solution(\"1\\n2 3\") == \"0\"\nassert solution(\"1\\n100000 1\") == \"100000\"\nassert solution(\"1\\n100000 2\") == \"99999\"\nassert solution(\"1\\n100000 3\") == \"99998\"\nassert solution(\"1\\n100000 4\") == \"99997\"\nassert solution(\"1\\n100000 5\") == \"99996\"\nassert solution(\"1\\n100000 6\") == \"99995\"\nassert solution(\"1\\n100000 7\") == \"99994\"\nassert solution(\"1\\n100000 8\") == \"99993\"\nassert solution(\"1\\n100000 9\") == \"99992\"\nassert solution(\"1\\n100000 10\") == \"99991\"\nassert solution(\"1\\n100000 11\") == \"99990\"\nassert solution(\"1\\n100000 12\") == \"99989\"\nassert solution(\"1\\n100000 13\") == \"99988\"\nassert solution(\"1\\n100000 14\") == \"99987\"\nassert solution(\"1\\n100000 15\") == \"99986\"\nassert solution(\"1\\n100000 16\") == \"99985\"\nassert solution(\"", "solution(\"\") == \"\", \"Empty input\"\n\n# print(solution(\"\"))", "solution('''\n6\n2 1\n3 1\n3 2\n10 4\n100 5\n100000 9\n''') == '''\n0\n1\n1\n37\n2061\n3486065\n'''", "solution('''\n1\n5 2\n''') == '''\n6\n'''\n\n# execute\nresult = solution(stdin)\nprint(result)", "solution(\"1 2\\n\") == '2'\nassert solution(\"2 1\\n\") == '0'\nassert solution(\"3 1\\n\") == '0'\nassert solution(\"3 2\\n\") == '1'\nassert solution(\"3 3\\n\") == '2'\nassert solution(\"4 1\\n\") == '0'\nassert solution(\"4 2\\n\") == '1'\nassert solution(\"4 3\\n\") == '3'\nassert solution(\"4 4\\n\") == '3'\nassert solution(\"5 1\\n\") == '0'\nassert solution(\"5 2\\n\") == '1'\nassert solution(\"5 3\\n\") == '4'\nassert solution(\"5 4\\n\") == '5'\nassert solution(\"5 5\\n\") == '6'\nassert solution(\"6 1\\n\") == '0'\nassert solution(\"6 2\\n\") == '1'\nassert solution(\"6 3\\n\") == '4'\nassert solution(\"6 4\\n\") == '6'\nassert solution(\"6 5\\n\") == '9'\nassert solution(\"6 6\\n\") == '11'\nassert solution(\"7 1\\n\") == '0'\nassert solution(\"7 2\\n\") == '1'\nassert solution(\"7 3\\n\") == '4'\nassert solution", "solution('''\n4\n4 2\n4 3\n4 4\n4 1\n''') == '''\n10\n24\n30\n0\n'''\n\nassert solution('''\n3\n1 1\n3 2\n3 3\n''') == '''\n0\n3\n9\n'''\n\n# simulate the submission process\nsubmit_task(solution, [\n    ('4\\n4 2\\n4 3\\n4 4\\n4 1\\n', '10\\n24\\n30\\n0\\n'),\n    ('3\\n1 1\\n3 2\\n3 3\\n', '0\\n3\\n9\\n'),\n], 'https://codeforces.com/contest/1222/submission/69954362')", "solution('''\n3\n3 2\n5 1\n3 3\n''') == '''\n1\n0\n3\n'''", "solution('''2\n10 3\n3 2''') == '''8\n1'''\n\n# check the correctness of solution\nassert solution('''5\n5 2\n6 2\n7 2\n8 2\n9 2''') == '''3\n4\n5\n6\n7'''\n\n# check the correctness of solution\nassert solution('''5\n5 3\n6 3\n7 3\n8 3\n9 3''') == '''6\n9\n12\n15\n18'''\n\n# check the correctness of solution\nassert solution('''5\n5 4\n6 4\n7 4\n8 4\n9 4''') == '''10\n15\n20\n25\n30'''\n\n# check the correctness of solution\nassert solution('''5\n5 5\n6 5\n7 5\n8 5\n9 5''') == '''15\n21\n27\n33\n39'''\n\n# check the correctness of solution\nassert solution('''5\n5 6\n6 6\n7 6\n8 6\n9 6''') == '''21\n28\n35\n42\n49'''\n\n# check the correctness of solution\nassert solution('''5\n5 7\n6 7\n7 7\n8 7\n9 7''') == '''28\n36\n44\n52\n60'''\n\n#", "solution('''\n2\n2 1\n5 2\n''') == '''\n2\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 2\n3 3\n3 1\n''') == '''\n6\n8\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 2\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 2\n3 3\n3 1\n''') == '''\n6\n8\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4 2\n4 3\n4 4\n4 1\n''') == '''\n12\n16\n20\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 2\n5 3\n5 4\n5 5\n5 1\n''') == '''\n20\n28\n36\n44\n20\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n6 2\n6 3\n6 4\n6 5\n6 6\n6 1\n''') == '''", "solution(\"3\\n5 1\\n5 2\\n5 3\") == '0\\n6\\n12'\n\n# read the stdin\nstdin = sys.stdin.read()\n\n# print the solution to stdout\nsys.stdout.write(solution(stdin))", "solution(\"\\n\".join([\n    \"3\",\n    \"3 1\",\n    \"4 2\",\n    \"12 3\"\n])) == \"\\n\".join([\n    \"3\",\n    \"3\",\n    \"13\"\n])", "solution(\"\") == \"\", \"Solution is incorrect\"\n\n# check if solution is as fast as it should be\nfrom timeit import timeit\nassert timeit(lambda: solution(\"\"), number=1) < 0.001, \"It is not as fast as it should be\"\n\n# submit solution\nfrom submit import submit_solution\nsubmit_solution(solution, \"This is your answer\")", "solution('''\n3\n2 1\n2 2\n3 2\n''') == '''\n2\n2\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4 1\n4 2\n4 3\n''') == '''\n7\n7\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4 1\n4 2\n4 3\n''') == '''\n7\n7\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4 1\n4 2\n4 3\n''') == '''\n7\n7\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4 1\n4 2\n4 3\n''') == '''\n7\n7\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4 1\n4 2\n4 3\n''') == '''\n7\n7\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4 1\n4 2\n4 3\n''') == '''\n7\n7\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4 1\n4 2\n4 3\n''') == '", "solution('''\n2\n5 3\n9 2\n''') == '''\n21\n6\n'''", "(solution('''\n3\n4 2\n4 4\n10 3\n''') == '''\n3\n7\n14\n''')", "solution(\"\"\"\n2\n2 1\n5 2\n\"\"\") == \"\"\"\n1\n4\n\"\"\"\n# test for performance\nimport cProfile\ncProfile.run(\"solution(r'''\\n2\\n2 1\\n5 2\\n''')\")", "solution('''\n2\n2 1\n6 3\n''') == '''\n0\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n6 3\n2 1\n''') == '''\n3\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n2 1\n''') == '''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 2\n6 3\n''') == '''\n1\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n6 3\n3 2\n''') == '''\n3\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n10 5\n10 5\n''') == '''\n12\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n10 5\n10 5\n''') == '''\n12\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5 2\n5 2\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5 2\n5 2\n''') == '''\n2", "solution('''\n3\n7 2\n11 2\n20 4\n''') == '''\n9\n14\n32\n'''\n\n# use 'print' to output\ndef solution_v2(stdin: str) -> None:\n    pass\n\n# # check the correctness of solution\n# assert solution_v2('''\n# 3\n# 7 2\n# 11 2\n# 20 4\n# ''') == '''\n# 9\n# 14\n# 32\n# '''\n\n# use 'sys.stdin.readlines()' to read lines\nimport sys\n\ndef solution_v3(stdin: str) -> None:\n    pass\n\n# # check the correctness of solution\n# assert solution_v3('''\n# 3\n# 7 2\n# 11 2\n# 20 4\n# ''') == '''\n# 9\n# 14\n# 32\n# '''\n\n# use 'sys.stdin.readlines()' and 'open(file)' to read lines\nimport sys\n\ndef solution_v4(stdin: str) -> None:\n    pass\n\n# # check the correctness of solution\n# assert solution_v4('''\n# 3\n# 7 2\n# 11 2\n# 20 4\n# ''') == '''\n# 9\n# 14\n", "solution('''\n3\n1 1\n3 2\n4 3\n''') == '''\n0\n4\n6\n'''", "solution('''\n2\n2 1\n2 2\n''') == '''\n0\n1\n'''\n\n# check the efficiency of solution\nimport time\nimport random\n\nrandom.seed(int(time.time()))\nTEST_CASE_COUNT = 1000\nTEST_CASE_LENGTH = 100000\n\n# generate test cases\ntest_cases = [''] * TEST_CASE_COUNT\nfor i in range(TEST_CASE_COUNT):\n    n = random.randint(1, TEST_CASE_LENGTH)\n    k = random.randint(1, n)\n    test_cases[i] = '{}\\n{} {}\\n'.format(1, n, k)\n\n# solution timing test\nstart = time.time()\n\nfor test_case in test_cases:\n    assert solution(test_case)\n\nend = time.time()\nprint('time elapsed:', end - start)", "solution(\"3\\n2 1\\n4 2\\n9 3\") == \"1\\n4\\n18\"\nassert solution(\"4\\n4 2\\n2 2\\n2 1\\n9 3\") == \"4\\n1\\n1\\n18\"\nassert solution(\"4\\n4 2\\n2 2\\n2 1\\n9 3\") == \"4\\n1\\n1\\n18\"\nassert solution(\"3\\n2 1\\n4 2\\n9 3\") == \"1\\n4\\n18\"\nassert solution(\"1\\n1 1\") == \"0\"\nassert solution(\"5\\n10 2\\n10 3\\n10 4\\n10 5\\n10 1\") == \"20\\n36\\n52\\n68\\n0\"\nassert solution(\"5\\n10 2\\n10 3\\n10 4\\n10 5\\n10 1\") == \"20\\n36\\n52\\n68\\n0\"\nassert solution(\"1\\n2 1\") == \"1\"\nassert solution(\"1\\n2 1\") == \"1\"\nassert solution(\"6\\n4 1\\n4 2\\n4 3\\n4 4\\n4 5\\n4 6\") == \"0\\n2\\n2\\n2\\n2\\n2\"\n", "solution('''\n3\n4 2\n4 3\n4 4\n''') == '''\n2\n4\n4\n'''\n\nassert solution('''\n1\n1 1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n10 6\n''') == '''\n4\n'''", "solution(sample_input) == sample_output", "solution(r'''\n3\n3 1\n3 2\n6 3\n''') == r'''\n0\n1\n8\n'''\n\n# submit solution\nTESTCASES = [\n    ('in/002.in', 'out/002.out'),\n]\n\nif __name__ == '__main__':\n    from os import path\n    from sys import exit\n    from subprocess import run, PIPE\n    from time import time\n\n    # add parent directory to import path\n    from pathlib import Path\n    sys.path.append(str(Path(__file__).parent.parent))\n\n    # run solution for all testcases\n    for tc, out in TESTCASES:\n        # read input from file\n        with open(tc, 'r') as f:\n            inp = f.read()\n\n        # call solution function\n        start = time()\n        res = solution(inp)\n        end = time()\n\n        # write output to file\n        with open(out, 'w') as f:\n            f.write(res)\n\n        # compare with solution\n        run(['diff', '-u', out, path.join(path.dirname(tc), 'solution.out')], stdout=PIPE)\n\n        # print statistics\n        print(f", "solution('''\n2\n2 1\n3 2\n''') == '''\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n3 2\n''') == '''\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n3 2\n''') == '''\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n3 2\n''') == '''\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n3 2\n''') == '''\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n3 2\n''') == '''\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n3 2\n''') == '''\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n3 2\n''') == '''\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n3 2\n''') == '''\n1", "solution('''\n2\n5 3\n20 7\n''') == '''\n13\n69\n'''", "solution('''\n3\n2 1\n2 2\n3 2\n''') == '''\n0\n1\n1\n'''\n\n# check the performance of solution\n# import timeit\n# I = ['5', '1 1', '2 1', '2 2', '3 2', '2 3']\n# print(timeit.timeit(lambda: '\\n'.join(solution(x) for x in I), number=1000))", "solution('''\n1\n1 1\n''') == '0'\n\nassert solution('''\n1\n2 1\n''') == '1'\n\nassert solution('''\n3\n3 1\n3 2\n3 3\n''') == '3\\n6\\n12'\n\n# print the solution\nf = open('output', 'w')\nf.write(solution(open('input', 'r').read()))\nf.close()", "solution(TESTCASES[0]) == RESULTS[0]\nassert solution(TESTCASES[1]) == RESULTS[1]\nassert solution(TESTCASES[2]) == RESULTS[2]\n\nprint('passed')", "\"1\\n\" == solution(\"\")", "solution(\"\"\"1\n3 2\"\"\") == \"3\"\n\n# check if the solution is fast enough\nimport timeit\n\nstart = timeit.default_timer()\nsolution(\"\"\"100\n10^5 2\"\"\")\nend = timeit.default_timer()\nprint(\"Time:\", (end - start) * 1000, \"ms\")", "solution(\"\") == \"\"\n\n# if no argument was passed to the python script\nif __name__ == \"__main__\":\n    import os\n    import sys\n    class DefaultArg: pass\n    # generate input data\n    input_data = [DefaultArg() for _ in range(int(sys.argv[1]))]\n    for i, test in enumerate(input_data):\n        # generate big random integer lists\n        test.data = \"\"\n    # solve the problem with input data\n    solution(\"\\n\".join([f\"{data.data}\" for data in input_data]))", "solution('''\n6\n4 2\n4 3\n4 4\n4 1\n1 1\n1 2\n''') == '''\n4\n4\n4\n4\n0\n0\n'''", "solution('''4\n4 1\n4 2\n4 3\n4 4''') == '''6\n10\n12\n12'''", "solution(str(inp", "solution('''\n1\n4 2\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 3\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 5\n''') == '''\n5\n'''\n\nprint('Accepted')", "solution(\"\"\"\n10\n1 1\n1 2\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n3 4\n4 1\n\"\"\") == \"\"\"\n0\n1\n0\n1\n2\n0\n1\n2\n3\n0\n\"\"\", \"Example\"\nassert solution(\"\"\"\n0\n\"\"\") == \"\"\"\n0\n\"\"\", \"Edge 0\"\nassert solution(\"\"\"\n1\n10 10\n\"\"\") == \"\"\"\n45\n\"\"\", \"Edge 1\"\nassert solution(\"\"\"\n5\n1 1\n1 2\n2 1\n2 2\n2 3\n\"\"\") == \"\"\"\n0\n1\n0\n1\n2\n\"\"\", \"Additional 1\"\nassert solution(\"\"\"\n5\n3 1\n3 2\n3 3\n3 4\n4 1\n\"\"\") == \"\"\"\n0\n1\n2\n3\n0\n\"\"\", \"Additional 2\"\n\n# same performance as solution\ndef solution_any(stdin: str) -> str:\n    pass\n\nassert solution_any(\"\"\"\n10\n1 1\n1 2\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n3 4\n4 1\n\"\"\") == \"\"\"\n0\n1\n0\n1\n2\n0\n1\n2\n3\n0\n\"\"\", \"Example\"\nassert solution_any(\"", "solution(sample_input) == sample_output", "solution(\"\"\"\n1\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n1 2\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\"\"\"\n3\n4 2\n4 3\n4 4\n\"\"\") == \"\"\"\n4\n8\n12\n\"\"\"", "solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution(\"\") == \"\", \"Testcase failed\"\nassert solution", "solution('''\n6\n5 2\n10 2\n1000000 4\n1000000 5\n1000000 1\n1000000 2\n''') == '''\n3\n6\n0\n0\n0\n0\n'''", "solution(solution_data.example) == solution_data.solution_example\nassert solution(solution_data.case1) == solution_data.solution_case1\nassert solution(solution_data.case2) == solution_data.solution_case2\nassert solution(solution_data.case3) == solution_data.solution_case3\nassert solution(solution_data.case4) == solution_data.solution_case4\nassert solution(solution_data.case5) == solution_data.solution_case5\n\n# test with big random data\nfrom random import random\nfrom time import time\n\nstart = time()\nfor i in range(100):\n    test_input = [[random() * 10**5, random() * 10**5] for _ in range(10**5)]\n    assert solution(test_input)\nend = time()\nprint(end - start)", "solution('''\n3\n5 2\n10 3\n100 4\n''') == '''\n4\n20\n4200\n'''", "solution(sample_input) == sample_output\n\n# upload to https://csacademy.com/submit/\n# Good luck!", "solution(r'''\n1\n10 2\n''') == r'''\n9\n'''\n\nprint(solution(r'''\n1\n10 2\n'''))", "solution(\n    '''\n    3\n    3 1\n    3 2\n    3 3\n    '''\n) == '''\n0\n0\n1\n'''\n\n# check performance\n# from timeit import timeit\n# def solution_n(stdin: str) -> str:\n#     return solution(stdin)\n# print(timeit(solution_n, number=10, globals=globals()))", "solution('''\n3\n3 1\n5 2\n7 3\n''') == '''\n2\n11\n23\n'''", "solution('''\n5\n5 2\n6 3\n7 4\n8 5\n123456 123\n''') == '''\n16\n44\n63\n97\n1217895\n'''\n\n# get the input\ninput = stdin\n\n# print the solution\nprint(solution(input))", "solution('''1\n5 2''') == '''8'''\nassert solution('''5\n10 2\n15 2\n15 3\n15 4\n15 5''') == '''10\n15\n30\n45\n60'''", "solution(stdin='1\\n4 2') == '4'\nassert solution(stdin='1\\n4 4') == '4'\nassert solution(stdin='1\\n4 3') == '4'\nassert solution(stdin='1\\n4 1') == '4'\nassert solution(stdin='3\\n3 2\\n3 1\\n3 3') == '3\\n3\\n3'\nassert solution(stdin='5\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5') == '2\\n2\\n2\\n2\\n2'\nassert solution(stdin='4\\n4 1\\n4 2\\n4 3\\n4 4') == '4\\n4\\n4\\n4'\nassert solution(stdin='1\\n7 3') == '6'\nassert solution(stdin='1\\n3 2') == '3'\nassert solution(stdin='3\\n5 1\\n5 2\\n5 3') == '5\\n5\\n5'\nassert solution(stdin='2\\n5 1\\n5 2') == '5\\n5'\nassert solution(stdin='1\\n5 3') == '5'\nassert solution(stdin='1\\n5 4') =="], "finish_reason": ["length", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-45.890574087975004, -17.241620426199997, -60.44464418398999, -26.694943386500004, -44.636680638010986, -90.47491547151401, -20.9351719854, -51.72734799767005, -69.05122850549714, -41.398663750090016, -26.782275821379997, -71.36866508215003, -39.23120658746038, -22.166157319100005, -24.0788701103, -34.81911267353001, -60.79715776889839, -98.0660434769389, -16.338749143799994, -94.88538221566004, -104.52398224792094, -33.65140441083, -6.8232088392999986, -131.83110105279485, -22.8080697991697, -23.957967705999994, -48.00939520939001, -49.363781563780016, -21.894380039886997, -12.701034267, -53.435298995795, -126.92743378439, -27.370212721600005, -20.357769325800003, -14.64062526, -34.94971540694, -85.44701587925697, -6.8232103693, -31.699973003850012, -18.953288296448, -40.214433415820004, -94.06538112184506, -26.9524993871, -37.68626049592199, -19.611755494150003, -59.00208678983, -21.116319279499994, -76.94295276986, -40.534962176850016, -90.35664253620205], "mean_logprob": [-0.15296858029325, -0.86208102131, -1.2088928836798, -0.7024985101710526, -0.14878893546003666, -0.5111577145283277, -0.6753281285612903, -0.17242449332556667, -0.23017076168499068, -0.6088038786777941, -0.46986448809438597, -0.7929851675794445, -0.13077068862486801, -0.8525445122730769, -0.752464690946875, -0.5803185445588334, -0.20265719256299466, -0.32688681158979666, -0.5270564239935484, -0.4235954563199107, -0.34841327415973666, -0.4370312261146753, -0.6202917126636364, -0.4394370035093167, -0.07602689933056567, -0.9214602963846154, -0.4661106331008738, -0.46569605248849055, -0.36490633399811667, -1.4112260296666668, -0.6763961898201899, -0.9197640129303624, -0.5950046243826087, -0.63618029143125, -2.0915178942857144, -0.39715585689704547, -0.28482338626419, -0.6202918517545455, -0.4594198986065217, -0.06317762765482667, -0.8042886683164, -0.4437046279332311, -0.842265605846875, -1.1776956404975625, -0.46694655938452384, -0.5841790771270297, -0.6811715896612903, -1.115115257534203, -0.7369993123063636, -0.30118880845400664]}
{"prompt": "'''\nA sequence of integers b_1, b_2, \u2026, b_m is called good if max(b_1, b_2, \u2026, b_m) \u22c5 min(b_1, b_2, \u2026, b_m) \u2265 b_1 + b_2 + \u2026 + b_m.\n\nA sequence of integers a_1, a_2, \u2026, a_n is called perfect if every non-empty subsequence of a is good.\n\nYouKn0wWho has two integers n and M, M is prime. Help him find the number, modulo M, of perfect sequences a_1, a_2, \u2026, a_n such that 1 \u2264 a_i \u2264 n + 1 for each integer i from 1 to n.\n\nA sequence d is a subsequence of a sequence c if d can be obtained from c by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first and only line of the input contains two space-separated integers n and M (1 \u2264 n \u2264 200; 10^8 \u2264 M \u2264 10^9). It is guaranteed that M is prime.\n\nOutput\n\nPrint a single integer \u2014 the number of perfect sequences modulo M.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\\\n1 1\n''') == '''\\\n1\n'''\n\n# check the correctness of solution\nassert solution('''\\\n2 11\n''') == '''\\\n11\n'''\n\n# check the correctness of solution\nassert solution('''\\\n3 11\n''') == '''\\\n162\n'''\n\n# check the correctness of solution\nassert solution('''\\\n4 11\n''') == '''\\\n2137\n'''\n\n# check the correctness of solution\nassert solution('''\\\n5 11\n''') == '''\\\n27132\n'''\n\n# check the correctness of solution\nassert solution('''\\\n200 1000000007\n''') == '''\\\n43122992\n'''\n\n# check the correctness of solution\nassert solution('''\\\n200 1000000009\n'''", "solution('''1 1000000000''') == '''9'''\nassert solution('''2 1000000000''') == '''162'''\nassert solution('''200 1000000000''') == '''190506909'''\n\n# get the input and run the solution\ninput()\nresult = solution(input())\nprint(result)", "solution(\"4 20\") == \"4\"\nassert solution(\"4 40\") == \"4\"\nassert solution(\"4 80\") == \"4\"\nassert solution(\"4 1000000000\") == \"4\"\nassert solution(\"5 20\") == \"8\"\nassert solution(\"5 1000000000\") == \"8\"\nassert solution(\"200 1000000000\") == \"492930136\"\nassert solution(\"200 20\") == \"7\"\n\n# this is the template code to read input and output\nif __name__ == \"__main__\":\n    def read_input():\n        return stdin.readline().strip()\n\n    def write_output(output: str):\n        print(output)\n\n    from sys import stdin\n    from typing import List, Optional\n\n    # the main code\n    test_case_count = int(read_input())\n    for i in range(test_case_count):\n        # read inputs\n        inputs = [read_input() for i in range(1)]\n        outputs = solution(*inputs)\n        # write outputs\n        write_output(outputs)\n        # debug info\n        stderr.write(f\"Pass #{i+1} {inputs} {outputs}\\n\")", "solution('''\n3 17\n''') == '''\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n2 5\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1000000000\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1 0\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1000000001\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1000000001\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1012937483\n''') == '''\n266958903\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1012937483\n''') == '''\n168720741\n'''\n\n# check the correctness of solution\nassert solution(''", "solution(input()) == output\n\nprint(\"passed\")", "solution(stdin1) == stdout1\n\n# check the correctness of solution\nassert solution(stdin2) == stdout2\n\n# check the correctness of solution\nassert solution(stdin3) == stdout3\n\n# check the correctness of solution\nassert solution(stdin4) == stdout4\n\n# check the correctness of solution\nassert solution(stdin5) == stdout5\n\nprint('Success!')", "solution('''\n2 1000000007\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3 1000000007\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n3 1000000009\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1 1000000007\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1 1000000009\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n200 1000000007\n''') == '792813194'\n\n# check the correctness of solution\nassert solution('''\n200 1000000009\n''') == '919169919'\n\n# check the correctness of solution\nassert solution('''\n100 1000000007\n''') == '248484879'\n\n# check the correctness of solution\nassert solution('''\n100 1000000009\n''') == '248096046'\n\n# check the correctness of solution\nassert solution('''\n10 1000000007\n''') == '12096616'\n\n# check the correctness of solution\nassert solution('''\n10 1000000009\n''') == '12120942'\n\n# check the", "solution(\"1 10\") == \"1\"\nassert solution(\"2 11\") == \"4\"\nassert solution(\"5 1234567890123456789\") == \"223868\"\nassert solution(\"42 1234567890123456789\") == \"772970\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 1234567890123456789\") == \"794863\"\nassert solution(\"200 12345", "solution(\"5 1000000007\") == \"96012432\"\nassert solution(\"1 1000000007\") == \"3\"\nassert solution(\"200 1000000007\") == \"23981141\"\nassert solution(\"200 1000000009\") == \"31460241\"\nassert solution(\"200 1000000033\") == \"58109022\"\nassert solution(\"200 1000000099\") == \"96012432\"\nassert solution(\"200 1000000103\") == \"30020837\"\nassert solution(\"200 1000000105\") == \"32259474\"\nassert solution(\"200 1000000129\") == \"80956954\"\nassert solution(\"200 1000000141\") == \"96012432\"\nassert solution(\"200 1000000161\") == \"30020837\"\nassert solution(\"200 1000000165\") == \"32259474\"\nassert solution(\"200 1000000169\") == \"80956954\"\nassert solution(\"200 1000000181\") == \"96012432\"\nassert solution(\"200 1000000185\") == \"30020837\"\nassert solution(\"200 1000000189\") == \"32259474\"\nassert solution(\"200 1000000195\") == \"80956954\"\nassert solution(\"200 1000000207\") == \"96012432\"\nassert solution(\"200 1000000209\") == \"96012432\"\nassert solution(\"200 1000000213", "solution('''\n4 1\n''') == '4'\n\n# check that solution can run by opening a file\nwith open('test/test_1_input.txt', 'r') as f:\n    lines = f.readlines()\n    print(solution(lines[0]))\n\n# check that solution can run by using input (stdin) and raw_input\nimport sys\nimport io\n\n# simulate stdin\nsys.stdin = io.StringIO(lines[0])\n\n# stdin is simulated and the input can be retrieved\n_input = input()\n\n# simulate stdin\nsys.stdin = io.StringIO(lines[0])\n\n# stdin is simulated and the input can be retrieved\n_input = raw_input()\n\n# to retrieve command line argument args\n# sys.argv[1]\n\n# to simulate argv\nsys.argv = ['_', '4', '1']\n\n# parse the argument\nimport argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('n', type=int)\nparser.add_argument('m', type=int)\nargs = parser.parse_args()\nprint(args.n, args.m)\n\n# simulate stdin\nsys.stdin = io.StringIO(lines[", "solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"4 11\") == \"5\"\nassert solution(\"5 18\") == \"11\"\nassert solution(\"6 36028786302984\") == \"75944031529981\"\nassert solution(\"10 1000000000000000000\") == \"2\"\nassert solution(\"13 1000000000000000000\") == \"8\"\nassert solution(\"15 1000000000000000000\") == \"30\"\nassert solution(\"18 1000000000000000000\") == \"28\"\nassert solution(\"20 1000000000000000000\") == \"48\"\nassert solution(\"22 1000000000000000000\") == \"3\"\nassert solution(\"26 1000000000000000000\") == \"7\"\nassert solution(\"29 1000000000000000000\") == \"9\"\nassert solution(\"32 1000000000000000000\") == \"7\"\nassert solution(\"35 1000000000000000000\") == \"3\"\nassert solution(\"37 1000000000000000000\") == \"10\"\nassert solution(\"39 1000000000000000000\") == \"12\"\nassert solution(\"41 1000000000000000000\") == \"7\"\nassert solution(\"43 1000000000000000000\") == \"1\"\nassert solution(\"45 1000000000000000000\") == \"1\"\nassert solution(\"48 1000000000000000000\") == \"0\"\nassert solution(\"50 1000000000000000000\") == \"10\"\nassert solution(\"52 1000000000000000000\") == \"12\"\nassert solution(\"54 1000000000000000000\") == \"9\"\nassert solution(\"56 1000000000000000000\")", "solution('''\n''') == '''\n'''\n\nprint('done')", "solution('''\n3 10\n''') == '''\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n4 1000000000\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5 1000000007\n''') == '''\n90\n'''\n\n# check the correctness of solution\nassert solution('''\n200 500695038\n''') == '''\n285844\n'''\n\n# check the correctness of solution\nassert solution('''\n200 500695039\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n200 500695037\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n200 500695036\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n200 500695040\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n200 500695041\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n200 500695042\n''') == '''\n0\n'''\n\n# check", "solution('''\n5 9\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n5 11\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 13\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5 17\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5 19\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n200 987654321\n''') == '''\n506317003\n'''\n\n# check the correctness of solution\nassert solution('''\n200 123456789\n''') == '''\n741404310\n'''\n\n# check the correctness of solution\nassert solution('''\n200 999999999\n''') == '''\n593717888\n'''\n\n# check the correctness of solution\nassert solution('''\n199 123456789\n''') == '''\n431493948\n'''\n\n# check the correctness of solution\nassert solution('''\n199 999999999\n''') == '''\n881340990\n'''\n", "solution('''3 100''') == '3'\nassert solution('''10 1000000007''') == '992535241'\nassert solution('''200 1000000007''') == '1249768573'\nassert solution('''200 1000000009''') == '867653441'\nassert solution('''199 1000000009''') == '1249782792'\nassert solution('''1 1000000009''') == '1'\nassert solution('''200 1000000009''') == '867653441'\nassert solution('''199 1000000009''') == '1249782792'\nassert solution('''200 1000000009''') == '867653441'\nassert solution('''199 1000000009''') == '1249782792'\nassert solution('''200 1000000009''') == '867653441'\nassert solution('''199 1000000009''') == '1249782792'\nassert solution('''200 1000000009''') == '867653441'\nassert solution('''199 1000000009''') == '1249782792'\nassert solution('''200 1000000009''') == '867653441'\nassert solution('''199 1000000009''') == '", "solutio", "solution(sample_in) == sample_out", "solution(\"1 2\") == \"2\"\nassert solution(\"2 10\") == \"4\"\nassert solution(\"4 961748941\") == \"1164\"\nassert solution(\"2 1000000000\") == \"4\"\nassert solution(\"197 9764439\") == \"22\"\nassert solution(\"198 97644411\") == \"2\"\nassert solution(\"200 1000000007\") == \"11\"\nassert solution(\"200 1000000009\") == \"5\"\nassert solution(\"200 1000000073\") == \"7\"\nassert solution(\"200 1000000081\") == \"5\"\nassert solution(\"200 1000000097\") == \"7\"\nassert solution(\"200 1000000099\") == \"5\"\nassert solution(\"200 1000000103\") == \"11\"\nassert solution(\"200 1000000121\") == \"7\"\nassert solution(\"200 1000000129\") == \"11\"\nassert solution(\"200 1000000133\") == \"7\"\nassert solution(\"200 1000000141\") == \"17\"\nassert solution(\"200 1000000149\") == \"11\"\nassert solution(\"200 1000000173\") == \"7\"\nassert solution(\"200 1000000177\") == \"11\"\nassert solution(\"200 1000000193\") == \"17\"\nassert solution(\"200 1000000197\") == \"11\"\nassert solution(\"200 1000000201\") == \"17\"\nassert solution(\"200", "solution('''\n3 10\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n4 1000000007\n''') == '''\n16\n'''\n\n# check the correctness of solution\nassert solution('''\n200 1000000007\n''') == '''\n381705818\n'''\n\n# check the correctness of solution\nassert solution('''\n200 1000000009\n''') == '''\n471176103\n'''\n\n# check the correctness of solution\nassert solution('''\n200 1000000009\n''') == '''\n471176103\n'''\n\n# check the correctness of solution\nassert solution('''\n200 1000000009\n''') == '''\n471176103\n'''\n\n# check the correctness of solution\nassert solution('''\n200 1000000009\n''') == '''\n471176103\n'''\n\n# check the correctness of solution\nassert solution('''\n200 1000000009\n''') == '''\n471176103\n'''\n\n# check the correctness of solution\nassert solution('''\n200 1000000009\n''') == '''\n471176103\n'''\n\n# check the correctness of solution\nassert solution('''\n200 1000000009\n", "solution(str(5)) == str(9)\nassert solution(str(2)) == str(6)\nassert solution(str(200)) == str(534784571)\n\n# get the input\nprint(solution(input()))", "solution(\"\") == \"\"", "solution(\"1 2\") == \"1\"\nassert solution(\"3 9\") == \"1\"\nassert solution(\"3 11\") == \"1\"\nassert solution(\"3 12\") == \"2\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 7\") == \"1\"\nassert solution(\"5 13\") == \"3\"\nassert solution(\"8 2\") == \"1\"\nassert solution(\"8 3\") == \"1\"\nassert solution(\"8 4\") == \"2\"\nassert solution(\"8 5\") == \"2\"\nassert solution(\"8 6\") == \"2\"\nassert solution(\"8 7\") == \"1\"\nassert solution(\"8 10\") == \"2\"\nassert solution(\"8 11\") == \"2\"\nassert solution(\"8 12\") == \"1\"\nassert solution(\"8 13\") == \"3\"\nassert solution(\"200 998244353\") == \"761866120\"\nassert solution(\"200 998244352\") == \"761866119\"\nassert solution(\"200 997\") == \"42\"\nassert solution(\"200 5\") == \"1\"\nassert solution(\"200 7\") == \"2\"\nassert solution(\"200 11\") == \"2\"\nassert solution(\"200 13\") == \"3\"\nassert solution(\"200 17\") == \"3\"\nassert solution", "solution('''\n1 3\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n4 3\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n6 3\n''') == '''\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n7 3\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n8 3\n''') == '''\n11\n'''\n\n# check the correctness of solution\nassert solution('''\n9 3\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n10 3\n''') == '''\n26\n'''\n\n# check the correctness of solution\nassert solution('''\n11 3\n''') == '''\n0\n'''\n\n", "solution(stdin='1 10007') == '2'\nassert solution(stdin='2 1000000007') == '14'\nassert solution(stdin='3 1000000007') == '144'\nassert solution(stdin='4 1000000007') == '1440'\nassert solution(stdin='5 1000000007') == '14400'\nassert solution(stdin='6 1000000007') == '144000'\nassert solution(stdin='7 1000000007') == '1440000'\nassert solution(stdin='8 1000000007') == '14400000'\nassert solution(stdin='9 1000000007') == '144000000'\nassert solution(stdin='10 1000000007') == '1440000000'\nassert solution(stdin='11 1000000007') == '14400000000'\nassert solution(stdin='12 1000000007') == '144000000000'\nassert solution(stdin='13 1000000007') == '1440000000000'\nassert solution(stdin='14 1000000007') == '14400000000000'\nassert solution(stdin='15 1000000007') == '144000000000000'\nassert solution(stdin='16 1000000007') == '1440000000000000'\nassert solution(stdin='17 1000000007') == '14400000000000000'\nassert solution(stdin='18 100000000", "solution('''\n3 100000000007\n''') == '''\n2\n'''\nassert solution('''\n4 1000000009\n''') == '''\n4\n'''\nassert solution('''\n1 1000000007\n''') == '''\n1\n'''\nassert solution('''\n10 1000000007\n''') == '''\n27\n'''\nassert solution('''\n200 1000000007\n''') == '''\n539\n'''\nassert solution('''\n200 1000000009\n''') == '''\n471\n'''\nassert solution('''\n1 1000000009\n''') == '''\n1\n'''\nassert solution('''\n10 1000000009\n''') == '''\n27\n'''\nassert solution('''\n100 1000000009\n''') == '''\n262\n'''\nassert solution('''\n7 1000000009\n''') == '''\n11\n'''\nassert solution('''\n5 1000000009\n''') == '''\n6\n'''\nassert solution('''\n3 1000000009\n''') == '''\n2\n'''\nassert solution('''\n1 1000000003\n''') == '''\n1\n'''\nassert solution('''\n1 1000000009\n''') ==", "solution('''1\n2 3''') == '2'\nassert solution('''2\n3 7''') == '17'\nassert solution('''3\n1000000000 1000000009''') == '300000003'\nassert solution('''198\n1000000000 1000000009''') == '299999991'\nassert solution('''199\n1000000000 1000000009''') == '0'\nassert solution('''200\n1000000000 1000000009''') == '0'", "solution('''\n2 4\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3 6\n''') == '''\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n3 7\n''') == '''\n21\n'''\n\n# check the correctness of solution\nassert solution('''\n3 8\n''') == '''\n24\n'''\n\n# check the correctness of solution\nassert solution('''\n5 8\n''') == '''\n432\n'''\n\n# check the correctness of solution\nassert solution('''\n5 9\n''') == '''\n720\n'''\n\n# check the correctness of solution\nassert solution('''\n5 10\n''') == '''\n360\n'''\n\n# check the correctness of solution\nassert solution('''\n5 11\n''') == '''\n1092\n'''\n\n# check the correctness of solution\nassert solution('''\n10 11\n''') == '''\n12240\n'''\n\n# check the correctness of solution\nassert solution('''\n10 13\n''') == '''\n47952\n'''\n\n# check the correctness of solution\nassert solution('''\n10 16\n''') == '''\n16384\n", "solution(test_data) == expected_result", "solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3 100\") == \"3\"\nassert solution(\"3", "solution('''3 1''') == '2'\nassert solution('''3 7''') == '1'\nassert solution('''3 5''') == '0'\nassert solution('''4 13''') == '10'\nassert solution('''4 14''') == '2'\nassert solution('''4 15''') == '10'\nassert solution('''4 16''') == '4'\nassert solution('''4 17''') == '16'\nassert solution('''4 18''') == '6'\nassert solution('''4 19''') == '18'\nassert solution('''4 20''') == '10'\nassert solution('''4 21''') == '3'\nassert solution('''4 22''') == '21'\nassert solution('''4 23''') == '11'\nassert solution('''4 24''') == '23'\nassert solution('''4 25''') == '25'\nassert solution('''4 26''') == '13'\nassert solution('''4 27''') == '12'\nassert solution('''4 28''') == '12'\nassert solution('''4 29''') == '29'\nassert solution('''4 30''') == '15'\nassert solution('''4 31", "solution(sample_input) == '2\\n'", "solution(r'''\n4 10\n''') == r'''\n4\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == r'''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == r'''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == r'''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == r'''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == r'''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == r'''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == r'''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == r'''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == r'''\n\n'''\n\n# check the correctness of solution\nassert solution(r'''\n\n''') == r'''\n\n'''\n\n# check the correctness of solution\nassert", "solution(\"\"\"input\"\"\") == \"output\"", "solution(\"3 100\") == \"3\"\nassert solution(\"3 1000000000\") == \"3\"\nassert solution(\"2 1000000000\") == \"2\"\nassert solution(\"3 6\") == \"3\"\nassert solution(\"1 1000000000\") == \"1\"\nassert solution(\"199 1000000000\") == \"1794897556\"\nassert solution(\"1 6\") == \"1\"\nassert solution(\"200 1000000000\") == \"1333749012\"\nassert solution(\"200 997\") == \"957\"\nassert solution(\"2 6\") == \"2\"\nassert solution(\"1 997\") == \"1\"\nassert solution(\"199 997\") == \"1728\"\nassert solution(\"198 1000000000\") == \"1333748409\"\nassert solution(\"2 997\") == \"2\"\nassert solution(\"1 100\") == \"1\"\nassert solution(\"3 997\") == \"3\"\nassert solution(\"198 997\") == \"1045\"\nassert solution(\"1 998244353\") == \"1\"\nassert solution(\"2 998244353\") == \"2\"\nassert solution(\"3 998244353\") == \"3\"\nassert solution(\"200 998244353\") == \"971506466\"\nassert solution(\"199 998244353\") == \"1808072583\"\nassert solution(\"198 998244353\") == \"180807", "solution('''\n3 101\n''') == '''\n25\n'''\n\n# check correctness with HackerRank test cases\nfrom subprocess import run, PIPE\n\nr = run(['python', 'perfect-sequence.py'], stdout=PIPE, input='''\n3 101\n'''.encode(), encoding='ascii')\nassert r.stdout == '''\n25\n'''\n\nr = run(['python', 'perfect-sequence.py'], stdout=PIPE, input='''\n10 1000000000\n'''.encode(), encoding='ascii')\nassert r.stdout == '''\n563734163\n'''\n\nr = run(['python', 'perfect-sequence.py'], stdout=PIPE, input='''\n8 1000000007\n'''.encode(), encoding='ascii')\nassert r.stdout == '''\n140572912\n'''\n\nr = run(['python', 'perfect-sequence.py'], stdout=PIPE, input='''\n4 1000000007\n'''.encode(), encoding='ascii')\nassert r.stdout == '''\n4807526976\n'''\n\nr = run(['python', 'perfect-sequence.py'], stdout=", "solution('''5 1000000007''') == '37'\nassert solution('''6 1000000007''') == '112'\nassert solution('''1 1000000007''') == '2'\nassert solution('''200 1000000007''') == '80233801'\nassert solution('''10 1000000007''') == '175'\nassert solution('''100 1000000007''') == '62278826'\nassert solution('''50 1000000007''') == '8674048'\nassert solution('''20 1000000007''') == '455148'\nassert solution('''150 1000000007''') == '64322049'\nassert solution('''75 1000000007''') == '4604180'\nassert solution('''100 1000000007''') == '62278826'\nassert solution('''1 1000000007''') == '2'\nassert solution('''15 1000000007''') == '1481'\nassert solution('''30 1000000007''') == '214825'\nassert solution('''200 1000000007''') == '80233801'\nassert solution('''100 1000000007''') == '62278826'\nassert solution('''200 1000000007''') == '80233801'", "solution('''\n3\n2\n''') == '''\n1\n'''\n\nprint(solution('''\n3\n2\n'''))", "solution('''\n3 1000000007\n''') == '''\n2618\n'''\n\n# check the correctness of solution\nassert solution('''\n3 9973\n''') == '''\n8091\n'''\n\n# check the correctness of solution\nassert solution('''\n2 1000000007\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n5 1000000007\n''') == '''\n94852\n'''\n\n# check the correctness of solution\nassert solution('''\n5 9973\n''') == '''\n9372\n'''\n\n# check the correctness of solution\nassert solution('''\n6 1000000007\n''') == '''\n144773\n'''\n\n# check the correctness of solution\nassert solution('''\n6 9973\n''') == '''\n12953\n'''\n\n# check the correctness of solution\nassert solution('''\n7 1000000007\n''') == '''\n215487\n'''\n\n# check the correctness of solution\nassert solution('''\n7 9973\n''') == '''\n18307\n'''\n\n# check the correctness of solution\nassert solution('''\n10 1000000007\n''') == '''\n8382883\n'''\n", "solution(input_example) == output_example\n\n'''\nfor i in range(1, 10):\n    with open(f'input{i}.txt', 'r') as f:\n        out = solution(f.read())\n        with open(f'output{i}.txt', 'r') as f:\n            true_out = f.read()\n            assert out == true_out\n'''", "solution('''\n3 1000000007\n''') == '''\n0\n'''\n\nassert solution('''\n3 1000000009\n''') == '''\n1\n'''\n\nassert solution('''\n10 1000000007\n''') == '''\n2\n'''\n\nassert solution('''\n200 1000000007\n''') == '''\n32640\n'''\n\nassert solution('''\n200 1000000009\n''') == '''\n72640\n'''\n\nassert solution('''\n200 1000000023\n''') == '''\n37640\n'''\n\n# TODO: add more cases\n\n# get the solution with the actual input\nwith open('input.txt', 'r') as f:\n    print(solution(f.read()))", "solution(\"5 7\\n\") == \"2\"\nassert solution(\"5 11\\n\") == \"4\"\nassert solution(\"5 5\\n\") == \"0\"\nassert solution(\"11 7\\n\") == \"134\"\nassert solution(\"18 1453\\n\") == \"3679\"\nassert solution(\"143 89\\n\") == \"85\"\nassert solution(\"193 3\\n\") == \"1\"\nassert solution(\"193 2\\n\") == \"0\"\nassert solution(\"193 4\\n\") == \"0\"\nassert solution(\"193 7\\n\") == \"0\"\nassert solution(\"193 5\\n\") == \"2\"\nassert solution(\"193 6\\n\") == \"0\"\nassert solution(\"193 11\\n\") == \"1\"\nassert solution(\"193 13\\n\") == \"0\"\nassert solution(\"193 17\\n\") == \"4\"\nassert solution(\"193 19\\n\") == \"0\"\nassert solution(\"193 23\\n\") == \"0\"\nassert solution(\"193 29\\n\") == \"0\"\nassert solution(\"193 31\\n\") == \"0\"\nassert solution(\"193 37\\n\") == \"0\"\nassert solution(\"193 41\\n\") == \"0\"\nassert solution(\"193 43\\n\") == \"2\"\nassert solution(\"193 47\\n\") == \"0\"\n", "solution(input) == str(output)", "(solution('''\n5 5\n''') == '''\n4\n''')\n\n# check the correctness of solution\nassert (solution('''\n5 9\n''') == '''\n4\n''')\n\n# check the correctness of solution\nassert (solution('''\n5 1000000000\n''') == '''\n4\n''')\n\n# check the correctness of solution\nassert (solution('''\n9 1000000000\n''') == '''\n792\n''')\n\n# check the correctness of solution\nassert (solution('''\n10 1000000000\n''') == '''\n7920\n''')\n\n# check the correctness of solution\nassert (solution('''\n1 2\n''') == '''\n2\n''')\n\n# check the correctness of solution\nassert (solution('''\n200 1000000000\n''') == '''\n473656\n''')\n\n# check the correctness of solution\nassert (solution('''\n200 9973\n''') == '''\n1284\n''')\n\n# check the correctness of solution\nassert (solution('''\n200 1009\n''') == '''\n1284\n''')\n\n# check the correctness of solution\nassert (solution('''\n200 997\n''') == '''\n1284", "(solution(\n    stdin=\"2 10\"\n) == stdin), \"should return the same string\"\n\n# check for performance\nprint(\"performance test passed\")\n# stress testing\nwhile True:\n    solution(getrandbits(1))", "solution(\"\") == \"\", \"Empty input should return empty string\"\nassert solution(\" \") == \"\", \"White space should return empty string\"\nassert solution(\"a\") == \"\", \"One char input should return empty string\"\nassert solution(\"abc\") == \"\", \"a = 6, b = 1, c = 3\"\nassert solution(\"abcc\") == \"\", \"a = 10, b = 4, c = 3\"\nassert solution(\"abcdc\") == \"\", \"a = 10, b = 4, c = 5, d = 2\"\nassert solution(\"accddc\") == \"\", \"a = 11, b = 5, c = 3, d = 2\"\nassert solution(\"aabcdc\") == \"\", \"a = 11, b = 5, c = 3, d = 2\"\nassert solution(\"abbcdc\") == \"\", \"a = 11, b = 5, c = 3, d = 2\"\nassert solution(\"accddec\") == \"\", \"a = 14, b = 5, c = 3, d = 2, e = 1\"\nassert solution(\"accddeec\") == \"\", \"a = 15, b = 5, c = 3, d = 2, e = 1\"\nassert solution(\"abccddeec\") == \"\", \"a = 15, b = 5, c = 3, d =", "solution(\"5 10\") == \"6\"\nassert solution(\"2 100\") == \"2\"\nassert solution(\"100 1000000007\") == \"1399331679\"\nassert solution(\"100 1000000009\") == \"862649053\"\nassert solution(\"199 1000000007\") == \"607435791\"\nassert solution(\"200 1000000007\") == \"265868351\"\nassert solution(\"200 1000000009\") == \"265868351\"\nassert solution(\"200 1000000021\") == \"265868351\"\nassert solution(\"200 1000000027\") == \"265868351\"\nassert solution(\"200 1000000033\") == \"265868351\"\nassert solution(\"200 1000000039\") == \"265868351\"\nassert solution(\"200 1000000051\") == \"265868351\"\nassert solution(\"200 1000000057\") == \"265868351\"\nassert solution(\"200 1000000087\") == \"265868351\"\nassert solution(\"200 1000000093\") == \"265868351\"\nassert solution(\"200 1000000099\") == \"265868351\"\nassert solution(\"200 1000000111\") == \"265868351\"\nassert solution(\"200 1000000117\") == \"265868351\"\nassert solution(\"200 1000000147\") == \"265868351\"\nassert solution(\"200", "solution('''4 100''') == '4'\nassert solution('''7 1000000007''') == '7'\nassert solution('''200 1000000007''') == '72'", "solution(\"1 100\\n\") == \"11\\n\"\nassert solution(\"2 100\\n\") == \"220\\n\"\nassert solution(\"3 100\\n\") == \"3330\\n\"\nassert solution(\"2 123456789\\n\") == \"220\\n\"\nassert solution(\"3 998244353\\n\") == \"3330\\n\"\nassert solution(\"1 10000000\\n\") == \"7\\n\"\nassert solution(\"4 10000000\\n\") == \"4440\\n\"\nassert solution(\"5 10000000\\n\") == \"55550\\n\"\nassert solution(\"6 10000000\\n\") == \"666660\\n\"\nassert solution(\"7 10000000\\n\") == \"7777770\\n\"\nassert solution(\"8 10000000\\n\") == \"88888880\\n\"\nassert solution(\"9 10000000\\n\") == \"99999990\\n\"\nassert solution(\"10 10000000\\n\") == \"1010101000\\n\"\nassert solution(\"11 10000000\\n\") == \"11111111110\\n\"\nassert solution(\"12 10000000\\n\") == \"121212121220\\n\"\nassert solution(\"13 10000000\\n\") == \"131313131330\\n\"\nassert solution(\"14 10000000\\n\") == \"141414141440", "(solution('3 10') == '3')\nassert (solution('3 12') == '6')\nassert (solution('3 13') == '1')\nassert (solution('10 11') == '832')\nassert (solution('200 1000000007') == '898658844')\nassert (solution('200 1000000009') == '397909664')\nassert (solution('200 1000000021') == '518226949')\nassert (solution('200 1000000033') == '518226949')\nassert (solution('200 1000000087') == '335503991')\nassert (solution('200 1000000093') == '664140885')\nassert (solution('200 1000000097') == '335503991')\nassert (solution('200 1000000103') == '50739912')\nassert (solution('200 1000000123') == '159988221')\nassert (solution('200 1000000181') == '763353482')\nassert (solution('200 1000000207') == '763353482')\nassert (solution('200 1000000213') == '535403462')\nassert (solution('200 1000000243') == '549445222')\nassert (solution('200 1000000279') ==", "solution('''\n1 10\n''') == '''\n10\n'''\n\nassert solution('''\n2 10\n''') == '''\n55\n'''\n\nassert solution('''\n4 10\n''') == '''\n3760\n'''\n\nassert solution('''\n2 3\n''') == '''\n3\n'''\n\nassert solution('''\n4 7\n''') == '''\n63\n'''\n\nassert solution('''\n4 13\n''') == '''\n1078\n'''\n\nassert solution('''\n8 59\n''') == '''\n3523599\n'''\n\nassert solution('''\n1 1000000007\n''') == '''\n1000000007\n'''\n\nassert solution('''\n2 1000000007\n''') == '''\n999999934\n'''\n\nassert solution('''\n5 824016521\n''') == '''\n158441377\n'''\n\nassert solution('''\n12 459347841\n''') == '''\n183671115\n'''\n\nassert solution('''\n123 123456789\n''') == '''\n803428220\n'''\n\nassert solution('''\n200 999999999\n''') == '''\n"], "finish_reason": ["stop", "stop", "stop", "length", "stop", "stop", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length"], "sum_logprob": [-73.20124468028393, -61.249087746850016, -193.07049269540892, -127.79615853088899, -15.492512069999997, -22.650134551363994, -153.96710120861903, -88.76394325730394, -225.10366557189195, -226.86854692180503, -215.5718011131648, -14.915926580999999, -95.46961830772479, -162.95606147877893, -130.169146619077, -6.935925149999999, -8.26072252945, -180.29653972967506, -75.05332136822987, -57.544788310099996, -5.361524269999999, -142.63544832180597, -42.502097792771025, -33.81087835689598, -102.16955784251297, -64.55769602701002, -99.18867204560948, -11.328201946, -22.043164453012015, -81.59042921573703, -14.5408677573, -21.87735624058304, -9.719046242000001, -220.75181659051006, -143.33655228641993, -213.95830132245263, -20.5957757513, -148.7755158072309, -48.74722288498, -95.98318161610703, -138.63147299603904, -11.299779759, -113.14801786684005, -82.76575881965998, -123.13111423608008, -148.4641269416991, -33.7052029864, -78.17404042334702, -281.0039181814049, -225.72751216386777], "mean_logprob": [-0.3641852969168353, -0.7852447147032051, -0.6995307706355398, -0.42598719510296335, -1.106608005, -0.23112382195269388, -0.5132236706953966, -0.29587981085768, -0.7503455519063067, -0.75622848973935, -0.7185726703772166, -0.74579632905, -0.31823206102574936, -0.5431868715959297, -0.43389715539692336, -2.31197505, -0.7509747754045455, -0.6009884657655833, -0.2501777378941, -1.009557689650877, -0.8935873783333333, -0.47545149440602, -0.14167365930923667, -0.11270292785632, -0.34056519280837666, -0.5565318623018104, -0.33062890681869844, -1.0298365405454546, -0.07347721484337333, -0.27196809738579, -1.118528289023077, -0.07292452080194334, -0.8835496583636363, -0.7358393886350333, -0.4777885076214, -0.7131943377415083, -0.5566425878729729, -0.4959183860241033, -0.5185874774997872, -0.5188280087357136, -0.46210490998679665, -1.1299779759, -0.37716005955613335, -1.4779599789225, -0.4104370474536, -0.49488042313899666, -0.7490045108088889, -0.26058013474449, -0.93667972727135, -0.7524250405462264]}
{"prompt": "'''\nYouKn0wWho has an integer sequence a_1, a_2, \u2026 a_n. Now he will split the sequence a into one or more consecutive subarrays so that each element of a belongs to exactly one subarray. Let k be the number of resulting subarrays, and h_1, h_2, \u2026, h_k be the lengths of the longest increasing subsequences of corresponding subarrays.\n\nFor example, if we split [2, 5, 3, 1, 4, 3, 2, 2, 5, 1] into [2, 5, 3, 1, 4], [3, 2, 2, 5], [1], then h = [3, 2, 1].\n\nYouKn0wWho wonders if it is possible to split the sequence a in such a way that the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of h_1, h_2, \u2026, h_k is equal to 0. You have to tell whether it is possible.\n\nThe longest increasing subsequence (LIS) of a sequence b_1, b_2, \u2026, b_m is the longest sequence of valid indices i_1, i_2, \u2026, i_k such that i_1 < i_2 < \u2026 < i_k and b_{i_1} < b_{i_2} < \u2026 < b_{i_k}. For example, the LIS of [2, 5, 3, 3, 5] is [2, 3, 5], which has length 3.\n\nAn array c is a subarray of an array b if c can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print \"YES\" (without quotes) if it is possible to split into subarrays in the desired way, print \"NO\" (without quotes) otherwise. You can print each letter in any register (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n5\n1 1 1 1 1\n5\n1 1 2 2 1\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n5\n1 1 1 1 1\n5\n1 1 2 2 1\n5\n1 2 2 1 1\n''') == '''\nYES\nNO\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 10\n2\n10 1\n''') == '''\nYES\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 3 3 2 2\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7\n1 2 3 4 5 6 7\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 2 1\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 1\n2\n1 2\n''') == '''", "solution('''\n3\n3\n1 1 2\n3\n1 2 1\n3\n1 2 2\n''') == '''\nYES\nNO\nYES\n'''", "'YES' == solution('''\n2\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n''')\n\n# check the correctness of solution\nassert 'NO' == solution('''\n3\n3\n3 4 5\n4\n1 2 3 4\n4\n1 2 3 4\n''')\n\n# check the correctness of solution\nassert 'YES' == solution('''\n2\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n''')\n\n# check the correctness of solution\nassert 'NO' == solution('''\n3\n3\n3 4 5\n4\n1 2 3 4\n4\n1 2 3 4\n''')\n\n# check the correctness of solution\nassert 'YES' == solution('''\n2\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n''')\n\n# check the correctness of solution\nassert 'NO' == solution('''\n3\n3\n3 4 5\n4\n1 2 3 4\n4\n1 2 3 4\n''')\n\n# check the correctness of solution\nassert 'YES' == solution('''\n2\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n''')\n\n# check the correctness of solution\nassert 'NO' == solution('''\n3\n3\n3 4", "solution('''\n3\n6\n1 2 3 4 5 6\n5\n1 2 3 4 5\n5\n1 2 3 2 1\n''') == '''\nYES\nYES\nNO\n'''", "solution(sample_input) == sample_output\n\n# this would execute if this file was invoked directly\nif __name__ == '__main__':\n    solution(input())", "solution('''\n''') == '''\n'''", "solution('''1\n4\n4 3 3 1''') == \"YES\"\nassert solution('''1\n4\n4 1 3 3''') == \"NO\"\nassert solution('''2\n4\n4 3 3 1\n4\n4 1 3 3''') == \"YES\\nNO\"\nassert solution('''3\n6\n1 2 3 1 2 3\n3\n3 1 2\n3\n3 1 3''') == \"YES\\nYES\\nNO\"\nassert solution('''1\n1\n1''') == \"YES\"\nassert solution('''1\n2\n1 2''') == \"YES\"\nassert solution('''1\n5\n1 1 1 1 1''') == \"YES\"\nassert solution('''1\n4\n2 3 3 3''') == \"YES\"\nassert solution('''1\n3\n1 2 1''') == \"YES\"\nassert solution('''1\n3\n1 2 2''') == \"YES\"\nassert solution('''1\n3\n1 1 2''') == \"YES\"\nassert solution('''1\n2\n2 1''') == \"YES\"\nassert solution('''1\n1\n1''') == \"YES\"\nassert solution('''1\n2\n1 2''') == \"YES\"\nassert solution('''", "solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\nassert solution(\"5\") == \"\"\nassert solution(\"6\") == \"\"\nassert solution(\"7\") == \"\"\nassert solution(\"8\") == \"\"\nassert solution(\"9\") == \"\"\nassert solution(\"10\") == \"\"\nassert solution(\"11\") == \"\"\nassert solution(\"12\") == \"\"\nassert solution(\"13\") == \"\"\nassert solution(\"14\") == \"\"\nassert solution(\"15\") == \"\"\nassert solution(\"16\") == \"\"\nassert solution(\"17\") == \"\"\nassert solution(\"18\") == \"\"\nassert solution(\"19\") == \"\"\nassert solution(\"20\") == \"\"\nassert solution(\"21\") == \"\"\nassert solution(\"22\") == \"\"\nassert solution(\"23\") == \"\"\nassert solution(\"24\") == \"\"\nassert solution(\"25\") == \"\"\nassert solution(\"26\") == \"\"\nassert solution(\"27\") == \"\"\nassert solution(\"28\") == \"\"\nassert solution(\"29\") == \"\"\nassert solution(\"30\") == \"\"\nassert solution(\"31\") == \"\"\nassert solution(\"32\") == \"\"\nassert solution(\"33\") == \"\"\nassert solution(\"34\") == \"\"\nassert solution(\"35\") == \"\"\nassert solution(\"36\") == \"\"\nassert solution(\"37\") == \"\"\nassert solution(\"38\")", "solution(\"test\") == \"expected\"", "solution('''3\n9\n1 2 3 1 2 3 1 2 3\n10\n1 1 1 1 1 1 1 1 1 1\n3\n3 3 3''') == 'YES\\nNO\\nNO'", "solution(\"\"\"3\n4\n1 2 3 4\n5\n1 1 1 1 1\n5\n1 2 3 4 5\"\"\") == \"\"\"YES\nNO\nYES\"\"\"", "'YES' == solution('''\n2\n6\n1 2 3 4 5 6\n3\n1 1 1\n''')\n\n# check the correctness of solution\nassert 'NO' == solution('''\n1\n5\n1 1 1 1 1\n''')", "solution('''4\n4\n2 3 3 2\n4\n2 3 3 3\n4\n2 3 4 3\n4\n2 5 3 1''') == '''YES\nNO\nYES\nNO'''", "solution(\"\"\"2\n5\n1 2 3 4 5\n5\n1 2 3 4 5\"\"\") == \"\"\"YES\nNO\"\"\"", "solution('''\n4\n2\n1 3\n2\n1 2\n4\n1 2 3 4\n4\n4 2 3 4\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution('''\n1\n5\n2 3 3 3 3\n''') == 'YES'\n\nassert solution('''\n1\n5\n2 3 3 3 1\n''') == 'NO'\n\nassert solution('''\n1\n5\n1 2 3 2 1\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 1 2 2\n''') == 'YES'\n\nassert solution('''\n1\n4\n2 1 1 2\n''') == 'NO'\n\nassert solution('''\n1\n9\n1 2 3 4 5 6 7 8 9\n''') == 'YES'\n\nassert solution('''\n1\n9\n9 8 7 6 5 4 3 2 1\n''') == 'YES'\n\nassert solution('''\n1\n6\n2 5 3 1 4 3\n''') == 'YES'\n\nassert solution('''\n1\n6\n2 5 3 1 2 3\n''') == 'NO'\n\nassert solution('''\n1\n9\n1 1 1 1 1 1 1 1 1\n''') == 'YES'\n\nassert solution('''\n1\n9\n9 9 9 9 9 9 9 9 9\n''') == 'YES'\n\nassert solution('''\n1\n9\n9 9 9 9 9 9 9 9 0\n''", "solution('''\n1\n6\n1 2 3 4 5 6\n''') == 'YES'\n\nassert solution('''\n1\n6\n1 2 3 3 2 1\n''') == 'NO'\n\n# print(solution('''\n# 1\n# 6\n# 1 2 3 3 2 1\n# '''))\n#\n# print(solution('''\n# 2\n# 6\n# 1 2 3 4 5 6\n# 6\n# 1 2 3 3 2 1\n# '''))", "solution('''\n2\n6\n2 3 1 5 4 3\n7\n1 2 4 1 2 3 1\n''') == '''\nYES\nNO\n'''", "solution('''3\n5\n1 2 3 4 5\n5\n1 2 3 3 5\n5\n1 2 2 1 5''') == '''YES\nNO\nYES'''", "solution(\"\") == \"\", \"solution is invalid\"\nassert solution(\"\") == \"\", \"solution is invalid\"\nassert solution(\"\") == \"\", \"solution is invalid\"\n\n# print the solution\nprint(solution(input()))", "solution('''\n4\n4\n1 2 3 2\n4\n2 5 3 1\n4\n1 1 1 1\n4\n1 2 2 1\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution(stdin1) == output1", "solution(stdin) == stdout", "solution('''\n4\n4\n1 2 3 4\n4\n1 2 4 3\n7\n1 2 3 4 5 1 2\n8\n1 2 3 2 3 4 5 1\n''') == '''\nYES\nNO\nYES\nYES\n'''", "solution(\n    '''\n    3\n    5\n    1 2 3 4 5\n    5\n    1 2 1 2 1\n    9\n    1 2 3 2 1 2 3 2 1\n    '''\n) == '''\nYES\nNO\nYES\n'''", "solution('''\n3\n2\n1 1\n3\n2 3 3\n5\n2 3 2 1 2\n''') == '''\nYES\nNO\nYES\n'''", "solution('''\n2\n3\n1 2 3\n3\n1 2 1\n''') == '''\nYES\nNO\n'''\n\n# read data for t test cases\nt = int(input())\nstdin = []\nfor i in range(t):\n    # read length of sequence\n    n = int(input())\n    # read the sequence\n    a = list(map(int, input().split()))\n    stdin.append((n, a))\n\n# call solution function\nans = list(map(solution, stdin))\n\n# print results\nfor i in range(t):\n    print(ans[i])", "solution(\"\"\"\n3\n5\n1 2 3 4 5\n5\n1 2 1 2 1\n9\n1 2 3 4 5 6 7 8 9\n\"\"\") == \"\"\"\nYES\nNO\nYES\n\"\"\"", "solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3\n4\n1 2 3 4\n2\n1 3\n2\n2 2\n\"\"\") == \"YES\\nNO\\nNO\"", "solution('''\n2\n7\n1 2 1 2 1 2 1\n7\n1 2 1 2 2 2 1\n''') == '''\nYES\nNO\n'''", "solution(example_input) == example_output\n\n# check the correctness of solution for random test cases\nfor i in range(100):\n    n = random.randint(2, 10**5)\n    a = [random.randint(1, 10**9) for _ in range(n)]\n    data = f'{n}\\n{\" \".join(map(str, a))}'\n    assert check_result(solution(data), data)\n\n\n'''\n\n'''", "solution(example_input) == example_output\n\nassert len(example_input.splitlines()) == 2\nassert len(example_output.splitlines()) == 1\nassert len(example_input.splitlines()[1].split()) == int(example_input.splitlines()[0])\nassert len(example_input.splitlines()[1].split()) == int(example_input.splitlines()[0])", "solution(test1) == \"1\\n\", \"test1 failed!\"\nassert solution(test2) == \"3\\n\", \"test2 failed!\"\nassert solution(test3) == \"1\\n\", \"test3 failed!\"\nassert solution(test4) == \"2\\n\", \"test4 failed!\"\nassert solution(test5) == \"1\\n\", \"test5 failed!\"\nassert solution(test6) == \"1\\n\", \"test6 failed!\"\nassert solution(test7) == \"1\\n\", \"test7 failed!\"\nassert solution(test8) == \"1\\n\", \"test8 failed!\"\nassert solution(test9) == \"1\\n\", \"test9 failed!\"\nassert solution(test10) == \"1\\n\", \"test10 failed!\"\nassert solution(test11) == \"1\\n\", \"test11 failed!\"\nassert solution(test12) == \"1\\n\", \"test12 failed!\"\nassert solution(test13) == \"1\\n\", \"test13 failed!\"\nassert solution(test14) == \"1\\n\", \"test14 failed!\"\nassert solution(test15) == \"1\\n\", \"test15 failed!\"\nassert solution(test16) == \"1\\n\", \"test16 failed!\"\nassert solution(test17) == \"1\\n\", \"", "solution('''\n3\n3\n1 2 1\n3\n1 1 1\n3\n3 2 1\n''') == '''\nYES\nNO\nNO\n'''", "solution('''\n2\n5\n1 2 4 3 3\n5\n1 2 3 4 5\n''') == '''\nYES\nNO\n'''\n\n# # add some tests of your own\n# assert solution('''\n# ''') == '''\n# '''", "solution(\"\"\"2\n4\n1 2 1 1\n5\n1 3 2 3 1\"\"\") == \"\"\"YES\nNO\"\"\"", "solution('''\n\n''') == ''\n\n# check the performance of solution\nprint(f'passed all tests')", "solution('''\n1\n4\n1 2 3 4\n''') == 'YES'\n\nassert solution('''\n1\n4\n4 3 2 1\n''') == 'NO'\n\nassert solution('''\n1\n10\n1 2 3 1 4 3 2 2 5 1\n''') == 'YES'\n\n# test the performance of solution\ns = '''\n1\n10\n1 2 3 1 4 3 2 2 5 1\n'''\nprint(solution(s))", "solution('''\n1\n3\n1 2 3\n''') == '''\nYES\n'''\nassert solution('''\n1\n3\n1 3 2\n''') == '''\nNO\n'''\nassert solution('''\n1\n6\n1 2 3 1 2 3\n''') == '''\nYES\n'''\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\nNO\n'''\nassert solution('''\n1\n6\n2 3 4 5 6 7\n''') == '''\nYES\n'''\nassert solution('''\n1\n6\n7 6 5 4 3 2\n''') == '''\nYES\n'''\nassert solution('''\n1\n6\n1 2 1 2 1 2\n''') == '''\nYES\n'''\nassert solution('''\n1\n6\n7 6 7 7 6 7\n''') == '''\nYES\n'''\nassert solution('''\n1\n6\n3 4 5 6 7 8\n''') == '''\nNO\n'''\nassert solution('''\n1\n10\n2 5 3 1 4 3 2 2 5 1\n''') == '''\nYES\n'''\nassert solution('''\n1\n10\n2 5 3 1 4 3 2 1 5 2\n''')", "solution('''\n4\n6\n2 3 1 3 3 3\n5\n1 1 1 1 1\n5\n1 2 1 2 1\n5\n1 2 3 4 5\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution('''\n3\n4\n1 2 3 4\n4\n4 3 2 1\n4\n1 3 3 2\n''') == '''\nYES\nNO\nYES\n'''", "solution(\n'''1\n4\n1 2 3 4\n''') == 'NO'\n\n# check the correctness of solution\nassert solution(\n'''1\n6\n1 2 3 4 1 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution(\n'''1\n6\n1 2 3 4 2 1\n''') == 'NO'\n\n# check the correctness of solution\nassert solution(\n'''1\n5\n5 4 3 2 1\n''') == 'YES'\n\n# check the correctness of solution\nassert solution(\n'''1\n2\n1 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution(\n'''1\n4\n1 2 3 4\n''') == 'NO'\n\n# check the correctness of solution\nassert solution(\n'''1\n4\n4 3 2 1\n''') == 'YES'\n\n# check the correctness of solution\nassert solution(\n'''1\n6\n1 2 3 4 5 6\n''') == 'NO'\n\n# check the correctness of solution\nassert solution(\n'''1\n5\n5 4 3 2 1\n''') == 'YES'\n\n# check the correctness of solution\nassert solution(\n'''1\n1\n1\n''') == 'YES'\n\n# check the correctness of", "solution(\"\"\"0\"\"\") == \"\"\"True\"\"\"\n# assert solution(\"\"\"1\n# 1\n# 2\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# \"\"\") == \"\"\"True\"\"\"", "solution('''\n4\n4\n4 2 3 1\n4\n2 3 2 1\n4\n1 1 1 1\n5\n5 5 5 5 5\n''') == '''\nYES\nNO\nYES\nYES\n'''", "solution(r'''\n3\n3\n1 2 3\n3\n1 3 2\n3\n3 2 1\n''') == r'''\nYES\nNO\nNO\n'''\n\n# check the performance of solution\nimport timeit\nimport random\n\nsol = lambda stdin: solution(stdin)\n\nassert timeit.timeit(lambda: sol(r'''\n2\n2\n1 2\n2\n2 1\n'''), number=100) < 1, 'check performance'\n\nassert timeit.timeit(lambda: sol(r'''\n1\n3\n3 2 1\n'''), number=100) < 1, 'check performance'\n\nassert timeit.timeit(lambda: sol(r'''\n1\n10\n1 2 3 4 5 6 7 8 9 10\n'''), number=100) < 1, 'check performance'\n\nassert timeit.timeit(lambda: sol(r'''\n1\n10\n10 9 8 7 6 5 4 3 2 1\n'''), number=100) < 1, 'check performance'\n\nassert timeit.timeit(lambda: sol(r'''\n1\n10\n''' + ' '.join(str(random.randint(1, 10000)) for _ in range(10))), number=100) < 1, 'check performance'\n\nassert", "solution(r'''\n2\n9\n2 5 3 1 4 3 2 2 5 1\n5\n1 1 1 1 1\n''') == r'''\nYES\nNO\n'''", "solution(test_data) == test_output\n\n# get input\ntest_input = get_input()\n\n# run solution\ntest_output = solution(test_input)\n\n# output solution\nput_output(test_output)", "solution(INPUT_SAMPLE_1) == OUTPUT_SAMPLE_1\n\n# check the correctness of solution\nassert solution(INPUT_SAMPLE_2) == OUTPUT_SAMPLE_2\n\nprint(\"passed all tests\")", "solution(\"\"\"1\n6\n1 3 3 7 4 3\"\"\") == \"YES\"\nassert solution(\"\"\"3\n3\n1 1 1\n3\n1 2 1\n3\n1 1 2\"\"\") == \"\"\"YES\nNO\nNO\"\"\"\nassert solution(\"\"\"3\n3\n2 3 3\n3\n3 3 3\n3\n1 2 3\"\"\") == \"\"\"NO\nYES\nNO\"\"\"\n\n# check the speed of solution\ns = timeit.Timer(\"solution(my_stdin)\", \"from __main__ import solution, my_stdin\")\nprint(s.timeit(1))", "solution('''3\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n5 4 4 3 2''') == '''YES\nNO\nYES'''"], "finish_reason": ["length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-82.64741379324806, -20.1817166773, -47.899566625270005, -20.022243705899996, -43.31017254846001, -7.201769882000001, -111.19485388007004, -16.26213698418, -10.077720682999999, -28.60226038878, -18.0000020496, -25.368403552199993, -31.537463405300002, -14.453924113400001, -29.40599273732, -89.12346191507994, -36.967174075645005, -29.2158168098, -22.346688525300006, -25.78075763581999, -27.774125961700012, -11.0162827195, -5.9587273655, -34.45292807427001, -29.42890914247, -26.314001320900005, -52.910298214859985, -22.53709582010001, -30.08176322021, -20.8870144396, -61.28723078121, -33.923914116650025, -39.73116636542599, -19.476664073100004, -38.762697917800004, -21.826181961400003, -20.816120998000002, -44.873903395739994, -76.00149820050608, -32.281062962069996, -19.265859963430003, -69.86994945325397, -42.14352102340001, -34.13826844621999, -82.050354495953, -15.903596079299998, -36.189368326349985, -21.860833982410004, -86.89046365045, -19.62402793754], "mean_logprob": [-0.2754913793108267, -0.5045429169325, -0.15966522208423334, -0.4260051852319149, -1.0827543137115, -0.5144121344285715, -0.3706495129335667, -0.0542071232806, -1.1197467425555556, -0.5837195997710204, -0.47368426446315787, -0.4299729415627119, -0.6570304876104167, -0.49841117632413795, -0.6126248486941667, -0.2970782063836, -0.31328113623427967, -0.7491235079435897, -0.5320640125071429, -0.4603706720682143, -0.5341178069557693, -1.10162827195, -0.6620808183888889, -0.5839479334622034, -0.4746598248785484, -0.6418049102658536, -0.3575020149652703, -0.4795126770234043, -0.5098603935628814, -0.52217536099, -0.54236487417, -0.35337410538177083, -0.13243722121808668, -0.4869166018275, -0.5963491987353846, -0.7795064986214286, -0.7177972757931035, -0.4006598517476786, -0.25333832733502, -0.5663344379310526, -0.4480432549634884, -0.23289983151084667, -0.7142969664983051, -0.6441182725701887, -0.27350118165317666, -0.3698510716116279, -0.6579885150245455, -0.39037203540017856, -0.6436330640774074, -0.467238760417619]}
{"prompt": "'''\nYouKn0wWho has two even integers x and y. Help him to find an integer n such that 1 \u2264 n \u2264 2 \u22c5 10^{18} and n mod x = y mod n. Here, a mod b denotes the remainder of a after division by b. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (2 \u2264 x, y \u2264 10^9, both are even).\n\nOutput\n\nFor each test case, print a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{18}) that satisfies the condition mentioned in the statement. If there are multiple such integers, output any. It can be shown that such an integer always exists under the given constraints.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"1\\n3 7\") == \"12\"\n\n# initialize empty string that will hold the output of solution function\nans = \"\"\n\n# get the number of test cases\nt = int(input())\n\n# iterate for each test case\nfor test in range(t):\n    # get x and y values\n    x, y = map(int, input().split())\n\n    # initialize start as x\n    start = x\n\n    # add x and y to start\n    start += y\n\n    # if modulo of start and x is not equal to y, then add x to start\n    while (start % x != y):\n        start += x\n\n    # append start value to ans\n    ans += f\"{start}\\n\"\n\n# print ans\nprint(ans)", "solution(stdin) == stdout", "solution('''\n1\n2 2\n''') == '''\n4\n'''\nassert solution('''\n1\n2 4\n''') == '''\n8\n'''\nassert solution('''\n1\n4 4\n''') == '''\n4\n'''\nassert solution('''\n1\n4 8\n''') == '''\n16\n'''\nassert solution('''\n1\n4 10\n''') == '''\n16\n'''\nassert solution('''\n1\n4 12\n''') == '''\n16\n'''\nassert solution('''\n1\n4 14\n''') == '''\n16\n'''\nassert solution('''\n1\n4 16\n''') == '''\n16\n'''\nassert solution('''\n1\n8 16\n''') == '''\n16\n'''\nassert solution('''\n1\n4 18\n''') == '''\n36\n'''\nassert solution('''\n1\n4 20\n''') == '''\n16\n'''\nassert solution('''\n1\n4 22\n''') == '''\n36\n'''\nassert solution('''\n1\n4 24\n''') == '''\n16\n'''\nassert solution('''\n1\n8 24\n''') == '", "solution(stdin) == stdout", "solution('''\n1\n4 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n6 4\n2 8\n''') == '''\n6\n8\n'''", "solution(stdin) == stdout", "solution('''\n1\n6 4\n''') == '''\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 2\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n16 8\n''') == '''\n17\n'''", "solution(\n'''\n1\n4 0\n'''\n) == '4'\n\n# check the correctness of solution\nassert solution(\n'''\n1\n6 4\n'''\n) == '12'\n\n# check the correctness of solution\nassert solution(\n'''\n1\n8 6\n'''\n) == '16'", "solution('''1\n2 2''') == '2'\n\n# check the correctness of solution\nassert solution('''1\n6 8''') == '24'\n\n# check the correctness of solution\nassert solution('''1\n6 12''') == '36'\n\n# check the correctness of solution\nassert solution('''1\n6 4''') == '12'\n\n# check the correctness of solution\nassert solution('''1\n6 6''') == '6'\n\n# check the correctness of solution\nassert solution('''1\n6 10''') == '30'\n\n# check the correctness of solution\nassert solution('''1\n6 2''') == '4'\n\n# check the correctness of solution\nassert solution('''1\n10 2''') == '20'\n\n# check the correctness of solution\nassert solution('''1\n10 10''') == '10'\n\n# check the correctness of solution\nassert solution('''1\n10 20''') == '40'\n\n# check the correctness of solution\nassert solution('''1\n10 4''') == '8'\n\n# check the correctness of solution\nassert solution('''1\n10 6''') == '12'\n\n# check the correctness of solution\nassert solution('''1\n10 8''') == '", "'-1\\n3\\n3\\n' == solution('''4\n2 2\n2 4\n2 6\n2 8''')", "(solution(\"\"\"4\n4 8\n4 16\n8 16\n8 128\n\"\"\") == \"\"\"\n8\n16\n16\n256\n\"\"\")", "solution(\"\") == \"\"", "solution('''\n1\n6 8\n''') == '12'\nassert solution('''\n2\n2 4\n3 6\n''') == '''\n4\n6\n'''\n\n# check the time complexity of the solution\nassert solution('''\n1\n100 100\n''') == '100'\nassert solution('''\n1\n10 100\n''') == '110'\nassert solution('''\n1\n2 100\n''') == '102'\nassert solution('''\n2\n2 4\n10 100\n''') == '''\n4\n110\n'''\nassert solution('''\n3\n2 4\n10 100\n3 6\n''') == '''\n4\n110\n6\n'''\nassert solution('''\n10\n2 4\n10 100\n3 6\n2 4\n10 100\n3 6\n2 4\n10 100\n3 6\n2 4\n''') == '''\n4\n110\n6\n4\n110\n6\n4\n110\n6\n4\n'''\nassert solution('''\n100\n2 4\n10 100\n3 6\n2 4\n10 100\n3 6\n2 4\n10 100\n3 6\n2 4\n10 100\n3 6\n2 4\n10 100\n3 6\n2 4\n10 100\n3 6\n2 4\n10", "solution('''\n2\n2 2\n2 3\n''') == '''\n4\n1\n'''\n# test cases for single line input\nassert int_str(solution('2')) == 1\nassert int_str(solution('1')) == 0\nassert int_str(solution('45')) == 0\nassert int_str(solution('1234')) == 1\nassert int_str(solution('1233')) == 0\nassert int_str(solution('9999')) == 1\nassert int_str(solution('123456789')) == 1\nassert int_str(solution('12345678')) == 0\nassert int_str(solution('987654321')) == 1\n# test cases for multiple line input\nassert int_str(solution('1\\n1 1')) == 1\nassert int_str(solution('2\\n1 2\\n1 2')) == 1\nassert int_str(solution('3\\n1 1\\n1 2\\n1 3')) == 0\nassert int_str(solution('5\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5')) == 0\nassert int_str(solution('5\\n1 1\\n1 1\\n1 1\\", "solution('''\n2\n2 2\n2 4\n''') == '''\n2\n6\n'''\n\n# you can use the following as the interactive console\n# while True:\n#     try:\n#         line = input()\n#         print(solution(line))\n#     except Exception as e:\n#         print(e)\n#         break", "solution('''\n3\n2 4\n4 2\n6 12\n''') == '''\n4\n4\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 2\n''') == '''\n2\n'''", "solution(stdin=\"2\\n2 2\\n4 4\") == \"2\\n4\", \"Test #1 failed\"\n\n# get the input\nT = int(input())\nINPUT = []\nfor _ in range(T):\n    INPUT.append(input())\n\n# solve & print the answer\n# solution(stdin=INPUT)\n\n# (local test) run & check the performance\n_test_from_file(task=str(__file__)[5:-3] + '.json')", "solution('''\n''') == '''\n'''", "solution('''\n2\n2 4\n2 8\n''') == '''\n4\n8\n'''\n\n# test the speed of solution\nimport timeit\nsol = '''\ndef solution(stdin: str) -> str:\n    return stdin\n'''\nprint(timeit.timeit(sol, number=100000, globals=globals()))", "solution('''\n1\n2 2\n''') == '''\n2\n'''\n\nassert solution('''\n1\n4 2\n''') == '''\n3\n'''\n\nassert solution('''\n2\n6 2\n8 2\n''') == '''\n7\n3\n'''\n\n# to test your solution you should use my provided test cases\nwith open('testcases.txt', 'r') as file:\n    testcases = file.read()\n\nassert solution(testcases) == '''\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n'''\n\n# write your tests here\n\n# print('done')", "solution('''\n3\n2 4\n2 6\n2 10\n''') == '''\n2\n6\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 12\n''') == '''\n12\n'''", "solution('''\n1\n2 4\n''') == '''\n4\n'''\n\nassert solution('''\n2\n4 2\n6 2\n''') == '''\n4\n6\n'''\n\nassert solution('''\n3\n12 2\n4 2\n4 4\n''') == '''\n12\n4\n4\n'''\n\n# stress testing solutions\nwhile True:\n    import random\n    # generates random integers\n    x = random.randint(2, 10**9)\n    y = random.randint(2, 10**9)\n    # ensures x and y are even\n    x, y = x*2, y*2\n    test_case = f'{x} {y}'\n    print(f'Generated test case:\\n{test_case}')\n    break", "solution('''\n''') == '''\n'''\n\n# get input and run solution\ninput_str = sys.stdin.read()\nresult = solution(input_str)\nprint(result)", "solution('''\n''') == '''\n'''", "solution('''\n3\n2 6\n3 3\n2 10\n''') == '''\n8\n4\n4\n'''\n# check the correctness of solution\nassert solution('''\n1\n1 1\n''') == '''\n1\n'''\n# check the correctness of solution\nassert solution('''\n1\n2 4\n''') == '''\n4\n'''\n# check the correctness of solution\nassert solution('''\n1\n2 2\n''') == '''\n2\n'''\n# check the correctness of solution\nassert solution('''\n1\n2 4\n''') == '''\n4\n'''\n# check the correctness of solution\nassert solution('''\n1\n8 14\n''') == '''\n15\n'''\n# check the correctness of solution\nassert solution('''\n1\n8 8\n''') == '''\n8\n'''\n# check the correctness of solution\nassert solution('''\n1\n8 4\n''') == '''\n8\n'''\n# check the correctness of solution\nassert solution('''\n1\n4 2\n''') == '''\n4\n'''\n# check the correctness of solution\nassert solution('''\n1\n4 4\n''') == '''\n4\n'''\n# check the correctness of solution\nassert", "solution('''\n4\n4 2\n4 4\n4 6\n2 4\n''') == '''\n4\n2\n2\n2\n'''\n\n# check the performance of solution\nimport timeit\nfrom random import seed, randint\n\ndef gen_test(n: int, x_range: (int, int), y_range: (int, int)) -> str:\n    test = '\\n'.join(f'{randint(*x_range)} {randint(*y_range)}' for _ in range(n))\n    return f'{n}\\n{test}'\n\ndef run_test(solution, test):\n    start = timeit.default_timer()\n    result = solution(test)\n    end = timeit.default_timer()\n    print(f'{result} (time taken {end - start}s)')\n\n#sample test 1\nrun_test(solution, gen_test(10**3, (2, 10**3), (2, 10**3)))\n\n#sample test 2\nrun_test(solution, gen_test(10**4, (2, 10**6), (2, 10**6)))\n\n#sample test 3\nrun_test(solution, gen_test(10**5, (2, 10**9), (", "solution('''1\n2 2''') == '2'\nassert solution('''1\n6 4''') == '12'\nassert solution('''1\n8 6''') == '14'\nassert solution('''3\n2 2\n6 4\n8 6''') == '''2\n12\n14'''", "solution(str([\n    '4',\n    '2 2',\n    '1 5',\n    '12 10',\n    '20 10'\n])) == str([\n    '2',\n    '5',\n    '30',\n    '20'\n])", "solution('''\n4\n2 6\n4 6\n6 6\n8 6\n''') == '''\n6\n6\n6\n6\n'''", "solution('''\n2\n2 2\n2 3\n''') == '''\n2\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n4 2\n4 4\n4 6\n''') == '''\n2\n4\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4 2\n4 4\n4 6\n4 8\n''') == '''\n2\n4\n6\n8\n'''\n\n# put your own stress testing here\nassert solution('''\n''') == '''\n'''", "solution(\"\"\"\n5\n2 2\n4 4\n6 4\n8 8\n10 4\n\"\"\") == \"\"\"\n2\n4\n6\n8\n20\n\"\"\"\n# stress-test the solution\nassert not True\nprint(\"Solution is correct.\")", "solution('''1\n2 2''') == '2', 'not pass 1'\nassert solution('''1\n4 4''') == '4', 'not pass 2'\nassert solution('''1\n10 10''') == '10', 'not pass 3'\nassert solution('''1\n6 12''') == '12', 'not pass 4'\nassert solution('''1\n42 42''') == '42', 'not pass 5'\nassert solution('''1\n106 106''') == '106', 'not pass 6'\nassert solution('''1\n8 12''') == '12', 'not pass 7'\nassert solution('''1\n8 20''') == '24', 'not pass 8'\nassert solution('''1\n24 36''') == '36', 'not pass 9'\nassert solution('''1\n24 42''') == '60', 'not pass 10'\nassert solution('''1\n24 60''') == '84', 'not pass 11'\nassert solution('''1\n8 8''') == '8', 'not pass 12'\nassert solution('''1\n8 16''') == '16', 'not pass 13'\nassert solution('''1\n8 48''') == '48', 'not pass 14'\nassert solution('''1\n", "solution(TEST_INPUT) == TEST_OUTPUT\n\n# get the input and run the solution against it\n# usually, a file is used as input\ntry:\n    with open(INPUT_FILE_PATH) as file:\n        _input = file.read()\n        print(solution(_input))\nexcept IOError:\n    print(\"File not found!\")", "solution('''\n4\n6 8\n8 6\n4 6\n4 2\n''') == '''\n12\n6\n6\n6\n'''\n\nassert solution('''\n1\n2 4\n''') == '''\n4\n'''\n\nassert solution('''\n3\n4 8\n6 10\n8 12\n''') == '''\n8\n10\n12\n'''\n\nassert solution('''\n4\n4 10\n4 14\n8 6\n4 6\n''') == '''\n10\n14\n8\n6\n'''\n\nassert solution('''\n1\n8 12\n''') == '''\n12\n'''\n\nassert solution('''\n2\n2 4\n2 6\n''') == '''\n4\n6\n'''\n\nassert solution('''\n1\n6 8\n''') == '''\n12\n'''\n\nassert solution('''\n1\n4 2\n''') == '''\n6\n'''\n\nassert solution('''\n1\n8 14\n''') == '''\n14\n'''\n\nassert solution('''\n1\n2 6\n''') == '''\n6\n'''\n\nassert solution('''\n1\n8 8\n''') == '''\n8\n'''\n\nassert solution(", "solution('''2\n2 2\n4 2''') == '''2\n4'''\n\n# submit\ndef submit() -> None:\n    T, *args = [x.strip() for x in stdin.readlines()]\n    if len(args) != int(T):\n        raise ValueError('Not enough test cases')\n    for case in args:\n        print(solution(case))\nsubmit()", "solution('''\n2\n10 12\n12 10\n''') == '''\n12\n10\n'''\n\n# check performance of solution\n# def test_performance():\n#     import random\n#     import time\n#\n#     t = 10  # change this value to see the performance difference\n#     a = '''\n#     {}\n#     1 2\n#     2 1\n#     '''.format(t)\n#     t1 = time.time()\n#     solution(a)\n#     t2 = time.time()\n#     a = '''\n#     {}\n#     2 1\n#     1 2\n#     '''.format(t)\n#     t3 = time.time()\n#     solution(a)\n#     t4 = time.time()\n#     print('time = {}'.format(t2 - t1))\n#     print('time = {}'.format(t4 - t3))\n#     assert (t2 - t1) > (t4 - t3)\n#\n#\n# test_performance()", "solution('''\n1\n2 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 6\n4 16\n''') == '''\n6\n16\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 4\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 8\n4 20\n''') == '''\n8\n20\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 14\n4 12\n''') == '''\n14\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 6\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 18\n''') == '''\n18\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 10\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 14\n''') == '''", "solution(stdin=r'''\n2\n4 2\n8 6\n''') == r'''\n4\n20\n'''\n\n# check the correctness of solution\nassert solution(stdin=r'''\n''') == r'''\n'''\n\n# check the correctness of solution\nassert solution(stdin=r'''\n''') == r'''\n'''\n\n# check the correctness of solution\nassert solution(stdin=r'''\n''') == r'''\n'''\n\n# check the correctness of solution\nassert solution(stdin=r'''\n''') == r'''\n'''\n\n# check the correctness of solution\nassert solution(stdin=r'''\n''') == r'''\n'''\n\n# check the correctness of solution\nassert solution(stdin=r'''\n''') == r'''\n'''\n\n# check the correctness of solution\nassert solution(stdin=r'''\n''') == r'''\n'''\n\n# check the correctness of solution\nassert solution(stdin=r'''\n''') == r'''\n'''\n\n# check the correctness of solution\nassert solution(stdin=r'''\n''') == r'''\n'''\n\n# check the correctness of solution\nassert solution(stdin=r'''", "solution('''\n''') == '''\n'''\n\n# get input from command line\n# use given example\n# python3 main.py < examples/input.txt\n\n# get input from stdin\n# use your solution\n# python3 main.py\n\n# get input from file\n# use your solution\n# python3 main.py < input.txt\n\n# get input from file\n# use given example\n# python3 main.py < examples/input.txt\n\n# check the correctness of given example\nassert solution('''\n''') == '''\n'''", "solution(\"\"\"2\n2 2\n5 2\"\"\") == \"\"\"2\n10\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n12 14\"\"\") == \"\"\"14\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"2\n20 24\n2 4\"\"\") == \"\"\"20\n6\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n10 14\"\"\") == \"\"\"14\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"3\n6 12\n8 10\n10 20\"\"\") == \"\"\"12\n10\n20\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"3\n6 12\n8 10\n10 20\"\"\") == \"\"\"12\n10\n20\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"4\n14 22\n6 10\n10 14\n4 10\"\"\") == \"\"\"22\n10\n14\n10\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"5\n10 12\n10 12\n10 12\n10 12\n10 12\"\"\") == \"\"\"12\n12\n12\n12\n12\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"5\n14 22\n6 10\n10 14\n4 10\n2 10\"\"\") == \"\"\"22\n10\n14\n10\n10\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"5\n14 22\n", "solution(\"1\\n2 4\") == \"6\", \"Addition Failed\"\nassert solution(\"2\\n2 4\\n2 6\") == \"6 6\", \"Addition Failed\"\nassert solution(\"10\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n2 10\\n2 11\\n2 12\") == \"7 6 5 4 11 10 9 8\", \"Addition Failed\"\n\n# # submit solution\n# print(solution(stdin))\n# def solution(stdin):\n#     pass\n#\n# # check the correctness of solution\n# assert solution(\"1\\n2 4\") == \"6\", \"Addition Failed\"\n# assert solution(\"2\\n2 4\\n2 6\") == \"6 6\", \"Addition Failed\"\n# assert solution(\"10\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n2 10\\n2 11\\n2 12\") == \"7 6 5 4 11 10 9 8\", \"Addition Failed\"\n#\n# # submit solution\n# print(solution(stdin))", "solution(\"\") == \"\"", "solution(\"\"\"\n5\n2 2\n2 4\n6 6\n8 10\n5 10\n\"\"\") == \"\"\"\n2\n4\n6\n20\n10\n\"\"\"\nassert solution(\"\"\"\n\"\"\") == \"\"\"\n\"\"\"", "(solution('''2\n2 4\n4 2''') == '''6\n2''')", "solution(\n    '''\n    3\n    2 4\n    2 6\n    2 8\n    '''\n) == '''\n4\n6\n8\n'''", "solution(\"\"\"\n3\n2 2\n6 2\n10 4\n\"\"\") == \"\"\"\n2\n2\n10\n\"\"\"\n\n# check the performance of solution\nassert solution(\"\"\"\n1\n10 4\n\"\"\") == \"\"\"\n10\n\"\"\"\n\n# check the performance of solution\nassert solution(\"\"\"\n1\n1 1\n\"\"\") == \"\"\"\n1\n\"\"\"", "solution(\n'''\n5\n6 4\n12 10\n500 100\n500 300\n500 400\n'''\n) == '''\n2\n2\n10\n10\n10\n'''\n\nassert solution(\n'''\n5\n10 4\n20 10\n100 100\n200 300\n300 400\n'''\n) == '''\n14\n34\n100\n100\n100\n'''\n\nprint('All is OK')", "solution('''\n2\n4 6\n2 8\n''') == '''\n4\n4\n'''", "solution('''\n4\n4 2\n6 2\n8 4\n10 5\n''') == '''\n10\n12\n18\n20\n'''", "solution(\"\") == \"\", \"empty input\"\n\n# --- local testing ---\n# if __name__ == \"__main__\":\n#     print(solution(input()))"], "finish_reason": ["stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-129.34316220175998, -5.805946431000001, -50.48917207980272, -5.811031374999999, -24.997885955329995, -5.81063422, -31.670078718720006, -31.961378871980006, -62.051595117415054, -25.549873472899996, -35.41284512979999, -5.490703585, -82.68129471303301, -140.76918382299607, -47.17728228490999, -25.038807604899993, -103.93401930502006, -6.442858678, -41.504619627100034, -116.59525338964697, -28.358846260600007, -103.91271011926695, -22.052042675960003, -6.448809895000001, -80.91372749867304, -105.19937537873601, -26.25717612112399, -42.58198295605999, -18.657343753600003, -51.3631212750193, -55.081014173529994, -104.91856399797038, -43.62190871206, -104.89192739321396, -60.5967540753, -109.24103214560094, -58.81125779706649, -33.06857210872498, -86.14526131244996, -127.61837253105412, -85.934541001545, -5.486207289999999, -35.50868943164001, -16.54804438, -18.17661569246, -40.424196606969986, -91.16021157133997, -16.64937748, -27.623817238300003, -27.59486862930001], "mean_logprob": [-0.7307523288235028, -0.645105159, -0.168297240266009, -0.6456701527777777, -0.44639082063089286, -0.6456260244444445, -0.39098862615703706, -0.40976126758948717, -0.20683865039138333, -0.824189466867742, -1.0415542685235295, -0.9151172641666667, -0.27560431571011, -0.46923061274332, -0.5616343129155953, -0.41047225581803276, -0.8807967737713559, -0.46020419128571427, -0.4770645934149425, -0.7379446417066265, -0.4648991190262295, -0.5469090006277211, -0.45941755574916665, -0.46062927821428573, -0.2697124249955767, -0.35066458459578664, -0.35009568161498666, -0.6868061767106451, -0.5182595487111111, -0.38046756500014295, -0.9835895388130357, -0.34972854665990133, -0.5014012495639081, -0.34963975797738, -0.6247088049, -0.44588176385959594, -0.19603752599022167, -0.11022857369575, -0.6526156160034091, -0.42539457510351336, -0.32185221348893256, -0.9143678816666666, -0.7101737886328, -0.7194801904347826, -0.4544153923115, -0.49297800740207315, -0.9302062405238776, -0.6403606723076923, -0.7673282566194445, -0.6730455763243902]}
{"prompt": "'''\nFor an array b of n integers, the extreme value of this array is the minimum number of times (possibly, zero) the following operation has to be performed to make b non-decreasing: \n\n  * Select an index i such that 1 \u2264 i \u2264 |b|, where |b| is the current length of b. \n  * Replace b_i with two elements x and y such that x and y both are positive integers and x + y = b_i. \n  * This way, the array b changes and the next operation is performed on this modified array. \n\n\n\nFor example, if b = [2, 4, 3] and index 2 gets selected, then the possible arrays after this operation are [2, \\underline{1}, \\underline{3}, 3], [2, \\underline{2}, \\underline{2}, 3], or [2, \\underline{3}, \\underline{1}, 3]. And consequently, for this array, this single operation is enough to make it non-decreasing: [2, 4, 3] \u2192 [2, \\underline{2}, \\underline{2}, 3].\n\nIt's easy to see that every array of positive integers can be made non-decreasing this way.\n\nYouKn0wWho has an array a of n integers. Help him find the sum of extreme values of all nonempty subarrays of a modulo 998 244 353. If a subarray appears in a multiple times, its extreme value should be counted the number of times it appears.\n\nAn array d is a subarray of an array c if d can be obtained from c by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, print a single integer \u2014 the sum of extreme values of all subarrays of a modulo 998 244 353.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n3\n1 2 1\n3\n3 2 1\n3\n1 2 3\n''') == '''\n12\n10\n8\n'''\n\nprint('done')", "solution('''\n1\n4\n1 2 3 1\n''') == '23'\n\n# check the correctness of solution\nassert solution('''\n2\n3\n1 1 1\n2\n1 2\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n''') == '50'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 1 1\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2 1 2 1\n''') == '35'\n\n# check the correctness of solution\nassert solution('''\n2\n5\n1 2 3 4 5\n5\n1 2 3 2 1\n''') == '110'\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 1 2 3\n''') == '101'\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 4 3 2\n''') == '148'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 1 1 1\n''')", "solution(\"\"\"1\n4\n1 2 3 4\"\"\") == \"\"\"86\"\"\", \"*\"\nassert solution(\"\"\"2\n2\n2 3\n2\n1 2\"\"\") == \"\"\"5\n7\"\"\", \"**\"\nassert solution(\"\"\"2\n2\n3 2\n3\n3 2 1\"\"\") == \"\"\"1\n1\"\"\", \"***\"\nassert solution(\"\"\"3\n3\n1 2 3\n4\n1 2 3 4\n2\n2 3\"\"\") == \"\"\"37\n80\n2\"\"\", \"****\"\nassert solution(\"\"\"4\n4\n1 2 3 4\n4\n4 3 2 1\n4\n1 2 3 4\n4\n4 4 4 4\"\"\") == \"\"\"83\n39\n83\n74\"\"\", \"*****\"\nassert solution(\"\"\"4\n2\n2 1\n4\n1 2 3 4\n4\n4 3 2 1\n4\n4 4 4 4\"\"\") == \"\"\"5\n80\n39\n74\"\"\", \"******\"\n\nprint(\"*\" * 50)\nprint(\"Time Taken:\", time.time() - startTime)", "solution('''\n2\n2\n2 3\n2\n1 1\n''') == '''\n13\n1\n'''", "solution(sample_in) == sample_out\n\n# stress-test solution\nfrom functools import partial\nstress_test(\n    partial(solution, stdin=sample_in),\n    correct_out=sample_out,\n    stress_count=10000,\n    stress_max_len=10000,\n    stress_gen_input=partial(\n        generate_input,\n        min_len=2,\n        max_len=10000,\n        unique_numbers=True,\n        value_min=1,\n        value_max=10000,\n    ),\n)", "str(solution('''\\\n3\n3\n1 2 3\n3\n3 2 1\n3\n1 2 4\n''')) == '''\\\n3\n3\n3\n'''", "solution('''\n3\n3\n1 2 3\n3\n2 1 3\n2\n1 1\n''') == '''\n6\n8\n1\n'''", "solution('''4\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n5 5 5 5 5\n5\n5 5 4 4 5''') == '''20\n7\n45\n19'''\n\n# get input and output\nraw_input = open('input.txt', 'r').read().strip()\nexpected_output = open('output.txt', 'r').read().strip()\n\n# print info and solve the problem\nprint('Solving problem \"{}\" using Python interpreter...'.format(PROBLEM_NAME))\nprint('Verifying testcases...')\nassert solution(raw_input) == expected_output\nprint('All tests OK!')\nprint('Solving problem using a custom solution...')\nprint('Result: {}'.format(solution(raw_input)))", "solution('''\n3\n1\n1\n3\n1 2 3\n2\n1 2\n''') == '''\n1\n6\n1\n'''", "solution(\n'''\n4\n4\n1 2 3 4\n2\n4 3\n4\n4 3 2 1\n4\n1 1 1 1\n'''\n) == '''\n32\n9\n0\n9\n'''", "solution('''\n1\n4\n1 2 2 1\n''') == '16'\nassert solution('''\n2\n2\n1 1\n2\n2 1\n''') == '3'\nassert solution('''\n4\n4\n4 1 1 4\n4\n4 1 1 1\n4\n1 1 1 1\n4\n1 4 1 4\n''') == '20'\n\n# ---\n\ndef solution(stdin):\n    ans = []\n    T = int(stdin.readline())\n    for _ in range(T):\n        _ = stdin.readline()\n        nums = list(map(int, stdin.readline().split()))\n        length = len(nums)\n        dp = [0] * length\n        dp[0] = 1\n        MOD = 998244353\n        for i in range(1, length):\n            dp[i] = dp[i-1]\n            if nums[i] > nums[i-1]:\n                dp[i] += 1\n        ans.append(sum(dp) % MOD)\n    return '\\n'.join(map(str, ans))\n\n\nimport os\nimport sys\n\nif __name__ == '__main__':\n    # argv = sys.argv", "solution('''\n3\n3\n2 4 3\n3\n1 1 1\n4\n1 1 1 1\n''') == '''\n13\n10\n24\n'''", "solution(r'''\n1\n3\n2 4 3\n''') == r'''\n4\n'''\n\n# check for extreme cases\n\n# check for performance\nimport random\nimport string\ndef generate_string(n):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(n))\n\ndef solution_fnc(stdin):\n    import re\n    import itertools\n    import functools\n    import operator\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        vals = list(map(int, stdin.readline().split()))\n        # build prefixes and suffixes\n        prefixes = []\n        suffixes = []\n        curr_prefix = []\n        curr_suffix = []\n        for val in vals:\n            curr_prefix.append(val)\n            prefixes.append(curr_prefix[:])\n            curr_suffix.insert(0, val)\n            suffixes.insert(0, curr_suffix[:])\n        # print(prefixes)\n        # print(suffixes)\n        # calculate prefix/suffix lengths\n        prefix_", "solution('''\n3\n3\n2 4 3\n2\n1 2\n4\n1 2 3 4\n''') == '''\n5\n4\n20\n'''", "solution(\"\"\"2\n3\n2 4 3\n5\n5 2 3 4 1\"\"\") == \"\"\"9\n61\"\"\"", "solution(input) == output", "solution('''\n0\n1\n1\n2\n2 3\n2\n2 3\n2\n3 2\n2\n3 2\n1\n1\n1\n1\n1\n1\n1\n2\n2\n2\n2\n2\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n2\n2\n2\n2\n2\n2\n2\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n5\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n6\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n7\n8\n8\n8\n8\n8\n8\n8\n8\n8\n8\n8\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1", "solution(\"1\\n3\\n2 4 3\") == \"4\"\nassert solution(\"3\\n1\\n1\\n3\\n1 1 1\\n4\\n1 1 1 1\") == \"2\\n4\\n6\"\nassert solution(\"1\\n5\\n2 2 2 2 2\") == \"7\"\n\n# check performance (if the solution is correct)\n# import random\n# arr = [random.randint(1, 10**5) for _ in range(10**5)]\n# input_str = \"1\\n10**5\\n{}\".format(\" \".join(map(str, arr)))\n# solution(input_str)\n\n# input \n# 1\n# 3\n# 2 4 3\n\n# output\n# 4", "solution(input_sample) == output_sample", "solution('''\n3\n3\n1 2 3\n3\n3 2 1\n3\n3 3 3\n''') == '''\n9\n9\n27\n'''\n\n# get the input data\nwith open('in.txt', 'r') as f:\n    in_data = f.read()\n\n# call the solution and write out the result\nwith open('out.txt', 'w') as f:\n    f.write(solution(in_data))", "solution('''\n2\n2\n1 2\n3\n1 1 1\n''') == '''\n3\n6\n'''", "solution(SAMPLE_INPUT) == '\\n'.join(SAMPLE_OUTPUT)\n\n# check if solution is correct for entire input file\nif __name__ == '__main__':\n    with open(INPUT_FILE, 'r') as infile:\n        with open(OUTPUT_FILE, 'w') as outfile:\n            outfile.write(solution(infile.read()))", "solution(example_input) == example_output", "solution('''\n3\n3\n1 2 3\n4\n4 1 2 3\n1\n1\n''') == '''\n6\n9\n1\n'''", "solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n", "solution('''\n2\n4\n1 1 1 1\n6\n1 1 1 1 1 1\n''') == '''\n4\n20\n'''\n\n# check the performance of solution\nimport timeit\n\nprint(timeit.timeit(\n    'solution(input())',\n    number=1,\n    setup='''\nfrom __main__ import solution\nimport os\nwith open(os.getcwd() + '/assets/input', 'r') as f:\n    input = lambda: f.read()\n'''\n))", "solution('''1\n3\n2 4 3''') == '5'\nassert solution('''1\n4\n1 2 1 2''') == '17'\nassert solution('''1\n5\n1 2 3 4 5''') == '45'\nassert solution('''1\n6\n1 1 1 1 1 1''') == '21'\nassert solution('''1\n10\n1 1 1 1 1 1 1 1 1 1''') == '55'\nassert solution('''2\n3\n2 4 3\n4\n1 2 1 2''') == '5\\n17'\nassert solution('''2\n5\n1 2 3 4 5\n6\n1 1 1 1 1 1''') == '45\\n21'\nassert solution('''3\n3\n2 4 3\n4\n1 2 1 2\n5\n1 2 3 4 5''') == '5\\n17\\n45'\nassert solution('''3\n6\n1 1 1 1 1 1\n10\n1 1 1 1 1 1 1 1 1 1\n5\n1 2 3 4 5''') == '21\\n55\\n45'\nassert solution('''4\n3\n2 4 3\n4\n1 2 1 2\n5\n1 2 3 4 5\n6\n1 1 1 1 1 1''') == '5\\", "solution('''\n2\n2\n2 1\n2\n2 3\n''') == '9'\n\n# check the correctness of solution\nassert solution('''\n3\n3\n3 2 1\n3\n1 2 3\n3\n3 1 2\n''') == '14'\n\n# check the correctness of solution\nassert solution('''\n4\n4\n4 2 3 1\n4\n4 3 2 1\n4\n1 2 3 4\n4\n1 3 2 4\n''') == '30'\n\n# read the input from file\ndef read(input_file_name: str) -> str:\n    with open(input_file_name, 'r') as f:\n        return f.read()\n\n# write the output to file\ndef write(output_file_name: str, output: str) -> None:\n    with open(output_file_name, 'w') as f:\n        f.write(output)\n\n# you can use this file to test your solution\ndef main():\n    test = read('test.txt')\n    output = solution(test)\n    write('output.txt', output)\n\n# write the output to file\ndef write(output_file_name: str, output: str) -> None:\n    with open(output_file_name, 'w') as", "solution('''\n\n''') == '''\n\n'''", "solution(stdin='''\n2\n3\n2 4 3\n5\n1 3 3 5 3\n''') == '''\n\n'''", "solution('''\n''') == '''\n'''", "solution(r'''\n2\n3\n2 4 3\n2\n2 3\n''') == r'''\n18\n10\n'''", "solution(tests[0]['input']) == tests[0]['output']\nassert solution(tests[1]['input']) == tests[1]['output']\nassert solution(tests[2]['input']) == tests[2]['output']\nassert solution(tests[3]['input']) == tests[3]['output']\nassert solution(tests[4]['input']) == tests[4]['output']\nassert solution(tests[5]['input']) == tests[5]['output']\nassert solution(tests[6]['input']) == tests[6]['output']\nassert solution(tests[7]['input']) == tests[7]['output']\nassert solution(tests[8]['input']) == tests[8]['output']\nassert solution(tests[9]['input']) == tests[9]['output']\nassert solution(tests[10]['input']) == tests[10]['output']\nassert solution(tests[11]['input']) == tests[11]['output']\nassert solution(tests[12]['input']) == tests[12]['output']\nassert solution(tests[13]['input']) == tests[13]['output']\nassert solution(tests[14]['input']) == tests[14]['output']\nassert", "solution('''\n3\n3\n2 4 3\n4\n1 1 1 1\n5\n1 1 1 1 1\n''') == '''\n25\n17\n72\n'''\n\nprint(solution('''\n6\n2\n1 2\n4\n1 2 3 4\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n5\n5 5 5 5 5\n5\n1 1 1 1 1\n'''))\n\n#\n#\n#\n# Another solution\n#\n#\n#\n\ndef solution(stdin):\n    tests_count = int(stdin.readline())\n    results = []\n    for _ in range(tests_count):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        result = solve(n, a)\n        results.append(result)\n    return '\\n'.join(map(str, results))\n\ndef solve(n, a):\n    sum = 0\n    # calculate the sum of all subarrays\n    # to take the extreme value we need to split the array\n    # on two parts (left and right)\n    # and select the values that satisfies the\n    # requirement: x + y = a_i\n    # so we select the previous", "(solution('7') == '4')\n\n# output the result\ndef main():\n    # read the input data\n    data = sys.stdin.read()\n    # process the input data\n    output = solution(data)\n    # output the result\n    print(output)\n\nif __name__ == '__main__':\n    main()", "solution('''\n2\n2\n1 2\n2\n1 2\n''') == '6'\n\nassert solution('''\n''') == ''\n\nassert solution('''\n''') == ''\n\nprint('OK')", "solution(\"\"\"3\n3\n1 2 3\n3\n1 2 1\n3\n1 1 1\"\"\") == \"\"\"9\n14\n0\"\"\"\n\nassert solution(\"\"\"2\n2\n1 1\n2\n1 2\"\"\") == \"\"\"2\n0\"\"\"\n\nassert solution(\"\"\"1\n4\n1 1 2 1\"\"\") == \"\"\"4\"\"\"\n\nassert solution(\"\"\"3\n3\n4 4 4\n4\n4 4 4 4\n5\n5 5 5 5 5\"\"\") == \"\"\"4\n4\n0\"\"\"\n\nassert solution(\"\"\"4\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n5\n5 4 3 2 1\"\"\") == \"\"\"7\n7\n7\n7\"\"\"\n\nassert solution(\"\"\"6\n7\n1 2 3 4 5 6 7\n6\n1 2 3 4 5 6\n5\n1 2 3 4 5\n4\n1 2 3 4\n3\n1 2 3\n2\n1 2\n1\n1\"\"\") == \"\"\"10\n16\n24\n26\n28\n29\"\"\"\n\n# submit for testing\nimport subprocess\nprocess = subprocess.Popen(['cat', '-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)\nstdout, stderr = process.communicate(open('test_", "solution(r'''\n1\n3\n2 4 3\n''') == r'''\n2\n'''\n\nassert solution(r'''\n1\n3\n1 2 3\n''') == r'''\n6\n'''\n\n# print solution\nimport fileinput\n\nwith fileinput.input() as f:\n    text = ''.join(f).strip('\\n')\n\nprint(solution(text))", "solution('''\n2\n3\n2 4 3\n1\n1\n''') == '''\n15\n0\n'''", "solution('''\n2\n3\n2 4 3\n3\n3 3 3\n''') == '''\n12\n27\n'''", "solution('''4\n3\n1 2 3\n4\n1 2 2 3\n4\n1 2 3 2\n6\n2 3 3 3 3 1''') == '''16\n27\n21\n62'''", "solution(\"\"\"\n0\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# if __name__ == \"__main__\":\n#     with open(\"input.txt\", \"r\") as f:\n#         print(solution(f.read()))", "solution('''\n1\n3\n2 4 3\n''') == '1'\n\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution('''\n# '''))\n#\n#\n# print(solution(''", "(solution('''\n2\n3\n2 4 3\n4\n1 2 3 4\n''') == '''\n6\n36\n''')\nassert (solution('''\n1\n1\n1\n''') == '''\n1\n''')\nassert (solution('''\n3\n1\n1000000000\n2\n1000000000 1000000000\n4\n1000000000 1000000000 1000000000 1000000000\n''') == '''\n1000000000\n1000000001\n1000000000\n''')\n\n# print answer\nwith open('ans.txt', 'w') as fout:\n    print(solution(open('in.txt').read()), file=fout)", "solution('''\n1\n2\n1 1\n''') == '2'\nassert solution('''\n3\n3\n3 1 2\n3\n1 2 3\n3\n1 2 1\n''') == '8'\nassert solution('''\n5\n5\n5 5 5 5 5\n5\n5 5 5 5 4\n5\n5 5 5 4 4\n5\n5 5 4 4 4\n5\n5 4 4 4 4\n''') == '100'\nassert solution('''\n1\n6\n1 2 3 1 2 3\n''') == '30'\n\nimport random\nrandom.seed(987654321)\nimport string\n\ndef random_str(len: int) -> str:\n    res = ''\n    for _ in range(len):\n        res += random.choice(string.ascii_lowercase)\n    return res\n\ndef gen_test(n: int) -> str:\n    res = ''\n    for _ in range(n):\n        res += f'''{random.randint(1, 10 ** 5)} '''\n    return res\n\n# stress testing\nfor _ in range(100):\n    n = random.randint(1, 10 ** 5)\n    test = f'''{n}\\n{gen_test(n)}'''\n    print", "solution('''\n2\n3\n2 4 3\n4\n1 2 3 4\n''') == '''\n14\n40\n'''", "solution(\n\"\"\"\n1\n3\n2 4 3\n\"\"\"\n) == \"1\", \"Example 1\"\n\nassert solution(\n\"\"\"\n2\n3\n2 4 3\n4\n1 1 2 2\n\"\"\"\n) == \"1\\n0\", \"Example 2\"\n\nassert solution(\n\"\"\"\n1\n2\n1 1\n\"\"\"\n) == \"0\", \"Addition 1\"\n\nassert solution(\n\"\"\"\n1\n3\n3 3 3\n\"\"\"\n) == \"1\", \"Addition 2\"\n\n# generate cases : random_cases.py\nprint(\"passed all tests\")", "solution(\"\"\"\n2\n3\n2 4 3\n5\n5 1 5 5 1\n\"\"\") == '''\n4\n20\n'''", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n# check the correctness of solution for given test set\nfor i, _ in enumerate(open('input.txt', 'r')):\n    assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n# get output from given input\nprint(solution(open('input.txt', 'r').read()))", "solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"4\") == \"\"\nassert solution(\"5\") == \"\"\nassert solution(\"6\") == \"\"\nassert solution(\"7\") == \"\"\nassert solution(\"8\") == \"\"\nassert solution(\"9\") == \"\"\nassert solution(\"10\") == \"\"\nassert solution(\"11\") == \"\"\nassert solution(\"12\") == \"\"\nassert solution(\"13\") == \"\"\nassert solution(\"14\") == \"\"\nassert solution(\"15\") == \"\"\nassert solution(\"16\") == \"\"\nassert solution(\"17\") == \"\"\nassert solution(\"18\") == \"\"\nassert solution(\"19\") == \"\"\nassert solution(\"20\") == \"\"\nassert solution(\"21\") == \"\"\nassert solution(\"22\") == \"\"\nassert solution(\"23\") == \"\"\nassert solution(\"24\") == \"\"\nassert solution(\"25\") == \"\"\nassert solution(\"26\") == \"\"\nassert solution(\"27\") == \"\"\nassert solution(\"28\") == \"\"\nassert solution(\"29\") == \"\"\nassert solution(\"30\") == \"\"\nassert solution(\"31\") == \"\"\nassert solution(\"32\") == \"\"\nassert solution(\"33\") == \"\"\nassert solution(\"34\") == \"\"\nassert solution(\"35\") == \"\"\nassert solution(\"36\") == \"\"\nassert solution(\"37\") == \"\"\nassert solution(\"38\")"], "finish_reason": ["stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-36.1316380684, -99.21358582261605, -154.00440252453515, -21.405684437000005, -94.93314121932002, -27.807621754800003, -22.9402828455, -119.51875919419999, -20.1146519997, -41.346157927200004, -136.29220632893197, -23.989251647199996, -142.09176439183548, -21.719842529500003, -26.464794023999996, -7.28235594, -61.36071149225801, -104.10330768314003, -9.4491884558, -44.09420582257999, -15.278337361999997, -46.89189219397298, -6.792092810929999, -21.755042300000007, -20.39392057350299, -68.92241820076002, -56.01696495525607, -127.65797972921601, -7.252784446499999, -27.813469656300004, -6.342227655000001, -20.733987122500004, -16.71397709771642, -223.90923021833007, -54.29282165887998, -28.145207524599993, -158.03981198633696, -33.721796943255, -14.454483959700003, -16.388016091299995, -49.85620454409998, -26.84777940355, -33.79802451699301, -73.67626863171695, -143.09174466721396, -15.980670091499999, -94.77350529728, -28.940620829000004, -56.413957250084984, -15.434343231036998], "mean_logprob": [-0.7854703927913044, -0.33071195274205334, -0.6416850105188958, -0.7135228145666667, -0.7084562777561194, -0.6179471501066667, -0.5882123806538462, -0.6531079737387978, -0.5436392432351351, -0.7801161873056603, -0.4543073544297733, -0.5851036987121951, -0.47363921463945163, -0.5429960632375, -0.9801775564444445, -1.0403365628571428, -0.20453570497419332, -0.5881542806957062, -0.8590171323454545, -0.4045339983722936, -0.49284959232258063, -0.4834215690100309, -0.6174629828118182, -0.5578215974358974, -0.06797973524501, -0.5470033190536507, -0.18672321651752, -0.42552659909738666, -0.45329902790625, -0.8180432251852942, -0.45301626107142856, -0.6283026400757575, -0.055713256992388, -0.7463641007277667, -0.6702817488750618, -0.5212075467518519, -0.52679937328779, -0.3440999688087245, -0.48181613199, -0.512125502853125, -1.01747356212449, -0.4710136737464912, -0.11266008172331, -0.46927559638036304, -0.47697248222404665, -0.48426273004545456, -0.6968640095388235, -0.876988509969697, -0.6199335961547803, -0.05144781077012333]}
{"prompt": "'''\nYou are given a string s of length n consisting of characters a and/or b.\n\nLet \\operatorname{AB}(s) be the number of occurrences of string ab in s as a substring. Analogically, \\operatorname{BA}(s) is the number of occurrences of ba in s as a substring.\n\nIn one step, you can choose any index i and replace s_i with character a or b.\n\nWhat is the minimum number of steps you need to make to achieve \\operatorname{AB}(s) = \\operatorname{BA}(s)?\n\nReminder:\n\nThe number of occurrences of string d in s as substring is the number of indices i (1 \u2264 i \u2264 |s| - |d| + 1) such that substring s_i s_{i + 1} ... s_{i + |d| - 1} is equal to d. For example, \\operatorname{AB}(aabbbabaa) = 2 since there are two indices i: i = 2 where aabbbabaa and i = 6 where aabbbabaa.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000). Description of the test cases follows.\n\nThe first and only line of each test case contains a single string s (1 \u2264 |s| \u2264 100, where |s| is the length of the string s), consisting only of characters a and/or b.\n\nOutput\n\nFor each test case, print the resulting string s with \\operatorname{AB}(s) = \\operatorname{BA}(s) you'll get making the minimum number of steps.\n\nIf there are multiple answers, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\") == \"\", \"fist example\"\nassert solution(\"\") == \"\", \"second example\"\nassert solution(\"\") == \"\", \"third example\"\nassert solution(\"\") == \"\", \"forth example\"\n\nprint(\"done\")", "solution('''\n4\naabbab\nab\nbbaabbabbb\naabbbabb\n''') == '''\naabbab\nb\nbbaabbabbb\naabbbabb\n'''", "solution(\"2\\nab\\nabba\") == \"1\\nab\\nabba\", \"Should be: 1\\nab\\nabba\"\nassert solution(\"3\\naabaab\\nabb\\nababba\") == \"1\\naabaab\\nabb\\nababba\", \"Should be: 1\\naabaab\\nabb\\nababba\"\nassert solution(\"7\\nabbb\\nabaaab\\nabab\\nabbaab\\naba\\nabaabaa\\nabaaba\") == \"5\\nabbb\\nabaaab\\nabab\\nabbaab\\naba\\nabaabaa\\nabaaba\", \"Should be: 5\\nabbb\\nabaaab\\nabab\\nabbaab\\naba\\nabaabaa\\nabaaba\"\nassert solution(\"3\\nabbaa\\nabb\\nabbb\") == \"0\\nabbaa\\nabb\\nabbb\", \"Should be: 0\\nabbaa\\nabb\\nabbb\"\nassert solution(\"1\\nab\") == \"0\\nab\", \"Should be: 0\\nab\"\nassert solution(\"4\\nababababa\\naba\\nabaab\\nabaab\") == \"1\\nababababa\\naba\\nabaab\\naba", "solution('''\n1\naabbab\n''') == '''\naabba\n'''\n\n# check if it is fast enough\n# ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ====\nfrom math import factorial as f\nfrom math import comb as c\nfrom time import time\n\nfrom random import randint as ri\n\n\ndef gen_random_str(l: int) -> str:\n    return ''.join(['a' if ri(0, 1) else 'b' for _ in range(l)])\n\n\ndef gen_random_input(n_tc: int, l_str: int) -> str:\n    return '\\n'.join([f'{n_tc}\\n{gen_random_str(l_str)}' for _ in range(n_tc)])\n\n\nn_tc = 1000\nl_str = 100\n\ntime_limit = 1\n\ntime_start = time()\nstdin = gen_random_input(n_tc, l_str)\nprint(solution(stdin))\ntime_elapsed = time() - time_start\n\nif time_elapsed < time_limit:\n", "solution(\"baaab\") == \"baaab\"\nassert solution(\"baabaa\") == \"baabaa\"\nassert solution(\"baab\") == \"baba\"\nassert solution(\"aaab\") == \"abab\"\nassert solution(\"abab\") == \"abab\"\nassert solution(\"bbaaa\") == \"bbaaa\"\nassert solution(\"bba\") == \"bba\"\nassert solution(\"babaaab\") == \"babaaab\"\nassert solution(\"abbabb\") == \"abbabb\"\nassert solution(\"bbbaabaaab\") == \"bbbaabaaab\"\nassert solution(\"bbbaabaa\") == \"bbbaabaa\"\nassert solution(\"aaababab\") == \"aaababab\"\nassert solution(\"aabaaab\") == \"aabaaab\"\nassert solution(\"ababab\") == \"ababab\"\nassert solution(\"bbbab\") == \"bbbab\"\nassert solution(\"bababa\") == \"bababa\"\nassert solution(\"babbabbbbb\") == \"babbabbbbb\"\nassert solution(\"ababbb\") == \"ababbb\"\nassert solution(\"abbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb", "solution('''\n4\naabb\nab\nbaa\naabbaab\n''') == '''\nabab\naa\nbba\naabbaab\n'''", "solution('''\n3\naab\nab\nababab\n''') == '''\n3\nabb\nabbabb\n'''", "solution('''\n1\naabba\n''') == '''\nbbaab\n'''\n\n# check the correctness of solution\nassert solution('''\n1\na\n''') == '''\nb\n'''\n\n# check the correctness of solution\nassert solution('''\n1\naa\n''') == '''\nbb\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nb\n''') == '''\na\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nbb\n''') == '''\naa\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nab\n''') == '''\nab\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nba\n''') == '''\nba\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab", "solution('''\n3\naaabbbb\nab\nbaaabb\n''') == '''\nabbabbb\nab\nababbb\n'''", "solution(\"aabbbabaa\") == \"aabbaabaa\"\nassert solution(\"babaa\") == \"baaba\"\nassert solution(\"baa\") == \"baa\"\nassert solution(\"aaaabaaaab\") == \"aabaaabaaa\"\nassert solution(\"aaaaaaabaaaaaa\") == \"aabaaaaabaaa\"\nassert solution(\"aaaaabaaaaab\") == \"aabaaaabaaaa\"\nassert solution(\"abaaaaaaabaaaa\") == \"aaabaaaaabaaa\"\nassert solution(\"aaabaaaaaaabaa\") == \"aabaaaaaaabaa\"\nassert solution(\"aaaabaaaaaabaa\") == \"aabaaaaaaabaa\"\nassert solution(\"aaaaabaaaaaaba\") == \"aabaaaaaaabaa\"\nassert solution(\"abaaaaabaaaaab\") == \"aabaaaaabaaaa\"\nassert solution(\"abaaaaaaabaaaa\") == \"aaabaaaaabaaa\"\nassert solution(\"baaaaaaaabaaaa\") == \"aaabaaaaabaaa\"\nassert solution(\"baaaaaabaaaaab\") == \"aabaaaaabaaaa\"\nassert solution(\"baaaaaaaaaaaba\") == \"baaaaaaaaaaaba\"\nassert solution(\"baaaaaaaaaaaab\") == \"baaaaaaaaaaaab\"\nassert solution(\"baaaaaaaaaaaab\") == \"baaaaaaaaaaaab\"\nassert solution(\"ba", "solution('''\n''') == '''\n'''", "solution('''\n2\naabbaab\nabaabbb\n''') == '''\naabbabb\nabbabbb\n'''\n\nassert solution('''\n1\naaaaa\n''') == '''\naaaaa\n'''\n\nassert solution('''\n1\nababa\n''') == '''\naabab\n'''\n\n# check the performance of solution\nfrom utils import *\nimport timeit\n\nassert timeit.timeit(lambda: solution('''\n10\na\nbb\naba\nbab\naabbab\nababab\naabbabaa\naabbbabaa\nabbabbbbabbabbabbbabb\nabbabbbbabbabbabbbababbabbabbbbabbabbabbbabb\n'''), number=100) < 1\n\nprint('OK')", "solution('''\n\n''') == '''\n\n'''\n\n# test for performance\nimport random\nfrom unittest import TestCase\nimport timeit\n\nclass TestPerformance(TestCase):\n    def setUp(self):\n        pass\n\n    def test_performance(self):\n        print(timeit.timeit(lambda: solution(randstr(1, 100, 'ab')), number=10))\n\ndef randstr(m, n, alphabet='ab'):\n    return ''.join(random.choice(alphabet) for _ in range(random.randint(m, n)))\n\nif __name__ == '__main__':\n    import os, sys\n    if len(sys.argv) == 1:\n        import doctest\n        doctest.testmod()\n    else:\n        with open(sys.argv[1], 'r') as f:\n            lines = f.readlines()\n            for line in lines:\n                print(solution(line))", "solution('''\n3\na\naa\nabab\n''') == '''\n1\naa\nbab\n'''", "solution('''\n2\nbaabba\nbaaabba\n''') == '''\nbaaabba\nbaaabba\n'''\n\n# check the correctness of solution\nassert solution('''\n1\naababbaabaa\n''') == '''\naababbaabaa\n'''", "solution(\"ab\") == \"ab\"\nassert solution(\"aaaabbbabb\") == \"abbbbabbaa\"\nassert solution(\"bababab\") == \"abababa\"\nassert solution(\"abababab\") == \"abababab\"\nassert solution(\"bbababab\") == \"abababab\"\nassert solution(\"aaaaaaaaaa\") == \"aaaaaaaaaa\"\nassert solution(\"bbaaaaaaaa\") == \"aaaaaaaaaa\"\nassert solution(\"bbaaaaaaab\") == \"baaaaaaaab\"\nassert solution(\"baaaaaaab\") == \"baaaaaaab\"\nassert solution(\"baaaaaaaab\") == \"baaaaaaaab\"\nassert solution(\"aaaaaaaaab\") == \"abaaaaaaaa\"\nassert solution(\"abaaaaaaab\") == \"abaaaaaaab\"\nassert solution(\"bbabaaaba\") == \"ababaaaba\"\nassert solution(\"aaabbbbbb\") == \"aabbbbbba\"\nassert solution(\"bbbbaaaaa\") == \"ababababa\"\nassert solution(\"aaaaaabbb\") == \"baaaaabbb\"\nassert solution(\"baaaaaaaa\") == \"baaaaaaaa\"\nassert solution(\"baaaaaaaab\") == \"baaaaaaaab\"\nassert solution(\"baaaaaaab\") == \"baaaaaaab\"\nassert solution(\"bbbaaaaaa\") ==", "solution(\"aabaa\") == \"abba\"\nassert solution(\"bba\") == \"bba\"\nassert solution(\"baaab\") == \"baaba\"\nassert solution(\"baaabbaabaaaab\") == \"bbbaababababa\"\nassert solution(\"aaaaaabbbabbabbbabbabbbabbabbbbabbbabbabbbbabbabbbbabbab\") == \"aaaaabbbbabbbabbbbabbbabbbbabbbbbabbbabbbbbabbbbbbbabbbbb\"\nassert solution(\"ababaabababaababababaababab\") == \"ababaabababaababababaababab\"\nassert solution(\"aaabaaa\") == \"aaabaaa\"\nassert solution(\"abbabbabb\") == \"abbabbabb\"\nassert solution(\"ababbababbababbababbababbabab\") == \"ababbababbababbababbababbabab\"\nassert solution(\"baab\") == \"baab\"\nassert solution(\"ababaabababaababababaabababa\") == \"ababaabababaababababaabababa\"\nassert solution(\"aabaaaabaaaa\") == \"abbaabaaabaa\"\nassert solution(\"aaaaaaaababaaaaaaaaaabaaaabaaaaaaaba\") == \"aaaaaaaabbbaaaaaaaaaaabbbaaaaaaaaaabb\"\n", "solution('''4\na\naab\nbbaa\nbaaba''') == '''1\n1\n0\n0'''", "solution(\"a\") == \"a\"\nassert solution(\"aba\") == \"aba\"\nassert solution(\"abba\") == \"baab\"\nassert solution(\"baab\") == \"baab\"\nassert solution(\"bbaa\") == \"bbaa\"\nassert solution(\"abab\") == \"baab\"\nassert solution(\"baba\") == \"baab\"\nassert solution(\"ba\") == \"ba\"\nassert solution(\"aa\") == \"aa\"\nassert solution(\"aab\") == \"aba\"\nassert solution(\"bab\") == \"baa\"\nassert solution(\"abaab\") == \"ababa\"\nassert solution(\"abbaa\") == \"babaa\"\nassert solution(\"aabaa\") == \"abaab\"\nassert solution(\"abbab\") == \"babab\"\nassert solution(\"aabbaa\") == \"ababaa\"\nassert solution(\"baaaba\") == \"baabaa\"\nassert solution(\"baabaa\") == \"baabaa\"\nassert solution(\"abaaba\") == \"ababaa\"\nassert solution(\"bababa\") == \"bababa\"\nassert solution(\"ababaa\") == \"ababaa\"\nassert solution(\"babaa\") == \"babaa\"\nassert solution(\"aabaa\") == \"abaab\"\nassert solution(\"abbab\") == \"babab\"\nassert solution(\"", "solution('''2\nab\naba''') == '''ab\naba'''\nassert solution('''3\na\nab\naaabbb''') == '''a\nab\nab'''\nassert solution('''2\naab\nbba''') == '''bba\naab'''\nassert solution('''4\naaabbbab\nababababa\naaabbbbbab\nab''') == '''ababababa\naaabbbab\nab\nab'''\n\n# check the performance of solution\nfrom datetime import datetime\nstart = datetime.now()\n\nfor i in range(1000):\n    assert solution('''2\nab\naba''') == '''ab\naba'''\n\nfor i in range(1000):\n    assert solution('''3\na\nab\naaabbb''') == '''a\nab\nab'''\n\nfor i in range(1000):\n    assert solution('''2\naab\nbba''') == '''bba\naab'''\n\nfor i in range(1000):\n    assert solution('''4\naaabbbab\nababababa\naaabbbbbab\nab''') == '''ababababa\naaabbbab\nab\nab'''\n\nprint", "solution('''\n1\nbaa\n''') == 'baa'\n\nassert solution('''\n1\nbaab\n''') == 'aaba'\n\nassert solution('''\n1\nbaaa\n''') == 'aaaa'\n\nassert solution('''\n1\nbaaaa\n''') == 'baaaa'\n\nassert solution('''\n1\nabaaab\n''') == 'ababaa'\n\nassert solution('''\n1\nabaabaa\n''') == 'ababaab'\n\nassert solution('''\n1\naabaaab\n''') == 'aababaa'\n\nassert solution('''\n1\naabaaaba\n''') == 'aababaaa'\n\nassert solution('''\n1\nabaabbaa\n''') == 'abababaa'\n\nassert solution('''\n1\nabbabbaa\n''') == 'abbabbaa'\n\nassert solution('''\n1\nabbabbaaa\n''') == 'abbabbaaa'\n\nassert solution('''\n1\nabbbabaaa\n''') == 'abbbabaaa'\n\nassert solution('''\n1\naabbbabaaa\n''') == 'aabbbabaaa'\n\nassert solution('''\n1\nbaabbbaaab", "solution('''\n4\naa\nab\nabbbabbaa\nbbabb\n''') == '''\naa\nab\naabbaa\nbabb\n'''", "solution('''2\naab\nab''') == 'ba'\nassert solution('''4\nabba\naabba\naabbba\naababa''') == 'abba'\nassert solution('''5\naabba\naabbba\naababa\naaabba\naabaa''') == 'aabba'\nassert solution('''6\naabaa\naabaa\naabaa\naabaa\naabaa\naabaa''') == 'baaba'\nassert solution('''7\naaaaaaaa\nbbbbbbbb\naabbaaaa\nbbabbaab\nabbbbabb\nbabbabbb\nabbabbab''') == 'babbabbb'\nassert solution('''3\naba\naaba\nabaa''') == 'aaba'\nassert solution('''5\naabaa\naabaa\naabaa\naabaa\naabaa''') == 'aabaa'\nassert solution('''4\naaba\naaba\naaba\naaba''') == 'aaba'\nassert solution('''6\naabbb\naabbb\naabbb\naabbb\naabbb\naabbb''') == 'aabbb'\nassert solution('''3\naba\naba\naba''') == 'aba'\nassert", "solution('''\n2\naba\nabba\n''') == '''\n4\n4\n'''\n\nassert solution('''\n1\nababababab\n''') == '''\n4\n'''\n\nassert solution('''\n1\nbba\n''') == '''\n3\n'''\n\n# test 1\nfrom random import randint\nfrom string import ascii_lowercase as ascii\ndef generator():\n    t = 100\n    print(t)\n    for _ in range(t):\n        len_of_string = randint(1, 100)\n        print(''.join([ ascii[randint(0, 1)] for _ in range(len_of_string) ]))\ngenerator()\n\n# test 2\ngenerator()\n\n# test 3\ngenerator()", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution('''\n3\naaab\naba\nababa\n''') == '''\n4\naba\nababa\n'''", "solution(\"\") == \"\", \"Wrong\"\nassert solution(\"\") == \"\", \"Wrong\"\nassert solution(\"\") == \"\", \"Wrong\"\nassert solution(\"\") == \"\", \"Wrong\"\nassert solution(\"\") == \"\", \"Wrong\"\nassert solution(\"\") == \"\", \"Wrong\"\nassert solution(\"\") == \"\", \"Wrong\"\nassert solution(\"\") == \"\", \"Wrong\"\nassert solution(\"\") == \"\", \"Wrong\"\nassert solution(\"\") == \"\", \"Wrong\"\nassert solution(\"\") == \"\", \"Wrong\"\n\nprint(\"All tests passed\")", "solution('''\n2\naabb\naaabb\n''') == '''\naabb\naabb\n'''\nassert solution('''\n2\nbbaa\nbbaabb\n''') == '''\nbbaa\nbbaabb\n'''\nassert solution('''\n3\nbabab\nbababa\nbababab\n''') == '''\nbabab\nbababa\nbababab\n'''\nassert solution('''\n1\naaab\n''') == '''\naaab\n'''\nassert solution('''\n1\nbaab\n''') == '''\nbaab\n'''\nassert solution('''\n2\nbab\nab\n''') == '''\naab\nab\n'''\nassert solution('''\n3\nbbab\nabab\nbbab\n''') == '''\nbbab\nabab\nbbab\n'''\nassert solution('''\n1\nbbab\n''') == '''\nbab\n'''\nassert solution('''\n1\nbabb\n''') == '''\nbabb\n'''\nassert solution('''\n3\nbbbab\nbbbab\nbbbab\n''') == '''\nbbab\nbbab\nbbab\n'''\nassert solution(''", "solution(\"a\") == \"a\"\nassert solution(\"ba\") == \"ba\"\nassert solution(\"bab\") == \"baa\"\nassert solution(\"baba\") == \"baab\"\nassert solution(\"abba\") == \"abab\"\nassert solution(\"abbaab\") == \"ababab\"\nassert solution(\"aabbaabb\") == \"aabbaabb\"\nassert solution(\"aababbaa\") == \"aabbaaba\"\nassert solution(\"abbabbaa\") == \"abbabbaa\"\nassert solution(\"abbababb\") == \"abbababa\"\nassert solution(\"ababbabbaa\") == \"ababbabbaa\"\nassert solution(\"ababbabbaab\") == \"ababbabbaba\"\nassert solution(\"babbabbabbabbaa\") == \"babbabbabbabbaa\"\nassert solution(\"babbabbabbabbaab\") == \"babbabbabbabbbaa\"\nassert solution(\"bbaabbbaaabbbaab\") == \"bbaabbbaaabbbaab\"\nassert solution(\"bbaabbbaaabbbaaab\") == \"bbaabbbaaabbbaaba\"\nassert solution(\"bbbaaabaaaabaaaab\") == \"bbbaaabaaaabaaaab\"\nassert solution(\"bbbaaabaaaabaaaabb\") == \"bbbaaabaaaabaaaaba\"\nassert solution(\"baaaabb", "solution(\"ababa\") == \"ababa\"\nassert solution(\"aaabbb\") == \"bbbaaa\"\nassert solution(\"abba\") == \"baba\"\nassert solution(\"abaaaba\") == \"bbbbbbb\"\nassert solution(\"bbabb\") == \"aabab\"\nassert solution(\"baab\") == \"bbaa\"\nassert solution(\"ba\") == \"ba\"\nassert solution(\"babaaababaab\") == \"bbbbbbbbbbbb\"\nassert solution(\"bbaabaab\") == \"bbbbbbbb\"\nassert solution(\"aab\") == \"bba\"\nassert solution(\"bb\") == \"aa\"\nassert solution(\"a\") == \"a\"\nassert solution(\"baabaa\") == \"baabaa\"\nassert solution(\"baaa\") == \"baaa\"\nassert solution(\"ababbababbbabbab\") == \"bbbbbbbbbbbbbbbb\"\nassert solution(\"bbbabbbbbabbabb\") == \"aaaaaaaaaaaaaab\"\nassert solution(\"bbbab\") == \"aaaab\"\nassert solution(\"bbbabbbb\") == \"aaaaaaaa\"\nassert solution(\"ababab\") == \"ababab\"\nassert solution(\"bbaab\") == \"bbbaa\"\nassert solution(\"baabaaaab\") == \"baabaaaab\"\nassert solution(\"bbba", "solution('''\n1\naabbbabaa\n''') == '''\naabaabaaa\n'''\nassert solution('''\n1\nababababa\n''') == '''\nababababa\n'''\nassert solution('''\n1\nbaaaaaaaa\n''') == '''\nbabaaaaaa\n'''\nassert solution('''\n1\naaaaaaaaa\n''') == '''\naaaaaaaaa\n'''\nassert solution('''\n1\nbababaaba\n''') == '''\nbababaaba\n'''\nassert solution('''\n1\naabaaabaa\n''') == '''\naabaaabaa\n'''\nassert solution('''\n1\nbaaabaaaa\n''') == '''\nbaaabaaaa\n'''\nassert solution('''\n1\nbaaaaaaab\n''') == '''\nbaaaaaaab\n'''\nassert solution('''\n1\nabaaaaaaa\n''') == '''\nabaaaaaaa\n'''\nassert solution('''\n1\naaaaaaaaa\n''') == '''\naaaaaaaaa\n'''\nassert solution('''\n1\naabbbabaa\n''') == '''\naabaabaaa\n'''\nassert solution('''\n1", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n\n# get the input\nprint(\"Type the input, each line will be a testcase\")\ninputs = []\nwhile True:\n    try:\n        inputs.append(input())\n    except EOFError:\n        break\n\n# print outputs\nfor i, stdin in enumerate(inputs, 1):\n    print(\"Case #{}: {}\".format(i, solution(stdin)))", "solution(\"aabbab\") == \"aaabbb\"\nassert solution(\"aabb\") == \"aabb\"\nassert solution(\"abbab\") == \"abbab\"\nassert solution(\"bbab\") == \"bbab\"\nassert solution(\"abab\") == \"abab\"\nassert solution(\"baba\") == \"baba\"\nassert solution(\"abba\") == \"abba\"\nassert solution(\"bbaa\") == \"bbaa\"\nassert solution(\"aaab\") == \"aaaa\"\nassert solution(\"bbba\") == \"bbbb\"\nassert solution(\"babaa\") == \"baaaa\"\nassert solution(\"ababa\") == \"abaaa\"\nassert solution(\"baaab\") == \"baaaa\"\nassert solution(\"baaba\") == \"baaaa\"\nassert solution(\"aabab\") == \"aaabb\"\nassert solution(\"ababa\") == \"abaaa\"\nassert solution(\"ababa\") == \"abaaa\"\nassert solution(\"baaab\") == \"baaaa\"\nassert solution(\"baaba\") == \"baaaa\"\nassert solution(\"aabab\") == \"aaabb\"\nassert solution(\"ababa\") == \"abaaa\"\nassert solution(\"ababa\") == \"abaaa\"\nassert solution(\"baaab\") == \"baaaa\"\nassert solution(\"baaba\") == \"baaaa\"\nassert solution(\"aabab", "solution('''\n4\naabb\nabb\nabbabb\nabbbabb\n''') == '''\naabb\nabb\nabbabb\nabbbabb\n'''", "solution('''\n1\naabb\n''') == 'aabb'\n\nassert solution('''\n1\naaaaaaaa\n''') == 'aabbaaaa'\n\nassert solution('''\n2\nababa\naaaaa\n''') == 'ababa'\n\nassert solution('''\n1\nbbbbb\n''') == 'abbbb'\n\n# sample tests\n# TODO: add better tests\n# https://www.codechef.com/viewsolution/23756934\n# https://www.codechef.com/viewsolution/23757640\n# https://www.codechef.com/viewsolution/23759384\n\n# run tests\nfrom tester import run_tests\nwith open('tests.txt', 'w') as f:\n    f.write('''\n2\n2\nababa\naaaaa\n1\nbbbbb\n''')\nrun_tests(solution)", "solution('''\n4\nabba\nbbaa\nabab\nbabb\n''') == '''\nabba\nbbaa\nabab\nbabb\n'''", "solution('''1\naaba''') == 'aabaa'\nassert solution('''2\nabba\naabba''') == 'aabba'\nassert solution('''1\nbaab''') == 'baab'\nassert solution('''1\nbbaa''') == 'bbaa'\nassert solution('''1\nbbaab''') == 'bbaab'\nassert solution('''1\nbbbbaaab''') == 'bbbbaaab'\nassert solution('''1\nbbaaab''') == 'bbaaab'\nassert solution('''1\nabbabbbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb", "solution(\"abaaba\") == \"ababab\"\nassert solution(\"babababa\") == \"abababab\"\nassert solution(\"babbaabaaababab\") == \"ababbbbbababbab\"\nassert solution(\"babaaab\") == \"abaaab\"\nassert solution(\"abaaab\") == \"abaaab\"\nassert solution(\"aba\") == \"abb\"\nassert solution(\"aabb\") == \"abab\"\nassert solution(\"bbab\") == \"bbab\"\nassert solution(\"ba\") == \"ba\"\nassert solution(\"baaa\") == \"baaa\"\nassert solution(\"bbaab\") == \"bbaab\"\nassert solution(\"bbaaab\") == \"bbaaab\"\nassert solution(\"aab\") == \"aab\"\nassert solution(\"aaab\") == \"aaab\"\nassert solution(\"aaaab\") == \"aaaab\"\nassert solution(\"bbbaab\") == \"bbbaab\"\nassert solution(\"bbbaaab\") == \"bbbaaab\"\nassert solution(\"bbbaaaab\") == \"bbbaaaab\"\nassert solution(\"babbaa\") == \"babbaa\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"b\") == \"b\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aa\") == \"aa\"", "solution(\"abaaba\") == \"aabaab\"\nassert solution(\"ababab\") == \"ababab\"\nassert solution(\"abacaba\") == \"abababa\"\nassert solution(\"aaaa\") == \"aaaa\"\nassert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"aabaa\") == \"aabaa\"\nassert solution(\"aabb\") == \"aabb\"\nassert solution(\"aabbaa\") == \"aabbaa\"\nassert solution(\"aabbaaa\") == \"aabbaaa\"\nassert solution(\"aabaaa\") == \"aabaaa\"\nassert solution(\"aabaaab\") == \"aabaaab\"\nassert solution(\"aabaab\") == \"aabaab\"\nassert solution(\"aabaaba\") == \"aabaaba\"\nassert solution(\"aababaa\") == \"aababaa\"\nassert solution(\"baabaaa\") == \"baabaaa\"\nassert solution(\"bbaabaaa\") == \"bbaabaaa\"\nassert solution(\"bbbaabaaa\") == \"bbbaabaaa\"\nassert solution(\"bbbbaabaaa\") == \"bbbbaabaaa\"\nassert solution(\"bbbbbaabaaa\") == \"bbbbbaabaaa\"\nassert solution(\"bbbbbbaabaaa\") == \"bbbbbbaabaaa\"\nassert solution(\"bbbbbbbaab", "solution('''\n1\naab\n''') == 'bab'\n\nassert solution('''\n2\nba\nbaa\n''') == 'baa'\n\nassert solution('''\n5\nbba\nba\naab\naaa\nbbaaab\n''') == 'bbaaab'\n\nassert solution('''\n1\nbb\n''') == 'bb'\n\nassert solution('''\n1\nab\n''') == 'ab'\n\nassert solution('''\n1\na\n''') == 'a'\n\nassert solution('''\n1\nb\n''') == 'b'\n\nassert solution('''\n1\naaa\n''') == 'aaa'\n\nassert solution('''\n1\nbbb\n''') == 'bbb'\n\nassert solution('''\n1\nabb\n''') == 'abb'\n\nassert solution('''\n1\nbab\n''') == 'bab'\n\nassert solution('''\n1\nbba\n''') == 'bba'\n\nassert solution('''\n1\nbaa\n''') == 'baa'\n\nassert solution('''\n1\naab\n''') == 'aab'\n\nassert solution('''\n1\nabab\n''') == 'abab", "solution('''\n5\naabb\nbbaa\naaaa\nbababab\nababababa\n''') == '''\n2\n2\n0\n3\n3\n'''", "solution(\"ab\") == \"ba\"\nassert solution(\"ba\") == \"ab\"\nassert solution(\"aba\") == \"aaa\"\nassert solution(\"aabaa\") == \"aabaa\"\nassert solution(\"abba\") == \"abba\"\nassert solution(\"ababba\") == \"ababba\"\nassert solution(\"ababbb\") == \"bababb\"\nassert solution(\"ababbabb\") == \"abbabbabb\"\nassert solution(\"aaabb\") == \"aabbb\"\nassert solution(\"bbbabb\") == \"bbabbb\"\nassert solution(\"bbabbabbbb\") == \"babbabbabbb\"\nassert solution(\"abbbabbabbbb\") == \"abbabbabbbbb\"\nassert solution(\"abbbbabbabbbb\") == \"abbbbbabbabbb\"\nassert solution(\"abbbbbbabbabbbb\") == \"abbbbbbbabbabbb\"\nassert solution(\"bbbbbbbbbbbbbb\") == \"bbbbbbbbbbbbbb\"\nassert solution(\"aaaaaaaaaaaaaa\") == \"aaaaaaaaaaaaaa\"\nassert solution(\"bbbbbbbbbbbbba\") == \"bbbbbbbbbbbbab\"\nassert solution(\"baaaaaaaaaaaab\") == \"baaaaaaaaaaaba\"\nassert solution(\"babaaaaaaaaaaa\") == \"baaaaaaaaaaaab\"\nassert solution(\"babaabababaaba", "solution('''\n2\nbba\naba\n''') == '''\n2\naba\n'''\n\n# run static code analyzer\nimport mylib\nmylib.run_analyzer()\n\n# run unit tests\nimport unittest\nclass Test(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution('''\n2\nbba\naba\n'''), '''\n2\naba\n''')\n\nif __name__ == '__main__':\n    unittest.main()", "solution(\"1\\naabbbabaa\") == \"aabbbbbbaa\"\nassert solution(\"1\\naabaaab\") == \"aabaaba\"\nassert solution(\"1\\naaaaaaaaaaa\") == \"aaaaaaaaaaa\"\nassert solution(\"1\\nbbbbbbbbbbb\") == \"bbbbbbbbbbb\"\nassert solution(\"1\\nbaaaaaaabaa\") == \"baabaaaaaba\"\nassert solution(\"1\\nbaaaaaaabaaaaaaaaa\") == \"baabababababababab\"\nassert solution(\"1\\nbaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"baababababababababababababababababababababababababababababab\"\nassert solution(\"1\\nbaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "solution('''\n1\naababa\n''') == 'aabbba'\n\nassert solution('''\n2\nababb\naabbbababb\n''') == 'aabbbbabbb'\n\nassert solution('''\n1\nba\n''') == 'ba'\n\nassert solution('''\n1\naaaaa\n''') == 'aaaaa'\n\nassert solution('''\n1\nbb\n''') == 'bb'\n\nassert solution('''\n1\na\n''') == 'a'\n\nassert solution('''\n1\nab\n''') == 'bb'\n\nassert solution('''\n1\nbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n''') == 'baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n\nassert solution('''\n1\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n''') == 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n\nassert solution('''\n1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n''", "solution(\"aba\") == \"aba\"\nassert solution(\"aaabb\") == \"aabab\"\nassert solution(\"bbabaaabaaa\") == \"bbaabaaabaa\"\nassert solution(\"aaaaaa\") == \"aaaaaa\"\nassert solution(\"bb\") == \"bb\"\nassert solution(\"abbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb", "solution('''\n6\nbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb", "solution(stdin='5\\naabbbabaa\\nab\\nbb\\nababba\\nabba') == 'aabbbabaa'\nassert solution(stdin='5\\naabbbabaa\\nab\\nbb\\nababba\\nabba') == 'abba'\n\n# auto-generated tests\nassert solution(stdin='2\\naabbaabaa\\nabba') == 'abba'\nassert solution(stdin='2\\nabba\\nab') == 'ab'\nassert solution(stdin='2\\nabba\\nba') == 'ba'\nassert solution(stdin='2\\nab\\nba') == 'ba'\nassert solution(stdin='2\\nab\\nbb') == 'ab'\nassert solution(stdin='2\\nbb\\nba') == 'ba'\nassert solution(stdin='2\\nbb\\nab') == 'ab'\nassert solution(stdin='2\\nba\\nbb') == 'ba'\nassert solution(stdin='2\\nba\\nab') == 'ab'\nassert solution(stdin='2\\nbbbbb\\nbbb') == 'bbbbb'\nassert solution(stdin='2\\nbbbbb\\nbbbb') == 'bbbbb'\nassert solution(stdin", "'bab' == solution('abb')\nassert 'abbabb' == solution('abbabb')\nassert 'bab' == solution('bbab')\nassert 'bab' == solution('bab')\nassert 'bbabb' == solution('bbbbbb')\nassert 'babab' == solution('ababab')\nassert 'babab' == solution('babab')\nassert 'bbabb' == solution('abbabb')\nassert 'ababb' == solution('ababb')\nassert 'bab' == solution('bbb')\nassert 'bbab' == solution('bba')\nassert 'bbaa' == solution('bbaa')\nassert 'bbba' == solution('bba')\nassert 'ababa' == solution('ababa')\nassert 'bbaab' == solution('bbaab')\nassert 'bbbba' == solution('bbba')\nassert 'baaba' == solution('baaba')\nassert 'bbbba' == solution('bbba')\nassert 'bbaab' == solution('bbaab')\nassert 'babab' == solution('babab')\nassert 'bbaba' == solution('bbaba')\nassert 'bbaba' == solution('bbaba')\nassert 'bbabb' == solution('bbabb')\nassert 'ababb' == solution('ababb')", "solution('''\n2\naab\nbaba\n''') == '''\nbab\nbab\n'''\n\n# call the solution using input\nprint(solution(input()))"], "finish_reason": ["stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "stop"], "sum_logprob": [-27.302870562799995, -39.72744243889999, -128.2215310735351, -154.156753076309, -151.4572310128, -28.536925542499997, -29.671099046000005, -41.588074959740986, -30.4520283214, -129.26868449125, -6.774542141000001, -134.74325813957503, -94.06545197173995, -18.0981663935, -37.2816962355, -154.09802342460011, -232.95691697684023, -27.869658156999993, -102.17737950290999, -99.897130156486, -106.14332656731094, -34.76291602549999, -160.57561986874612, -102.19714240447696, -12.248474313259996, -22.488675331000007, -23.61802403112, -115.13371584998107, -136.87726928123007, -185.49071030943, -70.4727877091725, -51.00464067453001, -92.95260371445407, -32.042134448300004, -143.10627719382896, -21.00155848955001, -83.74864702791001, -148.6158114611999, -89.58968528062995, -88.33530594028059, -33.70843310639999, -157.17983499733995, -57.647525786955995, -88.54898784588006, -96.89956585751996, -62.319912217599956, -26.0729862491, -112.00190673159197, -145.26791905363004, -35.77780850066], "mean_logprob": [-0.5056087141259259, -0.794548848778, -0.42740510357845, -0.5138558435876966, -0.5048574367093334, -0.7134231385625, -0.9272218451875001, -0.13862691653247, -0.8458896755944444, -0.43089561497083334, -0.48389586721428574, -0.7244261190299731, -0.4107661658154585, -0.6032722131166667, -0.548260238757353, -0.513660078082, -0.7765230565894666, -0.87092681740625, -0.3405912650097, -0.3329904338549533, -0.3538110885577033, -0.8913568211666667, -0.5352520662291533, -0.5378796968656684, -0.04082824771086667, -0.7254411397096774, -0.1699138419505036, -0.38377905283327, -0.4562575642707667, -0.6183023676981, -0.23490929236390834, -0.4595012673381081, -0.3098420123815133, -0.8010533612075, -0.6594759317687973, -0.52503896223875, -0.2791621567597, -0.495386038204, -0.29863228426876665, -0.29445101980093535, -0.7490762912533333, -0.5239327833244667, -0.44688004486012406, -0.2951632928196, -0.3229985528584, -0.20773304072533333, -0.08690995416366666, -0.3733396891053067, -0.48422639684543334, -0.7950624111257778]}
{"prompt": "'''\nYouKn0wWho has an integer sequence a_1, a_2, \u2026, a_n. He will perform the following operation until the sequence becomes empty: select an index i such that 1 \u2264 i \u2264 |a| and a_i is not divisible by (i + 1), and erase this element from the sequence. Here |a| is the length of sequence a at the moment of operation. Note that the sequence a changes and the next operation is performed on this changed sequence.\n\nFor example, if a=[3,5,4,5], then he can select i = 2, because a_2 = 5 is not divisible by i+1 = 3. After this operation the sequence is [3,4,5].\n\nHelp YouKn0wWho determine if it is possible to erase the whole sequence using the aforementioned operation.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, print \"YES\" (without quotes) if it is possible to erase the whole sequence using the aforementioned operation, print \"NO\" (without quotes) otherwise. You can print each letter in any register (upper or lower).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n4\n4\n3 5 4 5\n4\n4 6 5 2\n6\n10 11 12 13 14 15\n5\n5 5 5 5 5\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution('''2\n5\n1 2 3 4 5\n5\n5 2 5 4 5''') == '''YES\nNO'''", "solution(\"\"\"\n4\n1\n1\n4\n3 5 4 5\n4\n3 4 5 6\n4\n1 3 7 9\n\"\"\") == \"\"\"\nYES\nYES\nNO\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n10\n9 8 7 6 5 4 3 2 1 1\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3\n1 3 3\n2\n3 3\n3\n1 2 3\n\"\"\") == \"\"\"\nYES\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3\n3 3 3\n3\n3 3 3\n3\n1 1 1\n\"\"\") == \"\"\"\nYES\nYES\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n3 3 3 3 3\n5\n1 1 1 1 1\n5\n1 3 5 7 9\n\"\"\") == \"\"\"\nNO\nNO\nYES\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5\n", "solution('''\n''') == '''\n'''", "solution('''\n3\n1\n3\n3\n1 2 3\n4\n1 1 1 1\n''') == '''\nYES\nYES\nNO\n'''", "solution(\"7\\n1\\n1\\n1\\n2\\n3\\n3\\n3\\n5\\n1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "solution('''\n''') == ''", "solution(\n'''\n4\n4\n3 5 4 5\n3\n1 2 3\n1\n1\n5\n1 2 3 4 5\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution(stdin=\"\"\"\n4\n4\n3 5 4 5\n4\n2 2 4 4\n1\n2\n1\n1\n\"\"\") == \"\"\"\nYES\nNO\nYES\nYES\n\"\"\"", "solution('''\n2\n5\n3 5 4 5\n4\n1 2 3 4\n''') == '''\nYES\nNO\n'''", "solution('''\n1\n4\n3 5 4 5\n''') == 'YES'\nassert solution('''\n1\n4\n1 2 3 4\n''') == 'NO'\nassert solution('''\n2\n4\n1 2 4 3\n4\n1 2 2 1\n''') == 'YES\\nYES'", "(solution(\"input0.txt\") == \"output0.txt\")", "solution('''\n4\n4\n3 5 4 5\n4\n3 5 4 6\n4\n3 5 6 7\n4\n3 5 7 9\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution(\"2\\n4\\n3 5 4 5\\n4\\n1 2 3 4\") == \"YES\\nNO\"\n\n# check the correctness of solution with extreme\nassert solution(\"2\\n4\\n1 2 3 4\\n4\\n1 2 3 4\") == \"NO\\nNO\"\n\n# check the correctness of solution with extreme\nassert solution(\"1\\n4\\n1 2 3 4\") == \"NO\"\n\n# check the correctness of solution with extreme\nassert solution(\"2\\n2\\n1 2\\n2\\n1 2\") == \"NO\\nNO\"\n\n# check the correctness of solution with extreme\nassert solution(\"2\\n2\\n2 2\\n2\\n2 2\") == \"YES\\nYES\"\n\n# check the correctness of solution with extreme\nassert solution(\"2\\n1\\n1\\n1\\n1\") == \"YES\\nYES\"\n\n# check the correctness of solution with extreme\nassert solution(\"2\\n2\\n2 2\\n2\\n1 2\") == \"YES\\nNO\"\n\n# check the correctness of solution with extreme\nassert solution(\"2\\n2\\n2 2\\n2\\n2 2\") == \"YES\\nYES\"\n\n# check the correctness of solution with extreme\nassert solution(\"3\\n1", "solution('''1\n5\n3 5 4 5''') == '''YES'''\n\nassert solution('''1\n4\n1 2 3 4''') == '''NO'''\n\nassert solution('''1\n5\n1 2 3 4 5''') == '''YES'''\n\n# get input from user\nprint(solution(input()))", "solution('''2\n2\n1 2\n2\n2 1''') == '''YES\nNO'''\n\n# check the correctness of solution\nassert solution('''3\n3\n3 4 6\n3\n3 2 4\n3\n1 1 1''') == '''NO\nYES\nYES'''\n\n# check the correctness of solution\nassert solution('''1\n5\n5 4 3 2 1''') == '''YES'''\n\n# check the correctness of solution\nassert solution('''1\n3\n3 2 1''') == '''YES'''\n\n# check the correctness of solution\nassert solution('''1\n10\n1 2 3 4 5 6 7 8 9 10''') == '''NO'''\n\n# check the correctness of solution\nassert solution('''1\n2\n2 1''') == '''NO'''\n\n# check the correctness of solution\nassert solution('''1\n7\n1 2 3 2 1 2 3''') == '''YES'''\n\n# check the correctness of solution\nassert solution('''1\n7\n1 1 1 1 1 1 1''') == '''YES'''\n\n# check the correctness of solution\nassert solution('''1\n2\n2 2''') == '''YES'''\n\n# check the correctness of solution\nassert solution(", "solution(\"\"\"\n5\n5\n3 5 4 5\n5\n1 2 3 4 5\n5\n10 9 8 7 6\n2\n2 2\n3\n2 3 3\n\"\"\") == \"\"\"\nYES\nNO\nYES\nYES\nNO\n\"\"\"", "solution('''\n3\n3\n3 5 4\n3\n3 5 5\n3\n1 2 3\n''') == '''\nYES\nNO\nNO\n'''", "solution('''\n3\n3\n3 5 4\n3\n3 5 2\n3\n3 5 3\n''') == '''\nYES\nNO\nNO\n'''", "solution(\"\") == \"\", \"test 1 failed\"\n\n# test data\ntest_data = [(\"\", \"\"), (\"\", \"\")]\n\n# run test\nfor test_case, answer in test_data:\n    assert solution(test_case) == answer, \"test failed\"", "solution(\"\"\"5\n4\n3 5 4 5\n1\n1\n3\n1 2 3\n2\n1 3\n2\n2 4\"\"\") == \"\"\"YES\nYES\nNO\nYES\nNO\"\"\"", "solution(get_test_data()) == get_expected_result()", "solution(\"3\\n3\\n3 5 4\\n3\\n3 5 6\\n3\\n3 5 6\") == \"YES\\nNO\\nNO\"", "solution('''3\n3\n3 5 4\n3\n7 7 7\n3\n3 6 1''') == '''YES\nNO\nNO'''", "solution('''\n2\n5\n3 5 4 5\n4\n1 2 3 4\n''') == '''\nYES\nNO\n'''", "'YES' == solution('1\\n3\\n1 2 3')\nassert 'NO' == solution('1\\n3\\n1 2 4')\nassert 'YES' == solution('1\\n3\\n2 3 4')\nassert 'YES' == solution('1\\n3\\n1 1 1')\nassert 'YES' == solution('1\\n6\\n1 1 1 1 1 1')\nassert 'YES' == solution('1\\n6\\n2 3 4 5 6 7')\nassert 'NO' == solution('1\\n6\\n1 2 3 4 5 6')\nassert 'NO' == solution('1\\n6\\n1 2 3 4 5 5')\nassert 'NO' == solution('1\\n1\\n1')\nassert 'YES' == solution('1\\n1\\n2')\nassert 'YES' == solution('1\\n1\\n4')\nassert 'YES' == solution('1\\n2\\n2 3')\nassert 'YES' == solution('1\\n2\\n3 4')\nassert 'YES' == solution('1\\n2\\n4 5')\nassert 'YES' == solution('1\\n2\\n1 2')\nassert 'YES' == solution('1\\n2\\n1 1')\nassert 'YES' == solution('1\\n2\\", "solution('''\n2\n2\n2 5\n3\n3 4 5\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2 5\n3\n3 4 5\n''') == '''\nYES\nNO\n'''", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution('''\n\n''') == '''\n\n'''", "solution('''5\n5\n5 8 2 3 5\n5\n5 7 2 6 5\n5\n5 7 2 6 8\n5\n5 7 2 3 5\n5\n5 7 2 3 8\n''') == '''YES\nNO\nYES\nYES\nNO\n'''", "solution('''\n1\n3\n1 2 3\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 2 1\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n2 3 4 5 6\n''') == 'YES'\n\nassert solution('''\n1\n5\n1 2 3 4 6\n''') == 'NO'", "solution(\"\"\"\n4\n4\n3 5 4 5\n4\n1 1 1 1\n4\n1 2 3 4\n4\n1 2 2 4\n\"\"\") == \"\"\"\nYES\nNO\nYES\nNO\n\"\"\"", "solution('''\n1\n3\n1 2 3\n''') == 'YES'\n\n# print the result\nprint(solution('''\n1\n3\n1 2 3\n'''))", "solution(\"\"\"\n1\n5\n2 3 4 5 6\n\"\"\") == \"\"\"\nYES\n\"\"\", 'Wrong Answer'\n\nassert solution(\"\"\"\n1\n4\n1 2 4 7\n\"\"\") == \"\"\"\nNO\n\"\"\", 'Wrong Answer'\n\nassert solution(\"\"\"\n1\n3\n1 4 8\n\"\"\") == \"\"\"\nYES\n\"\"\", 'Wrong Answer'\n\nassert solution(\"\"\"\n1\n3\n3 7 5\n\"\"\") == \"\"\"\nYES\n\"\"\", 'Wrong Answer'\n\nassert solution(\"\"\"\n1\n4\n4 6 10 9\n\"\"\") == \"\"\"\nYES\n\"\"\", 'Wrong Answer'\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\nYES\n\"\"\", 'Wrong Answer'\n\nassert solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\nYES\n\"\"\", 'Wrong Answer'\n\nassert solution(\"\"\"\n1\n3\n3 5 7\n\"\"\") == \"\"\"\nYES\n\"\"\", 'Wrong Answer'\n\nassert solution(\"\"\"\n1\n2\n4 6\n\"\"\") == \"\"\"\nYES\n\"\"\", 'Wrong Answer'\n\nassert solution(\"\"\"\n1\n3\n3 5 4\n\"\"\") == \"\"\"\nYES\n\"\"\", 'Wrong Answer'\n\nassert solution(\"\"\"\n1\n2", "solution('''2\n5\n3 5 4 5\n5\n1 2 3 4 5''') == '''YES\nNO'''", "solution(\n    '''5\n5\n3 5 4 5\n4\n3 1 2 6\n4\n3 6 4 2\n4\n1 2 3 4\n7\n1 2 3 4 5 6 7''') == '''YES\nNO\nYES\nNO\nYES'''", "solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Simple case\"\nassert solution(\"\") == \"\", \"Big case\"\n\n# check the performance of solution\nassert solution(\"\") == \"\", \"Empty case\"\nassert solution(\"\") == \"\", \"Simple case\"\nassert solution(\"\") == \"\", \"Big case\"", "solution(example_input_1) == example_output_1, 'Wrong answer.'\nassert solution(example_input_2) == example_output_2, 'Wrong answer.'\nassert solution(example_input_3) == example_output_3, 'Wrong answer.'\nassert solution(example_input_4) == example_output_4, 'Wrong answer.'\nassert solution(example_input_5) == example_output_5, 'Wrong answer.'\n\n# submit solution\nprint(solution(stdin))", "solution('''1\n5\n3 5 4 5''') == 'YES'\nassert solution('''1\n5\n1 2 3 4 5''') == 'NO'\nassert solution('''2\n3\n2 3 4\n2\n2 3''') == 'NO'", "solution(\"\"\"\n3\n3\n3 5 4\n3\n6 5 4\n3\n5 5 5\n\"\"\") == \"\"\"\nYES\nNO\nNO\n\"\"\"", "solution('''3\n3\n3 4 5\n3\n2 4 6\n3\n5 4 3''') == '''YES\nNO\nNO'''", "solution(test_input) == test_output\n\n# get the input data\nstdin = sys.stdin.read()\n\n# solve the problem\nsolution(stdin)", "solution('''\n2\n2\n1 3\n2\n2 3\n''') == '''\nYES\nNO\n'''\n\ndef fast_solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert fast_solution('''\n2\n2\n1 3\n2\n2 3\n''') == '''\nYES\nNO\n'''\n\n# test speed\nimport timeit\n\n# both solutions have the same speed\nprint(timeit.timeit(stmt=f'solution(test_stdin)', number=100, globals=globals()))\nprint(timeit.timeit(stmt=f'fast_solution(test_stdin)', number=100, globals=globals()))", "solution(\"\"\"\n5\n5\n3 5 4 5\n3\n3 4 1\n3\n3 3 3\n3\n3 5 3\n3\n2 3 3\n\"\"\") == \"\"\"\nYES\nNO\nYES\nNO\nYES\n\"\"\"", "solution(r'''3\n3\n3 5 4\n3\n3 5 6\n5\n6 6 6 6 6''') == r'''YES\nNO\nNO'''\n\n# print solution(r'''<paste here>''')", "solution(test_data1) == 'YES\\nYES\\nYES\\nNO\\nYES\\nYES'\nassert solution(test_data2) == 'NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO'\nassert solution(test_data3) == 'YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES'\nassert solution(test_data4) == 'NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO'\nassert solution(test_data5) == 'YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES'\nprint('Tests Passed')", "solution('''\n1\n3\n3 5 4\n''') == 'YES'\n\n# check performance of solution\nimport timeit\nprint(f'Test performance: {timeit.timeit(stmt=\"from __main__ import solution\", setup=\"from __main__ import solution\", number=100)}')", "solution('''\n2\n3\n1 2 3\n3\n1 2 4\n''') == '''\nYES\nNO\n'''", "solution('''\n4\n4\n3 5 4 5\n4\n4 2 1 6\n3\n1 2 3\n3\n3 2 1\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution('''\n2\n2\n2 3\n2\n2 4\n''') == '''\nYES\nNO\n'''\nassert solution('''\n1\n6\n2 3 4 5 6 7\n''') == '''\nYES\n'''\nassert solution('''\n1\n3\n2 3 4\n''') == '''\nNO\n'''\nassert solution('''\n1\n1\n1\n''') == '''\nYES\n'''\nassert solution('''\n1\n1\n2\n''') == '''\nNO\n'''\n\nif __name__ == '__main__':\n    n_cases = int(input())\n    for _ in range(n_cases):\n        n = int(input())\n        input()\n        if n == 1:\n            print('YES')\n        else:\n            print('NO')"], "finish_reason": ["stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-36.676890512129994, -21.5118450419, -105.23861147841302, -6.955910635, -18.0865685516, -39.70442301428002, -7.322616401000001, -21.826657064509998, -29.465635448089998, -11.123489683499997, -30.239817050440006, -15.467785694500003, -23.180272080070008, -77.10263233035496, -33.793305951191, -94.30479848528009, -36.91187130089001, -17.5200324656, -19.838489092899994, -46.46628755706, -25.784433750340003, -14.133781171129998, -18.400884243990003, -24.796412332399996, -11.120381913700005, -75.44642313287007, -26.50832270105999, -12.914128944107993, -8.040626422200003, -52.88157880719, -33.711006390006006, -25.917367894549997, -20.617759797799994, -101.79509052186339, -12.4288121264, -46.99577040756, -28.16584375685, -27.966540472533985, -28.789948407759997, -22.320688739600005, -22.579808393300006, -20.124746719510004, -68.72496036183196, -39.905724231849995, -41.54152035754999, -48.41052139796457, -39.77775215392001, -10.406121447499999, -27.01169857666001, -64.47099369729304], "mean_logprob": [-0.666852554766, -0.672245157559375, -0.35079537159471, -0.49685075964285713, -0.46375816798974356, -0.13234807671426665, -0.7322616401, -0.4365331412902, -0.6405572923497826, -0.32716146127941176, -0.4031975606725333, -0.96673660590625, -0.44577446307826923, -0.2570087744345167, -0.40230126132370236, -0.31434932828426665, -0.6475766894892983, -0.43800081164, -0.4959622273225, -0.7148659624163077, -0.5605311684856522, -0.883361323195625, -0.4718175447176923, -0.6887892314555556, -0.3270700562852941, -0.25148807710956667, -0.3733566577614085, -0.04304709648036, -0.5025391513875, -0.8262746688623438, -0.32414429221159613, -0.5289258753989796, -0.4482121695173913, -0.339316968406211, -0.40092942343225807, -0.757996296896129, -0.35652966780822787, -0.22737024774417885, -0.44984294387125, -0.603261857827027, -0.627216899813889, -0.47916063617880955, -0.38180533534351113, -0.7389948931824074, -0.7553003701372727, -0.24953877009260103, -0.5682536021988571, -0.325191295234375, -0.5402339715332, -0.3272639273974264]}
{"prompt": "'''\nThere are n heroes fighting in the arena. Initially, the i-th hero has a_i health points.\n\nThe fight in the arena takes place in several rounds. At the beginning of each round, each alive hero deals 1 damage to all other heroes. Hits of all heroes occur simultaneously. Heroes whose health is less than 1 at the end of the round are considered killed.\n\nIf exactly 1 hero remains alive after a certain round, then he is declared the winner. Otherwise, there is no winner.\n\nYour task is to calculate the number of ways to choose the initial health points for each hero a_i, where 1 \u2264 a_i \u2264 x, so that there is no winner of the fight. The number of ways can be very large, so print it modulo 998244353. Two ways are considered different if at least one hero has a different amount of health. For example, [1, 2, 1] and [2, 1, 1] are different.\n\nInput\n\nThe only line contains two integers n and x (2 \u2264 n \u2264 500; 1 \u2264 x \u2264 500).\n\nOutput\n\nPrint one integer \u2014 the number of ways to choose the initial health points for each hero a_i, where 1 \u2264 a_i \u2264 x, so that there is no winner of the fight, taken modulo 998244353. \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\n'''\n2 3\n'''\n) == '''\n1\n'''\n\nassert solution(\n'''\n3 3\n'''\n) == '''\n2\n'''\n\nassert solution(\n'''\n3 4\n'''\n) == '''\n24\n'''\n\nassert solution(\n'''\n6 3\n'''\n) == '''\n0\n'''\n\nassert solution(\n'''\n6 4\n'''\n) == '''\n24\n'''\n\nassert solution(\n'''\n6 5\n'''\n) == '''\n240\n'''\n\nassert solution(\n'''\n6 6\n'''\n) == '''\n720\n'''\n\nassert solution(\n'''\n4 2\n'''\n) == '''\n0\n'''\n\nassert solution(\n'''\n4 3\n'''\n) == '''\n1\n'''\n\nassert solution(\n'''\n4 4\n'''\n) == '''\n6\n'''\n\nassert solution(\n'''\n4 5\n'''\n) == '''\n6\n'''\n\nassert solution(\n'''\n4 6\n'''\n) == '''\n6\n'''\n\nassert solution(\n'''\n4 7\n'''\n", "solution(r'''\n2 2\n''') == r'''\n1\n'''\n\nassert solution(r'''\n3 3\n''') == r'''\n9\n'''\n\nassert solution(r'''\n4 4\n''') == r'''\n68\n'''\n\nassert solution(r'''\n5 5\n''') == r'''\n550\n'''\n\nassert solution(r'''\n6 6\n''') == r'''\n5583\n'''\n\nassert solution(r'''\n7 7\n''') == r'''\n70077\n'''\n\nassert solution(r'''\n8 8\n''') == r'''\n981904\n'''\n\nassert solution(r'''\n9 9\n''') == r'''\n15661904\n'''\n\nassert solution(r'''\n10 10\n''') == r'''\n286459730\n'''\n\nassert solution(r'''\n11 11\n''') == r'''\n5572317280\n'''\n\nassert solution(r'''\n12 12\n''') == r'''\n118539836160\n'''\n\nassert solution(r'''\n13 13\n''') == r'''\n2708142439040\n'''\n\nassert solution(", "solution('''2 3''') == '3'\nassert solution('''5 3''') == '6'\nassert solution('''5 5''') == '42'\nassert solution('''5 7''') == '14106'\nassert solution('''7 7''') == '924'\nassert solution('''7 10''') == '379037'\nassert solution('''7 15''') == '177625'\nassert solution('''7 19''') == '380771'\nassert solution('''7 20''') == '959479'\nassert solution('''7 21''') == '965574'\nassert solution('''7 22''') == '967838'\nassert solution('''7 23''') == '967037'\nassert solution('''7 24''') == '966176'\nassert solution('''7 25''') == '961273'\nassert solution('''7 26''') == '959511'\nassert solution('''7 27''') == '959510'\nassert solution('''7 28''') == '957342'\nassert solution('''7 29''') == '956231'\nassert solution('''7 30''') == '954874'\nassert solution('''7 31", "solution('''\n2 2\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n4 2\n''') == '256'\n\n# check the correctness of solution\nassert solution('''\n10 3\n''') == '2097152'", "solution(stdin=\"3 4\") == \"3\"\nassert solution(stdin=\"5 4\") == \"32\"\nassert solution(stdin=\"5 5\") == \"61\"\nassert solution(stdin=\"1 1\") == \"1\"\nassert solution(stdin=\"10 1\") == \"1\"\nassert solution(stdin=\"10 2\") == \"1\"\nassert solution(stdin=\"10 3\") == \"7\"\nassert solution(stdin=\"10 4\") == \"18\"\nassert solution(stdin=\"10 5\") == \"59\"\nassert solution(stdin=\"10 6\") == \"191\"\nassert solution(stdin=\"10 7\") == \"634\"\nassert solution(stdin=\"10 8\") == \"2180\"\nassert solution(stdin=\"10 9\") == \"7698\"\nassert solution(stdin=\"10 10\") == \"29013\"\nassert solution(stdin=\"100 2\") == \"1\"\nassert solution(stdin=\"100 3\") == \"15\"\nassert solution(stdin=\"100 4\") == \"50\"\nassert solution(stdin=\"100 5\") == \"166\"\nassert solution(stdin=\"100 6\") == \"543\"\nassert solution(stdin=\"100 7\") == \"1802\"\nassert solution(stdin=\"100 8\") == \"6114\"\n", "(solution('2 2') == '4')\nassert (solution('3 6') == '614')\nassert (solution('2 3') == '12')\nassert (solution('4 7') == '286484')\nassert (solution('4 8') == '512016')\nassert (solution('1 2') == '2')\nassert (solution('3 8') == '14696')\nassert (solution('5 7') == '425024')\nassert (solution('5 9') == '1175232')\nassert (solution('5 10') == '2350400')\nassert (solution('5 11') == '4700832')\nassert (solution('5 12') == '9401632')\nassert (solution('5 13') == '18803392')\nassert (solution('5 14') == '37606848')\nassert (solution('5 15') == '75213952')\nassert (solution('5 16') == '150427952')\nassert (solution('5 17') == '300856320')\nassert (solution('5 18') == '601713024')\nassert (solution('5 19') == '1203426016')\nassert (solution('5 20') == '2406952576')\nassert (solution", "solution('''\n2 2\n''') == '''\n9\n'''\nassert solution('''\n3 2\n''') == '''\n36\n'''\nassert solution('''\n4 2\n''') == '''\n189\n'''\nassert solution('''\n2 3\n''') == '''\n25\n'''\nassert solution('''\n3 3\n''') == '''\n283\n'''\nassert solution('''\n4 3\n''') == '''\n3089\n'''\nassert solution('''\n2 500\n''') == '''\n867684401\n'''\nassert solution('''\n3 500\n''') == '''\n1419285877\n'''\nassert solution('''\n4 500\n''') == '''\n906542945\n'''", "solution(sample_input) == sample_output\n\n# get input and output\nn, x = [int(i) for i in stdin.readline().split()]\nans = solution(stdin)\n\n# print the answer\nprint(ans)", "solution('''2 3''') == '7'\nassert solution('''3 4''') == '80'\nassert solution('''5 6''') == '567123845'\nassert solution('''7 7''') == '571564402'\nassert solution('''10 10''') == '458330900'\nassert solution('''10 500''') == '233549783'\nassert solution('''500 500''') == '828683339'\n\n# get input\ndef get_input():\n    fin = open('input.txt', 'r')\n    return fin.read()\n\n# get output\ndef get_output():\n    fout = open('output.txt', 'r')\n    return fout.read()\n\n# write output\ndef write_output(solution: str):\n    fout = open('output.txt', 'w')\n    fout.write(solution)\n\n# check the correctness of solution for sample input and output\nsample_input = '''3 4'''\nassert solution(sample_input) == get_output()\n\n# get input\ninput_data = get_input()\n\n# solve the problem\nsolution_data = solution(input_data)\n\n# write output\nwrite_output(solution_data", "solution('''3 2''') == '''4'''\n\n# get input and run solution\nif __name__ == '__main__':\n    stdin = open(0).read().strip()\n    print(solution(stdin))", "solution(\"2 2\") == \"4\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"4 3\") == \"48\"\nassert solution(\"3 3\") == \"24\"\nassert solution(\"500 500\") == \"145985244\"", "solution(stdin='''\n2 2\n''') == '''\n1\n'''\nassert solution(stdin='''\n2 3\n''') == '''\n8\n'''\nassert solution(stdin='''\n3 3\n''') == '''\n6\n'''\nassert solution(stdin='''\n3 4\n''') == '''\n40\n'''\nassert solution(stdin='''\n3 5\n''') == '''\n272\n'''\nassert solution(stdin='''\n3 6\n''') == '''\n1696\n'''\nassert solution(stdin='''\n3 7\n''') == '''\n10248\n'''\nassert solution(stdin='''\n3 8\n''') == '''\n58672\n'''\nassert solution(stdin='''\n3 9\n''') == '''\n330688\n'''\nassert solution(stdin='''\n3 10\n''') == '''\n1769472\n'''\nassert solution(stdin='''\n4 5\n''') == '''\n74880\n'''\nassert solution(stdin='''\n4 6\n''') == '''\n413904\n'''\nassert solution(stdin='''\n4 7\n''') == '", "solution(sample_input) == sample_output", "solution('''2 2''') == '3'\nassert solution('''3 1''') == '3'\nassert solution('''3 2''') == '21'\nassert solution('''3 3''') == '96'\nassert solution('''2 3''') == '4'\nassert solution('''5 5''') == '527482631'\nassert solution('''500 500''') == '1410412774'\nassert solution('''500 499''') == '656960985'\nassert solution('''500 498''') == '398483869'\nassert solution('''10 4''') == '3075'\nassert solution('''100 100''') == '932286541'\nassert solution('''100 10''') == '581145173'\nassert solution('''100 9''') == '333658776'\nassert solution('''100 8''') == '204728865'\nassert solution('''100 7''') == '124933156'\nassert solution('''100 6''') == '76981910'\nassert solution('''100 5''') == '46977026'\nassert solution('''100 4''') == '28646765'\nassert solution('''100 3''') ==", "solution(\"input.txt\") == \"outpu", "(solution('''2 3''') == '''8''')\nassert (solution('''3 4''') == '''82''')\nassert (solution('''1 1''') == '''1''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '''8''')\nassert (solution('''2 3''') == '", "solution(\"\"\"4 2\"\"\") == \"\"\"64\"\"\", \"failed test\"\n\n# get the input\nTEST_CASE = [line.rstrip(\"\\n\") for line in sys.stdin][1:]\n\n# print out the answer\nfor test in TEST_CASE:\n    print(solution(test))", "solution('''\n2 3\n''') == '''\n6\n'''\n\nassert solution('''\n3 2\n''') == '''\n9\n'''\n\nassert solution('''\n10 1\n''') == '''\n1\n'''\n\nassert solution('''\n2 500\n''') == '''\n500500\n'''\n\nassert solution('''\n500 500\n''') == '''\n361580834\n'''\n#                500^500\n#               ---------\n#                499^499\n# answer=       ---------\n#                500^499\n#\n\nassert solution('''\n500 499\n''') == '''\n360714993\n'''\n#                499^499\n#               ---------\n#                498^498\n# answer=       ---------\n#                499^498\n#", "solution('''\n2 2\n''') == '''\n4\n'''\n\nassert solution('''\n2 3\n''') == '''\n16\n'''\n\nassert solution('''\n3 4\n''') == '''\n72\n'''\n\nassert solution('''\n5 500\n''') == '''\n8900983\n'''\n\nassert solution('''\n500 500\n''') == '''\n744443964\n'''", "solution('''\n2 1\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n5 3\n''') == '120'\n\n# check the correctness of solution\nassert solution('''\n9 500\n''') == '874126330'", "solution('''2 1''') == '2'\nassert solution('''3 2''') == '36'\nassert solution('''10 6''') == '289865340'", "solution(\"3 2\") == \"7\"\nassert solution(\"3 3\") == \"15\"\nassert solution(\"3 4\") == \"21\"\nassert solution(\"4 3\") == \"70\"\nassert solution(\"4 4\") == \"105\"\nassert solution(\"4 5\") == \"140\"\nassert solution(\"5 4\") == \"455\"\nassert solution(\"5 5\") == \"840\"\nassert solution(\"5 6\") == \"1275\"\n\nif __name__ == \"__main__\":\n    print(solution(sys.stdin.read().strip()))", "solution('''2 3''') == '5'\nassert solution('''3 2''') == '4'\nassert solution('''4 4''') == '32'\nassert solution('''5 2''') == '15'\nassert solution('''5 3''') == '60'\nassert solution('''5 4''') == '165'\nassert solution('''7 3''') == '84'\nassert solution('''7 4''') == '495'\nassert solution('''7 5''') == '1365'\nassert solution('''7 6''') == '3003'\nassert solution('''7 7''') == '5005'\nassert solution('''10 10''') == '3432'\nassert solution('''25 25''') == '3432'\nassert solution('''50 50''') == '3432'\nassert solution('''100 100''') == '3432'\nassert solution('''500 500''') == '3432'\nassert solution('''500 1''') == '0'\nassert solution('''500 499''') == '0'\nassert solution('''5 1''') == '0'\nassert solution('''5 2''') == '15'\nassert solution('''5 3''') == '60'", "solution('''2 2''') == '''6'''\nassert solution('''3 2''') == '''90'''\nassert solution('''4 2''') == '''60'''\nassert solution('''2 3''') == '''18'''\nassert solution('''3 3''') == '''720'''\nassert solution('''4 3''') == '''5040'''\nassert solution('''2 4''') == '''12'''\nassert solution('''3 4''') == '''540'''\nassert solution('''4 4''') == '''15120'''\n\n# setup the IO\ninput: str = ''\nwith open('input.txt', 'r') as file:\n    input = file.read()\n\n# submit the answer to hackerrank\nprint(solution(input))", "solution('''3 2''') == '''12'''\nassert solution('''4 2''') == '''48'''\nassert solution('''4 3''') == '''20160'''\nassert solution('''5 6''') == '''225190432'''\nassert solution('''500 2''') == '''38456544'''\nassert solution('''500 500''') == '''24631039'''\n\n'''\nA string s is good if it has at least one letter that occurs strictly more than n/2 times in the string.\n\nYou are given a string a consisting of n characters. Assume that each letter of the string is lowercase English letter. You can perform the following operation on the string:\n\nInsert any character into any position of the string.\nOutput a good string after performing a minimum number of operations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 2*10^5) \u2014 the length of the string a.\n\nThe second line of each test case contains a string a of length n.\n\nOutput\n\nPrint t integers. The i-th integer should be equal to the minimum number of operations you need to perform", "solution('''2 3''') == '9'\nassert solution('''2 3''') == '9'\nassert solution('''5 6''') == '6435'\nassert solution('''3 10''') == '12101'\nassert solution('''500 500''') == '443866311'\n\nprint('all tests are passed')", "solution(\"2 2\") == \"8\"\nassert solution(\"2 3\") == \"32\"\nassert solution(\"3 3\") == \"432\"\nassert solution(\"4 2\") == \"40\"\nassert solution(\"4 3\") == \"5640\"\nassert solution(\"500 500\") == \"187834510\"", "solution('''2 2''') == '4'\nassert solution('''3 3''') == '12'\nassert solution('''4 4''') == '24'\nassert solution('''4 5''') == '60'\nassert solution('''4 6''') == '120'\nassert solution('''4 7''') == '165'\nassert solution('''4 8''') == '240'\nassert solution('''4 9''') == '336'\nassert solution('''4 10''') == '504'\nassert solution('''4 11''') == '660'\nassert solution('''4 12''') == '924'\nassert solution('''5 5''') == '60'\nassert solution('''5 6''') == '126'\nassert solution('''5 7''') == '252'\nassert solution('''5 8''') == '420'\nassert solution('''5 9''') == '714'\nassert solution('''5 10''') == '1020'\nassert solution('''5 11''') == '1470'\nassert solution('''5 12''') == '2450'\nassert solution('''5 13''') == '3300'\nassert solution('''5 14''') == '5050'\nassert", "solution('''\n2 1\n''') == '''\n2\n'''\n\nassert solution('''\n2 2\n''') == '''\n4\n'''\n\nassert solution('''\n3 1\n''') == '''\n6\n'''\n\nassert solution('''\n3 2\n''') == '''\n30\n'''\n\nassert solution('''\n4 1\n''') == '''\n24\n'''\n\nassert solution('''\n4 2\n''') == '''\n432\n'''\n\nassert solution('''\n10 4\n''') == '''\n474416\n'''\n\nassert solution('''\n10 9\n''') == '''\n1176183552\n'''\n\nassert solution('''\n20 4\n''') == '''\n6373322240\n'''\n\nassert solution('''\n20 6\n''') == '''\n4167602560\n'''\n\nassert solution('''\n20 7\n''') == '''\n2325331456\n'''\n\nassert solution('''\n20 9\n''') == '''\n2849148928\n'''\n\nassert solution('''\n30 4\n''') == '''\n57369767680\n'''\n\nassert solution", "solution('''2 2''') == '5'\nassert solution('''5 1''') == '8'\nassert solution('''1 2''') == '2'\nassert solution('''2 3''') == '11'\nassert solution('''1 3''') == '3'\nassert solution('''3 3''') == '15'\nassert solution('''1 1''') == '1'\nassert solution('''2 1''') == '2'\nassert solution('''1 5''') == '6'\nassert solution('''4 5''') == '127'\nassert solution('''4 4''') == '62'\nassert solution('''2 3''') == '11'\nassert solution('''3 5''') == '81'\nassert solution('''3 4''') == '39'\nassert solution('''3 2''') == '6'\nassert solution('''2 2''') == '5'\nassert solution('''1 1''') == '1'\nassert solution('''1 1''') == '1'\nassert solution('''1 1''') == '1'\nassert solution('''1 1''') == '1'\nassert solution('''1 1''') == '1'\nassert solution('''1 1", "int(solution('''6 2''')) == 2\nassert int(solution('''1 7''')) == 7\nassert int(solution('''9 7''')) == 1\nassert int(solution('''2 7''')) == 0\nassert int(solution('''3 7''')) == 0\nassert int(solution('''4 7''')) == 4\nassert int(solution('''5 7''')) == 1\nassert int(solution('''6 7''')) == 3\nassert int(solution('''7 7''')) == 0\nassert int(solution('''8 7''')) == 1\nassert int(solution('''9 7''')) == 1\nassert int(solution('''10 7''')) == 1\nassert int(solution('''11 7''')) == 0\nassert int(solution('''12 7''')) == 1\nassert int(solution('''13 7''')) == 0\nassert int(solution('''14 7''')) == 1\nassert int(solution('''15 7''')) == 0\nassert int(solution('''16 7''')) == 1\nassert int(solution('''17 7'''))", "solution(\"\"\"\ninput\n\"\"\") == \"\"\"\noutput\n\"\"\"", "solution(\"4 9\") == \"2462\"\n\n# print(solution(read_input()))", "solution('''2 1''') == '3'\nassert solution('''3 4''') == '9'\nassert solution('''1 1''') == '0'\nassert solution('''3 3''') == '3'\nassert solution('''3 2''') == '6'\nassert solution('''2 3''') == '6'\nassert solution('''1 2''') == '0'\nassert solution('''1 3''') == '0'\nassert solution('''1 4''') == '0'\nassert solution('''1 5''') == '0'\nassert solution('''1 6''') == '0'\nassert solution('''1 7''') == '0'\nassert solution('''1 8''') == '0'\nassert solution('''1 9''') == '0'\nassert solution('''1 10''') == '0'\nassert solution('''1 11''') == '0'\nassert solution('''1 12''') == '0'\nassert solution('''1 13''') == '0'\nassert solution('''1 14''') == '0'\nassert solution('''1 15''') == '0'\nassert solution('''1 16''') == '0'\nassert solution('''1 17", "solution('''\n2 3\n''') == '''\n6\n'''\n\nassert solution('''\n2 4\n''') == '''\n20\n'''\n\nassert solution('''\n3 2\n''') == '''\n0\n'''\n\nassert solution('''\n3 3\n''') == '''\n48\n'''\n\nassert solution('''\n3 4\n''') == '''\n90\n'''\n\nassert solution('''\n3 5\n''') == '''\n108\n'''\n\nassert solution('''\n3 6\n''') == '''\n120\n'''\n\nassert solution('''\n3 7\n''') == '''\n126\n'''\n\nassert solution('''\n3 8\n''') == '''\n120\n'''\n\nassert solution('''\n3 9\n''') == '''\n108\n'''\n\nassert solution('''\n3 10\n''') == '''\n90\n'''\n\nassert solution('''\n3 11\n''') == '''\n72\n'''\n\nassert solution('''\n3 12\n''') == '''\n48\n'''\n\nassert solution('''\n3 13\n''') == '''\n30\n'''\n\nassert solution('''\n3", "solution(\"2 3\") == \"6\"\nassert solution(\"3 5\") == \"90\"\nassert solution(\"10 500\") == \"10952023833\"\nassert solution(\"500 500\") == \"474992580\"\n\n# check reading and writing\nassert verify_io(\"2 3\", \"6\")\nassert verify_io(\"3 5\", \"90\")\nassert verify_io(\"10 500\", \"10952023833\")\nassert verify_io(\"500 500\", \"474992580\")\n\nprint(\"Test passed!\")", "solution('''\n2 3\n''') == '''\n3\n'''\n\nassert solution('''\n3 5\n''') == '''\n85\n'''\n\nassert solution('''\n1 1\n''') == '''\n1\n'''\n\nassert solution('''\n2 2\n''') == '''\n4\n'''\n\nassert solution('''\n4 4\n''') == '''\n756\n'''\n\nassert solution('''\n10 7\n''') == '''\n24584739\n'''\n\nassert solution('''\n100 100\n''') == '''\n39002028\n'''", "solution(\"2 5\") == \"20\"\nassert solution(\"3 8\") == \"844\"\nassert solution(\"100 500\") == \"796058157\"", "True", "solution(\"4 5\") == \"4\"\nassert solution(\"5 4\") == \"10\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"5 11\") == \"44444444\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"3 3\") == \"12\"\nassert solution(\"4 3\") == \"24\"\nassert solution(\"4 4\") == \"64\"\nassert solution(\"5 4\") == \"160\"\nassert solution(\"5 5\") == \"576\"\nassert solution(\"6 4\") == \"512\"\nassert solution(\"6 5\") == \"2560\"\nassert solution(\"6 6\") == \"20736\"\nassert solution(\"7 5\") == \"20480\"\nassert solution(\"7 6\") == \"122880\"\nassert solution(\"7 7\") == \"1415577\"\nassert solution(\"8 6\") == \"1290240\"\nassert solution(\"8 7\") == \"10752000\"\nassert solution(\"8 8\") == \"130190336\"\nassert solution(\"9 7\") == \"11796480\"\nassert solution(\"9 8\") == \"1698693120\"\nassert solution(\"9 9\") == \"28766959617\"\n", "solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\nassert solution(sample_input_4) == sample_output_4\nassert solution(sample_input_5) == sample_output_5\nassert solution(sample_input_6) == sample_output_6\nassert solution(sample_input_7) == sample_output_7\nassert solution(sample_input_8) == sample_output_8\nassert solution(sample_input_9) == sample_output_9\nassert solution(sample_input_10) == sample_output_10\nassert solution(sample_input_11) == sample_output_11\nassert solution(sample_input_12) == sample_output_12\nassert solution(sample_input_13) == sample_output_13\nassert solution(sample_input_14) == sample_output_14\nassert solution(sample_input_15) == sample_output_15\nassert solution(sample_input_16) == sample_output_16\nassert solution(sample_input_17) == sample_output_17\nassert solution(sample_input_18) == sample_output_18\nassert solution(sample_input_19) == sample_output", "solution(stdin) == stdout\n\n\n# ----------------------------------------------------------------------------------------------------\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "solution(r'''\n3 1\n''') == r'''\n6\n'''\nassert solution(r'''\n5 10\n''') == r'''\n0\n'''\nassert solution(r'''\n2 5\n''') == r'''\n12\n'''\nassert solution(r'''\n5 500\n''') == r'''\n0\n'''\nassert solution(r'''\n100 500\n''') == r'''\n557555\n'''\n\nassert solution(r'''\n100 500\n''') == r'''\n557555\n'''\n\nassert solution(r'''\n500 500\n''') == r'''\n13574886\n'''\n\nassert solution(r'''\n500 499\n''') == r'''\n10581460\n'''\n\nassert solution(r'''\n500 498\n''') == r'''\n8472406\n'''\n\nassert solution(r'''\n500 1\n''') == r'''\n29762250\n'''\n\nassert solution(r'''\n500 2\n''') == r'''\n20304664\n'''\n\nassert solution(r'''\n500 3\n''') == r'''\n13574886\n'''\n\nassert solution(r'''", "solution('''2 3''') == '1'\nassert solution('''3 2''') == '8'\nassert solution('''5 5''') == '19152'\nassert solution('''10 500''') == '190986643'\n\nprint(\"Basic tests passed!\")", "solution('''2 2''') == '5'\nassert solution('''3 2''') == '0'\nassert solution('''4 3''') == '25'\nassert solution('''500 500''') == '1223394957'\nassert solution('''2 3''') == '1'\nassert solution('''3 3''') == '0'\nassert solution('''4 4''') == '25'\nassert solution('''5 5''') == '2147483625'\nassert solution('''10 5''') == '1223059673'\nassert solution('''10 6''') == '1680702625'\nassert solution('''10 7''') == '2169333361'\nassert solution('''10 8''') == '2679142961'\nassert solution('''10 9''') == '3202348961'\nassert solution('''10 10''') == '37437863'\nassert solution('''10 11''') == '2930272461'\nassert solution('''10 12''') == '3416691761'\nassert solution('''10 13''') == '3899056061'\nassert solution('''10 14''') == '4377683361'\nassert solution(''", "solution('''\n3 2\n''') == '4'\n\nassert solution('''\n4 2\n''') == '0'\n\nassert solution('''\n5 3\n''') == '4'\n\n# mock stdin for test purposes\nimport io\nimport sys\n\ndef read_in() -> str:\n    input_str = ''\n    for line in sys.stdin:\n        input_str += line + '\\n'\n    return input_str\n\nstdin = read_in()\n\nif __name__ == '__main__':\n    sys.stdin = io.StringIO(stdin)\n    print(solution(stdin))", "solution('''\n2 2\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3\n''') == '''\n9\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3\n''') == '''\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n2 4\n''') == '''\n120\n'''\n\n# check the correctness of solution\nassert solution('''\n3 4\n''') == '''\n240\n'''\n\n# check the correctness of solution\nassert solution('''\n2 10\n''') == '''\n37984\n'''\n\n# check the correctness of solution\nassert solution('''\n3 10\n''') == '''\n45360\n'''\n\n# check the correctness of solution\nassert solution('''\n2 500\n''') == '''\n543058347\n'''\n\n# check the correctness of solution\nassert solution('''\n3 500\n''') == '''\n819552802\n'''\n\n# check the correctness of solution\nassert solution('''\n4 500\n''')", "solution(stdin) == stdout\n\n# submit solution\n# https://codeforces.com/contest/1283/submission/73224694", "solution('''5 5''') == '''16'''\nassert solution('''5 1''') == '''1'''\nassert solution('''5 10''') == '''272'''\nassert solution('''10 20''') == '''49'''\nassert solution('''20 5''') == '''0'''\nassert solution('''50 50''') == '''5585'''\nassert solution('''500 500''') == '''18149'''", "solution('''\\\n4 2\n''') == '''\\\n9\n'''\n\nassert solution('''\\\n1 1\n''') == '''\\\n1\n'''\n\nassert solution('''\\\n2 3\n''') == '''\\\n5\n'''\n\n# test 2\n\n# print('Test done!')"], "finish_reason": ["length", "length", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "stop"], "sum_logprob": [-70.017780277411, -159.5892917802407, -233.50237694381994, -34.654843016550004, -135.17125705791702, -176.50726494583606, -115.88704900662498, -32.576178892070004, -200.367848113551, -25.180825606420008, -48.01473987719999, -94.67189039980894, -7.276550502499999, -305.4435087754885, -14.032926902, -38.15439091253099, -51.54668017541199, -139.42650927614588, -67.93591454759002, -50.541582309300004, -42.16266914554001, -55.38330648745002, -111.42923399404688, -93.24136884079905, -231.60211488612973, -80.0812009689, -65.26412632875, -86.84465285091096, -189.4296070910648, -105.15057658101799, -71.67202467844498, -10.532697759999998, -36.8971865845, -47.99833207506456, -50.072538831121584, -107.72147406614997, -92.68106455685198, -49.81680116760001, -4.9793434, -157.54850522672996, -14.79985936100911, -31.381396346960013, -175.18430712424623, -70.70652253023002, -248.97501867994401, -62.807506156928994, -109.38345826190285, -39.94772651732999, -89.10780650506997, -58.20019389819], "mean_logprob": [-0.23339260092470335, -0.5319643059341357, -0.7783412564794, -0.5331514310238461, -0.4505708568597233, -0.5883575498194533, -0.6067384764744764, -0.552138625289322, -0.66789282704517, -0.44176887028807016, -0.8423638574947369, -0.31557296799936335, -0.6615045911363636, -1.0181450292516283, -1.2757206274545456, -0.12718130304177, -0.6965767591271892, -0.7299817239588796, -0.6175992231599091, -0.7543519747656716, -0.9582424805804546, -0.4326820819332031, -0.37143077998015667, -0.47330644081623857, -0.7720070496204333, -0.964833746613253, -0.9458569033152174, -0.28948217616970334, -0.6314320236368827, -0.35050192193672663, -0.23890674892815, -0.7021798506666667, -1.5373827743541666, -0.159994440250215, -0.16690846277040533, -0.89767895055125, -0.6137818844824636, -1.3838000324333333, -4.9793434, -0.5251616840891, -0.049332864536697, -0.10460465448986667, -0.5839476904141533, -1.0398018019151472, -0.8299167289331467, -0.4052097171414774, -0.364611527539676, -1.0512559609823684, -0.7885646593369027, -0.7185209123233334]}
{"prompt": "'''\nYou are given a tree consisting of n vertices. Recall that a tree is an undirected connected acyclic graph. The given tree is rooted at the vertex 1.\n\nYou have to process q queries. In each query, you are given a vertex of the tree v and an integer k.\n\nTo process a query, you may delete any vertices from the tree in any order, except for the root and the vertex v. When a vertex is deleted, its children become the children of its parent. You have to process a query in such a way that maximizes the value of c(v) - m \u22c5 k (where c(v) is the resulting number of children of the vertex v, and m is the number of vertices you have deleted). Print the maximum possible value you can obtain.\n\nThe queries are independent: the changes you make to the tree while processing a query don't affect the tree in other queries.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of vertices in the tree.\n\nThen n-1 lines follow, the i-th of them contains two integers x_i and y_i (1 \u2264 x_i, y_i \u2264 n; x_i \u2260 y_i) \u2014 the endpoints of the i-th edge. These edges form a tree.\n\nThe next line contains one integer q (1 \u2264 q \u2264 2 \u22c5 10^5) \u2014 the number of queries.\n\nThen q lines follow, the j-th of them contains two integers v_j and k_j (1 \u2264 v_j \u2264 n; 0 \u2264 k_j \u2264 2 \u22c5 10^5) \u2014 the parameters of the j-th query.\n\nOutput\n\nFor each query, print one integer \u2014 the maximum value of c(v) - m \u22c5 k you can achieve.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n6\n1 2\n1 3\n2 4\n2 5\n2 6\n2\n2 0\n3 0\n''') == '''\n3\n3\n'''\n\nassert solution('''\n5\n1 2\n1 3\n2 4\n2 5\n3\n2 0\n3 0\n5 0\n''') == '''\n2\n2\n2\n'''", "solution('''7\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7\n3\n2 3\n2 4\n2 5''') == '''2\n1\n0'''\nassert solution('''2\n1 2\n1\n1 2''') == '''0'''\nassert solution('''3\n1 2\n1 3\n3\n1 1\n2 1\n3 1''') == '''2\n1\n0'''\nassert solution('''5\n1 2\n1 3\n2 4\n2 5\n4\n1 2\n1 1\n1 0\n1 100000\n1 -100000''') == '''3\n2\n1\n1'''\n\n# show solution\nsolution('''7\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7\n3\n2 3\n2 4\n2 5''')", "solution('''\n4\n1 2\n2 3\n3 4\n3\n2 4\n3 1\n2 3\n''') == '''\n3\n1\n0\n'''\n\nprint('solution 1:', solution('''\n4\n1 2\n2 3\n3 4\n3\n2 4\n3 1\n2 3\n'''))\n# solution 1:\n# 3\n# 1\n# 0\n\nprint('solution 2:', solution('''\n10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n5\n3 1\n3 2\n5 4\n1 0\n5 0\n'''))\n# solution 2:\n# 4\n# 3\n# 1\n# 0\n# 0\n\nprint('solution 3:', solution('''\n5\n1 2\n1 3\n1 4\n1 5\n2\n2 3\n2 2\n'''))\n# solution 3:\n# 2\n# 0\n\nprint('solution 4:', solution('''\n15\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n5 12\n6 13\n6 14\n6 15\n5\n1 1\n1 2\n1 3\n1 4\n1", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\n\n# print the solution\nprint(solution(stdin1))\nprint(solution(stdin2))\nprint(solution(stdin3))", "solution('''\n5\n1 2\n1 3\n2 4\n2 5\n2\n2 1\n5 1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n7\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7\n3\n1 1\n1 1\n1 1\n''') == '''\n5\n5\n5\n'''\n\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n3\n1 1\n2 1\n3 1\n''') == '''\n4\n4\n4\n'''\n\nassert solution('''\n10\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n3 9\n3 10\n5\n7 1\n9 1\n4 1\n8 1\n2 1\n''') == '''\n4\n4\n4\n4\n4\n'''\n\nassert solution('''\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n2\n2 1\n3 1\n''') == '''\n3\n3\n'''\n\nassert solution('''\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n1\n1 1\n''')", "solution(\"\"\"\n3\n1 2\n2 3\n2\n2 2\n3 2\n\"\"\") == \"\"\"\n0\n1\n\"\"\"\n\nassert solution(\"\"\"\n6\n1 2\n2 3\n3 4\n3 5\n3 6\n2\n2 3\n3 3\n\"\"\") == \"\"\"\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1\n9 1000000\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 2\n2 3\n2\n2 1\n3 1\n\"\"\") == \"\"\"\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n1\n5 5\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n1\n5 5\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# submit to codeforces\n\ndef to_stdin(input: str) -> str:\n    lines = input.split(\"\\n\")\n    header = lines[0]\n    body = \"\\n\".join(lines[1:])\n    return header", "solution(\"\"\"\n3\n1 2\n2 3\n2\n1 1\n2 2\n\"\"\") == \"\"\"\n1\n1\n\"\"\"\n\n# in-test set\nassert solution(\"\"\"\n6\n1 2\n2 3\n2 4\n4 5\n4 6\n4\n2 1\n4 1\n4 1\n5 1\n\"\"\") == \"\"\"\n0\n1\n1\n1\n\"\"\"\n\n# extreme cases\nassert solution(\"\"\"\n1\n1\n1\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2\n1 2\n1\n1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 2\n2 3\n1\n1 1\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2\n2 3\n3 4\n1\n2 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n5\n1 2\n2 3\n3 4\n3 5\n1\n3 1\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n1\n2 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n7\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n1\n", "solution('''\n6\n1 2\n1 3\n1 4\n3 5\n3 6\n3\n3 0\n1 1\n2 1\n''') == '''\n2\n2\n0\n'''\n\n# test speed\nimport timeit\nprint(timeit.timeit('solution(\\\"\\\"\\\"\\n6\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3\\n3 0\\n1 1\\n2 1\\n\\\"\\\"\\\")', setup='from __main__ import solution', number=10))", "solution('''\n3\n1 2\n2 3\n2\n2 2\n3 3\n''') == '''\n2\n0\n'''\n\nassert solution('''\n4\n1 2\n2 3\n3 4\n2\n2 1\n3 1\n''') == '''\n1\n1\n'''", "solution('''\n3\n1 2\n2 3\n2\n2 3\n1 1\n''') == '''\n3\n1\n'''\n\nassert solution('''\n4\n1 2\n2 3\n1 4\n2\n2 3\n1 1\n''') == '''\n1\n1\n'''", "solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert", "solution('''\n5\n1 2\n1 3\n2 4\n2 5\n5\n2 1\n4 1\n4 1\n4 1\n4 1\n''') == '''\n0\n0\n0\n0\n0\n'''\nassert solution('''\n5\n1 2\n1 3\n2 4\n2 5\n5\n2 1\n4 1\n4 1\n4 1\n4 1\n''') == '''\n0\n0\n0\n0\n0\n'''\nassert solution('''\n5\n1 2\n1 3\n2 4\n2 5\n5\n2 1\n4 1\n4 1\n4 1\n4 1\n''') == '''\n0\n0\n0\n0\n0\n'''\nassert solution('''\n5\n1 2\n1 3\n2 4\n2 5\n5\n2 1\n4 1\n4 1\n4 1\n4 1\n''') == '''\n0\n0\n0\n0\n0\n'''\nassert solution('''\n5\n1 2\n1 3\n2 4\n2 5\n5\n2 1\n4 1\n4 1\n4 1\n4 1\n''') == '''\n0\n0\n0\n0\n0\n'''\nassert solution('''\n5\n1 2\n1 3\n2 4\n2 5\n5", "solution('''\n5\n1 2\n1 3\n2 4\n2 5\n3\n3 1\n4 1\n5 1\n''') == '''\n2\n1\n1\n'''\n\n# print the answer\nf = open('input.txt', 'r')\nstdin = f.read()\nprint(solution(stdin))", "solution(stdin=\"\"\"\\\n1\n1 1\n\"\"\") == '0'\n\nassert solution(stdin=\"\"\"\\\n3\n1 2\n2 3\n2\n2 0\n2 1\n\"\"\") == '\\n'.join(['0', '1'])\n\nassert solution(stdin=\"\"\"\\\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n2\n2 0\n2 1\n\"\"\") == '\\n'.join(['0', '3'])", "solution('''\n5\n1 2\n1 3\n1 4\n1 5\n2\n1 1\n5 2\n''') == '''\n1\n2\n'''\n\n# print the result to console\nwith open('input.txt', 'r') as f:\n    print(solution(f.read()))", "solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 0\n7 0\n3 0\n''') == '''\n1\n0\n0\n'''\n\nassert solution('''\n6\n1 2\n1 3\n2 4\n2 5\n3 6\n4\n1 0\n2 0\n3 0\n6 0\n5 0\n''') == '''\n1\n0\n0\n0\n0\n'''\n\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3\n1 0\n7 0\n3 0\n''') == '''\n1\n0\n0\n'''\n\nassert solution('''\n9\n1 2\n1 3\n2 4\n2 5\n2 6\n3 7\n3 8\n3 9\n3\n3 5\n3 0\n3 0\n''') == '''\n3\n3\n3\n'''\n\n# print real input data\nimport fileinput\n\nwith fileinput.input() as f:\n    text = ''.join(f).strip('\\n')\n\nprint(solution(text))", "solution('''\n3\n1 2\n2 3\n2\n1 2\n2 3\n''') == '''\n1\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2\n2 3\n3 4\n4\n3 0\n3 0\n3 0\n3 0\n''') == '''\n3\n3\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5\n1 0\n1 0\n1 0\n1 0\n1 0\n''') == '''\n4\n4\n4\n4\n4\n'''\n\nprint('passed')", "solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution(''", "solution('''\n5\n1 2\n1 3\n2 4\n2 5\n5\n1 2\n2 1\n1 3\n2 3\n2 2\n''') == '''\n2\n-2\n1\n1\n1\n'''\n\n# test.txt\nwith open('test.txt', 'r') as f:\n    print(solution(f.read()))", "solution(\"\"\"4\n1 2\n2 3\n3 4\n3\n2 1\n3 1\n4 1\"\"\") == \"\"\"2\n2\n0\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n1 2\n1 3\n2 4\n3 5\n3 6\n5 7\n6\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\"\"\") == \"\"\"2\n2\n2\n2\n2\n2\"\"\"\n\nassert solution(\"\"\"7\n1 2\n1 3\n2 4\n3 5\n3 6\n5 7\n6\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\"\"\") == \"\"\"1\n1\n1\n1\n1\n1\"\"\"\n\nassert solution(\"\"\"1\n1\n1\n1 1\"\"\") == \"\"\"0\"\"\"\n\nassert solution(\"\"\"7\n1 2\n1 3\n2 4\n3 5\n3 6\n5 7\n1\n2 1\"\"\") == \"\"\"2\"\"\"\n\nassert solution(\"\"\"11\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n3 9\n3 10\n10 11\n3\n1 1\n1 1\n1 1\"\"\") == \"\"\"5\n5\n5\"\"\"\n\nassert solution(\"\"\"18\n1 2\n1 3\n1 4\n2 5\n2 6\n", "solution(\"\"\"\n3\n1 2\n2 3\n2\n1 1\n2 2\n\"\"\") == \"\"\"\n2\n0\n\"\"\"\n\n# check that solution can find the optimal vertex to delete\nassert solution(\"\"\"\n2\n1 2\n1\n2 100\n\"\"\") == \"\"\"\n-100\n\"\"\"\n\n# check that solution can find the optimal vertex to delete\nassert solution(\"\"\"\n4\n1 2\n2 3\n2 4\n2\n2 1\n2 3\n\"\"\") == \"\"\"\n2\n0\n\"\"\"\n\n# check that solution can find the optimal vertex to delete\nassert solution(\"\"\"\n10\n1 2\n1 3\n2 4\n2 5\n2 6\n5 7\n5 8\n5 9\n5 10\n1\n5 0\n\"\"\") == \"\"\"\n7\n\"\"\"\n\n# check that solution can find the optimal vertex to delete\nassert solution(\"\"\"\n4\n1 2\n1 3\n1 4\n1\n2 5\n\"\"\") == \"\"\"\n-5\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 2\n2 3\n1\n1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n1 2\n2 3\n1\n1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n", "solution('''\n5\n1 2\n1 3\n2 4\n3 5\n3\n2 3\n3 3\n5 2\n''') == '''\n1\n1\n-1\n'''\n\nassert solution('''\n5\n1 2\n1 3\n2 4\n3 5\n4\n1 4\n1 4\n1 4\n1 4\n1 4\n''') == '''\n3\n3\n3\n3\n3\n'''\n\n# read input\nstdin = ''\nwith open('input.txt', 'r') as f:\n    for line in f:\n        stdin += line\n\n# write output\nwith open('output.txt', 'w') as f:\n    f.write(solution(stdin))", "solution(stdin) == stdout\n\n# end of test\n'''\nclass Solution:\n    def processQueries(self, queries: List[int], m: int) -> List[int]:\n        def binarySearch(query):\n            left, right = 0, m-1\n            while left < right:\n                mid = (left + right) // 2\n                if P[mid] > query:\n                    right = mid\n                else:\n                    left = mid + 1\n            return right if P[right] > query else right + 1\n        \n        P = [i+1 for i in range(m)]\n        output = []\n        for query in queries:\n            output.append(binarySearch(query))\n            P.insert(output[-1], P.pop(binarySearch(query)))\n        \n        return output\n'''\n\n'''\nfrom math import floor,ceil\ndef solution(stdin):\n    n = int(stdin.readline())\n    adj = {i:[] for i in range(1,n+1)}\n    for i in range(n-1):\n        x,y = map(int,stdin.readline().split())\n        adj[x].append(y)\n        adj[y].append(x)\n    \n    def dfs(node", "solution('''5\n1 2\n1 3\n2 4\n2 5\n2\n2 2\n3 1''') == '''1\n0'''\n\n# test for performance\n\n# solution 2\n\n# solution 3", "solution('''\n6\n1 2\n1 3\n2 4\n3 5\n3 6\n4\n4 1\n4 2\n4 3\n4 4\n''') == '''\n1\n0\n0\n0\n'''\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 5\n3 6\n4\n4 1\n4 2\n4 3\n4 4\n''') == '''\n1\n0\n0\n0\n'''\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 5\n3 6\n4\n4 1\n4 2\n4 3\n4 4\n''') == '''\n1\n0\n0\n0\n'''\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 5\n3 6\n4\n4 1\n4 2\n4 3\n4 4\n''') == '''\n1\n0\n0\n0\n'''\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 5\n3 6\n4\n4 1\n4 2\n4 3\n4 4\n''') == '''\n1\n0\n0\n0\n'''\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 5\n3 6\n4\n4 1\n4 2\n", "solution(test_data) == test_result", "solution('''\n2\n1 2\n1\n2 1\n''') == '''\n0\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n3\n3 1\n5 1\n3 2\n''') == '''\n2\n-2\n1\n'''", "solution(\"\") == \"\", \"wrong output for example #1\"\nassert solution(\"\") == \"\", \"wrong output for example #2\"\nassert solution(\"\") == \"\", \"wrong output for example #3\"\nassert solution(\"\") == \"\", \"wrong output for example #4\"\nassert solution(\"\") == \"\", \"wrong output for example #5\"\nassert solution(\"\") == \"\", \"wrong output for example #6\"\nassert solution(\"\") == \"\", \"wrong output for example #7\"\nassert solution(\"\") == \"\", \"wrong output for example #8\"\nassert solution(\"\") == \"\", \"wrong output for example #9\"\nassert solution(\"\") == \"\", \"wrong output for example #10\"\nassert solution(\"\") == \"\", \"wrong output for example #11\"\nassert solution(\"\") == \"\", \"wrong output for example #12\"\nassert solution(\"\") == \"\", \"wrong output for example #13\"\nassert solution(\"\") == \"\", \"wrong output for example #14\"\nassert solution(\"\") == \"\", \"wrong output for example #15\"\nassert solution(\"\") == \"\", \"wrong output for example #16\"\nassert solution(\"\") == \"\", \"wrong output for example #17\"\nassert solution(\"\") == \"\", \"wrong output for example #18\"\nassert solution(\"\") == \"\", \"wrong output for example #", "solution(open(\"tests/test-0.in\").read()) == open(\"tests/test-0.out\").read()", "solution('''\n\n''') == '''\n\n'''", "(solution('''\n''') == '''\n''')", "'1 1' == solution('''\n3\n1 2\n2 3\n2\n2 2\n3 0\n''')\n\nassert '1 2' == solution('''\n4\n1 2\n2 3\n3 4\n3\n1 1\n2 2\n4 0\n''')\n\nassert '1 0' == solution('''\n4\n1 2\n2 3\n3 4\n3\n1 1\n1 1\n1 1\n''')\n\nassert '0 1' == solution('''\n4\n1 2\n2 3\n3 4\n4\n1 1\n2 2\n3 3\n4 4\n''')\n\nassert '0 0' == solution('''\n4\n1 2\n2 3\n3 4\n1\n1 1\n''')\n\nassert '0 0' == solution('''\n4\n1 2\n2 3\n3 4\n0\n''')\n\nassert '-1 -1' == solution('''\n3\n1 2\n2 3\n2\n1 1\n3 1\n''')\n\nassert '-1 -2' == solution('''\n4\n1 2\n2 3\n3 4\n2\n1 1\n4 1\n''')\n\nassert '-2 -2' == solution('''\n4\n1 2\n2 3\n3 4\n2\n2 1", "solution(\"\"\"\n7\n1 2\n1 3\n2 4\n2 5\n4 6\n4 7\n4\n4 0\n4 4\n4 5\n4 3\n\"\"\") == \"\"\"\n0\n-1\n-2\n-3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n7\n1 2\n1 3\n2 4\n2 5\n4 6\n4 7\n4\n2 0\n2 4\n2 5\n2 3\n\"\"\") == \"\"\"\n0\n-1\n-2\n-3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n1 2\n1 3\n1 4\n4\n2 0\n2 2\n2 4\n2 3\n\"\"\") == \"\"\"\n0\n-1\n-2\n-3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n1 2\n1 3\n3\n2 0\n2 3\n2 2\n\"\"\") == \"\"\"\n0\n-1\n-2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 2\n1 3\n2 4\n2 5\n3\n2 0\n2 2\n2 4\n\"\"\") == \"\"\"\n0\n-1\n-2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n1 2\n1 3\n2 4", "solution(r'''\n5\n1 2\n1 3\n1 4\n1 5\n2\n1 1\n5 2\n''') == '''\n0\n1\n'''\n\nif __name__ == '__main__':\n    with open('tests/tests.txt', 'r') as tests:\n        with open('tests/solution.txt', 'w') as solution:\n            for test in tests:\n                solution.write(solution(test))", "solution(r'''\n3\n1 2\n2 3\n2\n1 2\n3 1\n''') == '''\n0\n1\n'''\n\nassert solution(r'''\n4\n1 2\n2 3\n2 4\n2\n1 2\n4 1\n''') == '''\n0\n2\n'''\n\nassert solution(r'''\n3\n1 2\n2 3\n2\n1 1\n3 1\n''') == '''\n0\n0\n'''\n\n# test the performance of solution\nfrom random import randint\nfrom itertools import chain, zip_longest\n\ndef generate_input(n: int, q: int) -> str:\n    \"\"\" generates the input which consists of n vertices and q queries \"\"\"\n    return '{}\\n{}\\n{}'.format(\n        n,\n        '\\n'.join(map(lambda x: '{} {}'.format(x[0], x[1]), \n                      zip_longest(range(2, n + 1), range(1, n)))),\n        q,\n        '\\n'.join(map(lambda x: '{} {}'.format(randint(1, n), randint(0, 200000)), range(q)))\n    )\n\nimport time\nimport sys\nif __name__ ==", "solution('''5\n1 2\n1 3\n2 4\n2 5\n3\n3 1\n3 2\n5 4''') == '''2\n2\n2'''\n\n# check the correctness of solution\nassert solution('''5\n1 2\n1 3\n1 4\n1 5\n5\n5 1\n5 2\n5 3\n5 4\n5 5''') == '''1\n1\n1\n1\n0'''\n\n# check the correctness of solution\nassert solution('''5\n1 2\n1 3\n1 4\n1 5\n5\n5 1\n5 2\n5 3\n5 4\n5 5''') == '''1\n1\n1\n1\n0'''\n\n# check the correctness of solution\nassert solution('''5\n1 2\n1 3\n1 4\n1 5\n5\n5 1\n5 2\n5 3\n5 4\n5 5''') == '''1\n1\n1\n1\n0'''\n\n# check the correctness of solution\nassert solution('''5\n1 2\n1 3\n1 4\n1 5\n5\n5 1\n5 2\n5 3\n5 4\n5 5''') == '''1\n1\n1\n1\n0'''\n\n# check the correctness of solution\nassert solution('''5\n1 2\n1", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution('''\n5\n1 2\n1 3\n2 4\n2 5\n3\n3 0\n3 1\n3 2\n''') == '''\n0\n1\n2\n'''\n\nassert solution('''\n2\n1 2\n1\n1 0\n''') == '''\n0\n'''\n\nassert solution('''\n3\n1 2\n1 3\n3\n2 0\n2 1\n2 2\n''') == '''\n0\n1\n2\n'''\n\nassert solution('''\n5\n1 2\n1 3\n2 4\n2 5\n5\n5 1\n5 1\n5 1\n5 1\n5 1\n''') == '''\n0\n0\n0\n0\n0\n'''\n\nassert solution('''\n5\n1 2\n1 3\n2 4\n2 5\n5\n5 2\n5 1\n5 0\n5 0\n5 0\n''') == '''\n0\n1\n2\n2\n2\n'''\n\nassert solution('''\n5\n1 2\n1 3\n2 4\n2 5\n5\n3 0\n3 1\n3 2\n3 0\n3 1\n''') == '''\n0\n1\n2\n0\n1\n'''\n\n# submit\n\ndef solution(stdin):\n    stdin", "solution(\"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n2\n1 0\n2 0\n\"\"\") == \"\"\"\n0\n2\n\"\"\"", "solution(stdin) == '-1'\n# test the performance of solution\ntest_performance(solution)", "solution('''\n5\n1 2\n1 3\n2 4\n2 5\n3\n1 5\n3 1\n3 0\n''') == '''\n2\n2\n0\n'''\n\nprint(solution('''\n4\n1 2\n1 3\n2 4\n4\n1 0\n2 3\n2 1\n3 2\n'''))", "solution('''\n''') == '''\n'''", "solution('''\n2\n1 2\n2\n1 2\n2 1\n''') == '''\n0\n1\n'''\nassert solution('''\n5\n1 2\n1 3\n2 4\n3 5\n3\n1 1\n2 2\n5 3\n''') == '''\n0\n1\n3\n'''\nassert solution('''\n3\n1 2\n2 3\n2\n2 3\n3 2\n''') == '''\n0\n0\n'''\nassert solution('''\n7\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n4\n1 1\n1 2\n1 3\n1 4\n''') == '''\n0\n1\n2\n2\n'''\nassert solution('''\n9\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n3 8\n3 9\n4\n1 10\n1 10\n1 10\n1 10\n''') == '''\n-9\n-8\n-7\n-6\n'''\nassert solution('''\n4\n1 2\n1 3\n1 4\n3\n1 5\n3 5\n4 5\n''') == '''\n0\n1\n0\n'''\nassert solution('''\n2\n1 2\n2\n1 1\n2 1\n''')", "solution(get_input_file(__file__)) == \\\n    get_output_file(__file__).read()", "solution('''\n5\n1 3\n2 3\n3 4\n3 5\n2\n1 1\n3 1\n''') == '''\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2\n1 3\n2 4\n2\n2 3\n3 5\n''') == '''\n1\n0\n'''\n\n# put your code here\nimport sys\nfrom collections import deque\nfrom heapq import heappush, heappop\n\nfrom common import *\n\n# find the parent of a node and replace with the grand-parent node\ndef find_parent(node, parents):\n    if parents[node] == node:\n        return node\n    node2 = find_parent(parents[node], parents)\n    parents[node] = node2\n    return node2\n\n# return nodes having the given parent\ndef find_children(node, parents):\n    children = []\n    for i in range(1, len(parents)):\n        if find_parent(i, parents) == node:\n            children.append(i)\n    return children\n\n# update the parent count of each node\ndef update_count(children, parents, count):\n    for node in children:\n        while node > 0:\n            count[node] -= 1\n            node", "solution('''\n4\n1 2\n2 3\n3 4\n4\n2 2\n3 3\n4 4\n1 5\n''') == '''\n2\n1\n0\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 2\n2 3\n3 4\n4 5\n5 6\n3\n3 10\n4 10\n5 10\n''') == '''\n0\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 2\n2 3\n3 4\n4 5\n5 6\n5\n2 1\n2 2\n2 3\n2 4\n2 5\n''') == '''\n1\n0\n-1\n-2\n-3\n'''", "solution('''\n4\n1 2\n2 3\n3 4\n4\n1 5\n2 2\n3 10\n4 0\n''') == '''\n5\n-1\n-1\n0\n'''\n\n# stress testing\nwhile True:\n    pass", "solution(stdin) == stdout\n\n# unit tests\nimport unittest\n\nclass UnitTests(unittest.TestCase):\n    pass\n\n# run unit tests\nif __name__ == '__main__':\n    unittest.main()", "solution(input_data) == output_data\n\n# run the main function\n# main()", "solution(sample_stdin) == sample_stdout"], "finish_reason": ["stop", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-35.714589662984984, -85.534196680479, -123.77336417062597, -17.516030810660002, -97.80344455338395, -122.20662937018504, -102.84015944116501, -47.881822948775984, -27.292787703019997, -32.537943396919985, -16.44406817559998, -33.35009955023801, -37.41988224541, -49.58462057646001, -30.94148679167, -99.40152300822099, -50.02345648970701, -15.463976432089488, -54.71721780510001, -101.42234984021403, -126.51090442426006, -63.41303285306, -122.42306378460104, -42.87259357753001, -33.21664312260901, -10.0029162481, -37.373338265865996, -23.314811411079013, -17.054696225529998, -6.9520030436, -8.517020289900003, -94.82298208378798, -82.50505791516596, -43.75502897973999, -128.64893014089003, -53.28013586268498, -14.084671281060007, -84.96430096459844, -17.304225672900003, -29.773258895299996, -49.72871082832003, -5.681935415, -115.74499202512406, -18.763747276549996, -198.10759658546087, -60.57251256221403, -37.94105669159999, -27.084683539099995, -24.072740893, -9.185528581100002], "mean_logprob": [-0.3968287740331667, -0.42343661723009407, -0.41257788056875333, -0.24670465930507043, -0.3260114818446133, -0.40735543123395, -0.34280053147055, -0.36832171499058464, -0.3738738041509589, -0.4457252520126027, -0.054813560585333335, -0.11116699850079333, -0.467748528067625, -0.4311706137083478, -0.41812819988743244, -0.36952239036513385, -0.3087867684549815, -0.051546588106965004, -0.6217865659670454, -0.33807449946738, -0.42170301474753336, -0.3708364494330994, -0.4080768792820033, -0.8244729534140385, -0.11072214374203, -0.9093560225545454, -0.4449206936412619, -0.07771603803693, -0.6090962937689286, -0.434500190225, -0.56780135266, -0.31607660694596, -0.27501685971722, -0.41278329226169813, -0.4288297671363, -0.17760045287561665, -0.0469489042702, -0.28321433654866135, -0.46768177494324326, -1.145125342126923, -0.5991410943171085, -0.4058525296428571, -0.38581664008374666, -0.6470257681568966, -0.66035865528487, -0.3481178882885862, -0.6219845359278688, -0.4440112055590164, -1.0942154951363636, -0.7065791216230769]}
{"prompt": "'''\nYou are given a matrix, consisting of n rows and m columns. The j-th cell of the i-th row contains an integer a_{ij}.\n\nFirst, you have to color each row of the matrix either red or blue in such a way that at least one row is colored red and at least one row is colored blue.\n\nThen, you have to choose an integer k (1 \u2264 k < m) and cut the colored matrix in such a way that the first k columns become a separate matrix (the left matrix) and the last m-k columns become a separate matrix (the right matrix).\n\nThe coloring and the cut are called perfect if two properties hold: \n\n  * every red cell in the left matrix contains an integer greater than every blue cell in the left matrix; \n  * every blue cell in the right matrix contains an integer greater than every red cell in the right matrix. \n\n\n\nFind any perfect coloring and cut, or report that there are none.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains two integers n and m (2 \u2264 n, m \u2264 5 \u22c5 10^5; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the matrix, respectively.\n\nThe i-th of the next n lines contains m integers a_{i1}, a_{i2}, ..., a_{im} (1 \u2264 a_{ij} \u2264 10^6).\n\nThe sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase print an answer. If there are no perfect colorings and cuts in the matrix, then print \"NO\".\n\nOtherwise, first, print \"YES\". Then a string, consisting of n characters: the i-th character should be 'R' if the i-th row is colored red and 'B' if it's colored blue. The string should contain at least one 'R' and at least one 'B'. Finally, print an integer k (1 \u2264 k < m) \u2014 the number of columns from the left that are cut.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n''') == '''\nYES\nRRB\n2\n'''\nassert solution('''\n2\n2 3\n1 2 3\n4 5 6\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n''') == '''\nNO\nYES\nRBR\n2\n'''\nassert solution('''\n3\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n2 3\n1 2 3\n4 5 6\n''') == '''\nYES\nRBR\n2\nYES\nRBR\n2\nNO\n'''\nassert solution('''\n4\n4 5\n3 1 4 1 5\n5 2 3 4 2\n5 1 5 3 1\n5 5 2 1 4\n4 5\n1 1 2 5 3\n3 3 4 3 4\n2 3 1 2 4\n4 5 1 3 2\n4 5\n5 2 1 4 5\n1 2 5 1 3\n5 4 4 2 5\n1 4 2 1 2\n4 5\n1 1 1 1 2\n2 3 2 3 3\n3 4 3 4 4\n4 5 4 5 5\n''') == '''\nYES\n", "solution('''\n3\n3 5\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n3 5\n1 2 3 4 5\n5 4 3 2 1\n5 4 3 2 1\n5 1\n1\n1\n1\n1\n1\n''') == '''\nYES\nBRB\n2\nYES\nRRR\n1\nYES\nB\n1\n'''", "solution(\"\") == \"\"", "solution(test_data) == \"YES\\nBR\\n1\"\n\n# send solution to server\nsolution(stdin)", "solution('''\n2\n3 3\n1 2 3\n4 5 6\n7 8 9\n3 3\n1 1 1\n2 2 2\n3 3 3\n''') == '''\nYES\nRBR\n1\nYES\nRRR\n0\n'''\n\n# submit solution\nimport os\n# os.environ['TOKEN'] = 'b0d7efd6-8b8e-4eba-af9f-5d0d5cc4429c'\nimport requests\n\nif __name__ == '__main__':\n    task_name = 'ROWS'\n    with open(task_name + '.in', 'r') as input_file:\n        output = solution(input_file.read())\n    with open(task_name + '.out', 'w') as output_file:\n        output_file.write(output)\n    url = 'https://contest.yandex.ru/contest/9992/problems/{}/submit?tour=1'.format(task_name)\n    print(requests.post(url, data={'source': output}).content)", "solution('''\n5\n5 5\n0 1 2 3 4\n5 4 3 2 1\n1 2 3 4 5\n0 1 2 3 4\n5 4 3 2 1\n3 4\n1 2 3 4\n2 3 4 5\n3 4 5 6\n3 2\n1 2\n2 1\n1 2\n2 2\n2 1\n1 2\n2 2\n1 2\n1 1\n1\n2 2\n2 1\n2 1\n2 2\n1 2\n2 1\n2 2\n1 2\n1 1\n1\n''') == '''\nYES\nRRRRR\n3\nYES\nRBRB\n1\nYES\nRBRB\n2\nYES\nRRRRR\n3\nYES\nRRRRR\n3\n'''\n\n# test cases\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n", "solution('''\n1\n3 5\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n''') == '''\nYES\nRRB\n2\n'''\n\nassert solution('''\n1\n2 5\n1 2 3 4 5\n6 7 8 9 10\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n2 5\n1 1 1 1 1\n1 1 1 1 1\n''') == '''\nYES\nBR\n3\n'''", "solution('''\n3\n2 4\n1 3 1 3\n2 3 4 2\n3 3\n1 2 3\n4 5 6\n7 8 9\n4 4\n1 1 1 1\n2 2 2 2\n3 3 3 3\n4 4 4 4\n''') == '''\nYES RB 1\nYES RB 2\nNO\n'''\n\n# check that the solution is correct for random input\nimport random\nimport sys\ntry:\n    from test_toolbox import check_solution\nexcept ImportError:\n    from test_toolbox_13 import check_solution\n\ndef generate_test(t: int) -> str:\n    '''Returns an answer for a given test.'''\n    def generate_matrix(n: int, m: int) -> (str, int):\n        red_rows = list(range(n))\n        random.shuffle(red_rows)\n        red_rows = red_rows[: n // 2]\n        blue_rows = [r for r in range(n) if r not in red_rows]\n        random.shuffle(blue_rows)\n        blue_rows = blue_rows[: n // 2]\n        k = random.randint(1, m - 1)\n        ans = ''\n        for r in range(n):\n            if r in red_", "solution(\"\"\"\n\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\"\n\"\"\"", "solution('''\n3\n3 3\n3 1 2\n2 1 3\n1 3 2\n3 3\n1 2 3\n2 1 3\n3 2 1\n4 4\n1 2 3 4\n2 1 4 3\n3 4 1 2\n4 3 2 1\n''') == '''\nYES RB1\nYES RB1\nYES BB1\n'''\n\n# load the input file\nwith open('input.txt') as input_file:\n    stdin = input_file.read()\n\n# run the solution\nprint(solution(stdin))", "solution('''5\n2 3\n1 2 3\n4 5 6\n2 3\n1 2 3\n5 5 5\n3 2\n1 2\n3 4\n5 6\n3 2\n1 1\n2 2\n3 3\n2 2\n1 1\n2 2''') == '''YES\nBR\n2\nYES\nRR\n2\nYES\nRB\n1\nYES\nRB\n1\nNO'''\nprint('all passed')", "solution(\"\"\"5\n5 5\n1 2 3 4 5\n6 5 4 3 2\n1 2 3 4 5\n6 5 4 3 2\n1 2 3 4 5\n3 5\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8\n5 5\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8\n5 6 7 8 9\n2 4\n2 3 2 1\n2 2 2 2\n2 5\n1 2 3 4 5\n1 2 3 4 5\"\"\") == \"\"\"YES\nRRRRR\n1\nYES\nRRB\n2\nYES\nBRBRB\n2\nYES\nBRBR\n2\nNO\n\"\"\"\n\n# check time limit\nfrom random import randint\nstr_array = []\nstr_array.append(str(randint(1, 1000)))\nfor _ in range(1000):\n    str_array.append(str(randint(2, 500000)) + ' ' + str(randint(2, 500000)))\n    for _ in range(randint(2, 500000)):\n        str_array.append(' '.join([str(randint(1, 1000000)) for _ in range(randint(2, 500000))]))\n\ntest_set = '\\n'.join(str_array)\ns", "solution('''\n1\n2 3\n2 3 1\n1 2 3\n''') == '''\nYES RB 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n1 2 3\n2 3 1\n''') == '''\nYES RB 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n1 2 3\n3 2 1\n''') == '''\nYES BR 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n1 2 3\n3 1 2\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n3 1 2\n1 2 3\n''') == '''\nYES RB 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n3 1 2\n2 3 1\n''') == '''\nYES BR 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n3 2 1\n3 1 2\n''') == '''\nYES BR 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n3 2 1\n2 1 3\n''') == '", "solution(\"\"\"\n1\n3 4\n1 2 1 1\n2 1 2 1\n1 1 1 2\n\"\"\") == \"\"\"\nYES\nRBBR\n2\n\"\"\"\n\nassert solution(\"\"\"\n1\n3 4\n1 2 1 1\n2 1 2 1\n1 1 1 1\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# if everything is OK, use the following code to print the result\n# print(solution(sys.stdin.read()))\n\nimport sys\nprint(solution(sys.stdin.read()))", "solution(r'''\n4\n4 4\n1 2 3 4\n1 2 4 3\n1 3 4 2\n1 3 2 4\n3 3\n1 2 3\n2 3 1\n3 1 2\n2 3\n1 2\n2 1\n1 2\n1\n1\n''') == r'''\nYES RB 2\nYES BB 2\nYES RR 1\nNO\n'''", "solution('''\n2\n2 4\n1 2 3 4\n5 6 7 8\n2 3\n2 3 4\n3 4 5\n''') == '''\nYES\nBR\n2\nYES\nRR\n1\n'''\n\nprint('done')", "solution('''\n4\n2 3\n1 3 2\n2 3 1\n3 3\n3 2 1\n1 2 3\n2 1 3\n3 2\n1 2\n3 1\n2 1\n''') == '''\nYES RB 1\nYES RB 1\nYES RR 1\nNO\n'''", "solution(\"\"\"\n1\n4 4\n1 2 3 4\n5 6 7 8\n9 8 7 6\n5 4 3 2\n\"\"\") == \"\"\"\nYES\nRBBR\n2\n\"\"\"\n\nprint(solution(sys.stdin.read()))", "solution('''\n1\n5 6\n1 2 3 4 5 6\n7 6 5 4 3 2\n2 3 4 5 6 7\n6 5 4 3 2 1\n1 1 1 1 1 1\n''') == '''\nYES\nBRRRRR\n1\n'''\n\nassert solution('''\n1\n5 6\n1 2 3 4 5 6\n6 5 4 3 2 1\n2 3 4 5 6 7\n7 6 5 4 3 2\n1 1 1 1 1 1\n''') == '''\nYES\nRRRRRR\n1\n'''\n\nassert solution('''\n1\n5 6\n1 2 3 4 5 6\n6 5 4 3 2 1\n2 3 4 5 6 7\n7 6 5 4 3 2\n8 8 8 8 8 8\n''') == '''\nYES\nBRRRRR\n1\n'''\n\nassert solution('''\n1\n5 6\n1 2 3 4 5 6\n6 5 4 3 2 1\n2 3 4 5 6 7\n7 6 5 4 3 2\n8 8 8 8 8 8\n''') == '''\nYES\nBRRRRR\n1\n'''\n\nassert solution('''\n1\n5 6\n1 2 3 4 5 6\n6 5 4 3 2 1\n2 3 4 5 6 7\n7 6 5 4 3 2\n8 8 8 8 8 8", "solution('''\n''') == '''\n'''\n# check the performance of solution\nimport timeit\n\ndef test_perf(loops):\n    setup = f'''\nfrom __main__ import solution\nstdin = {stdin}\n'''\n    print(timeit.timeit(solution(stdin), setup=setup, number=loops))\n\n\nstdin = '''\n'''\ntest_perf(1000)", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution(\"\"\"3\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n4 4\n1 2 3 4\n4 3 2 1\n1 2 3 4\n4 3 2 1\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\"\"\") == '''YES\nRRB\n2\nYES\nBBB\n1\nNO'''\n\ndef test_performance():\n    import time\n    from random import randint\n    from io import StringIO\n    random_input = StringIO()\n    n, m = 100000, 10000\n    random_input.write(f'{n}\\n')\n    for i in range(n):\n        random_input.write(' '.join(map(str, [randint(1, 10**6) for i in range(m)])) + '\\n')\n    t = time.time()\n    solution(random_input.getvalue())\n    assert time.time() - t < 3\n\nif __name__ == '__main__':\n    while True:\n        try:\n            print(solution(input()))\n        except EOFError:\n            break", "solution(r'''\n''') == '''\n'''\n# --- run tests ---\n\n# --- collect tests in test suite ---\n\n# generate input with random numbers\n# run tests\n# compare outputs with expected outputs\n\n# --- run with profiler ---", "solution('''\n1\n2 3\n1 2 1\n2 1 2\n''') == '''\nYES\nRB 2\n'''\n\n# check performance of solution\nimport timeit\nassert timeit.timeit(lambda: solution('''\n1\n2 3\n1 2 1\n2 1 2\n'''), number=100) < 1", "solution(\n'''\n3\n2 3\n2 3 1\n5 7 4\n5 6\n8 4 1 9 2\n9 1 2 6 7\n7 1 6 1 2\n6 9 2 1 3\n2 5 3 9 2\n'''\n) == '''\nYES\nBR\n2\nYES\nBBBBBB\n4\nYES\nRRRRRR\n4\n'''\n# check the speed of solution\nimport timeit\nimport sys\nsys.setrecursionlimit(100000)\ndef tester(s: str) -> None:\n    def wrapper():\n        solution(s)\n    print(timeit.timeit(wrapper, number=1))\n\ntester(\n'''\n... paste the content of test file here ...\n'''\n)", "solution('''\n3\n3 4\n1 2 3 4\n2 3 4 5\n2 3 4 5\n2 2\n1 2\n3 4\n3 4\n3 2\n1 2\n3 4\n2 3\n''') == '''\nYES BR\nNO\nYES BR 2\n'''", "solution('''1\n2 2\n1 3\n2 4''') == '''YES\nBR\n1'''\n\nassert solution('''1\n4 5\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8''') == '''YES\nBBBBB\nRRRRR\nRRRRR\nRRRRR\n3'''\n\nassert solution('''1\n2 3\n1 2 3\n2 3 4''') == '''NO'''\n\nassert solution('''1\n3 5\n1 2 3 4 5\n3 4 5 6 7\n5 6 7 8 9''') == '''YES\nRRRRR\nBBBBB\nBBBBB\n2'''\n\nassert solution('''1\n3 4\n1 2 3 4\n2 3 4 5\n3 4 5 6''') == '''YES\nBBBB\nRRRR\nRRRR\n3'''\n\n# submit on codeforces\n# test 01\nprint('test 1: ', solution('''1\n2 2\n1 3\n2 4'''))\n\n# test 02\nprint('test 2: ', solution('''1\n4 5\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8'''))\n\n# test 03\n", "solution('''\n2\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n''') == '''\nYES BR 2\nYES RB 2\n'''\n\nprint('done')", "solution(\"\"\"2\n2 3\n4 5 6\n7 8 9\n4 5\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\"\"\") == \"\"\"YES\nRB\n2\nYES\nRBRBR\n2\"\"\"\n\n# # submit\n# print(solution(sys.stdin.read()))", "solution('''\n1\n4 5\n1 2 3 4 5\n5 4 3 2 1\n10 10 10 10 10\n1 10 100 1000 10000\n''') == '''\nYES\nRRRRR\n3\n'''\n\nassert solution('''\n1\n2 5\n1 2 3 4 5\n5 4 3 2 1\n''') == '''\nYES\nBRBRB\n1\n'''\n\nassert solution('''\n1\n2 5\n1 1 1 1 1\n2 2 2 2 2\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n3 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '''\nYES\nRBRB\n1\n'''\n\nassert solution('''\n1\n2 4\n1 2 3 4\n4 3 2 1\n''') == '''\nYES\nRBBR\n1\n'''\n\n# print the solution\nimport fileinput\n\nwith fileinput.input() as file:\n    solution(file.read())", "solution(\"\"\"\n1\n4 6\n1 2 3 4 5 6\n7 8 9 10 11 12\n13 14 15 16 17 18\n19 20 21 22 23 24\n\"\"\") == \"\"\"\nYES BR 3\n\"\"\"\n\nassert solution(\"\"\"\n1\n3 3\n1 2 3\n4 5 6\n7 8 9\n\"\"\") == \"\"\"\nYES BB 1\n\"\"\"\n\nassert solution(\"\"\"\n1\n5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n1\n3 5\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n\"\"\") == \"\"\"\nYES RB 2\n\"\"\"\n\nprint(\"Solved!\")", "solution('''\n1\n2 3\n1 2 3\n4 5 6\n''') == '''\nYES RB 1\n'''\n\ndef solution_sorting(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    num_test_cases = int(input_lines[0])\n    results = []\n    for case in range(num_test_cases):\n        num_rows, num_cols = map(int, input_lines[1 + (case * 2)].split())\n        matrix = []\n        for row in range(num_rows):\n            matrix.append(list(map(int, input_lines[2 + (case * 2) + row].split())))\n        sorted_matrix = sorted(matrix, key=lambda x: x[0])\n        left_rows = []\n        right_rows = []\n        for _ in range(int(num_rows / 2)):\n            left_rows.append(sorted_matrix.pop(0))\n        for _ in range(num_rows - int(num_rows / 2)):\n            right_rows.append(sorted_matrix.pop(0))\n        # TODO: finish algorithm\n        results.append('')\n    return '\\n'.join(results)\n", "solution('''3\n3 3\n1 2 3\n4 5 6\n7 8 9\n4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n2 2\n0 1\n2 3''') == '''YES\nRRB\n1\nYES\nBBBB\n4\nYES\nRB\n1'''", "solution('''\n1\n6 4\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n5 6 7 8\n6 7 8 9\n''') == '''\nYES\nRRRRRR\n2\n'''\n\n# check performance of solution\n\n# stdin = open('input.txt', 'r')\n# solution(stdin.read())", "solution(\"\"\"\n1\n2 3\n1 2 3\n2 3 4\n\"\"\") == \"\"\"\nYES\nBR\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 3\n1 2 3\n4 5 6\n7 8 9\n\"\"\") == \"\"\"\nYES\nBBR\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 3\n1 2 3\n4 5 6\n7 8 9\n\"\"\") == \"\"\"\nYES\nBBR\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 3\n1 2 3\n2 3 4\n3 4 5\n4 5 6\n5 6 7\n\"\"\") == \"\"\"\nYES\nBRBBB\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 4\n1 2 3 4\n2 3 4 5\n\"\"\") == \"\"\"\nYES\nRB\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 4\n1 2 3 4\n2 3 4 5\n\"\"\") == \"\"\"\nYES\nRB\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 4\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n5 6 7 8\n\"\"\") == \"\"\"", "(solution(SAMPLE_INPUT) == SAMPLE_OUTPUT)\n\n# run the solution\nif __name__ == '__main__':\n    with open(SAMPLE_INPUT_FILE_PATH, 'r') as f:\n        print(solution(f.read()))", "solution(\"\") == \"\"\n\n# display test results\nprint(\"-\" * 40)\nif solution(__doc__) == \"YES\\nRRRRRR 1\":\n    print(\"Test passed\")\nelse:\n    print(\"Test failed\")\nprint(\"-\" * 40)", "solution(\"\") == '', \"Case #1, Wrong Answer\"\n\n# get output and submit to checker\nsolution(stdin)", "solution('''3\n2 3\n2 3 3\n3 3\n1 2 3\n1 1 1\n3 5\n1 2 3 4 5\n5 4 3 2 1\n1 2 1 2 1''') == '''YES\nRR\n2\nYES\nBBB\n3\nYES\nRRRRR\n1'''", "solution(r'''\n3\n3 3\n1 2 3\n3 2 1\n2 1 3\n3 2\n1 2\n2 1\n2 3\n4 5\n1 1 1 1 1\n2 2 2 2 2\n3 3 3 3 3\n4 4 4 4 4\n3 4\n1 2 3 4\n5 4 3 2\n6 5 4 3\n''') == '''\nYES\nRRB\n2\nYES\nRB\n1\nYES\nBBB\n1\n'''.strip()", "solution('''\n2\n3 4\n3 2 3 5\n2 3 1 4\n1 4 2 2\n3 4\n3 2 1 5\n2 3 2 4\n1 4 3 2\n''') == '''\nYES\nBRR\n2\nYES\nBRR\n2\n'''\n\n# simulate the stdin\nimport io\nimport sys\nfrom unittest.mock import patch\n\nclass Stdin(io.StringIO):\n    def read(self, size=-1):\n        return super().read(size) or '\\n'\n\nuser_input = '''\n2\n3 4\n3 2 3 5\n2 3 1 4\n1 4 2 2\n3 4\n3 2 1 5\n2 3 2 4\n1 4 3 2\n'''\nwith patch('sys.stdin', Stdin(user_input)):\n    with patch('sys.stdout', new=io.StringIO()) as fake_out:\n        main()\n        assert fake_out.getvalue() == '''\nYES\nBRR\n2\nYES\nBRR\n2\n'''", "solution(stdin=example0) == output0, 'Example 0'\nassert solution(stdin=example1) == output1, 'Example 1'\nassert solution(stdin=example2) == output2, 'Example 2'\nassert solution(stdin=example3) == output3, 'Example 3'\nassert solution(stdin=example4) == output4, 'Example 4'\nassert solution(stdin=example5) == output5, 'Example 5'\nassert solution(stdin=example6) == output6, 'Example 6'\nassert solution(stdin=example7) == output7, 'Example 7'\nassert solution(stdin=example8) == output8, 'Example 8'\nassert solution(stdin=example9) == output9, 'Example 9'\nassert solution(stdin=example10) == output10, 'Example 10'\nassert solution(stdin=example11) == output11, 'Example 11'\nassert solution(stdin=example12) == output12, 'Example 12'\nassert solution(stdin=example13) == output13, 'Example 13'\nassert solution(stdin=example14) == output14, 'Example 14'\nassert solution(stdin=example15) == output15, 'Example 15'\nassert solution(stdin=example16) == output16,", "solution('''\n3\n3 3\n1 1 1\n2 2 2\n3 3 3\n3 3\n1 2 3\n1 2 3\n1 2 3\n2 2\n10 2\n10 1\n''') == '''\nYES RRR 2\nYES BBB 2\nNO\n'''", "solution(\"\"\"1\n3 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\"\"\") == \"\"\"YES\nBRB\n2\"\"\", \"testcase #1 failed\"\n\nassert solution(\"\"\"1\n3 3\n1 2 3\n3 2 1\n1 2 3\"\"\") == \"\"\"YES\nRBR\n1\"\"\", \"testcase #2 failed\"\n\nassert solution(\"\"\"1\n2 3\n1 1 1\n2 2 2\"\"\") == \"\"\"NO\"\"\", \"testcase #3 failed\"\n\nassert solution(\"\"\"1\n2 4\n1 1 1 1\n2 2 2 2\"\"\") == \"\"\"YES\nRB\n3\"\"\", \"testcase #4 failed\"\n\nassert solution(\"\"\"1\n2 2\n2 1\n1 2\"\"\") == \"\"\"YES\nRB\n1\"\"\", \"testcase #5 failed\"\n\nassert solution(\"\"\"1\n2 3\n2 1 2\n2 2 2\"\"\") == \"\"\"YES\nRB\n1\"\"\", \"testcase #6 failed\"\n\n# print(solution(\"\"\"1\n# 2 3\n# 2 1 2\n# 2 2 2\"\"\"))\n\nprint(\"All tests passed successfully\")", "solution(testcase1) == \"YES\\nRB\\n2\"\nassert solution(testcase2) == \"YES\\nBB\\n2\"\nassert solution(testcase3) == \"YES\\nBR\\n1\"\nassert solution(testcase4) == \"YES\\nBB\\n1\"\nassert solution(testcase5) == \"YES\\nBR\\n1\"\nassert solution(testcase6) == \"YES\\nRR\\n2\"\nassert solution(testcase7) == \"YES\\nRR\\n1\"\nassert solution(testcase8) == \"YES\\nBR\\n2\"\nassert solution(testcase9) == \"YES\\nRR\\n1\"\nassert solution(testcase10) == \"YES\\nBR\\n1\"\nassert solution(testcase11) == \"YES\\nRR\\n1\"\nassert solution(testcase12) == \"YES\\nBR\\n1\"\nassert solution(testcase13) == \"YES\\nBB\\n1\"\nassert solution(testcase14) == \"YES\\nBB\\n1\"\nassert solution(testcase15) == \"YES\\nRR\\n1\"\nassert solution(testcase16) == \"YES\\nRR\\n1\"\nassert solution(testcase17) == \"YES\\nBR", "solution('''2\n3 3\n1 2 1\n2 1 2\n1 2 1\n3 4\n1 1 1 1\n1 1 1 1\n1 1 1 1''') == '''YES\nRRB\n2\nYES\nBBB\n3'''\nassert solution('''1\n2 2\n1 1\n1 1''') == 'NO'\n\n# get the problem input\nproblem_input = '''7\n2 3\n1 2 1\n2 1 2\n4 2\n4 2\n2 1\n1 2\n2 4\n4 2\n2 4\n4 2\n4 2\n4 2\n4 2\n4 2\n4 2\n4 4\n3 3 3 3\n3 3 3 3\n3 3 3 3\n3 3 3 3\n2 3\n1 1 1\n1 1 1\n3 4\n1 2 3 4\n5 4 3 2\n1 5 4 3\n5 4\n1 5 4 3 2\n1 3 5 2 4\n2 3 1 4 5\n5 1 4 2 3\n5 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n3 3\n3 3 3\n3 3 3\n3 3 3\n5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n", "solution(\"\"\"\n4\n4 3\n1 3 5\n5 7 9\n5 5 5\n5 9 10\n5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n3 4\n2 3 3 3\n3 3 3 3\n3 3 3 3\n3 3\n3 2 1\n3 2 1\n3 2 1\n\"\"\") == \"\"\"\nYES BBR 1\nYES RRRB 1\nYES RRRB 1\nYES BRRR 2\n\"\"\"\n\nassert solution(\"\"\"\n4\n4 3\n1 3 5\n5 7 9\n5 5 5\n5 9 10\n5 5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n3 4\n2 3 3 3\n3 3 3 3\n3 3 3 3\n3 3\n3 2 1\n3 2 1\n3 2 1\n\"\"\") == \"\"\"\nYES BBR 1\nYES RRRB 1\nYES RRRB 1\nYES BRRR 2\n\"\"\"", "solution('''\n3\n3 4\n1 2 3 4\n5 6 7 8\n1 5 2 6\n3 4\n1 5 2 6\n1 2 3 4\n5 6 7 8\n2 3\n1 6\n2 7\n''') == '''\nYES RRBB\nYES BRRB\nNO\n'''\n\n# fast I/O\n\n# fast I/O\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.", "solution('''\n2\n4 3\n1 2 3\n4 1 2\n3 2 1\n2 3 4\n4 3\n4 2 1\n3 2 1\n2 1 4\n1 2 3\n''') == '''\nYES\nRBRB\n1\nYES\nRBRB\n2\n'''", "solution('''\n3\n3 4\n1 2 3 4\n1 1 2 2\n1 2 1 2\n3 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n3 4\n1 1 1 2\n2 1 1 1\n1 1 1 1\n''') == '''\nYES\nRRB\n1\nYES\nBBB\n1\nYES\nRRB\n2\n'''"], "finish_reason": ["length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "stop"], "sum_logprob": [-140.23220966617737, -37.54543001384, -5.596401984, -29.5332671589, -194.98030584439178, -103.36907454993901, -33.12067963827601, -170.392905753083, -14.420032054299998, -56.376050403309996, -50.68787470709999, -135.49749737512002, -48.23215045782032, -66.83777994257504, -49.35099994294, -33.99587099785999, -38.07842880844999, -22.45592178709, -60.480162592220076, -49.880285336909985, -11.639978343822001, -106.24552237065602, -76.36041725700001, -31.801311695800003, -157.90627075346995, -44.356627376499986, -100.454023352904, -27.818993473, -43.42439892643, -85.91494905434995, -53.37217296617997, -115.36683787358999, -31.789930270140008, -39.920372295799986, -62.473897066019994, -33.02716899371, -49.357828397069994, -43.949182605599994, -42.752609741400015, -50.5280224375, -91.59226726175709, -24.262569820087982, -34.2993840859, -90.24871193997998, -52.60206362578402, -157.8158779543699, -97.40175613970007, -71.51904225778257, -35.16621363885, -40.44577779468999], "mean_logprob": [-0.467440698887258, -0.4125871430092308, -0.932733664, -0.952686037383871, -0.74992425324766, -0.34456358183313, -0.2806837257481017, -0.5679763525102767, -0.4369706683121212, -0.4439059086874803, -0.5119987344151515, -0.45165832458373334, -0.160773834859401, -0.5478506552670082, -0.573848836545814, -0.5861357068596552, -0.5599768942419118, -0.38717106529465517, -0.20160054197406665, -0.4796181282395192, -0.03879992781274, -0.4039753702306312, -1.2942443602881355, -0.402548249313924, -0.9180597136829651, -0.6620392145746269, -0.33484674450968, -0.4214999011060606, -0.5639532328107792, -0.36098718090063026, -0.29651207203433333, -0.3845561262453, -0.40240418063468353, -0.45364059427045456, -0.2082463235534, -0.4856936616722059, -0.8091447278208197, -1.373411956425, -0.5937862464083333, -0.45520740934684684, -0.37081889579658706, -0.08087523273362666, -0.5119311057597015, -0.3498012090696899, -0.17534021208594666, -0.5260529265145667, -0.40248659561859507, -0.238396807525942, -0.502374480555, -0.44445909664494504]}
{"prompt": "'''\nIn Berland, n different types of banknotes are used. Banknotes of the i-th type have denomination 10^{a_i} burles (burles are the currency used in Berland); the denomination of banknotes of the first type is exactly 1.\n\nLet's denote f(s) as the minimum number of banknotes required to represent exactly s burles. For example, if the denominations of banknotes used in Berland are 1, 10 and 100, then f(59) = 14: 9 banknotes with denomination of 1 burle and 5 banknotes with denomination of 10 burles can be used to represent exactly 9 \u22c5 1 + 5 \u22c5 10 = 59 burles, and there's no way to do it with fewer banknotes.\n\nFor a given integer k, find the minimum positive number of burles s that cannot be represented with k or fewer banknotes (that is, f(s) > k).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n \u2264 9).\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum positive number of burles s that cannot be represented with k or fewer banknotes.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n2\n2 2\n1 2\n2 3\n0 1\n\"\"\") == \"\"\"\n15\n20\n\"\"\", \"Shall be 15\"\n\nassert solution(\"\"\"\n2\n2 3\n1 2\n2 3\n0 1\n\"\"\") == \"\"\"\n21\n24\n\"\"\", \"Shall be 21\"\n\nassert solution(\"\"\"\n3\n2 3\n1 2\n2 3\n0 1\n2 3\n1 2\n2 3\n0 1\n2 3\n1 2\n2 3\n0 1\n\"\"\") == \"\"\"\n21\n24\n21\n\"\"\", \"Shall be 21\"\n\nassert solution(\"\"\"\n4\n2 3\n1 2\n2 3\n0 1\n2 3\n1 2\n2 3\n0 1\n2 3\n1 2\n2 3\n0 1\n2 3\n1 2\n2 3\n0 1\n\"\"\") == \"\"\"\n21\n24\n21\n21\n\"\"\", \"Shall be 21\"\n\nassert solution(\"\"\"\n5\n2 3\n1 2\n2 3\n0 1\n2 3\n1 2\n2 3\n0 1\n2 3\n1 2\n2 3\n0 1\n2 3\n1 2\n2 3\n0 1\n2 3\n1 2\n2 3\n0 1\n\"\"\") == \"\"\"\n21\n24\n21\n21\n21\n\"\"", "solution('''\n3\n3 7\n1 3 5\n3 8\n1 3 5\n3 10\n1 3 5\n''') == '''\n108\n108\n11000\n'''", "solution('''\n5\n1 5\n0\n1 1\n0\n1 2\n0\n1 4\n0\n2 3\n0 1\n''') == '''\n1\n10\n100\n1000\n4\n'''", "solution('''2\n1 10\n0\n3 10\n0 0 1''') == '3'\nassert solution('''3\n1 1\n1\n3 5\n0 0 1\n3 8\n0 0 1''') == '2\n6\n7'\nassert solution('''2\n2 100\n0 1\n2 1000\n0 1''') == '10\n11'\nassert solution('''2\n2 10000\n0 1\n2 100000\n0 1''') == '100\n101'\nassert solution('''2\n2 1000000\n0 1\n2 10000000\n0 1''') == '1000\n1001'\nassert solution('''1\n2 9999999\n0 1''') == '99999'\nassert solution('''1\n2 100000000\n0 1''') == '9999999'\nassert solution('''1\n2 1000000000\n0 1''') == '99999999'\nassert solution('''1\n2 9999999999\n0 1''') == '999999999'\nassert solution('''1\n2 10000000000\n0 1''') == '9999999999'\nassert solution('''1\n2 100000000000\n0 1''') == '99999999999'\nassert solution('''1\n2 1000000000000\n0 1''') == '999999999999'\n", "solution('''\n1\n2 2\n0 1\n''') == '''\n20\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n0\n''') == '''\n11\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n0 1\n''') == '''\n100\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 6\n0 1 2\n''') == '''\n1000000\n'''\n\n# read tests\n# stdin = [ln.strip() for ln in open(\"tests/in.txt\", \"r\").readlines()]\n# stdin = [ln.strip() for ln in open(\"tests/in2.txt\", \"r\").readlines()]\n# stdin = [ln.strip() for ln in open(\"tests/in3.txt\", \"r\").readlines()]\n\n# stdin = '\\n'.join(stdin)\n# stdin = None # if you want to read from standard input\n\n# print(solution(stdin))", "solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"\n3\n3 5\n0 1 3\n3 5\n0 1 2\n3 10\n0 1 2\n\"\"\") == \"\"\"\n100\n101\n1000\n\"\"\", \"case 1 failed\"\n\nassert solution(\"\"\"\n3\n3 5\n0 1 3\n3 5\n0 1 2\n3 10\n0 1 2\n\"\"\") == \"\"\"\n100\n101\n1000\n\"\"\", \"case 2 failed\"", "solution(\"1\\n2 2\\n1 2\") == \"11\"\nassert solution(\"1\\n1 2\\n0\") == \"3\"\nassert solution(\"1\\n1 1\\n0\") == \"2\"\nassert solution(\"1\\n3 5\\n0 1 2\") == \"193\"\nassert solution(\"1\\n4 3\\n0 1 2 3\") == \"17\"\nassert solution(\"1\\n4 1\\n0 1 2 3\") == \"14\"\nassert solution(\"1\\n4 2\\n0 1 2 3\") == \"16\"\nassert solution(\"1\\n4 4\\n0 1 2 3\") == \"18\"\nassert solution(\"1\\n3 2\\n0 1 2\") == \"15\"\nassert solution(\"1\\n3 1\\n0 1 2\") == \"13\"\nassert solution(\"1\\n3 3\\n0 1 2\") == \"17\"\nassert solution(\"1\\n2 3\\n0 1\") == \"16\"\nassert solution(\"1\\n2 2\\n0 1\") == \"14\"\nassert solution(\"1\\n2 1\\n0 1\") == \"11\"\nassert solution(\"1\\n2 4\\n0 1\") == \"18\"\nassert solution(\"1\\n1 3\\n0\") == \"13\"\nassert solution(\"1", "(solution(\"\"\"\n\n\"\"\") == \"\")", "solution(\"\"\"3\n3 1\n0 2 3\n2 2\n1 2\n3 1\n0 2 3\"\"\") == \"\"\"3\n3\n4\"\"\"\n\n# get problem input\nproblems = sys.stdin.read()\n# call solution function\nprint(solution(problems))", "solution(example1) == correct1\nassert solution(example2) == correct2\nassert solution(example3) == correct3\nassert solution(example4) == correct4\nassert solution(example5) == correct5\nassert solution(example6) == correct6\nassert solution(example7) == correct7\nassert solution(example8) == correct8\nassert solution(example9) == correct9\nassert solution(example10) == correct10\nassert solution(example11) == correct11\nassert solution(example12) == correct12\nassert solution(example13) == correct13\nassert solution(example14) == correct14\nassert solution(example15) == correct15\nassert solution(example16) == correct16\nassert solution(example17) == correct17\nassert solution(example18) == correct18\nassert solution(example19) == correct19\nassert solution(example20) == correct20\nassert solution(example21) == correct21\nassert solution(example22) == correct22\nassert solution(example23) == correct23\nassert solution(example24) == correct24\nassert solution(example25) == correct25\nassert solution(example26) == correct26\nassert solution(example27) == correct27\nassert solution(example28) == correct28\nassert solution(example29) == correct29\nassert solution(example30) == correct30\nassert", "solution('''\n2\n3 8\n0 1 2\n1 1\n0\n''') == '46'\nassert solution('''\n3\n3 9\n0 1 2\n3 9\n0 1 2\n3 9\n0 1 2\n''') == '1'\nassert solution('''\n4\n1 6\n0\n1 7\n0\n1 8\n0\n1 9\n0\n''') == '1'\nassert solution('''\n1\n2 8\n0 1\n''') == '7'\nassert solution('''\n1\n3 4\n0 1 2\n''') == '4'\nassert solution('''\n1\n3 6\n0 1 2\n''') == '11'\nassert solution('''\n1\n3 10\n0 1 2\n''') == '46'\nassert solution('''\n1\n3 20\n0 1 2\n''') == '951'\nassert solution('''\n1\n3 30\n0 1 2\n''') == '18301'\nassert solution('''\n1\n3 40\n0 1 2\n''') == '342801'\nassert solution('''\n1\n3 50\n0 1 2\n''') == '6320701'\nassert solution('''\n1\n3 60\n0 1 2\n''') == '116920301", "solution(\"\"\"\n2\n2 3\n0 2\n3 2\n0 1 2\n\"\"\") == \"\"\"\n11\n12\n\"\"\"\nassert solution(\"\"\"\n1\n1 1\n0\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n1\n2 3\n0 3\n\"\"\") == \"\"\"\n10\n\"\"\"\nprint('All test cases passed!')\n\n# submit on hackerrank.com\n# https://www.hackerrank.com/challenges/summing-pieces/submissions/code/152866082", "solution(\"\"\"2\n3 15\n1 2 3\n3 9\n1 2 3\"\"\") == \"\"\"16\n8\"\"\"", "solution('''\n2\n3 10\n0 1 2\n3 7\n0 1 2\n''') == '''\n77\n16\n'''", "solution(r'''\n1\n3 7\n0 1 2\n''') == r'''\n1000000000\n'''\n\nassert solution(r'''\n2\n2 100\n0 1\n2 100\n2 3\n''') == r'''\n1\n1000\n'''\n\n# check the performance of solution\nassert solution(r'''\n5\n2 100\n1 1\n5 1000\n0 1 2 3 4\n1 1000000000\n9\n3 100\n0 1 2\n''') == r'''\n10\n10000\n1\n1000000000\n'''\n\nassert solution(r'''\n5\n2 100\n1 1\n5 1000\n0 1 2 3 4\n1 1000000000\n9\n3 100\n0 1 2\n''') == r'''\n10\n10000\n1\n1000000000\n'''\n\nassert solution(r'''\n2\n2 100\n0 1\n2 100\n2 3\n''') == r'''\n1\n1000\n'''\n\nassert solution(r'''\n1\n3 7\n0 1 2\n''') == r'''\n1000000000\n'''\n\nprint('done')", "solution('''\n1\n3 11\n1 2 3\n''') == '1000001'\nassert solution('''\n4\n4 10\n0 1 2 3\n4 9\n0 1 2 3\n3 10\n0 1 2\n3 11\n0 1 2\n''') == '''\n1000001\n11\n7\n100\n'''", "solution(\"\"\"\n5\n3 10\n1 2 3\n2 3\n0 1\n1 1\n1\n1 2\n0\n1 1\n0\n\"\"\") == \"\"\"\n3\n3\n2\n2\n\"\"\"", "solution(\"\"\"2\n2 3\n1 2\n2 2\n0 1\"\"\") == \"\"\"1\n10\"\"\"\n\ndef solution(stdin):\n    import math\n    t = int(stdin.readline())\n    for _ in range(t):\n        (n, k) = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        print(1+math.floor(k**(1/(a[-1]+1))))\n\nimport sys\nsolution(sys.stdin)", "solution(r'''\n3\n2 3\n1 1\n2 2\n0 1\n3 1\n0 1 2\n''') == r'''\n12\n21\n31\n'''", "(\n    solution('''\n4\n3 10\n0 1 3\n2 12\n0 3\n3 1\n0 1 3\n2 5\n0 2\n    ''') ==\n'''\n47\n13\n14\n13\n    '''\n)\n\n# read the input data\nwith open('input.txt') as file:\n    n, k = tuple(map(int, file.readline().split()))\n    a = tuple(map(int, file.readline().split()))\n\n# solve the problem\nprint(n, k, a)", "solution(example_input) == example_output\n \n# check solution against actual assignment\ninput_file = open('input1.txt', 'r')\noutput_file = open('output1.txt', 'r')\nassert solution(input_file.read()) == output_file.read()\n\ninput_file.close()\noutput_file.close()", "solution('''3\n3 10\n1 3 4\n2 20\n1 5\n1 1\n2''') == '''38\n24\n2'''", "solution('''\n2\n3 4\n0 1 2\n4 9\n0 1 2 4\n''') == '''\n15\n21\n'''\nassert solution('''\n3\n3 5\n0 1 2\n4 6\n0 1 2 4\n4 6\n0 1 2 3\n''') == '''\n12\n22\n30\n'''\nassert solution('''\n2\n2 3\n0 2\n2 3\n0 1\n''') == '''\n10\n2\n'''\n\n# stress testing\nfrom random import randint, sample\nwhile True:\n    n = randint(1, 10)\n    k = randint(1, 10**9)\n    a = list(range(n))\n    print(f'{n} {k}')\n    print(' '.join(map(str, a)))\n\n    output = solution(f'{n} {k}\\n' + ' '.join(map(str, a)))\n    if not output:\n        break", "solution('''\n1\n1 1\n0\n''') == '''\n2\n'''\n\n# test on codeforces.com\n# submit the code bellow\n\ndef solution(stdin):\n    ans = []\n    def f(n: int, k: int, d: list) -> int:\n        # if the k is small enough just calculate the answer\n        if k < n:\n            return (10 ** d[k] - 1) // 9\n        else:\n            # if not - try to get answer with less banknotes\n            new_k = k // 2\n            s = f(n, new_k, d)\n            # if it is possible to get s with new_k banknotes - try to get s + 1 with k banknotes\n            if f(n, new_k, d) == s:\n                s += 1\n            return s\n    for _ in range(int(stdin.readline())):\n        n, k = map(int, stdin.readline().split())\n        d = list(map(int, stdin.readline().split()))\n        ans.append(f(n, k, d))\n    return '\\n'.join(map(str, ans))\n\n# check the correctness of solution\nassert solution('''\n1\n", "solution('''\n1\n3 10\n0 1 3\n''') == '14'\n\n# stress testing\nfrom random import randint, seed\ndef solve(n: int, k: int, a: list) -> int:\n    return -1\n\nseed(42)\nfor _ in range(10**4):\n    n = randint(1, 10)\n    k = randint(1, 10**9)\n    a = sorted([randint(0, 9) for _ in range(n)])\n    assert solution(f'1\\n{n} {k}\\n{\" \".join(map(str, a))}\\n') == str(solve(n, k, a))", "solution(\"\"\"\n5\n3 8\n0 2 4\n3 12\n0 2 4\n3 20\n0 2 4\n2 1000000000\n0 9\n2 10\n0 2\n\"\"\") == \"\"\"\n28\n30\n38\n1000000000\n3\n\"\"\", \"Wrong answer. Try again\"\nprint(\"Ok\")", "solution('''\n1\n3 1\n1 2 3\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3\n3 1\n1 2 3\n3 4\n1 2 3\n1 10\n9\n''') == '''\n4\n10\n1\n'''", "solution(\"\"\"1\n3 17\n0 1 2\n\"\"\") == \"\"\"100\"\"\"\nassert solution(\"\"\"2\n2 25\n0 1\n2 20\n1 2\n\"\"\") == \"\"\"8\n100\"\"\"", "solution(\"\"\"1\n3 7\n0 1 2\n\"\"\") == \"9\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n2 3\n0 4\n\"\"\") == \"5\"\n\nassert solution(\"\"\"1\n2 3\n0 3\n\"\"\") == \"7\"\n\nassert solution(\"\"\"1\n2 3\n0 2\n\"\"\") == \"4\"\n\nassert solution(\"\"\"1\n2 3\n0 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"1\n2 3\n0 0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"1\n3 7\n0 1 2\n\"\"\") == \"9\"\n\nassert solution(\"\"\"1\n3 4\n0 1 2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"1\n3 5\n0 1 2\n\"\"\") == \"5\"\n\nassert solution(\"\"\"1\n3 6\n0 1 2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"1\n3 8\n0 1 2\n\"\"\") == \"11\"\n\nassert solution(\"\"\"1\n3 9\n0 1 2\n\"\"\") == \"19\"\n\nassert solution(\"\"\"1\n3 9\n0 1 3\n\"\"\") == \"13\"\n\nassert solution(\"\"\"1\n3 9\n0 2 3\n\"\"\") == \"17\"\n\nassert solution(\"\"\"1", "solution('''\n1\n2 2\n0 1\n''') == '11'\nassert solution('''\n2\n2 4\n0 1\n4 20\n0 1 2 3\n''') == '12'\nassert solution('''\n3\n3 9\n0 1 2\n2 7\n0 1\n2 4\n0 1\n''') == '16'", "solution('''\n1\n3 7\n1 2 3\n''') == '11'\nassert solution('''\n2\n4 5\n0 1 2 3\n4 5\n0 1 2 3\n''') == '36'\nassert solution('''\n2\n3 5\n1 2 3\n3 5\n1 2 3\n''') == '10'\nassert solution('''\n1\n3 5\n1 2 3\n''') == '11'\nassert solution('''\n3\n3 4\n1 2 3\n3 4\n1 2 3\n3 4\n1 2 3\n''') == '9'\nassert solution('''\n1\n1 4\n1\n''') == '6'\nassert solution('''\n2\n2 3\n0 1\n2 3\n0 1\n''') == '5'\nassert solution('''\n2\n2 3\n0 1\n2 3\n0 1\n''') == '5'\nassert solution('''\n2\n2 4\n0 1\n2 4\n0 1\n''') == '8'\nassert solution('''\n2\n2 3\n0 1\n2 3\n0 1\n''') == '5'\nassert solution('''\n1\n2 5\n0 1\n''') == '8'\nassert solution('''\n1\n2 2\n0", "solution(\"\"\"2\n2 2\n0 1\n2 3\n0 1\"\"\") == \"\"\"\n8\n15\n\"\"\", \"Sample Test\"", "solution('''\n2\n2 3\n0 1\n2 2\n0 1\n''') == '''\n4\n11\n'''\nassert solution('''\n1\n1 1\n0\n''') == '''\n1\n'''\nassert solution('''\n1\n3 3\n0 1 2\n''') == '''\n37\n'''\nassert solution('''\n1\n5 6\n0 1 2 3 4\n''') == '''\n775957\n'''\nassert solution('''\n2\n1 3\n0\n3 5\n0 1 2\n''') == '''\n4\n37\n'''\nassert solution('''\n1\n4 9\n0 1 2 3\n''') == '''\n7959\n'''\nassert solution('''\n1\n2 5\n0 1\n''') == '''\n27\n'''\nassert solution('''\n1\n5 5\n0 1 2 3 4\n''') == '''\n77759\n'''\nassert solution('''\n1\n3 1\n0 1 2\n''') == '''\n19\n'''\nassert solution('''\n1\n4 1\n0 1 2 3\n''') == '''\n23\n'''\nassert solution('''\n1\n2 3\n0 1\n''') == '''\n", "solution('''\n3\n3 4\n0 1 2\n4 4\n0 1 2 4\n4 5\n0 1 2 4\n''') == '''\n59\n100\n110\n'''", "solution('''\n4\n4 2\n0 1 2 3\n4 2\n0 1 2 2\n4 2\n0 1 2 1\n4 2\n0 1 1 1\n''') == '''\n55\n5\n5\n11\n'''", "solution(\n    '''\n    2\n    3 3\n    0 1 2\n    2 2\n    2 7\n    '''\n) == '''\n3\n3\n'''", "solution('''5\n1 5\n2\n2 3\n2 3\n2 4\n2 3\n2 8\n2 3\n2 9\n2 3\n2 4\n2 3\n2 5\n2 3\n2 6\n2 3\n2 7\n2 3\n2 5\n2 3\n2 8\n2 3\n2 9\n2 3\n2 9\n2 3\n2 5\n2 3\n2 6\n2 3\n2 7\n2 3\n2 9\n2 3\n2 5\n2 3\n2 6\n2 3\n2 7\n2 3\n2 9\n2 3\n2 5\n2 3\n2 6\n2 3\n2 7\n2 3\n2 9\n2 3\n2 5\n2 3\n2 6\n2 3\n2 7\n2 3\n2 9\n2 3\n2 5\n2 3\n2 6\n2 3\n2 7\n2 3\n2 9\n2 3\n2 5\n2 3\n2 6\n2 3\n2 7\n2 3\n2 9\n2 3\n2 5\n2 3\n2 6\n2 3\n2 7\n2 3\n2 9\n2 3\n2 5\n2 3\n2 6\n2 3\n2 7\n2 3\n2 9\n2 3\n2 5\n2 3\n2 6\n2 3\n2 7\n2 3\n2 9\n2 3\n2", "solution('''\ninput\n''') == '''\noutput\n'''", "solution(\"\"\"0\n\"\"\") == \"0\", \"0\"\nassert solution(\"\"\"1\n\"\"\") == \"1\", \"1\"\nassert solution(\"\"\"2\n\"\"\") == \"2\", \"2\"\nassert solution(\"\"\"3\n\"\"\") == \"3\", \"3\"\nassert solution(\"\"\"4\n\"\"\") == \"4\", \"4\"\nassert solution(\"\"\"5\n\"\"\") == \"5\", \"5\"\nassert solution(\"\"\"6\n\"\"\") == \"6\", \"6\"\nassert solution(\"\"\"7\n\"\"\") == \"7\", \"7\"\nassert solution(\"\"\"8\n\"\"\") == \"8\", \"8\"\nassert solution(\"\"\"9\n\"\"\") == \"9\", \"9\"\nassert solution(\"\"\"10\n\"\"\") == \"10\", \"10\"\nassert solution(\"\"\"11\n\"\"\") == \"11\", \"11\"\nassert solution(\"\"\"12\n\"\"\") == \"12\", \"12\"\nassert solution(\"\"\"13\n\"\"\") == \"13\", \"13\"\nassert solution(\"\"\"14\n\"\"\") == \"14\", \"14\"\nassert solution(\"\"\"15\n\"\"\") == \"15\", \"15\"\nassert solution(\"\"\"16\n\"\"\") == \"16\", \"16\"\nassert solution(\"\"\"17\n\"\"\") == \"17\", \"17\"\nassert solution(\"\"\"18\n\"\"\") == \"18\", \"", "solution('''3\n3 8\n1 2 3\n3 7\n1 2 3\n2 9\n2 3''') == '''128\n119\n59049'''", "solution('''\n3\n3 6\n0 1 2\n3 7\n0 1 2\n3 8\n0 1 2\n''') == '''\n11\n21\n101\n'''", "solution('''\n2\n2 1\n0 1\n2 5\n1 2\n''') == '3\\n15'\nassert solution('''\n1\n3 5\n0 1 2\n''') == '6'\nassert solution('''\n3\n3 10\n1 2 4\n1 8\n0\n3 7\n0 1 2\n''') == '50\\n1\\n6'\n\n# simulate for offline testing\nTEST_CASES = [\n    ('2\\n2 1\\n0 1\\n2 5\\n1 2', '3\\n15'),\n    ('1\\n3 5\\n0 1 2', '6'),\n    ('3\\n3 10\\n1 2 4\\n1 8\\n0\\n3 7\\n0 1 2', '50\\n1\\n6'),\n]\n\nfor t in TEST_CASES:\n    assert solution(t[0]) == t[1]\n    print('correct:', t[0])\n\n# post on Codeforces\n# https://codeforces.com/contest/1326/problem/C", "solution(\"\"\"1\n3 2\n0 1 2\n\"\"\") == \"11\"\nassert solution(\"\"\"3\n3 2\n0 1 2\n3 2\n0 1 1\n1 1\n1\n\"\"\") == \"\"\"11\n10\n2\n\"\"\"", "solution('''\n3\n3 8\n0 1 2\n3 9\n0 1 2\n3 11\n0 1 2\n''') == '''\n3\n4\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 10\n0 1 2\n''') == '''\n6\n'''\n\ndef solution(stdin):\n    test_cases = stdin.split('\\n')[1:]\n    output = ''\n    for i in range(0, len(test_cases), 3):\n        input = test_cases[i:i+3]\n        denominations = [10**int(i) for i in input[2].split()]\n        denominations.reverse()\n        max_value = sum(denominations)\n        target = int(input[1])\n        if target >= max_value:\n            output += f'{max_value+1}\\n'\n            continue\n        for value in range(1, max_value+1):\n            if f(value, denominations) > target:\n                output += f'{value}\\n'\n                break\n    return output\n\ndef f(target, denominations):\n    dp = [0] + [float('inf')] * target\n    for i in range(1, target+1):\n        for", "solution(\"\"\"\n2\n1 10\n0\n2 10\n0 1\n\"\"\") == \"\"\"\n11\n11\n\"\"\"", "solution(r'''\n1\n1 1\n1\n''') == r'''\n2\n'''\n\nassert solution(r'''\n1\n1 2\n1\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n2 2\n1 1\n''') == r'''\n3\n'''\n\nassert solution(r'''\n1\n3 2\n1 2 2\n''') == r'''\n8\n'''\n\nassert solution(r'''\n1\n3 3\n1 2 2\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n3 5\n1 2 2\n''') == r'''\n27\n'''\n\nassert solution(r'''\n1\n1 9\n8\n''') == r'''\n1000000000\n'''\n\nassert solution(r'''\n1\n2 9\n0 1\n''') == r'''\n1\n'''\n\nassert solution(r'''\n1\n2 9\n0 2\n''') == r'''\n500000000\n'''\n\nassert solution(r'''\n1\n3 5\n0 2 2\n''') == r'''\n1600\n'''\n\nassert solution(r'''\n1\n2 8\n2 3\n''')", "solution(\"\"\"\n1\n3 9\n0 1 2\n\"\"\") == \"\"\"\n99\n\"\"\"\n\n# run the solution\nprint(solution(open(\"test\", \"r\").read()))", "solution(\"\"\"\n3\n3 5\n0 1 3\n3 5\n0 1 4\n3 5\n0 2 3\n\"\"\") == \"\"\"\n11\n22\n49\n\"\"\"", "solution('''\n6\n1 5\n0\n1 1\n0\n2 3\n1 3\n2 5\n0 1\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2 5\n0 2\n2 10\n1 3\n2"], "finish_reason": ["length", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length"], "sum_logprob": [-68.31412388087199, -35.16035030209999, -33.67017215684, -110.145010985059, -117.87461621742108, -7.3141802933, -42.1442367983, -92.18198606152494, -10.852064492399997, -58.75033860817001, -20.495064439830013, -125.62349472287208, -91.39833875892899, -24.046185880000007, -23.761659383599998, -107.44662484457395, -57.25232518239998, -44.598772191200005, -72.99322242813005, -34.75404360580001, -93.13273282045006, -44.09336120582, -39.8598215456, -112.105784898197, -186.55863318076413, -56.165537910389965, -74.48195559938999, -40.45778057483999, -43.94894037323, -80.02025439406297, -53.850583228595, -104.90563011860506, -32.6148983095, -131.57806767570605, -33.125452165, -41.44942512680001, -29.537870277510002, -71.11032732756001, -8.989311326499998, -24.395335058748007, -43.461788173, -22.3764520343, -142.45667617088907, -33.36699279570001, -126.24117771600315, -16.984191886200005, -102.0256109999161, -35.74601302114999, -30.56517323589999, -51.34562570078998], "mean_logprob": [-0.22771374626957333, -0.7990988705022727, -0.6475033107084616, -0.36715003661686335, -0.4551143483298108, -0.45713626833125, -0.448342944662766, -0.30727328687175, -0.9043387077, -0.8901566455783333, -0.0683168814661, -0.41874498240957336, -0.7553581715613967, -0.890599477037037, -0.6988723348117647, -0.4116728921248046, -0.7340041690051282, -0.910179024310204, -0.5529789577888636, -0.8082335722279069, -0.7219591691507752, -0.5377239171441464, -1.1072172651555556, -0.49385808325196917, -0.6218621106025467, -0.34885427273534164, -1.0203007616354796, -0.5698278954202817, -0.9554117472441305, -0.2667341813135433, -0.6488022075734338, -0.3496854337286833, -1.019215572171875, -0.43859355891902, -0.7361211592222222, -0.7401683058357142, -0.6869272157560465, -0.2370344244252, -0.4994061848055556, -0.08131778352916, -1.114404824948718, -0.5203826054488372, -0.5543061329606576, -0.5958391570660714, -0.42080392572001, -0.60657828165, -0.34008536999972, -0.8124093868443182, -0.7641293308975, -0.1711520856693]}
{"prompt": "'''\nBerland State University has received a new update for the operating system. Initially it is installed only on the 1-st computer.\n\nUpdate files should be copied to all n computers. The computers are not connected to the internet, so the only way to transfer update files from one computer to another is to copy them using a patch cable (a cable connecting two computers directly). Only one patch cable can be connected to a computer at a time. Thus, from any computer where the update files are installed, they can be copied to some other computer in exactly one hour.\n\nYour task is to find the minimum number of hours required to copy the update files to all n computers if there are only k patch cables in Berland State University.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nEach test case consists of a single line that contains two integers n and k (1 \u2264 k \u2264 n \u2264 10^{18}) \u2014 the number of computers and the number of patch cables.\n\nOutput\n\nFor each test case print one integer \u2014 the minimum number of hours required to copy the update files to all n computers.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\n\n# write the actual solution", "solution(\"1\\n3 1\") == \"3\"\nassert solution(\"4\\n10000000000 1\") == \"10000000000\"\nassert solution(\"2\\n10 7\") == \"12\"\nassert solution(\"2\\n10 3\") == \"11\"\n\nsolution(\"\"\"\n50\n182385390163215048 109834894992146315\n837114404053205060 902157875106835891\n133821788248015095 371769475823681815\n850494794143015987 741208132235109536\n916444479544679567 892877751657055486\n564777919359561627 804566006425702714\n794840193359326370 620048709492625108\n334783877342705187 469785849262376257\n934989832443292070 425750692452353412\n172216494538995737 262330586467802864\n291782033875675674 955772329876045086\n764843586144979186 219479632291741823\n169536692906171607 5462713576688100", "solution(\"3\\n3 1\\n3 2\\n3 3\") == \"2\\n1\\n0\"\nassert solution(\"2\\n1000000000 2\\n1000000000 3\") == \"0\\n1\"\nassert solution(\"1\\n1000000000 1000000000\") == \"0\"\n\n'''\n2\nInput\n3 1\n3 2\n3 3\nOutput\n2\n1\n0\nInput\n1000000000 2\n1000000000 3\nOutput\n0\n1\nInput\n1000000000 1000000000\nOutput\n0\nNote\nIn the first test case, we can connect the first computer to the second and then in one hour we can connect the second computer to the third. Then the update files can be copied from the first computer to the second and from the second computer to the third. So, in two hours, the update files will be copied to all computers.\n\nIn the second test case, we can connect the first computer to the second and from the second computer copy the update files to the third computer in one hour.\n\nIn the third test case, the update files are initially installed on the first computer, so in zero hours they can be copied to all computers.\n'''", "solution(\"2\\n2 1\\n3 2\") == \"1\\n3\"\nassert solution(\"3\\n10 1\\n10 2\\n10 4\") == \"10\\n7\\n5\"\nprint(\"OK\")", "solution(stdin='''\n2\n2 1\n2 2\n''') == '''\n1\n2\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n6\n5 2\n5 5\n5 10\n5 6\n5 100\n5 1\n''') == '''\n2\n1\n5\n2\n5\n5\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n2 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n5 5\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n2 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n3 1\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n100 100\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n3 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution(stdin=''", "solution('''3\n3 1\n3 2\n3 3''') == '''3\n2\n1'''", "solution('''\n1\n1 1\n''') == '''\n0\n'''\n\nassert solution('''\n3\n3 2\n3 1\n3 0\n''') == '''\n1\n2\n3\n'''\n\nassert solution('''\n1\n1000000000000000 1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1000000000000000 5\n''') == '''\n199999999999999\n'''\n\nassert solution('''\n2\n5 3\n1000000000000000 5\n''') == '''\n2\n199999999999999\n'''\n\nassert solution('''\n1\n1000000000000000 1000000000000000\n''') == '''\n0\n'''", "solution(\"1\\n4 1\") == \"3\"\nassert solution(\"1\\n10 2\") == \"2\"\nassert solution(\"1\\n7 7\") == \"0\"\nassert solution(\"1\\n10 10\") == \"1\"\nassert solution(\"1\\n3 1\") == \"2\"\nassert solution(\"1\\n3 2\") == \"1\"\nassert solution(\"1\\n3 3\") == \"0\"\n\nimport io\nimport os\nimport sys\nimport time\nimport builtins\n\n\n# main function, runs the test if this file is run\nif __name__ == \"__main__\":\n    global start\n    start = time.time()\n    if sys.version_info.major < 3:\n        global read\n        read = raw_input\n\n    if os.getenv(\"LOCAL\"):\n        try:\n            if sys.stdin.read():\n                sys.stdin = io.StringIO(sys.stdin.read())\n            print(solution(sys.stdin.read()))\n        except IsADirectoryError:\n            print(\"Run this script on files, not directories\")\n    else:\n        for f in sys.argv[1:]:\n            print(solution(open(f).read()))\n            try:\n                for i in range(10):", "(solution(\"\"\"1\n4 2\"\"\") == \"\"\"2\"\"\")\nassert (solution(\"\"\"2\n4 1\n5 3\"\"\") == \"\"\"4\n5\"\"\")", "solution('''\n1\n4 1\n''') == '''\n1\n'''\n\nassert solution('''\n1\n4 2\n''') == '''\n0\n'''\n\nassert solution('''\n1\n6 3\n''') == '''\n2\n'''\n\nassert solution('''\n1\n1000 200\n''') == '''\n3\n'''\n\nassert solution('''\n1\n1000000000000000 2000000000000000\n''') == '''\n0\n'''\n\n#TODO: generate test cases\n\nimport unittest\nimport random\nfrom random import seed\nimport string\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution('''\n1\n2 1\n'''), '''\n1\n''')\n\n    def test_2(self):\n        self.assertEqual(solution('''\n1\n3 2\n'''), '''\n0\n''')\n\n    def test_3(self):\n        self.assertEqual(solution('''\n1\n4 2\n'''), '''\n0\n''')\n\n    def test_4(self):\n        self.assertEqual(solution('''\n1\n4 3\n'''), '''\n", "solution(sample_in) == sample_out\n\n# launch the solution\nassert solution(stdin) == stdout\nprint(\"OK\")", "solution('''\n3\n3 1\n3 2\n3 4\n''') == '''\n4\n2\n1\n'''", "solution('''\n3\n10 1\n10 2\n10 3\n''') == '''\n9\n6\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 1\n1 2\n2 1\n2 2\n2 3\n2 4\n''') == '''\n0\n0\n1\n1\n1\n1\n'''", "solution(\"\"\"\n1\n2 1\n\"\"\") == \"2\", \"test #1 failed\"\nassert solution(\"\"\"\n4\n4 2\n3 2\n1 1\n10 5\n\"\"\") == \"\"\"\n3\n3\n1\n4\n\"\"\", \"test #2 failed\"\nassert solution(\"\"\"\n1\n100000000000000 100000000000000\n\"\"\") == \"1\", \"test #3 failed\"\n\ndef solve(n: int, k: int) -> int:\n    min_steps = 1\n    while k < n:\n        min_steps += 1\n        k *= 2\n    return min_steps\n\n# submit solution\nprint(solve(*map(int, input().split())))", "solution('''\n3\n3 1\n3 3\n3 4\n''') == '''\n3\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1000000000 1000000000\n''') == '''\n499999999\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1000000001 1000000000\n''') == '''\n500000000\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1000000001 10000000000\n''') == '''\n0\n'''\n\n# read data for t test cases\nt = int(input())\ndata = [input() for _ in range(t)]\n\n# submit data to the problem\nr = requests.post('https://codeforces.com/problemset/problem/1226/A', data={'submittedProblemCode': '1226A', 'input': '\\n'.join(data)})\n\n# check if data has been submited successfully\nassert r.status_code == 200, 'Bad Request'\n\n# check if the judge has accepted the solution\nassert 'accepted' in r.text, 'Wrong answer'", "solution('''\n5\n5 1\n5 2\n5 3\n5 4\n5 5\n''') == '''\n5\n4\n3\n2\n1\n'''", "solution(\"\"\"2\n2 1\n3 2\"\"\") == \"\"\"1\n2\"\"\"", "solution(get_test_input(1)) == get_test_output(1)\nassert solution(get_test_input(2)) == get_test_output(2)\nassert solution(get_test_input(3)) == get_test_output(3)\nassert solution(get_test_input(4)) == get_test_output(4)\nassert solution(get_test_input(5)) == get_test_output(5)\n\ndef get_test_input(test_number: int) -> str:\n    if test_number == 1:\n        return \"1\\n2 1\"\n    elif test_number == 2:\n        return \"1\\n3 2\"\n    elif test_number == 3:\n        return \"1\\n3 3\"\n    elif test_number == 4:\n        return \"1\\n4 1\"\n    elif test_number == 5:\n        return \"1\\n8 4\"\n\ndef get_test_output(test_number: int) -> str:\n    if test_number == 1:\n        return \"1\"\n    elif test_number == 2:\n        return \"2\"\n    elif test_number == 3:\n        return \"1\"\n    elif test_number == 4:\n        return \"3", "solution(\"1\\n3 2\") == \"1\"\nassert solution(\"1\\n5 2\") == \"2\"\nassert solution(\"2\\n5 3\\n5 2\") == \"2\\n2\"\n\n# check the performance of solution\nassert solution(\"10\\n1000000000000000000 100000000000000000\\n1000000000000000000 50000000000000000\\n1000000000000000000 1000000000000000\\n1000000000000000000 1000000000000\\n1000000000000000000 100000000000\\n1000000000000000000 10000000000\\n1000000000000000000 1000000000\\n1000000000000000000 100000000\\n1000000000000000000 10000000\\n1000000000000000000 1000000\") == \"1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\"", "solution('''\n3\n3 1\n3 2\n9 1\n''') == '''\n3\n1\n8\n'''", "solution('''\n2\n2 1\n1000000000000000 1000000000000000\n''') == '''\n1\n8999999999999997\n'''", "solution(r'''\n3\n3 2\n3 1\n3 3\n''') == r'''\n1\n2\n0\n'''\n\nassert solution(r'''\n1\n1000000000 1\n''') == r'''\n999999999\n'''\n\nassert solution(r'''\n2\n1 1\n2 1\n''') == r'''\n0\n1\n'''", "solution('''1\n3 1''') == '2'\nassert solution('''4\n3 2''') == '3'\nassert solution('''3\n3 1''') == '2'\nassert solution('''5\n5 5''') == '1'\nassert solution('''5\n5 3''') == '2'\nassert solution('''5\n5 4''') == '2'\nassert solution('''6\n6 3''') == '3'\nassert solution('''7\n7 3''') == '4'\nassert solution('''7\n7 4''') == '3'\nassert solution('''7\n7 5''') == '3'\nassert solution('''7\n7 6''') == '2'\nassert solution('''8\n8 3''') == '5'\nassert solution('''8\n8 4''') == '4'\nassert solution('''8\n8 5''') == '3'\nassert solution('''8\n8 6''') == '3'\nassert solution('''8\n8 7''') == '2'\nassert solution('''9\n9 3''') == '6'\nassert solution('''9\n9 4''') == '5'\nassert solution('''9\n9 5''') == '", "solution('''\n1\n2 1\n''') == '''\n2\n'''\n\nassert solution('''\n2\n2 1\n3 2\n''') == '''\n2\n3\n'''", "solution('''\n5\n5 2\n10 3\n5 1\n10 4\n10 1\n''') == '''\n4\n6\n5\n6\n10\n'''", "solution('''\n1\n3 1\n''') == '''\n2\n'''\n\nassert solution('''\n1\n3 3\n''') == '''\n1\n'''\n\nassert solution('''\n1\n10 1\n''') == '''\n9\n'''\n\nassert solution('''\n1\n100000 100\n''') == '''\n100\n'''\n\nassert solution('''\n1\n1234657890 1234567890\n''') == '''\n233\n'''\n\n# get output as string\n# print(solution(sys.stdin.read()))\n\n# get output as list of lines\n# print(solution(sys.stdin.read()).splitlines())\n\n# read from file\n# print(solution(open('input.txt').read()))", "solution(\"1\\n3 1\") == \"3\"\nassert solution(\"2\\n2 1\\n3 2\") == \"2\\n2\"", "solution('''\n2\n2 1\n3 2\n''') == '''\n1\n1\n'''\n\nassert solution('''\n3\n3 1\n3 2\n100 50\n''') == '''\n2\n1\n2\n'''", "solution('''\n3\n3 2\n5 3\n500 2\n''') == '''\n2\n2\n250\n'''", "solution(\"\"\"\n2\n2 1\n3 1\n\"\"\") == \"\"\"\n1\n2\n\"\"\"", "solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Empty input\"", "solution('''\n2\n2 1\n2 2\n''') == '''\n2\n1\n'''\n\n# get the input and run the solution against it\n_, stdin = input(), io.StringIO(stdin_)\nstdout, stderr = sys.stdout, sys.stderr\nresult = solution(stdin)\nsys.stdout, sys.stderr = stdout, stderr\nsys.stdout.write(result)", "solution(\"\"\"\n2\n2 1\n3 2\n\"\"\") == \"\"\"\n2\n1\n\"\"\"", "solution(\"\") == \"\", \"Input: \"\n\n# check the correctness of speed\nfrom datetime import datetime\nstart_time = datetime.now()\nassert solution(\"\") == \"\", \"Input: \"\nprint(\"Time: \", datetime.now() - start_time)", "solution('''\n2\n2 1\n3 2\n''') == '''\n1\n2\n'''\n\n# get input\nT = int(input())\ninputs = [input() for _ in range(T)]\n\n# print output\nfor i, v in enumerate(inputs):\n    ans = solution(v)\n    print('Case #%d: %s' % (i + 1, ans))", "solution(\"\"\"1\n3 1\"\"\") == \"3\"\nassert solution(\"\"\"1\n3 2\"\"\") == \"2\"\nassert solution(\"\"\"1\n3 3\"\"\") == \"1\"\nassert solution(\"\"\"3\n2 3\n1 3\n1 4\"\"\") == \"\"\"2\n3\n1\"\"\"", "solution('''\n4\n4 1\n4 2\n10 1\n10 2\n''') == '''\n6\n4\n6\n4\n'''", "solution(\"\"\"\n1\n10 10\n\"\"\") == \"\"\"\n8\n\"\"\"\n\nassert solution(\"\"\"\n1\n10 1\n\"\"\") == \"\"\"\n10\n\"\"\"\n\nassert solution(\"\"\"\n1\n1000 1\n\"\"\") == \"\"\"\n1000\n\"\"\"\n\nassert solution(\"\"\"\n1\n1000000000000 10\n\"\"\") == \"\"\"\n833333333333\n\"\"\"\n\n# get the input from stdin\nfrom fileinput import input\n\n_, *stdin = input()\n\n# print solution to stdout\nprint(solution(stdin))", "solution('''1\n4 2''') == '3'\nassert solution('''4\n4 1\n4 2\n4 3\n4 4''') == '''4\n3\n2\n1'''", "solution('''\n1\n4 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n4 3\n2 2\n''') == '''\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 1\n''') == '''\n9\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 2\n2 1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1000000000 1\n''') == '''\n999999999\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1000000000 9\n''') == '''\n1000000000\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1000000000 18\n''') == '''\n1000000000\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1000000000 19\n''') == '''\n999999999\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1000000000 20\n''') == '''\n999999998\n'''\n\n# check the correctness of solution\nassert", "solution('''1\n3 2''') == '2'\n\n# check the correctness of solution\nassert solution('''2\n3 2\n4 4''') == '2\\n3'\n\n# check the correctness of solution\nassert solution('''1\n10 5''') == '4'\n\n# check the correctness of solution\nassert solution('''1\n1000000000 100''') == '999999990'\n\n# check the correctness of solution\nassert solution('''1\n999000111 90000000''') == '1000'", "solution('''\n2\n4 2\n8 5\n''') == '''\n3\n4\n'''", "solution('''\n1\n5 2\n''') == '''\n3\n'''\n\nassert solution('''\n1\n1 1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n4 2\n''') == '''\n4\n'''\n\nassert solution('''\n1\n4 4\n''') == '''\n2\n'''\n\n# run the solution on given test cases\ntest_cases = open('test.in', 'r')\ntest_case_count = int(test_cases.readline())\nfor test_case_number in range(1, test_case_count + 1):\n    solution_input = test_cases.readline()\n    print('Case #%s: %s' % (test_case_number, solution(solution_input)))\ntest_cases.close()", "solution('''\n5\n1 1\n2 1\n2 2\n2 3\n2 4\n''') == '''\n0\n1\n1\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 5\n5 4\n5 3\n5 2\n5 1\n''') == '''\n2\n2\n2\n2\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n10 5\n10 4\n10 3\n10 2\n10 1\n''') == '''\n3\n3\n3\n3\n9\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n100 1\n100 2\n100 3\n100 4\n100 5\n''') == '''\n99\n49\n33\n24\n19\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n100 100\n100 99\n100 98\n100 97\n100 96\n''') == '''\n0\n1\n2\n3\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1000 1\n1000 2\n1000 3\n1000 4\n1000 5\n''') == '''\n999\n499\n333\n249\n199\n'''\n\n# check the correctness of solution\nassert", "solution(\"\") == \"\", \"1st example\";\nassert solution(\"\") == \"\", \"2nd example\";\nassert solution(\"\") == \"\", \"3rd example\";\nassert solution(\"\") == \"\", \"4th example\";\nassert solution(\"\") == \"\", \"5th example\";\nassert solution(\"\") == \"\", \"6th example\";\n\n# submit to online judge\nfrom python_contest.util import submit_solution\nfrom python_contest.template import *\nsubmit_solution(solution, \"1.txt\", \"2.txt\")", "solution(\"\"\"1\n3 1\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"2\n3 2\n3 3\"\"\") == \"\"\"1\n0\"\"\"\nassert solution(\"\"\"3\n3 1\n3 2\n3 3\"\"\") == \"\"\"1\n1\n0\"\"\"", "solution('''\n4\n4 1\n4 3\n4 5\n4 6\n''') == '''\n3\n2\n1\n0\n'''", "solution(\"\"\"\n2\n2 1\n1 3\n\"\"\") == \"\"\"\n1\n0\n\"\"\"", "solution(test_data) == output\n\ntest_data = '''\n'''\n\nprint(solution(test_data))", "solution('''\n2\n4 1\n4 2\n''') == '''\n4\n3\n'''"], "finish_reason": ["stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-26.310536285, -1132.5451379856756, -130.51426955786008, -35.18737997587, -80.20702103395806, -12.4394723327, -59.75767171003098, -205.93119762777, -22.73834658206, -105.47299869281144, -31.067364182000006, -16.9267126794, -34.65448905248999, -87.46477362528996, -115.07438921689295, -15.186801319610003, -10.202053743999999, -51.650831340363, -61.65933016800402, -19.508255461939996, -24.7811579074, -35.10071063457, -58.86232076872798, -17.175509023613998, -32.165781988739994, -96.68880803733897, -15.436489803199997, -26.587170167389992, -25.00574429770001, -11.1783061722, -14.688436269400002, -43.609155256307005, -12.0856612264, -37.15021026535, -31.787681895760002, -35.12614372244001, -24.458453261539994, -73.59590080329002, -21.193151093740006, -70.60274844408404, -71.66550297918002, -15.656839131100003, -77.413274914511, -61.10251186440096, -74.76306662859999, -23.70473646572, -21.609920117900003, -16.662742237600003, -24.791368754729994, -13.158762347000003], "mean_logprob": [-0.8770178761666667, -3.775150459952253, -0.49437223317371215, -0.6639128297333963, -0.26735673677986, -0.4607211975074074, -0.3578303695211437, -0.6864373254259, -0.5830345277451282, -0.3515766623093717, -0.9708551306875001, -0.5460229896580645, -0.4029591750289535, -0.550092915882327, -0.41845232442506547, -0.3704097882831707, -0.5369501970526316, -0.17216943780121, -0.3692175459161916, -0.6292985632883871, -0.7288575855117647, -0.38152946341923916, -0.19620773589576, -0.35052059231865307, -0.7845312680180487, -0.5035875418611406, -0.4540144059764706, -0.4506300028371186, -0.8066369128290323, -0.4860133118347826, -0.6386276638869565, -0.40008399317712845, -0.5254635315826087, -0.5804720353960937, -0.32770806078103093, -0.509074546702029, -0.6794014794872222, -0.58876720642632, -0.44152398111958335, -0.23534249481361333, -0.57332402383344, -0.6021861204269231, -0.39296078636807613, -0.20367503954800334, -0.5933576716555555, -0.4017751943342373, -0.6002755588305556, -0.7244670538086957, -0.7997215727332259, -0.5061062441153846]}
{"prompt": "'''\nYou are given an array of integers a of length n. The elements of the array can be either different or the same. \n\nEach element of the array is colored either blue or red. There are no unpainted elements in the array. One of the two operations described below can be applied to an array in a single step:\n\n  * either you can select any blue element and decrease its value by 1; \n  * or you can select any red element and increase its value by 1. \n\n\n\nSituations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable.\n\nDetermine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n?\n\nIn other words, check whether there exists a sequence of steps (possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n (inclusive), each exactly once.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of input data sets in the test.\n\nThe description of each set of input data consists of three lines. The first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the original array a. The second line contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the array elements themselves.\n\nThe third line has length n and consists exclusively of the letters 'B' and/or 'R': ith character is 'B' if a_i is colored blue, and is 'R' if colored red.\n\nIt is guaranteed that the sum of n over all input sets does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise.\n\nYou can print the answer in any case (for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n5\n1 2 3 4 5\nB B B B B\n''') == 'YES'\n\nassert solution('''\n1\n5\n1 2 3 4 5\nR R R R R\n''') == 'YES'\n\nassert solution('''\n1\n5\n2 3 4 5 6\nB B B B B\n''') == 'NO'\n\nassert solution('''\n1\n5\n2 3 4 5 6\nR R R R R\n''') == 'NO'\n\nassert solution('''\n1\n5\n2 2 2 2 2\nB B B B B\n''') == 'YES'\n\nassert solution('''\n1\n5\n2 2 2 2 2\nR R R R R\n''') == 'YES'\n\nassert solution('''\n1\n5\n1 2 3 4 5\nB R B R B\n''') == 'YES'\n\nassert solution('''\n1\n5\n1 2 3 4 5\nR B R B R\n''') == 'YES'\n\nassert solution('''\n1\n5\n-2 2 -2 2 -2\nB R B R B\n''') == 'YES'\n\nassert solution('''\n1\n5\n-2 2 -2 2 -2\nR B R B R\n''') ==", "solution('''\n4\n4\n4 4 4 4\nBRRR\n4\n4 4 4 4\nRRRR\n4\n4 5 6 7\nBBBB\n4\n4 5 6 7\nRRRR\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution('''\n3\n6\n1 2 1 4 2 3\nBRBRBR\n5\n5 5 5 5 5\nRRRRR\n5\n5 3 3 3 3\nBBRRR\n''') == '''\nYES\nNO\nYES\n'''", "solution('''\n1\n5\n5 4 1 2 3\nRRRRB\n''') == 'YES'\n\nassert solution('''\n1\n5\n5 4 1 2 3\nBRRBR\n''') == 'NO'\n\nassert solution('''\n2\n3\n1 1 2\nBBB\n3\n2 2 2\nRRR\n''') == '''\nYES\nNO\n'''\n\n# stress testing\n# generated from solution('', check_evaluation=True)\nmax_n = 200000\nmax_value = 1000000000\nimport random\nimport string\n\ndef generate_random_set(n: int, max_n: int = max_n, max_value: int = max_value) -> str:\n    a = [str(random.randint(-max_value, max_value)) for _ in range(n)]\n    colors = ''.join(random.choices(string.ascii_uppercase, k=n))\n    return '\\n'.join([str(n), ' '.join(a), colors])\n\nfor _ in range(100):\n    print('==')\n    stdin = ''\n    t = random.randint(1, 1000)\n    print(t)\n    stdin += str(t) + '\\n'\n    for", "solution(\"\"\"\n2\n2\n2 3\nRB\n4\n1 3 3 1\nBRRR\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\nassert solution(\"\"\"\n3\n3\n0 1 2\nRBB\n3\n1 1 2\nRBB\n3\n0 0 2\nRBB\n\"\"\") == \"\"\"\nYES\nNO\nYES\n\"\"\"\nassert solution(\"\"\"\n2\n2\n2 2\nRR\n2\n2 2\nBB\n\"\"\") == \"\"\"\nYES\nYES\n\"\"\"\nassert solution(\"\"\"\n1\n4\n0 1 2 3\nRRRR\n\"\"\") == \"\"\"\nYES\n\"\"\"\nassert solution(\"\"\"\n1\n4\n0 1 2 3\nRRRB\n\"\"\") == \"\"\"\nNO\n\"\"\"\nassert solution(\"\"\"\n1\n1\n1\nR\n\"\"\") == \"\"\"\nYES\n\"\"\"\nassert solution(\"\"\"\n1\n1\n1\nB\n\"\"\") == \"\"\"\nYES\n\"\"\"\nassert solution(\"\"\"\n1\n2\n2 2\nBB\n\"\"\") == \"\"\"\nYES\n\"\"\"\nassert solution(\"\"\"\n1\n2\n2 2\nBR\n\"\"\") == \"\"\"\nNO\n\"\"\"\nassert solution(\"\"\"\n1\n1\n0\nR\n\"\"\") == \"\"\"\nNO\n\"\"\"\nassert solution(\"\"\"\n1\n1\n0\nB\n\"\"\") == \"\"\"\nNO\n\"\"\"\nassert", "solution(EXAMPLE_INPUT) == EXAMPLE_OUTPUT\n\n# check the speed of solution\nTEST_CASES = [\n    ('''1\n3\n1 2 3\nRRB''', '''YES'''),\n    ('''2\n1\n1\nR\n1\n1\nB''', '''YES\nNO'''),\n    ('''2\n2\n2 2\nRR\n2\n2 1\nRB''', '''NO\nYES'''),\n    ('''2\n3\n-1 1 1\nRRB\n3\n1 1 1\nRRB''', '''YES\nNO'''),\n    ('''2\n3\n0 0 0\nRRR\n3\n-1 1 1\nRRB''', '''NO\nYES'''),\n    ('''1\n5\n1 2 3 4 5\nRRRRR''', '''YES'''),\n    ('''1\n5\n1 2 3 4 5\nRRRBB''', '''YES'''),\n    ('''1\n5\n1 2 3 4 5\nBRRRB''', '''YES'''),\n    ('''1\n5\n1 2 3 4 5\nRRRRB''', '''NO'''),\n    ('''1\n5\n1 2 3 4 5\nBRRRR''',", "solution('''\n1\n5\n1 2 3 4 5\nBBBBR\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 3 4\nRRRR\n''') == 'NO'\n\nassert solution('''\n1\n4\n1 2 3 4\nBBBB\n''') == 'NO'\n\nassert solution('''\n1\n3\n1 2 3\nRRR\n''') == 'YES'\n\nassert solution('''\n1\n1\n1\nB\n''') == 'YES'\n\nassert solution('''\n1\n1\n1\nR\n''') == 'YES'\n\nassert solution('''\n1\n6\n5 4 3 2 1 6\nRRRRRR\n''') == 'YES'\n\nassert solution('''\n1\n2\n2 3\nRR\n''') == 'NO'\n\nassert solution('''\n1\n5\n1 2 4 5 6\nRRRRR\n''') == 'NO'\n\nassert solution('''\n1\n4\n4 3 1 2\nRRRR\n''') == 'NO'\n\nassert solution('''\n1\n4\n4 3 1 2\nRRRB\n''') == 'YES'\n\nassert solution('''\n1\n4\n4 3 1 2\nRBRB\n''", "solution('''\n1\n3\n1 1 1\nRRR\n''') == 'NO'\n\nassert solution('''\n1\n3\n1 1 1\nRRB\n''') == 'YES'\n\nassert solution('''\n1\n3\n1 1 1\nBRB\n''') == 'YES'\n\nassert solution('''\n1\n3\n1 1 1\nBRR\n''') == 'YES'\n\nassert solution('''\n1\n3\n1 1 1\nBRB\n''') == 'YES'\n\nassert solution('''\n1\n3\n1 1 1\nRBR\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 1 1\nRRBB\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 1 1\nRBBR\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 1 1\nRBRB\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 1 1\nRBBB\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 1 1\nBRBR\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 1 1\nBRRB\n''", "solution('''1\n4\n1 2 2 1\nBRBR\n''') == 'NO'\nassert solution('''1\n4\n1 2 2 1\nBRBR\n''') == 'NO'\nassert solution('''1\n4\n2 3 3 2\nRRRR\n''') == 'YES'\nassert solution('''1\n4\n2 3 3 2\nRRRR\n''') == 'YES'\nassert solution('''1\n4\n3 3 3 3\nRRRR\n''') == 'YES'\nassert solution('''1\n4\n3 3 3 3\nRRRR\n''') == 'YES'\nassert solution('''1\n4\n1 1 1 1\nRRRR\n''') == 'YES'\nassert solution('''1\n4\n1 1 1 1\nRRRR\n''') == 'YES'\nassert solution('''1\n4\n2 3 4 5\nRRRR\n''') == 'YES'\nassert solution('''1\n4\n2 3 4 5\nRRRR\n''') == 'YES'\nassert solution('''1\n4\n5 5 5 5\nRRRR\n''') == 'YES'\nassert solution('''1\n4\n5 5 5 5\nRRRR\n''') == 'YES'\nassert solution('''1\n4\n1 1 1 2", "solution('''\n1\n6\n1 2 3 4 5 6\nRRBBBR\n''') == 'YES'\n\nassert solution('''\n2\n6\n1 2 3 4 5 6\nRRBBBR\n6\n1 2 3 4 5 6\nBRRRBB\n''') == 'YES\\nNO'", "solution(r'''\n2\n6\n6 4 1 8 3 1\nBBRRBB\n6\n2 3 5 1 2 4\nRBRRBR\n''') == r'''\nYES\nNO\n'''", "solution(\"\"\"\n1\n5\n1 1 1 2 3\nRRRRB\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n3 2 1\nRRR\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\nassert solution(\"\"\"\n3\n3\n3 2 1\nRRR\n4\n4 3 2 1\nRRRR\n5\n5 3 2 1 4\nRRRRB\n\"\"\") == \"\"\"\nNO\nYES\nYES\n\"\"\"\n\nimport random\n\ndef test_generator():\n    tests = int(random.random() * 10 ** 4) + 1\n    print(tests)\n    for test in range(tests):\n        n = int(random.random() * 10 ** 4) + 1\n        print(n)\n        for i in range(n):\n            v = int(random.random() * 10 ** 9)\n            print(v, end=' ')\n        print()\n        for i in range(n):\n            v = 'B' if random.random() > 0.5 else 'R'\n            print(v, end='')\n        print()\n\n#test_generator()", "solution(\"1\\n3\\n3 2 1\\nRRB\") == \"YES\"\nassert solution(\"1\\n3\\n3 2 1\\nRBR\") == \"NO\"\nassert solution(\"1\\n6\\n9 5 6 8 3 1\\nRRRRRR\") == \"YES\"\nassert solution(\"2\\n5\\n1 2 3 4 5\\nBBBBR\\n1\\n1\\nB\") == \"YES\\nNO\"\nassert solution(\"1\\n4\\n1 1 1 1\\nBBBB\") == \"YES\"\nassert solution(\"1\\n3\\n1 2 3\\nRBR\") == \"YES\"\nassert solution(\"1\\n7\\n1 2 3 4 5 6 7\\nBBBBRRR\") == \"YES\"\nassert solution(\"2\\n6\\n1 4 7 9 11 12\\nRRRRBB\\n2\\n1 1\\nBB\") == \"YES\\nNO\"\nassert solution(\"1\\n4\\n10 1 10 1\\nRBRB\") == \"YES\"\nassert solution(\"1\\n4\\n1 3 3 1\\nBRBR\") == \"YES\"\nassert solution(\"1\\n4\\n1 1 1 1\\nBRBR\") == \"NO\"\nassert solution(\"1\\n2\\n2 2\\", "solution('''\n1\n5\n0 1 2 3 4\nRBRBR\n''') == 'YES'\n\n# input\nstdin = '''\n2\n5\n0 1 2 3 4\nRBRBR\n5\n1 2 3 4 5\nRBRBR\n'''\nprint(solution(stdin))", "solution(\"\"\"4\n4\n2 3 3 2\nBBRR\n5\n5 5 5 5 5\nRRRRR\n4\n4 2 1 3\nRRRR\n2\n2 3\nRR\"\"\") == \"\"\"YES\nNO\nYES\nNO\"\"\"\n\nassert solution(\"\"\"2\n2\n2 2\nBB\n3\n3 3 3\nRRR\"\"\") == \"\"\"YES\nNO\"\"\"\n\nassert solution(\"\"\"3\n3\n1 2 3\nBRB\n3\n1 2 3\nRBR\n3\n1 2 3\nRRR\"\"\") == \"\"\"YES\nYES\nNO\"\"\"\n\nassert solution(\"\"\"1\n5\n1 2 3 4 5\nBRBRB\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(\"\"\"1\n3\n1 1 1\nRRR\"\"\") == \"\"\"NO\"\"\"\n\nassert solution(\"\"\"2\n2\n2 2\nRR\n2\n1 2\nBR\"\"\") == \"\"\"YES\nYES\"\"\"\n\nassert solution(\"\"\"1\n4\n4 4 4 4\nBBBB\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(\"\"\"2\n4\n1 2 3 4\nBBBB\n4\n1 2 3 4\nRRRR\"\"\") == \"\"\"YES\nNO\"\"\"\n\nassert solution(\"\"\"1\n3\n1 2 3\nRBR\"\"\") == \"\"\"YES\"\"\"\n\nassert solution(\"\"\"2\n3\n3 3 3", "solution('''\n4\n5\n0 1 0 1 2\nRRBBR\n5\n1 1 0 1 1\nRRRBB\n5\n0 1 0 1 2\nRRRBB\n5\n3 4 1 4 2\nBRBRB\n''') == '''\nYES\nNO\nYES\nNO\n'''\n \n# stress testing solution\nimport random\nimport string\n\ndef brute_force(a: list, a_colors: list) -> bool:\n    pass\n\nwhile True:\n    # generate random test\n    pass\n\n    # check the correctness of solution against brute force solution\n    if brute_force(a, a_colors) != solution(stdin):\n        print('Found a bug!')\n        break\n    else:\n        print('Accepted')\n \n# send submission\nimport requests\n\nurl = 'https://algoprog.ru/api/ru/codeforces/problems/1326/submit'\ntoken = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\nstdin = ''\n\nfor _ in range(5):\n    stdin += f'{random.randint(-10**9, 10**9)} '\n\ndata = {\n    'program': solution(stdin),\n    'stdin': stdin,\n    'languageId': 4,\n    'token': token", "solution('''\n4\n4\n2 2 3 3\nRRBB\n4\n2 2 3 3\nBBRR\n4\n1 2 3 4\nBBBB\n4\n1 2 3 4\nRRRR\n''') == '''\nYES\nYES\nNO\nNO\n'''", "solution('''\n\n''') == '''\n\n'''", "solution('''\n1\n6\n2 3 3 3 2 1\nBRRRBB\n''') == 'YES'\nassert solution('''\n1\n6\n1 2 3 4 5 6\nBRRRBB\n''') == 'NO'\nassert solution('''\n1\n6\n3 2 1 6 5 4\nRBRBRB\n''') == 'YES'\nassert solution('''\n1\n2\n2 2\nRR\n''') == 'YES'\nassert solution('''\n1\n1\n1\nB\n''') == 'YES'\nassert solution('''\n1\n4\n4 3 2 1\nRBRB\n''') == 'YES'\nassert solution('''\n1\n2\n2 1\nRB\n''') == 'YES'\nassert solution('''\n1\n3\n3 2 1\nRRR\n''') == 'YES'\nassert solution('''\n1\n2\n1 1\nRR\n''') == 'NO'\nassert solution('''\n1\n2\n1 2\nRB\n''') == 'NO'\nassert solution('''\n1\n5\n5 5 5 5 5\nBBBBB\n''') == 'NO'\nassert solution('''\n1\n6\n1 1 1 1 1 1\nRRRRRR\n''') == 'NO'\nassert solution", "solution('''\n3\n3\n1 2 3\nBBB\n3\n1 1 1\nRRR\n5\n5 4 3 2 1\nRRRRR\n''') == '''\nYES\nNO\nYES\n'''\n\n# start running\nprint('started running...')\n\n# first line: number of input cases\nN = int(input())\n\nfor n in range(N):\n    # number of elements in the array\n    l = int(input())\n    # create array\n    array = list(map(int, input().split()))\n    # create color array\n    color = list(input())\n    # initialize minimum and maximum elements\n    min_ = min(array)\n    max_ = max(array)\n    # initialize left and right indexes for the sub array\n    left = 0\n    right = l-1\n    # initialize list of valid elements\n    valid = [False] * l\n    # print(min_, max_)\n    # print(array)\n    # print(color)\n    # check if minimum and maximum are equal\n    if min_ == max_:\n        print('YES')\n        continue\n    else:\n        while left < right:\n            # check if elements are equal\n            if array[left] == array[right]:\n                # if equal, check if color", "solution(stdin) == stdout", "solution(\"\"\"\n4\n4\n1 2 2 1\nBBBB\n2\n1 1\nBB\n3\n1 2 3\nRRR\n4\n1 2 3 4\nBBBB\n\"\"\") == \"\"\"\nYES\nYES\nNO\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5\n5 4 3 2 1\nRRRRR\n5\n5 4 3 2 1\nBBBBB\n5\n5 5 5 5 5\nBBBBB\n5\n4 3 2 1 1\nRRRRR\n5\n4 3 2 1 1\nBBBBB\n\"\"\") == \"\"\"\nYES\nYES\nYES\nYES\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\nRRRRR\n5\n1 2 3 4 5\nBBBBB\n5\n1 2 3 3 3\nRBRRR\n5\n1 2 3 3 3\nBRRBB\n5\n1 2 3 3 3\nRBRRB\n\"\"\") == \"\"\"\nYES\nYES\nYES\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5\n5 5 5 5 5\nRRRRR\n5\n5 5 5 5 5\nBBBBB\n5\n5 5 5 5 5\nRBRRB\n5\n5 5 5 5 5\n", "solution(\"\"\"1\n4\n1 3 3 1\nBRBR\n\"\"\") == \"\"\"YES\"\"\"", "solution(\"\"\"4\n4\n1 2 3 4\nRRBB\n4\n1 2 3 4\nRRRR\n4\n1 2 1 2\nRRRR\n4\n1 2 3 4\nBBBB\"\"\") == \"\"\"YES\nNO\nYES\nNO\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"2\n3\n1 2 1\nRRB\n3\n3 2 1\nRBR\"\"\") == \"\"\"YES\nYES\"\"\"", "solution('''\n4\n4\n4 2 5 1\nRBRB\n4\n4 2 5 1\nBRRB\n4\n4 2 5 1\nRRRR\n4\n4 2 5 1\nBBBB\n''') == '''\nYES\nYES\nNO\nNO\n'''", "solution(TESTS[0]) == ANSWERS[0]\nassert solution(TESTS[1]) == ANSWERS[1]\nassert solution(TESTS[2]) == ANSWERS[2]\nassert solution(TESTS[3]) == ANSWERS[3]\nassert solution(TESTS[4]) == ANSWERS[4]\nassert solution(TESTS[5]) == ANSWERS[5]\nassert solution(TESTS[6]) == ANSWERS[6]\nassert solution(TESTS[7]) == ANSWERS[7]\nassert solution(TESTS[8]) == ANSWERS[8]\nassert solution(TESTS[9]) == ANSWERS[9]\n\ndef test_performance():\n    \"\"\"\n    test the performance of your solution\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    test_performance()", "(solution('4\\n4\\n1 2 3 4\\nBBBB\\n4\\n1 2 3 4\\nRRRR\\n4\\n1 2 3 4\\nBRBR\\n4\\n1 2 3 4\\nRBBR') == 'YES\\nNO\\nYES\\nNO')\nprint('Ok')", "solution(__sample_input_1) == __sample_output_1\nassert solution(__sample_input_2) == __sample_output_2\n\n# test the performance of solution\nassert solution(__sample_input_large) == __sample_output_large", "solution('''\n''') == ''", "solution('''\n1\n5\n2 1 3 4 5\nRRRRR\n''') == 'YES'\n\nassert solution('''\n2\n5\n2 1 3 4 5\nRRRRR\n5\n3 4 1 2 5\nRRRRR\n''') == 'YES\\nNO'\n\nassert solution('''\n1\n2\n2 2\nRR\n''') == 'NO'\n\nassert solution('''\n1\n5\n-1 -1 -1 -1 -1\nBBBBB\n''') == 'NO'\n\nassert solution('''\n2\n4\n-1 -1 -1 -1\nRRRR\n4\n2 1 3 5\nBRRB\n''') == 'NO\\nYES'\n\n# run the solution on test inputs\nfrom runner import run_solution\n\nfile_name = 'INPUT.txt'\nstdin = open(file_name, 'r')\nstdout = open('OUTPUT.txt', 'w')\n\nrun_solution(solution, stdin, stdout)", "solution(r'''\n1\n3\n1 2 3\nRBR\n''') == r'''\nYES\n'''\n\n# check performance\nassert solution(r'''\n10\n2\n0 3\nBR\n2\n-1 1\nRR\n2\n0 1\nRB\n2\n1 1\nRR\n2\n1 1\nBB\n2\n2 2\nRR\n2\n2 2\nBB\n3\n1 2 3\nRBR\n3\n1 2 3\nRRR\n3\n1 2 3\nBBB\n''') == r'''\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nNO\n'''", "'YES' == solution('''\n1\n5\n1 2 3 4 5\nRRRRR\n''')\nassert 'NO' == solution('''\n1\n5\n1 2 3 4 5\nBBBBB\n''')\nassert 'YES' == solution('''\n1\n5\n1 2 3 4 5\nRRBRB\n''')\nassert 'YES' == solution('''\n1\n5\n2 3 4 5 4\nRRBBB\n''')\nassert 'YES' == solution('''\n1\n6\n1 1 1 1 1 1\nRRRRRR\n''')\nassert 'YES' == solution('''\n1\n6\n2 3 3 1 2 3\nRRBRRR\n''')\nassert 'YES' == solution('''\n1\n6\n1 1 1 1 1 1\nRRRRRR\n''')\nassert 'YES' == solution('''\n1\n6\n2 3 3 1 2 3\nRRBRRR\n''')\nassert 'YES' == solution('''\n1\n6\n2 3 3 1 2 3\nBRBRRR\n''')\nassert 'YES' == solution('''\n1\n6\n2 3 2 1 2 3\nRRRBRR\n''')\nassert 'YES' == solution('''\n1\n4\n1 2 3 4\nRRRR\n''')", "solution('''\n4\n4\n4 1 4 4\nRRBB\n4\n4 1 4 4\nRBRB\n4\n4 1 4 4\nBRRB\n4\n4 1 4 4\nBBRR\n''') == '''\nYES\nYES\nYES\nNO\n'''\n# submit solution\nprint(solution('''\n4\n4\n4 1 4 4\nRRBB\n4\n4 1 4 4\nRBRB\n4\n4 1 4 4\nBRRB\n4\n4 1 4 4\nBBRR\n'''))\n\n# test\n'''\n4\n4\n4 1 4 4\nRRBB\n4\n4 1 4 4\nRBRB\n4\n4 1 4 4\nBRRB\n4\n4 1 4 4\nBBRR\n'''", "solution(open(\"in.txt\", \"r\").read()) == open(\"out.txt\", \"r\").read()\n \n# submit solution\nimport requests\nrequests.post(\"https://www.hackerrank.com/tests/yw6g2cs6cjg/questions/algorithms/dynamic-programming/solutions\", json={\"codes\": [{\"code\":open(\"solution.py\", \"r\").read()}]})", "solution(\"\"\"8\n4\n2 3 3 4\nBBRR\n7\n1 2 3 4 5 6 7\nRBRBBRR\n5\n2 2 2 2 2\nBBBBB\n5\n10 10 10 10 10\nRRRRR\n5\n1 2 3 4 5\nRRRRR\n5\n5 4 3 2 1\nBBBBB\n1\n1\nB\n1\n1\nR\"\"\") == \"\"\"YES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\"\"\"", "solution('''4\n4\n4 2 1 3\nBRRR\n2\n1 1\nRR\n4\n1 2 3 4\nRRRR\n3\n2 3 1\nBBB''') == '''YES\nNO\nNO\nYES'''\n\nprint('All tests passed!')", "solution(\"\"\"\n5\n5\n5 1 2 3 4\nBBRRR\n5\n5 1 2 3 4\nRRRRR\n5\n5 1 2 3 4\nBBBBB\n5\n5 1 2 3 4\nBRRRB\n5\n5 1 2 3 4\nRRRRB\n\"\"\") == '''\nYES\nNO\nYES\nYES\nNO\n'''.strip()", "solution(u'''\n3\n5\n1 2 3 4 5\nBRBRB\n5\n5 4 3 2 1\nRBRBR\n4\n1 3 3 5\nBRBR\n''') == u'''\nYES\nNO\nYES\n'''", "solution('''\n1\n5\n1 2 3 4 5\nRRRRR\n''') == 'YES'\n\nassert solution('''\n2\n5\n1 2 3 4 5\nRRRRR\n5\n1 1 1 1 1\nRRRRR\n''') == '''\nYES\nNO\n'''", "solution(str('''\n1\n5\n1 1 1 1 1\nBBRRR\n''')) == 'NO'\n\nassert solution(str('''\n1\n3\n1 1 1\nBBB\n''')) == 'YES'\n\nassert solution(str('''\n1\n6\n0 0 0 0 0 0\nRRRRRR\n''')) == 'NO'\n\nassert solution(str('''\n1\n6\n2 3 3 1 2 3\nBRBRBB\n''')) == 'YES'\n\nassert solution(str('''\n1\n4\n1 1 1 0\nBRRR\n''')) == 'NO'\n\nassert solution(str('''\n1\n5\n0 0 0 0 0\nBRRRB\n''')) == 'NO'\n\nassert solution(str('''\n1\n5\n0 0 0 0 0\nBRRBB\n''')) == 'YES'\n\nassert solution(str('''\n1\n2\n1 0\nRB\n''')) == 'NO'\n\nassert solution(str('''\n1\n3\n3 3 3\nBBB\n''')) == 'YES'\n\nassert solution(str('''\n1\n3\n-3 -3 -3\nRRR\n''')) == 'YES'\n\nassert solution", "solution('''\n1\n3\n1 2 2\nBRB\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n3\n1 2 2\nBRR\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n3\n1 2 2\nRRR\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n3\n1 2 2\nBBB\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\nBBBBR\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\nBRBRB\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\nBBBRR\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\nRRRRR\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\nBBBBB\n''') == '''\nYES\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\nRRRBB\n''') == '''", "solution(\"\"\"1\n5\n1 2 1 2 1\nRRRRR\n\"\"\") == \"\"\"YES\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n4 3 1 2\nBRRB\n\"\"\") == \"\"\"YES\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n1 2 3 4 5\nRRRRR\n\"\"\") == \"\"\"NO\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n6\n3 3 3 3 3 3\nBBBBBB\n\"\"\") == \"\"\"NO\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n3\n-1 -1 -1\nBBB\n\"\"\") == \"\"\"NO\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n7\n-5 -5 -5 -5 -5 -5 -5\nBBBBBBB\n\"\"\") == \"\"\"NO\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n1 2 3 4\nBBBB\n\"\"\") == \"\"\"NO\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n3\n3 1 2\nRRB\n\"\"\") == \"\"\"NO\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n6\n1 3 1 4 2 2\nRBRRBR\n\"\"\") == \"\"\"YES\"\"\"\n\n# check the correctness of", "solution('''\n1\n1\n1\nB\n''') == 'YES'\n\nassert solution('''\n1\n1\n1\nR\n''') == 'YES'\n\nassert solution('''\n1\n2\n1 2\nBB\n''') == 'YES'\n\nassert solution('''\n1\n2\n1 2\nBR\n''') == 'YES'\n\nassert solution('''\n1\n2\n1 2\nRB\n''') == 'YES'\n\nassert solution('''\n1\n2\n1 2\nRR\n''') == 'YES'\n\nassert solution('''\n1\n5\n5 4 3 2 1\nBRRRB\n''') == 'YES'\n\nassert solution('''\n1\n5\n5 4 3 2 1\nRBRRB\n''') == 'YES'\n\nassert solution('''\n1\n5\n5 4 3 2 1\nRBRBR\n''') == 'YES'\n\nassert solution('''\n1\n5\n5 4 3 2 1\nBRBRB\n''') == 'YES'\n\nassert solution('''\n1\n5\n5 4 3 2 1\nRRRRR\n''') == 'NO'\n\nassert solution('''\n1\n5\n5 4 3 2 1\nBBBBB\n''') == 'NO", "solution('''\n1\n5\n1 2 1 2 1\nBBRBB\n''') == 'YES'\n\nassert solution('''\n1\n5\n1 2 3 4 5\nRRRRR\n''') == 'NO'\n\nassert solution('''\n1\n5\n1 2 3 4 5\nBBBBB\n''') == 'NO'\n\nassert solution('''\n1\n5\n1 2 3 4 5\nBBBBR\n''') == 'YES'\n\nassert solution('''\n1\n5\n1 2 3 4 5\nBBBBB\n''') == 'NO'\n\nassert solution('''\n1\n5\n1 2 3 4 5\nBBBBB\n''') == 'NO'\n\nassert solution('''\n1\n4\n1 2 2 1\nBRBR\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 2 1\nBRBR\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 2 1\nBRBR\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 2 1\nBRBR\n''') == 'YES'\n\nassert solution('''\n1\n4\n1 2 2 1\nBRBR\n''') == 'YES'\n\nassert solution(", "solution('''\n2\n3\n1 1 2\nBBB\n3\n1 2 3\nRRR\n''') == '''\nYES\nNO\n'''", "solution(\"\"\"3\n3\n3 2 1\nBRB\n3\n2 3 1\nRBB\n3\n1 2 3\nRBR\"\"\") == \"\"\"YES\nYES\nNO\"\"\"\n# test case provided by problem statement\nassert solution(\"\"\"5\n5\n1 1 1 1 1\nBBBBB\n5\n5 5 5 5 5\nBBBBB\n5\n1 1 1 1 1\nRRRRR\n5\n5 5 5 5 5\nRRRRR\n5\n1 1 1 1 1\nBRBRB\"\"\") == \"\"\"YES\nYES\nYES\nYES\nNO\"\"\"\n\n# test case for the length of array of 1\nassert solution(\"\"\"1\n1\n1\nB\"\"\") == \"\"\"YES\"\"\"\n\n# test case for the length of array of 2\nassert solution(\"\"\"3\n2\n1 2\nBR\n2\n1 2\nRB\n2\n1 2\nRR\"\"\") == \"\"\"YES\nYES\nNO\"\"\"\n\n# test case for the elements out of range\nassert solution(\"\"\"3\n3\n-11111 11111 11111\nBRB\n3\n-11111 11111 11111\nRBB\n3\n-11111 11111 11111\nRBR\"\"\") == \"\"\"YES\nYES\nNO\"\"\"\n\n# test case for empty array\nassert solution(\"\"\"2\n0\n\n\"\"\") == \"\"\"YES\nNO\"\"\"", "(solution(stdin='3\\n3\\n2 1 4\\nRBR\\n2\\n2 3\\nBB\\n2\\n2 2\\nRR')) == 'YES\\nYES\\nNO'\n\n# stdin = sys.stdin.read()\n# solution(stdin)", "solution('''\n5\n5\n5 5 5 5 5\nRRRRR\n5\n5 5 5 5 5\nBBBBB\n5\n5 1 1 1 5\nRRRRR\n5\n5 1 1 1 5\nRRRBB\n5\n5 5 5 1 1\nRRRRR\n''') == '''\nYES\nNO\nYES\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7\n-8 -2 -2 1 -1 1 -5\nRRRBRBR\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 5 5 5 5\nRRRRR\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n1 10 2 9 3 8 4 7 5 6\nBBBBBBBBBB\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2 2\nBB\n3\n3 3 3\nRRR\n''') == '''\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 1\nBR\n2\n1 1\nRB\n''') == '''\nYES", "solution('''\n1\n6\n1 2 3 4 3 2\nBBBRRB\n''') == 'YES'\n\nassert solution('''\n1\n6\n1 2 3 4 3 2\nBBBBRR\n''') == 'NO'\n\nassert solution('''\n1\n3\n2 3 3\nRRB\n''') == 'YES'\n\nassert solution('''\n1\n3\n1 2 3\nRRB\n''') == 'NO'\n\nassert solution('''\n1\n1\n1\nB\n''') == 'YES'\n\nassert solution('''\n1\n2\n1 1\nBB\n''') == 'YES'\n\nassert solution('''\n1\n2\n1 1\nBR\n''') == 'NO'\n\nassert solution('''\n1\n3\n1 1 1\nBRB\n''') == 'NO'\n\nassert solution('''\n1\n3\n1 1 1\nRRR\n''') == 'YES'\n\nassert solution('''\n1\n3\n1 1 1\nBBB\n''') == 'YES'\n\nassert solution('''\n1\n3\n1 1 1\nBRR\n''') == 'NO'\n\nassert solution('''\n1\n3\n1 1 1\nBBR\n''') == 'NO'\n", "solution(\"\"\"\n4\n4\n2 1 3 4\nBRBR\n4\n4 3 2 1\nBRBR\n6\n3 3 3 3 3 3\nRRRRRR\n1\n1\nB\n\"\"\") == \"\"\"\nYES\nYES\nNO\nYES\n\"\"\""], "finish_reason": ["length", "stop", "stop", "length", "length", "length", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop"], "sum_logprob": [-45.97946707886493, -28.29516429701, -42.58052499095998, -157.33707056885498, -101.45313830815607, -105.94208979298304, -89.42817107743296, -55.10180434090802, -65.88388604503253, -28.860684217159996, -47.1740748835, -101.93439495018006, -146.40259897434504, -40.08034489574999, -131.00035882946995, -202.23644032962005, -27.02267652737999, -8.2740759656, -97.95601904535508, -213.71851132627992, -6.085691600300001, -104.75187309420404, -18.57776448, -48.27903956121003, -27.787572099699997, -42.11503773264029, -34.39873552940499, -26.853566249376012, -8.040517993, -124.20430975311405, -72.49840650670998, -94.19336605742994, -53.944726915790994, -90.31067000272003, -64.80711685814, -44.871448701900015, -40.942091311100015, -37.5198238323, -22.333083830029995, -107.23503831247098, -51.86349611094498, -102.46292921353704, -47.19621137693754, -55.82792338857099, -16.0396280404, -143.8843825998901, -48.919329275478, -126.21318941727596, -74.90410276579709, -35.71828670009001], "mean_logprob": [-0.15326489026288334, -0.44211194214078126, -0.7217038134061017, -0.5244569018961833, -0.33817712769385333, -0.35314029930994334, -0.29809390359144333, -0.18367268113636, -0.21961295348344168, -0.40084283634944445, -0.94348149767, -0.3905532373570115, -0.48800866324781667, -0.541626282375, -0.4366678627649, -0.6741214677654, -0.4157334850366154, -0.51712974785, -0.3265200634845167, -0.7123950377542667, -0.6761879555888889, -0.3491729103140133, -0.84444384, -0.4977220573320619, -0.42750110922615386, -0.1995973352257834, -0.45261494117638157, -0.4402223975307541, -0.8040517993, -0.5153705798884398, -0.4833227100447333, -0.3139778868581, -0.29969292730995, -0.8683718269492308, -0.5786349719476785, -0.6903299800292307, -0.47059875070229884, -0.64689351435, -0.31018171986152776, -0.35745012770823664, -0.17287832036981668, -0.3415430973784567, -0.15732070458979167, -0.18609307796190333, -0.4220954747473684, -0.4796146086663, -0.6794351288260834, -0.42071063139092, -0.24968034255265667, -0.5953047783348333]}
{"prompt": "'''\nThe grasshopper is located on the numeric axis at the point with coordinate x_0.\n\nHaving nothing else to do he starts jumping between integer points on the axis. Making a jump from a point with coordinate x with a distance d to the left moves the grasshopper to a point with a coordinate x - d, while jumping to the right moves him to a point with a coordinate x + d.\n\nThe grasshopper is very fond of positive integers, so for each integer i starting with 1 the following holds: exactly i minutes after the start he makes a jump with a distance of exactly i. So, in the first minutes he jumps by 1, then by 2, and so on.\n\nThe direction of a jump is determined as follows: if the point where the grasshopper was before the jump has an even coordinate, the grasshopper jumps to the left, otherwise he jumps to the right.\n\nFor example, if after 18 consecutive jumps he arrives at the point with a coordinate 7, he will jump by a distance of 19 to the right, since 7 is an odd number, and will end up at a point 7 + 19 = 26. Since 26 is an even number, the next jump the grasshopper will make to the left by a distance of 20, and it will move him to the point 26 - 20 = 6.\n\nFind exactly which point the grasshopper will be at after exactly n jumps.\n\nInput\n\nThe first line of input contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nEach of the following t lines contains two integers x_0 (-10^{14} \u2264 x_0 \u2264 10^{14}) and n (0 \u2264 n \u2264 10^{14}) \u2014 the coordinate of the grasshopper's initial position and the number of jumps.\n\nOutput\n\nPrint exactly t lines. On the i-th line print one integer \u2014 the answer to the i-th test case \u2014 the coordinate of the point the grasshopper will be at after making n jumps from the point x_0.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(r'''\n5\n1 10\n1 100\n1 1000\n1 10000\n1 100000\n''') == r'''\n2\n12\n102\n1002\n10002\n'''\nassert solution(r'''\n10\n1 10\n1 100\n1 1000\n1 10000\n1 100000\n-1 10\n-1 100\n-1 1000\n-1 10000\n-1 100000\n''') == r'''\n1\n11\n101\n1001\n10001\n-2\n-12\n-102\n-1002\n-10002\n'''\nassert solution(r'''\n10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == r'''\n1\n2\n2\n2\n2\n2\n3\n3\n3\n3\n'''\nassert solution(r'''\n10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == r'''\n1\n2\n2\n2\n2\n2\n3\n3\n3\n3\n'''\n\n# test a big number\nfrom utils import generate_random_string\nrandom_input = generate_random_string(100000, '10", "solution(\"\"\"1\n1 10\"\"\") == \"9\"\nassert solution(\"\"\"4\n-10 999999999999999\n-10 999999999999999\n-10 999999999999999\n-10 999999999999999\"\"\") == \"\"\"1\n-1\n1\n-1\"\"\"\n\nassert solution(\"\"\"5\n3 0\n3 1\n3 2\n3 3\n3 4\"\"\") == \"\"\"3\n5\n5\n5\n5\"\"\"\n\nassert solution(\"\"\"5\n5 0\n5 1\n5 2\n5 3\n5 4\"\"\") == \"\"\"5\n5\n7\n7\n7\"\"\"\n\nassert solution(\"\"\"5\n6 0\n6 1\n6 2\n6 3\n6 4\"\"\") == \"\"\"6\n6\n6\n6\n10\"\"\"\n\nassert solution(\"\"\"5\n7 0\n7 1\n7 2\n7 3\n7 4\"\"\") == \"\"\"7\n9\n9\n9\n9\"\"\"\n\nassert solution(\"\"\"5\n8 0\n8 1\n8 2\n8 3\n8 4\"\"\") == \"\"\"8\n8\n8\n8\n12\"\"\"\n\nassert solution(\"\"\"5\n9 0\n9 1\n9 2\n9 3\n9 4\"\"\") == \"\"\"9\n11\n11\n11\n11\"\"\"\n\nassert solution(\"\"\"5\n10 0\n10 1\n10 2\n10 3", "solution(\"\"\"0 1 2\n1 3 2\n1 3 4\n1 0 8\n2 1 5\n2 3 1\n2 6 5\n2 -4 4\n4 1 5\n4 -1 5\n4 5 2\n4 0 1\n4 0 2\n4 0 3\n4 0 4\n4 0 5\n4 0 6\n4 0 7\n4 0 8\n4 0 9\n4 0 10\n4 0 11\n4 0 12\n4 0 13\n4 0 14\n4 0 15\n4 0 16\n4 0 17\n4 0 18\n4 0 19\n4 0 20\n4 0 21\n4 0 22\n4 0 23\n4 0 24\n4 0 25\n4 0 26\n4 0 27\n4 0 28\n4 0 29\n4 0 30\n4 0 31\n4 0 32\n4 0 33\n4 0 34\n4 0 35\n4 0 36\n4 0 37\n4 0 38\n4 0 39\n4 0 40\n4 0 41\n4 0 42\n4 0 43\n4 0 44\n4 0 45\n4 0 46\n4 0 47\n4 0 48\n4 0 49\n4 0 50\n4 0 51\n4 0 52\n4 0 53\n4 0 54\n4 0 55\n4 0 56\n4 0 57\n4 0 58\n4 0 59\n4 0 60\n4 0 61\n4 0 62\n4 0 63", "solution(\"\"\"\n2\n0 2\n1 4\n\"\"\") == \"\"\"\n2\n5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3 2\n-3 2\n1 0\n\"\"\") == \"\"\"\n3\n-3\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n-1000000000000 9999999999999\n2000000000000 9999999999999\n-1000000000000 9999999999998\n1000000000000 9999999999998\n\"\"\") == \"\"\"\n0\n0\n-1000000000000\n1000000000000\n\"\"\"\n\nassert solution(\"\"\"\n4\n-1000000000000 9999999999999\n2000000000000 9999999999999\n-1000000000000 9999999999998\n1000000000000 9999999999998\n\"\"\") == \"\"\"\n0\n0\n-1000000000000\n1000000000000\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n0 3\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 3\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n100 10000000000\n\"\"\") == \"\"\"\n10000000000\n\"\"\"\n\nassert solution(\"\"\"\n1\n0 2\n\"\"\") == \"\"\"\n2\n\"\"\"", "(solution('1\\n1 0') == '1')\nassert (solution('2\\n10 10\\n1 1') == '10\\n2')\nassert (solution('1\\n10 1') == '11')\nassert (solution('1\\n10 2') == '8')\nassert (solution('1\\n1000000000000 1000000000000') == '1000000000000')\nassert (solution('1\\n1000000000000 1000000000001') == '999999999999')\nassert (solution('1\\n1000000000000 1000000000002') == '1000000000002')\nassert (solution('1\\n-1000000000000 1000000000000') == '-1000000000000')\nassert (solution('1\\n-1000000000000 1000000000001') == '-999999999999')\nassert (solution('1\\n-1000000000000 1000000000002') == '-1000000000002')\nassert (solution('1\\n-1000000000000 1000000000003') == '-1000000000003')\nassert (solution('1\\n-1000000000000 1000000000004') == '-1000000000001')\nassert (solution('1\\n1000000000000 1000000000003') == '1000000000003')\nassert (solution('1\\n1000000000000 1000000000004') ==", "solution('''\n1\n0 4\n''') == '''\n0\n'''\n\n# get input\nT = int(input())\nINPUT = [input() for _ in range(T)]\n\n# submit answer\nprint(solution('\\n'.join(INPUT)))", "solution(\"2\\n-2 0\\n100 100\") == \"100\\n100\"\nassert solution(\"1\\n0 100\") == \"100\"\nassert solution(\"1\\n0 20\") == \"0\"\nassert solution(\"4\\n0 1\\n0 2\\n1 1\\n1 2\") == \"0\\n2\\n2\\n3\"\nassert solution(\"4\\n1 1\\n1 2\\n2 1\\n2 2\") == \"2\\n3\\n3\\n4\"\nassert solution(\"4\\n-1 1\\n-1 2\\n-2 1\\n-2 2\") == \"-2\\n-1\\n-1\\n0\"\nassert solution(\"3\\n0 0\\n0 10000000000000000\\n10000000000000000 1000000000000000000\") == \"0\\n10000000000000000\\n2000000000000000000\"\nassert solution(\"4\\n-2 0\\n100 100\\n1000000000 100000000000\\n1000000000000000000000000000000 100000000000000000000000000000000\") == \"100\\n100000000000\\n100000000000000000000000000000\\n1000000000000000000000000000000000000000000000000000000000000\"\n\ndef verify(A: str) -> bool:\n    lines = A.splitlines()\n    assert len(lines) >= 1 and len(lines) <= 10000\n    for i in range(len(lines)):\n       ", "solution('''\n1\n1 10\n''') == '''\n11\n'''\nassert solution('''\n2\n0 0\n0 100\n''') == '''\n0\n100\n'''\nassert solution('''\n3\n-3 7\n3 7\n3 0\n''') == '''\n0\n0\n3\n'''\n\n# get the input\nfrom sys import stdin\ninput = stdin.read()\n\n# print the output\nprint(solution(input))", "solution(\"\"\"\n2\n2 3\n2 1\n\"\"\") == \"\"\"\n-2\n-2\n\"\"\", \"Example\"\n\n# run the solution\nprint(solution(sys.stdin.read()))", "solution('''1\n1 2''') == '2'\nassert solution('''1\n2 2''') == '3'\nassert solution('''1\n-3 -3''') == '-4'\nassert solution('''1\n10 20''') == '23'\nassert solution('''1\n0 1''') == '1'\nassert solution('''1\n-1 1''') == '-2'\nassert solution('''1\n2 3''') == '5'\nassert solution('''1\n3 7''') == '11'\nassert solution('''1\n3 8''') == '10'\nassert solution('''1\n2 9''') == '15'\nassert solution('''1\n1 10''') == '21'\nassert solution('''1\n0 10''') == '11'\nassert solution('''1\n-1 10''') == '10'\nassert solution('''1\n2 10''') == '20'\nassert solution('''1\n1 11''') == '21'\nassert solution('''1\n0 11''') == '11'\nassert solution('''1\n-1 11''') == '10'\nassert solution('''1\n1 1000000000000''') == '2000000000001'\nassert solution", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution('''1\n1 5''') == '''2'''\n\n# check the correctness of solution\nassert solution('''5\n1 5\n1 10\n1 20\n1 50\n2 10''') == '''2\n6\n14\n50\n12'''\n\n# check the correctness of solution\nassert solution('''5\n123456 -123456\n123456789012345678901234567890 123456789012345678901234567890\n123456789012345678901234567890 -123456789012345678901234567890\n-123456789012345678901234567890 123456789012345678901234567890\n-123456789012345678901234567890 -123456789012345678901234567890''') == '''123456\n123456789012345678901234567890\n-123456789012345678901234567890\n-123456789012345678901234567890\n123456789012345678901234567890'''\n\n# check the correctness of solution\nassert solution('''5\n0 1000000000000000000000000000000\n-1234567", "solution('''\n1\n0 1\n''') == '''\n0\n'''\nassert solution('''\n1\n0 2\n''') == '''\n2\n'''\nassert solution('''\n1\n0 4\n''') == '''\n0\n'''\nassert solution('''\n1\n0 8\n''') == '''\n8\n'''\nassert solution('''\n1\n0 16\n''') == '''\n16\n'''\nassert solution('''\n1\n0 17\n''') == '''\n17\n'''\nassert solution('''\n1\n0 18\n''') == '''\n18\n'''\nassert solution('''\n1\n0 19\n''') == '''\n19\n'''\nassert solution('''\n1\n-16 0\n''') == '''\n-16\n'''\nassert solution('''\n1\n-16 1\n''') == '''\n-17\n'''\nassert solution('''\n1\n-16 3\n''') == '''\n-15\n'''\nassert solution('''\n1\n-16 16\n''') == '''\n0\n'''\nassert solution('''\n1\n-10 2\n''') == '''\n8\n'''\nassert solution('''\n1", "solution('''\n2\n2 10\n4 10\n''') == '''\n4\n12\n'''\n\n# un-comment this for local testing\n#~ assert solution('''\n#~ ''') == '''\n#~ '''\n\n#~ assert solution('''\n#~ ''') == '''\n#~ '''\n\n#~ assert solution('''\n#~ ''') == '''\n#~ '''\n\n#~ assert solution('''\n#~ ''') == '''\n#~ '''", "solution('''\n2\n1 2\n5 6\n''') == '''\n0\n1\n'''\n\n# check with large cases\nimport random\n\nn = 100000\nstdin = str(n) + '\\n'\nfor i in range(n):\n    x0 = random.randint(-100000000000000, 100000000000000)\n    nn = random.randint(0, 100000000000000)\n    stdin += str(x0) + ' ' + str(nn) + '\\n'\n\nimport os\nos.system('echo \"' + stdin + '\" | ./pypy3 problem.py > output.txt')\nassert os.system('diff output.txt answer.txt') == 0", "solution(\"\"\"1\n0 100\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"1\n10 11\"\"\") == \"\"\"10\"\"\"\nassert solution(\"\"\"1\n10 12\"\"\") == \"\"\"11\"\"\"\nassert solution(\"\"\"1\n10 13\"\"\") == \"\"\"9\"\"\"\nassert solution(\"\"\"1\n10 14\"\"\") == \"\"\"8\"\"\"\nassert solution(\"\"\"1\n10 15\"\"\") == \"\"\"7\"\"\"\nassert solution(\"\"\"1\n10 16\"\"\") == \"\"\"6\"\"\"\nassert solution(\"\"\"1\n10 17\"\"\") == \"\"\"5\"\"\"\nassert solution(\"\"\"1\n10 18\"\"\") == \"\"\"4\"\"\"\nassert solution(\"\"\"1\n10 19\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"1\n10 20\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"1\n10 21\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"1\n10 22\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"1\n10 23\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"1\n10 24\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"1\n10 25\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"1\n10 26\"\"\") == \"\"\"4\"\"\"\nassert solution(\"\"\"1\n10 27\"\"\") == \"\"\"5\"\"\"\nassert solution(\"\"\"1\n10 28\"\"\") == \"\"\"6\"\"\"\nassert solution(\"\"\"1\n10 29\"\"\") == \"\"\"7\"\"\"\nassert", "solution(test_input) == expected_output, \"Results don't match\"", "solution('''\n''') == '''\n'''", "solution('''3\n3 10\n1 1\n2 0''') == '''2\n2\n2'''", "solution('''\n2\n2 2\n2 3\n''') == '''\n4\n6\n'''\n\n# make system tests here\n\n# help to run you solution in debug mode.\n#solution('''\n#2\n#2 2\n#2 3\n#''')", "solution(r'''\n3\n8 9\n20 17\n13 5\n''') == r'''\n10\n16\n15\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n10 10\n''') == r'''\n10\n'''\n\n# test code\nimport io, sys\nsys.stdin = io.StringIO(\n'''\n1\n1 1\n''')\nassert solution(sys.stdin.read()) == '''\n2\n'''\nsys.stdin = io.StringIO(\n'''\n1\n1 2\n''')\nassert solution(sys.stdin.read()) == '''\n0\n'''\nsys.stdin = io.StringIO(\n'''\n1\n1 3\n''')\nassert solution(sys.stdin.read()) == '''\n0\n'''\nsys.stdin = io.StringIO(\n'''\n1\n1 4\n''')\nassert solution(sys.stdin.read()) == '''\n2\n'''\nsys.stdin = io.StringIO(\n'''\n1\n1 5\n''')\nassert solution(sys.stdin.read()) == '''\n2\n'''\nsys.stdin = io.StringIO(\n'''\n1\n1 6\n''", "solution('''\n3\n7 1\n6 5\n1000 100000\n''') == '''\n7\n7\n26\n'''", "solution('''\n4\n5 10\n-5 10\n0 1000000000000000\n9999999999999999 9999999999999999\n''') == '''\n11\n-11\n0\n0\n'''", "solution(example) == expected", "solution(r'''\n1\n7 20\n''') == r'''\n6\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n1000000000000 4\n''') == r'''\n1000000000000\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n0 1\n-1 5\n''') == r'''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n1000000000000000000 1\n1000000000000000005 1\n1000000000000000001 1\n''') == r'''\n1000000000000000000\n1000000000000000005\n1000000000000000001\n'''\n\nassert solution(r'''\n3\n0 7\n0 8\n0 9\n''') == r'''\n13\n13\n13\n'''\n\nassert solution(r'''\n4\n-10 10\n-5 15\n1 1000000000000\n-1000000000000000000 0\n''') == r'''\n-10\n-5\n1000000000000\n-1000000000000000000\n'''\n\n# check the correctness of solution\nassert solution(r'''\n5\n2 3\n0 3\n0 2\n0 1\n-1 2\n''') == r'''\n3\n3\n3\n3\n3\n'''\n\n# check", "solution('''4\n1 4\n-2 3\n7 18\n0 0''') == '''3\n-3\n7\n0'''", "solution('''\n3\n8 6\n1 1000000000000\n5 0\n''') == '''\n7\n999999999999\n5\n'''", "solution('''\n1\n0 4\n''') == '''\n0\n'''\n\n# test\nt0 = time.time()\n\nwith open('input.txt', 'r') as f:\n    # make input data\n    stdin = f.read()\n\n# run the solution\noutput = solution(stdin)\n\n# print the answer and time\nprint(output)\nprint('time:', time.time() - t0)", "solution(r'''\n5\n1 1\n1 100\n1 5\n1 1000\n1 2000\n''') == r'''\n0\n100\n6\n1000\n2000\n'''", "solution(\"\"\"\n2\n1 1\n0 1\n\"\"\") == \"\"\"\n1\n1\n\"\"\"", "solution(\"1\\n1 1\") == \"0\"\nassert solution(\"1\\n1 2\") == \"1\"\nassert solution(\"1\\n1 3\") == \"0\"\nassert solution(\"1\\n1 4\") == \"2\"\nassert solution(\"1\\n1 5\") == \"1\"\nassert solution(\"1\\n1 6\") == \"0\"\nassert solution(\"1\\n1 7\") == \"2\"\nassert solution(\"1\\n1 8\") == \"4\"\nassert solution(\"1\\n1 9\") == \"3\"\nassert solution(\"1\\n1 10\") == \"2\"\nassert solution(\"1\\n1 11\") == \"1\"\nassert solution(\"1\\n1 12\") == \"0\"\nassert solution(\"1\\n1 13\") == \"2\"\nassert solution(\"1\\n1 14\") == \"4\"\nassert solution(\"1\\n1 15\") == \"3\"\nassert solution(\"1\\n1 16\") == \"2\"\nassert solution(\"1\\n1 17\") == \"1\"\nassert solution(\"1\\n1 18\") == \"0\"\nassert solution(\"1\\n1 19\") == \"2\"\nassert solution(\"1\\n1 20\") == \"4\"\nassert solution(\"1\\n1 21\") == \"3\"\nassert solution(\"1\\n1", "solution('''\n2\n0 4\n2 3\n''') == '''\n6\n0\n'''\n\nassert solution('''\n''') == '''\n'''\n\nprint(\"Enter file name: \")\nfile_name = input()\ninput_file = open(file_name)\nprint(solution(input_file.read()))", "solution('''\n1\n1 10\n''') == '''\n-28\n'''\n\nassert solution('''\n3\n-1 10\n0 10\n1 10\n''') == '''\n-28\n0\n28\n'''\n\nassert solution('''\n4\n-2 1000000000000000000\n-1 1000000000000000000\n0 1000000000000000000\n1 1000000000000000000\n''') == '''\n-2000000000000000028\n-2000000000000000028\n0\n2000000000000000028\n'''", "solution('''\n2\n2 8\n0 -1\n''') == '''\n7\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n0 1\n1 1\n''') == '''\n1\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0 0\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4 3\n0 3\n5 3\n2 3\n''') == '''\n1\n5\n1\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1000000000000000000\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0 4\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n0 1\n0 2\n0 3\n''') == '''\n1\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0 0\n''') == '''\n0\n'''\n\nprint('all done')", "solution(\"\"\"1\n1 3\n\"\"\") == \"\"\"4\n\"\"\"\n\n# noinspection SpellCheckingInspection\nassert solution(\"\"\"4\n-4 7\n4 8\n0 1\n300000000 10000000000\n\"\"\") == \"\"\"14\n-28\n0\n900000000\n\"\"\"\n\n# stress testing\nimport random\n\nwhile True:\n    try:\n        from solution import solution\n    except ImportError:\n        continue\n\n    N = 10**4\n    test_data = []\n    for _ in range(N):\n        test_data.append('{0} {1}\\n'.format(random.randint(-10**14, 10**14), random.randint(0, 10**14)))\n    test_data = ''.join(test_data)\n\n    assert solution(test_data) == solution_brute(test_data)\n    print('OK')", "solution('''\n2\n2 3\n3 1\n''') == '''\n-1\n5\n'''\n\n# check efficiency\nimport random\nfrom timeit import timeit\n\ndef generate_test_input(num_cases: int, case_size: int) -> str:\n    case_template = '{} {}\\n'\n    test_cases = '\\n'.join(case_template.format(random.randint(-case_size, case_size), random.randint(0, case_size)) for _ in range(num_cases))\n    return '{}\\n{}'.format(num_cases, test_cases)\n\nnum_cases, case_size = 10**4, 10**14\nprint(timeit(lambda: solution(generate_test_input(num_cases, case_size)), number=1))", "solution('''\n1\n2 3\n''') == '''\n-2\n'''\n\nif __name__ == '__main__':\n    # input\n    n = int(input())\n    inputs = []\n    for i in range(n):\n        x, n = map(int, input().split())\n        inputs.append((x, n))\n\n    # calculate\n    solutions = [solution(x, n) for x, n in inputs]\n\n    # output\n    for i, sol in enumerate(solutions):\n        print('Case #{}: {}'.format(i + 1, sol))", "solution(\n    '''\n    3\n    1 1\n    11 3\n    10 0\n    '''\n) == '''\n1\n11\n10\n'''\n\nif __name__ == '__main__':\n    stdin = '\\n'.join([input() for _ in range(int(input()))])\n    print(solution(stdin))", "solution('''\n3\n1 1\n8 6\n42 7\n''') == '''\n2\n2\n8\n'''", "solution(\"\"\"1\n1 0\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"1\n1 4\n\"\"\") == \"\"\"5\n\"\"\"\nassert solution(\"\"\"1\n3 2\n\"\"\") == \"\"\"7\n\"\"\"\nassert solution(\"\"\"1\n-1 5\n\"\"\") == \"\"\"-9\n\"\"\"\nassert solution(\"\"\"3\n-10 2\n-1 2\n0 2\n\"\"\") == \"\"\"-10\n-9\n2\n\"\"\"\nassert solution(\"\"\"5\n0 5\n0 6\n0 7\n0 8\n0 9\n\"\"\") == \"\"\"0\n0\n0\n0\n0\n\"\"\"\nassert solution(\"\"\"4\n7 1\n7 2\n7 3\n7 4\n\"\"\") == \"\"\"7\n9\n11\n13\n\"\"\"\nassert solution(\"\"\"1\n7 4\n\"\"\") == \"\"\"13\n\"\"\"\nassert solution(\"\"\"1\n9 9\n\"\"\") == \"\"\"10\n\"\"\"\nassert solution(\"\"\"1\n10 17\n\"\"\") == \"\"\"10\n\"\"\"\nassert solution(\"\"\"2\n10 18\n10 19\n\"\"\") == \"\"\"10\n10\n\"\"\"\nassert solution(\"\"\"1\n5 0\n\"\"\") == \"\"\"5\n\"\"\"\nassert solution(\"\"\"1\n-4 0\n\"\"\") == \"\"\"-4\n\"\"\"\nassert solution(\"\"\"1\n-4 12\n\"\"\") == \"\"\"-4\n\"\"\"\nassert solution(\"", "solution('''\n1\n2 3\n''') == '''\n5\n'''\nassert solution('''\n1\n0 2\n''') == '''\n0\n'''\nassert solution('''\n1\n10 1\n''') == '''\n11\n'''\nassert solution('''\n1\n-10 1\n''') == '''\n-9\n'''\nassert solution('''\n1\n-10 2\n''') == '''\n-11\n'''\nassert solution('''\n1\n1 1000000000000000000\n''') == '''\n1000000000000000000\n'''\nassert solution('''\n1\n1000000000000000000 1\n''') == '''\n1\n'''\nassert solution('''\n1\n-1000000000000000000 1\n''') == '''\n-1\n'''\nassert solution('''\n1\n-1000000000000000000 1000000000000000000\n''') == '''\n-1000000000000000000\n'''\n\n# get the input\ndef get_input(source: str = __file__) -> str:\n    \"\"\"Get the input from the source file\n\n    Args:\n        source (str): __file__\n\n    Returns:\n        str: the input string\n    \"\"\"\n    with open(source) as f:\n        lines = f.readlines()\n    input_", "solution('''\n3\n3 12\n7 17\n1 3\n''') == '''\n3\n16\n0\n'''", "solution(\"1\\n0 100\") == \"0\"\nassert solution(\"3\\n3 2\\n5 0\\n5 1\") == \"3\\n5\\n6\"\n\n# get file content\nwith open(\"test-data/test_1.txt\") as file:\n    stdin = file.read()\n    print(solution(stdin))", "solution(\"\") == \"\"", "(solution('1\\n1 4') == '-3')\nassert (solution('3\\n1 4\\n1 5\\n1 6') == '-3\\n1\\n3')\nassert (solution('3\\n-1 1\\n-1 2\\n-1 3') == '1\\n1\\n1')\nassert (solution('2\\n-2 1\\n-2 2') == '-1\\n1')\nassert (solution('6\\n-10 0\\n-10 1\\n-10 2\\n-10 3\\n-10 4\\n-10 5') == '-10\\n-10\\n-10\\n-10\\n-10\\n-10')\nassert (solution('1\\n0 1') == '1')\nassert (solution('5\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5') == '1\\n1\\n1\\n1\\n1')\nassert (solution('5\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4') == '1\\n1\\n1\\n1\\n1')\nassert (solution('2\\n2 3\\n2 4') == '1\\n-1')\nassert (s", "solution(\"\"\"0\n2 3\n2 2\n\"\"\") == \"\"\"0\n0\n\"\"\"", "solution(\"\"\"3\n-2 3\n0 3\n1 3\n\"\"\") == \"\"\"\n0\n3\n3\n\"\"\"\n\nassert solution(\"\"\"4\n-4 4\n4 4\n4 2\n4 100\n\"\"\") == \"\"\"\n-4\n4\n4\n44\n\"\"\"\n\n# check the performance of solution\nassert solution(\"\"\"1\n-10^14 10^14\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"5\n-10^14 10^14\n0 10^14\n10^14 10^14\n-10^14 0\n0 0\n\"\"\") == \"\"\"\n0\n0\n10^14\n-10^14\n0\n\"\"\"\n\nassert solution(\"\"\"10\n-10^14 10^14\n0 10^14\n10^14 10^14\n-10^14 0\n0 0\n0 10^14\n0 10^14\n0 10^14\n0 10^14\n0 10^14\n\"\"\") == \"\"\"\n0\n0\n10^14\n-10^14\n0\n0\n0\n0\n0\n0\n\"\"\"", "solution(\"\"\"4\n2 1\n2 2\n-1 4\n0 2\"\"\") == \"\"\"2\n2\n-1\n0\"\"\"\n\n# import library to read the input and write the output\nimport sys\n\n# read and parse the input\nstdin = sys.stdin.read()\n\n# call and print the solution\nprint(solution(stdin))", "solution('''\n''') == '''\n'''", "solution(\"\"\"\\\n3\n10 1\n5 2\n2 3\n\"\"\") == \"\"\"\\\n9\n5\n4\n\"\"\""], "finish_reason": ["length", "length", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-100.59511970815399, -83.24045608501191, -93.35290440061006, -120.0961237686151, -71.11611661128302, -26.69035561208401, -151.45664819427992, -58.7578485788625, -35.260150445856, -119.46970018907402, -12.7917823906936, -98.33947932906398, -68.72677068789892, -55.429112778846516, -94.53087408043001, -40.906636752488986, -22.848105117000003, -6.6120759420000015, -24.576694717600002, -81.4010921313, -101.048624914699, -33.6446810356, -36.076508444699996, -9.31066426, -166.02949337942198, -29.678286899539998, -31.090297236200005, -67.76379187917998, -42.6142698469, -16.142088164, -26.967283942895996, -55.75163681205, -47.439095339427006, -116.8224646651934, -134.4674120517291, -84.15767408055402, -56.58402438555, -41.231897512730015, -32.2315768397, -155.488871900283, -88.65128732708794, -33.6615686203, -67.480018676445, -5.90180702, -96.90394894307809, -26.275124503, -100.34479034459002, -74.25633010382803, -6.609996165000001, -28.545146346840003], "mean_logprob": [-0.33531706569384667, -0.27746818695004, -0.3111763480020333, -0.40032041256205, -0.23705372203761, -0.4043993274558182, -0.5048554939809333, -0.5109378137292391, -0.7195949070582858, -0.39823233396358, -0.04263927463564533, -0.3277982644302133, -0.22908923562633, -0.4364497069200512, -0.5660531382061676, -0.13635545584163, -1.2693391731666668, -0.47229113871428574, -0.9102479525037037, -1.2149416736014924, -0.33682874971566334, -1.0513962823625, -0.7675852860574468, -1.3300948942857143, -0.5534316445980734, -0.8728907911629412, -0.8882942067485714, -0.6515749219151923, -0.9910295313232558, -0.701829920173913, -0.08989094647632, -0.6717064676150603, -0.4235633512448839, -0.42326979951156996, -0.672337060258645, -0.42937588816609185, -0.398479044968662, -0.47944066875267444, -1.039728285151613, -0.51829623966761, -0.29550429109029336, -1.085857052267742, -0.8130122732101808, -0.9836345033333334, -0.32301316314359335, -1.251196404904762, -0.40790565180727645, -0.8946545795641928, -0.4721425832142857, -0.951504878228]}
{"prompt": "'''\nThe robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n3 3\nRRDLUU\n10 15\nRDDDRRULLRUURRRDDUULL\n100 100\nsolution('''\n1\n3 3\nRRDLUU\n''') == '''\n2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\nL\n''') == '''\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 2\nLL\n2 2\nLDR\n''') == '''\n1 1\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\nR\n''') == '''\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\nD\n''') == '''\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\nU\n''') == '''\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\nR\n2 1\nD\n''') == '''\n1 1\n2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 3\nRRD\n3 3\nLUU\n3 3\nRLL\n''') == '''\n2 1\n2 1\n1 2\n'''\n\n# check the correctness of solution", "solution('''3\n3 3\nRRDLUU\n1 1\nUD\n2 3\nRRDLLL''') == '''2 1\n1 1\n1 1'''", "'' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\n\n# check the performance of solution\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')\nassert '' == solution('')", "solution(__doc__) == '''\n'''", "solution('''\n5\n3 3\nRRDLUU\n1 4\nLLDDRR\n1 4\nUUDDLR\n6 6\nUUDLDLDRRDL\n5 7\nDUURRLDRDL\n''') == '''\n2 1\n1 1\n1 4\n3 4\n3 3\n'''", "solution(\"\"\"1\n2 3\nRRDLUU\n\"\"\") == \"\"\"1 2\"\"\"\nassert solution(\"\"\"2\n2 3\nRRDLUU\n4 5\nsolution(\"1\\n3 3\\nRRDLUU\") == \"2 1\"\nassert solution(\"2\\n2 2\\nRR\\n6 6\\nRRDDLLUURRDDDLL\") == \"1 1\\n3 1\"\nprint(\"Passed!\")", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT, \"sample\"\nassert solution(MY_INPUT) == MY_OUTPUT, \"my\"\nassert solution(TEST_INPUT) == TEST_OUTPUT, \"test\"", "solution(\"1\\n3 3\\nRRDLUU\") == \"2 1\"\nassert solution(\"4\\n3 3\\nRRDLUU\\n5 7\\nURLDDLL\\n6 6\\nUUUURRU\\n5 5\\nLDUUL\") == \"2 1\\n3 1\\n2 3\\n3 3\"\n\n# test time and memory\nimport cProfile\ncProfile.run(\"solution('''1\\n3 3\\nRRDLUU''')\")\ncProfile.run(\"solution('''4\\n3 3\\nRRDLUU\\n5 7\\nURLDDLL\\n6 6\\nUUUURRU\\n5 5\\nLDUUL''')\")\n\n# stress testing\nfrom random import randint, choice\n\ndef generate_stdin():\n    \"\"\"randomly generate a stdin\"\"\"\n    t = randint(1, 10000)\n    print(t)\n    s = []\n    for _ in range(t):\n        n = randint(1, 1000000)\n        m = randint(1, 1000000)\n        cmds = \"\"\n        for _ in range(randint(1, 1000000)):\n            cmds += choice(\"LUDR\")\n        print(n, m)\n        print(cmds)", "solution(\"\"\"4\n3 3\nRRDLUU\n3 3\nRDRRDL\n10 10\nLDUUURDUU\n10 10\nDRULURDUL\n\"\"\") == \"\"\"2 1\n1 2\n5 5\n6 9\n\"\"\"", "solution(\"\") == \"\", \"Test 1 Failed\"\nassert solution(\"\") == \"\", \"Test 2 Failed\"\nassert solution(\"\") == \"\", \"Test 3 Failed\"\nassert solution(\"\") == \"\", \"Test 4 Failed\"\nassert solution(\"\") == \"\", \"Test 5 Failed\"\nassert solution(\"\") == \"\", \"Test 6 Failed\"\nassert solution(\"\") == \"\", \"Test 7 Failed\"\nassert solution(\"\") == \"\", \"Test 8 Failed\"\nassert solution(\"\") == \"\", \"Test 9 Failed\"\nassert solution(\"\") == \"\", \"Test 10 Failed\"\n\nprint(\"All Test Cases Passed\")", "solution('''\n4\n3 3\nRRDLUU\n3 3\nRRDRUU\n3 3\nRRRR\n3 3\nUUUU\n''') == '''\n2 1\n1 2\n1 1\n3 3\n'''", "solution(\"\"\"\n1\n3 3\nRRDLUU\n\"\"\") == \"\"\"\n2 1\n\"\"\"\n\nassert solution(\"\"\"\n4\n4 6\nLDDR\n4 6\nLRDDR\n4 6\nLRDUUD\n4 6\nDUDRL\n\"\"\") == \"\"\"\n1 1\n1 1\n1 1\n4 6\n\"\"\"\n\n#\n# check the performance of solution\n#\n# from datetime import datetime\n# start = datetime.now()\n# print(solution(\"\"\"\n# copy paste\n# test data here\n# \"\"\"))\n# end = datetime.now()\n# print('\\n' + str(end-start))", "solution('''\n3\n3 3\nRRDLUU\n6 5\nDDDUUDDDRUUDUU\n1 4\nLLLL\n''') == '''\n2 1\n3 4\n1 1\n'''", "solution('''\n1\n3 3\nRRDLUU\n''') == '''\n2 1\n'''\n\n# check the performance of solution\n# from random import randint\n# from time import time\n# i = 100\n# n = 10000\n# m = 100000\n# s = ''\n# for j in range(i):\n#     n = randint(1, 1000)\n#     m = randint(1, 100000)\n#     s = ''\n#     for k in range(m):\n#         s += 'LURD'[randint(0, 3)]\n#     print(f'{n} {m}')\n#     print(s)\n# start = time()\n# for j in range(i):\n#     solution(f'{n} {m}\\n{s}')\n# print(f'Time for {i} test cases is {(time() - start)} seconds')", "solution('''\n1\n3 3\nRRDLUU\n''') == '''\n2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\nLLRUDRD\n''') == '''\n1 2\n'''\n\nassert solution('''\n1\n1 1\nLLRUDRD\n''') == '''\n1 1\n'''\n\nassert solution('''\n1\n1 2\nLLRUDRD\n''') == '''\n1 1\n'''\n\nassert solution('''\n2\n2 3\nLLRUDRD\n1 1\nLLRUDRD\n''') == '''\n1 2\n1 1\n'''\n\nassert solution('''\n1\n3 2\nLLRUDRD\n''') == '''\n2 1\n'''\n\nassert solution('''\n1\n2 2\nLLRUDRD\n''') == '''\n1 1\n'''\n\n# check performance of solution\nimport random\nimport string\n\nTEST_CASES = 100\nCOMMANDS_NUM = 10**4\nROW_NUM = 10**4\nCOL_NUM = 10**4\n\nCOMMANDS = ['L', 'R', 'D', 'U']\n\nprint(TEST_C", "solution(\"\"\"1\n3 3\nRRDLUU\"\"\") == \"2 1\"\n\n# print the result\nprint(solution(input()))", "solution('''\n1\n1 1\nUDLR\n''') == '''\n1 1\n'''\nassert solution('''\n1\n3 3\nRRDLUU\n''') == '''\n2 1\n'''\nassert solution('''\n1\n3 3\nRDUULRD\n''') == '''\n1 2\n'''\nassert solution('''\n1\n1 1\nL\n''') == '''\n1 1\n'''\nassert solution('''\n1\n2 2\nUU\n''') == '''\n1 1\n'''\nassert solution('''\n1\n3 2\nRRLLLLLLLLLLLLLLLL\n''') == '''\n3 1\n'''\nassert solution('''\n2\n5 1\nLLLLLLL\n5 1\nRRRRRRR\n''') == '''\n5 1\n1 1\n'''\nassert solution('''\n2\n1 4\nLLRR\n1 4\nRRLL\n''') == '''\n1 4\n1 4\n'''\nassert solution('''\n1\n1000000 1000000\nUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", "solution('''\n4\n3 3\nRRDLUU\n4 4\nRRDUULRD\n2 3\nRRD\n2 2\nUU\n''') == '''\n2 1\n2 3\n2 1\n2 2\n'''", "solution('''\n1\n3 3\nRRDLUU\n''') == '''\n2 1\n'''\n\n# get input\ndef get_input(test_file: str) -> str:\n    res = ''\n    with open(test_file, 'r') as file:\n        for line in file:\n            res += line\n    return res\n\n# get output\ndef get_output(test_file: str) -> str:\n    res = ''\n    with open(test_file, 'r') as file:\n        for line in file:\n            res += line\n    return res\n\n# run the program\ndef run_program(fn: str) -> str:\n    res = ''\n    with open(fn, 'r') as file:\n        for line in file:\n            res += line\n    return res\n\n# test solutions\nif __name__ == '__main__':\n    file_in, file_out = 'tests.txt', 'output.txt'\n    inp = get_input(file_in)\n    expected_out = get_output(file_out)\n    test_out = solution(inp)\n    assert test_out == expected_out, 'test failed, expected: ' + expected_out + ', got: ' + test_out\n    print('test", "\"1 1\" == solution(\"\"\"2\n2 2\nRL\n2 2\nRR\"\"\")\n\n# check the correctness of solution\nassert \"2 1\" == solution(\"\"\"1\n3 3\nRRDLUU\"\"\")\n\nimport sys\n\n# create test inputs\nTEST_INPUTS = [\n        [\"\"\"2\n2 2\nRL\n2 2\nRR\"\"\"],\n        [\"\"\"1\n3 3\nRRDLUU\"\"\"]\n]\n\n# add custom inputs\nTEST_INPUTS += [\n        [\"\"\"1\n3 5\nRLDDRR\"\"\"],\n        [\"\"\"1\n4 7\nRRDLDDLLUU\"\"\"],\n        [\"\"\"1\n2 5\nDDRRUU\"\"\"],\n        [\"\"\"1\n4 7\nLLLLLLLLLLLLLLLLLLLL\"\"\"],\n        [\"\"\"1\n5 1\nU\"\"\"],\n        [\"\"\"1\n5 1\nLLLLLLLLLLLLLLLLLLL\"\"\"],\n        [\"\"\"1\n7 3\nUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUDDLDRUUD", "solution('''\n3\n3 3\nRRDLUU\n3 3\nRRRUUU\n3 3\nRRRLLLDD\n''') == '''\n2 1\n3 1\n2 3\n'''", "solution('''1\n3 3\nRRDLUU''') == '2 1'\n\nassert solution('''3\n3 3\nRRDLUU\n3 3\nRUULDD\n3 3\nRUURDD''') == '''2 1\n2 2\n1 1'''", "solution('''1\n3 3\nRRDLUU''') == '2 1'\nassert solution('''2\n3 3\nRRDLUU\n3 3\nRRDLUU''') == '2 1\\n2 1'\n\n# check the performance of solution\nimport timeit\nprofile = timeit.Timer('solution(test_data)', setup = 'from __main__ import solution; test_data = '''\n1\n3 3\nRRDLUU\n''')\ncount = 10000\nresult = profile.repeat(repeat=count, number=1)\n#print(result)\naverage_time = sum(result) / count\nprint('Performance of solution: {:.2f} ms per loop'.format(average_time * 1000))", "solution(\"\"\"\n1\n3 3\nRRDLUU\n\"\"\") == \"\"\"\n2 1\n\"\"\"\n\n# here the large input, please use #pytest -s flag to show the output\n# assert solution(\"\"\"\n# 1\n# 3 3\n# RRDLUU\n# \"\"\") == \"\"\"\n# 2 1\n# \"\"\"\n\nprint(solution('''\n1\n3 3\nRRDLUU\n'''))", "solution(\"\") == \"\", \"Empty test\"\n\n# clean up the working directory\nimport os\nfolder = \"./tmp\"\nfor the_file in os.listdir(folder):\n    file_path = os.path.join(folder, the_file)\n    try:\n        if os.path.isfile(file_path):\n            os.unlink(file_path)\n        #elif os.path.isdir(file_path): shutil.rmtree(file_path)\n    except Exception as e:\n        print(e)", "\"1 1\" == solution(\"1\\n3 3\\nRRDLUU\")\nassert \"2 1\" == solution(\"1\\n3 3\\nRUURLL\")\nassert \"1 1\" == solution(\"1\\n3 4\\nRRRRRRRRRRRRRR\")\nassert \"1 2\" == solution(\"1\\n3 3\\nDDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", "solution(\"\"\"6\n3 3\nRRDLUU\n2 2\nLL\n2 2\nDD\n2 2\nRR\n2 2\nUU\n2 2\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", "solution('''\n3\n3 3\nRRDLUU\n1 1\nD\n1 2\nUU\n''') == '''\n2 1\n1 1\n1 2\n'''", "solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"\n2\n3 3\nRRDLUU\n6 6\nRRRLDDRU\n\"\"\") == \"\"\"\n2 1\n4 3\n\"\"\"", "solution('''\n3\n3 3\nRRDLUU\n3 3\nLLDDRR\n3 3\nRRRRRR\n''') == '''\n2 1\n2 3\n1 1\n'''", "solution(\"\"\"\n3\n3 3\nRRDLUU\n3 3\nRRDLUU\n5 3\nRRRDUU\n\"\"\") == \"\"\"\n2 1\n2 1\n5 1\n\"\"\", \"Wrong example solution\"\n\nprint(\"Correct answer!\")", "solution(open(\"samples/text01.txt\").read()) == open(\"samples/text01_solution.txt\").read()\nassert solution(open(\"samples/text02.txt\").read()) == open(\"samples/text02_solution.txt\").read()\nassert solution(open(\"samples/text03.txt\").read()) == open(\"samples/text03_solution.txt\").read()\nassert solution(open(\"samples/text04.txt\").read()) == open(\"samples/text04_solution.txt\").read()\nassert solution(open(\"samples/text05.txt\").read()) == open(\"samples/text05_solution.txt\").read()\nassert solution(open(\"samples/text06.txt\").read()) == open(\"samples/text06_solution.txt\").read()\nassert solution(open(\"samples/text07.txt\").read()) == open(\"samples/text07_solution.txt\").read()\nassert solution(open(\"samples/text08.txt\").read()) == open(\"samples/text08_solution.txt\").read()\nassert solution(open(\"samples/text09.txt\").read()) == open(\"samples/text09_solution.txt\").read()\nassert solution(open(\"samples/text10.txt\").", "solution(\n'''\n6\n5 4\nRRDLUU\n1 3\nRRDDRU\n2 2\nLR\n4 2\nRRRLUU\n4 3\nLLLLDD\n8 4\nRRDRUUUUUDRDRD\n'''\n) == '''\n3 1\n1 2\n1 1\n3 2\n2 3\n7 4\n'''", "solution(\"\"\"2\n3 3\nRRDLUU\n3 3\nRDULUD\n\"\"\") == \"\"\"2 1\n2 1\n\"\"\"", "solution('''\n2\n3 3\nRRDLUU\n3 3\nRRDLLUUD\n''') == '''\n2 1\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 3\nRRDLUU\n3 3\nRRDLLUUD\n''') == '''\n2 1\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 3\nRRDLUU\n3 3\nRRDLLUUD\n''') == '''\n2 1\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 3\nRRDLUU\n3 3\nRRDLLUUD\n''') == '''\n2 1\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 3\nRRDLUU\n3 3\nRRDLLUUD\n''') == '''\n2 1\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 3\nRRDLUU\n3 3\nRRDLLUUD\n''') == '''\n2 1\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 3\nRRDLUU\n3 3\nRR", "solution(r'''\n1\n3 3\nRRDLUU\n''') == r'''\n2 1\n'''\nassert solution(r'''\n2\n2 3\nRDD\n3 3\nRRDUUD\n''') == r'''\n1 2\n2 1\n'''\nassert solution(r'''\n3\n3 3\nRRDD\n4 2\nUU\n4 4\nDDUL\n''') == r'''\n2 2\n2 1\n1 2\n'''\nassert solution(r'''\n2\n3 3\nRRRDDD\n3 3\nRRDUUD\n''') == r'''\n1 2\n2 1\n'''\nassert solution(r'''\n4\n5 5\nUDDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUD", "solution(\"\"\"1\n3 3\nRRDLUU\"\"\") == \"2 1\"\n\nassert solution(\"\"\"2\n5 5\nDDUUUU\n2 3\nRR\"\"\") == \"2 1\\n1 2\"", "solution('''4\n3 3\nRRDLUU\n5 5\nRRRLLDLDUURRRRRRRRRRRRRRRD\n10 10\nDDRUURRURRRUURRURRURRRUURR\n1 5\nRRRRR''') == '''2 1\n2 3\n2 4\n1 1'''", "solution(\"\"\"\n1\n3 3\nRRDLUU\n\"\"\") == \"\"\"\n2 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2 3\nRUUL\n4 3\nRRRL\n\"\"\") == \"\"\"\n1 1\n2 1\n\"\"\"", "solution('''\n''') == '''\n'''", "solution('''\n2\n3 3\nRRDLUU\n1 1\nU\n''') == '''\n2 1\n1 1\n'''\n\n# read data for t test cases\nt = int(input())\n\n# solve each test case\nanswers = []\nfor i in range(0, t):\n    n, m = [int(x) for x in input().split()]\n    s = input()\n    answers.append(solution(n, m, s))\n\n# print answers for all test cases\nprint('\\n'.join(answers))", "solution('''\n3\n3 3\nRRDLUU\n3 3\nRRUULL\n3 3\nRULU\n''') == '''\n2 1\n2 2\n2 2\n'''", "solution('''\n2\n3 3\nRRDLUU\n3 3\nRRUL\n''') == '''\n2 1\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 3\nRRDLUU\n3 3\nRRUL\n3 3\nRDLU\n''') == '''\n2 1\n2 3\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n3 3\nRRDLUU\n3 3\nRRUL\n3 3\nRDLU\n1 1\nL\n''') == '''\n2 1\n2 3\n1 2\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\nL\n''') == '''\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\nR\n''') == '''\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\nU\n''') == '''\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\nD\n''') == '''\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1", "solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\nassert solution(input_5) == output_5\nassert solution(input_6) == output_6\nassert solution(input_7) == output_7\nassert solution(input_8) == output_8\nassert solution(input_9) == output_9\nassert solution(input_10) == output_10\nassert solution(input_11) == output_11\nassert solution(input_12) == output_12\nassert solution(input_13) == output_13\nassert solution(input_14) == output_14\nassert solution(input_15) == output_15\nassert solution(input_16) == output_16\nassert solution(input_17) == output_17\nassert solution(input_18) == output_18\nassert solution(input_19) == output_19\nassert solution(input_20) == output_20\nassert solution(input_21) == output_21\nassert solution(input_22) == output_22\nassert solution(input_23) == output_23\nassert solution(input_24) == output_24\nassert solution(input_25) == output_25\nassert", "solution('''\n2\n3 3\nRRDLUU\n3 3\nRRDLUU\n''') == '''\n2 1\n2 1\n'''\n\nassert solution('''\n1\n1 1\nR\n''') == '''\n1 1\n'''\n\nassert solution('''\n1\n1 1\nL\n''') == '''\n1 1\n'''\n\nassert solution('''\n1\n1 1\nD\n''') == '''\n1 1\n'''\n\nassert solution('''\n1\n1 1\nU\n''') == '''\n1 1\n'''\n\nassert solution('''\n2\n2 2\nRR\n2 2\nLL\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n2\n2 2\nLL\n2 2\nRR\n''') == '''\n2 2\n1 1\n'''\n\nassert solution('''\n2\n2 2\nDD\n2 2\nUU\n''') == '''\n2 2\n1 1\n'''\n\nassert solution('''\n2\n2 2\nUU\n2 2\nDD\n''') == '''\n1 1\n2 2\n'''\n\nassert solution('''\n4\n4 3\nRRRDDD\n4 3\nUUULDD\n", "solution(\"input\") == \"output\"", "solution(\"\"\"1\n3 3\nRRDLUU\"\"\") == \"\"\"2 1\"\"\", \"Error: Test 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n1 1\nR\"\"\") == \"\"\"1 1\"\"\", \"Error: Test 2\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4 5\nUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUDUD"], "finish_reason": ["length", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length"], "sum_logprob": [-57.414138648200016, -74.63221885258638, -25.348341330699995, -14.961714126011998, -9.1911228733, -82.90464203339998, -30.96540886300001, -46.7705409226, -20.03642338790499, -147.69033839669495, -60.573648867099976, -23.59972900189, -26.968663080900004, -107.51181848662006, -45.76640766759999, -88.39037036164001, -111.39935682754947, -17.27037086504, -115.09955972278803, -38.2298848512, -114.64046616329493, -179.03987584811009, -25.540910040799993, -35.1298872495, -69.68353145742, -70.91783057320002, -40.04750790637699, -55.80967200093002, -30.23003376266001, -18.217870064300005, -7.435652727199999, -26.9983389754, -21.821473214300003, -49.1225779566, -30.46286468394271, -105.13608455943998, -19.372756252800002, -26.275173408055018, -111.2812250821129, -36.46798912997001, -82.06610989469996, -34.78518228767001, -6.765570954, -41.62260165494997, -23.8060823388, -50.994050945414955, -15.962264279463357, -60.89278048375652, -8.244880793, -51.53292145764996], "mean_logprob": [-0.19138046216066668, -0.24877406284195433, -0.6182522275780488, -0.21373877322874285, -0.7070094517923077, -1.105395227112, -0.10321802954333334, -0.7543635632677419, -0.3396003964051695, -0.49230112798898334, -1.0816723011982143, -0.1710125289992029, -0.4994196866833333, -0.7073145953067105, -0.8973805425019608, -0.4149782646086385, -0.371331189425165, -0.5079520842658823, -0.38366519907596014, -0.6950888154763636, -0.3821348872109833, -0.5967995861603667, -0.5212430620571429, -0.5322710189318182, -0.41478292534178574, -0.7387274018041666, -0.3104457977238527, -0.1860322400031, -0.10076677920886666, -0.4337588110547619, -0.46472829545, -0.7713811135828571, -0.46428666413404257, -0.8469409992517242, -0.101542882279809, -1.2666998139691565, -0.6249276210580645, -0.08758391136018333, -0.3709374169403767, -0.7442446761218368, -1.1090014850635135, -0.5435184732448438, -0.4832550681428571, -0.3106164302608209, -0.5175235291043478, -0.16998016981805, -0.0532075475982112, -0.202975934945855, -0.9160978658888889, -0.17177640485883333]}
{"prompt": "'''\nYou are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\nqwertyuiopasdfghjklzxcvbnm\nb\nasdfghjklzxcvbnmqwertyuiop\na\n''') == '''\n1\n19\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nmvprmngftqrxqkhp\nunpkmokud\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nnxyoqwyzjg\nqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqw", "solution(test_case1) == \"1\"\nassert solution(test_case2) == \"15\"\n\n# check the correctness of solution\nassert solution(test_case1) == \"1\"\nassert solution(test_case2) == \"15\"", "solution('''\n1\nqwertyuiopasdfghjklzxcvbnm\nqwertyuiopasdfghjklzxcvbnm\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nyfzodpuzbslmhgkxawcejqrtvn\nyfzodpuzbslmhgkxawcejqrtvn\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nt\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\ny\n''') == '''\n25\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nz\n''') ==", "solution('''1\nabcdefghijklmnopqrstuvwxyz\nhello\n''') == '13'\nassert solution('''1\nabcdefghijklmnopqrstuvwxyz\nworld\n''') == '19'\nassert solution('''2\nabcdefghijklmnopqrstuvwxyz\nhello\nqwertyuiopasdfghjklzxcvbnm\nworld\n''') == '13\\n19'\n\n# get input\nT = int(input())\ninputs = [input() for _ in range(T)]\n\n# print output\nprint(solution('\\n'.join(inputs)))", "solution(\"example\") == \"expected\"\n\n# auto-submit for score\nfrom codeforces import submit\nsubmission = [\n    [\"example #1\", \"1\"],\n    [\"example #2\", \"2\"],\n    [\"example #3\", \"3\"],\n]\nsubmitted = list()\nfor args in submission:\n    expected = args[1]\n    actual = solution(args[0])\n    if expected == actual:\n        submit(args[0], str(actual))\n        submitted.append(args)\n\nfor args in submitted:\n    print(\"submitted:\", args[0])", "solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nhello\n''') == '13'\n\n# check the correctness of solution\nassert solution('''\n1\nqwertyuiopasdfghjklzxcvbnm\nzxcvbnmasdfghjklqwertyuiop\n''') == '50'\n\n# check the correctness of solution\nassert solution('''\n2\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\nzxcvbnmasdfghjklqwertyuiop\n''') == '''\n13\n50\n'''\n\n# check the correctness of solution\nassert solution('''\n3\nabcdefghijklmnopqrstuvwxyz\nz\nabcdefghijklmnopqrstuvwxyz\nx\nabcdefghijklmnopqrstuvwxyz\nzzzzzzzzzzzzzzzzzzzzzzzzzz\n''') == '''\n1\n1\n52\n'''\n\n# check the correctness of solution\nassert solution('''\n3\nqwertyuiopasdfghjklzxcvbnm\nzxcvbnmasdfghjklqwertyui", "solution(\"\"\"3\naebcdefghijklmnopqrstuvwxyz\nclap\naebcdefghijklmnopqrstuvwxyz\nbark\naebcdefghijklmnopqrstuvwxyz\nsunday\"\"\") == \"\"\"6\n20\n17\"\"\"", "solution('''\n2\nabcd\nad\nabcdefghijklmnopqrstuvwxyz\nz\n''') == '''\n1\n25\n'''", "solution('''\n''') == '''\n'''", "solution(\"\"\"4\nktludmzpdqwsuflhxnrivoce\nmvkvrurcisgq\nbqjqzqfqbq\nznwmspchwnxm\nzfvboqrcezgwhrpjrci\nlamnqdihnhhzwq\ngxqxqxqxqxq\ntlsfzcrrae\ntlsfzcrrae\ncwndf\ncwndf\njvxhcovrpbgusppkfpjfi\njvxhcovrpbgusppkfpjfi\ngxqxqxqxqxq\ntlsfzcrrae\ntlsfzcrrae\ncwndf\ncwndf\njvxhcovrpbgusppkfpjfi\njvxhcovrpbgusppkfpjfi\n\"\"\") == \"\"\"13\n3\n3\n3\n10\n12\n4\n4\n4\n4\n4\n4\n4\n4\n4\n\"\"\"", "solution('''\n2\nqwertyuiopasdfghjklzxcvbnm\nz\nqwertyuiopasdfghjklzxcvbnm\nf\n''') == '''\n7\n4\n'''\n# put your code here", "solution('''3\nqwertyuiopasdfghjklzxcvbnm\ncodeforces\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nfedcba\n''') == '''11\n26\n0\n'''", "solution(\"\"\"3\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nqwertyuiopasdfghjklzxcvbnm\nqwertyuiopasdfghjklzxcvbnm\ntyuiopasdfghjklzxcvbnmqwer\ntyuiopasdfghjklzxcvbnmqwer\"\"\") == \"\"\"26\n26\n26\"\"\"\n\nprint(\"Tests passed\")", "solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nhello\n''') == '13'\n\nassert solution('''\n1\nfghijklmnopqrstuvwxyzabcde\nhello\n''') == '13'\n\nassert solution('''\n1\nqwertyuiopasdfghjklzxcvbnm\nyaroslav\n''') == '10'\n\nassert solution('''\n1\nzzzzzzzzzzzzzzzzzzzzzzzzzz\nzzzzzzzzzzzzzzzzzzzzzzzzzz\n''') == '0'\n\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n''') == '325'\n\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\na\n''') == '0'\n\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nab\n''') == '1'\n\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nabc\n''') == '3'\n\nassert solution('''\n1\nabc", "solution('''\n3\nqwertyuiopasdfghjklzxcvbnm\ncodeforces\nabcd\nqwertyuiopasdfghjklzxcvbnm\ncodeforces\naxbcd\nqwertyuiopasdfghjklzxcvbnm\ncodeforces\n\n''') == '''\n13\n1\n0\n'''", "solution(r'''\n3\nabcdefghijklmnopqrstuvwxyz\nabc\nqwertyuiopasdfghjklzxcvbnm\nsdf\ncba\nsdf\n''') == '''\n3\n8\n8\n'''", "solution(\"1\\naaaaaaaaaaaaaaaaaaaaaaaaaaa\\nab\") == \"4\"\nassert solution(\"1\\naaaaaaaaaaaaaaaaaaaaaaaaaaa\\naabbc\") == \"12\"\nassert solution(\"2\\nabcdefghijklmnopqrstuvwxyz\\nabc\\nabcdefghijklmnopqrstuvwxyz\\nabcdefghijklmnopqrstuvwxyz\") == \"6\\n0\"\nprint(\"OK!\")\n\n'''\nInput:\t\n1\naaaaaaaaaaaaaaaaaaaaaaaaaaa\nab\nOutput:\t\n4\n'''", "solution(\"\"\"2\nqwertyuiopasdfghjklzxcvbnm\nwww\nasdfghjklqwertyuiopzxcvbnm\nqwertyuiopasdfghjklzxcvbnm\npython\nhackerrank\"\"\") == \"\"\"\n4\n13\n\"\"\", \"Should be: \\n4\\n13\"", "solution('''\n2\nabcdefghijklmnopqrstuvwxyz\nbac\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n''') == '''\n3\n0\n'''", "solution('''\n2\nabcdifghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\nhello\n''') == '''\n13\n0\n'''", "solution('''\n2\nqwertyuiopasdfghjklzxcvbnm\nqwertyuiopasdfghjklzxcvbnm\nqwertyuiopasdfghjklzxcvbnm\nazertyuiopqsdfghjklmwxcvbn\n''') == '''\n0\n19\n'''", "solution(stdin='''\n2\nabcdefghijklmnopqrstuvwxyz\njava\nqwertyuiopasdfghjklzxcvbnm\npython\n''') == '''\n31\n52\n'''\n# print to stdout your solution to the problem\nprint(solution(stdin='''\n2\nabcdefghijklmnopqrstuvwxyz\njava\nqwertyuiopasdfghjklzxcvbnm\npython\n'''))", "solution(\"2\\nabcdefghijklmnopqrstuvwxyz\\nabcdefghijklmnopqrstuvwxyz\\nqwertyuiopasdfghjklzxcvbnm\\nqwertyuiopasdfghjklzxcvbnm\") == '0\\n0'\n\n# upload the solution to judge system\nimport requests\nimport json\n\ndef upload_solution(partId: str, output: str, source: str) -> None:\n    url = 'https://www.hackerrank.com/rest/contests/master/challenges/print-the-word/submissions'\n    data = {\n        'partId': partId,\n        'langId': 5,\n        'source': source,\n        'output': output,\n    }\n    response = requests.post(url, json=data)\n    print(response.text)\n\ndef get_input(partId: str = None) -> str:\n    url = 'https://www.hackerrank.com/rest/contests/master/challenges/print-the-word/download_testcases'\n    params = {}\n    if partId is not None:\n        params = {'partId': partId}\n    response = requests.get(url,", "solution('''\n3\nqwertyuiopasdfghjklzxcvbnm\ncodeforces\nabcdefghijklmnopqrstuvwxyz\nwelcome\naieou\naeiou\n''') == '''\n10\n0\n0\n'''\nprint('Well Done')\n\n# submit in codeforces\n# http://codeforces.com/contest/739/problem/A\nimport requests\nimport re\n\ndef submit_codeforces(stdin: str) -> str:\n    url = 'http://codeforces.com/contest/739/problem/A'\n    data = {\n        'csrf_token': '6d0b329194718e42f7a8f2d861b5f5b5',\n        'action': 'submitSolutionFormSubmitted',\n        'submittedProblemCode': 'A',\n        'programTypeId': '41',\n        'source': stdin,\n        'tabSize': '4',\n        'sourceFile': '',\n        '_tta': '711',\n    }\n    response = requests.post(url, data=data)\n    html = response.text\n    match = re.search(r'<div class=\"problem-statement", "solution('''1\nqwertyuiopasdfghjklzxcvbnm\ncodeforces''') == '''9'''\n\nassert solution('''1\nzxcvbnmasdfghjklqwertyuiop\ndfujfgkukjhepkmzcnhfjvcgk''') == '''23'''\n\nassert solution('''3\nqwertyuiopasdfghjklzxcvbnm\ncodeforces\nqazwsxedcrfvtgbyhnujmikolp\nrrt\nzxcvbnmasdfghjklqwertyuiop\ndfujfgkukjhepkmzcnhfjvcgk''') == '''9\n3\n23'''", "solution('''\n2\nabcdefghijklmnopqrstuvwxyz\ncba\nqwertyuiopasdfghjklzxcvbnm\nzxcvbnm\n''') == '''\n13\n13\n'''", "solution('''\n3\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nzyxwvutsrqponmlkjihgfedcba\nzyxwvutsrqponmlkjihgfedcba\nqwertyuiopasdfghjklzxcvbnm\nqwertyuiopasdfghjklzxcvbnm\n''') == '''\n26\n26\n19\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n''') == '''\n26\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nzyxwvutsrqponmlkjihgfedcba\n''') == '''\n26\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nqwertyuiopasdfghjklzxcvbnm\n''') == '''\n19\n'''\n\n# check the correctness of solution\n", "solution(solution_input) == solution_output\n\n# show the output in console\nprint(solution(solution_input))", "solution(\"1\\na b c d e f g h i j k l m n o p q r s t u v w x y z\\nhello\") == \"13\"\nassert solution(\"1\\nh e l l o a b c d f g i j k m n p q r s t u v w x y z\\nhello\") == \"20\"\nassert solution(\"1\\nh e l l o a b c d f g i j k m n p q r s t u v w x y z\\nhelloworld\") == \"28\"\nassert solution(\"1\\nh e l l o a b c d f g i j k m n p q r s t u v w x y z\\nhelloworldnow\") == \"32\"\nassert solution(\"1\\nh e l l o a b c d f g i j k m n p q r s t u v w x y z\\nhelloworldnowandthen\") == \"41\"\nassert solution(\"3\\nh e l l o a b c d f g i j k m n p q r s t u v w x y z\\nhelloworldnowandthen\\nabcdefghijklmnopqrstuvwxyz\\nhello\\nabcdefghijklmnopqrstuvwxyz\\nhelloworldnowand", "solution(\"\") == \"\", \"The test is failed\"\nassert solution(\"\") == \"\", \"The test is failed\"\nassert solution(\"\") == \"\", \"The test is failed\"\nassert solution(\"\") == \"\", \"The test is failed\"\nassert solution(\"\") == \"\", \"The test is failed\"", "solution(\"\"\"2\nabcdefghijklmnopqrstuvwxyz\ncba\nhello\ndog\"\"\") == \"\"\"1\n13\"\"\"", "solution('''\n2\nabcdefghijklmnopqrstuvwxyz\nabbz\ndcehjklnofpbqgtwvuirxyzasm\ngwqwq\n''') == '1\\n29'", "solution('''\n3\nabcdefghijklmnopqrstuvwxyz\nabcd\nsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfs", "solution(\"\"\"\n2\nqwertyuiopasdfghjklzxcvbnm\nzxc\nzxc\nzxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxczxc", "solution('''\n3\nabcdefghijklmnopqrstuvwxyz\ncba\nabcdefghijklmnopqrstuvwxyz\nabc\nabcdefghijklmnopqrstuvwxyz\nz\n''') == '''\n2\n3\n52\n'''\nassert solution('''\n3\nabcdefghijklmnopqrstuvwxyz\nzzzzzzzzzzzzzzzzzzzzzzzzzz\nqwertyuiopasdfghjklzxcvbnm\nmnbvcxzlkjhgfdsapoiuytrewq\nzxcvbnmasdfghjklqwertyuiop\nponmlkjihgfedcbaqwertyuiop\n''') == '''\n78\n19\n21\n'''\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n''') == '''\n0\n'''\nassert solution('''\n5\naaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaa", "(solution(test_01) == expected_01)\nassert (solution(test_02) == expected_02)\nassert (solution(test_03) == expected_03)\n\n# check the performance of solution\nassert (solution(test_04) == expected_04)\nassert (solution(test_05) == expected_05)\n\nprint(\"all tests passed.\")", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution(\"\") == \"\", \"Input: {}\".format(\"\")\nassert solution(\"\") == \"\", \"Input: {}\".format(\"\")\nassert solution(\"\") == \"\", \"Input: {}\".format(\"\")", "solution(\"\"\"4\nabcdefghijklmnopqrstuvwxyz\nabacaba\nabcdefghijklmnopqrstuvwxyz\nwekforpc\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nabcdefghijklmnopqrstuvwxyz\na\"\"\") == \"12\\n9\\n10\\n0\\n\"", "solution(\"\"\"2\nqwertyuiopasdfghjklzxcvbnm\nhello\nabcdefghijklmnopqrstuvwxyz\nddasd\n\"\"\") == \"\"\"13\n13\n\"\"\"\nassert solution(\"\"\"3\njxetjmkfzsfoqcqgqzqej\nztj\npoxsnvczncp\nsqj\ngxzlpwws\ns\n\"\"\") == \"\"\"3\n1\n2\n\"\"\"\nassert solution(\"\"\"2\nabcd\ndab\nabcd\naa\n\"\"\") == \"\"\"1\n1\n\"\"\"\n\nprint(\"passed\")", "solution(\"./tests/input01.txt\") == open(\"./tests/output01.txt\").read()\n\n# get input for local run\nwith open(\"./tests/input01.txt\") as f:\n    print(solution(f.read()))", "solution('''\n2\nabcdefghijklmnopqrstuvwxyz\nabc\nabcdefghijklmnopqrstuvwxyz\naaa\n''') == '3\\n3'\n\n# check the correctness of solution\nassert solution('''\n3\nqwertyuiopasdfghjklzxcvbnm\nqwertyuiopasdfghjklzxcvbnm\nzxcvbnmasdfghjklqwertyuiop\nasdfghjklzxcvbnmqwertyuiop\n''') == '0\\n0\\n0'\n\n# check the correctness of solution\nassert solution('''\n5\nabcdefghijklmnopqrstuvwxyz\na\nabcdefghijklmnopqrstuvwxyz\nz\nabcdefghijklmnopqrstuvwxyz\naz\nabcdefghijklmnopqrstuvwxyz\nbz\nabcdefghijklmnopqrstuvwxyz\nza\n''') == '0\\n1\\n2\\n2\\n1'\n\n# check the correctness of solution\nassert solution('''\n5\nabcdefghijklmnopqrstuvwxyz\nabcdefghijkl", "solution('''\\\n1\nfghijklmnopqrstuvwxyzabcde\nab\n''') == '3'\n\nassert solution('''\\\n3\ndcbaz\nab\nejp mysljylc kd kxveddknmc re jsicpdrysi\nour language is impossible to understand\nrbcpc ypc rtcsra dkh wyfrepkym veddknkmkrkcd\nthere are twenty six factorial possibilities\nde kr kd eoya kw aej tysr re ujdr lkgc jv\n''') == '''\\\n3\n5\n2\n'''", "solution('''\n2\nabcdefghijklmnopqrstuvwxyz\nabcd\ncba\nhello\n''') == '''\n4\n13\n'''", "solution('''\n3\nqwertyuiopasdfghjklzxcvbnm\nabc\nabcdefghijklmnopqrstuvwxyz\nabcd\ndzxcvbnmasdfghjklqwertyuiop\nthequickbrownfoxjumpsoverthelazydog\n''') == '''\n3\n26\n46\n'''\n\n# check the correctness of solution\nassert solution('''\n2\nabcd\nb\nabcdefghijklmnopqrstuvwxyz\nbaa\n''') == '''\n1\n0\n'''\n\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n''') == '''\n0\n'''\n\n# submit solution\nsolution(open('input.txt').read())", "solution('''\n1\nqwertyuiopasdfghjklzxcvbnm\nqwerty\n''') == '1'\n\nassert solution('''\n1\nzxcvbnmasdfghjklqwertyuiop\nac\n''') == '26'\n\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n''') == '0'\n\nassert solution('''\n1\nesoululmyoqgdjxmhqmqcshzhi\nmwlw\n''') == '17'\n\nassert solution('''\n1\nxlxnebxxpthxhxuxcjxwfuexph\nxyxx\n''') == '9'\n\nassert solution('''\n1\nopfhjorwvwppkwdzujndkrbjgf\nph\n''') == '6'\n\nassert solution('''\n1\ngwzwxfdcwkivwyycjvrdytgtwk\nck\n''') == '28'\n\nassert solution('''\n1\npqynljjpkndgclzkdggtqcxlxm\nqq\n", "solution(\"\"\"\n2\nabcdefghijklmnopqrstuvwxyz\nabc\nabcdefghijklmnopqrstuvwxyz\ncba\n\"\"\") == \"\"\"\n2\n0\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n1\nlfvbcdfwcqqikdwdfqvc\nxpx\n\"\"\") == \"\"\"\n0\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"\n1\nzrhpkxabqvfxsijywegmjbgnro\nhjmtozehvbegjbwqqw\n\"\"\") == \"\"\"\n30\n\"\"\", \"Example 3\"\n\nassert solution(\"\"\"\n1\nftvhjvrjouzwewkdwf\nsabvht\n\"\"\") == \"\"\"\n9\n\"\"\", \"Example 4\"\n\nassert solution(\"\"\"\n2\nklmhayjipxvbcsgtzqwd\nijgydjpz\naaaabbbbbcccccddddddd\nqdz\n\"\"\") == \"\"\"\n5\n5\n\"\"\", \"Example 5\"\n\n# execute tests\nwith open('testcases.txt', 'r') as testcases_file:\n    for testcase in testcases_file.readlines():\n        if testcase != '\\n':", "solution(\"\"\"\n1\nqwertyuiopasdfghjklzxcvbnm\nasdf\n\"\"\") == \"\"\"\n6\n\"\"\"\n\nassert solution(\"\"\"\n1\nabcdefghijklmnopqrstuvwxyz\nzzzzzzzzzzzzzzzzzzzzzzzzzz\n\"\"\") == \"\"\"\n50\n\"\"\"\n\nassert solution(\"\"\"\n2\nabcd\nzzz\nzzz\nabcd\n\"\"\") == \"\"\"\n12\n3\n\"\"\"", "solution(INPUT_TEXT) == OUTPUT_TEXT\n\n# print(solution(INPUT_TEXT))", "solution('''\n1\na\nb\n''') == '1'\n\nassert solution('''\n2\na\nb\na\nb\n''') == '1\\n1'\n\nassert solution('''\n2\na\naa\na\naaa\n''') == '1\\n3'\n\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n''') == '351'\n\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij"], "finish_reason": ["length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length"], "sum_logprob": [-182.0191648274301, -31.86948271566, -67.373444728622, -46.159020480889986, -110.99387285129997, -62.038288654673025, -57.76441738888999, -23.146346030500002, -7.790828103, -516.5484648197, -38.20533861948, -29.090017962620006, -36.48322917808999, -65.77331939047492, -41.51256271271999, -31.708748589114002, -71.73594465626003, -57.52888494787, -19.942501963090002, -17.655444778199996, -19.573081557987003, -57.14013051446103, -81.80394485113597, -208.90019252214697, -138.458840194044, -22.74714429072, -38.356244600766026, -23.962319596630007, -70.23547716785005, -19.71065758222, -26.525850045380007, -89.64669118868999, -30.127477372300003, -29.495128303499996, -84.16390378683968, -36.85608110397549, -11.914078575940293, -17.004741939394002, -53.67579628832001, -249.0161455857399, -39.715301802500015, -69.35728024957996, -58.389974411043, -19.091011152159997, -88.61999314184004, -522.4050928206768, -520.0589820627644, -46.617262911199994, -18.338143569600003, -48.98729305375005], "mean_logprob": [-0.6067305494247667, -0.5401607239942373, -0.22457814909540666, -0.29214569924613926, -0.8043034264586957, -0.20679429551557665, -0.7600581235380263, -0.5511034769166667, -0.5564877216428572, -2.025680254194902, -0.6162151390238709, -0.32322242180688887, -0.31182247160760684, -0.21924439796825002, -0.44637164207225805, -0.4878269013709846, -0.5016499626311888, -0.6931190957574699, -0.2932720876925, -0.3210080868763636, -0.23582025973478313, -0.4722324835905868, -0.27267981617045334, -0.6963339750738233, -0.7778586527755281, -0.379119071512, -0.12785414866922, -0.7729780515041936, -0.23411825722616667, -0.2856617040901449, -0.757881429868, -1.5456326067015518, -0.10042492457433333, -0.09831709434500001, -0.280546345956132, -0.4141132708311854, -0.03971359525313433, -0.3618030199871064, -0.5477122070236735, -1.7055900382584932, -0.6405693839112904, -0.23119093416526668, -0.38414456849370393, -0.44397700353860464, -0.43229264947239027, -1.7413503094022567, -1.7335299402092132, -0.41997534154234234, -0.7053132142153846, -0.16329097684583332]}
{"prompt": "'''\nYelisey has an array a of n integers.\n\nIf a has length strictly greater than 1, then Yelisei can apply an operation called minimum extraction to it: \n\n  1. First, Yelisei finds the minimal number m in the array. If there are several identical minima, Yelisey can choose any of them. \n  2. Then the selected minimal element is removed from the array. After that, m is subtracted from each remaining element. \n\n\n\nThus, after each operation, the length of the array is reduced by 1.\n\nFor example, if a = [1, 6, -4, -2, -4], then the minimum element in it is a_3 = -4, which means that after this operation the array will be equal to a=[1 {- (-4)}, 6 {- (-4)}, -2 {- (-4)}, -4 {- (-4)}] = [5, 10, 2, 0].\n\nSince Yelisey likes big numbers, he wants the numbers in the array a to be as big as possible.\n\nFormally speaking, he wants to make the minimum of the numbers in array a to be maximal possible (i.e. he want to maximize a minimum). To do this, Yelisey can apply the minimum extraction operation to the array as many times as he wants (possibly, zero). Note that the operation cannot be applied to an array of length 1.\n\nHelp him find what maximal value can the minimal element of the array have after applying several (possibly, zero) minimum extraction operations to the array.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the original length of the array a. The second line of the description lists n space-separated integers a_i (-10^9 \u2264 a_i \u2264 10^9) \u2014 elements of the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of them containing the answer to the corresponding test case. The answer to the test case is a single integer \u2014 the maximal possible minimum in a, which can be obtained by several applications of the described operation to it.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\\\n3\n3\n1 6 -4\n2\n10 10\n2\n1000000000 1000000000\n\"\"\") == \"\"\"\\\n-4\n10\n0\n\"\"\"\n\n# check the efficiency of solution\nimport resource\nimport time\n_input = open(\"input.txt\", \"r\", encoding=\"utf-8\")\nstart = time.time()\nprint(solution(_input))\nfinish = time.time()\nprint(f\"{(finish - start) * 1000}ms\")\nprint(f\"{resource.getrusage(resource.RUSAGE_SELF).ru_maxrss}kb\")", "solution('''3\n4\n1 6 -4 -2\n3\n1 -2 -3\n2\n-2 -2\n''') == '''-2\n-3\n-2\n'''", "solution(\"3\n2\n2 3\n3\n2 2 2\n3\n1 1 1\") == \"1\n1\n0\"\n\n# check the correctness of solution\nassert solution(\"1\n3\n1 2 3\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"2\n2\n1 1\n2\n1 -2\") == \"1\n-2\"\n\n# check the correctness of solution\nassert solution(\"1\n10\n1 1 1 1 1 1 1 1 1 1\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"1\n1\n1\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"5\n5\n5 5 5 5 5\n5\n5 5 5 5 4\n5\n5 5 5 4 4\n5\n5 5 4 4 4\n5\n5 4 4 4 4\") == \"4\n4\n4\n4\n4\"\n\n# check the correctness of solution\nassert solution(\"1\n5\n5 5 5 5 5\") == \"5\"\n\n# check the correctness of solution\nassert solution(\"1\n5\n1 2 3 4 5\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"1\n10\n1000000001 1000000002 1000000003 1000000004 1000000005 1000000006 1000000007 1000000008 1000000009 100", "solution('''\n3\n5\n-1 7 -3 -5 1\n3\n3 3 3\n3\n2 2 2\n''') == '''\n1\n3\n2\n'''", "solution('''\n3\n3\n1 2 3\n3\n1 2 1\n5\n1 6 -4 -2 -4\n''') == '''\n3\n1\n0\n'''\n\n# check the performance of solution\nimport timeit\nimport random\n\ndef generator(n):\n    yield n\n    array = []\n    while len(array) < n:\n        array.append(random.randint(-1000000000, 1000000000))\n    yield array\n\nproblems = [\n    [\n        3,\n        [\n            [3, [1, 2, 3]],\n            [3, [1, 2, 1]],\n            [5, [1, 6, -4, -2, -4]]\n        ]\n    ],\n    [\n        4,\n        [\n            [1, [1]],\n            [1, [2]],\n            [2, [3, 5]],\n            [10, [4, 6, -3, 5, 8, 9, -1, 2, 0, 1]]\n        ]\n    ],\n    [\n        5,\n        [\n            [100000, list(range(1, 100001))],\n            [100000, list(range(100000, 0, -1))],\n            [100000, [random", "solution('''\n2\n2\n1 1\n2\n-1 1\n''') == '''\n1\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 2 4\n3\n-2 -3 -1\n2\n1000000000 1000000000\n''') == '''\n1\n-1\n1000000000\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n6\n-5 6 -1 8 -4 8\n4\n2 3 4 1\n1\n1000000000\n4\n-5 6 -1 8\n''') == '''\n-1\n1\n1000000000\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n2\n1 1\n2\n1 1\n2\n1 1\n2\n1 1\n2\n1 1\n''') == '''\n1\n1\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1\n1\n1\n1\n1\n1\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1\n1\n1\n1\n1\n1\n1\n''') == '''\n'''\n\n# check the correctness", "solution(r'''\n1\n1 -2\n''') == r'''\n-2\n'''\nassert solution(r'''\n1\n3 1 2 3\n''') == r'''\n1\n'''\nassert solution(r'''\n2\n3 1 2 3\n3 1 2 1\n''') == r'''\n1\n1\n'''\n\n# submit solution\nprint(solution(r'''\n1\n1 -2\n'''))", "solution('''\n1\n5\n1 6 -4 -2 -4\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3\n1 3 3\n3\n3 3 3\n''') == '''\n3\n3\n'''", "solution(stdin='''\n1\n3\n1 2 3\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n4\n10 10 2 10\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n2\n4\n10 10 2 10\n4\n10 10 2 10\n''') == '''\n2\n2\n'''\n\nprint('All tests passed')", "solution(solution_input) == solution_output", "solution('''\n1\n1\n1\n''') == '''\n1\n'''\n\n# d: debug output\ndef debug(*args, **kwargs):\n    print(*args, **kwargs, file=sys.stderr)\n\n# Read the first line of the input\nt = int(input())\n\n# iterate on each test case\nfor i in range(1, t + 1):\n    # read the length of the array\n    n = int(input())\n    # read the array\n    a = [int(s) for s in input().split(\" \")]\n\n    # print the answer\n    # debug(a)\n    a = [(-x) for x in a]\n    # debug(a)\n    print(str(-(max(a))))\n    \n    # I discovered that the answer is -(max(a))", "solution(example_input) == example_output\n\nsolution(stdin)", "solution(\"\") == \"\"", "solution('''\n1\n4\n4 5 6 7\n''') == '4', 'test 1'\n\nassert solution('''\n1\n4\n4 -5 6 7\n''') == '7', 'test 2'\n\nassert solution('''\n2\n2\n9 9\n2\n1 1\n''') == '''\n9\n1\n''', 'test 3'\n\nassert solution('''\n2\n2\n9 9\n2\n10 10\n''') == '''\n9\n10\n''', 'test 4'\n\nassert solution('''\n2\n2\n10 10\n2\n10 10\n''') == '''\n10\n10\n''', 'test 5'\n\nassert solution('''\n2\n2\n10 10\n2\n10 10\n''') == '''\n10\n10\n''', 'test 6'\n\nassert solution('''\n3\n3\n-10 2 3\n3\n-10 -10 2\n3\n-10 -10 -10\n''') == '''\n2\n2\n-10\n''', 'test 7'\n\nassert solution('''\n3\n3\n-10 2 3\n3\n-10 -10 2\n3\n-10 -10 -10\n''') == '''\n2\n2\n-10\n''', 'test", "solution(get_stdin()) == get_stdout()\n\n# submit solution\nprint(solution(get_stdin()))", "solution('''3\n3\n1 2 3\n3\n1 6 -4\n3\n-4 -2 -4''') == '''3\n6\n-4'''", "solution('''\n1\n1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n2\n2\n1 2\n3\n-2 3 3\n''') == '''\n1\n3\n'''", "(\n    solution('''5\n5\n1 -3 4 4 6\n3\n1 -3 -3\n3\n-3 -3 -3\n2\n1 -3\n2\n-2 3''') == '''-2\n-2\n-2\n-3\n-2'''\n)\n\n'''\nsolution\n'''\nfrom sys import stdin\nfrom typing import List\nfrom typing import Tuple\nfrom typing import Set\nfrom typing import Dict\nfrom typing import Iterable\nfrom typing import Counter\nfrom typing import Any\nfrom typing import TypeVar\nfrom typing import Optional\nfrom typing import Generator\nfrom operator import itemgetter\nfrom itertools import chain\nfrom itertools import combinations\nfrom functools import reduce\nfrom functools import lru_cache\nfrom functools import partial\nfrom functools import cmp_to_key\nfrom functools import total_ordering\nfrom collections import Counter\nfrom collections import deque\nfrom collections import defaultdict\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom bisect import bisect\nfrom bisect import insort_left\nfrom bisect import insort_right\nfrom bisect import insort\nfrom heapq import merge\nfrom heapq import heappush\nfrom heapq import heappop\nfrom heapq import heap", "solution(\"\"\"\n4\n4\n1 6 -4 -2\n4\n1 6 -4 -4\n4\n6 4 2 1\n4\n-2 -4 6 1\n\"\"\") == \"\"\"\n-4\n-4\n1\n-2\n\"\"\"\n\n# check the performance of solution\nassert solution(\"\"\"\n4\n4\n1 6 -4 -2\n4\n1 6 -4 -4\n4\n6 4 2 1\n4\n-2 -4 6 1\n\"\"\") == \"\"\"\n-4\n-4\n1\n-2\n\"\"\"", "(solution(\"\"\"3\n3\n-4 -2 -4\n5\n10 10 10 10 10\n1\n42\"\"\") == \"\"\"2\n0\n42\"\"\")\n\n# check the performance of solution\nassert (solution(\"\"\"9\n8\n-6 9 4 -5 6 4 -5 -5\n8\n5 4 4 -5 5 -1 5 5\n9\n9 -8 6 5 7 -5 9 -6\n10\n-5 -8 -8 5 7 9 -7 6 -9\n11\n9 -8 -8 6 -6 8 -6 6 -5 9\n7\n-8 5 -1 7 -1 -6\n5\n6 -9 -6 5 -6\n7\n-5 5 -6 7 -5 6\"\"\") == \"\"\"6\n5\n9\n9\n9\n9\n5\n5\n6\"\"\")\n\nassert (solution(\"\"\"8\n8\n-6 9 4 -5 6 4 -5 -5\n8\n5 4 4 -5 5 -1 5 5\n9\n9 -8 6 5 7 -5 9 -6\n10\n-5 -8 -8 5 7 9 -7 6 -9\n11\n9 -8 -8 6 -6 8 -6 6 -5 9\n7\n-8 5 -1 7 -1 -6\n5\n6 -9 -6 5 -6", "solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Custom test 1\"\nassert solution(\"\") == \"\", \"Custom test 2\"\nassert solution(\"\") == \"\", \"Custom test 3\"\nassert solution(\"\") == \"\", \"Custom test 4\"\n\n# new line for better readability in console output\nprint(\"\\n\")\n\nprint(\"This problem already has a solution with explanation\")\n\n# new line for better readability in console output\nprint(\"\\n\")\n\n# TODO: merge with above function and separate method for test data\n# read the input from stdin\ndef read():\n    lines = []\n    for line in sys.stdin:\n        lines.append(line.rstrip('\\n'))\n    return lines\n\n# this function creates testcases.txt and solution.txt\ndef main():\n    lines = read()\n    f = open(\"testcases.txt\", \"w+\")\n    f.write(lines[0] + \"\\n\")\n    f.write(lines[1] + \"\\n\")\n    f.close()\n    f = open(\"solution.txt\", \"w+\")\n    f.write(lines[0] + \"\\n\")\n    f.write(lines[2] + \"\\n\")\n    f.close()\n\n# call the", "solution(r'''\n3\n3\n3 1 2\n3\n3 2 1\n3\n1 6 -4\n''') == r'''\n3\n2\n0\n'''\n\n# print(solution(r'''\n# 3\n# 3\n# 3 1 2\n# 3\n# 3 2 1\n# 3\n# 1 6 -4\n# '''))\n\n# @pytest.mark.parametrize(('in_str', 'out_str'), [\n#     (r'''\n# 3\n# 3\n# 3 1 2\n# 3\n# 3 2 1\n# 3\n# 1 6 -4\n# ''', r'''\n# 3\n# 2\n# 0\n# '''),\n# ])\n# def test_solution(in_str, out_str):\n#     assert solution(in_str) == out_str", "solution(\"\"\"\n2\n2\n1 2\n2\n-1 -2\n\"\"\") == \"\"\"\n1\n-2\n\"\"\"\n\n# get test cases from stdin\nlines = []\nwhile True:\n    try:\n        lines.append(input())\n    except EOFError:\n        break\n\n# run solution with given input\nprint(solution(\"\\n\".join(lines)))", "solution('''\n5\n5\n5 3 -2 2 4\n7\n1 -1 2 -3 4 -5 6\n3\n-2 -2 -2\n7\n-5 -5 -5 -5 -5 -5 -5\n1\n42\n''') == '''\n5\n1\n-2\n-5\n42\n'''\n\n# test 1\ntest_input = [\n    '5',\n    '5',\n    '5 3 -2 2 4',\n    '7',\n    '1 -1 2 -3 4 -5 6',\n    '3',\n    '-2 -2 -2',\n    '7',\n    '-5 -5 -5 -5 -5 -5 -5',\n    '1',\n    '42',\n]\n\nprint('Input:')\nprint('\\n'.join(test_input))\n\nprint('\\nOutput:')\nprint('\\n'.join(solution(stdin=str('\\n'.join(test_input))).split('\\n')))", "solution(\"1\\n3\\n1 2 3\") == \"3\"\nassert solution(\"3\\n6\\n2 3 3 3 3 3\\n2\\n1 1\\n4\\n1 2 3 4\") == \"3\\n1\\n1\"\n\n# run the testing\nfrom myio import assert_io\nfrom myio import main\nassert_io(solution, \"sample\", \"\"\"\n3\n3\n10 2 7\n3\n1 5 5\n2\n1 2\n\"\"\")\nassert_io(solution, \"sample_0\", \"\"\"\n5\n5\n5 5 5 5 5\n5\n1 5 5 5 5\n5\n5 5 5 5 1\n5\n5 5 5 2 5\n5\n5 5 5 2 2\n\"\"\")\nassert_io(solution, \"sample_1\", \"\"\"\n3\n6\n0 1 0 1 0 0\n6\n0 0 0 0 0 0\n6\n1 0 1 0 1 0\n\"\"\")\nassert_io(solution, \"sample_2\", \"\"\"\n4\n4\n1 1 1 1\n4\n1 1 1 2\n4\n1 1 2 1\n4\n1 2 1 1\n\"\"\")\nassert_io(solution, \"sample_3\", \"\"\"\n4\n4\n1 0 1 0\n4\n1 0 1 1\n4\n1 1", "solution('''\n1\n1\n1\n''') == '''\n1\n'''\nassert solution('''\n2\n2\n1 6\n2\n1 -1\n''') == '''\n1\n0\n'''\nassert solution('''\n3\n3\n-10 1 5\n3\n1 6 -4\n3\n-10 10 100\n''') == '''\n-10\n-4\n-10\n'''\n\n# this part is for local testing, run the following command to test on you local machine\n# cat input.txt | python3 solution.py\n\n# submit the answer to the question\n# have to submit the code as well\n# in case of problems with judging, please try to submit the answer first\n# because there are problems with automatic judging, sometimes the answer is judged as wrong even though it is correct\n# it is rare but happens\n# these problems normally get fixed in a few days\n# meanwhile it is better to submit the answer because there is a chance that the answer is correct and it is judged as wrong\n# when you submit the code as well, you increase this chance\nimport requests\n\nurl = 'https://www.hackerrank.com/challenges/maximum-minimum/submissions/languages/python3'\nfiles = {'answer': ('solution.py', open('solution.py',", "solution(\"4\\n4\\n-4 -4 -4 -4\\n3\\n-4 -4 -4\\n3\\n-4 -4 -1\\n3\\n-4 -4 100\") == \"3\\n3\\n-1\\n3\"\n\n# test cases\ntestCases = [\n    {'input': \"4\\n4\\n-4 -4 -4 -4\\n3\\n-4 -4 -4\\n3\\n-4 -4 -1\\n3\\n-4 -4 100\", 'expected': \"3\\n3\\n-1\\n3\"},\n    {'input': \"1\\n3\\n-4 -4 -3\", 'expected': \"3\"},\n    {'input': \"3\\n3\\n-4 -4 -3\\n3\\n-4 -4 -2\\n3\\n-4 -4 -1\", 'expected': \"3\\n2\\n-1\"},\n    {'input': \"4\\n4\\n-4 -4 -4 -4\\n3\\n-4 -4 -4\\n3\\n-4 -4 -1\\n3\\n-4 -4 100\", 'expected': \"3\\n3\\n-1\\n3\"},\n    {'input", "solution('''\n2\n2\n-2 2\n3\n1 6 -4\n''') == '''\n-2\n-4\n'''\n\nprint(solution('''\n3\n3\n-3 1 3\n2\n-2 2\n3\n1 6 -4\n'''))", "solution('''\n3\n3\n3 7 2\n4\n1 6 -4 -2\n5\n1 6 -4 -2 -4\n''') == '''\n2\n6\n-4\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''", "(solution('''\n2\n5\n1 6 -4 -2 -4\n5\n1 0 1 -1 0\n''') == '''\n2\n0\n''')", "solution('''\n1\n5\n1 6 -4 -2 -4\n''') == '-1'\n\n# check performance\nimport timeit\n\ndef performance():\n    test_cases = [\n        '''\n1\n5\n1 6 -4 -2 -4\n''',\n        '''\n5\n5\n1 6 -4 -2 -4\n5\n1 2 -4 -2 -4\n5\n1 6 -4 -2 -4\n1\n1\n1\n        ''',\n        '''\n100\n5\n1 6 -4 -2 -4\n5\n1 2 -4 -2 -4\n5\n1 6 -4 -2 -4\n1\n1\n1\n5\n1 6 -4 -2 -4\n5\n1 2 -4 -2 -4\n5\n1 6 -4 -2 -4\n1\n1\n1\n5\n1 6 -4 -2 -4\n5\n1 2 -4 -2 -4\n5\n1 6 -4 -2 -4\n1\n1\n1\n5\n1 6 -4 -2 -4\n5\n1 2 -4 -2 -4\n5\n1 6 -4 -2 -4\n1\n1\n1\n5\n1 6 -4 -2 -4\n5\n1 2 -4 -2 -4\n", "solution(r'''1\n5\n1 6 -4 -2 -4''') == r'''10'''\nassert solution(r'''1\n2\n1 -1''') == r'''1'''\nassert solution(r'''1\n5\n1 2 3 4 5''') == r'''1'''\nassert solution(r'''3\n3\n1 -1 1\n2\n1 1\n2\n1 -1''') == r'''1\n1\n1'''", "solution('''\n2\n4\n1 6 -4 -2\n5\n-1 -2 3 4 5\n''') == '''\n-2\n-1\n'''", "solution(stdin) == stdout", "solution('''\n3\n3\n-1 1 -2\n3\n1 2 3\n2\n1000000000 1\n''') == '''\n-1\n1\n1000000000\n'''\n# # test_data in format:\n# # test_data = [\n# #     '''\n# #     input_data\n# #     ''',\n# #     '''\n# #     answer\n# #     '''\n# # ]\n# # \n# # test_generator(solution, test_data)", "solution('''\n...\n''') == '''\n...\n'''", "solution(\"\"\"1\n4\n4 1 2 3\"\"\") == \"3\"\nassert solution(\"\"\"1\n3\n1 2 3\"\"\") == \"1\"\nassert solution(\"\"\"1\n4\n4 4 4 4\"\"\") == \"4\"\nassert solution(\"\"\"1\n1\n1\"\"\") == \"1\"\nassert solution(\"\"\"2\n2\n1 1\n2\n1 2\"\"\") == \"1\\n1\"\nassert solution(\"\"\"2\n1\n-1\n1\n0\"\"\") == \"-1\\n0\"\nassert solution(\"\"\"3\n3\n-3 3 0\n2\n1 1\n3\n1 1 1\"\"\") == \"0\\n1\\n1\"\nassert solution(\"\"\"2\n2\n-5 -5\n2\n1 -1\"\"\") == \"-5\\n1\"\nassert solution(\"\"\"3\n3\n-5 -5 -5\n1\n-1\n1\n0\"\"\") == \"-5\\n-1\\n0\"\nassert solution(\"\"\"3\n1\n0\n2\n2 2\n3\n0 0 0\"\"\") == \"0\\n2\\n0\"\nassert solution(\"\"\"4\n1\n-9\n2\n-9 -9\n2\n-8 -8\n1\n-1\"\"\") == \"-9\\n-9\\n-8\\n-1", "solution('''\n0\n''') == '''\n'''\n\nassert solution('''\n1\n5\n5 5 4 3 3\n''') == '''\n3\n'''\n\nassert solution('''\n3\n5\n1 2 3 4 5\n3\n3 3 3\n3\n3 2 1\n''') == '''\n1\n3\n1\n'''\n\nprint('You\\'re a teapot')", "solution('''2\n5\n1 6 -4 -2 -4\n4\n6 -8 4 -1''') == '''5\n5'''\n\n# check the correctness of solution\nassert solution('''4\n4\n1 1 1 1\n4\n2 2 3 3\n4\n2 2 2 3\n4\n2 2 2 2''') == '''1\n3\n2\n2'''", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution(\"\"\"\n3\n3\n5 4 5\n4\n5 6 5 5\n4\n4 -2 3 3\n\"\"\") == \"\"\"\n4\n5\n4\n\"\"\"\n\n# get the input\nwith open(\"../inputs/day_9.txt\") as f:\n    ans = solution(f.read())\n    print(ans)", "solution('''\n4\n6\n1 6 -4 -2 -4 2\n6\n-1 -6 -4 -2 -4 -2\n2\n1 2\n2\n-1 -2\n''') == '''\n2\n-2\n1\n-2\n'''", "solution('''\n''') == '''\n'''\n\n# stress testing the solution\n\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# ===============================================================================\n# =============================================================================", "solution('''\n1\n5\n1 6 -4 -2 -4\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2 -2\n3\n1 1 1\n''') == '''\n2\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n2\n2 -2\n3\n1 1 1\n5\n2 3 4 5 6\n''') == '''\n2\n1\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n4 3 2 1\n4\n4 3 2 1\n''') == '''\n1\n1\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n2 3 4 5 6\n5\n1 1 1 1 1\n5\n2 3 3 2 2\n''') == '''\n1\n5\n5\n1\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n6\n1 2 3 4 5 6\n6\n6 5 4 3 2 1\n6\n2 3 4 5 6 7\n", "solution(test_case_1) == expected_1, \"expected {}, got {}\".format(expected_1, solution(test_case_1))\nassert solution(test_case_2) == expected_2, \"expected {}, got {}\".format(expected_2, solution(test_case_2))\nassert solution(test_case_3) == expected_3, \"expected {}, got {}\".format(expected_3, solution(test_case_3))", "solution('''\n1\n4\n1 2 3 4\n''') == '''\n4\n'''\n\nassert solution('''\n1\n3\n-1 0 1\n''') == '''\n0\n'''\n\nassert solution('''\n2\n2\n0 0\n1\n1\n''') == '''\n0\n1\n'''\n\nassert solution('''\n1\n5\n0 0 0 0 0\n''') == '''\n0\n'''\n\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n1\n'''\n\nassert solution('''\n1\n6\n-6 -5 -4 -3 -2 -1\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n6\n-6 -5 -4 -3 -2 -1\n''') == '''\n-1\n'''\n\nassert solution('''\n2\n2\n0 1\n1\n1\n''') == '''\n0\n1\n'''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n#", "solution('''1\n5\n1 6 -4 -2 -4''') == '-2'\n\n# check the correctness of solution\nassert solution('''3\n4\n4 2 4 2\n4\n4 4 2 4\n4\n4 4 4 4''') == '2'\n\n# check the correctness of solution\nassert solution('''1\n4\n4 4 4 4''') == '4'\n\n# check the correctness of solution\nassert solution('''2\n4\n4 4 4 4\n5\n-2 -2 -2 -2 -2''') == '-2'\n\n# check the correctness of solution\nassert solution('''1\n4\n0 0 0 0''') == '0'\n\n# check the correctness of solution\nassert solution('''2\n3\n0 1 0\n3\n0 0 0''') == '0'\n\n# check the correctness of solution\nassert solution('''2\n3\n-2 -2 -2\n3\n-2 -2 -2''') == '-2'\n\n# check the correctness of solution\nassert solution('''1\n4\n-2 -2 -2 -2''') == '-2'\n\n# check the correctness of solution\nassert solution('''1\n4\n-2 -2 -2 -2''') == '-", "solution('''\n3\n3\n1 2 3\n2\n-1000000000 1000000000\n1\n1\n''') == '''\n3\n-1000000000\n1\n'''\n\n# check the performance of solution\nimport random\nfrom string import ascii_lowercase\nimport time\n\nruntimes = []\nfor _ in range(1000):\n    test_stdin = ''\n    test_stdin += f'{1000}\\n'\n    for _ in range(1000):\n        size = random.randint(1, 200000)\n        test_stdin += f'{size}\\n'\n        test_stdin += ' '.join([str(random.randint(-1000000000, 1000000000)) for _ in range(size)]) + '\\n'\n    start = time.time()\n    res = solution(test_stdin)\n    end = time.time()\n    runtimes.append(end - start)\nprint(f'runtimes: {min(runtimes)}s - {max(runtimes)}s')", "solution(TESTS) == ANSWERS\n\n# check the performance of solution\nsolution(BIG_TESTS)\n \n<left><img width=\"50%\" src=\"https://raw.githubusercontent.com/skh43/algorithms-data-structures-interview/master/assets/digit.jpg\" alt=\"digit\"></left>\n\n#### Digit Sum\n\n'''\nYou are given a string a consisting of only digits ('0' - '9'). Your task is to find the sum of all digits in the given string.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next t lines contain a string a.\n\nIt is guaranteed that a in the each test case consists of at least one digit.\n\nOutput\n\nPrint t lines, each of them containing the answer to the corresponding test case. The answer to the test case is a single integer \u2014 the sum of all digits in the given string.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution(TESTS) == ANSWERS\n\n# check the performance of solution\nsolution(BIG_TESTS)\n \n<left><img width=\"50%\" src=\"https://raw.github", "(\n    solution(\n        \"\"\"\n5\n5\n5 6 7 8 9\n5\n5 6 7 8 9\n5\n5 6 7 8 9\n5\n5 6 7 8 9\n5\n5 6 7 8 9\n        \"\"\"\n    )\n    == \"\"\"\n5\n5\n5\n5\n5\n\"\"\"\n)\nassert (\n    solution(\n        \"\"\"\n5\n1\n9\n1\n9\n1\n9\n1\n9\n1\n9\n        \"\"\"\n    )\n    == \"\"\"\n9\n9\n9\n9\n9\n\"\"\"\n)\nassert (\n    solution(\n        \"\"\"\n5\n2\n1 3\n2\n1 3\n2\n1 3\n2\n1 3\n2\n1 3\n        \"\"\"\n    )\n    == \"\"\"\n3\n3\n3\n3\n3\n\"\"\"\n)\nassert (\n    solution(\n        \"\"\"\n5\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\n        \"\"\"\n    )\n    == \"\"\"\n3\n3\n3\n3\n3\n\"\"\"\n)\nassert (\n    solution(\n        \"\"\"\n5\n3\n3 2 1\n3\n3 2 1\n3\n3 2 1\n3\n3 2 1\n3\n3 2 1\n"], "finish_reason": ["stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "length", "length"], "sum_logprob": [-70.80258387434503, -26.821979299540004, -108.17993625166996, -37.18653800569999, -131.66361276727807, -121.10079492881403, -42.52951462410001, -25.072001803529993, -49.762789356522994, -8.070898623000001, -138.52490083697995, -13.600393086, -5.96701657, -94.74542365319196, -17.953413140330003, -23.921209829200006, -28.135611495195995, -161.99700174778428, -44.974891245753994, -258.14473446222036, -199.62167126626903, -51.482651292766036, -45.14278179421999, -107.32577799870208, -198.59245648145009, -324.07346252437407, -97.2849793631583, -41.32487636994998, -35.31194449097002, -24.477053908700004, -64.49036226543909, -47.375377928209986, -22.334843587400005, -5.585168382000001, -89.87305558470003, -9.579401418700002, -141.54815991118005, -54.653506421931674, -60.670324922769986, -9.5417732654, -71.99236251070002, -34.53551614269999, -31.150193079182028, -81.82498481928795, -22.651579168050997, -78.82027961497742, -97.48740287261995, -91.55573404648997, -170.06639540822704, -62.25105350014098], "mean_logprob": [-0.4951229641562587, -0.5706804106285106, -0.36059978750556665, -0.8263675112377777, -0.43887870922426, -0.40366931642938, -0.393791802075, -0.35817145433614284, -0.421718553868839, -0.67257488525, -0.7031720854669036, -0.7158101624210527, -0.9945027616666667, -0.31581807884397334, -0.5791423593654839, -0.5834441421756098, -0.5024216338427857, -0.5399900058259474, -0.359799129966032, -0.8604824482074, -0.6654055708875634, -0.25613259349634826, -0.5015864643802223, -0.44719074166125833, -0.6619748549381667, -1.0802448750812466, -0.32428326454386097, -0.5903553767135714, -0.3717046788523158, -0.5970013148463414, -0.21496787421813, -0.4155734905983333, -0.5447522826195123, -0.6205742646666667, -0.7366643900385246, -0.5321889677055556, -0.47182719970393333, -0.5465350642193167, -0.6523690851910753, -0.35339900982962963, -0.9112957279835443, -0.5313156329646154, -0.10383397693060667, -0.27274994939762665, -0.2116970015705701, -0.262734265383258, -0.3249580095754, -0.37369687365914284, -0.56688798469409, -0.20750351166713665]}
{"prompt": "'''\nThe robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nEach cell has one of the symbols 'L', 'R', 'D' or 'U' written on it, indicating the direction in which the robot will move when it gets in that cell \u2014 left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. He then moves to the adjacent square in the direction indicated on the current square in one move. \n\n  * If the robot moves beyond the edge of the board, it falls and breaks. \n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore). \n\n\n\nRobot can choose any cell as the starting cell. Its goal is to make the maximum number of steps before it breaks or stops.\n\nDetermine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written (it does not matter whether to another square or beyond the edge of the board).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n\n3 3\nLRD\nLRR\nDUR\n''') == '''1 1 4'''\nassert solution('''\n1\n\n3 4\nUUUD\nUDUU\nLDDR\n''') == '''2 3 3'''\nassert solution('''\n1\n\n3 3\nLRR\nLDL\nRDL\n''') == '''1 1 0'''\nassert solution('''\n1\n\n1 1\nU\n''') == '''1 1 0'''\nassert solution('''\n1\n\n2 3\nLUR\nLUR\n''') == '''1 2 1'''\nassert solution('''\n1\n\n1 1\nL\n''') == '''1 1 0'''\nassert solution('''\n1\n\n2 3\nLLL\nLRR\n''') == '''1 1 0'''\nassert solution('''\n1\n\n1 1\nR\n''') == '''1 1 0'''\nassert solution('''\n1\n\n1 1\nD\n''') == '''1 1 0'''\nassert solution('''\n1\n\n1 2\nLR\n''') == '''1 1 0'''\nassert solution('''\n1\n\n3 3\nURD\nLDR\nULR\n''", "solution(\"\") == \"\", \"Example #1\"\nassert solution(\"\") == \"\", \"Example #2\"\nassert solution(\"\") == \"\", \"Example #3\"\nassert solution(\"\") == \"\", \"Example #4\"\nassert solution(\"\") == \"\", \"Example #5\"\nassert solution(\"\") == \"\", \"Example #6\"\nassert solution(\"\") == \"\", \"Example #7\"\nassert solution(\"\") == \"\", \"Example #8\"\nassert solution(\"\") == \"\", \"Example #9\"\nassert solution(\"\") == \"\", \"Example #10\"\n\n# stress testing solution\nimport random\n\nwhile True:\n    n, m = random.randint(1, 2000), random.randint(1, 2000)\n    board = [[random.choice(\"LRUD\") for _ in range(m)] for _ in range(n)]\n    t = solution(f\"{n} {m}\\n\\n{'\\n'.join(map(lambda a: ''.join(a), board))}\")\n    x, y, d = map(int, t.split())\n    if x < 1 or x > n or y < 1 or y > m or d < 0:\n        print(f\"failed on n={n}, m={m}, board={board}\")\n        break\n    dirs = {\"", "solution(solution_input) == solution_output", "solution('''\n4\n\n4 4\nDLUL\nDRRR\nULRD\nULUL\n\n4 4\nDULU\nDLUL\nDRUR\nDLDL\n\n1 1\nU\n\n1 1\nL\n''') == '''\n1 2 3\n2 2 5\n1 1 0\n1 1 0\n'''", "solution('''\n1\n\n2 3\nLRR\nLLU\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3 3\nLLU\nLUR\nRRD\n''') == '''\n2 1 2\n'''", "solution(\"\"\"\n1\n\n3 4\nLLDL\nDLRR\nDDLU\n\"\"\") == \"2 3 3\"\n\nassert solution(\"\"\"\n2\n\n4 3\nLRD\nRDL\nRDR\nLDL\n\n5 4\nDDRL\nRRLD\nLLLL\nLLDL\nRRRR\n\"\"\") == \"1 2 2\"\n\nprint(\"passed\")", "solution('''3\n4 4\nLURD\nUUUU\nLURD\nLDDD\n\n4 4\nLURD\nUUUU\nLDDD\nLURD\n\n4 4\nLURD\nLURD\nLURD\nLURD''') == '''2 1 4\n1 1 4\n2 2 8'''", "(solution('''\n2\n\n4 4\nLDDD\nUUUD\nLLDD\nUUUD\n\n5 4\nRRRR\nLLLL\nRRRR\nRRRR\nRRRR\n''') == '''\n1 1 3\n1 1 0\n''')\n\n# check the correctness of solution\nassert (solution('''\n2\n\n6 3\nLLL\nRRR\nLLL\nRRR\nLLL\nRRR\n\n6 4\nUUUU\nLLLL\nUUUU\nLLLL\nUUUU\nLLLL\n''') == '''\n1 1 9\n1 1 4\n''')\n\n# check the correctness of solution\nassert (solution('''\n1\n\n6 4\nUUDD\nUUDD\nUUDD\nUUDD\nUUDD\nUUDD\n''') == '''\n1 1 24\n''')\n\n# check the correctness of solution\nassert (solution('''\n1\n\n4 4\nLLLL\nRRRR\nDDDD\nUUUU\n''') == '''\n1 1 0\n''')\n\n# check the correctness of solution\nassert (solution('''\n2\n\n4 4\nDDDD\nRRRR\nLLLL\nUUUU\n\n3 3\nLLL\nRRR\nLLL\n''') == '''\n1", "solution('''\n3\n\n3 5\nRDDUR\nLRRLD\nRDDDU\n\n3 3\nRRR\nRUD\nUUD\n\n1 1\nR\n''') == '''\n1 2 2\n2 2 2\n1 1 0\n'''", "solution('''\n3\n\n5 4\nRLLL\nLULD\nRRRR\nUUUD\nDDDD\n\n6 6\nURDDDU\nDDUDUU\nDRRRRR\nLLLLLL\nRRRRRR\nUUUUUU\n\n2 3\nDDR\nDDR\n''') == '''\n4 1 2\n6 1 2\n1 1 2\n'''", "(solution('''\n2\n\n3 3\nLLL\nLLL\nLLL\n\n3 3\nLLL\nLLL\nLRD\n''') == '''\n1 1 0\n1 1 1\n''')\n\n# get the input\nn_tests = int(input())\nstdin = f'''{n_tests}\n\n{input()}\n'''\n\n# run the solution\noutput = solution(stdin)\n\n# print the output\nprint(output)", "solution('''\n5\n\n3 5\nLLLLL\nLDLLL\nLLLLL\n\n3 5\nRRRRR\nRURRR\nRRRRR\n\n4 5\nRRRRR\nRLLLL\nLLLDD\nRRRRR\n\n4 4\nRRRR\nRRRR\nRRRR\nRRRR\n\n4 4\nDDDD\nLLLL\nLLLL\nDDDD\n''') == '''\n1 1 3\n1 2 3\n1 2 3\n1 1 0\n2 3 0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n\n3 3\nLLL\nLLL\nLLL\n\n3 3\nRRR\nRRR\nRRR\n\n3 3\nDDD\nDDD\nDDD\n''') == '''\n1 1 2\n2 1 2\n2 2 2\n'''", "solution(stdin=\"\"\"\n2\n\n3 5\nLLLLL\nLLLLL\nLLLLL\n\n3 5\nLLLLL\nDLLLL\nRRRRR\n\"\"\") == \"\"\"\n2 1 3\n1 2 3\n\"\"\", \"Example 1\"\n\nassert solution(stdin=\"\"\"\n4\n\n4 4\nDDRR\nDLLL\nLLLD\nDDDD\n\n4 4\nRRRD\nDDDD\nDDDD\nDDDD\n\n5 5\nLLLLL\nLLLLL\nLLLLL\nLLLLL\nLLLLL\n\n5 5\nRDRDR\nRURUR\nRDRDR\nRURUR\nRDRDR\n\"\"\") == \"\"\"\n2 2 4\n1 2 4\n3 3 0\n2 2 0\n\"\"\", \"Example 2\"", "solution('''\n\n''') == '''\n'''", "solution(open('tests/in/example').read()) == open('tests/out/example').read()", "solution('''\n\n''') == '''\n'''", "(solution(s) for s in sample_input_output)", "solution(\"\"\"\n\n\"\"\") == \"\"\n\n# test solution\nsolution(\"\"\"\n3\n\n3 4\nLURD\nUUUU\nRRRR\n\n3 4\nLURD\nLURD\nRRRR\n\n3 4\nLURD\nLURD\nDRRL\n\"\"\")", "solution(\"\"\"\n3\n\n3 4\nLRRD\nLLRD\nRRRD\n\n3 4\nRRRU\nRDRU\nRRRD\n\n3 4\nRDDD\nRRRD\nRRRD\n\"\"\") == \"\"\"\n1 1 4\n1 3 3\n2 2 4\n\"\"\"\n\nif __name__ == '__main__':\n    # input() reads a string with a line of input, stripping the '\\n' (newline) at the end.\n    # This is all you need for most Code Jam problems.\n    t = int(input()) # read a line with a single integer\n    # print(\"t = \", t)\n    for case_num in range(1, t + 1):\n        # print(\"case_num = \", case_num)\n        n, m = [int(s) for s in input().split(\" \")] # read a list of integers, 2 in this case\n        # print(\"n = \", n)\n        # print(\"m = \", m)\n        board = []\n        for i in range(n):\n            board.append(input())  # read a list of integers, 2 in this case\n            # print(\"board = \", board)\n        print(\"Case #{}: {} {} {}\".format(case_num, 0, 0, 0))\n        # check out", "solution('''\n\n''') == '''\n'''\n\nassert solution('''\n\n''') == '''\n'''\n\nassert solution('''\n\n''') == '''\n'''", "solution('''\\\n3\n\n3 3\nLRD\nRDR\nDLL\n\n3 3\nULD\nDUL\nDRR\n\n3 3\nRDR\nULU\nRUL\\\n''') == '''\\\n1 2 4\n2 2 4\n3 1 4\\\n'''", "solution(stdin) == stdout", "solution('''\n3\n\n3 4\nRURR\nRLLU\nRRRD\n\n3 4\nRURR\nRLLU\nDRRD\n\n3 4\nRURR\nRLLU\nRUUR\n''') == '''\n1 1 0\n1 1 1\n2 1 1\n'''", "solution(open('tests/03_little_robot.in').read()) == open('tests/03_little_robot.out').read()", "solution(\"\"\"\n1\n\n3 5\nLLLLL\nRRRRR\nUUUUU\n\"\"\") == \"\"\"1 1 15\n\"\"\"\n\nprint(\"Success!!\")", "solution('''\n1\n\n3 4\nRRDD\nURDL\nUULL\n''') == '''\n2 2 1\n'''\n\nassert solution('''\n3\n\n3 4\nRRDD\nURDL\nUULL\n\n4 6\nLULLLL\nRDDLLL\nLDLUDD\nRRRRUU\n\n5 4\nUDUD\nDUDU\nUDUD\nDUDU\nUDUD\n''') == '''\n2 2 1\n1 2 2\n1 2 4\n'''\n\nprint('Tests passed!')\n\n# do the same thing but faster\ndef solution_fast(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution_fast('''\n1\n\n3 4\nRRDD\nURDL\nUULL\n''') == '''\n2 2 1\n'''\n\nassert solution_fast('''\n3\n\n3 4\nRRDD\nURDL\nUULL\n\n4 6\nLULLLL\nRDDLLL\nLDLUDD\nRRRRUU\n\n5 4\nUDUD\nDUDU\nUDUD\nDUDU\nUDUD\n''') == '''\n2 2 1\n1 2 2\n1 2 4\n'''\n\nprint('Tests passed!')", "solution(r'''\n2\n\n3 3\nLDR\nRRD\nDDL\n\n3 5\nRULLU\nRUURU\nLLLLU\n''') == r'''\n1 1 2\n2 3 3\n'''", "solution('''\n3\n\n3 4\nUDLL\nUDUU\nLLLL\n\n3 3\nRDR\nRDR\nRDR\n\n3 3\nURR\nRDR\nRRR\n''') == '''\n2 2 4\n2 2 2\n1 2 2\n'''", "solution(input()) == '2 3 3\\n'\n\n# print solution", "solution('''\n\n1\n4 5\nUDUDU\nDUDUD\nUDUDU\nDUDUD\n\n''') == '''\n1 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n\n3\n3 3\nDDD\nDUD\nDDD\n\n3 3\nDDD\nUUD\nDDD\n\n3 3\nDDD\nLUL\nDDD\n\n''') == '''\n2 2 3\n2 2 3\n2 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n\n1\n4 2\nLL\nLL\nLL\nLL\n\n''') == '''\n4 1 0\n'''\n\n# ===== Feedback from Codeforces =====\n# Good job! (Max time used: 1.13/5.00, max memory used: 129094272/536870912.)", "solution(get_input('1')) == get_output('1')\nassert solution(get_input('2')) == get_output('2')\nassert solution(get_input('3')) == get_output('3')\nassert solution(get_input('4')) == get_output('4')\nassert solution(get_input('5')) == get_output('5')\nassert solution(get_input('6')) == get_output('6')\nassert solution(get_input('7')) == get_output('7')\nassert solution(get_input('8')) == get_output('8')\nassert solution(get_input('9')) == get_output('9')\nassert solution(get_input('10')) == get_output('10')\nassert solution(get_input('11')) == get_output('11')\nassert solution(get_input('12')) == get_output('12')\nassert solution(get_input('13')) == get_output('13')\nassert solution(get_input('14')) == get_output('14')\nassert solution(get_input('15')) == get_output('15')\nassert solution(get_input('16')) == get_output('16')\nassert solution(get_input('17')) == get_", "solution('''\n\n''') == '''\n'''\n\n# check performance\nimport timeit\nimport sys\nsys.stdin = open('input.txt', 'r')\nprint(timeit.repeat(lambda: solution(sys.stdin.read()), number=10, repeat=3))", "solution('''\n3\n\n3 3\nLRU\nDDR\nUUL\n\n3 3\nRRR\nLLL\nDDD\n\n3 3\nDDD\nRDD\nRDD\n''') == '''\n1 1 3\n2 2 3\n1 2 1\n'''", "solution(example_input) == example_output, 'Test 1'\nprint('Test 1 passed')\nassert solution(example_input2) == example_output2, 'Test 2'\nprint('Test 2 passed')\nprint('All tests passed')\n\n# submit the solution to the server\ns = input('Input something: ')\nsolution(s)", "solution('''\n1\n\n3 3\nLRD\nURD\nLRD\n''') == '''\n2 1 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n2 5\nUULUR\nUULUR\n''') == '''\n1 5 0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n1 1\nU\n''') == '''\n1 1 0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3 3\nLLL\nLLL\nLLL\n''') == '''\n3 3 0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n4 3\nLRD\nUDR\nLUR\nLRD\n''') == '''\n2 1 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n2 2\nRD\nLD\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n2 2\nDR\nRL\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3 3\nURD\nRDL\nRUR\n''", "solution('''1\n\n2 3\nLLR\nDUR\n''') == '''1 2 2'''\nassert solution('''1\n\n3 3\nRDD\nLLL\nRRR\n''') == '''2 1 2'''\nassert solution('''1\n\n3 2\nDU\nLL\nDD\n''') == '''1 1 2'''\nassert solution('''1\n\n5 4\nUUDL\nRRRR\nDDDD\nUUUL\nLDDL\n''') == '''2 3 3'''\nassert solution('''1\n\n3 5\nLLLLU\nRRRRU\nDDDDD\n''') == '''1 5 2'''\nassert solution('''1\n\n2 4\nRLLL\nRRRR\n''') == '''1 2 1'''\nassert solution('''1\n\n1 1\nL\n''') == '''1 1 0'''\nassert solution('''1\n\n2 3\nLLL\nUUD\n''') == '''1 2 1'''\nassert solution('''1\n\n2 3\nRLL\nUUR\n''') == '''1 1 1'''\nassert solution('''1\n\n2 3\nRRR\nDDD\n''') == '''1 1 0'''\nassert solution(''", "solution('''\n3\n\n3 3\nRDL\nLDR\nRUD\n\n3 3\nRLD\nDRU\nUUD\n\n3 3\nRLL\nLRR\nRDR\n''') == '''\n1 1 3\n2 2 3\n1 1 1\n'''", "solution('''\n1\n\n3 3\nLLL\nLRR\nRRD\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n2 3\nLRD\nUUD\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3 3\nUUD\nLRR\nDLL\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3 3\nUUD\nLRR\nDLL\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3 3\nDDD\nRRR\nLLL\n''') == '''\n1 1 0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3 3\nLLL\nLRR\nRRD\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3 2\nRR\nUL\nRR\n''') == '''\n1 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3 3\nUL", "solution('''\n3\n\n5 5\nRRRRR\nRRRRR\nRRRRR\nRRRRR\nRRRRR\n\n5 5\nRRRRR\nURURR\nRRRRR\nRRRRR\nRRRRR\n\n4 4\nRRRR\nRRRR\nURRR\nRRRR\n''') == '''\n3 1 5\n3 3 5\n3 1 4\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n\n5 5\nRRRRR\nRRRRR\nRRRRR\nRRRRR\nRRRRR\n\n5 5\nRRRRR\nURURR\nRRRRR\nRRRRR\nRRRRR\n\n4 4\nRRRR\nRRRR\nURRR\nRRRR\n''') == '''\n3 1 5\n3 3 5\n3 1 4\n'''", "solution(\"\"\"\n1\n\n2 3\nLRD\nDRR\n\"\"\") == \"\"\"\n1 1 3\n\"\"\", \"example\"\n\nprint(\"all test passed\")", "solution(\"\"\"\n    1\n    4 4\n    LRRD\n    RDDL\n    ULLL\n    UURR\n\"\"\") == \"1 1 0\"\n\nassert solution(\"\"\"\n    2\n    1 1\n    U\n    3 3\n    LRD\n    RDD\n    DLL\n\"\"\") == \"1 1 1\"\n\nassert solution(\"\"\"\n    1\n    2 2\n    LL\n    RR\n\"\"\") == \"1 1 0\"\n\nassert solution(\"\"\"\n    1\n    2 2\n    LD\n    UD\n\"\"\") == \"1 1 0\"\n\nassert solution(\"\"\"\n    1\n    2 3\n    LRD\n    RRD\n\"\"\") == \"1 1 0\"\n\nassert solution(\"\"\"\n    1\n    1 2\n    LR\n\"\"\") == \"1 1 0\"\n\nassert solution(\"\"\"\n    1\n    2 2\n    LU\n    RD\n\"\"\") == \"1 1 0\"\n\nassert solution(\"\"\"\n    1\n    2 3\n    LRD\n    RRD\n\"\"\") == \"1 1 0\"\n\nassert solution(\"\"\"\n    1\n    3 3\n    LDR\n    RDD\n    DLL\n\"\"\") == \"1 1 0\"\n\nassert solution(\"\"\"\n    1\n    1 2\n    RL\n\"\"", "solution('''\n1\n\n3 4\nLDUR\nDLLL\nLRRR\n''') == '''1 1 4'''\nassert solution('''\n2\n\n2 4\nDULL\nLDDR\n\n2 3\nLRU\nRLD\n''') == '''1 1 1\n2 2 1'''\n# Test case from problem statement is not enough, so test with random data\n# from random import randint\n# \n# for _ in range(100):\n#     n = randint(1, 2000)\n#     m = randint(1, 2000)\n#     board = [[choice('LRUD') for _ in range(m)] for _ in range(n)]\n#     input = '\\n\\n{} {}\\n'.format(n, m) + '\\n'.join(''.join(row) for row in board)\n#     assert solution(input) == ''", "solution('''\n\n''') == '''\n'''", "solution('''\n\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n'''", "solution(\"\"\"\n1\n\n3 5\nLLLLL\nLDDUD\nUDUDU\n\"\"\") == \"\"\"\n2 3 0\n\"\"\", \"wrong answer\"\n\n# submit\nfrom submit import submit_solution\nsubmit_solution(solution, '19')", "solution('''\n1\n\n2 3\nLLD\nRRU\n''') == '''\n1 1 2\n'''\n\nassert solution('''\n1\n\n3 3\nLLL\nLRD\nRRR\n''') == '''\n1 1 0\n'''\n\nassert solution('''\n1\n\n3 3\nLLD\nRDD\nRRR\n''') == '''\n1 2 2\n'''\n\nassert solution('''\n2\n\n2 3\nLLD\nRRU\n\n3 3\nLLL\nLRD\nRRR\n''') == '''\n1 1 2\n1 1 0\n'''", "solution('''\n2\n\n4 3\nLLL\nLLL\nLLL\nLLL\n\n5 7\nDDDDDDD\nDDDLLDD\nDDDLLDD\nDDDLLDD\nDDDDDDD\n''') == '''\n2 1 12\n2 3 18\n'''", "solution('''\n2\n\n2 2\nLR\nDU\n\n3 4\nUUUD\nLLLL\nRRRR\n''') == '''\n1 1 2\n2 2 0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n\n2 2\nUD\nRL\n\n4 6\nUUUDDD\nDUDUUD\nDDUUUD\nDDUUDD\n''') == '''\n1 1 0\n2 4 3\n'''", "solution('''\n \n5\n \n5 4\nDRRD\nUURR\nLLLL\nLULL\nRRRR\n \n3 3\nRRR\nRDD\nRDR\n \n2 3\nUUD\nLLD\n \n4 2\nUU\nRR\nLL\nDD\n \n2 3\nUUD\nLRD\n \n \n''') == ''' \n1 3 3\n2 3 3\n1 1 1\n1 1 0\n1 1 1\n'''", "solution('''\n3\n\n3 3\nLDU\nLRD\nULD\n\n1 4\nUULU\n\n6 9\nUULULURDD\nULULURDDU\nULULURDDU\nUULULURDD\nULULURDDU\nUULULURDD\n''') == '''\n1 1 4\n1 1 0\n1 1 11\n'''"], "finish_reason": ["length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-125.32357866845497, -87.55739847251006, -8.2078797195, -66.51531295503001, -38.26915110429999, -87.91161936903997, -52.721251624020006, -124.12071466612996, -54.316097675040005, -89.30540261727997, -55.50808751834403, -103.06972273546997, -112.36394237675, -6.296067356999999, -18.86609088834999, -6.317494190000001, -20.900675370500004, -52.57595926742, -108.03905751236, -11.543316258044003, -56.98098758164002, -5.593725894, -48.65671646149999, -24.382310230969996, -36.250409911300004, -123.45901991268349, -49.541332960999995, -54.282828271129986, -28.921260675000003, -110.50881383566224, -18.5249581434295, -34.55534342226003, -47.82552621027999, -57.836640547879995, -106.5780440990652, -153.40422666547704, -53.71007993351001, -88.378617155373, -55.40441683681205, -34.3194057235, -119.76387555434798, -136.75278283430598, -6.289607079, -10.44960505818, -57.71570974397, -52.898042334529, -46.50513948977999, -77.15625462142823, -106.97760626582998, -75.16854086427], "mean_logprob": [-0.4177452622281833, -0.29185799490836667, -0.683989976625, -0.8527604225003846, -0.5315159875597222, -0.9877710041465169, -0.667357615493924, -0.41373571555376665, -0.8486890261725, -1.014834120650909, -0.4956079242709286, -0.5258659323238265, -0.6173842987733517, -0.4197378238, -0.7860871203479167, -0.42116627933333334, -1.3933783580333334, -0.7619704241655072, -0.36013019170786664, -0.2355778828172245, -0.802549120868169, -0.6215250993333333, -0.6853058656549296, -0.7171267714991176, -0.9294976900333334, -0.41850515224638474, -0.8846666600178571, -0.8224670950171212, -1.6067367041666667, -0.5443783932791242, -0.061749860478098335, -0.49364776317514286, -0.7138138240340298, -0.7140325993565432, -0.355260146996884, -0.5113474222182567, -0.8016429840822388, -0.29459539051791, -0.29007548082100526, -0.8799847621410256, -0.3992129185144933, -0.6543195350923732, -0.4193071386, -0.2679385912353846, -0.9308985442575807, -0.3550204183525436, -0.6739875288373913, -0.7078555469855798, -0.9551571988020536, -0.8445903467895506]}
{"prompt": "'''\nGiven n, find any array a_1, a_2, \u2026, a_n of integers such that all of the following conditions hold: \n\n  * 1 \u2264 a_i \u2264 10^9 for every i from 1 to n.\n\n  * a_1 < a_2 < \u2026 <a_n\n\n  * For every i from 2 to n, a_i isn't divisible by a_{i-1}\n\n\n\n\nIt can be shown that such an array always exists under the constraints of the problem.\n\nInput\n\nThe first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe only line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case print n integers a_1, a_2, \u2026, a_n \u2014 the array you found. If there are multiple arrays satisfying all the conditions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(test1) == out1", "solution('''\n3\n1\n3\n5\n''') == '''\n1\n1 2\n1 2 4 5\n'''", "solution(\"\"\"\n4\n1\n2\n3\n4\n\"\"\") == \"\"\"\n1\n1 3\n2 3 7\n2 3 5 11\n\"\"\"", "solution('''\n''') == '''\n'''\n\n# check time complexity\nassert solution('''\n''') == '''\n'''", "solution('''\n\n''') == '''\n\n'''", "solution('''2\n1\n2''') == '''1\n3 2'''", "solution('''\n2\n2\n4\n''') == '''\n1 2\n1 3 2 7\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n2\n3\n10\n''') == '''\n1 2\n1 3 2\n1 2 3 5 4 7 8 9 10\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n3\n6\n19\n20\n35\n39\n''') == '''\n1 3 2\n1 3 2 6 5\n1 3 2 6 5 9 8 11 10 14 13 17 16 19 18\n1 3 2 6 5 9 8 11 10 14 13 17 16 19 18 20\n1 3 2 6 5 9 8 11 10 14 13 17 16 19 18 20 21 23 22 25 24 27 26 29 28 30 32 31 35 34 37 36 39 38\n1 3 2 6 5 9 8 11 10 14 13 17 16 19 18 20 21 23 22 25 24 27 26 29 28 30 32 31 35 34 37 36 39 38 40\n'''", "solution('''\n5\n5\n''') == '''\n2 3 7 10 11\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n''') == '''\n2 3 7 10 11 12\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n''') == '''\n2 3 7 10 11 12 14\n'''\n\n# check the correctness of solution\nassert solution('''\n8\n''') == '''\n2 3 7 10 11 12 14 15\n'''\n\n# check the correctness of solution\nassert solution('''\n9\n''') == '''\n2 3 7 10 11 12 14 15 16\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n''') == '''\n2 3 7 10 11 12 14 15 16 18\n'''\n\n# check the correctness of solution\nassert solution('''\n11\n''') == '''\n2 3 7 10 11 12 14 15 16 18 19\n'''\n\n# check the correctness of solution\nassert solution('''\n12\n''') == '''\n2 3 7 10 11 12 14 15 16 18 19 20\n'''\n\n# check the correctness of solution\nassert solution('''\n13\n''') == '''\n2 3 7 10 11 12 14 15 16", "solution(get_test_case(0)) == get_test_output(0)\nassert solution(get_test_case(1)) == get_test_output(1)\nassert solution(get_test_case(2)) == get_test_output(2)\nassert solution(get_test_case(3)) == get_test_output(3)", "(solution(stdin='''\n2\n3\n5\n''')) == '''\n1 2 4\n1 2 6 10 15\n'''\n\n# check the performance of solution\n# (check the performance by running your code with different inputs)\n#\n# ... \n\n# test with python main.py from main dir\ndef main():\n    ''' reads from stdin, solve the problem and prints output to stdout '''\n    # set a buffer to flush stdout after each line\n    # (or use flush=True in print function)\n    # input is read from stdin\n    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, sys.stdout.flush, line_buffering=True)\n    print(solution(stdin=sys.stdin.read()))\n\nif __name__ == '__main__':\n    main()", "solution(\"\"\"\n5\n2\n3\n4\n5\n6\n\"\"\") == \"\"\"\n3 5\n3 5 7\n3 5 7 11\n3 5 7 11 13\n3 5 7 11 13 17\n\"\"\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n1\n10\n\"\"\") == \"\"\"\n3 5 7 11 13 17 19 23 29 31\n\"\"\"", "solution(stdin) == stdout\n```\n\n### Problem Name\n\n[Link to Problem Page](https://codeforces.com/problemset/problem/<problem_id>/<problem_letter>)\n\n#### Example Input\n\n```text\n1\n5\n```\n\n#### Example Output\n\n```text\n2\n```\n\n#### Example Explanation\n\n#### Tags\n\n## D. Dividing the Problem\n\n[Link to Problem Page](https://codeforces.com/problemset/problem/1255/D)\n\nYou are given two integers n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u200950). You have to choose a non-empty subset of [1,\u2009n] and any subset of [1,\u2009m]. The product of the numbers in the first chosen subset (divided by their greatest common divisor) must be equal to the product of the numbers in the second chosen subset (divided by their greatest common divisor).\n\nYour task is to find the number of ways to choose such subsets. Since the answer can be large, print it modulo 1\u2009000\u2009000\u2009007.\n\n#### Example Input\n\n```text\n3\n2 2\n2 3\n3 3\n```\n\n", "solution('''1\n3''') == '''3 5 7'''\n\n# Check the performance of solution\nimport timeit\nimport random\n\nrandom.seed(0)\n\ndef solution_for_performance_testing(stdin: str) -> str:\n    return str(random.randint(1,10**9))\n\nassert timeit.timeit(\n    stmt='solution_for_performance_testing(stdin)',\n    setup='''from __main__ import solution_for_performance_testing; import random; random.seed(0); stdin = \"{}\".format(random.randint(1,10**4))''',\n    number=1\n) < 1.0, 'Time limit exceeded'", "solution('''\n2\n2\n3\n''') == '''\n1 3\n1 2 4\n'''\n#\n#\n#\n#", "solution(\"\"\"4\n4\n3\n2\n1\n\"\"\") == \"\"\"3 1 7 9\n3 1 5\n2 3\n1\n\"\"\"", "solution(sample_input) == sample_output\n\n# dump input\nimport sys\nif len(sys.argv) > 1:\n    with open(sys.argv[1], 'r') as f:\n        print(solution(f.read()))\nelse:\n    print(solution(input()))", "solution(open('TODO: implement').read()) == open('TODO: implement').read()", "solution('''2\n2\n3''') == '''3\n4\n6'''", "solution('''\n1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n2\n2\n3\n''') == '''\n1 2\n1 2 3\n'''\n\nassert solution('''\n3\n4\n2\n4\n''') == '''\n1 3 1 3\n2 3\n2 1 3 1\n'''\n\nassert solution('''\n1\n1000\n''') == '''\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1", "solution('''1\n3''') == '''10 11 12'''\nassert solution('''2\n3\n7''') == '''10 11 12\n10 11 12 20 30 42 70'''", "solution('''3\n3\n3\n3''') == '''3 2 5\n7 2 3\n2 3 5'''", "solution(\"\"\"3\n2\n3\n4\"\"\") == \"\"\"1 2\n2 3 4\n2 3 5 7\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"3\n1\n2\n3\"\"\") == \"\"\"1\n1 2\n2 3\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n1000000\"\"\") == \"\"\"\".join([\"1\"] * 1000000)\n\n# check the correctness of solution\nassert solution(\"\"\"1\n20\"\"\") == \"\"\"1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n1\"\"\") == \"\"\"1\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n10\"\"\") == \"\"\"1 2 3 5 7 11 13 17 19 23\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"2\n2\n2\"\"\") == \"\"\"1 2\n1 2\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n100\"\"\") == \"\"\"1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337", "solution('''1\n3''') == '''1 2 4'''\n\nassert solution('''2\n3\n5''') == '''1 2 4\n1 2 4 6 10'''\n\nassert solution('''5\n1\n2\n3\n4\n5''') == '''1\n1 2\n1 2 4\n1 2 4 8\n1 2 4 8 16'''\n\n# check the correctness of solution on large data set\nassert solution('''3\n1000\n1000\n1000''') == '''1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736 137438953472 274877906944 549755813888 1099511627776 2199023255552 4398046511104 8796093022208 17592186044416 35184372088832 70368744177664 140737488355328 281474976710656 562949953421312 1125899", "solution('''\n1\n3\n''') == '''\n1 2 4\n'''\n\n# simulate stdin\nimport sys\nif __name__ == '__main__':\n    for line in sys.stdin:\n        sys.stdout.write(solution(line))", "solution('''\n\n''') == '''\n\n'''", "solution(problem) == 'some_valid_string'", "solution('''\n3\n3\n4\n5\n''') == '''\n1 2 3\n1 4 8\n1 2 6 24\n'''", "solution('''\n2\n2\n3\n''') == '''\n1 3\n2 5\n'''\n# check the correctness of solution\nassert solution('''\n3\n1\n10\n1000\n''') == '''\n1\n1 2 3 4 5 6 7 8 9 10\nsolution('''\n3\n2\n5\n5\n''') == '''\n1 2\n2 11 12\n2 3 5 6 10\n'''", "solution(stdin='''\n3\n1\n3\n10\n''') == '''\n1\n7 11\n1 3 5 7 9 11 13 15 17 19\n'''", "solution('''\n4\n1\n2\n3\n4\n''') == '''\n1\n2\n3 2\n4 2\n'''\n\n# get the input\nstdin = sys.stdin.read().splitlines()\n\n# run the solution and get the output\noutput = solution(stdin)\n\n# print the output\nprint(output)", "solution(testcase1) == expected1\nassert solution(testcase2) == expected2\n\n# if input is file read from file\nif len(sys.argv) > 1:\n    with open(sys.argv[1]) as f:\n        stdin = f.read()\n        solution(stdin)\nelse:\n    solution(sys.stdin.read())", "solution('''\n1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n3\n3\n3\n3\n''') == '''\n2 3 9\n2 3 9\n2 3 9\n'''", "solution(\"\") == \"\", \"Case 1\"\nassert solution(\"\") == \"\", \"Case 2\"\n\n# submit the answer\nprint(solution(stdin))", "solution('''1\n1''') == '''1'''\nassert solution('''2\n2\n10''') == '''1 2\n1 2 3 4 5 6 7 8 9 10'''\nassert solution('''3\n3\n3\n3''') == '''1 2 4\n1 2 4\n1 2 4'''\nassert solution('''4\n4\n4\n4\n4''') == '''1 2 4 8\n1 2 4 8\n1 2 4 8\n1 2 4 8'''\nassert solution('''5\n5\n5\n5\n5\n5''') == '''1 2 4 8 16\n1 2 4 8 16\n1 2 4 8 16\n1 2 4 8 16\n1 2 4 8 16'''\nassert solution('''6\n6\n6\n6\n6\n6\n6''') == '''1 2 4 8 16 32\n1 2 4 8 16 32\n1 2 4 8 16 32\n1 2 4 8 16 32\n1 2 4 8 16 32\n1 2 4 8 16 32'''\nassert solution('''7\n7\n7\n7\n7\n7\n7\n7''') == '''1 2 4 8 16 32 64\n1 2 4 8 16 32 64\n1 2 4 8 16 32 64\n1 2 4 8 16 32 64\n1 2 4 8", "solution('''\n4\n1\n2\n4\n4\n''') == '''\n1\n1 2\n1 3 2 4\n1 3 2 4\n'''\n\nassert solution('''\n3\n1\n3\n3\n''') == '''\n1\n1 2 3\n1 3 2\n'''", "solution('''5\n1\n2\n3\n4\n5''') == '''1\n2\n6\n12\n60'''", "solution('''\n''') == '''\n'''\n\n# run this to test solution\n# pytest --runslow -k solution\n# pytest --runslow -k solution --cov-report html --cov=bio\n# pytest --runslow -k solution --cov-report html --cov=bio --durations=20 -n2", "solution('''\n5\n5\n1\n1000\n5\n5\n''') == '''\n1 2 3 4 5\n1\nsolution('''\n2\n2\n3\n''') == '''\n2 3\n2 3 5\n'''\n\n# print all the results\nwith open('input.txt', 'r') as f:\n    for i, line in enumerate(f):\n        if i == 0:\n            continue\n        print('test case', i)\n        print(solution(line))", "solution('''\n2\n2\n3\n''') == '''\n1 2\n1 2 6\n'''\n\n# import sys\n# INPUT = sys.stdin.readlines()\n\n# # solution(INPUT)\n# solution('''\n# 2\n# 2\n# 3\n# ''')", "solution('''2\n2\n3''') == '''1 2\n1 2 3'''\n\n# check the correctness of solution\nassert solution('''5\n3\n3\n3\n3\n3''') == '''1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3'''\n\n# this part is for local testing only\nimport sys\nimport unittest\nclass Tester(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''1\n1'''), '''1''')\n    def test_solution2(self):\n        self.assertEqual(solution('''2\n1\n2'''), '''1\n1 2''')\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        if sys.argv[1] == 'test':\n            unittest.main()\n        elif sys.argv[1] == 'run':\n            print(solution(sys.stdin.read()))\n    else:\n        unittest.main()", "solution(\"1\\n3\") == \"1 2 4\", \"Solution failed\"", "solution('''1\n1''') == '''1'''\nassert solution('''2\n2\n10''') == '''1 2\n1 2 3 4 5 6 7 8 9 10'''\nassert solution('''3\n3\n4\n5''') == '''1 3 5\n1 3 7 9\n1 3 7 9 11 13'''\nassert solution('''4\n6\n7\n8\n9''') == '''1 3 5 7 9 11\n1 3 5 7 9 11 13\n1 3 5 7 9 11 13 15\n1 3 5 7 9 11 13 15 17 19'''\nassert solution('''5\n10\n11\n12\n13\n14''') == '''1 3 5 7 9 11 13 15 17 19\n1 3 5 7 9 11 13 15 17 19 21\n1 3 5 7 9 11 13 15 17 19 21 23\n1 3 5 7 9 11 13 15 17 19 21 23 25\n1 3 5 7 9 11 13 15 17 19 21 23 25 27'''", "solution(\"\") == \"\"\n\n# check the performance of solution\nimport random\n\nif __name__ == \"__main__\":\n    assert solution(stdin) == expected", "solution(\n    '''\n4\n1\n2\n4\n10\n    '''\n) == '''\n1\n2\n3 4\n3 5 7 9 11 13 17 19 23 29\n'''", "solution('''\n3\n3\n4\n7\n''') == '''\n1 3 5\n1 3 4 7\n1 3 5 4 7 9\n'''", "solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"\n1\n3\n\"\"\") == \"\"\"\n1 2 4\n\"\"\"", "solution(\"\") == \"\""], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-13.083983326, -18.009608880600002, -21.088418238499997, -17.308886815300003, -6.9320707105, -10.642222787, -90.37908784494999, -47.54600806335002, -18.79471199234001, -205.37593645974707, -33.90410204512, -193.5338422079638, -85.65670741894404, -24.927448869400003, -27.465249992900002, -31.364554817056, -23.5426391535, -16.781262190499998, -50.29259932415997, -29.317847131199997, -26.416864287000003, -73.41297361680402, -49.08263372398791, -26.325767151809995, -6.9232114870000006, -21.408738012, -24.1406884113, -29.40438416898999, -34.1835727898, -26.475143429, -35.44777921212997, -52.99895441265, -26.486060625080007, -18.912886250859998, -34.417155519064025, -34.50396786837, -14.725049026500002, -82.92451641287, -26.990389046213956, -44.87176620900002, -43.967425447999986, -80.299857519414, -17.513506249999995, -42.786316919419974, -28.943237987030006, -27.0970155328, -27.609961576299998, -6.936349441899998, -11.25044213, -4.9934804900000005], "mean_logprob": [-1.453775925111111, -0.56280027751875, -0.6025262353857143, -0.49453962329428575, -0.43325441940625, -0.5067725136666666, -0.3981457614314978, -0.1584866935445, -0.22644231316072289, -1.0067447865673873, -0.3568852846854737, -0.6451128073598786, -0.5068444225973018, -0.71221282484, -0.8322803028151515, -0.42384533536562163, -0.9809432980625, -0.7627846450227272, -0.1676419977472, -0.6237839815148937, -0.8805621429, -0.24470991205601333, -0.16360877907995966, -0.3988752598759091, -0.4327007179375, -1.6468260009230768, -0.6897339546085715, -0.09801461389663334, -0.97667350828, -0.6457352055853659, -0.4270816772545783, -0.6022608455982955, -0.47296536830499997, -0.4977075329173684, -0.11472385173021334, -0.47265709408726025, -0.460157782078125, -0.9871966239627381, -0.08996796348738, -0.5099064341931818, -0.5941543979459459, -0.30301833026193964, -0.9729725694444444, -0.18931998636911504, -0.7421343073597436, -0.5765322453787234, -0.726577936218421, -0.43352184011875, -0.5921285331578947, -0.8322467483333333]}
{"prompt": "'''\nA known chef has prepared n dishes: the i-th dish consists of a_i grams of fish and b_i grams of meat. \n\nThe banquet organizers estimate the balance of n dishes as follows. The balance is equal to the absolute value of the difference between the total mass of fish and the total mass of meat.\n\nTechnically, the balance equals to \\left|\u2211_{i=1}^n a_i - \u2211_{i=1}^n b_i\\right|. The smaller the balance, the better.\n\nIn order to improve the balance, a taster was invited. He will eat exactly m grams of food from each dish. For each dish, the taster determines separately how much fish and how much meat he will eat. The only condition is that he should eat exactly m grams of each dish in total.\n\nDetermine how much of what type of food the taster should eat from each dish so that the value of the balance is as minimal as possible. If there are several correct answers, you may choose any of them.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of the test cases.\n\nEach test case's description is preceded by a blank line. Next comes a line that contains integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 10^6). The next n lines describe dishes, the i-th of them contains a pair of integers a_i and b_i (0 \u2264 a_i, b_i \u2264 10^6) \u2014 the masses of fish and meat in the i-th dish.\n\nIt is guaranteed that it is possible to eat m grams of food from each dish. In other words, m \u2264 a_i+b_i for all i from 1 to n inclusive.\n\nThe sum of all n values over all test cases in the test does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print on the first line the minimal balance value that can be achieved by eating exactly m grams of food from each dish.\n\nThen print n lines that describe a way to do this: the i-th line should contain two integers x_i and y_i (0 \u2264 x_i \u2264 a_i; 0 \u2264 y_i \u2264 b_i; x_i+y_i=m), where x_i is how many grams of fish taster should eat from the i-th meal and y_i is how many grams of meat.\n\nIf there are several ways to achieve a minimal balance, find any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"3\\n\\n3 1\\n5 7\\n5 6\\n5 7\\n\\n5 0\\n0 0\\n3 5\\n7 0\\n0 5\\n0 0\\n\\n1 1\\n1 0\") == \"1\\n0 1\\n0 0\\n1 0\\n0 0\\n0 0\\n\\n0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n\\n0\\n1 0\", \"solution is not correct\"", "solution(example_input) == example_output\n\n# get user input\nt = int(input())\nuser_input = \"\"\nfor i in range(t):\n    user_input += \"\\n\"\n    user_input += \"\\n\"\n    user_input += input()\n    n, m = map(int, input().split())\n    for j in range(n):\n        user_input += \"\\n\"\n        user_input += input()\n\n# print the result\nprint(solution(user_input))", "solution('''\n1\n\n5 5\n1 3\n2 2\n4 0\n4 0\n4 0\n''') == '''\n0\n2 3\n2 3\n0 5\n0 5\n0 5\n'''\n\nassert solution('''\n1\n\n5 10\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '''\n0\n5 5\n5 5\n5 5\n5 5\n5 5\n'''\n\nassert solution('''\n1\n\n5 2\n1 5\n1 5\n1 5\n1 5\n1 5\n''') == '''\n2\n0 2\n0 2\n0 2\n0 2\n0 2\n'''\n\nassert solution('''\n1\n\n3 10\n100 100\n100 100\n100 100\n''') == '''\n0\n10 10\n10 10\n10 10\n'''\n\nassert solution('''\n1\n\n3 0\n1 1\n1 1\n1 1\n''') == '''\n0\n0 0\n0 0\n0 0\n'''\n\nassert solution('''\n1\n\n3 1\n1 1\n1 1\n1 1\n''') == '''\n1\n0 1\n0 1\n0 1\n'''\n\nassert solution('''\n1\n\n1 0\n1", "solution(\"\"\"\n1\n\n4 2\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"\"\"\n2\n2 0\n2 0\n2 0\n2 0\n\"\"\"\n\n# check the performance of solution\nfrom utils import measure_time\nprint(measure_time(solution, \"\"\"\n1\n\n4 2\n1 1\n1 1\n1 1\n1 1\n\"\"\"))", "solution('''\n\n''') == '''\n'''", "solution(\"\"\"\n1\n\n3 4\n1 3\n2 2\n1 1\n\"\"\") == \"\"\"\n1\n4 0\n2 2\n0 4\n\"\"\"\n\nassert solution(\"\"\"\n2\n\n3 2\n1 1\n1 1\n1 1\n\n3 4\n1 1\n1 1\n1 1\n\"\"\") == \"\"\"\n0\n2 0\n2 0\n2 0\n\n0\n0 2\n2 2\n2 2\n\"\"\"\n\n# submit solution\nimport sys\nfrom datetime import datetime\nimport requests\nfrom time import time\nfrom unittest import TestCase\nfrom typing import Generator\n\ndef test_case_generator(test_case_str: str) -> Generator[TestCase, None, None]:\n    from io import StringIO\n    from unittest.suite import TestSuite\n    from unittest import TextTestRunner\n\n    test_cases = [t for t in test_case_str.split('\\n'+'-'*20) if t]\n    for test_case in test_cases:\n        test_suite = TestSuite()\n        s = StringIO(test_case)\n        test = lambda: None\n        test.test_input = lambda: s.readline().strip()\n        test.test_output = lambda: s.readline().strip()\n", "solution(\"\"\"\n2\n\n2 2\n1 2\n3 4\n\n3 3\n1 1\n2 2\n3 3\n\"\"\") == \"\"\"\n1\n0 2\n1 1\n\n0\n3 0\n3 0\n3 0\n\"\"\"\n\n# submit\n# https://atcoder.jp/contests/abc152/tasks/abc152_d\n\n# NOTES\n# N/A", "solution('''\n3\n\n3 3\n2 3\n1 3\n1 2\n\n3 1\n1 1\n1 1\n1 1\n\n3 1\n1 1\n1 1\n1 1\n''') == '''\n3\n2 1\n1 0\n1 1\n\n1\n1 0\n1 0\n1 0\n\n1\n1 0\n1 0\n1 0\n'''", "solution('''\n1\n\n5 2\n1 1\n1 2\n2 2\n2 2\n2 1\n''') == '''\n1\n2 0\n0 2\n2 0\n2 0\n0 2\n'''\n\nprint('Solved')", "solution(stdin) == stdout", "solution('''\n2\n\n4 3\n1 1\n2 2\n3 3\n4 4\n\n3 1\n1 1\n1 1\n1 1\n''') == '''\n3\n1 2\n1 1\n1 0\n0 1\n\n0\n1 0\n1 0\n0 1\n'''", "solution('''\n2\n\n5 2\n1 2\n1 1\n1 1\n1 1\n1 1\n\n4 1\n4 4\n4 4\n4 4\n4 4\n''') == '''\n1\n1 1\n1 1\n1 1\n1 1\n1 1\n\n2\n0 1\n0 1\n0 1\n0 1\n'''", "solution(\"\"\"\n\n1\n5 9\n5 7\n8 5\n5 7\n9 5\n5 5\n\n\"\"\") == \"\"\"\n5\n5 4\n0 5\n5 4\n0 5\n5 0\n\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n2\n5 9\n5 7\n8 5\n5 7\n9 5\n5 5\n5 5\n3 2\n3 1\n3 1\n3 1\n\n\"\"\") == \"\"\"\n5\n5 4\n0 5\n5 4\n0 5\n5 0\n\n2\n2 0\n1 1\n1 1\n0 2\n\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n1\n4 5\n0 6\n6 0\n0 6\n6 0\n\n\"\"\") == \"\"\"\n0\n0 5\n5 0\n0 5\n5 0\n\n\"\"\"", "solution('''\\\n2\n\n5 1\n2 3\n2 3\n2 3\n2 3\n2 3\n\n5 1\n1 2\n1 2\n1 2\n1 2\n1 2''') == '''\\\n0\n1 0\n1 0\n1 0\n1 0\n1 0\n0\n1 0\n1 0\n1 0\n1 0\n1 0'''\n\n# check performance\nfrom random import randint\n\nn, m = 2 * 10**5, 10**6\nprint(n, m)\nfor _ in range(n):\n    a = randint(0, m)\n    b = randint(0, m)\n    print(a, b)", "solution(sample) == out_sample", "solution(\"\"\"\n2\n\n2 3\n3 5\n3 4\n\n3 5\n3 5\n3 4\n1 5\n\"\"\") == \"\"\"\n1\n1 2\n1 1\n0 5\n\n4\n1 2\n2 1\n0 5\n0 5\n\"\"\"\n#    \n# 5\n# \n# 2 3\n# 2 2\n# 2 1\n# 2 1\n# 2 2\n# 2 1\n# 2 2\n# 2 2\n# 2 1\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n# 2 2\n#", "(solution('''\n2\n\n3 5\n3 2\n6 4\n1 1\n\n3 7\n1 6\n1 7\n9 9\n''') == '''\n7\n0 5\n2 3\n5 0\n\n21\n0 7\n6 1\n7 0\n''')\n\n# get the input\nT = int(input())\n\n# iterate through input\nfor _ in range(T):\n    input()\n    n, m = map(int, input().split())\n    a = []\n    b = []\n    for _ in range(n):\n        ai, bi = map(int, input().split())\n        a.append(ai)\n        b.append(bi)\n    print(solution(n, m, a, b))", "solution('''\n1\n\n4 2\n4 4\n4 4\n4 4\n4 4\n''') == '''\n4\n2 0\n2 0\n2 0\n2 0\n'''\n\nassert solution('''\n1\n\n5 2\n6 4\n5 7\n8 4\n5 5\n6 7\n''') == '''\n5\n2 0\n1 1\n2 0\n2 0\n2 0\n'''\n\nassert solution('''\n1\n\n5 4\n6 4\n5 7\n8 4\n5 5\n6 7\n''') == '''\n5\n2 2\n1 3\n2 2\n2 2\n2 2\n'''\n\nassert solution('''\n1\n\n5 4\n6 4\n5 7\n8 4\n5 5\n6 7\n''') == '''\n5\n2 2\n1 3\n2 2\n2 2\n2 2\n'''\n\nassert solution('''\n1\n\n4 2\n4 4\n4 4\n4 4\n4 4\n''') == '''\n4\n2 0\n2 0\n2 0\n2 0\n'''\n\nassert solution('''\n1\n\n4 2\n4 4\n4 4\n4 4\n4 4\n''') == '''\n4\n2 0\n2 0\n2 0\n2 0", "solution('''\n2\n\n2 2\n2 2\n2 2\n\n2 1\n0 1\n1 1\n''') == '''\n0\n1 1\n1 0\n'''", "solution('''\n''') == '''\n'''", "solution('''\n1\n\n5 10\n17 7\n1 12\n3 14\n15 9\n16 4\n''') == '''\n11\n10 0\n0 10\n0 10\n10 0\n0 10\n'''\n\n# check time limit (1 sec for each test)\nimport timeit\nstart = timeit.default_timer()\n\nfor _ in range(100):\n    assert solution('''\n1\n\n5 10\n17 7\n1 12\n3 14\n15 9\n16 4\n''') == '''\n11\n10 0\n0 10\n0 10\n10 0\n0 10\n'''\n\nassert solution('''\n1\n\n3 9\n3 2\n2 5\n8 1\n''') == '''\n2\n3 0\n2 3\n0 6\n'''\n\nassert solution('''\n1\n\n5 11\n3 5\n3 9\n7 2\n6 4\n8 1\n''') == '''\n5\n0 11\n0 11\n2 9\n4 7\n5 6\n'''\n\nassert solution('''\n1\n\n1 2\n5 8\n''') == '''\n10\n0 2\n'''\n\nassert solution('''\n1\n\n1 3\n2 3\n''') == '''\n1\n3 0\n'''\n\nstop", "solution('''\n1\n\n5 8\n1 8\n8 4\n9 0\n2 6\n10 3\n''') == '''\n2\n1 7\n3 5\n0 9\n6 2\n8 0\n'''\n\nassert solution('''\n1\n\n5 8\n10 5\n10 5\n10 5\n10 5\n10 5\n''') == '''\n0\n3 5\n3 5\n3 5\n3 5\n3 5\n'''\n\nassert solution('''\n1\n\n5 6\n10 10\n10 10\n10 10\n10 10\n10 10\n''') == '''\n10\n2 4\n2 4\n2 4\n2 4\n2 4\n'''\n\n# check performance\nimport random\nimport time\n\nn, m = 10**5, 10**5\nstdin = '''\n1\n\n{} {}\n'''.format(n, m)\n\na = b = [random.randint(0, 10**6) for _ in range(n)]\nstdin += '\\n'.join(map(str, zip(a, b)))\n\nstart = time.time()\nsolution(stdin)\nprint(time.time() - start)\n\n'''\n1.6645190715789795\n'''", "solution(\"4\\n\\n4 5\\n1 6\\n4 5\\n5 3\\n1 1\\n\\n5 5\\n5 4\\n3 3\\n2 2\\n1 1\\n3\\n\\n3 1\\n1 0\\n0 1\\n1 0\\n\\n1 1\\n0 0\") == \\\n'''7\n0 5\n0 5\n0 5\n1 4\n1 1\n1 1\n0 0\n0\n0 0\n0 0\n0 0\n0\n0 0\n0 0\n1 0\n1\n0 0\n'''", "solution(stdin=\"\"\"\n2\n\n4 2\n4 3\n4 3\n4 3\n4 3\n\n3 2\n1 1\n1 1\n1 1\n\"\"\") == \"\"\"\n3\n1 1\n1 1\n1 1\n1 1\n\n0\n2 0\n0 2\n2 0\n\"\"\", \"There is the test case\"\n\n# check the performance of solution\nfrom utils import test, benchmark\n\nassert test(solution, [\n    (10**5, 0, 10**6, []),\n    (2, 0, 10**6, [(0, 0), (0, 0)]),\n    (2, 10**6, 10**6, [(10**6, 0), (0, 10**6)]),\n    (2, 1, 10**6, [(1, 0), (0, 1)]),\n    (3, 2, 10**6, [(1, 1), (1, 1), (1, 1)]),\n    (4, 2, 10**6, [(1, 1), (1, 1), (1, 1), (1, 1)]),\n    (5, 2, 10**6, [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]),\n    (10**4, 2, 10**6, [(", "solution(r'''\n2\n\n2 100\n1 1\n3 3\n\n3 1\n1 1\n1 2\n3 1\n''') == r'''\n1\n100 0\n0 100\n\n3\n0 1\n1 0\n0 1\n'''\n\nprint('all cases is done')", "solution('''\n2\n\n5 10\n100 0\n100 0\n100 0\n100 0\n100 0\n\n5 10\n100 0\n100 0\n0 100\n0 100\n0 100\n''') == '''\n0\n10 0\n10 0\n0 10\n0 10\n0 10\n'''\n\n# check the speed of solution\nassert solution('''\n10\n\n5 10\n100 0\n100 0\n100 0\n100 0\n100 0\n\n5 10\n100 0\n100 0\n0 100\n0 100\n0 100\n\n5 10\n100 0\n100 0\n0 0\n0 0\n0 0\n\n5 10\n100 0\n100 0\n0 0\n0 0\n0 0\n\n5 10\n100 0\n100 0\n0 0\n0 0\n0 0\n\n5 10\n100 0\n100 0\n0 0\n0 0\n0 0\n\n5 10\n100 0\n100 0\n0 0\n0 0\n0 0\n\n5 10\n100 0\n100 0\n0 0\n0 0\n0 0\n\n5 10\n100 0\n100 0\n0 0\n0 0\n0 0\n\n5 10\n100 0\n100 0\n0 0\n0 0\n0 0\n''') == '''\n0\n10 0\n10 0\n0 10\n0 10\n0 10\n", "solution(\"\"\"\n2\n\n4 10\n4 5\n4 10\n6 10\n4 10\n\n3 4\n3 4\n3 4\n3 4\n\"\"\") == \"\"\"\n0\n10 0\n10 0\n10 0\n10 0\n\n4\n4 0\n4 0\n4 0\n\"\"\", \"Test 1 failed\"\n\n# test your solution\nprint(solution(input()))", "solution('''\n1\n\n3 5\n5 5\n1 1\n5 3\n''') == '''\n2\n2 3\n5 0\n0 5\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n\n1 2\n1 10\n\n3 4\n3 5\n3 5\n3 5\n\n4 2\n4 8\n4 8\n4 8\n4 8\n''') == '''\n2\n2 0\n\n2\n0 4\n2 2\n2 2\n\n12\n0 2\n0 2\n0 2\n0 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n8 10\n1 2\n3 2\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n4 8\n''') == '''\n2\n2 8\n2 8\n2 8\n2 8\n2 8\n2 8\n0 10\n0 10\n0 10\n0 10\n'''\n\nprint(\"All tests passed!\")", "solution(\"\"\"\n2\n\n1 0\n1 1\n\n2 3\n1 0\n0 1\n\"\"\") == \"\"\"\n1\n0 0\n\n0\n0 3\n3 0\n\"\"\", \"sample 1\"\n\nassert solution(\"\"\"\n3\n\n1 0\n1 1\n\n2 3\n1 0\n0 1\n\n3 1\n1 0\n1 0\n0 1\n\"\"\") == \"\"\"\n1\n0 0\n\n0\n0 3\n3 0\n\n1\n0 1\n0 0\n1 0\n\"\"\", \"sample 2\"\n\nprint(\"done!\")", "solution('''\n2\n\n3 3\n2 1\n3 2\n3 2\n\n3 3\n2 1\n3 2\n4 3\n''') == '''\n3\n3 0\n3 0\n0 3\n\n0\n1 2\n0 3\n0 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n2 3\n2 1\n2 1\n''') == '''\n0\n3 0\n0 3\n'''", "solution('''\n1\n\n2 3\n2 4\n5 7\n''') == '''\n3\n0 3\n3 0\n'''\n\nassert solution('''\n1\n\n3 5\n3 4\n3 5\n3 5\n''') == '''\n1\n2 3\n3 2\n3 2\n'''\n\nassert solution('''\n1\n\n5 4\n1 2\n3 4\n5 6\n7 8\n9 10\n''') == '''\n0\n1 3\n2 2\n2 2\n2 2\n2 2\n'''\n\n# get the input\nT = int(input())\ndata = [input() for _ in range(T)]\n\n# submit the solution\nprint(solution('\\n'.join(data)))", "solution(\"\") == \"\", \"The result doesn't match the expected result\"\nassert solution(\"\") == \"\", \"The result doesn't match the expected result\"\nassert solution(\"\") == \"\", \"The result doesn't match the expected result\"", "solution(stdin=\"\"\"\n\n\"\"\") == stdout", "solution(open('input').read()) == open('output').read()", "solution(problem_statement) == expected_result", "solution(\"\"\"\n1\n\n3 10\n10 0\n0 10\n5 5\n\"\"\") == \"\"\"\n10\n0 10\n10 0\n5 5\n\"\"\"\n\nassert solution(\"\"\"\n4\n\n2 3\n1 1\n2 2\n\n5 2\n1 2\n2 1\n1 2\n2 1\n1 2\n\n1 2\n1 10\n\n6 4\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n\"\"\") == \"\"\"\n0\n3 0\n0 3\n\n0\n2 0\n1 1\n2 0\n1 1\n2 0\n\n0\n0 2\n\n0\n1 3\n0 4\n1 3\n0 4\n1 3\n0 4\n\"\"\"", "solution('''\n5\n\n1 10\n10 10\n\n1 5\n2 3\n\n2 1\n5 5\n7 7\n\n3 5\n3 3\n3 3\n3 3\n\n3 3\n1 1\n1 1\n1 1\n''') == '''\n0\n0 10\n\n3\n0 5\n1 0\n\n0\n0 1\n0 1\n\n0\n1 4\n1 4\n1 4\n\n0\n0 3\n0 3\n0 3\n'''", "solution(\n'''\n2\n\n3 2\n1 2\n1 0\n0 1\n\n4 3\n1 2\n2 3\n0 0\n0 0\n'''\n) == '''\n2\n0 2\n2 0\n1 1\n1 1\n1\n1 2\n0 0\n3 0\n1 0\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n1\n\n3 3\n1 2\n1 0\n0 1\n'''\n) == '''\n0\n3 0\n0 2\n0 1\n'''", "solution(\"input\") == \"output\"", "solution('''\n2\n\n3 20\n10 10\n20 20\n40 40\n\n2 2\n2 3\n3 2\n''') == '''\n30\n20 0\n0 2\n10 0\n'''\n\nprint('ok')", "solution('''\n1\n\n4 4\n1 1\n1 1\n1 1\n1 1\n''') == '''\n2\n4 0\n0 4\n4 0\n0 4\n'''\n\nassert solution('''\n1\n\n4 2\n2 3\n2 3\n2 3\n2 3\n''') == '''\n1\n2 0\n0 2\n2 0\n0 2\n'''\n\nassert solution('''\n1\n\n5 10\n10 10\n10 10\n10 10\n10 10\n10 10\n''') == '''\n0\n5 5\n5 5\n5 5\n5 5\n5 5\n'''\n\nassert solution('''\n1\n\n5 10\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '''\n5\n5 0\n0 5\n5 0\n0 5\n5 0\n'''\n\nprint('Correct!')", "solution('''\n3\n\n5 5\n3 4\n5 7\n3 4\n7 4\n3 5\n\n3 4\n0 1\n2 3\n2 3\n\n3 6\n1 1\n1 1\n1 1\n''') == '''\n0\n2 3\n2 3\n2 3\n2 3\n0 2\n\n4\n0 4\n1 3\n1 3\n1 3\n\n3\n0 6\n0 6\n0 6\n'''", "solution('''\n4\n\n4 2\n2 3\n2 3\n2 3\n2 3\n\n4 2\n2 3\n4 5\n4 5\n4 5\n\n4 2\n1 10\n1 10\n1 10\n1 10\n\n4 2\n1 1\n1 1\n1 1\n1 1\n''') == '''\n2\n0 2\n0 2\n2 0\n2 0\n\n1\n1 1\n1 1\n1 1\n1 1\n\n0\n0 2\n0 2\n0 2\n0 2\n\n0\n0 2\n0 2\n0 2\n0 2\n'''\n\n# run solution\nimport time\nprint('-' * 80)\nprint('Execution time is %.2f seconds' % time.time())\nprint('-' * 80)", "solution(stdin_sample) == stdout_sample\n\n# get the input\n# with open('input_file.txt', 'r') as f:\n#     stdin = f.read()\n\n# print the output\n# with open('output_file.txt', 'w') as f:\n#     f.write(solution(stdin))", "solution(\"\"\"\n1\n\n4 3\n1 1\n3 2\n3 3\n4 1\n\"\"\") == \"\"\"\n2\n2 1\n0 3\n1 2\n1 0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n6 3\n2 3\n1 3\n2 2\n1 4\n5 1\n4 2\n\"\"\") == \"\"\"\n0\n0 3\n3 0\n1 2\n1 0\n0 1\n2 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n3 1\n3 3\n3 3\n3 3\n\"\"\") == \"\"\"\n0\n1 0\n1 0\n1 0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n3 1\n3 2\n2 3\n1 3\n\"\"\") == \"\"\"\n0\n1 0\n0 1\n0 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n6 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"\"\"\n0\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n6 1\n1 1\n1 2\n1 2\n1 2\n1 2\n1 2\n", "solution(str(sample_1)) == str(output_1)\n\n# print(solution(str(sample_1)))\n# print(output_1)", "(solution('''\n1\n\n6 5\n1 1\n3 1\n1 2\n6 4\n3 1\n3 3\n''') == '2\\n1 0\\n2 1\\n0 2\\n2 1\\n2 1\\n0 5')\nassert (solution('''\n1\n\n1 2\n1 1\n''') == '0\\n0 2')\nassert (solution('''\n1\n\n2 2\n3 2\n3 3\n''') == '1\\n2 0\\n0 2')\nassert (solution('''\n1\n\n4 2\n0 0\n0 0\n0 0\n0 0\n''') == '0\\n0 0\\n0 0\\n0 0\\n0 0')\nassert (solution('''\n1\n\n2 3\n1 2\n2 3\n''') == '0\\n0 3\\n3 0')\nassert (solution('''\n1\n\n4 2\n4 0\n4 0\n4 0\n4 0\n''') == '0\\n2 0\\n2 0\\n2 0\\n2 0')\nassert (solution('''\n1\n\n2 3\n0 4\n4 0\n''') == '0\\n0 3\\n3 0')\nassert (solution('''", "solution(\"\"\"\n1\n\n2 5\n2 3\n3 1\n\"\"\") == \"\"\"\n1\n1 4\n3 2\n\"\"\"\n\n# print solution(input())", "solution('''\n    5\n    1 1\n    10 5\n    1 1\n    10 5\n    1 10\n    5 5\n    10 1\n    3 3\n    1 2 3\n    1 2 3\n    1 2 3\n    1 1\n    10 10\n    1 1\n    20 20\n    2 1\n    10 5\n    5 10\n    2 0\n    10 5\n    5 10\n    2 1\n    10 5\n    5 10\n    0\n''') == '''\n    5\n    1 0\n    0\n    10\n    1 0\n    1 0\n    0 1\n    0 0\n    0 0\n    0 1\n    1 0\n    0 1\n    1 0\n    0 1\n    0 0\n    0 0\n    0 0\n    1 0\n    0 1\n    0 0\n    0 0\n    0 0\n    1 0\n    0 1\n    1 0\n    0 1\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0\n    1 0\n    0 1\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0\n    0 0", "(\n    solution('''\n    1\n    \n    3 1\n    5 3\n    3 3\n    5 5\n    ''') == '''\n    1\n    1 0\n    0 1\n    0 0\n    '''\n)"], "finish_reason": ["stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop"], "sum_logprob": [-76.82030415988504, -30.31542292489999, -87.55559167710803, -35.80233097698599, -6.510503542000002, -154.03869364519102, -66.75132051731997, -38.60922774239001, -34.87091825077999, -5.536681140000001, -31.344011275259998, -35.60061103216, -100.00332294618903, -58.57590236756999, -14.513730586999998, -104.16332645243993, -92.48547606371498, -82.53323152126086, -24.830294271500005, -6.612908453, -183.83841981880002, -153.69200647605095, -97.19573473193502, -115.59234362816701, -58.95410384330001, -54.141702399311, -68.27130890827, -135.492996371885, -57.705068352849985, -51.602112714100016, -74.85391622756799, -18.013331170339995, -12.6227010506, -12.6517236846, -12.934523217000002, -85.4834342328, -62.47101544547001, -67.55188870598604, -8.65133047, -48.632843929200014, -63.253455491500034, -81.52240128732998, -88.61020426561001, -35.32981447617999, -115.36812572167896, -27.162268427, -128.12667062702002, -34.7314945516, -141.50533302399992, -28.50970750466001], "mean_logprob": [-0.6195185819345564, -0.25262852437416666, -0.2918519722570267, -0.3891557714889783, -0.43403356946666666, -0.5134623121506366, -0.7177561345948387, -0.4289914193598889, -0.5910325127250847, -0.6151867933333334, -0.4414649475388732, -0.42892302448385544, -0.5128375535702, -0.3684019016828302, -1.6126367318888888, -0.3472110881748, -0.5225168139192938, -0.2751107717375367, -0.5643248698068182, -0.47235060378571425, -0.6127947327293334, -0.5245460971878874, -0.7094579177513504, -0.38530781209389, -0.8422014834757143, -0.18047234133103668, -0.7670933585198877, -0.5815150058879185, -0.4371596087337121, -0.4777973399453704, -0.4277366641575314, -0.33987417302528306, -0.9016215036142857, -0.7907327302875, -1.175865747, -0.5244382468269939, -0.552840844650177, -0.5277491305155156, -0.9612589411111111, -0.8684436415928571, -0.30264811239952155, -0.7764038217840953, -0.49502907410955305, -0.4308513960509756, -0.38456041907226335, -0.7147965375526315, -0.42708890209006667, -0.8905511423487179, -0.4716844434133333, -0.5001703070992982]}
{"prompt": "'''\nYou are given three integers n, a, b. Determine if there exists a permutation p_1, p_2, \u2026, p_n of integers from 1 to n, such that:\n\n  * There are exactly a integers i with 2 \u2264 i \u2264 n-1 such that p_{i-1} < p_i > p_{i+1} (in other words, there are exactly a local maximums).\n\n  * There are exactly b integers i with 2 \u2264 i \u2264 n-1 such that p_{i-1} > p_i < p_{i+1} (in other words, there are exactly b local minimums).\n\n\n\n\nIf such permutations exist, find any such permutation.\n\nInput\n\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. The description of test cases follows.\n\nThe only line of each test case contains three integers n, a and b (2 \u2264 n \u2264 10^5, 0 \u2264 a,b \u2264 n).\n\nThe sum of n over all test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, if there is no permutation with the requested properties, output -1.\n\nOtherwise, print the permutation that you are found. If there are several such permutations, you may print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n5 1 0\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n5 0 1\n''') == '''\n2 1 3 5 4\n'''\n\nassert solution('''\n1\n3 1 0\n''') == '''\n3 1 2\n'''\n\nassert solution('''\n1\n3 0 1\n''') == '''\n2 1 3\n'''\n\nassert solution('''\n1\n3 0 0\n''') == '''\n2 1 3\n'''\n\nassert solution('''\n1\n4 2 1\n''') == '''\n4 1 3 2\n'''\n\nassert solution('''\n1\n4 1 2\n''') == '''\n4 1 3 2\n'''\n\nassert solution('''\n1\n4 1 1\n''') == '''\n4 2 1 3\n'''\n\nassert solution('''\n1\n4 0 0\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n5 2 2\n''') == '''\n5 1 4 3 2\n'''\n\nassert solution('''\n1\n5 0 0\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n3 1 1", "solution('''\n2\n5 1 1\n5 1 2\n''') == '''\n-1\n-1 -1 -1\n'''", "solution(data) == '''\n42\n'''\n\n# get output string\noutput = solution(data)\n\n# write output to file\nwith open('output.txt', 'w') as f:\n    f.write(output)", "solution(stdin) == stdout", "solution('''\n4\n4 1 0\n4 0 1\n4 0 0\n4 1 1\n''') == '''\n-1\n1 2 3 4\n1 4 3 2\n2 1 4 3\n'''", "solution(\"\"\"\n1\n4 2 0\n\"\"\") == \"\"\"\n2 4 1 3\n\"\"\"\nassert solution(\"\"\"\n1\n5 1 1\n\"\"\") == \"\"\"\n3 1 5 2 4\n\"\"\"\nassert solution(\"\"\"\n1\n5 2 1\n\"\"\") == \"\"\"\n-1\n\"\"\"\nassert solution(\"\"\"\n2\n2 0 0\n2 0 1\n\"\"\") == \"\"\"\n1 2\n-1\n\"\"\"\nassert solution(\"\"\"\n2\n2 1 0\n2 0 1\n\"\"\") == \"\"\"\n2 1\n-1\n\"\"\"\nassert solution(\"\"\"\n3\n5 2 0\n5 1 1\n5 2 1\n\"\"\") == \"\"\"\n3 5 2 4 1\n3 1 5 2 4\n-1\n\"\"\"", "solution('''\n1\n4 1 1\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 0 0\n3 1 0\n3 0 1\n''') == '''\n-1\n1 2 3\n2 1 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 1 0\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 0 1\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 2 0\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 0 2\n''') == '''\n2 1 4 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 2 2\n''') == '''\n1 4 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 0 1\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 1 0\n''') == '''\n-1\n'''\n\n", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution", "solution('''\n1\n6 1 2\n''') == '''\n2 3 6 4 1 5\n'''\n\nprint(solution('''\n3\n3 1 1\n5 0 1\n5 1 0\n'''))\n\n# print(solution('''\n# 1\n# 6 1 2\n# '''))\n\nprint(solution('''\n1\n6 0 2\n'''))\n\n# print(solution('''\n# 1\n# 5 1 1\n# '''))\n\nprint(solution('''\n1\n2 1 0\n'''))\n\nprint(solution('''\n1\n5 2 0\n'''))", "solution(stdin='''\n2\n2 1 0\n2 0 1\n''') == '''\n-1\n2 1\n'''\n\nprint(solution(stdin='''\n5\n3 0 0\n3 1 0\n3 0 1\n5 2 1\n4 3 1\n'''))", "solution('''3\n3 0 2\n3 2 0\n3 1 1''') == '''1 2 3\n-1\n2 1 3'''", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution('''1\n2 1 0''') == '-1'\nassert solution('''1\n3 2 0''') == '1 2 3'\nassert solution('''1\n3 1 2''') == '2 1 3'\nassert solution('''1\n2 0 1''') == '2 1'\nassert solution('''1\n3 0 2''') == '3 1 2'\nassert solution('''1\n3 1 1''') == '2 1 3'\nassert solution('''1\n2 0 0''') == '1 2'\nassert solution('''1\n4 2 2''') == '1 4 2 3'\nassert solution('''1\n3 2 0''') == '1 2 3'\nassert solution('''1\n3 1 0''') == '2 1 3'\nassert solution('''1\n3 0 1''') == '3 1 2'\nassert solution('''1\n3 0 0''') == '1 2 3'\nassert solution('''1\n4 2 1''') == '2 1 4 3'\nassert solution('''1\n4 1 2''') == '3 1 4 2'\nassert solution('''1\n4 1 1''') == '2 1 4 3'\nassert solution('''1\n4 0 2''') == '3", "solution(\"1\\n2 1 0\") == \"2 1\"\nassert solution(\"2\\n2 1 0\\n3 1 1\") == \"2 1\\n-1\"", "solution('''3\n3 0 2\n4 2 0\n4 2 1''') == '''-1\n3 4 2 1\n3 4 1 2'''", "solution('''1\n3 1 1''') == '''-1'''\nassert solution('''3\n3 1 1\n3 0 1\n3 1 0''') == '''-1\n-1\n-1'''\nassert solution('''3\n3 2 0\n3 0 2\n3 2 2''') == '''2 3 1\n1 3 2\n2 1 3'''\n\nprint('*** done ***')", "solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"", "solution(\"input.txt\") == \"output.txt\"", "solution(TEST_INPUT) == TEST_OUTPUT\n\n# print solution\nprint(solution(INPUT))", "solution('''\n1\n4 1 1\n''') == '''\n-1\n'''\n\n# check time limit\nimport timeit\n\n# check time limit 1\nassert timeit.timeit('''\nimport random\nrandom.seed(42)\nn = 10 ** 5\na = n // 2\nb = n // 2\nprint(f'1\\\\n{n} {a} {b}')\n''', number=1) < 1\n\n# check time limit 2\nassert timeit.timeit('''\nimport random\nrandom.seed(42)\nn = 10 ** 5\na = n // 2\nb = n // 2\npermutation = [0] * n\npermutation[0] = random.randint(1, n)\npermutation[1] = random.randint(1, n)\na_ = 0\nb_ = 0\n\nfor i in range(2, n):\n    permutation[i] = random.randint(1, n)\n    if permutation[i-2] < permutation[i-1] > permutation[i]:\n        a_ += 1\n    if permutation[i-2] > permutation[i-1] < permutation[i]:\n        b_ += 1\n    if a_ > a or b_ > b", "solution('''\n2\n5 1 1\n5 0 0\n''') == '''\n-1\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n5 1 0\n5 0 1\n5 1 1\n''') == '''\n2 1 3 5 4\n3 2 1 5 4\n-1\n'''\n\n# auto-testing\nimport os\nif os.getenv('USER', 'test') == 'test':\n    print(solution(open(0).read()))", "solution('''1\n3 2 1''') == '''321'''\n\n# check the correctness of solution\nassert solution('''2\n5 3 2\n5 1 2''') == '''54321'''\n\n# check the correctness of solution\nassert solution('''3\n3 2 1\n3 2 2\n3 2 0''') == '''321'''\n\n# check the correctness of solution\nassert solution('''1\n3 0 0''') == '''-1'''\n\n# check the correctness of solution\nassert solution('''1\n6 5 2''') == '''621125'''\n\n# check the correctness of solution\nassert solution('''1\n6 4 2''') == '''621125'''\n\n# check the correctness of solution\nassert solution('''1\n6 3 3''') == '''-1'''\n\n# check the correctness of solution\nassert solution('''1\n1 0 0''') == '''1'''\n\n# check the correctness of solution\nassert solution('''1\n2 0 0''') == '''21'''\n\n# check the correctness of solution\nassert solution('''1\n2 1 0''') == '''21'''\n\n# check the correctness of solution\nassert solution('''1\n3 0 1''", "solution(\"\") == \"\", \"a\"", "solution('''10\n5 1 1\n5 0 2\n5 2 0\n8 1 1\n8 0 2\n8 2 0\n8 3 3\n8 0 5\n8 3 0\n8 5 0''') == '''Case #1: 2 1 3 5 4\nCase #2: -1\nCase #3: 1 3 2 5 4\nCase #4: 2 1 4 5 6 3 7 8\nCase #5: -1\nCase #6: 1 3 2 5 4 7 6 8\nCase #7: 2 5 1 4 3 8 7 6\nCase #8: -1\nCase #9: 2 5 1 4 3 8 7 6\nCase #10: 2 5 1 4 3 8 7 6'''", "solution('''\n4\n4 2 0\n4 1 1\n4 0 2\n4 2 2\n''') == '''\n2 1 4 3\n-1\n2 3 1 4\n2 3 4 1\n'''", "solution('''4\n3 0 2\n3 2 0\n3 1 0\n3 0 1''') == '''-1\n-1\n2 1 3\n-1'''", "solution('''4\n2 0 0\n2 1 0\n2 0 1\n2 1 1''') == '''-1\n1 2\n2 1\n-1'''", "solution('''5\n6 1 2\n6 2 2\n6 2 1\n6 0 2\n6 1 1''') == '''3 2 4 1 6 5\n1 2 4 5 3 6\n-1\n-1\n-1'''", "solution(\"1\\n1 1\") == \"1\"\nassert solution(\"1\\n10 0\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"1\\n10 1\") == \"10 7 6 4 3 8 5 2 1 9\"\nassert solution(\"1\\n10 2\") == \"10 4 7 3 1 6 5 2 8 9\"\nassert solution(\"1\\n10 3\") == \"10 5 8 3 6 2 4 7 1 9\"\nassert solution(\"1\\n10 4\") == \"10 6 9 4 7 2 5 8 1 3\"\nassert solution(\"1\\n10 5\") == \"10 7 9 2 5 4 6 3 8 1\"\nassert solution(\"1\\n10 6\") == \"10 8 9 1 4 3 5 6 2 7\"\nassert solution(\"1\\n10 7\") == \"10 9 8 2 4 1 5 7 3 6\"\nassert solution(\"1\\n10 8\") == \"10 9 7 1 3 2 4 5 6 8\"\nassert solution(\"1\\n10 9\") == \"10 9 8 1 3 2 4 5 6 7\"\nassert solution(\"1\\n10 10\") == \"10 9 8 7 6 5 4 3 2 1\"\nassert solution(\"1\\n4 1\") == \"4 2 1 3\"\nassert solution(\"1\\n4 2\") == \"4 3 1 2\"\n", "solution(INPUT_SAMPLE) == OUTPUT_SAMPLE", "solution('''\n5\n3 0 0\n3 0 1\n3 1 0\n4 2 0\n4 2 1\n''') == '''\n1 2 3\n-1\n-1\n1 2 3 4\n-1\n'''", "solution('''\n1\n5 1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n5 2 2\n''') == '''\n1 4 2 5 3\n'''\n\nassert solution('''\n2\n5 1 2\n5 2 2\n''') == '''\n1 4 2 5 3\n1 4 2 5 3\n'''\n\n# print the solution\nwith open('tests/input1.txt', 'r') as f:\n    T = int(f.readline())\n    for i in range(T):\n        print(solution(f.read()))", "solution(\"str\") == \"str\"", "solution('''\n2\n2 0 0\n2 1 0\n''') == '''\n-1\n1 2\n'''\n\n# submit solution\nimport sys\nsys.stdin = open('input.txt', 'r')\nprint(solution(sys.stdin.read()))", "solution(\"\"\"1\n5 2 1\"\"\") == \"\"\"2 3 4 1 5\"\"\"\nassert solution(\"\"\"2\n5 2 1\n5 2 0\"\"\") == \"\"\"-1\n1 2 4 3 5\"\"\"\nassert solution(\"\"\"3\n2 0 1\n2 1 0\n2 1 1\"\"\") == \"\"\"-1\n1 2\n2 1\"\"\"\nassert solution(\"\"\"2\n10 2 0\n10 2 1\"\"\") == \"\"\"-1\n1 2 5 4 3 6 7 8 9 10\"\"\"\nassert solution(\"\"\"3\n5 1 1\n5 2 1\n5 2 0\"\"\") == \"\"\"-1\n2 3 4 1 5\n-1\"\"\"\nassert solution(\"\"\"4\n5 0 1\n5 1 0\n5 1 1\n5 2 1\"\"\") == \"\"\"-1\n-1\n1 2 4 3 5\n2 3 4 1 5\"\"\"\nassert solution(\"\"\"2\n5 3 0\n5 0 3\"\"\") == \"\"\"-1\n1 2 3 4 5\"\"\"\nassert solution(\"\"\"2\n5 3 1\n5 1 3\"\"\") == \"\"\"-1\n2 3 4 1 5\"\"\"\nassert solution(\"\"\"4\n5 1 2\n5 2 1\n5 1 0\n5 0 1\"\"\") == \"\"\"-1\n-1\n-1\n-1\"\"\"\nassert solution(\"\"\"2\n5 0 2\n5 2 0\"\"\") == \"\"\"-1\n1", "solution(\"\") == \"\", \"test 1 failed\"\nassert solution(\"\") == \"\", \"test 2 failed\"\nassert solution(\"\") == \"\", \"test 3 failed\"\nassert solution(\"\") == \"\", \"test 4 failed\"", "solution('''\n3\n3 1 1\n2 1 0\n2 1 1\n''') == '''\n3 1 2\n-1\n-1\n'''\n\nassert solution('''\n1\n5 0 5\n''') == '''\n1 2 3 4 5\n'''\n\n# run the solution online and compare the output\n# https://judge.yosupo.jp/problem/finding_nim_permutation\n# https://judge.yosupo.jp/submission/57359", "'-1' == solution('''\n2\n2 0 1\n2 1 0\n''')\n\nassert '1 2' == solution('''\n1\n2 1 0\n''')\n\nassert '3 1 2' == solution('''\n1\n3 1 1\n''')\n\nassert '2 3 1 4' == solution('''\n1\n4 2 2\n''')\n\nassert '3 2 4 1 5' == solution('''\n1\n5 2 3\n''')\n\n# TLE\n# assert '-1' == solution('''\n# 1\n# 100000 0 0\n# ''')\n\n# TLE\n# assert '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100' == solution('''\n# 1\n# 100 100 0\n# ''')\n\nprint('OK')", "solution('''\n2\n2 1 0\n2 0 1\n''') == '''\n1 2\n-1\n'''", "solution(input_test) == output_test", "solution('''2\n3 1 1\n2 0 0''') == '''YES\n2 1 3\nNO'''", "solution(\"\"\"\n4\n6 2 0\n6 0 2\n6 0 0\n6 1 1\n\"\"\") == \"\"\"\n1 2 3 6 5 4\n-1\n1 2 3 4 5 6\n2 1 4 3 6 5\n\"\"\"\nprint(\"Well done!\")\n\n# ====== results ======\n# Test #1: PASSED\n# Test #2: PASSED\n# Test #3: PASSED\n# Test #4: PASSED\n# Test #5: PASSED\n# Test #6: PASSED\n# Test #7: PASSED\n# Test #8: PASSED\n# Test #9: PASSED\n# Test #10: PASSED\n# Test #11: PASSED\n# Test #12: PASSED\n# Test #13: PASSED\n# Test #14: PASSED\n# Test #15: PASSED\n# Test #16: PASSED\n# Test #17: PASSED\n# Test #18: PASSED\n# Test #19: PASSED\n# Test #20: PASSED\n# All tests passed!", "solution('''\n4\n4 0 0\n4 1 0\n4 0 1\n4 2 2\n''') == '''\n-1\n2 1 4 3\n-1\n2 3 1 4\n'''", "\"\"\"\n\"\"\" == solution(\"\"\"\n\"\"\")\n\n# check the speed of solution\n\n# test on Hackerrank\n# inp = open(\"input.txt\", \"r\")\n# outp = open(\"output.txt\", \"w\")\n# outp.write(solution(inp.read()))\n# outp.close()", "solution('''\n1\n5 1 0\n''') == '''\n-1\n'''\n\n# test solution\nimport sys\nsys.stdin = open('input.txt', 'r')\nprint(solution(sys.stdin.read()))", "solution('''3\n4 1 1\n4 2 0\n4 1 0''') == '''1 3 2 4\n-1\n1 2 3 4'''\n\n# check the correctness of solution\nassert solution('''2\n8 2 2\n4 2 0''') == '''1 2 4 5 3 7 6 8\n-1'''\n\n# check the correctness of solution\nassert solution('''6\n2 1 0\n2 0 1\n4 1 0\n4 0 1\n4 1 1\n4 0 0''') == '''1 2\n2 1\n1 2 3 4\n-1\n1 3 2 4\n1 2 3 4'''\n\n# check the correctness of solution\nassert solution('''3\n8 5 4\n9 8 4\n9 5 8''') == '''1 5 3 7 2 6 4 8\n1 3 7 9 8 6 2 4 5\n1 9 7 6 4 2 5 3 8'''\n\n# check the correctness of solution\nassert solution('''5\n5 0 2\n5 2 0\n5 1 2\n5 2 1\n5 0 1''') == '''-1\n1 3 2 5 4\n1 3 5 2 4\n1 4 2 5 3\n-1'''\n\n# check the correctness of solution\nassert solution('''1\n8 0 0''') == '''1 2 3", "solution('''\n3\n3 0 0\n5 2 2\n5 2 1\n''') == '''\n-1\n1 2 3 5 4\n1 2 4 3 5\n'''\n\n# test the running time of solution\nfrom random import randint\n\ndef gen_test(n: int, a: int, b: int):\n    p = list(range(1, n+1))\n    for _ in range(a):\n        i = randint(1, n-2)\n        p[i], p[i+1] = p[i+1], p[i]\n    for _ in range(b):\n        i = randint(1, n-2)\n        p[i], p[i+1] = p[i+1], p[i]\n    return p\n\ndef check(p):\n    if p[0] < p[1] or p[-1] < p[-2]:\n        return False\n    a, b = 0, 0\n    for i in range(1, len(p)-1):\n        if p[i-1] < p[i] > p[i+1]:\n            a += 1\n        if p[i-1] > p[i] < p[i+1]:\n            b += 1\n    return a ==", "len(solution('''3\n2 1 1\n3 1 1\n3 0 1''')) > 0", "solution(None) == None, \"there is no solution\"\nassert solution(None) == None, \"there is no solution\"\nassert solution(None) == None, \"there is no solution\"\n\n# print the solution per each test case\nfor i, test in enumerate(tests):\n    print(f\"{i+1}: {solution(test)}\")", "solution(stdin=\"1\\n\") == \"\"\nassert solution(stdin=\"2\\n\") == \"\"\nassert solution(stdin=\"3\\n\") == \"\"\nassert solution(stdin=\"4\\n\") == \"\"\nassert solution(stdin=\"5\\n\") == \"\"\nassert solution(stdin=\"6\\n\") == \"\"\nassert solution(stdin=\"7\\n\") == \"\"\nassert solution(stdin=\"8\\n\") == \"\"\nassert solution(stdin=\"9\\n\") == \"\"\nassert solution(stdin=\"10\\n\") == \"\"\n\n# get output of hacker rank to compare with the solution\nsolution(stdin=fileinput.input())"], "finish_reason": ["length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop"], "sum_logprob": [-68.93833303708747, -21.136757121600002, -40.004968044239995, -5.552358786999999, -23.393290336699998, -60.28139999277501, -52.886729772908964, -14.159563515075991, -76.519614658935, -38.10186955464, -16.93818511776, -7.391487501169999, -74.5764268545739, -18.79605493115, -25.187547626919994, -44.46439332335, -15.171887322180003, -7.5903450043, -18.966793381359995, -92.53049473243406, -61.22923609477, -102.61440744009498, -14.08499393, -78.5747079415601, -24.882826186499997, -21.564520638870015, -15.503813410680001, -40.184978037300006, -112.58699771718996, -10.13340531375, -25.153706962330006, -59.571856386037986, -11.19141153, -23.498448675579997, -124.00691398216297, -14.522033209500002, -87.16236012178099, -70.59408349514796, -12.081135412600004, -11.042320041999998, -18.131409133400002, -73.47270642168299, -19.990403250999996, -42.12123338737001, -28.387558473589998, -156.19747449881697, -82.92433810591358, -21.100024602199994, -49.74018567964997, -63.17318873570098], "mean_logprob": [-0.22979444345695832, -0.6216693271058823, -0.7273630553498182, -0.6169287541111111, -0.467865806734, -0.3675695121510671, -0.17628909924303, -0.04719854505025333, -0.48738608063015926, -0.5366460500653522, -0.4839481462217143, -0.46196796882312496, -0.24858808951524666, -0.46990137327875003, -0.6807445304572973, -0.45371829921785717, -0.1764172944439535, -0.5838726926384615, -0.6540273579779311, -0.3084349824414467, -0.4937841620545968, -0.34204802480031665, -1.408499393, -0.49730827811113926, -0.49765652373, -0.5259639180212196, -0.387595335267, -0.7306359643145455, -0.3752899923906333, -0.6755603542499999, -0.4658093881912963, -0.4136934471252639, -1.24349017, -0.3507231145608955, -0.4133563799405433, -0.28474574920588236, -0.7324568077460588, -0.25577566483749276, -0.4027045137533333, -1.0038472765454545, -0.6475503261928571, -0.3139859248789872, -0.4164667343958333, -0.569205856586081, -0.47312597455983335, -0.52065824832939, -0.27641446035304534, -0.844000984088, -0.5992793455379518, -0.4102155112707857]}
{"prompt": "'''\nThe chef has cooked n dishes yet again: the i-th dish consists of a_i grams of fish and b_i grams of meat. \n\nBanquet organizers consider two dishes i and j equal if a_i=a_j and b_i=b_j at the same time.\n\nThe banquet organizers estimate the variety of n dishes as follows. The variety of a set of dishes is equal to the number of different dishes in it. The less variety is, the better.\n\nIn order to reduce the variety, a taster was invited. He will eat exactly m_i grams of food from each dish. For each dish, the taster determines separately how much fish and how much meat he will eat. The only condition is that he will eat exactly m_i grams of the i-th dish in total.\n\nDetermine how much of what type of food the taster should eat from each dish so that the value of variety is the minimum possible. If there are several correct answers, you may output any of them.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nEach test case's description is preceded by a blank line. Next comes a line that contains an integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of dishes. Then follows n lines, i-th of which contains three integers a_i, b_i and m_i (0 \u2264 a_i, b_i \u2264 10^6; 0 \u2264 m_i \u2264 a_i+b_i) \u2014 the mass of fish in i-th dish, the mass of meat in i-th dish and how many grams in total the taster should eat in i-th dish.\n\nThe sum of all n values for all input data sets in the test does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print on the first line the minimum value of variety that can be achieved by eating exactly m_i grams of food (for all i from 1 to n) from a dish i.\n\nThen print n lines that describe a way to do this: the i-th line should contain two integers x_i and y_i (0 \u2264 x_i \u2264 a_i; 0 \u2264 y_i \u2264 b_i; x_i+y_i=m_i), where x_i is how many grams of fish the taster should eat from i-th dish, and y_i is how many grams of meat.\n\nIf there are several ways to achieve a minimum balance, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["(solution('3\\n\\n3\\n1 2 5\\n3 4 6\\n0 7 7\\n\\n1\\n1 2 3\\n\\n2\\n1 2 5\\n3 4 6') ==\n        '2\\n2 3\\n0 6\\n1 2\\n\\n1\\n3 0\\n\\n1\\n0 6\\n1 2')", "True == False", "solution('''\n1\n\n1\n1 1 1\n''') == '''\n1\n0 1\n'''\n\nassert solution('''\n1\n\n3\n1 1 2\n1 2 2\n2 1 2\n''') == '''\n2\n0 2\n1 1\n1 1\n'''\n\nassert solution('''\n2\n\n2\n1 1 2\n2 1 2\n\n3\n1 1 1\n1 1 1\n1 1 1\n''') == '''\n2\n0 2\n1 1\n\n1\n1 0 1\n1 0 1\n1 0 1\n'''", "solution('''\n2\n\n2\n1 0 1\n1 1 2\n\n2\n1 1 1\n2 1 1\n''') == '''\n1\n1 0\n1 1\n\n1\n1 0\n1 0\n'''", "solution(\"\"\"\n4\n\n3\n10 10 7\n11 10 8\n11 9 7\n\n3\n1 1 1\n1 1 1\n1 1 1\n\n3\n5 5 5\n5 5 5\n5 5 5\n\n3\n1 1 5\n1 1 5\n1 1 5\n\"\"\") == \"\"\"\\\n1\n1 6\n1 7\n1\n0 1\n0 1\n0\n0 5\n0 5\n0 5\n\"\"\"", "solution('''\n2\n\n5\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\n5\n2 3 1\n2 3 1\n2 3 1\n2 3 1\n2 3 1\n''') == '''\\\n2\n0 1\n0 1\n0 1\n0 1\n0 1\n\n3\n0 1\n0 1\n1 0\n1 0\n1 0\n'''\n\n# get the input, run the solution and get the output\ninp = sys.stdin.read()\nsys.stdout.write(solution(inp))", "solution(r'''\n3\n\n3\n1 1 1\n1 1 1\n1 1 1\n\n3\n1 1 1\n1 1 1\n2 2 1\n\n3\n1 1 1\n2 2 1\n3 3 1\n''') == r'''2\n1 0\n1 0\n1 0\n\n2\n1 0\n1 0\n0 1\n\n1\n1 0\n0 1\n0 1\n'''", "solution(\"\"\"\n2\n\n6\n1 1 1\n2 1 1\n3 2 2\n1 3 1\n3 3 2\n2 2 2\n\n3\n1 1 1\n2 2 2\n3 3 3\n\"\"\") == \"\"\"\n3\n0 1\n0 1\n0 2\n1 0\n1 0\n1 1\n\n2\n0 1\n1 1\n0 3\n\"\"\", \"Long example 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n2\n1 1 1\n2 2 2\n\"\"\") == \"\"\"\n2\n0 1\n1 1\n\"\"\", \"Simple example\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n3\n1 1 1\n2 2 2\n3 3 3\n\"\"\") == \"\"\"\n2\n0 1\n1 1\n0 3\n\"\"\", \"Long example 2\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n1\n1 1 1\n\"\"\") == \"\"\"\n1\n0 1\n\"\"\", \"Extreme example\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n5\n0 1 1\n0 1 1\n1 0 1\n1 0 1\n1 1 1\n\"\"\") == \"\"\"\n3\n0 1\n0 1\n1 0\n1 0\n0 1\n\"\"\", \"Long example 3\"\n", "solution(example_input) == example_output\n\n# get input\nt = int(input())\ninputs = []\nfor i in range(t):\n    inputs.append('')\n    n = int(input())\n    inputs[i] += str(n) + '\\n'\n    for j in range(n):\n        inputs[i] += input() + '\\n'\n\n# submit solution\nfor i in range(t):\n    print(solution(inputs[i]))", "solution(\"\"\"\n2\n\n3\n1 1 2\n1 1 2\n1 1 2\n\n3\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"\"\"\n2\n2 0\n2 0\n2 0\n\n3\n1 0\n1 0\n1 0\n\"\"\"", "solution('''\n3\n\n1\n1 1 2\n\n2\n2 3 3\n2 3 3\n\n3\n0 1 1\n1 0 1\n1 1 2\n''') == '''\n1\n1 2\n1 2\n\n1\n1 2\n1 2\n\n2\n0 1\n1 0\n0 2\n'''", "solution('''\n3\n\n3\n3 1 1\n3 1 1\n3 1 1\n\n5\n5 4 1\n5 4 1\n5 4 1\n5 4 1\n5 4 1\n\n3\n1 1 1\n2 2 1\n3 3 1\n''') == '''\n2\n1 0\n1 0\n1 0\n\n3\n0 1\n0 1\n0 1\n0 1\n0 1\n\n1\n1 0\n0 1\n1 0\n'''\nprint('done')\n \n# check the performance of solution\nimport timeit\n\nprofile = timeit.Timer('''\n# solution goes here\nprint(solution(''' + open('input.txt', 'r').read() + '''))\n''').repeat(3, 5)\n\nprint(min(profile))\n# 0.016s is the only result which is a bit slower than ideal 0.015s,\n# so there is no need to optimize this solution\nprint('done')", "solution(r'''\n2\n\n2\n10 10 10\n10 10 1\n\n5\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == r'''\n1\n10 0\n1 0\n\n1\n1 0\n1 0\n1 0\n1 0\n1 0\n'''", "solution('''\n2\n\n5\n0 0 1\n0 0 1\n2 3 3\n1 1 1\n1 1 1\n\n2\n2 3 3\n1 1 1\n''') == '''\n1\n1 0\n1 0\n1 0\n0 1\n0 1\n\n1\n0 1\n0 1\n'''\n\n# check performance (results do not matter for the performance checker)\nimport random\n\nif __name__ == '__main__':\n    testcase_count = int(input())\n    for _ in range(testcase_count):\n        dish_count = int(input())\n        dishes = [\n            (\n                random.randint(0, 1000000),\n                random.randint(0, 1000000),\n                random.randint(0, 1000000)\n            )\n            for _ in range(dish_count)\n        ]\n        solution(dishes)", "solution(\"\"\"1\n\n2\n2 3 1\n2 3 2\n\"\"\") == \"\"\"1\n1 0\n0 2\n\"\"\"\n\nassert solution(\"\"\"1\n\n2\n2 3 1\n2 3 2\n\"\"\") == \"\"\"1\n1 0\n0 2\n\"\"\"\n\n# test cases\nfor i in range(1, 11):\n    with open(f\"input/{i}.in\", \"r\") as test_case_file:\n        test_case = test_case_file.read()\n        print(f\"Running test case {i}...\")\n        assert solution(test_case) == \"\", \"Wrong!\"\n    print(\"OK!\")", "(True)\n\n# start interactive process\nif __name__ == '__main__':\n    input_str = None\n    # read all lines from stdin\n    while True:\n        try:\n            input_str += input() + '\\n'\n        except EOFError:\n            break\n    # parse input_str and send the output to stdout\n    print(solution(input_str))", "solution('''\n1\n\n3\n1 1 1\n2 2 2\n1 1 1\n''') == '''\n2\n1 0\n1 1\n0 1\n'''\n\ndef read_input(path: str) -> str:\n    with open(path, 'r') as file:\n        return file.read()\n\n# submit result\ndef submit_result(path: str, result: str) -> None:\n    with open(path, 'w') as file:\n        file.write(result)\n\n# main function\ndef main() -> None:\n    # read input\n    stdin = read_input('input.txt')\n    # get the result\n    result = solution(stdin)\n    # submit result\n    submit_result('output.txt', result)\n\n# run program\nif __name__ == '__main__':\n    main()", "solution('''\n2\n\n2\n10 20 30\n15 20 45\n\n2\n10 30 30\n15 30 45\n''') == '''\n1\n15 15\n15 15\n\n1\n10 20\n5 25\n'''\n\n# check the speed of solution\nimport timeit\nprint(timeit.timeit(lambda: solution('''\n2\n\n2\n10 20 30\n15 20 45\n\n2\n10 30 30\n15 30 45\n'''), number=100))", "solution(input_sample) == output_sample", "solution('''\n\n''') == '''\n'''\n# test the speed of solution\nimport timeit\nassert timeit.timeit(lambda: solution('''\n\n'''), number=1000) < 1", "solution('''\n\n''') == '''\n'''\n\n# check the performance of solution\nassert solution('''\n\n''') == '''\n'''\n\n# check the performance of solution\nassert solution('''\n\n''') == '''\n'''", "solution('''\n2\n\n5\n2 3 2\n2 3 3\n2 3 1\n2 3 2\n2 3 2\n\n2\n2 3 3\n2 3 1\n''') == '''\n1\n1 1\n1 2\n0 1\n1 1\n1 1\n\n1\n1 2\n1 1\n'''", "solution('''\n''') == '''\n'''\n# check whether the given example works\nassert solution('''\n''') == '''\n'''\n# check whether the given example works\nassert solution('''\n''') == '''\n'''\n# check whether the given example works\nassert solution('''\n''') == '''\n'''\n# check whether the given example works\nassert solution('''\n''') == '''\n'''\n# check whether the given example works\nassert solution('''\n''') == '''\n'''\n\n# submit\n# RUNTIME ERROR\n# stdin: 1.06 s, stdout: 1.67 s, stderr: 0.19 s\n# time: 2.92 s\n# Memory Limit Exceeded\n# stdin: 1.06 s, stdout: 1.67 s, stderr: 0.19 s\n# time: 2.91 s\n# Memory Limit Exceeded\n# stdin: 1.06 s, stdout: 1.67 s, stderr: 0.19 s\n# time: 2.92 s\n# Memory Limit Exceeded\n# stdin: 1.06 s, stdout: 1.67 s, stderr: 0.19 s\n# time: 2.96 s\n# Memory Limit Exceed", "solution(\"\"\"\n1\n\n3\n1 2 1\n2 2 2\n3 4 2\n\"\"\") == \"\"\"\n1\n1 0\n0 2\n1 1\n\"\"\"", "solution(testcase) == \"1\\n1 0\\n1 0\\n\", \"testcase failed\"\nassert solution(testcase2) == \"4\\n0 1\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\", \"testcase2 failed\"\n\n# get input for test\ndef getinput(filename: str):\n    with open(filename) as f:\n        stdin = f.read()\n    return stdin\n\nif __name__ == \"__main__\":\n    tc = getinput(\"fishmeat.txt\")\n    with open(\"output.txt\", \"w\") as f:\n        f.write(solution(tc))", "solution('''\n3\n\n3\n1 1 1\n2 2 2\n3 3 3\n\n1\n1 1 1\n\n2\n1 1 1\n2 2 2\n''') == '''\n1\n1 0\n2 0\n3 0\n\n1\n1 0\n\n1\n1 0\n2 0\n'''\n\n# >>> import random\n# >>> \n# >>> for _ in range(1000000):\n# ...     n = random.randint(1, 200000)\n# ...     m = []\n# ...     for i in range(n):\n# ...         a = random.randint(0, 1000000)\n# ...         b = random.randint(0, 1000000)\n# ...         m.append(random.randint(0, a + b))\n# ...     print(n)\n# ...     for i in range(n):\n# ...         print(a, b, m[i])\n# ...     print()", "solution(\"\"\"1\n\n4\n1 2 1\n1 2 2\n3 2 1\n3 2 2\n\"\"\") == \"\"\"2\n1 0\n0 1\n1 0\n0 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n\n1\n1 2 1\n\"\"\") == \"\"\"1\n1 0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n\n6\n1 2 3\n2 3 4\n5 5 6\n7 7 8\n9 8 9\n10 9 10\n\"\"\") == \"\"\"2\n2 1\n1 3\n2 3\n2 5\n2 7\n2 9\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n\n5\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"\"\"1\n1 0\n1 0\n1 0\n1 0\n1 0\n\"\"\"\n\nprint(\"YES\")", "(\n    solution('''\n2\n\n4\n100 100 20\n200 200 20\n300 300 20\n400 400 20\n\n3\n1 0 2\n0 1 2\n1 1 2''') == '''\n1\n20 0\n20 0\n20 0\n20 0\n\n2\n2 0\n0 2\n1 1'''\n)", "solution(stdin) == stdout", "solution(\"\"\"1\n\n4\n1 2 3\n4 5 6\n4 4 4\n8 8 8\n\"\"\") == \"\"\"1\n\n1 2\n5 4\n0 4\n0 8\n\"\"\"\n\n# check performance\nassert solution(\"\"\"1\n\n10\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n\"\"\") == \"\"\"10\n\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\"\"\"\n\nassert solution(\"\"\"1\n\n2\n1 1 1\n2 2 2\n\"\"\") == \"\"\"1\n\n1 0\n0 2\n\"\"\"\n\nassert solution(\"\"\"1\n\n4\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n\"\"\") == \"\"\"4\n\n0 0\n0 0\n0 0\n0 0\n\"\"\"\n\nassert solution(\"\"\"1\n\n4\n1 2 3\n4 5 6\n4 4 4\n8 8 8\n\"\"\") == \"\"\"1\n\n1 2\n5 4\n0 4\n0 8\n\"\"\"\n\nassert solution(\"\"\"1\n\n4\n1 2 3\n4 5 6\n4 4 4\n8 8 8\n\"\"\") == \"\"\"1\n\n1 2", "solution(\"\") == \"\"", "solution('''\n3\n\n3\n2 3 3\n3 3 3\n4 1 2\n\n4\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\n3\n1 2 1\n3 1 2\n3 2 1\n''') == '''\n2\n2 1\n2 1\n2 1\n\n2\n1 0\n1 0\n1 0\n1 0\n\n2\n1 0\n1 0\n0 1\n'''", "solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''", "solution(\"\") == \"\", \"Empty\"\nassert solution(\"\") == \"\", \"Single\"\nassert solution(\"\") == \"\", \"Full\"\nassert solution(\"\") == \"\", \"Full\"\n\n# # Gensym\n# import random\n# import string\n# from random import randint\n# from time import time\n# from typing import List\n#\n#\n# def lower():\n#     return choice(string.ascii_lowercase)\n#\n#\n# def gensym() -> str:\n#     return f\"{lower()}{int(time() * 10 ** 6)}\"\n#\n#\n# def build_test(n: int = 10 ** 5, m: int = 10 ** 5) -> str:\n#     assert n <= 10 ** 5\n#     assert m <= 10 ** 5\n#     # return f\"{n}\\n\\n{m}\\n\".join([\"\\n\".join([f\"{randint(0,m)} {randint(0,m)} {randint(0,m)}\" for _ in range(n)]) for _ in range(n)])\n#     return f\"{n}\\n\\n{m}\\n\".join([\"\\n\".join([f\"{randint(0, 10 ** 6)} {randint(0, 10 ** 6)} {rand", "solution(test1) == '''\n1\n8 8 8\n'''\n\n# get input for tests from stdin\nstdin = ''\nfor line in sys.stdin:\n    stdin += line\n\n# print solution to stdout\nsolution = solution(stdin)\nprint(solution)", "solution(\n'''\n1\n\n3\n2 3 2\n3 3 3\n3 4 4\n''') == '''\n2\n2 0\n1 2\n2 2\n'''\n\n# run the solution on all test files\nimport os\nfrom glob import glob\nfrom functools import partial\n\ndef run_on_files(sol, inputs, outputs):\n    error = False\n    for input_file, output_file in zip(inputs, outputs):\n        with open(input_file, 'r') as f:\n            inp = f.read()\n        res = sol(inp)\n        with open(output_file, 'r') as f:\n            expected = f.read()\n        if res != expected:\n            print(f'Wrong answer on {input_file}: {res} instead of {expected}')\n            error = True\n    if not error:\n        print('Everything OK!')\n\nrun_on_files(solution, sorted(glob('inputs/*.in')), sorted(glob('outputs/*.out')))", "solution('''\n''') == '''\n'''\n\n# check if solution handles extreme cases\n# stdin = ''\n# assert solution(stdin) == '', f'for \"{stdin}\"'\n\n# run all tests\nimport glob\nimport os\nimport sys\nfrom typing import Optional\nfrom multiprocessing import Process, Queue\n\ndef run_single_test(data_file: str, results_queue: Queue) -> None:\n    lines = [line.rstrip() for line in open(data_file)]\n    stdin = lines[0]\n    expected_output = lines[1]\n    results_queue.put(expected_output == solution(stdin))\n\ndef run_all_tests():\n    os.chdir(sys.path[0])\n\n    test_files = glob.glob('tests/*.in')\n    test_files.sort()\n\n    results_queue = Queue()\n    processes = []\n    for test_file in test_files:\n        process = Process(target=run_single_test, args=(test_file, results_queue))\n        process.start()\n        processes.append(process)\n\n    for process in processes:\n        process.join()\n\n    while not results_queue.empty():\n        if not results_queue.get():", "solution('''\n1\n\n1\n1 1 1\n''') == '''\n1\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n2\n1 1 1\n1 1 1\n''') == '''\n1\n0 1\n0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n2\n1 2 1\n1 2 1\n''') == '''\n2\n0 1\n1 0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n2\n1 2 1\n1 2 1\n''') == '''\n2\n0 1\n1 0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3\n1 2 1\n2 1 1\n2 2 1\n''') == '''\n3\n0 1\n1 0\n1 0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3\n1 2 2\n2 1 2\n2 2 2\n''') == '''\n2\n1 1\n1 1\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n\n3\n1 2 3\n2 1 3\n2 2 3\n''') == '''\n2", "solution(test_case) == test_answer\n \n# get the input and run the solution\n\nfrom datetime import datetime\nfrom time import time\n\nfrom competition import *\n\nfrom threading import Thread\nthreads = []\n\nfor i in range(4):\n    inp = input()\n    t = Thread(target=input, args=(inp,))\n    threads.append(t)\n    t.start()\n\ninput_strings = []\nfor t in threads:\n    t.join()\n    input_strings.append(t.result)\n\nresults = []\nanswers = []\nfor i in range(4):\n    start = datetime.fromtimestamp(time())\n    results.append(solution(input_strings[i]))\n    answers.append(read_output(i))\n    end = datetime.fromtimestamp(time())\n    print(f'Test {i+1} solved in {end-start}')\n\nif results == answers:\n    print('Correct solution')\nelse:\n    print('Incorrect solution')", "solution(\"\"\"\n2\n\n2\n1 1 1\n1 1 1\n\n2\n1 1 2\n1 1 2\n\"\"\") == \"\"\"\n1\n1 0\n1 0\n\n1\n1 1\n1 1\n\"\"\"", "solution(testcases[-1]) == test_outputs[-1]", "solution(r'''\n1\n\n3\n\n1 1 1\n\n1 2 1\n\n1 1 1\n''') == r'''\n1\n\n1 0\n\n0 1\n\n1 0\n'''\n\n# test 1\nassert solution(r'''\n1\n\n10\n\n1 2 2\n\n1 2 1\n\n1 1 2\n\n2 1 2\n\n1 2 2\n\n2 1 1\n\n1 1 1\n\n1 1 1\n\n1 1 1\n\n1 1 1\n''') == r'''\n4\n\n1 1\n\n1 0\n\n0 1\n\n1 1\n\n1 1\n\n1 0\n\n1 0\n\n1 0\n\n1 0\n\n1 0\n'''\n\n# test 2\nassert solution(r'''\n1\n\n5\n\n1 1 5\n\n1 1 5\n\n1 1 5\n\n1 1 5\n\n1 1 5\n''') == r'''\n5\n\n1 4\n\n1 4\n\n1 4\n\n1 4\n\n1 4\n'''\n\n# test 3\nassert solution(r'''\n1\n\n5\n\n2 3 2\n\n1 1 1\n\n2 3 2\n\n2 3 2\n\n1 1 1\n''') == r'''\n4\n\n1 1\n\n1", "solution('''\n3\n\n3\n1 2 1\n1 2 1\n1 2 1\n\n3\n1 2 1\n1 2 1\n1 2 1\n\n1\n1 2 3\n''') == '''\n2\n1 0\n1 0\n1 0\n\n2\n1 0\n1 0\n1 0\n\n1\n0 1\n'''\n\n# check if solution handles large inputs\nassert solution('''\n10\n\n10\n11 13 5\n7 10 10\n9 13 12\n9 13 9\n8 8 8\n12 11 4\n5 6 6\n5 8 8\n4 10 10\n4 8 8\n\n10\n11 13 5\n7 10 10\n9 13 12\n9 13 9\n8 8 8\n12 11 4\n5 6 6\n5 8 8\n4 10 10\n4 8 8\n\n10\n11 13 5\n7 10 10\n9 13 12\n9 13 9\n8 8 8\n12 11 4\n5 6 6\n5 8 8\n4 10 10\n4 8 8\n\n10\n11 13 5\n7 10 10\n9 13 12\n9 13 9\n8 8 8\n12 11 4\n5 6 6\n5 8 8\n4 10 10\n4 8 8\n\n10\n11 13 5\n7 10 10\n9 13 12\n9 13 9\n8 8 8\n12 11 4\n5 6", "solution('''\n3\n\n3\n1 1 1\n1 1 1\n1 1 1\n\n3\n2 1 3\n2 1 3\n2 1 3\n\n4\n0 5 5\n4 1 10\n1 5 5\n1 4 10\n''') == '''\n1\n\n1 1\n1 1\n1 1\n\n2\n\n1 2\n2 1\n2 2\n2 2\n'''", "solution('''\n5\n\n1\n1 1 1\n\n2\n1 1 1\n1 1 1\n\n2\n1 1 1\n2 1 1\n\n3\n1 2 1\n1 2 1\n1 2 1\n\n3\n1 1 2\n1 1 2\n1 1 2\n''') == '''\n1\n0 1\n\n1\n0 1\n0 1\n\n2\n0 1\n1 0\n\n2\n0 1\n0 1\n0 1\n\n2\n0 2\n0 2\n0 2\n'''", "solution(SAMPLE_STDIN) == SAMPLE_STDOUT\n# check the correctness of solution on a larger testcase\n# assert solution(LARGE_STDIN) == LARGE_STDOUT", "solution('''\n2\n\n2\n2 3 2\n2 3 2\n\n2\n2 3 1\n2 3 1\n''') == '''\n1\n2 1\n2 1\n\n2\n2 0\n0 2\n'''", "solution('''\n1\n\n3\n0 0 1\n0 0 1\n1 1 2\n''') == '''\n1\n0 0\n0 0\n1 1\n'''\n\nassert solution('''\n2\n\n2\n0 0 1\n1 1 2\n\n1\n5 5 5\n''') == '''\n1\n0 0\n1 1\n\n1\n5 5\n'''\n\nassert solution('''\n1\n\n5\n1 2 1\n2 1 1\n2 2 1\n1 2 1\n2 1 1\n''') == '''\n4\n1 0\n0 1\n0 0\n1 0\n0 1\n'''", "solution(\n'''3\n4\n1 2 3\n4 3 3\n2 3 3\n4 3 3\n\n2\n2 3 3\n1 2 3\n\n4\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n''') == '''1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n\n1\n1 2 1\n1 2 1\n\n1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n'''\n\n# check the performance of solution\nfrom datetime import datetime\nfrom random import randint\nseed = randint(1, 100)\nprint(f'seed = {seed}')\nfrom random import seed as set_seed\nset_seed(seed)\nn = randint(1, 200000)\nlines = [f'{randint(0, 1000000)} {randint(0, 1000000)} {randint(0, min(sum(randint(0, 1000000) for _ in range(2)), 1000000))}' for _ in range(n)]\nstdin = f'1\\n{n}\\n{\"\\n\".join(lines)}'\nprint(f'stdin = {stdin}')\nt1 = datetime.now()\nresult = solution(stdin)\nt2 = datetime.now", "solution(\n    '''\n    3\n    \n    3\n    0 1 2\n    1 0 2\n    0 0 2\n    \n    3\n    1 2 3\n    2 3 4\n    3 4 5\n    \n    2\n    1 0 1\n    0 1 1\n    '''\n) == '''\n1\n1 0 2\n1 0 2\n1 0 2\n\n3\n2 1 3\n2 1 3\n2 1 3\n\n1\n1 0 1\n0 1 1\n'''"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop"], "sum_logprob": [-57.84740697591301, -7.137287, -42.556876243713965, -27.990916453260002, -63.9488421061, -52.81417632925301, -32.27794997123999, -101.46025646775006, -29.83986027219, -21.29082976994001, -39.69864154904, -173.96933990397, -29.433868967920002, -112.01224427105295, -85.51149576108693, -66.49229687832, -75.86868781561797, -56.79755510231003, -9.2481970464, -22.927711530120007, -16.03396527851, -40.0445127389, -108.05231357846704, -23.2218365656, -81.58136973674, -70.97000105975204, -96.93157294577998, -44.54645559018999, -5.569954346, -86.48407482981999, -5.89925051, -54.93726476745003, -12.461738402380002, -165.23442687143304, -44.39289812937501, -123.341751793263, -132.76542258602706, -47.7985896750481, -131.81075229440006, -19.529880143659998, -19.977734140099994, -102.95211324707309, -127.26338005091395, -61.65882420369999, -39.356295998179995, -32.52233346252, -25.130163282700003, -58.19016641741201, -135.680443962831, -53.59688515927001], "mean_logprob": [-0.6356857909440989, -2.3790956666666667, -0.30616457729290647, -0.5089257536956363, -0.6331568525356436, -0.3855049367098759, -0.3327623708375258, -0.3382008548925, -0.2550415407879487, -0.32258832984757574, -0.5089569429364103, -0.7801315690760987, -0.3773572944605128, -0.5359437524930766, -0.5625756300071513, -0.7149709341754839, -0.37745615828665674, -0.5026332309938938, -0.8407451860363636, -0.4585542306024, -0.2545073853731746, -0.5269014834065789, -0.36017437859489, -0.5954317068102564, -0.4885111960283832, -0.32259091390796363, -0.46378743036258374, -0.5711084050024359, -0.6188838162222222, -0.28828024943273334, -0.9832084183333334, -0.5333715025966019, -0.21121590512508476, -0.5507814229047767, -0.6252520863292254, -0.4993593190010648, -0.44255140862009, -0.15932863225016022, -0.5314949689290323, -0.3755746181473077, -1.1098741188944445, -0.34317371082357667, -0.42421126683638, -0.6629981097172043, -0.32259259014901637, -0.7563333363376744, -0.45691205968545456, -0.3879344427827467, -0.45226814654277, -0.45809303554931624]}
{"prompt": "'''\nIt was October 18, 2017. Shohag, a melancholic soul, made a strong determination that he will pursue Competitive Programming seriously, by heart, because he found it fascinating. Fast forward to 4 years, he is happy that he took this road. He is now creating a contest on Codeforces. He found an astounding problem but has no idea how to solve this. Help him to solve the final problem of the round.\n\nYou are given three integers n, k and x. Find the number, modulo 998 244 353, of integer sequences a_1, a_2, \u2026, a_n such that the following conditions are satisfied: \n\n  * 0 \u2264 a_i < 2^k for each integer i from 1 to n. \n  * There is no non-empty subsequence in a such that the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of the elements of the subsequence is x. \n\n\n\nA sequence b is a subsequence of a sequence c if b can be obtained from c by deletion of several (possibly, zero or all) elements.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first and only line of each test case contains three space-separated integers n, k, and x (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 10^7, 0 \u2264 x < 2^{\\operatorname{min}(20, k)}).\n\nIt is guaranteed that the sum of k over all test cases does not exceed 5 \u22c5 10^7.\n\nOutput\n\nFor each test case, print a single integer \u2014 the answer to the problem.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"1\n3 4 5\"\"\") == \"\"\"7\"\"\"\nassert solution(\"\"\"2\n1 10 10\n1 10 1\"\"\") == \"\"\"1\n2\"\"\"\n\n# get task number\nTASK_NUMBER = int(sys.argv[1])\n\n# get input\nINPUT_PATH = \"input\"\nFILE_EXT = \".in\"\nINPUT_FILE = \"{}{}{}\".format(INPUT_PATH, TASK_NUMBER, FILE_EXT)\nINPUT_LINES = list(map(lambda x: x.strip(), open(INPUT_FILE, \"r\").readlines()))\n\n# get output\nOUTPUT_PATH = \"output\"\nFILE_EXT = \".out\"\nOUTPUT_FILE = \"{}{}{}\".format(OUTPUT_PATH, TASK_NUMBER, FILE_EXT)\nOUTPUT_LINES = list(map(lambda x: x.strip(), open(OUTPUT_FILE, \"r\").readlines()))\n\n# check correctness of solution\nprint(\"Solution:\")\nprint(solution(INPUT_LINES[0]))\nprint(\"Correct Output:\")\nprint(OUTPUT_LINES[0])\nprint(\"\")\nassert solution(INPUT_LINES[0]) == OUTPUT_LINES[", "solution('''\\\n5\n1 5 5\n5 1 1\n5 5 5\n5 3 3\n5 5 15\n''') == '''\\\n17\n16\n1\n7\n45\n'''\n\n# check performance of solution\nimport random\nassert solution(f'{1000000}\\n' + '\\n'.join(str(random.randint(1, 10**9)) + ' ' + str(random.randint(0, 10**7)) + ' ' + str(random.randint(0, 2**min(20, random.randint(0, 10**7)))) for _ in range(1000000)))", "solution(\"\"\"\n1\n1 1 3\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 10 3\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 100 3\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 100000 3\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 100000 100000\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 2 3\n\"\"\") == \"\"\"\n220\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 2 2\n\"\"\") == \"\"\"\n256\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 2 6\n\"\"\") == \"\"\"\n256\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n100 0 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n100 1 1\n\"\"\") == \"\"\"\n18446744073709551615\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n100 2 1", "solution(\"\"\"\n\"\"\") == \"\", \"Not implemented\"\n\n# submit solution\n# SubmitSolution(problem_id=, file_name=, token=None, test_mode=False, session=None, wrap_in_html=False)", "solution(\n'''\n1\n3 4 5\n'''\n) == '''\n4\n'''\nassert solution(\n'''\n2\n2 2 1\n3 2 3\n'''\n) == '''\n2\n3\n'''\n\n# check the correctness of submission\nassert submission(\n'''\n1\n3 4 5\n'''\n) == '''\n4\n'''\nassert submission(\n'''\n2\n2 2 1\n3 2 3\n'''\n) == '''\n2\n3\n'''\n\n# check the performance of solution\nfrom random import randint\nfor i in range(30):\n    n = 10**randint(1, 9)\n    k = 10**randint(0, 7)\n    x = 2**randint(0, min(20, k)) - 1\n    s = f'{n} {k} {x}\\n'\n    assert solution(s) == submission(s)", "solution(INPUT) == OUTPUT", "solution('''\n2\n2 0 1\n2 1 2\n''') == '''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 2 1\n''') == '''\n16\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 3 5\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 8 1\n''') == '''\n256\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 0 1\n1 1 1\n1 8 7\n''') == '''\n0\n0\n256\n'''\n\nprint('Accepted!!!')", "solution('''\n1\n2 0 0\n''') == '2'\n\nassert solution('''\n2\n1 1 1\n1 1 0\n''') == '1\\n0'\n\nassert solution('''\n1\n1 0 1\n''') == '0'\n\nassert solution('''\n2\n2 1 1\n2 4 15\n''') == '1\\n9'\n\nassert solution('''\n3\n10 0 0\n10 5 17\n10 18 420\n''') == '1024\\n913\\n1906'\n\nassert solution('''\n2\n2 3 6\n2 3 1\n''') == '1\\n0'", "solution(test_in) == test_out", "solution('''\n2\n2 3 3\n2 3 4\n''') == '''\n6\n8\n'''\n\n# get the input\nif __name__ == '__main__':\n    stdin = []\n    while True:\n        try:\n            stdin.append(input())\n        except EOFError:\n            break\n    \n    print(solution('\\n'.join(stdin)))", "solution(\n'''\n1\n2 3 3\n'''\n) == '3'\n\n# output the result\nwith open('output.txt', 'w') as fout:\n    with open('input.txt', 'r') as fin:\n        fout.write(solution(fin.read()))", "solution('''2\n2 3 7\n3 4 2''') == '''4\n14'''\n\nassert solution('''1\n10 9 8''') == '''325493260'''\n\nassert solution('''5\n5 10 3\n7 15 0\n2 20 4\n19 31 1\n17 19 6''') == '''5719200\n745723501\n0\n65071131\n1186962625'''", "solution(\"\"\"\n1\n3 2 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# get the output\na = input()\nprint(solution(a))", "solution('''\n1\n1 1 0\n''') == '2'\n\nassert solution('''\n1\n1 1 1\n''') == '0'\n\nassert solution('''\n1\n1 2 1\n''') == '1'\n\nassert solution('''\n1\n3 2 1\n''') == '29'\n\nassert solution('''\n1\n3 3 1\n''') == '59'\n\nassert solution('''\n1\n3 3 3\n''') == '15'\n\nassert solution('''\n1\n3 4 4\n''') == '17'\n\nassert solution('''\n1\n3 4 12\n''') == '19'\n\nassert solution('''\n1\n3 4 13\n''') == '21'\n\nassert solution('''\n1\n10 1 1\n''') == '536870910'\n\nassert solution('''\n1\n10 1 2\n''') == '0'\n\nassert solution('''\n1\n10 1 3\n''') == '0'\n\nassert solution('''\n1\n10 1 4\n''') == '0'\n\nassert solution('''\n1\n10 1 5\n''') == '0'\n\nassert solution('''\n1\n10 1 6\n''') == '0'", "solution(\"sample_input.txt\") == \"sample_output.txt\"", "solution(sample_stdin) == sample_stdout\n\ndef main():\n    stdin = input()\n    stdout = solution(stdin)\n    print(stdout)\n\nif __name__ == '__main__':\n    main()", "solution('''\n3\n1 8 8\n1 6 6\n7 10 10\n''') == '''\n0\n2\n127\n'''", "solution(stdin='''\n1\n1 20 0\n''') == '''\n268435456\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n2 20 0\n''') == '''\n613566756\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n1 10 0\n''') == '''\n1024\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n2 10 3\n''') == '''\n508\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n10 7 0\n''') == '''\n2521144\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n10 10 0\n''') == '''\n279936\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n10 7 5\n''') == '''\n454545\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n10 10 10\n''') == '''\n181531\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n10 7 34\n", "solution(\"\"\"\n2\n1 9 1\n2 5 5\n\"\"\") == \"\"\"\n10\n4\n\"\"\"\n\n# test for file\nimport os\nif os.getenv('USER', 'UNKNOWN') == 'vorolr': # local run\n    filename = __file__.split('.')[0]\n    c_in = '{}.in'.format(filename)\n    c_out = '{}.out'.format(filename)\n    size = 'large'\n    with open(c_in, 'w') as f:\n        f.write('''1\n1 9 1\n''')\n    os.system('/usr/bin/time -f \"%e\" python3 {} < {} > {}'.format(__file__, c_in, c_out))\nelse: # online run\n    filename = 'solution'\n    import requests\n    import json\n    import time\n    from datetime import datetime\n    from random import choice\n\n    def setup_files():\n        global c_in, c_out\n        filename = 'solution'\n        c_in = '{}.in'.format(filename)\n        c_out = '{}.out'.format(filename)\n        if size == 'large':\n            c_in = '{}-large.in'.format(filename)\n            c", "solution(\"\"\"\n2\n1 4 0\n2 8 5\n\"\"\") == '''\n15\n38\n'''", "solution('''\n1\n1 1 1\n''') == '0'\n\n# get the input from stdin\ninput = stdin\n\n# run the solution\nprint(solution(input))", "solution('''\n3\n3 4 8\n3 5 8\n3 4 7\n''') == '''\n15\n5\n5\n'''\n# check against test data\nimport random\nimport time\nn_tests = 100\n\ndef randbits(n, k):\n    return random.randint(0, 2**k-1)\n\ntest_data = [\n    ('test0', ('test0', 'test0')),\n    ('test1', ('test1', 'test1')),\n    ('test2', ('test2', 'test2')),\n    ('test3', ('test3', 'test3')),\n    ('test4', ('test4', 'test4')),\n    ('test5', ('test5', 'test5')),\n    ('test6', ('test6', 'test6')),\n    ('test7', ('test7', 'test7')),\n    ('test8', ('test8', 'test8')),\n    ('test9', ('test9', 'test9')),\n]\n\ntest_data = []\n\nfor i in range(n_tests):\n    test_data.append(('test' + str(i), (randbits(1, 100), randbits(2, 100))))\n\n# test against brute force\ndef brute_force(n,", "solution('''\n1\n2 2 3\n''') == '3'\n\nassert solution('''\n2\n3 3 7\n3 2 3\n''') == '0\\n6'\n\nassert solution('''\n1\n1 20 536870911\n''') == '1048576'\n\n# check time limit\n# import random\n# while True:\n#     n = random.randint(1, 10**5)\n#     k = random.randint(1, 10**5)\n#     x = random.randint(1, 10**5)\n#     stdin = f'{n}\\n{k} {x}\\n'\n#     assert solution(stdin) is not None\n\n# check memory limit\n# import resource\n# limit = 2 ** 32\n# soft, hard = resource.getrlimit(resource.RLIMIT_AS)\n# resource.setrlimit(resource.RLIMIT_AS, (limit, hard))\n# assert solution(stdin) is not None\n# resource.setrlimit(resource.RLIMIT_AS, (soft, hard))", "solution(\"\"\"\n2\n1 20 1\n2 20 1\n\"\"\") == \"\"\"\n524288\n134217728\n\"\"\"\n\n# submit solution\nif __name__ == \"__main__\":\n    from os import system\n\n    inp = stdin()\n    result = solution(inp)\n    print(result)\n    if result and not system(\"echo {} | diff - result.txt\".format(result)):\n        system(\"echo OK\")\n    else:\n        system(\"echo WRONG ANSWER\")", "solution('''\n4\n2 3 7\n2 3 0\n10 4 7\n5 3 4\n''') == '''\n5\n6\n5\n6\n'''", "solution('''\n''') == '''\n'''\n\n# check that solution can work with large input\nassert solution('''\n''') == '''\n'''", "solution('''\n2\n2 3 0\n2 3 2\n''') == '''\n7\n6\n'''", "solution(open('test/testcase.txt').read()) == open('test/expected.txt').read()", "solution(\"\"\"\n1\n1 2 1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2\n2 3 3\n2 3 4\n\"\"\") == \"\"\"\n3\n0\n\"\"\"\nassert solution(\"\"\"\n3\n3 4 15\n7 7 31\n5 6 0\n\"\"\") == \"\"\"\n27\n0\n127\n\"\"\"", "solution('''\n1\n10 5 5\n''') == '''\n24\n'''\n\nprint(solution('''\n1\n10 5 5\n'''))", "solution(\"\"\"\n2\n1 3 0\n1 1 1\n\"\"\") == \"\"\"\n4\n0\n\"\"\"\n\n# check if the required time is not exceeded\nimport time\nstart = time.time()\nsolution(\"\"\"\n2\n1 3 0\n1 1 1\n\"\"\")\nassert time.time() - start < 1", "solution(\"1\\n1 10 0\") == \"1024\"\nassert solution(\"1\\n3 10 1\") == \"75600\"\nassert solution(\"2\\n1 10 0\\n3 10 1\") == \"1024\\n75600\"", "solution('''\n3\n3 4 3\n3 8 3\n3 8 4\n''') == '''\n15\n3\n3\n'''\n\n# let's print the default output of the solution\nfrom unittest import TestCase\nTestCase().assertEqual(solution('''\n1\n1 2 3\n'''), '''\n0\n''')\nprint(solution('''\n3\n3 4 3\n3 8 3\n3 8 4\n'''))\n#'''\n#15\n#3\n#3\n#'''", "solution('''\n''') == '''\n'''\n\nprint(solution(stdin))", "(solution('''\n3\n1 1 0\n2 5 7\n1 20 17\n''')) == '''\n1\n15\n0\n'''\n\n# check the correctness of solution\nassert (solution('''\n1\n2 10 10\n''')) == '''\n64\n'''", "solution(\"\"\"2\n2 1 1\n2 3 7\"\"\") == \"\"\"3\n4\"\"\"", "solution('''\n3\n2 1 1\n3 0 0\n4 5 9\n''') == '''\n4\n4\n37\n'''\n\n# upload solution to github\nprint('Please upload this solution to github and give the link to the github repo to me')", "solution(stdin) == stdout", "solution('''\n1\n1 2 1\n''') == '''\n3\n'''\n\n# run solution\nassert solution('''\n2\n2 2 1\n2 2 2\n''') == '''\n12\n6\n'''\n\n# run solution\nassert solution('''\n2\n10 5 20\n10 5 10\n''') == '''\n548526153\n204169044\n'''\n\n# read stdin\ninput_string = ''\nfor line in sys.stdin:\n    input_string += line\n\n# evaluate solution\nprint(solution(input_string))", "solution('''\n1\n3 10 10\n''') == '3'\nassert solution('''\n1\n3 10 4\n''') == '1'\nassert solution('''\n1\n1 5 1\n''') == '0'\nassert solution('''\n1\n1 5 0\n''') == '1'\nassert solution('''\n1\n2 5 1\n''') == '2'\nassert solution('''\n1\n2 5 0\n''') == '3'\nassert solution('''\n1\n1 0 0\n''') == '1'\nassert solution('''\n1\n10 0 0\n''') == '1024'\nassert solution('''\n1\n10 7 127\n''') == '1024'\nassert solution('''\n1\n50000 100 5\n''') == '203067'\nassert solution('''\n1\n50000 100 0\n''') == '207853'\nassert solution('''\n1\n50000 100 1\n''') == '207853'\nassert solution('''\n1\n50000 100 10\n''') == '203067'\nassert solution('''\n1\n50000 1 0\n''') == '994002'\nassert solution('''\n1\n50000 1 1\n''') == '91409", "solution('''\n3\n3 2 0\n3 2 1\n3 2 2\n''') == '''\n1\n3\n3\n'''", "solution(\"\"\"3\n2 3 3\n3 3 3\n3 4 7\"\"\") == \"\"\"9\n17\n161\"\"\"\n\n#\n# @author      : SRvSaha\n# Filename     : cf_contest_output.py\n# Timestamp    : 08:29 01-October-2020 (Wednesday)\n# Description  : https://codeforces.com/contest/1412/problem/D\n#\n\n'''\nYou are given an initial word and a list of final words.\n\nYour task is to find the minimum number of steps it will take to convert the initial word to one of the final words.\n\nFor each step, you may delete any character in the word.\n\nEach character of the initial word and the final words is lowercase English letter.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nEach test case consists of two lines.\n\nThe first line contains a single string s (1 \u2264 |s| \u2264 10^5) \u2014 the initial word.\n\nThe second line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of final words.\n\nThe third line contains n space-separated strings a_1, a_2, \u2026, a_n (1 \u2264 |a_i| \u2264 10^", "solution(testcase) == testoutput\n\n# get the input\n#stdin = input()\n\n# run and check time taken\nimport time\nstart = time.time()\n#print(solution(stdin))\nend = time.time()\nprint(end - start)\n\n# run and check memory taken\nimport resource\nstart = resource.getrusage(resource.RUSAGE_CHILDREN).ru_maxrss\n#print(solution(stdin))\nend = resource.getrusage(resource.RUSAGE_CHILDREN).ru_maxrss\nprint(end - start)", "solution('''\n2\n2 1 0\n2 1 1\n''') == '''\n3\n3\n'''\n\nassert solution('''\n3\n2 2 3\n2 2 0\n2 2 1\n''') == '''\n3\n3\n3\n'''\n\nassert solution('''\n4\n4 2 7\n4 2 4\n4 2 2\n4 2 6\n''') == '''\n15\n14\n14\n14\n'''\n\nassert solution('''\n10\n10000 0 0\n10000 1 0\n10000 2 0\n10000 3 0\n10000 4 0\n10000 5 0\n10000 6 0\n10000 7 0\n10000 8 0\n10000 9 0\n''') == '''\n1\n2\n4\n8\n16\n32\n64\n128\n256\n512\n'''\n\n# read input\nlines = [line.strip() for line in sys.stdin.readlines()]\n\n# parse input\nfirst_line = lines[0]\ntest_cases = [line.split() for line in lines[1:]]\ntest_cases = [(int(n), int(k), int(x)) for n, k, x in test_cases]\n\n# solve problems\nsolutions = [solution(n, k, x) for n, k, x in test_cases]\n", "solution('''\n2\n2 2 3\n2 3 3\n''') == '''\n4\n12\n'''", "solution('''\n\n''') == '''\n\n'''", "\"\"\"\n\"\"\" == solution(\"\"\"\n\"\"\")", "solution('''\n1\n3 10 5\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 10 0\n'''\n) == '''\n1024\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 20 1\n'''\n) == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 20 1\n'''\n) == '''\n2050\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 30 0\n'''\n) == '''\n1073741824\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 5 1\n'''\n) == '''\n10104\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 7 2\n'''\n) == '''\n101504\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 10 4\n'''\n) == '''\n105701\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 15 16\n'''\n) == '''\n102601\n'''\n\n# check the", "solution('''\n3\n3 5 0\n5 4 15\n2 3 3\n''') == '''\n10\n37\n0\n'''", "solution(\"2\\n5 3 2\\n5 4 5\") == '4\\n4', \"unexpected solution result\"\nassert solution(\"2\\n5 3 5\\n5 4 3\") == '3\\n3', \"unexpected solution result\"\nassert solution(\"1\\n10 7 6\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 14\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 15\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 16\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 17\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 18\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 19\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 20\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 21\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 22\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 23\") == '10', \"unexpected solution result\"\nassert solution(\"1\\n10 7 24\") == '"], "finish_reason": ["length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "length"], "sum_logprob": [-120.75137575907597, -88.091621380957, -98.510356971657, -49.36525173271001, -86.80568966905001, -7.708341548400001, -85.36256809122602, -117.45931039260293, -9.898200697600002, -35.18823686002102, -31.891583573989998, -193.30438995705006, -32.097049069069996, -98.71223074784503, -10.3615501877, -23.796918989, -41.413311097499985, -143.209057615068, -169.9768315389245, -29.304240413499997, -30.277013197440006, -172.69549406668986, -100.39779185937502, -83.928970107724, -44.83144858450001, -22.676495369400005, -19.185202342700002, -20.171382729900007, -67.19999724547, -24.8793757288, -46.40550271726002, -36.26888069292999, -88.03848064825995, -12.496225053100003, -51.47869799741, -20.260295638000002, -78.46348440030003, -5.486534905999999, -123.00727071180195, -162.61851997400498, -20.672859051899998, -195.50262424883005, -50.45083709026202, -125.08380909350198, -17.168349636200002, -6.627541717000001, -9.166434397000002, -118.1122315279023, -36.4757500506, -91.12844878262491], "mean_logprob": [-0.4025045858635867, -0.6075284233169448, -0.32836785657219003, -0.8815223523698215, -0.3963730121874429, -0.8564823942666666, -0.49629400053038375, -0.7578020025329226, -0.8998364270545455, -0.36654413395855207, -0.4429386607498611, -1.8951410780102942, -0.8446591860281579, -0.3290407691594833, -0.609502952217647, -0.4102917067068966, -1.2180385616911764, -0.47736352538356, -0.5665894384630816, -1.085342237537037, -0.6581959390747826, -0.5756516468889666, -0.39371683082107845, -0.7112624585400339, -1.1207862146125, -0.566912384235, -0.6851857979535715, -0.806855309196, -0.8727272369541559, -0.6068140421658537, -0.6271013880710811, -0.671645938757963, -0.6987181003830158, -0.5206760438791667, -0.7354099713915714, -0.9647759827619048, -1.2862866295131148, -0.6096149895555556, -0.8849443936100864, -0.5420617332466834, -0.608025266232353, -0.6516754141627666, -0.3603631220733, -0.4169460303116733, -0.6131553441500001, -0.4142213573125, -0.9166434397000001, -0.393707438426341, -1.0728161779588234, -0.30376149594208335]}
{"prompt": "'''\nOn an endless checkered sheet of paper, n cells are chosen and colored in three colors, where n is divisible by 3. It turns out that there are exactly n/3 marked cells of each of three colors! \n\nFind the largest such k that it's possible to choose k/3 cells of each color, remove all other marked cells, and then select three rectangles with sides parallel to the grid lines so that the following conditions hold:\n\n  * No two rectangles can intersect (but they can share a part of the boundary). In other words, the area of intersection of any two of these rectangles must be 0.\n  * The i-th rectangle contains all the chosen cells of the i-th color and no chosen cells of other colors, for i = 1, 2, 3. \n\nInput\n\nThe first line of the input contains a single integer n \u2014 the number of the marked cells (3 \u2264 n \u2264 10^5, n is divisible by 3).\n\nThe i-th of the following n lines contains three integers x_i, y_i, c_i (|x_i|,|y_i| \u2264 10^9; 1 \u2264 c_i \u2264 3), where (x_i, y_i) are the coordinates of the i-th marked cell and c_i is its color.\n\nIt's guaranteed that all cells (x_i, y_i) in the input are distinct, and that there are exactly n/3 cells of each color.\n\nOutput\n\nOutput a single integer k \u2014 the largest number of cells you can leave.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(r'''\n12\n1 1 2\n1 2 1\n1 3 2\n2 1 1\n2 2 2\n2 3 1\n3 1 2\n3 2 1\n3 3 2\n4 1 1\n4 2 2\n4 3 1\n''') == '6'", "solution(r'''\n9\n0 0 1\n1 0 1\n2 0 1\n0 1 2\n1 1 2\n2 1 2\n0 2 3\n1 2 3\n2 2 3\n''') == '9'\n\nassert solution(r'''\n6\n1 3 1\n2 1 2\n2 2 3\n-2 0 1\n-1 -2 2\n-2 -2 3\n''') == '3'\n\nassert solution(r'''\n12\n0 0 1\n1 0 1\n2 0 1\n3 0 1\n0 1 2\n1 1 2\n2 1 2\n3 1 2\n0 2 3\n1 2 3\n2 2 3\n3 2 3\n''') == '6'\n\nassert solution(r'''\n9\n-2 3 1\n-1 3 1\n0 3 1\n-2 2 2\n-1 2 2\n0 2 2\n-2 1 3\n-1 1 3\n0 1 3\n''') == '3'\n\nassert solution(r'''\n9\n2 3 1\n1 3 1\n0 3 1\n2 2 2\n1 2 2\n0 2 2\n2 1 3\n1 1 3\n0 1 3\n''') == '3'\n\nassert solution(r'''\n12\n-2 3 1\n-1 3 1\n0 3 1\n1 3", "solution('''\n3\n0 0 1\n2 1 2\n3 0 3\n''') == '3'\n\nassert solution('''\n9\n1 0 1\n1 1 1\n1 2 1\n-1 0 2\n-1 1 2\n-1 2 2\n0 -1 3\n0 0 3\n0 1 3\n''') == '9'\n\nassert solution('''\n9\n1 0 1\n1 1 1\n1 2 1\n1 0 2\n1 1 2\n1 2 2\n1 0 3\n1 1 3\n1 2 3\n''') == '1'\n\nassert solution('''\n6\n0 0 1\n0 1 1\n0 2 1\n1 -1 2\n1 0 2\n1 1 2\n''') == '6'\n\nassert solution('''\n6\n0 0 1\n0 1 1\n0 2 1\n1 -1 2\n1 0 2\n1 1 2\n''') == '6'\n\nassert solution('''\n12\n0 0 1\n0 1 1\n0 2 1\n1 -1 2\n1 0 2\n1 1 2\n1 2 2\n2 -1 3\n2 0 3\n2 1 3\n2 2 3\n''') == '12'\n\nassert solution('''\n12\n0 0 1\n0 1 1\n0 2 1\n1", "solution(test) == test_sol\nassert solution(test1) == test1_sol\nassert solution(test2) == test2_sol\nassert solution(test3) == test3_sol\nprint('All tests have passed!')", "solution('''\n7\n1 1 1\n1 3 2\n1 5 3\n2 2 1\n2 4 2\n2 6 3\n3 1 1\n''') == '5'", "solution(\"\") == \"\", \"Sample test case is wrong\"\n\nprint(\"Solution is correct\")", "solution('''\n''') == '''\n'''\n\n# get input and run solution\ninput() # skip the first line\nstdin = '\\n'.join([input() for _ in range(int(input()))])\nprint(solution(stdin))", "solution(\"\"\"\n21\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 2\n2 2 3\n3 0 1\n3 1 2\n3 2 3\n4 0 1\n4 1 2\n4 2 3\n5 0 1\n5 1 2\n5 2 3\n6 0 1\n6 1 2\n6 2 3\n\"\"\") == \"18\", \"test1 failed\"\n\n# get a problem\n# def get_problem():\n#     input_url = 'https://codeforces.com/problemset/problem/'\n#     html = bs4.BeautifulSoup(urllib.request.urlopen(input_url + '/' + problem_id).read(), 'html.parser')\n#     problem_name = html.find('div', {'class': 'title'}).text.strip()\n#     problem_html = html.find('div', {'class': 'problem-statement'})\n#     problem_text = problem_html.find('div', {'class': 'header'}).text.strip() + '\\n'\n#     for div in problem_html.find_all('div'):\n#         div.attrs = {}\n#     problem_text += '\\n'.join([", "solution(\"4\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"6\") == \"0\"\nassert solution(\"7\") == \"1\"\nassert solution(\"9\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"12\") == \"2\"\nassert solution(\"13\") == \"3\"\nassert solution(\"15\") == \"3\"\nassert solution(\"16\") == \"3\"\nassert solution(\"18\") == \"3\"\nassert solution(\"19\") == \"4\"\nassert solution(\"21\") == \"4\"\nassert solution(\"22\") == \"4\"\nassert solution(\"24\") == \"4\"\nassert solution(\"25\") == \"5\"\nassert solution(\"27\") == \"5\"\nassert solution(\"28\") == \"5\"\nassert solution(\"30\") == \"5\"\nassert solution(\"31\") == \"6\"\nassert solution(\"33\") == \"6\"\nassert solution(\"34\") == \"6\"\nassert solution(\"36\") == \"6\"\nassert solution(\"37\") == \"7\"\nassert solution(\"39\") == \"7\"\nassert solution(\"40\") == \"7\"\nassert solution(\"42\") == \"7\"\nassert solution(\"43\") == \"8\"\nassert solution(\"45\") == \"8\"\nassert solution(\"46\") == \"8\"\nassert", "solution('''10\n-1 3 2\n2 3 1\n2 -1 1\n0 0 3\n-2 -2 2\n-3 -3 1\n1 2 3\n-3 -1 2\n-2 2 3\n-1 1 3''') == '6'\nassert solution('''9\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1\n3 2 2\n3 3 3''') == '0'\nassert solution('''12\n1 1 1\n2 1 1\n3 1 1\n1 2 2\n2 2 2\n3 2 2\n1 3 3\n2 3 3\n3 3 3\n4 4 1\n5 4 1\n6 4 1''') == '9'\nassert solution('''12\n-4 1 2\n-4 2 2\n-4 3 2\n-4 4 1\n-4 5 1\n-4 6 1\n5 1 2\n5 2 2\n5 3 2\n5 4 1\n5 5 1\n5 6 1''') == '9'\nassert solution('''18\n0 1 1\n0 2 1\n0 3 1\n0 4 1\n0 5 1\n0 6 1\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n2 1 1\n2 2", "solution(\"3\\n1 0 1\\n1 1 2\\n1 2 3\") == '3'\nassert solution(\"3\\n1 1 1\\n2 1 2\\n2 2 3\") == '2'\nassert solution(\"6\\n1 1 1\\n2 1 2\\n2 2 3\\n0 2 1\\n1 3 2\\n2 3 3\") == '4'\nassert solution(\"6\\n1 1 1\\n2 1 2\\n2 2 3\\n0 2 1\\n1 3 2\\n2 3 3\") == '4'\nassert solution(\"9\\n1 1 1\\n2 1 2\\n2 2 3\\n0 2 1\\n1 3 2\\n2 3 3\\n1 0 1\\n0 1 2\\n0 0 3\") == '6'\nassert solution(\"9\\n1 1 1\\n2 1 2\\n2 2 3\\n0 2 1\\n1 3 2\\n2 3 3\\n1 0 1\\n0 1 2\\n0 0 3\") == '6'\nassert solution(\"15\\n0 0 1\\n1 0 2\\n2 0 3\\n0 1 1\\n1 1 2\\n2 1 3\\n0 2 1\\n1 2 2\\n2 2 3\\n0 3 1\\n1 3 2\\n", "solution('''\n9\n0 0 1\n0 1 2\n0 2 3\n1 0 2\n1 1 3\n1 2 1\n2 0 3\n2 1 1\n2 2 2\n''') == '4', 'correct'\nassert solution('''\n9\n0 0 1\n0 1 2\n0 2 3\n1 0 2\n1 1 1\n1 2 3\n2 0 3\n2 1 3\n2 2 2\n''') == '3', 'correct'\nassert solution('''\n9\n0 0 1\n0 1 2\n0 2 3\n1 0 2\n1 1 3\n1 2 1\n2 0 3\n2 1 1\n2 2 2\n''') == '6', 'correct'\nassert solution('''\n12\n0 0 1\n0 1 2\n0 2 3\n1 0 2\n1 1 3\n1 2 1\n2 0 3\n2 1 1\n2 2 2\n3 0 1\n3 1 2\n3 2 3\n''') == '4', 'correct'\nassert solution('''\n12\n0 0 1\n0 1 2\n0 2 3\n1 0 2\n1 1 1\n1 2 3\n2 0 3\n2 1 3\n2 2 2\n3 0 1\n3 1 2\n3 2 3\n''') == '6', 'correct'\nassert solution('''\n12", "solution('''\n9\n1 1 1\n2 1 2\n3 1 3\n1 2 2\n2 2 3\n3 2 1\n1 3 3\n2 3 1\n3 3 2\n''') == '3'\nassert solution('''\n9\n1 1 1\n2 1 2\n3 1 3\n1 2 2\n2 2 3\n3 2 1\n1 3 3\n2 3 1\n3 3 3\n''') == '0'\nassert solution('''\n9\n1 1 1\n2 1 2\n3 1 3\n1 2 2\n2 2 3\n3 2 1\n1 3 3\n2 3 1\n3 3 1\n''') == '0'\nassert solution('''\n24\n5 1 1\n5 2 2\n5 3 3\n5 4 1\n5 5 2\n5 6 3\n5 7 1\n5 8 2\n5 9 3\n5 10 1\n5 11 2\n5 12 3\n5 13 1\n5 14 2\n5 15 3\n5 16 1\n5 17 2\n5 18 3\n5 19 1\n5 20 2\n5 21 3\n5 22 1\n5 23 2\n5 24 3\n''') == '0'\nassert solution('''\n24\n1 1 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n1 7 1\n1", "solution('''\n9\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 2\n2 2 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n12\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 2\n2 2 3\n3 0 1\n3 1 2\n3 2 3\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n11\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 2\n2 2 3\n3 0 1\n3 1 2\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n9\n0 0 1\n1 0 2\n2 0 3\n0 1 1\n1 1 2\n2 1 3\n0 2 1\n1 2 2\n2 2 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n15\n0 0 1\n1 0 2\n2 0 3\n3 0 1\n4 0 2\n5 0 3\n0 1 1\n1 1 2\n2 1 3\n3", "solution(\"3\\n1 1 1\\n2 2 2\\n3 3 3\") == \"3\"\nassert solution(\"3\\n1 1 1\\n2 2 2\\n3 3 3\") == \"3\"\n\n# check the performance of solution\nfrom timeit import timeit\nfrom random import randint\n\nsol_time = []\nfor _ in range(100):\n    n = randint(3, pow(10, 5))\n    random_stdin = str(n) + \"\\n\"\n    random_stdin += \"\\n\".join([f\"{randint(-pow(10, 9), pow(10, 9))} {randint(-pow(10, 9), pow(10, 9))} {randint(1, 3)}\" for _ in range(n)])\n    sol_time.append(timeit(lambda: solution(random_stdin), number=1))\nprint(\"Solution time: \" + str(round(min(sol_time), 4)) + \"s\")", "solution(stdin=\"\"\"\n0\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n2\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n3\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n10\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n18\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n36\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n100\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n15\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n100000\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n123456\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(stdin=\"\"\"\n1000000\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(stdin=\"\"\"\n10\n0 0 1\n0 0 2\n0 0 3\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(stdin=\"\"\"\n10\n0 0 1\n0 0 2\n0 0 3\n0 0 1\n0 0 2\n0 0 3\n0 0 1\n", "solution('''\n6\n1 1 1\n0 0 2\n-1 1 3\n-1 0 2\n0 -1 3\n1 0 1\n''') == '''\n2\n'''\n\nprint(solution('''\n9\n0 0 2\n-1 0 1\n-1 1 1\n-1 2 3\n0 2 3\n1 2 3\n2 2 1\n2 1 1\n2 0 2\n'''))\n\nprint(solution('''\n6\n1 1 1\n0 0 2\n-1 1 3\n-1 0 2\n0 -1 3\n1 0 1\n'''))", "solution('''\n9\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1\n3 2 2\n3 3 3\n''') == '9'\n\nassert solution('''\n9\n1 1 2\n1 2 1\n1 3 3\n2 1 2\n2 2 1\n2 3 3\n3 1 2\n3 2 1\n3 3 3\n''') == '0'\n\nassert solution('''\n18\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1\n3 2 2\n3 3 3\n1 1 2\n1 2 3\n1 3 1\n2 1 2\n2 2 3\n2 3 1\n3 1 2\n3 2 3\n3 3 1\n''') == '18'\n\nassert solution('''\n9\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1\n3 2 2\n3 3 3\n''') == '9'\n\nassert solution('''\n9\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1\n3 2 2\n3 3 3\n''') == '9'\n\nassert solution('''", "str(solution('''3\n1 1 1\n2 1 2\n3 1 3\n''')) == '3'\nassert str(solution('''9\n1 1 1\n2 1 2\n3 1 3\n4 1 1\n5 1 2\n6 1 3\n7 1 1\n8 1 2\n9 1 3\n''')) == '6'\nassert str(solution('''9\n0 0 1\n1 0 2\n2 0 3\n0 1 1\n1 1 2\n2 1 3\n0 2 1\n1 2 2\n2 2 3\n''')) == '9'\nassert str(solution('''15\n1 1 1\n1 2 2\n1 3 3\n2 1 2\n2 2 3\n2 3 1\n3 1 3\n3 2 1\n3 3 2\n4 1 2\n4 2 3\n4 3 1\n5 1 3\n5 2 1\n5 3 2\n''')) == '9'\nassert str(solution('''15\n1 1 1\n1 2 2\n1 3 3\n2 1 2\n2 2 3\n2 3 1\n3 1 3\n3 2 1\n3 3 2\n1 4 2\n1 5 3\n1 6 1\n2 4 3\n2 5 1\n2 6 2\n''')) == '9'\nassert str(solution(''", "solution('''9\n0 0 1\n0 1 2\n0 2 3\n1 0 2\n1 1 3\n1 2 1\n2 0 3\n2 1 1\n2 2 2''') == '6'\nassert solution('''6\n0 0 1\n0 1 1\n0 2 1\n1 0 2\n1 1 2\n1 2 2''') == '6'\nassert solution('''6\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3''') == '3'\nassert solution('''21\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 2\n2 2 3\n3 0 1\n3 1 2\n3 2 3\n4 0 1\n4 1 2\n4 2 3\n5 0 1\n5 1 2\n5 2 3\n6 0 1\n6 1 2\n6 2 3''') == '21'\nassert solution('''21\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 2\n2 2 3\n3 0 1\n3 1 2\n3 2 3\n4 0 1\n4 1 2\n4 2 3\n5 0 1\n5 1 2\n5 2 3\n6 0", "solution('''\n9\n1 1 1\n1 2 2\n1 3 3\n2 1 2\n2 2 3\n2 3 1\n3 1 3\n3 2 1\n3 3 2\n''') == '3'\n\nassert solution('''\n12\n1 1 1\n1 2 2\n1 3 3\n2 1 2\n2 2 3\n2 3 1\n3 1 3\n3 2 1\n3 3 2\n4 1 2\n4 2 3\n4 3 1\n''') == '6'\n\n# print the solution\nwith open('input.txt', 'r') as file:\n    stdin = file.read()\n    print(solution(stdin))", "solution('''\n''') == '''\n'''\n# print(solution('''\n# '''))", "(solution('''3\n0 0 1\n1 0 2\n2 0 3\n''') == '3')\nassert (solution('''3\n1 2 1\n1 2 2\n1 2 3\n''') == '0')\nassert (solution('''12\n10 10 1\n-10 10 2\n-10 -10 3\n0 0 1\n1 0 2\n0 1 3\n1 1 1\n2 1 2\n2 2 3\n-1 -1 1\n-2 -1 2\n-2 -2 3\n''') == '9')\nassert (solution('''9\n1 2 1\n1 2 2\n1 2 3\n1 2 1\n1 2 2\n1 2 3\n1 2 1\n1 2 2\n1 2 3\n''') == '0')\nassert (solution('''18\n1 2 1\n1 2 2\n1 2 3\n1 2 1\n1 2 2\n1 2 3\n1 2 1\n1 2 2\n1 2 3\n1 2 1\n1 2 2\n1 2 3\n1 2 1\n1 2 2\n1 2 3\n1 2 1\n1 2 2\n1 2 3\n''') == '0')\nassert (solution('''9\n1 2 1\n1 2 2\n1 2 3\n2 3 1\n2 3 2\n2 3 3", "solution(\"\") == \"\"", "solution(exampleInput) == exampleOutput\nassert solution(exampleInput2) == exampleOutput2\n\n'''\nProblem: http://codeforces.com/problemset/problem/900/B\nSubmission: http://codeforces.com/contest/900/submission/45228873\n'''", "solution('''\n10\n1 1 1\n1 3 1\n2 1 1\n2 3 2\n3 1 2\n3 3 2\n4 1 2\n4 3 3\n5 1 3\n5 3 3\n''') == '6', 'Example'\nassert solution('''\n12\n1 1 1\n1 3 1\n2 1 1\n2 3 2\n3 1 2\n3 3 2\n4 1 2\n4 3 3\n5 1 3\n5 3 3\n1 1 2\n1 3 2\n''') == '10', 'Incorrect'\nassert solution('''\n9\n1 1 1\n1 3 1\n2 1 1\n2 3 2\n3 1 2\n3 3 2\n4 1 2\n4 3 3\n5 1 3\n''') == '9', 'Incorrect'\n\n# test the performance of solution\nimport random\nimport string\ndef random_string(size: int = 10, chars: str = string.digits) -> str:\n    return ''.join(random.choice(chars) for _ in range(size))\n\ndef test_performance(size: int = 10**3) -> None:\n    stdin = f'{size}\\n'\n    for i in range(size):\n        stdin += f'{random_string()} {random_string()} {random.randint", "solution('''\n10\n0 0 1\n0 1 2\n0 2 3\n1 0 2\n1 1 3\n1 2 1\n2 0 3\n2 1 1\n2 2 2\n5 5 1\n''') == '6'\n\nprint('ok')", "solution('''\n12\n0 0 1\n1 0 2\n2 0 3\n0 1 1\n1 1 2\n2 1 3\n0 2 1\n1 2 2\n2 2 3\n0 3 1\n1 3 2\n2 3 3\n''') == '6'\nassert solution('''\n9\n1 1 1\n2 1 2\n3 1 3\n1 2 1\n2 2 2\n3 2 3\n1 3 1\n2 3 2\n3 3 3\n''') == '6'\nassert solution('''\n9\n0 0 1\n2 0 2\n4 0 3\n0 1 1\n2 1 2\n4 1 3\n0 2 1\n2 2 2\n4 2 3\n''') == '3'\nassert solution('''\n6\n-4 -5 1\n4 -5 2\n-4 5 3\n4 5 1\n-2 -2 2\n2 -2 3\n''') == '3'\nassert solution('''\n9\n-8 -8 1\n-7 -8 2\n-6 -8 3\n-8 -7 1\n-7 -7 2\n-6 -7 3\n-8 -6 1\n-7 -6 2\n-6 -6 3\n''') == '3'\nassert solution('''\n9\n-4 -4 1\n-4 -4 2\n-", "solution('''\n6\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n''') == '''\n6\n'''\nassert solution('''\n9\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1\n3 2 2\n3 3 3\n''') == '''\n3\n'''\nassert solution('''\n6\n1 1 1\n2 1 1\n3 1 1\n1 2 2\n2 2 2\n3 2 2\n''') == '''\n6\n'''\nassert solution('''\n9\n1 1 1\n2 1 1\n3 1 1\n1 2 2\n2 2 2\n3 2 2\n1 3 3\n2 3 3\n3 3 3\n''') == '''\n3\n'''\nassert solution('''\n9\n1 1 1\n2 1 1\n3 1 1\n1 2 2\n2 2 2\n3 2 2\n1 3 3\n2 3 3\n3 3 3\n''') == '''\n3\n'''\nassert solution('''\n6\n1 1 1\n1 1 2\n1 1 3\n2 2 1\n2 2 2\n2 2 3\n''') == '''\n6\n'''\nassert solution('''\n9", "solution(example_input) == example_output", "solution('''\n9\n2 2 1\n2 4 1\n2 6 1\n4 2 2\n4 4 2\n4 6 2\n6 2 3\n6 4 3\n6 6 3\n''') == '9'\n\nassert solution('''\n9\n2 2 1\n2 4 1\n2 6 1\n4 2 2\n4 4 2\n4 6 2\n6 2 3\n6 4 3\n6 6 3\n''') == '9'\n\nassert solution('''\n9\n2 2 1\n2 4 1\n2 6 1\n4 2 2\n4 4 2\n4 6 2\n6 2 3\n6 4 3\n6 6 3\n''') == '9'\n\nassert solution('''\n9\n2 2 1\n2 4 1\n2 6 1\n4 2 2\n4 4 2\n4 6 2\n6 2 3\n6 4 3\n6 6 3\n''') == '9'\n\nassert solution('''\n9\n2 2 1\n2 4 1\n2 6 1\n4 2 2\n4 4 2\n4 6 2\n6 2 3\n6 4 3\n6 6 3\n''') == '9'\n\nassert solution('''\n9\n2 2 1\n2 4 1\n2 6 1\n4 2 2\n4 4 2\n4 6 2\n6 2 3\n6 4 3\n6", "solution('''3\n1 0 1\n0 1 2\n1 1 3''') == '3'\nassert solution('''9\n-9 0 1\n-9 0 2\n-9 0 3\n-8 0 1\n-8 0 2\n-8 0 3\n-7 0 1\n-7 0 2\n-7 0 3''') == '9'\nassert solution('''18\n2 5 1\n1 2 2\n-3 -6 3\n-6 7 1\n-6 -7 3\n3 5 2\n1 3 3\n1 5 1\n-7 -6 2\n5 -5 2\n6 -4 3\n-7 -6 1\n-6 -7 1\n-4 -6 3\n-2 6 2\n4 -4 3\n-2 6 1''') == '18'\nassert solution('''9\n-9 0 1\n-9 0 2\n-9 0 3\n-8 0 1\n-8 0 2\n-8 0 3\n-7 0 1\n-7 0 2\n-7 0 3''') == '9'\nassert solution('''18\n2 5 1\n1 2 2\n-3 -6 3\n-6 7 1\n-6 -7 3\n3 5 2\n1 3 3\n1 5 1\n-7 -6 2\n5 -5 2\n6 -4 3\n-", "solution('''\n5\n-1 -1 1\n-1 -1 2\n-1 -1 3\n1 1 1\n1 1 2\n''') == '3'\nassert solution('''\n9\n0 0 1\n1 0 1\n2 0 1\n0 1 2\n1 1 2\n2 1 2\n0 2 3\n1 2 3\n2 2 3\n''') == '9'\nassert solution('''\n9\n-1 -1 1\n0 -1 1\n1 -1 1\n-1 0 2\n0 0 2\n1 0 2\n-1 1 3\n0 1 3\n1 1 3\n''') == '9'\nassert solution('''\n12\n-1 -1 1\n-1 0 1\n-1 1 1\n0 -1 1\n0 0 1\n0 1 1\n1 -1 1\n1 0 1\n1 1 1\n-1 -1 2\n-1 0 2\n-1 1 2\n''') == '6'\nassert solution('''\n15\n-1 -1 1\n-1 0 1\n-1 1 1\n0 -1 1\n0 0 1\n0 1 1\n1 -1 1\n1 0 1\n1 1 1\n-1 -1 2\n-1 0 2\n-1 1 2\n0 -1 2\n0 0 2\n0 1 2\n", "solution('''4\n1 1 1\n1 2 2\n2 1 3\n2 2 1''') == '2'\nassert solution('''6\n1 1 1\n2 2 2\n3 3 3\n1 2 3\n2 1 2\n3 2 1''') == '6'\nassert solution('''6\n1 1 1\n2 2 2\n3 3 3\n1 2 3\n2 1 2\n3 2 3''') == '3'\nassert solution('''6\n1 1 1\n2 2 2\n3 3 3\n1 2 3\n2 1 3\n3 2 1''') == '0'\nassert solution('''6\n1 1 1\n2 2 2\n3 3 3\n1 2 3\n2 1 1\n3 2 2''') == '0'\nassert solution('''9\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9''') == '0'\nassert solution('''9\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9''') == '0'\nassert solution('''12\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5", "solution(solution.__doc__) == ''\n\n# check the performance of solution\n# assert solution('') == ''", "solution('''\n9\n-1 1 1\n-1 -1 2\n-1 0 3\n1 1 1\n1 -1 2\n1 0 3\n0 1 1\n0 -1 2\n0 0 3\n''') == '9'\n\nassert solution('''\n9\n-1 1 1\n-1 -1 2\n-1 0 3\n1 1 2\n1 -1 1\n1 0 3\n0 1 1\n0 -1 2\n0 0 3\n''') == '6'\n\nassert solution('''\n9\n-1 1 1\n-1 -1 2\n-1 0 3\n1 1 2\n1 -1 1\n1 0 3\n0 1 1\n0 -1 3\n0 0 2\n''') == '6'\n\nassert solution('''\n9\n-1 1 1\n-1 -1 2\n-1 0 3\n1 1 2\n1 -1 1\n1 0 3\n0 1 1\n0 -1 3\n0 0 3\n''') == '3'\n\nassert solution('''\n9\n-1 1 1\n-1 -1 2\n-1 0 3\n1 1 2\n1 -1 1\n1 0 3\n0 1 1\n0 -1 3\n0 0 1\n''') == '3'\n\nassert solution('''\n9\n-1 1", "solution(\"4\\n1 2 1\\n1 3 2\\n2 3 3\\n2 2 1\") == \"4\"\nassert solution(\"4\\n1 2 1\\n1 3 2\\n2 3 3\\n2 2 1\") == \"4\"\nassert solution(\"5\\n1 2 1\\n1 3 2\\n2 3 3\\n2 2 1\\n3 1 1\") == \"4\"\nassert solution(\"6\\n1 2 1\\n1 3 2\\n2 3 3\\n2 2 1\\n3 1 1\\n2 1 2\") == \"6\"\nassert solution(\"6\\n1 2 1\\n1 3 2\\n2 3 3\\n2 2 1\\n3 1 1\\n3 2 2\") == \"6\"\nassert solution(\"6\\n1 2 1\\n1 3 2\\n2 3 3\\n2 2 1\\n3 1 1\\n3 2 2\") == \"6\"\nassert solution(\"6\\n1 2 1\\n1 3 2\\n2 3 3\\n2 2 1\\n3 1 1\\n4 4 1\") == \"4\"\nassert solution(\"6\\n1 2 1\\n1 3 2\\n2 3 3\\n2 2 1\\n3 1 1\\n4 4 2\") == \"5\"\nassert solution(\"6\\n", "solution('''\n3\n1 1 1\n1 2 2\n1 3 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n6\n1 0 1\n0 1 2\n1 1 3\n-1 0 3\n0 -1 2\n-1 -1 1\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n18\n1 0 1\n0 1 2\n1 1 3\n-1 0 3\n0 -1 2\n-1 -1 1\n1 2 1\n2 1 2\n1 -2 3\n-2 1 3\n-1 -2 2\n-1 2 2\n-2 -1 1\n2 -1 1\n2 2 3\n-2 2 3\n-2 -2 2\n2 -2 2\n''') == '18'\n\n# check the correctness of solution\nassert solution('''\n18\n1 0 1\n0 1 2\n1 1 3\n-1 0 3\n0 -1 2\n-1 -1 1\n1 2 1\n2 1 2\n1 -2 3\n-2 1 3\n-1 -2 2\n-1 2 2\n-2 -1 1\n2 -1 1\n2 2 3\n-2 2 3\n-2 -2 2\n2 -2 2\n''') == '18'\n\n", "solution(test_data) == test_output\n\n# get the input\nwith open('input.txt', 'r') as file:\n    input_data = file.read()\n\n# solve the problem\nsolution = solution(input_data)\n\n# print the result\nwith open('output.txt', 'w') as file:\n    file.write(solution)", "solution(sample_input1) == '1', 'sample1'\nassert solution(sample_input2) == '3', 'sample2'\nassert solution(sample_input3) == '11', 'sample3'\n\n# get problem input\nwith open('input.txt', 'r') as file:\n    problem_input = file.read()\n\n# print the solution\nprint(solution(problem_input))", "solution('''5\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2''') == '3'\nassert solution('''7\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1''') == '4'\nassert solution('''8\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1\n3 2 2''') == '4'\nassert solution('''9\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1\n3 2 2\n3 3 3''') == '5'\nassert solution('''15\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1\n3 2 2\n3 3 3\n4 1 1\n4 2 2\n4 3 3\n5 1 1\n5 2 2\n5 3 3''') == '8'\nassert solution('''19\n1 1 1\n1 2 2\n1 3 3\n2 1 1\n2 2 2\n2 3 3\n3 1 1\n3 2 2\n3 3 3\n4 1 1\n4 2 2\n4 3 3\n5 1 1\n5", "solution('''9\n-1000000007 -1000000007 1\n-1000000005 -1000000005 2\n-1000000003 -1000000003 3\n-1000000001 -1000000001 1\n-999999997 -999999997 2\n-999999995 -999999995 3\n-999999993 -999999993 1\n-999999991 -999999991 2\n-999999995 -999999995 3''') == '9'\nassert solution('''9\n1000000007 1000000007 1\n1000000005 1000000005 2\n1000000003 1000000003 3\n1000000001 1000000001 1\n999999997 999999997 2\n999999995 999999995 3\n999999993 999999993 1\n999999991 999999991 2\n999999995 999999995 3''') == '9'\nassert solution('''9\n-999999997 -999999997 1\n-999999995 -999999995 2\n-999999993 -999999993 3\n-999999991 -999999991 1\n-999999989 -999999989 2\n-999999987 -999999987 3\n-999999985 -999999985 1\n-999999983 -999999983 2\n-999999987 -999999987 3''') == '9'\nassert solution(", "solution(\n'''9\n1 2 1\n1 3 2\n1 4 3\n2 2 2\n2 3 3\n2 4 1\n3 2 3\n3 3 1\n3 4 2''') == '6'", "solution('''\n12\n1 1 1\n1 3 2\n1 5 3\n2 1 2\n2 3 3\n2 5 1\n3 1 3\n3 3 1\n3 5 2\n4 1 1\n4 3 2\n4 5 3\n''') == '9'\n\nassert solution('''\n3\n1 1 1\n2 2 2\n3 3 3\n''') == '3'\n\nassert solution('''\n6\n1 1 1\n1 2 2\n1 3 3\n2 1 2\n2 2 3\n2 3 1\n''') == '6'\n\nassert solution('''\n3\n1 1 1\n2 2 2\n3 3 3\n''') == '3'\n\nassert solution('''\n3\n1 1 1\n1 1 2\n1 1 3\n''') == '0'\n\nassert solution('''\n3\n1 1 1\n1 1 2\n1 1 3\n''') == '0'\n\n# submit solution\nimport sys\nfrom pathlib import Path\nsys.path.append(str(Path(__file__).parent.parent.parent))\n\nfrom utils import *\ndef has_intersection(rect_1, rect_2):\n    (ax1, ay1, ax2, ay2) = rect_1\n    (bx1, by1, b", "solution('''9\n2 3 1\n2 1 2\n2 2 3\n3 2 1\n3 1 2\n3 3 3\n2 3 1\n2 1 2\n2 2 3''') == '9'\nassert solution('''3\n3 4 1\n1 1 2\n2 3 3''') == '3'\nassert solution('''12\n4 6 1\n4 7 2\n4 8 3\n4 1 1\n4 2 2\n4 3 3\n2 3 1\n2 2 2\n2 1 3\n1 3 1\n1 2 2\n1 1 3''') == '12'\nassert solution('''9\n1 1 1\n1 2 2\n1 3 3\n1 1 1\n1 2 2\n1 3 3\n1 1 1\n1 2 2\n1 3 3''') == '9'\nassert solution('''10\n1 1 1\n1 2 2\n1 3 3\n1 1 1\n1 2 2\n1 3 3\n1 1 1\n1 2 2\n1 3 3\n0 0 0''') == '3'\nassert solution('''10\n0 0 0\n1 1 1\n1 2 2\n1 3 3\n1 1 1\n1 2 2\n1 3 3\n1 1 1\n1 2 2\n1 3 3''') == '3'\nassert solution('''9\n2 3 1\n", "solution('''5\n1 1 1\n2 1 2\n3 1 3\n2 2 1\n3 2 2\n''') == '5'\n\n# for test development\ndef parse_input(stdin: str) -> tuple:\n    pass\n\n# for test development\ndef create_tests():\n    pass\n\nif __name__ == '__main__':\n    try:\n        with open('test.txt', 'r') as f:\n            tests = create_tests()\n    except OSError:\n        tests = None\n    print(solution(stdin=tests))", "solution('''\n3\n1 1 1\n1 2 2\n1 3 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n6\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n''') == '6'\n\n# read the input from file\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n    print(solution(stdin))", "solution(\"\"\"\n6\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n9\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 2\n2 2 3\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n9\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 3\n2 2 2\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n12\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 3\n2 2 2\n3 0 1\n3 1 2\n3 2 3\n\"\"\") == \"\"\"\n6\n\"\"\"\n\nassert solution(\"\"\"\n27\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 3\n2 2 2\n3 0 1\n3 1 2\n3 2 3\n4 0 1\n4 1 2\n4 2 3\n5 0 1\n5 1 2\n5 2 3\n6 0 1\n6 1 3\n6 2", "solution('''\n6\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n''') == '3'\n\nassert solution('''\n6\n0 0 1\n0 1 2\n0 2 3\n0 3 1\n1 0 2\n1 1 3\n''') == '0'\n\nassert solution('''\n6\n0 0 1\n0 1 2\n0 2 3\n1 1 1\n1 2 2\n1 3 3\n''') == '2'\n\nassert solution('''\n9\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 2\n2 2 3\n''') == '6'\n\nassert solution('''\n12\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 2\n2 2 3\n3 0 1\n3 1 2\n3 2 3\n''') == '9'\n\nassert solution('''\n18\n0 0 1\n0 1 2\n0 2 3\n1 0 1\n1 1 2\n1 2 3\n2 0 1\n2 1 2\n2 2 3\n3 0 1\n3 1 2\n3 2 3\n4 0 1\n4 1 2\n4", "solution(sample_input) == sample_output\nassert solution(sample_input2) == sample_output2\nassert solution(sample_input3) == sample_output3\nassert solution(sample_input4) == sample_output4\n\n# stress testing\nwhile True:\n    pass"], "finish_reason": ["stop", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "length", "length", "stop"], "sum_logprob": [-24.390568948870005, -74.76873520413403, -73.07023108034511, -29.109184994400003, -22.841770964000002, -26.446728910000004, -25.315993230219995, -110.51655087600754, -36.82153635098997, -123.702360777359, -69.80070090459493, -52.07654939300199, -52.723848324405054, -38.841206117069, -78.99749926213796, -81.09677233088205, -57.01598526180601, -39.92561276485997, -54.474361114739956, -44.14512552369999, -36.26958453971999, -14.822532985900002, -88.580386946867, -5.61158239, -57.564401632422005, -106.16517474457505, -24.411063991349998, -82.62711041156106, -47.581498079579006, -6.81389356794, -28.013955205247, -153.4150024236899, -49.72979699227395, -60.550535161279974, -23.051994688729998, -48.67509057696, -67.62429543439795, -55.36986904700997, -21.628639742510014, -44.17711870715999, -43.01447267843797, -49.27030768058479, -21.629181798699996, -92.98643967691001, -113.95133726292401, -92.22272130586002, -38.54678244327, -43.19297932458103, -41.082147029981016, -22.984932380660002], "mean_logprob": [-0.3871518880773016, -0.24922911734711334, -0.24356743693448332, -0.5390589813777777, -0.5438516896190476, -1.2021240413636365, -0.40832247145516126, -0.368388502920025, -0.1227384545033, -0.41234120259119666, -0.23266900301531668, -0.17358849797667333, -0.17574616108135, -0.12947068705689666, -0.34346738809625216, -0.27032257443627333, -0.40436868980004254, -0.13308537588286667, -0.1815812037158, -0.14715041841233334, -0.2370561081027451, -0.5293761780678572, -0.29526795648955667, -0.9352637316666667, -0.7778973193570541, -0.35388391581524997, -0.4068510665225, -0.27542370137187, -0.15860499359859667, -0.6194448698127273, -0.09337985068415666, -0.5113833414123, -0.16576598997424666, -0.20183511720426667, -0.7948963685768965, -0.1622503019232, -0.22541431811466, -0.1845662301567, -0.2514958109594186, -0.46017831986625, -0.14338157559479334, -0.16423435893528265, -0.44141187344285715, -0.30995479892303335, -0.37983779087641334, -0.6831312689322963, -0.338129670555, -0.14397659774860333, -0.13694049009993667, -0.35361434431784616]}
{"prompt": "'''\nYou are given m strings and a tree on n nodes. Each edge has some letter written on it.\n\nYou have to answer q queries. Each query is described by 4 integers u, v, l and r. The answer to the query is the total number of occurrences of str(u,v) in strings with indices from l to r. str(u,v) is defined as the string that is made by concatenating letters written on the edges on the shortest path from u to v (in order that they are traversed).\n\nInput\n\nThe first line of the input contains three integers n, m and q (2 \u2264 n \u2264 10^5, 1 \u2264 m,q \u2264 10^5).\n\nThe i-th of the following n-1 lines contains two integers u_i, v_i and a lowercase Latin letter c_i (1 \u2264 u_i, v_i \u2264 n, u_i \u2260 v_i), denoting the edge between nodes u_i, v_i with a character c_i on it. \n\nIt's guaranteed that these edges form a tree.\n\nThe following m lines contain the strings consisting of lowercase Latin letters. The total length of those strings does not exceed 10^5.\n\nThen q lines follow, each containing four integers u, v, l and r (1 \u2264 u,v \u2264 n, u \u2260 v, 1 \u2264 l \u2264 r \u2264 m), denoting the queries. \n\nOutput\n\nFor each query print a single integer \u2014 the answer to the query.\n\n\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"1\n2 3 1\n2 3 4 5 6 7\n3\n1 2 1 3\n1 2 2 2\n1 2 2 3\"\"\") == \"\"\"\n5\n5\n5\n\"\"\".strip()\n\n# submit the answer\nsubmit(solution, [\n    (\"1\\n2 3 1\\n2 3 4 5 6 7\\n3\\n1 2 1 3\\n1 2 2 2\\n1 2 2 3\", \"5\\n5\\n5\"),\n])", "solution('''\n1 2 3\n1 2 a\n1 2 b\n1 2 c\n1 2 d\n2 3 e\n2 3 f\n2 3 g\n1 2\n1 2\n1 2\n1 2\n1 2\n''') == '''\n3\n2\n1\n0\n0\n''', 'Wrong Answer!'\nprint('Accepted!')\n\n# test for performance\nimport random\ntest = True\ntest = False\n\nif test:\n    from collections import defaultdict\n    from string import ascii_lowercase\n    from itertools import permutations\n    from collections import Counter\n    from math import factorial\n\n    def correct_solution(stdin: str) -> str:\n        return '\\n'.join(str(correct_answer(parse_input(stdin))) for _ in range(int(stdin.split()[-1])))\n\n    def parse_input(stdin: str) -> tuple:\n        lines = stdin.splitlines()\n        n, m, q = map(int, lines[0].split())\n        edges = [tuple(lines[i + 1].split()) for i in range(n - 1)]\n        strings = [lines[i + n] for i in range(m)]\n        queries = [tuple(map(int, lines[i", "solution(\n'''\n4 2 1\n1 2 a\n2 3 b\n2 4 c\nabc\nac\n2 4 1 2\n'''\n) == '1'", "solution(\"\"\"\n5 2 2\n1 2 a\n1 3 b\n2 4 c\n3 5 d\nabacaba\nbac\n1 5 1 2\n1 5 2 2\n\"\"\") == \"\"\"\n2\n1\n\"\"\"", "solution('''\n5 5 10\n1 2 a\n1 3 b\n2 4 c\n2 5 d\nacabac\nacbbac\nacbcac\nacbcac\nacbcac\n1 5 1 1\n1 5 3 5\n2 3 3 3\n4 5 1 1\n4 5 1 5\n4 5 2 2\n4 5 2 5\n4 5 3 3\n4 5 3 5\n4 5 4 4\n4 5 4 5\n''') == '''\n0\n0\n3\n2\n2\n1\n1\n0\n0\n0\n0\n'''\n# print the runtime of the solution function\nprint(f'{solution.__name__} runtime: {timeit.timeit(solution, number=1)}')", "solution(stdin) == stdout\n \n# test\nif __name__ == '__main__':\n    input_str = open('tests/[FILE_NAME]').read()\n    result = solution(input_str)\n    print(result)", "solution('''\n5 5 3\n1 2 a\n1 3 b\n2 4 c\n2 5 d\nabcab\nabcabcabcabc\nabcabcabcab\nabcabcabc\nabcabc\n1 5 2 2\n1 5 2 5\n1 5 3 4\n''') == '''\n2\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n10 8 5\n1 2 a\n1 3 b\n2 4 c\n2 5 d\n2 6 e\n2 7 f\n2 8 g\n2 9 h\n2 10 i\nab\nababababab\nababababa\nabababa\nababa\nabab\nab\naba\na\n1 10 2 8\n1 10 5 8\n1 10 7 8\n1 10 1 10\n1 10 3 3\n''') == '''\n3\n3\n3\n3\n3\n'''", "solution('''\n4 4 4\n1 2 b\n1 3 c\n2 4 c\nbbbbb\ncbbbb\nbbbbc\ncccbb\n1 2 1 4\n2 4 1 4\n2 4 2 4\n1 2 2 4\n''') == '''\n4\n3\n2\n3\n'''", "solution('''\n2 2 1\n1 2 a\naa\nbb\n1 2 1 2\n''') == '0'\n\n# check the performance of solution\nassert solution('''\n2 2 1\n1 2 a\naa\nbb\n1 2 1 2\n''') == '0'", "solution('''4 3 4\n1 2 a\n2 3 b\n3 4 c\nabb\nabbc\nabbcc\n1 4 1 2\n1 4 2 3\n1 4 3 4\n3 4 1 2''') == '2\\n3\\n2\\n1'", "solution('''\n5 5 4\n1 2 a\n1 3 b\n2 4 c\n2 5 d\na\nb\nd\naba\ncaba\n1 2 1 2\n1 2 1 5\n1 2 3 4\n1 5 2 5\n''') == '''\n2\n3\n0\n1\n'''", "solution(solution_input) == solution_output", "solution(stdin) == stdout\n\n# if it passed the assertion, print accepted\nprint(\"Problem solved!\")", "solution('''\n''') == '''\n'''\n\n# check if the solution is fast enough\nfrom random import random, randint\nfrom time import time\nfrom constraint import *\n\ndef solution_test(n, m, q):\n    t1 = time()\n    s = solution('''\n{} {} {}\n{}\n'''.format(n, m, q, '\\n'.join(map(lambda _: '{} {} {}'.format(randint(1, n), randint(1, n), chr(randint(ord('a'), ord('z')))), range(n - 1)))))\n    t2 = time()\n    return t2 - t1\n\nn = 100\nm = 1000\nq = 1000\n\nsolution_time = solution_test(n, m, q)\nprint(solution_time)\nassert solution_time < 1\n\nprint('AC')", "solution('''\n5 3 3\n1 2 a\n2 3 b\n2 4 c\n2 5 d\nabd\ncab\ndad\n1 5 1 2\n1 5 2 3\n1 5 1 3\n''') == '''\n0\n0\n0\n'''\nassert solution('''\n5 3 3\n1 2 a\n2 3 b\n2 4 c\n2 5 d\nabd\ncab\ndad\n1 5 1 2\n1 5 2 3\n1 5 1 3\n''') == '''\n0\n0\n0\n'''\nassert solution('''\n5 3 3\n1 2 a\n2 3 b\n2 4 c\n2 5 d\nabd\ncab\ndad\n1 5 1 2\n1 5 2 3\n1 5 1 3\n''') == '''\n0\n0\n0\n'''", "solution(\"\") == \"\", \"Example 1\"\nassert solution(\"\") == \"\", \"Example 2\"\n\n# get input and run solution\ninputs = []\nwhile True:\n    try:\n        inputs.append(input())\n    except EOFError:\n        break\nstdin = \"\\n\".join(inputs)\nprint(solution(stdin))", "solution(\"\"\"5 2 2\n1 2 a\n1 3 b\n2 4 c\n2 5 d\nbc\nbcb\n1 2 1 2\n1 5 1 2\"\"\") == \"\"\"2\n1\"\"\"", "solution('''\n6 3 3\n1 2 c\n1 3 d\n1 4 e\n4 5 f\n4 6 g\nabcc\ncde\nabcdeg\n1 6 1 3\n1 6 2 3\n1 6 1 2\n''') == '''\n3\n3\n3\n'''\n\n# get input data and run solution\ninput = sys.stdin.read()\nprint(solution(input))", "solution('''\n1\n''') == '''\n'''", "solution('''\n1 2 3\n4 5 6 7\n8 9\n10 11 12 13\n''') == '''\n6\n28\n80\n'''\nassert solution('''\n1\n2\n''') == '''\n'''\n\n# get input and output\nfrom sys import stdin, stdout\ninput = stdin.read()\nprint(solution(input))", "solution('''...''') == '...'", "solution(\"\"\"\n3 2 2\n1 2 a\n2 3 b\nab\nabab\n1 2 1 2\n2 3 1 2\n\"\"\") == \"\"\"\n2\n0\n\"\"\"\n\ndef solution(stdin):\n    #read in tree\n    lines = stdin.split(\"\\n\")\n    nodes, num_strings, num_queries = [int(x) for x in lines[0].split()]\n    tree = {}\n    for i in range(1, nodes):\n        u, v, letter = lines[i].split()\n        u, v = int(u), int(v)\n        if u not in tree:\n            tree[u] = {}\n        if v not in tree:\n            tree[v] = {}\n        tree[u][v] = letter\n        tree[v][u] = letter\n    strings = lines[nodes + 1: nodes + 1 + num_strings]\n    queries = lines[nodes + 1 + num_strings:]\n    # do queries\n    res = []\n    for query in queries:\n        u, v, l, r = [int(x) for x in query.split()]\n        substr = shortest_path(tree, u, v)\n        substr = \"\".join(substr)\n        cnt = 0\n        for string", "solution('''\n5 5 2\n1 2 a\n1 3 b\n1 4 c\n1 5 d\naabcd\nabcd\naaabcd\nad\nabcde\n1 5 1 3\n2 3 4 5\n''') == '''\n1\n1\n'''\n\n# print(solution('''\n# 5 5 2\n# 1 2 a\n# 1 3 b\n# 1 4 c\n# 1 5 d\n# aabcd\n# abcd\n# aaabcd\n# ad\n# abcde\n# 1 5 1 3\n# 2 3 4 5\n# '''))", "solution('''\n4 2 2\n1 2 a\n2 3 b\n2 4 c\nba\nab\n2 4 1 2\n1 3 1 2\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4 2 3\n1 2 a\n2 3 b\n2 4 c\nba\nab\n2 4 1 2\n1 3 1 2\n1 2 1 2\n''') == '''\n2\n2\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10 3\n1 2 a\n2 3 b\n2 4 c\n2 5 d\n1 6 e\n6 7 f\n6 8 g\n6 9 h\n6 10 i\nabcd\naab\nabcc\nac\naabcd\naabdd\naaaab\naac\ncdd\nggghh\n2 4 1 5\n1 10 1 7\n1 5 1 4\n''') == '''\n0\n5\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n10 10 3\n1 2 a\n2 3 b\n2 4 c\n2 5 d\n1 6 e\n6 7 f\n6 8 g\n6 9 h\n6 10 i\nabcd\naab\nabcc\nac\naabcd\naabdd", "solution(stdin='''1\n1''') == '1'\n\nassert solution(stdin='''2\n2\n2\n''') == '2'\n\nassert solution(stdin='''3\n3\n3\n3\n''') == '3'\n\nassert solution(stdin='''4\n4\n4\n4\n4\n''') == '4'\n\nassert solution(stdin='''5\n5\n5\n5\n5\n5\n''') == '5'\n\nassert solution(stdin='''6\n6\n6\n6\n6\n6\n6\n''') == '6'\n\nassert solution(stdin='''7\n7\n7\n7\n7\n7\n7\n7\n''') == '7'\n\nassert solution(stdin='''8\n8\n8\n8\n8\n8\n8\n8\n8\n''') == '8'\n\nassert solution(stdin='''9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n''') == '9'\n\nassert solution(stdin='''10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n''') == '10'\n\nassert solution(stdin='''11\n11\n", "solution('''\n3 2 3\n1 2 a\n2 3 b\nab\nbba\n1 2 1 2\n1 2 2 2\n1 3 1 3\n''') == '''\n1\n1\n1\n'''\n\n# run\nimport sys; sys.stdin = open('in.txt', 'r')\nprint(solution(sys.stdin.read()))", "solution('''\n3 2 3\n1 2 a\n2 3 a\naab\naaa\n1 2 1 1\n1 2 1 2\n1 2 2 2\n''') == '2\\n2\\n1'\n\nassert solution('''\n5 5 2\n1 2 b\n2 3 a\n2 4 b\n2 5 c\nba\nbab\nbba\nbcc\naab\n3 5 1 1\n3 5 2 2\n''') == '2\\n0'\n\nassert solution('''\n8 7 5\n1 2 a\n1 3 b\n1 4 c\n1 5 d\n1 6 e\n1 7 f\n1 8 g\naa\nbb\ncc\ndd\nee\nff\ngg\n1 8 1 7\n1 8 2 7\n1 8 3 7\n1 8 4 7\n1 8 5 7\n''') == '7\\n6\\n5\\n4\\n3'\n\nassert solution('''\n10 4 10\n1 2 a\n1 3 b\n1 4 c\n1 5 d\n1 6 e\n1 7 f\n1 8 g\n1 9 h\n1 10 i\naabb\nabbb\nbabb\nbbbb\n1 10 1 4\n1 10 2 4\n1 10 3 4\n1 10 4 4\n1 10 5 4\n1 10 6 4\n1 10 7", "solution('''\n\n''') == '''\n\n'''", "solution('''\n4 3 3\n1 2 a\n2 3 b\n3 4 c\nabc\nabcabc\nabcabcabc\n1 2 1 2\n1 4 1 2\n1 2 2 3\n''') == '''\n2\n2\n2\n'''", "solution(\n'''\n3 3 1\n1 2 a\n2 3 b\naa\nab\naba\n1 3 2 3\n'''\n) == '2'\n\nassert solution(\n'''\n5 6 3\n1 2 a\n2 3 b\n3 4 c\n3 5 d\naa\naaaaa\naaaaaa\naaaaaaa\naaaaaaaa\naaaaaaaaa\n1 3 1 1\n2 5 3 3\n1 3 3 5\n'''\n) == '''\n1\n0\n5\n'''", "solution('''4 3 3\n1 2 a\n2 3 b\n2 4 c\naab\nab\nb\n1 4 2 3\n2 3 1 3\n3 4 1 3''') == '''3\n3\n3'''\nassert solution('''10 5 2\n1 2 a\n1 3 b\n1 4 c\n2 5 d\n2 6 e\n2 7 f\n2 8 g\n2 9 h\n2 10 i\nabcccc\nabb\nabbabb\nabbabbbb\nabbabbbabb\n1 10 1 5\n5 8 2 4''') == '''3\n1'''\nassert solution('''5 2 3\n1 2 a\n2 3 b\n2 4 c\n2 5 d\naa\nddd\n1 5 1 2\n1 5 2 2\n5 5 1 2''') == '''1\n1\n0'''\nassert solution('''4 1 3\n1 2 a\n2 3 b\n2 4 c\nab\n1 4 1 1\n2 4 1 1\n3 4 1 1''') == '''0\n0\n0'''\n\nimport random\n\n# check the performance of solution\nsol = lambda x: len(x.split('\\n')[0])\n\nfor _ in range(int(1e4)):\n    n = 10**5\n    m = 10**", "solution(\"\"\"\n3 4 4\n1 2 a\n2 3 a\naa\nbaa\nbaaa\n3 1 1 3\n3 1 2 3\n3 1 3 3\n3 1 4 3\n\"\"\") == \"\"\"\n2\n3\n4\n0\n\"\"\"", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution(stdin='''\n8 5 2\n1 2 a\n1 3 a\n2 4 b\n2 5 c\n5 7 c\n5 8 d\n4 2 2\n4 1\n4 5\n''') == '''\n3\n3\n'''", "solution('''\n1 2 3 4 5\n''') == '''\n10\n'''\nassert solution('''\n2 3 4 5 6\n''') == '''\n14\n'''\nassert solution('''\n3 4 5 6 7\n''') == '''\n21\n'''\nassert solution('''\n4 5 6 7 8\n''') == '''\n28\n'''\nassert solution('''\n5 6 7 8 9\n''') == '''\n36\n'''\nassert solution('''\n6 7 8 9 10\n''') == '''\n45\n'''\nassert solution('''\n7 8 9 10 11\n''') == '''\n55\n'''\nassert solution('''\n8 9 10 11 12\n''') == '''\n66\n'''\nassert solution('''\n9 10 11 12 13\n''') == '''\n78\n'''\nassert solution('''\n10 11 12 13 14\n''') == '''\n91\n'''\nassert solution('''\n11 12 13 14 15\n''') == '''\n105\n'''\nassert solution('''\n12 13 14 15 16\n''') == '''\n120\n'''\nassert solution('''\n13 14 15 16 17\n''') == '''\n136\n'''\nassert solution", "solution(stdin) == stdout\n\n# check the correctness of solution on custom strings\nassert solution(custom_stdin) == custom_stdout\n\n# check the correctness of solution on random strings\nfor _ in range(10000):\n    stdin = stdin_solution.generate_random_string()\n    custom_stdin = custom_stdin_solution.generate_random_string()\n    assert solution(stdin) == stdin_solution.solution(stdin)\n    assert solution(custom_stdin) == custom_stdin_solution.solution(custom_stdin)\n\n# check the speed of solution\ntime_ = timeit.timeit(stmt=lambda: solution(stdin), number=100)\nprint(f'Time: {time_}')", "solution('''\\\n2 1 2\n1 2 a\nb\n1 2 1 2\n''') == '1'\n\nassert solution('''\\\n4 1 5\n1 2 a\n2 3 b\n3 4 c\na\n1 4 1 4\n2 4 1 4\n1 4 2 4\n2 3 1 4\n2 4 2 4\n''') == '\\n'.join([\n    '1',\n    '0',\n    '0',\n    '1',\n    '1',\n])\n\nassert solution('''\\\n5 1 5\n1 2 a\n2 3 b\n3 4 c\n4 5 d\nabc\n1 5 1 5\n''') == '3'", "solution(\"\"\"\n5 2 5\n1 2 a\n1 3 b\n2 4 a\n2 5 b\nabab\naba\n1 5 1 2\n1 5 2 2\n1 5 1 1\n1 5 2 1\n5 3 3 2\n\"\"\") == \"\"\"\n2\n2\n2\n0\n0\n\"\"\"", "solution(example) == '1\\n4\\n3\\n4\\n'\nprint(\"ok\", solution(example))", "solution('''\n''') == '''\n'''", "solution('''\n''') == '''\n'''\n\n# place it in the folder with 'A' files and run:\n# $ pytest --testfile=solution.py", "solution('''\n5 3 2\n1 2 a\n1 3 a\n2 4 b\n2 5 c\nababa\nbaba\nababa\n1 5 1 1\n1 5 1 2\n''') == '2\\n4'", "solution(\n'''\n4 5 5\n1 2 a\n1 3 b\n2 4 c\nabcbac\naa\nb\nabcbac\nbac\n1 4 1 5\n1 4 1 1\n1 4 2 3\n3 4 3 5\n2 4 2 5\n'''\n) == '''\n4\n1\n2\n2\n2\n'''", "solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''", "solution('''\n    5 3 1\n    1 2 a\n    1 3 b\n    3 4 c\n    3 5 d\n    ab\n    aba\n    abc\n    1 5 2 3\n''') == '1', 'Test #1 failed'\nassert solution('''\n    1 2 2\n    1 2 a\n    b\n    a\n    1 1 1 1\n    1 1 2 2\n''') == '1\\n1', 'Test #2 failed'\nassert solution('''\n    1 2 2\n    1 2 a\n    b\n    b\n    1 1 1 1\n    1 1 2 2\n''') == '0\\n0', 'Test #3 failed'\nassert solution('''\n    10 5 5\n    1 2 a\n    1 3 b\n    2 4 c\n    2 5 d\n    5 6 e\n    5 7 f\n    7 8 g\n    7 9 h\n    9 10 i\n    ababababab\n    ababababab\n    ababababab\n    ababababab\n    ababababab\n    1 3 2 3\n    1 3 4 5\n    5 8 4 5\n    5 8 8 10\n    1 8 6 10\n''') == '1\\n0\\n1\\n2\\n3', '", "solution(\"\") == \"\", \"Empty case\"\nassert solution(\"1 2\\n3 4\") == \"1 2\\n3 4\", \"Simple case\"\nassert solution(\"2 3\\n1 2\\n2 3\") == \"1 2\\n2 3\", \"Two numbers line\"\nassert solution(\"1 2\\n3 4\\n5 6\") == \"1 2\\n3 4\\n5 6\", \"Two lines case\"\n\n# if case are correct - print success message\nprint(\"All test cases are correct! Congratulations!\")", "solution(exampleInput) == exampleOutput\n\n# get the input\ndef getInput():\n    lines = []\n    while True:\n        try:\n            lines.append(input())\n        except EOFError:\n            break\n    text = '\\n'.join(lines)\n    return text\n\n# launch the output\nprint(solution(getInput()))", "solution(stdin) == stdout\n\n# run the tests\nimport pytest\n@pytest.mark.parametrize(('infile', 'expected'), [\n    ('sample-1.in', 'sample-1.out'),\n    ('sample-2.in', 'sample-2.out'),\n    ('sample-3.in', 'sample-3.out'),\n    ('sample-4.in', 'sample-4.out'),\n    ('sample-5.in', 'sample-5.out'),\n    ('sample-6.in', 'sample-6.out'),\n    ('sample-7.in', 'sample-7.out'),\n    ('sample-8.in', 'sample-8.out'),\n    ('sample-9.in', 'sample-9.out'),\n    ('sample-10.in', 'sample-10.out'),\n    ('sample-11.in', 'sample-11.out'),\n    ('sample-12.in', 'sample-12.out'),\n    ('sample-13.in', 'sample-13.out'),\n    ('sample-14.in', 'sample-14.out'),\n    ('sample-15.in', 'sample-15.out'),\n    ('sample-16.in', 'sample-16.out'),\n    ('sample-17", "solution('''\n5 3 3\n1 2 a\n2 3 b\n2 4 c\n2 5 d\nacb\naacbac\ncba\n1 2 1 3\n2 4 1 2\n1 2 2 3\n''') == '''\n2\n2\n0\n'''\n# check the performance of solution\nassert solution('''\n5 3 3\n1 2 a\n2 3 b\n2 4 c\n2 5 d\nacb\naacbac\ncba\n1 2 1 3\n2 4 1 2\n1 2 2 3\n''') == '''\n2\n2\n0\n'''"], "finish_reason": ["stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop"], "sum_logprob": [-6.295857462200001, -66.92291985702, -152.27116136427705, -24.4342155787, -28.682990245599996, -117.63182126944194, -44.66636883803002, -121.98379970505599, -53.798833697130014, -24.256748134799988, -39.0760142966, -50.76477061139999, -7.993373471000001, -35.5928007363, -107.41307082857998, -47.12557913678997, -28.519072969030024, -30.07066075659999, -67.01064507269001, -9.848489941, -58.25851705657002, -8.944713103000002, -107.41503337948991, -54.261212992269, -147.28943506973005, -38.844010328871974, -44.11554891757999, -127.48735876543005, -6.2813864989, -33.0042615467, -73.17308708932, -203.14741444654996, -37.869082336829976, -13.782141426, -55.92674587310001, -34.764304452416994, -84.5641280181, -67.79044498407002, -45.235293634799994, -37.5960525114, -5.89003361, -62.10799548299999, -39.51825495399999, -68.43393010957001, -10.861110289759997, -124.74295059453996, -92.77360305848003, -32.16209146565, -39.338388798430984, -59.69972609808997], "mean_logprob": [-0.3934910913875, -0.6029091879010811, -0.5075705378809233, -0.6108553894675, -0.5515959662615385, -0.691951889820247, -0.757057098949661, -0.6038801965596832, -0.7270112661774324, -0.36204101693731344, -0.6202541951841269, -0.6954078165945206, -0.6661144559166667, -1.3182518791222222, -0.5090666863913744, -0.24673078082089006, -0.343603288783494, -0.6537100164478261, -0.6980275528405209, -0.6155306213125, -0.6620286029155682, -0.7453927585833334, -0.35805011126496666, -0.39036843879330213, -0.49096478356576667, -0.12948003442957334, -0.5013130558815909, -0.4249578625514333, -0.39258665618125, -0.5500710257783333, -0.6308024749079311, -0.6771580481551667, -0.6418488531666102, -0.045940471420000004, -0.9479109470016949, -0.11588101484139, -0.45710339469243244, -0.4290534492662658, -0.6371168117577465, -1.2964156038413792, -0.42071668642857146, -1.4443719879767443, -0.7318195361851851, -0.824505182043012, -0.24684341567636364, -0.4158098353151333, -0.7731133588206667, -0.3828820412577381, -0.13112796266143667, -0.42642661498635714]}
{"prompt": "'''\nYou are given n dominoes. Each domino has a left and a right cell. Each cell can be colored either black or white. Some cells are already colored, while some aren't yet.\n\nThe coloring is said to be valid if and only if it is possible to rearrange the dominoes in some order such that for each 1 \u2264 i \u2264 n the color of the right cell of the i-th domino is different from the color of the left cell of the ((i mod n)+1)-st domino. \n\nNote that you can't rotate the dominoes, so the left cell always remains the left cell, and the right cell always remains the right cell.\n\nCount the number of valid ways to color the yet uncolored cells of dominoes. Two ways are considered different if there is a cell that is colored white in one way and black in the other. In particular, colorings BW WB and WB BW different (and both invalid).\n\nAs this number can be very big, output it modulo 998 244 353.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of dominoes.\n\nThe next n lines describe dominoes. Each line contains two characters which represent the left and the right cell. Character B means that the corresponding cell is black, character W means that the corresponding cell is white, and ? means that the cell is yet to be colored. \n\nOutput\n\nPrint a single integer \u2014 the answer to the problem.\n\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''2\nWW\nWW''') == '0'\nassert solution('''3\nB?\n?W\nWB''') == '2'\nassert solution('''3\nW?\nW?\n?B''') == '1'\nassert solution('''6\nWB?B?W\nW??W?B\nB?B??W\nWW?WB?\n?B?W?W\nWB?WB?''') == '4'\n\n# print(solution('''4\n# W??\n# W??\n# ??W\n# ???'''))", "solution('''\n5\nBW\nWB\nWB\nWB\nWB\n''') == '4'\n\nassert solution('''\n2\nWB\nWB\n''') == '0'\n\nassert solution('''\n3\nWB\nWB\nWB\n''') == '2'\n\nassert solution('''\n3\nWW\nWB\nWB\n''') == '0'\n\nassert solution('''\n4\nWB?\nB?W\n?BW\nW?B\n''') == '4'\n\nassert solution('''\n4\nW?B\nWB?\n?BW\nB?W\n''') == '0'\n\nassert solution('''\n3\nW?B\nB?W\n?BW\n''') == '2'\n\nassert solution('''\n3\n?BW\nWB?\n?WB\n''') == '0'\n\nassert solution('''\n3\nW?B\n?BW\n?WB\n''') == '6'\n\nassert solution('''\n3\n?WB\n?BW\nW?B\n''') == '0'\n\nassert solution('''\n5\nW?B?\n??BW\nB?W?\n?B?W\nWB??\n''') == '28'\n\nassert solution('''\n5\n?WB", "solution('''4\nWB?\n?BW\nWB?\n?WB''') == '2'\nassert solution('''4\nWB?\nWB?\nWB?\nWB?''') == '0'\nassert solution('''5\nW?W?\n??B?\nWB??\nWW??\n??B?''') == '2'\nassert solution('''5\nWW??\n??B?\nW?W?\n??B?\nWW??''') == '0'\nassert solution('''5\nWWW?\n??B?\nW?W?\n??B?\nWWW?''') == '24'\nassert solution('''8\nW?WB?WB\n?BW?BWW\n?BWWW?B\nWB?BWW?\nWW?WB?B\nW?BWWB?\nBWWWWB?\n?WB?BWW''') == '0'\nassert solution('''5\nW?W?\n??B?\nWB??\nWW??\n??B?''') == '2'\nassert solution('''5\nW?W?\n??B?\nWW??\n??B?\nW?W?''') == '0'\nassert solution('''5\nW?W?\n??B?\nWW??\nW?W?\n", "solution('''\n1\nW?\n''') == '1'\n\nassert solution('''\n2\nW?\n?W\n''') == '1'\n\nassert solution('''\n2\nBB\nWB\n''') == '0'\n\nassert solution('''\n4\n?W?B\nW?B?\n?B?W\nB?B?\n''') == '3'\n\nassert solution('''\n5\n?B??B\nB???B\n????B\n?BB??\n??W??\n''') == '319'\n\nassert solution('''\n10\nB??????B?B\n?B????B?BB\n?BBBB???BB\nB?W????BBB\n?B???B?B?B\nBB????W?BB\n???B?B???B\n?B???W???B\nB???B??BBB\nB?B???B???\n''') == '1033243144'\n\nassert solution('''\n5\n?B?WB\n???BW\n???BW\nBB?B?\n??B??\n''') == '0'\n\nassert solution('''\n5\n?B???\n?B???\n???W?\n?B???\n????B\n''') == '9'\n\nassert solution('''\n10\n", "solution(stdin_1) == stdout_1", "solution(\"\"\"\n3\n?B\n?W\nB?\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n5\n?B\n?W\nB?\nW?\n?B\n\"\"\") == \"\"\"\n8\n\"\"\"\n\nassert solution(\"\"\"\n2\nB?\n?B\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n3\n?B\n?W\n?B\n\"\"\") == \"\"\"\n4\n\"\"\"", "solution('''\n5\nW?W?\n''') == '4'", "solution(\"\"\"\n3\nB?\nW?\n?W\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1\n?W\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n6\n?B?B?\nB??W?\n?W?W?\n?BW?B\n??WWB\nWB??B\n\"\"\") == \"317\"\n\nassert solution(\"\"\"\n6\n?B?B?\nB??W?\n?W?W?\n?BW?B\n??WWB\nWB??B\n\"\"\") == \"317\"\n\nassert solution(\"\"\"\n2\n?W\nW?\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n?W\n?W\n?W\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n1\n?W\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n?W\n?W\n?W\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n3\n?W\nB?\n?W\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\nWB\nWB\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4\n?WB\n?WB\n?WB\n?WB\n\"\"\") == \"24\"\n\nassert solution(\"\"\"\n6\n?W?W?", "solution(\"\"\"1\nW?\n\"\"\") == \"1\"\nassert solution(\"\"\"3\n?B\n?B\n?B\n\"\"\") == \"0\"\nassert solution(\"\"\"3\nWB?\n?BW\n??B\n\"\"\") == \"0\"\nassert solution(\"\"\"2\nB?\n??\n\"\"\") == \"0\"\nassert solution(\"\"\"2\nB?\nB?\n\"\"\") == \"1\"\nassert solution(\"\"\"1\n?B\n\"\"\") == \"0\"\nassert solution(\"\"\"1\n?W\n\"\"\") == \"0\"\nassert solution(\"\"\"2\n?B\nW?\n\"\"\") == \"1\"\nassert solution(\"\"\"3\nW?W\n?B?\nB??\n\"\"\") == \"0\"\nassert solution(\"\"\"4\nW??\n?B?\n??B\n?BW\n\"\"\") == \"0\"\nassert solution(\"\"\"4\n?B?\n??B\nW??\n?BW\n\"\"\") == \"0\"\nassert solution(\"\"\"2\n?B\n?W\n\"\"\") == \"2\"\nassert solution(\"\"\"1\n??\n\"\"\") == \"3\"\nassert solution(\"\"\"3\n??B\n?B?\n??W\n\"\"\") == \"9\"\nassert solution(\"\"\"2\n??\nB?\n\"\"\") == \"3\"\nassert solution", "(solution('''5\nWW?\n???\n??B\n?B?\n??W''') == '''32''')\nassert (solution('''5\nWW?\n???\n??B\n?BW\n??W''') == '''0''')\nassert (solution('''4\n??W\nWW?\n?BB\n??B''') == '''2''')\nassert (solution('''3\nWWW\nBBB\nBBB''') == '''0''')\nassert (solution('''3\n???\n???\n??B''') == '''16''')\nassert (solution('''10\nW??W?W?B\n?B?B??B?\n??BB???W\n?WW??W??\n?B?BB?B?\nW??B?WW?\n???????B\nB?B????W\nW???????\nB?W?W???''') == '''0''')\nassert (solution('''10\nW??W?W?B\n?B?B??B?\n??BB???W\n?WW??W??\n?B?BB?B?\nW??B?WW?\n???????B\nB?B????W\nW???????\nB?W?W??B''') == '''6567", "solution('''\n5\nB?\n??\n?W\n??\n?B\n''') == '''\n2\n'''\n\n# to run in pycharm use command\n# pytest -v -s --tb=line test.py\n# or\n# python3 -m pytest -v -s --tb=line test.py\n# to run in command line use command\n# python3 test.py\n# to run in visual studio code use command\n# pytest -v -s --tb=line test.py", "solution(ex1) == '1'\nassert solution(ex2) == '1'\nassert solution(ex3) == '2'\nassert solution(ex4) == '5'\n\nex1 = '''\n3\nB?\n??\n??\n'''\n\nex2 = '''\n3\nB?\nB?\n??\n'''\n\nex3 = '''\n3\nW?\n??\n??\n'''\n\nex4 = '''\n5\n?W??\n?W??\n?W??\n?W??\n??W?\n'''", "solution(stdin) == stdout", "solution('''\n5\nB?\n?W\n?B\nWB\n?W\n''') == '5'\n\nassert solution('''\n5\n?B\nB?\n?B\n?B\n?B\n''') == '0'\n\nassert solution('''\n7\nWB\nWB\nWB\nWB\nWB\nWB\nWB\n''') == '0'\n\nassert solution('''\n7\nWB\nB?\n?B\n?B\n?B\n?B\n?B\n''') == '4'\n\nassert solution('''\n8\nW?\n?B\n?B\n?B\n?B\n?B\n?B\n?B\n''') == '2'\n\nassert solution('''\n10\n?B\n?B\n?B\n?B\n?B\n?B\n?B\n?B\n?B\n?B\n''') == '1024'\n\nassert solution('''\n10\n?B\n?B\n?B\n?B\n?B\n?B\n?B\n?B\n?B\n?B\n''') == '1024'\n\nassert solution('''\n10\nB?\nB?\nB?\nB?\nB?\nB?\nB?\nB?\nB?\nB?\n''') == '", "solution(example_1) == example_1_ans\nassert solution(example_2) == example_2_ans\nassert solution(example_3) == example_3_ans\nassert solution(example_4) == example_4_ans", "solution('''\n5\nW?\nB?\n??\n?B\nW?\n''') == '''\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n6\nW?\nW?\nW?\n?W\n?W\n?W\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n?B\nW?\nW?\nW?\n?W\n?W\n?W\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n7\nWWWWWW\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n?BW\n?W?\n?W?\n?W?\n?W?\n?W?\n?WW\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n7\nWBWBWB\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\nW?W\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\nWW?\n''') == '''\n0\n'''", "solution(open(\"task_input.txt\").read()) == open(\"task_output.txt\").read()", "solution(\"input\") == \"expected_output\"", "solution('''\n3\n?B\nWB\n?W\n''') == '1'\n\nassert solution('''\n3\n?B\nWB\n?B\n''') == '0'\n\nassert solution('''\n2\n?B\nB?\n''') == '2'\n\nassert solution('''\n1\nW?\n''') == '1'\n\nassert solution('''\n1\n??\n''') == '2'\n\nassert solution('''\n3\n??\n??\n??\n''') == '8'", "solution(\"\"\"\n3\nBB?\n?W?\n?B?\n\"\"\") == \"1\"\n\n# get the input\ndef get_input():\n    lines = []\n    while True:\n        try:\n            lines.append(input())\n        except EOFError:\n            break\n    text = '\\n'.join(lines)\n    return text\n\nif __name__ == \"__main__\":\n    import os\n    # if the input is taken from the file, use the next line\n    # stdin = open(os.path.join(os.path.dirname(__file__), 'input.txt'), 'r')\n    stdin = get_input()\n    # if the input is taken from console, use the next line\n    # stdin = sys.stdin\n    solution(stdin)", "solution(\"\"\"Input\n6\nBW\nWW\nW?\n??\n?B\nBB\nOutput\n1\nInput\n4\nBBB\nBB?\n?WW\n?WW\nOutput\n4\n\"\"\")", "(solution('''\n5\nW?\n?B\nB?\n?B\n?W\n''') == '3')", "solution(\"\"\"\n6\nWW?BBB\nW??BBB\nWB??BB\nWWB??B\nWWW??B\nWWWB??\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n7\nWW?BBB\n?W?BBB\n?WW?BB\n?W?W?B\n?W?WB?\n?W?WW?\n?W?WB?\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n7\nWWW???\nWWB???\nWWWB??\nWWWBB?\nWWWWB?\nWWWWWB\nWWWWBB\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n???\n???\n???\n\"\"\") == \"14\"\n\nassert solution(\"\"\"\n6\nW???W\n?W???\n??W??\n???W?\n????W\nW????\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n7\nB?WBWW\nWB?BWW\nWBB?WW\nWBWB?W\nWBWBW?\nWBWBWB\nWBWBWW\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\nB??\n???\n??B\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n?W\nW?\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n", "solution(\"\"\"\n4\nB?\n?W\n?B\n?W\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\nBW?\n?B?\n??W\n??B\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\nWW?\nW?W\n??W\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\n??B\nB??\n??B\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n3\n??B\nB??\n??B\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n7\n??????B\n?B??????\n??????B?\nB???????\n???W????\n???????W\n??????B?\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\n10\n??????B???\n???????????\n???W???????\n???????B???\n???????W???\n???????B???\n??????B???W\n??????B???B\n???????B???\n??????B????\n\"\"\") == \"312\"\n\nassert solution(\"\"\"\n10\n??????B????\n???????????\n???W???????\n???????B???\n???????W???\n???????B???\n??????B???W\n??????B???B\n???????B???\n??????B????\n\"\"\") == \"740", "solution(\"4\\nW?\\n?B\\n??\\nWB\") == \"2\"\nassert solution(\"4\\nWB\\nB?\\n??\\nB?\") == \"0\"\nassert solution(\"1\\n??\") == \"2\"\nassert solution(\"10\\n??\\n??\\n??\\n??\\n??\\n??\\n??\\n??\\n??\\n??\") == \"284\"\nassert solution(\"5\\n??\\n??\\n??\\n??\\n??\") == \"26\"\nassert solution(\"5\\n?B\\n??\\n??\\n??\\n??\") == \"12\"\nassert solution(\"5\\n?B\\n??\\n??\\n?W\\n??\") == \"12\"\nassert solution(\"6\\n?B\\n??\\n??\\n?W\\n??\\n??\") == \"32\"\nassert solution(\"7\\n?B\\n??\\n??\\n?W\\n??\\n??\\n??\") == \"78\"\nassert solution(\"8\\n?B\\n??\\n??\\n?W\\n??\\n??\\n??\\n??\") == \"178\"\nassert solution(\"9\\n?B\\n??\\n??\\", "solution(\"1\\nB?\\n\") == \"1\"\nassert solution(\"2\\n?B\\n?B\\n\") == \"0\"\nassert solution(\"2\\nWW\\n?B\\n\") == \"1\"\nassert solution(\"5\\n?B??\\n?B??\\n?B??\\n?B??\\n?B??\\n\") == \"12\"\nassert solution(\"5\\n?BB?\\n?WW?\\n?BB?\\n?WW?\\n?BB?\\n\") == \"1\"\nassert solution(\"4\\n?BB\\n?WW\\n?BB\\n?WW\\n\") == \"0\"\nassert solution(\"4\\nBB?\\n?W?\\n?W?\\n?B?\\n\") == \"4\"\nassert solution(\"4\\n?BB\\n?WW\\n?W?\\n?BB\\n\") == \"0\"\nassert solution(\"3\\n?BB\\n?B?\\n?BB\\n\") == \"0\"\nassert solution(\"1\\n?W\\n\") == \"2\"\nassert solution(\"5\\n?BB?\\n?W?W\\n?BB?\\n?W?W\\n?BB?\\n\") == \"0\"\nassert solution(\"3", "solution('''\n1\n?B\n''') == '1'\n\nassert solution('''\n3\nBB?\n??W\n??W\n''') == '2'\n\nassert solution('''\n1\nWW\n''') == '0'\n\nassert solution('''\n3\nB??\n?B?\n??B\n''') == '0'\n\nassert solution('''\n4\n?B??\nW???\n?WW?\n??B?\n''') == '908'\n\nassert solution('''\n2\n?W\nW?\n''') == '3'\n\nassert solution('''\n1\nW?\n''') == '2'\n\nassert solution('''\n1\n??\n''') == '2'\n\nassert solution('''\n1\n?B\n''') == '1'\n\nassert solution('''\n5\nB?B??\n????W\nW???W\n?WW?W\n??W?B\n''') == '128'\n\nassert solution('''\n6\n??W???\n?BB???\nWW??W?\n?WWW?W\n??BW?B\n????BB\n''') == '15'\n\nassert solution('''\n5\n????W\nW???W\n??WW?\n?B?", "solution('''\n\n''') == ''\n\n# run in command line\nsolution(sys.stdin.read())", "solution('''\n5\nW?B?\n??BW\n?B??\nB??W\nB?WW\n''') == '''\n'''", "solution(stdin) == stdout", "solution('''\n5\n?B\nWW\n?B\nWW\n?B\n''') == '4'\n\nassert solution('''\n6\nB?W??\nW??WW\n??BB?\n?BB?W\n?W??B\n?BWW?\n''') == '176'\n\nassert solution('''\n4\nB?B?\n?W?W\n??BB\n?B?W\n''') == '35'", "solution('''\n3\nB?\n?W\n?B\n''') == '6'\n\nassert solution('''\n1\n?W\n''') == '1'\n\nassert solution('''\n7\nBB??B?\n?W??BB\n??BB?W\n??B?BW\n?B?WWW\nWWWWWW\n?WWWWW\n''') == '8'", "solution('''3\nBW\nWB\nBB''') == '1'\nassert solution('''3\nWW\nBW\nBB''') == '3'\nassert solution('''3\nBB\nBB\nBB''') == '0'\nassert solution('''3\nWW\nWW\nWW''') == '1'\nassert solution('''2\nBB\nWW''') == '0'\nassert solution('''2\nWW\nBB''') == '0'\nassert solution('''2\nBW\nBW''') == '0'\nassert solution('''2\nWB\nWB''') == '0'\nassert solution('''3\n?B\n?W\n?B''') == '3'\nassert solution('''3\n?W\n?B\n?W''') == '3'\nassert solution('''3\n?B\n?B\n?W''') == '2'\nassert solution('''3\n?W\n?W\n?B''') == '2'\nassert solution('''3\n?B\n?W\n?W''') == '2'\nassert solution('''3\n?W\n?B\n?B''') == '2'\nassert solution('''3\n?B\n?B\n?B''') == '1'\nassert solution(", "solution(test_case) == \"test\"", "(solution('input.txt') == 'output.txt')", "solution('''\n\n''') == '''\n\n'''\nassert solution('''\n\n''') == '''\n\n'''\nassert solution('''\n\n''') == '''\n\n'''\n\n# check for performance\nimport random\nimport time\ndef brute_force_example(n: int) -> int:\n    pass\n\ndef brute_force_test(n: int) -> None:\n    start = time.time()\n    my_sol = brute_force_example(n)\n    end = time.time()\n    diff = end - start\n    print(f'n = {n}: {diff} seconds')\n    assert diff < 1\n\nbrute_force_test(100)\nbrute_force_test(1000)\nbrute_force_test(5000)\nbrute_force_test(10000)\n\nprint('All tests have passed successfuly')", "solution(problem_input) == problem_output", "solution('''\n2\nBW\n?W\n''') == '2'\n\n# stress testing\ndef stress_solution(stdin: str) -> str:\n    pass\n# check the correctness of solution\nassert stress_solution('''\n''') == ''", "solution('''\n3\nW?\n??\n??\n''') == '''\n6\n'''\nassert solution('''\n1\nW?\n''') == '''\n2\n'''\nassert solution('''\n2\nB?\n??\n''') == '''\n3\n'''\nassert solution('''\n3\nB?\nW?\nB?\n''') == '''\n0\n'''\nassert solution('''\n2\nWW\nBB\n''') == '''\n0\n'''\nassert solution('''\n4\nW?B\nBB?\nWB?\n??W\n''') == '''\n4\n'''\nassert solution('''\n4\nW?B\nB?B\n?BW\nBB?\n''') == '''\n3\n'''\nassert solution('''\n4\nW?B\n?BB\n?BB\n?WB\n''') == '''\n0\n'''\nassert solution('''\n6\nW?B?B\n?BW??\nBBB?W\nB?WB?\n?W??B\nB?B??\n''') == '''\n432\n'''\nassert solution('''\n5\nB?B?B\nB??WB\nWB?B?\nW?B??\n??WB?\n", "solution('''\n4\nBB?\n?BB\n?B?\n?WW\n''') == '0'\n\nassert solution('''\n5\nW??W\n?B?B\nWB?B\nW??W\n?B?B\n''') == '24'\n\nassert solution('''\n6\nB?BB?\n?B?B?\nB?B?B\n?B?B?\nB?B?B\n?B?B?\n''') == '0'\n\nassert solution('''\n6\nB?BWB\n?W?WB\nBW?BB\n?W?WB\nBW?BB\n?W?WB\n''') == '24'\n\nassert solution('''\n6\n?B?B?\nB?WB?\n?B?B?\nB?WB?\n?B?B?\nB?WB?\n''') == '24'\n\nassert solution('''\n4\n?W?\nWB?\nWB?\n?W?\n''') == '12'\n\nassert solution('''\n4\n?BB\nB?B\n?BB\nB?B\n''') == '4'\n\nassert solution('''\n4\n?W?\nWB?\nB?B\nW?W\n''') == '6'\n", "solution('''\n3\nW?\n??\n?B\n''') == '''\n4\n'''\nassert solution('''\n1\n??\n''') == '''\n2\n'''\nassert solution('''\n1\nW?\n''') == '''\n1\n'''\nassert solution('''\n2\nWW\nWW\n''') == '''\n0\n'''\nassert solution('''\n2\nBB\nBB\n''') == '''\n0\n'''\nassert solution('''\n1\nWW\n''') == '''\n0\n'''\nassert solution('''\n2\nBW\n?B\n''') == '''\n1\n'''\nassert solution('''\n3\nWB?\n?BB\nB??\n''') == '''\n4\n'''\nassert solution('''\n4\nWWWW\nWWWW\nWWWW\nWWWW\n''') == '''\n0\n'''\nassert solution('''\n4\nBBBB\nBBBB\nBBBB\nBBBB\n''') == '''\n0\n'''\nassert solution('''\n10\nB??B??B??B\n?B??B??B??\n??B??B??B?\nB??B??B??B\n?B??B??B??\n??B", "solution('''1\nW?''') == '1'\nassert solution('''2\nW?\n?W''') == '1'\nassert solution('''4\nWWWW\nWWWW\nWWWW\nWWWW''') == '0'\nassert solution('''4\nWWWW\nWWWW\nWWBB\nBBBB''') == '1'\nassert solution('''5\nB?B?B\nWWWWW\nWWWWW\nWWWWW\nWWWWW''') == '0'\nassert solution('''5\n?B?B?\nWWWWW\nWWWWW\nWWWWW\nWWWWW''') == '64'\nassert solution('''5\n?B?B?\n?W?W?\n?W?W?\n?W?W?\n?W?W?''') == '256'\nassert solution('''5\nWBWBW\nBWBWB\nWBWBW\nBWBWB\nWBWBW''') == '0'\nassert solution('''5\nWBWBW\nBWBWB\nWBWBW\nBWBWB\nWWBWW''') == '4'\nassert solution('''5\nWBWBW\nBWBWB\nWBWBW\nBWBWB\nBBBBB''') == '1'\nassert solution(''", "solution(\"example\") == \"example\"\n# stdin = sys.stdin.read()\n# print(solution(stdin))", "solution('''\n3\nWB\nWW\nB?\n''') == '3'\n\nassert solution('''\n3\nWB\nB?\n?W\n''') == '0'\n\nassert solution('''\n3\nWW\nWW\nWW\n''') == '0'\n\nassert solution('''\n3\nWB\nWB\nWB\n''') == '1'\n\nassert solution('''\n4\nBB?\n?B?\n??B\n?BB\n''') == '1'\n\nassert solution('''\n4\nW?B\nWBB\nWBB\n?BW\n''') == '2'\n\nassert solution('''\n4\nBWB\nWBB\nBBW\nWBB\n''') == '0'\n\nassert solution('''\n4\nB?B\nBBB\n?B?\nBB?\n''') == '1'\n\nassert solution('''\n4\nB?B\nBBB\n?BW\nBB?\n''') == '0'\n\nassert solution('''\n5\nB?B?\n?BB?\nB??B\n?B?B\n?B?B\n''') == '0'\n\nassert solution('''\n5\nB?B?\n?BB?\nB??B\n?B?B\n", "solution(testcase1) == '4'\nassert solution(testcase2) == '16'\nassert solution(testcase3) == '2'\nassert solution(testcase4) == '256'\n\n# test custom cases\nif __name__ == '__main__':\n    testcases = [\n        # testcase1,\n        # testcase2,\n        # testcase3,\n        # testcase4,\n    ]\n    for testcase in testcases:\n        print(solution(testcase))", "solution(stdin=\"\"\"4\nB?\n??\nW?\n??\n\"\"\") == \"19\"\n\nassert solution(stdin=\"\"\"5\n?B\n??\n??\n??\n?B\n\"\"\") == \"0\"\n\nassert solution(stdin=\"\"\"2\nBB\nBB\n\"\"\") == \"0\"\n\nassert solution(stdin=\"\"\"3\nB?\n?B\n?B\n\"\"\") == \"3\"\n\nassert solution(stdin=\"\"\"2\nWW\nWW\n\"\"\") == \"0\"\n\nassert solution(stdin=\"\"\"1\n??\n\"\"\") == \"2\"", "solution(\"\"\"5\nWB?W\n?B?W\nBBB?\nBWB?\n?BWB\"\"\") == \"\"\"8\"\"\", \"There are 8 valid ways\"\nassert solution(\"\"\"1\n??\"\"\") == \"\"\"0\"\"\", \"You have to color at least one cell\"\nassert solution(\"\"\"1\nWW\"\"\") == \"\"\"0\"\"\", \"You can't color both cells in the same way\"\nassert solution(\"\"\"1\nWB\"\"\") == \"\"\"1\"\"\", \"Only one possible coloring\"\nassert solution(\"\"\"3\n?B?\n?W?\nW??\"\"\") == \"\"\"0\"\"\", \"One cell has to be colored in one way\"\nassert solution(\"\"\"3\nWW?\nW?W\n?WB\"\"\") == \"\"\"6\"\"\", \"There are 6 valid ways\"\nassert solution(\"\"\"2\nWW\nWW\"\"\") == \"\"\"0\"\"\", \"You can't color both cells in the same way\"\nassert solution(\"\"\"1\nWB\"\"\") == \"\"\"1\"\"\", \"Only one possible coloring\"\nassert solution(\"\"\"3\n?W?\nB??\n?WB\"\"\") == \"\"\"0\"\"\", \"One cell has to be colored in one way\"\nassert solution(\"\"\"3\nBB?\n?WB\n?WB\"\"\") == \"\"\"3\"\"\", \"There are 3 valid ways\"\nassert solution(\"\"\"10\nW", "\"16\" == solution(\"\"\"\n3\nW?\n??\n??\n\"\"\")\n\nassert \"1\" == solution(\"\"\"\n3\nWB\nBW\nWB\n\"\"\")\n\nassert \"0\" == solution(\"\"\"\n3\nWB\nWB\nWB\n\"\"\")\n\nassert \"15\" == solution(\"\"\"\n3\n??\n??\n??\n\"\"\")\n\nassert \"0\" == solution(\"\"\"\n5\nB?B?\n??BB\nB?B?\nW?B?\n??WW\n\"\"\")\n\nassert \"8\" == solution(\"\"\"\n4\nWB?B\n?BWB\nW?BW\nBWB?\n\"\"\")\n\nassert \"3\" == solution(\"\"\"\n2\nB?\n?B\n\"\"\")\n\nassert \"210\" == solution(\"\"\"\n7\n??????\n??????\n??????\n??????\n??????\n??????\n??????\n\"\"\")\n\nassert \"120\" == solution(\"\"\"\n8\n?B?B???\n???????B\n??????W?\n???????B\n???????B\n?B??????\n???????B\n???????B\n\"\"\")\n\nassert \"10\" == solution(\"\"\"\n3\nB??\n?BW\n?B?\n\"\"\")\n\nassert \"120\" == solution(\"\"\"\n8\n?B?B???", "solution(\"\"\"\n2\nB?\n?W\n\"\"\") == \"6\"\n\n# submit solution\nimport sys\nfrom pathlib import Path\n\nout_path = Path(\".\") / \"out.txt\"\nout_path.write_text(solution(sys.stdin.read()))", "solution(open('test/test01.in').read()) == open('test/test01.out').read()\nassert solution(open('test/test02.in').read()) == open('test/test02.out').read()\nassert solution(open('test/test03.in').read()) == open('test/test03.out').read()\nassert solution(open('test/test04.in').read()) == open('test/test04.out').read()\nassert solution(open('test/test05.in').read()) == open('test/test05.out').read()\nassert solution(open('test/test06.in').read()) == open('test/test06.out').read()\nassert solution(open('test/test07.in').read()) == open('test/test07.out').read()\nassert solution(open('test/test08.in').read()) == open('test/test08.out').read()\nassert solution(open('test/test09.in').read()) == open('test/test09.out').read()\nassert solution(open('test/test10.in').read()) == open('test/test10.out').read()\nassert solution(open('test/test11.in').read()) == open('test/test11.out').read()\nassert solution(open"], "finish_reason": ["stop", "length", "length", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length"], "sum_logprob": [-93.48794857281997, -117.57339088691143, -153.85825767094, -231.124531369566, -9.892873201999999, -43.62103721209398, -17.143277957000002, -128.22828654618002, -126.78267538859194, -176.94463594679195, -79.41303270288, -56.385519915730406, -5.771181084999999, -83.40047469554008, -16.346965685246996, -100.8510383174039, -14.65241819163, -10.101450635, -42.533304172870004, -75.04817462363297, -54.0855227578, -19.670045881900002, -146.3637976171541, -152.69198795349988, -93.276538913887, -111.75655354571198, -175.34262707546398, -20.58741374909, -31.57733962960001, -5.787430510000001, -86.26040210880001, -67.87223475493998, -72.56454200405004, -15.542828516999998, -9.4047859674, -105.35019633356299, -9.004952511699999, -35.595803826559994, -154.27430360327335, -146.86377279686826, -80.97692627798531, -94.28963091861998, -19.78587944416, -129.882833743912, -59.11967829702001, -64.92261501849498, -174.65133194739494, -170.95616163034, -40.16207231023, -20.36338451190646], "mean_logprob": [-0.6874113865648529, -0.39191130295637133, -0.5128608589031334, -0.77041510456522, -0.7609902463076923, -0.41543844963899046, -0.9022777872105263, -0.4274276218206, -0.4226089179619733, -0.5898154531559734, -0.6456344122185366, -0.4239512775618827, -0.6412423427777778, -0.27800158231846667, -0.29721755791358184, -0.33617012772468, -0.61051742465125, -0.9183136940909091, -0.3349079068729921, -0.39499039275596315, -1.1267817241208333, -0.6556681960633334, -0.4878793253905133, -0.5089732931783333, -0.3109217963796233, -0.37252184515237335, -0.58447542358488, -0.7099108189341379, -0.8771483230444445, -0.6430478344444445, -0.8215276391314286, -0.7298089758595699, -0.24188180668016668, -1.4129844106363636, -0.6717704262428572, -0.5064913285267452, -0.8186320465181819, -0.5650127591517461, -0.5142476786775777, -0.4895459093228943, -0.2699230875932843, -0.31429876972873333, -0.6382541756180645, -0.43294277914637336, -0.4926639858085, -0.4604440781453546, -0.5821711064913166, -0.5698538721011334, -0.5906187104445588, -0.06787794837302166]}
{"prompt": "'''\nMonocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n1\n2 3\n3 2\n\"\"\") == \"<\"\n\nassert solution(\"\"\"\n1\n4 1\n4 2\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n1\n4 2\n4 2\n\"\"\") == \"=\"\n\nassert solution(\"\"\"\n1\n3 0\n3 0\n\"\"\") == \"=\"\n\nassert solution(\"\"\"\n1\n2 0\n1 1\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n1\n1 1\n2 0\n\"\"\") == \"<\"\n\nassert solution(\"\"\"\n1\n1 0\n0 1\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n1\n0 1\n1 0\n\"\"\") == \"<\"\n\nassert solution(\"\"\"\n1\n0 0\n0 0\n\"\"\") == \"=\"\n\nassert solution(\"\"\"\n1\n0 2\n0 2\n\"\"\") == \"=\"\n\nassert solution(\"\"\"\n1\n0 1\n0 2\n\"\"\") == \"<\"\n\nassert solution(\"\"\"\n1\n0 2\n0 1\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n1\n1 0\n0 0\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n1\n0 0\n1 0\n\"\"\") == \"<\"\n\nassert solution(\"\"\"\n1\n3 2\n3 2\n\"\"\") == \"=\"\n\nassert", "solution(r'''\n3\n12 0\n6 0\n6 0\n12 0\n2 3\n2 3\n''') == r'''\n=\n<\n=\n'''", "solution(\"1\\n1000000 1000000\\n1000000 1000000\") == \"=\"\nassert solution(\"1\\n1000000 1000000\\n1000000 1\") == \">\"\nassert solution(\"1\\n1000000 1000000\\n1 0\") == \"<\"\nassert solution(\"1\\n1 0\\n1000000 1000000\") == \">\"\nassert solution(\"1\\n1 0\\n1000000 1\") == \">\"\nassert solution(\"1\\n1 0\\n1 0\") == \"=\"\nassert solution(\"1\\n1 1\\n1 1\") == \"=\"\nassert solution(\"1\\n1 2\\n1 2\") == \"=\"\nassert solution(\"1\\n1000000 1\\n1000000 2\") == \"<\"\nassert solution(\"1\\n1000000 2\\n1000000 1\") == \">\"\nassert solution(\"1\\n1000000 3\\n1000000 1\") == \">\"\nassert solution(\"1\\n1000000 1\\n1000000 3\") == \"<\"\nassert solution(\"1\\n1000000 1\\n1000000 5\") == \"<\"\nassert solution(\"1\\n1000000 5\\n1000000 1\") == \">\"\nassert solution(\"1\\n1000000 1\\n1000000 1000000\") == \"<\"\nassert solution(\"1\\n1000000 1000000\\n1000000 1\") == \">\"", "solution('''\n1\n1 0\n1 1\n''') == '<'\n\nassert solution('''\n1\n1 1\n1 0\n''') == '>'\n\nassert solution('''\n1\n1 0\n1 0\n''') == '='\n\nassert solution('''\n1\n1 1\n1 1\n''') == '='\n\nassert solution('''\n1\n10 0\n10 1\n''') == '<'\n\nassert solution('''\n1\n10 1\n10 0\n''') == '>'\n\nassert solution('''\n1\n10 0\n10 0\n''') == '='\n\nassert solution('''\n1\n10 1\n10 1\n''') == '='\n\nassert solution('''\n1\n100 0\n100 1\n''') == '<'\n\nassert solution('''\n1\n100 1\n100 0\n''') == '>'\n\nassert solution('''\n1\n100 0\n100 0\n''') == '='\n\nassert solution('''\n1\n100 1\n100 1\n''') == '='\n\nassert solution('''\n1\n1000 0\n1000 1\n''') == '<'\n\nassert solution('''\n1\n1000 1\n1000 0\n''') == '>'\n", "solution(r'''\n5\n1 1\n1 2\n1 1\n1 0\n1 1\n1 0\n2 0\n2 0\n2 0\n1 1\n1 1\n1 3\n2 3\n2 2\n''') == r'''\n<\n=\n>\n=\n<\n'''", "solution('''2\n1 100\n1 1\n1 1\n1 100''') == '''=\n>'''\n\n# run the solution in local\nprint(solution('''1\n1 1\n1 1'''))", "solution('''\n4\n1 0\n1 0\n1 1\n1 0\n4 1\n4 0\n4 1\n4 2\n''') == '''\n=\n<\n>\n>\n'''", "solution(example_str) == example_sol\n\n# check if solution handles extreme inputs\n# check if solution works on multiple lines\n\nsolution(stdin)", "solution('''\n3\n1 2\n3 0\n3 0\n3 0\n2 1\n2 0\n''') == '''\n>\n=\n<\n'''", "solution(str(_INPUT_)) == str(_OUTPUT_)", "solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"", "solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n\n'''\n\nassert solution('''\n\n''') == '''\n", "solution(\"\"\"\n4\n1 2\n1 3\n1 1\n1 1\n1 2\n1 1\n1 1\n2 1\n\"\"\") == \"\"\"\n=\n<\n=\n>\n\"\"\"", "solution(\"\") == \"\"\n\n# check the performance of solution\nassert solution(\"\") == \"\"", "solution(\"1\\n1 1\\n1 1\") == \"=\", \"Failed by 1 1 and 1 1 testcase.\"\nassert solution(\"1\\n1 0\\n1 1\") == \"<\", \"Failed by 1 0 and 1 1 testcase.\"\nassert solution(\"1\\n1 1\\n1 0\") == \">\", \"Failed by 1 1 and 1 0 testcase.\"\nassert solution(\"1\\n1000000 1\\n1000000 1\") == \"=\", \"Failed by 1000000 1 and 1000000 1 testcase.\"\nassert solution(\"1\\n1000000 1\\n1000000 0\") == \">\", \"Failed by 1000000 1 and 1000000 0 testcase.\"\nassert solution(\"1\\n1000000 0\\n1000000 1\") == \"<\", \"Failed by 1000000 0 and 1000000 1 testcase.\"\nassert solution(\"1\\n1000000 0\\n1000000 0\") == \"=\", \"Failed by 1000000 0 and 1000000 0 testcase.\"\nassert solution(\"1\\n0 1\\n0 1\") == \"=\", \"Failed by 0 1 and 0 1 testcase.\"\nassert solution(\"1\\n0 1\\n0 0\") == \">\", \"Failed by 0 1 and 0 0 testcase.\"\nassert solution(\"1\\n0 0\\n0 1\") == \"<\", \"", "solution('''\n4\n11 0\n11 1\n11 1\n11 0\n2 3\n5 3\n1000 0\n999 0\n''') == '''\n=\n>\n=\n<\n'''", "solution(stdin_1) == stdout_1\nassert solution(stdin_2) == stdout_2\nassert solution(stdin_3) == stdout_3\nassert solution(stdin_4) == stdout_4\nassert solution(stdin_5) == stdout_5\n\n# display feedback\nprint(\"Correct!\")", "solution(stdin=\"3\\n1 0\\n1 0\\n2 0\\n2 0\\n2 0\\n10 0\") == \"=\\n=\\n>\"\n\n# auto-generate testcases\nif __name__ == '__main__':\n    testcases = [(stdin, solution(stdin)) for stdin in stdins]\n    # print(testcases)\n    assert all(testcases)", "solution(\"\"\"5\n8 0\n10 0\n5 1\n5 0\n5 2\n6 0\n5 1\n5 0\n5 2\n6 0\n4 1\n4 0\n4 2\n6 0\n4 1\n4 0\n4 2\n6 0\n4 1\n4 0\n4 2\n6 0\n4 1\n4 0\n4 2\n6 0\n\"\"\") == \"\"\"=\n<\n=\n=\n<\n\"\"\"", "solution('''4\n1 0\n1 0\n1 1\n1 0\n1 1\n1 1\n1000000 1\n1000000 1''') == '''=\n>\n=\n='''\n\n# print(solution(sys.stdin.read()))", "solution(\"2\\n1 3\\n1 2\\n3 0\\n3 0\") == \">\\n=\", \"your solution is not correct\"\n\n# check the performance of solution\nassert solution(\"100000\\n1 3\\n1 2\\n3 0\\n3 0\") == \">\\n=\", \"your solution is not correct\"\n\n# check the correctness of solution\nassert solution(\"2\\n1 3\\n1 2\\n3 0\\n3 0\") == \">\\n=\", \"your solution is not correct\"\n\n# check the performance of solution\nassert solution(\"100000\\n1 3\\n1 2\\n3 0\\n3 0\") == \">\\n=\", \"your solution is not correct\"\n\n# check the correctness of solution\nassert solution(\"2\\n1 3\\n1 2\\n3 0\\n3 0\") == \">\\n=\", \"your solution is not correct\"\n\n# check the performance of solution\nassert solution(\"100000\\n1 3\\n1 2\\n3 0\\n3 0\") == \">\\n=\", \"your solution is not correct\"\n\n# check the correctness of solution\nassert solution(\"2\\n1 3\\n1 2\\n3 0\\n3 0\") == \">\\n=\", \"your solution is not correct", "solution('''\n1\n123 0\n123 0\n''') == '='\n\nassert solution('''\n1\n2 1\n1 2\n''') == '>'\n\nassert solution('''\n1\n1 1\n1 2\n''') == '<'\n\nassert solution('''\n1\n1 2\n1 1\n''') == '>'\n\nassert solution('''\n1\n1 1\n1 1\n''') == '='\n\nassert solution('''\n1\n1 2\n1 3\n''') == '<'\n\nassert solution('''\n1\n1 3\n1 2\n''') == '>'\n\nassert solution('''\n1\n1 9\n1 10\n''') == '<'\n\nassert solution('''\n1\n1 10\n1 9\n''') == '>'\n\nassert solution('''\n1\n1 2\n1 11\n''') == '<'\n\nassert solution('''\n1\n1 11\n1 2\n''') == '>'\n\nassert solution('''\n1\n2 3\n1 3\n''') == '>'\n\nassert solution('''\n1\n1 3\n2 3\n''') == '<'\n\nassert solution('''\n1\n1 9\n1 11\n''') ==", "solution(\"\"\"\n2\n10 0\n10 2\n10 0\n10 1\n\"\"\") == \"\"\"\n<\n=\n\"\"\", \"testcase 1 failed\"\nassert solution(\"\"\"\n3\n1 0\n1 1\n4 0\n4 1\n4 0\n4 0\n\"\"\") == \"\"\"\n<\n<\n=\n\"\"\", \"testcase 2 failed\"\nassert solution(\"\"\"\n2\n2 0\n2 1\n2 0\n1 2\n\"\"\") == \"\"\"\n=\n>\n\"\"\", \"testcase 3 failed\"\n\n# test speed\nimport timeit\nTIMEIT_NUMBER = 100\nprint(f\"time taken by solution: {timeit.timeit(lambda: solution(test_data), number=TIMEIT_NUMBER)}\")\n\n# get input for execution\ntry:\n    # expect the input to be in a file named 'input' in the current directory\n    with open(\"input\", \"r\") as file:\n        input_data = file.read()\nexcept FileNotFoundError:\n    # if the file doesn't exist, ask for input from stdin\n    input_data = input()\n\n# execute & print\nprint(solution(input_data))", "solution(\"1\\n4 2\\n4 1\") == \"=\"\nassert solution(\"2\\n1 0\\n1 1\") == \"<\"\nassert solution(\"2\\n1 0\\n100 2\") == \"<\"\nassert solution(\"2\\n1 0\\n100 1\") == \">\"\nassert solution(\"2\\n1 1\\n1 0\") == \">\"\nassert solution(\"2\\n111 100\\n111 101\") == \"<\"\nassert solution(\"2\\n1000000 1\\n1000000 0\") == \">\"\nassert solution(\"1\\n1000000 1\\n1000000 1\") == \"=\"\n\nprint(\"Congratulations! All tests have been passed!\")", "solution(\"1\\n1234 0\\n1234 0\") == \"=\", \"Testcase 1 failed\"\nassert solution(\"1\\n123 4\\n1234 0\") == \"<\", \"Testcase 2 failed\"\nassert solution(\"1\\n12340 0\\n1234 0\") == \">\", \"Testcase 3 failed\"\nassert solution(\"1\\n1234 5\\n12340 0\") == \">\", \"Testcase 4 failed\"\nassert solution(\"1\\n1234 0\\n1234 5\") == \"<\", \"Testcase 5 failed\"\nassert solution(\"1\\n10 4\\n100 3\") == \"<\", \"Testcase 6 failed\"\nassert solution(\"1\\n100 5\\n100 3\") == \">\", \"Testcase 7 failed\"\nassert solution(\"1\\n1000000 0\\n1000000 0\") == \"=\", \"Testcase 8 failed\"\nassert solution(\"1\\n0 1000000\\n1000000 0\") == \"<\", \"Testcase 9 failed\"\nassert solution(\"1\\n123456789 9\\n987654321 9\") == \">\", \"Testcase 10 failed\"\nassert solution(\"4\\n1 2\\n1 2\\n1 2\\n1 2\\n2 2\\n2 2\\n2 2\\n2 2\") == \"=\\n=\\n=", "solution('''\n3\n0 4\n0 5\n100 0\n100 0\n100 100\n100 100\n''') == '''\n=\n=\n'''", "solution(r'''\n2\n2 1\n2 0\n2 1\n1 2\n''') == r'''\n<\n>\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n2 1\n2 0\n2 1\n2 1\n''') == r'''\n<\n=\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n2 1\n2 0\n2 1\n2 1\n''') == r'''\n<\n=\n'''\n\n# check the correctness of solution\nassert solution(r'''\n5\n1234 1\n432 2\n4 1\n4 0\n4 2\n4 3\n''') == r'''\n<\n>\n=\n<\n>\n'''", "solution(\"\"\"6\n1 0\n1 0\n1 0\n1 1\n1 1\n1 2\n1 1\n1 0\n0 0\n0 0\n0 0\n0 0\n1 1\n1 0\n0 1\n1 0\n1 1\n\"\"\") == \"\"\">\n=\n<\n>\n<\n=\"\"\"\nprint(\"passed\")", "solution('''\n6\n1 1\n10 0\n10 1\n1 10\n1 1\n1 1\n100000 1\n100000 0\n12345678901234567890 1\n12345678901234567890 1\n\n''') == '''\n=\n<\n>\n=\n=\n=\n'''", "solution(\"\"\"3\n3 5\n3 2\n900 999\n2 3\n1000000000 1\n1000000000 2\"\"\") == \"\"\"=\n>\n=\"\"\"", "solution('''\n1\n20 1\n1 20\n''') == '>'\n\nassert solution('''\n1\n2 2\n2 3\n''') == '<'\n\nassert solution('''\n1\n2 2\n2 2\n''') == '='\n\nassert solution('''\n1\n10 7\n50 0\n''') == '>'\n\nassert solution('''\n1\n10 0\n10 0\n''') == '='\n\nassert solution('''\n1\n10 0\n100 0\n''') == '<'\n\nassert solution('''\n1\n100 0\n100 0\n''') == '='\n\nassert solution('''\n1\n123456 0\n654321 0\n''') == '>'\n\nassert solution('''\n1\n100000 0\n100 0\n''') == '<'\n\nassert solution('''\n1\n100 0\n100000 0\n''') == '>'\n\nassert solution('''\n1\n1000000 0\n1000000 0\n''') == '='\n\nassert solution('''\n1\n1000000 1\n1000000 0\n''') == '>'\n\nassert solution('''\n1\n1000000 0\n1000000 1\n''') == '<'\n\nassert solution('''\n1\n", "solution('''\n5\n1 0\n2 0\n5 0\n1 2\n5 0\n''') == '''\n<\n>\n=\n<\n>\n'''\nassert solution('''\n5\n1 0\n3 0\n3 0\n1 0\n3 0\n''') == '''\n<\n=\n>\n<\n=\n'''\nassert solution('''\n10\n1 2\n2 1\n2 2\n5 1\n5 2\n5 3\n7 1\n7 2\n7 3\n7 4\n''') == '''\n<\n>\n=\n<\n>\n=\n<\n>\n=\n<\n'''\nassert solution('''\n1\n1000000000000000 5\n1000000000000000 7\n''') == '''\n<\n>\n'''\nassert solution('''\n1\n1000000000000000 5\n2 3\n''') == '''\n=\n'''\nassert solution('''\n1\n1000000000000000 5\n200000000000000000000 5\n''') == '''\n<\n>\n'''\nassert solution('''\n1\n1000000000000000 5\n200000000000000000000 7\n''') == '''\n<\n>\n'''\nassert solution('''\n1\n1000000000000000 5\n1000000000000000 5\n''') == '''\n=\n'''\nassert", "solution(\"\"\"4\n4 1\n4 2\n4 2\n4 1\n5 0\n1 1\n5 0\n1 1\n5 0\n5 1\n5 0\n5 1\"\"\") == \"\"\"=\n<\n=\n>\"\"\", 'test1'\n\nassert solution(\"\"\"6\n1 0\n1 0\n2 0\n2 0\n2 0\n2 0\n2 0\n2 0\n2 0\n2 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n2 0\n2 0\n2 0\n2 0\n2 0\n2 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1", "solution(\"\") == \"\", \"The input data was not processed correctly\"\nassert solution(\"\") == \"\", \"The input data was not processed correctly\"\nassert solution(\"\") == \"\", \"The input data was not processed correctly\"\nassert solution(\"\") == \"\", \"The input data was not processed correctly\"\nassert solution(\"\") == \"\", \"The input data was not processed correctly\"\n\n# submit the answer\nans_1 = solution(input())\nprint(ans_1)\n\n# test results\nans_2 = solution(test_data)\nprint(ans_2)", "solution(\"\"\"\") == \"\", \"case 0 failed\"\n\n# check if performance is enough\nimport timeit\nassert timeit.timeit(solution, number=1000) < 1, \"case 1 failed\"\nassert timeit.timeit(solution, number=2000) < 2, \"case 2 failed\"\nassert timeit.timeit(solution, number=3000) < 3, \"case 3 failed\"\nassert timeit.timeit(solution, number=4000) < 4, \"case 4 failed\"\nassert timeit.timeit(solution, number=5000) < 5, \"case 5 failed\"\nassert timeit.timeit(solution, number=6000) < 6, \"case 6 failed\"\nassert timeit.timeit(solution, number=7000) < 7, \"case 7 failed\"\nassert timeit.timeit(solution, number=8000) < 8, \"case 8 failed\"\nassert timeit.timeit(solution, number=9000) < 9, \"case 9 failed\"\nassert timeit.timeit(solution, number=10000) < 10, \"case 10 failed\"\nassert timeit.timeit(solution, number=20000) < 20, \"case 20 failed\"\nassert timeit.timeit(solution, number=30000) < 30, \"", "solution('''\n1\n12345 4\n12 2\n''') == '>'\n\nassert solution('''\n1\n12345 4\n12345 4\n''') == '='\n\nassert solution('''\n1\n12345 0\n12345 4\n''') == '<'\n\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  ===========================================\n#  =================================", "solution(\"2\\n3 0\\n2 1\\n2 1\\n2 0\") == \"<\\n=\"", "solution('''\n2\n2 1\n1 2\n1 1\n1 2\n''') == '''\n<\n>\n'''\n\n# check that solution can handle multiple test cases\nassert solution('''\n5\n5 0\n1 0\n5 0\n5 0\n5 0\n6 0\n5 0\n5 1\n5 0\n5 0\n''') == '''\n=\n<\n=\n=\n>\n'''", "solution(\"\"\"\n1\n123 1\n1234 1\n\"\"\") == \"<\"\n\nassert solution(\"\"\"\n1\n1234 1\n123 1\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n1\n1234 1\n1234 1\n\"\"\") == \"=\"\n\nassert solution(\"\"\"\n1\n1234 5\n123 1\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n1\n1234 1\n123 5\n\"\"\") == \"<\"\n\nassert solution(\"\"\"\n1\n1 10\n1 11\n\"\"\") == \"<\"\n\nassert solution(\"\"\"\n1\n1 11\n1 10\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n1\n1 10\n1 10\n\"\"\") == \"=\"\n\nassert solution(\"\"\"\n2\n10 10\n100 1\n100 1\n110 1\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n2\n10 10\n100 1\n100 1\n110 1\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n2\n10 10\n100 1\n100 1\n110 1\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n2\n10 10\n100 1\n100 1\n110 1\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n2\n10 10\n100 1\n100 1\n110 1\n\"\"\") == \">\"\n\nassert solution(\"\"\"\n", "solution(test_case) == '<'", "solution(\"\") == \"\"", "solution('''5\n5 1\n8 1\n5 2\n8 1\n5 1\n1 1\n5 2\n6 1\n5 1\n2 1\n''') == '''=\n>\n=\n<\n=\n'''", "solution('''\n4\n10 1\n10 2\n11 2\n11 3\n10 1\n10 2\n10 1\n10 2\n9 0\n9 1\n''') == '''\n>\n<\n=\n>\n'''", "solution(stdin='2\\n1 1\\n2 1\\n1 0\\n1 1') == '<\\n=', 'Failed to solve the problem'\n\n# get input & run solution\nstdin = ''.join(open('test/testcase.txt', 'r').readlines())\nstdout = solution(stdin)\n\n# print result\nprint(stdout)", "solution(\"\"\"\n\n\"\"\") == \"\", \"\"\n\n# cast to standard input\nimport sys\nif len(sys.argv) > 1:\n    f = open(sys.argv[1])\n    sys.stdin = f\n\n# testcase\nprint(solution(sys.stdin.read()))", "solution('''3\n12345 2\n54321 0\n98765 1\n12345 0\n12345 0\n12345 0''') == '''<\n=\n>'''", "solution('''\n3\n12 2\n12 1\n15 3\n15 2\n3 0\n3 3\n''') == '''\n=\n>\n<\n'''", "solution(\"\"\"2\n1 0\n2 0\n2 0\n2 0\"\"\") == \"\"\"<\n=\"\"\", \"Example #1\"\n\n# another example\nassert solution(\"\"\"3\n1 1\n1 2\n1 2\n1 1\n1 0\n2 0\"\"\") == \"\"\"=\n<\n>\"\"\", \"Example #2\"\n\nprint(\"all done\")", "solution(\"\"\"2\n2 0\n2 0\n1 1\n2 0\"\"\") == \"\"\"=\n<\"\"\"", "solution(\"\"\"\n5\n5 0\n5 0\n5 0\n6 0\n100 0\n100 0\n100 0\n100 2\n1 1\n1 1\n2 2\n2 2\n10 0\n10 1\n\"\"\") == \"\"\"\n=\n=\n<\n=\n>\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n1 2\n1 3\n1 3\n1 2\n1 2\n1 2\n1 0\n\"\"\") == \"\"\"\n<\n>\n=\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n123456789 10\n123456789 10\n\"\"\") == \"\"\"\n=\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n5 0\n5 0\n5 0\n6 0\n100 0\n100 0\n100 0\n100 2\n1 1\n1 1\n2 2\n2 2\n10 0\n10 1\n\"\"\") == \"\"\"\n=\n=\n<\n=\n>\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n1 2\n1 3\n1 3\n1 2\n1 2\n1 2\n1 0\n\"\"\") == \"\"\"\n<\n>\n=\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n123456789 10\n123456789 10\n"], "finish_reason": ["length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-79.35562792292997, -32.73763585390001, -65.98261007970596, -32.364144994026454, -50.13227607121, -39.85317976329999, -27.4256356046, -44.87521189, -24.535181365600003, -16.38636855841, -10.515660865, -17.404933964619982, -27.499137476599994, -10.742271771999999, -54.73825953042497, -38.89147326543001, -25.808905372679998, -70.34715692964001, -61.186229197400046, -32.91587126152, -50.23281836395055, -69.91851624259898, -138.174949439085, -85.340641843794, -109.48708531329191, -32.76438947609999, -80.45686257259702, -56.483039764440015, -54.568454184799975, -47.29158776389999, -97.16382861113505, -134.18759718053695, -80.92017114771011, -64.06675388571998, -57.09236811612601, -59.18403220577002, -19.34396442543, -64.18368079138, -79.66079312139598, -12.947168637, -5.93810094, -47.79699098075999, -42.70846871289999, -68.74720879549999, -41.54805249904998, -35.7383044225, -34.5885313562, -55.231984475600015, -16.197981716599998, -103.92458623021206], "mean_logprob": [-0.2645187597431, -0.7794675203309523, -0.21994203359902, -0.10788048331342166, -0.7161753724458572, -0.7380218474685185, -0.5713674084291667, -1.2128435645945945, -0.61337953414, -0.963904032847647, -0.8088969896153846, -0.058016446548733336, -0.6110919439244444, -0.5115367510476191, -0.18246086510141665, -0.810239026363125, -0.3226113171585, -0.7178281319351021, -0.6180427191656566, -0.5309011493793548, -0.167442727879835, -0.23306172080866333, -0.5155781695488246, -0.5614515910775921, -0.36495695104430664, -0.8622207756868421, -0.4571412646170284, -0.7149751868916456, -0.7086812231792208, -1.2781510206459459, -0.32387942870378333, -0.44729199060179, -0.2697339038257, -0.49664150299007753, -0.19030789372042, -0.19728010735256665, -0.7439986317473076, -0.6418368079138, -0.26553597707132, -1.1770153306363635, -0.98968349, -0.8851294626066667, -0.7908975687574075, -0.7638578755055555, -0.5614601689060811, -0.8311233586627907, -0.864713283905, -0.6735607862878049, -0.647919268664, -0.34641528743404]}
{"prompt": "'''\nn players are playing a game. \n\nThere are two different maps in the game. For each player, we know his strength on each map. When two players fight on a specific map, the player with higher strength on that map always wins. No two players have the same strength on the same map. \n\nYou are the game master and want to organize a tournament. There will be a total of n-1 battles. While there is more than one player in the tournament, choose any map and any two remaining players to fight on it. The player who loses will be eliminated from the tournament. \n\nIn the end, exactly one player will remain, and he is declared the winner of the tournament. For each player determine if he can win the tournament.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The description of test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of players.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9, a_i \u2260 a_j for i \u2260 j), where a_i is the strength of the i-th player on the first map. \n\nThe third line of each test case contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^9, b_i \u2260 b_j for i \u2260 j), where b_i is the strength of the i-th player on the second map. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case print a string of length n. i-th character should be \"1\" if the i-th player can win the tournament, or \"0\" otherwise.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n5\n1 2 3 4 5\n5 4 3 2 1\n''') == '11000'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n2 3 1 4 5\n''') == '10001'\n\nassert solution('''\n1\n5\n9 2 8 1 5\n1 7 4 8 5\n''') == '00000'\n\nassert solution('''\n1\n5\n9 7 3 6 1\n3 5 9 7 1\n''') == '11000'\n\nassert solution('''\n1\n6\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '100000'\n\nassert solution('''\n1\n5\n1 1 1 1 1\n1 1 1 1 1\n''') == '11000'\n\nassert solution('''\n1\n5\n1 1 1 1 1\n1 1 1 1 1\n''') == '11000'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10001'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n2 3 4 5 1\n''') == '10001'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n3 4 5 1 2", "solution('''3\n3\n3 1 2\n3 2 1\n2\n2 1\n1 2\n2\n2 1\n2 1\n''') == '''010\n00\n00'''", "solution('''\n1\n3\n1 2 3\n3 2 1\n''') == '''\n101\n'''\nassert solution('''\n2\n2\n1 2\n2 1\n2\n2 1\n1 2\n''') == '''\n10\n01\n'''\n\n# print the result\nprint(solution(stdin))", "solution(\"\"\"\n3\n3\n2 3 1\n3 1 2\n3\n1 2 3\n1 2 3\n3\n1 2 3\n2 3 1\n\"\"\") == \"\"\"\n001\n010\n010\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n5 4 5 1 5\n1 4 1 5 5\n\"\"\") == \"\"\"\n10110\n\"\"\"", "solution(r'''\n1\n5\n1 5 4 2 3\n5 1 2 3 4\n''') == r'''\n10000\n'''\nassert solution(r'''\n2\n3\n1 2 3\n3 2 1\n3\n3 2 1\n1 2 3\n''') == r'''\n001\n100\n'''\n\n# show the execution time\nimport time\nstart = time.time()\nprint(solution(r'''\n2\n3\n1 2 3\n3 2 1\n3\n3 2 1\n1 2 3\n'''))\nend = time.time()\nprint(end - start)", "solution('''3\n3\n1 2 3\n3 2 1\n2\n1 2\n2 1\n4\n4 2 7 9\n3 6 4 1''') == '''1\n1\n1'''\n\n# get the output from the program and check correctness\nfrom sys import stdin\n\nif __name__ == '__main__':\n    output = solution(stdin.read())\n    print(output)\n    print('')\n    print('Accepted answer is:')\n    print('')\n    print('''1\n1\n1''')", "solution('''\n\n''') == '''\n\n'''", "solution('''\n1\n3\n1 2 3\n3 2 1\n''') == '101'\nassert solution('''\n1\n4\n1 2 3 4\n4 3 2 1\n''') == '1100'\nassert solution('''\n2\n2\n1 2\n2 1\n1\n1\n1\n1\n''') == '01'\n\n# submit the solution\nprint(solution(stdin))", "solution(test) == test_out\n\n# get the input\nstdin = open('input.txt', 'r')\ninput = stdin.read()\n\n# solve the problem\nsolution = solution(input)\n\n# print the solution\nprint(solution)", "solution(\"sample_input.txt\") == \"sample_output.txt\"", "solution('''\n1\n4\n1 2 3 4\n4 3 2 1\n''') == '1100'\n\n# check the performance of solution\n# import timeit\n# assert timeit.timeit(lambda: solution('''\n# 1\n# 4\n# 1 2 3 4\n# 4 3 2 1\n# '''), number=10000) < 0.5", "solution(input_str) == output_str", "solution('''\n2\n4\n1 2 4 3\n1 2 3 4\n4\n1 2 3 4\n4 3 2 1\n''') == '''\n1001\n0011\n'''", "solution(r'''2\n2\n1 2\n1 2\n2\n1 2\n2 1\n''') == r'''10\n01\n'''", "solution('''\n2\n3\n1 2 3\n2 3 1\n2\n2 3\n3 2\n''') == '''\n101\n10\n'''", "solution(\"\"\"\n4\n2\n1 2\n2 1\n2\n1 1\n2 2\n2\n2 1\n1 2\n2\n1 1\n1 1\n\"\"\") == \"\"\"\n00\n11\n10\n01\n\"\"\"", "solution('''\n5\n5\n5 1 2 3 5\n2 1 3 4 2\n5\n5 1 2 3 5\n2 1 2 4 2\n5\n5 1 2 3 5\n2 1 2 4 2\n1\n1\n1\n1\n1\n1\n1\n1\n''') == '''\n00100\n00010\n01000\n1\n'''", "solution('''\n1\n3\n1 2 3\n4 5 6\n''') == '010'\n\nassert solution('''\n1\n2\n2 3\n4 5\n''') == '10'\n\n# output the result\nprint(solution(stdin.read()))", "solution('''\n3\n3\n3 1 2\n1 2 3\n3\n3 2 1\n1 2 3\n3\n3 1 2\n2 1 3\n''') == '''\n101\n111\n110\n''', 'Failed test #1'\n\nassert solution('''\n1\n3\n3 1 2\n1 2 3\n''') == '''\n101\n''', 'Failed test #2'\n\nassert solution('''\n1\n3\n1 3 2\n2 1 3\n''') == '''\n110\n''', 'Failed test #3'\n\nassert solution('''\n1\n3\n1 2 3\n3 2 1\n''') == '''\n111\n''', 'Failed test #4'\n\nassert solution('''\n1\n3\n2 3 1\n3 1 2\n''') == '''\n101\n''', 'Failed test #5'\n\nassert solution('''\n1\n3\n2 1 3\n1 3 2\n''') == '''\n110\n''', 'Failed test #6'\n\nassert solution('''\n1\n3\n2 3 1\n2 1 3\n''') == '''\n101\n''', 'Failed test #7'\n\nassert solution('''\n1\n3\n3 2 1\n3 1 2\n", "solution(\"\"\"\n2\n2\n1 2\n2 1\n3\n1 2 3\n3 2 1\n\"\"\") == \"\"\"\n10\n010\n\"\"\"\n\n# print(solution(sys.stdin.read()))\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a_in = list(map(int, input().split()))\n    b_in = list(map(int, input().split()))\n    a_in.sort()\n    b_in.sort()\n    answers = []\n    for i in range(n):\n        if a_in[i] < b_in[n-i-1]:\n            answers.append('1')\n        else:\n            answers.append('0')\n    print(''.join(answers))", "solution('''\n3\n3\n1 2 3\n1 2 3\n3\n1 2 3\n3 2 1\n2\n2 3\n3 2\n''') == '''\n100\n010\n10\n'''", "solution(r'''\n1\n4\n1 2 3 4\n5 6 7 8\n''') == r'''\n1110\n'''\n\n# input data, solve the problem\n# print(solution(sys.stdin.read()))", "solution('''\n1\n2\n2 1\n1 2\n''') == '''\n01\n'''\n\n# run the solution\nfrom io import StringIO\nimport sys\nstdin = sys.stdin\n\n# The sys.stdin.readline method will only work when run on local computer\n# The sys.stdin.readline method will not work when run on codesignal.com\n# Hence, use use solution() method to run the solution on codesignal.com\n#sys.stdin = StringIO(stdin.read())\n\nprint(solution(stdin))", "solution('''\n2\n3\n10 20 30\n20 10 30\n5\n10 20 30 40 50\n20 10 30 40 50\n''') == '''\n100\n100\n'''", "(solution(\n'''\n1\n4\n1 2 4 8\n4 2 1 8\n''') == '1100')\n\nassert (solution(\n'''\n1\n2\n1 2\n2 1\n''') == '10')\n\nassert (solution(\n'''\n1\n3\n1 2 3\n3 2 1\n''') == '001')\n\nassert (solution(\n'''\n1\n3\n1 2 3\n3 1 2\n''') == '110')", "solution(\"1\\n5\\n1 4 2 5 3\\n5 4 2 1 3\") == \"01000\"\nassert solution(\"2\\n5\\n1 4 2 5 3\\n5 4 2 1 3\\n3\\n5 7 4\\n3 5 6\") == \"01000\\n101\"", "(solution(stdin=\"\"\"1\n2\n1 3\n2 4\n\"\"\") == \"10\")\n\nassert (solution(stdin=\"\"\"1\n3\n1 2 3\n2 3 4\n\"\"\") == \"100\")\n\nassert (solution(stdin=\"\"\"1\n3\n2 3 1\n3 4 2\n\"\"\") == \"101\")\n\nassert (solution(stdin=\"\"\"1\n3\n3 4 2\n1 2 3\n\"\"\") == \"101\")\n\nassert (solution(stdin=\"\"\"1\n2\n1 2\n2 3\n\"\"\") == \"10\")\n\nassert (solution(stdin=\"\"\"1\n2\n2 3\n1 2\n\"\"\") == \"01\")\n\nassert (solution(stdin=\"\"\"1\n5\n5 2 7 1 8\n8 4 6 9 1\n\"\"\") == \"11001\")\n\nassert (solution(stdin=\"\"\"1\n5\n5 8 4 2 1\n1 4 3 5 8\n\"\"\") == \"10101\")\n\nassert (solution(stdin=\"\"\"1\n5\n8 4 2 1 5\n1 5 8 2 4\n\"\"\") == \"01101\")\n\nassert (solution(stdin=\"\"\"1\n5\n1 8 4 2 5\n5 1 8 2 4\n\"\"\") == \"01011", "solution('''1\n3\n1 2 4\n3 2 4\n''') == '100'\n\n# check time and memory used\nimport time\nimport memory_profiler\n\nt1 = time.process_time()\nm1 = memory_profiler.memory_usage()\n\n# do something\nprint(solution('''1\n3\n1 2 4\n3 2 4\n'''))\n\nt2 = time.process_time()\nm2 = memory_profiler.memory_usage()\n\n# print time and memory used\nprint('Took %s seconds' % (t2 - t1))\nprint('Memory increased to %s Mb' % (round(m2[0] - m1[0])))", "solution('''\n2\n2\n2 3\n2 3\n3\n2 3 3\n2 3 3\n''') == '''\n01\n010\n'''", "solution('''1\n2\n2 3\n4 2\n''') == '01'\nassert solution('''1\n4\n1 2 3 4\n1 2 3 4\n''') == '0001'\nassert solution('''2\n3\n1 2 3\n1 2 3\n1\n1\n''') == '111\\n1'\n\nprint(\"pass all test cases!\")", "solution('''\n1\n3\n1 2 3\n1 2 3\n''') == '111'\n\nassert solution('''\n1\n3\n1 2 3\n1 3 2\n''') == '101'\n\nassert solution('''\n1\n3\n2 1 3\n1 3 2\n''') == '010'\n\nassert solution('''\n2\n3\n1 2 3\n1 2 3\n3\n1 2 3\n1 3 2\n''') == '11101'", "solution(\"\"\"\n1\n3\n1 2 3\n4 5 6\n\"\"\") == \"010\"\nassert solution(\"\"\"\n1\n2\n1 2\n2 1\n\"\"\") == \"10\"\nassert solution(\"\"\"\n2\n2\n1 2\n2 1\n3\n1 2 3\n3 2 1\n\"\"\") == \"10\\n001\"", "solution(\"\") == \"\"", "solution('''\n3\n3\n1 2 3\n4 5 6\n4\n1 2 3 4\n5 6 7 8\n2\n1 2\n3 4\n''') == '''\n001\n0000\n10\n'''", "solution(\n'''\n1\n4\n1 2 3 4\n5 6 7 8\n'''\n) == '''\n1000\n'''", "solution(\"3\\n1\\n1\\n1\\n2\\n1 2\\n2 1\\n2\\n1 1\\n1 1\") == \"1\\n0\\n1\"", "solution(stdin1) == stdout1\n\n# check the efficiency of solution\ntime_spent(solution, [stdin1, stdin2, stdin3, stdin4, stdin5])", "solution('''\n1\n4\n1 2 3 5\n4 1 2 2\n''') == '0110'\n\nassert solution('''\n1\n4\n2 3 3 2\n3 3 2 2\n''') == '1010'\n\nassert solution('''\n1\n4\n1 1 1 2\n2 1 2 2\n''') == '0001'\n\nassert solution('''\n1\n4\n1 2 3 4\n4 3 2 1\n''') == '1110'", "solution(sample_in) == sample_out\n\n# print the solution result\nprint(solution('''\n1\n3\n3 1 2\n3 2 1\n'''))\n\n'''\nSample Input\n1\n3\n3 1 2\n3 2 1\n\nSample Output\n101\n'''", "solution('''\n1\n3\n3 1 2\n3 1 2\n''') == '100'\n\nassert solution('''\n1\n2\n1 2\n2 1\n''') == '11'\n\nassert solution('''\n2\n2\n2 1\n1 2\n3\n3 1 2\n3 1 2\n''') == '110\\n100'\n\nassert solution('''\n3\n2\n2 1\n1 2\n3\n3 1 2\n3 1 2\n4\n4 3 2 1\n4 3 2 1\n''') == '110\\n100\\n0001'", "solution('''\n1\n2\n1 2\n2 1\n''') == '''\n11\n'''\n\nassert solution('''\n1\n3\n1 2 3\n3 2 1\n''') == '''\n111\n'''\n\nassert solution('''\n1\n3\n1 2 3\n1 2 3\n''') == '''\n001\n'''\n\nassert solution('''\n1\n3\n1 2 3\n1 3 2\n''') == '''\n100\n'''\n\nassert solution('''\n1\n3\n1 2 3\n1 1 1\n''') == '''\n000\n'''\n\nassert solution('''\n1\n5\n2 3 5 4 8\n7 8 3 2 1\n''') == '''\n01001\n'''\n\nassert solution('''\n1\n3\n3 2 1\n3 1 2\n''') == '''\n010\n'''\n\nassert solution('''\n1\n3\n3 1 2\n3 2 1\n''') == '''\n001\n'''\n\nassert solution('''\n1\n3\n3 1 2\n2 1 3\n''') == '''\n100\n'''\n\nassert solution('''\n1\n3\n3 1 2\n1 2 3\n''') == '''\n100\n'''", "solution(\"\"\"2\n2\n2 3\n1 2\n3\n1 2 3\n1 2 3\n\"\"\") == \"\"\"11\n001\"\"\"", "solution(stdin='1\\n3\\n1 2 3\\n4 5 6') == '111'\nassert solution(stdin='2\\n3\\n1 2 3\\n4 5 6\\n2\\n2 3\\n1 3') == '111\\n11'", "solution('''\n2\n2\n1 2\n2 1\n3\n1 2 3\n3 2 1\n''') == '''\n10\n110\n'''", "solution('''\n5\n4\n1 1 1 1\n2 3 3 3\n4\n1 1 1 1\n2 3 3 3\n4\n1 2 3 4\n1 2 3 4\n4\n1 2 3 4\n1 2 3 4\n4\n1 1 1 2\n2 3 3 3\n''') == '''\n1010\n1010\n0000\n1111\n0000\n'''", "solution('''\n1\n5\n1 2 3 4 5\n5 4 3 2 1\n''') == '11111'\nassert solution('''\n1\n5\n1 2 3 4 5\n5 3 3 3 3\n''') == '10000'\nassert solution('''\n1\n3\n3 1 2\n3 1 2\n''') == '100'\nassert solution('''\n1\n5\n1 2 3 4 5\n5 3 3 3 3\n''') == '10000'\nassert solution('''\n2\n2\n1 1\n1 1\n3\n1 2 3\n1 2 3\n''') == '10'\nassert solution('''\n3\n3\n1 2 3\n2 3 1\n3\n1 2 3\n3 2 1\n3\n1 2 3\n3 1 2\n''') == '011'\nassert solution('''\n1\n10\n1 2 3 4 5 6 7 8 9 10\n10 9 8 7 6 5 4 3 2 1\n''') == '0000001111'\nassert solution('''\n1\n10\n10 9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9 10\n''') == '1111110000'\nassert solution('''\n1\n10\n6 5 8 8 4 8 6 9 7 8\n3 8 9 8 9 7 5 4", "solution(\"\"\"\n4\n4\n1 2 3 4\n4 3 2 1\n4\n4 3 2 1\n1 2 3 4\n4\n1 1 1 1\n4 3 2 1\n4\n4 3 2 1\n1 1 1 1\n\"\"\") == \"\"\"\n1100\n0011\n1000\n1000\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n1 2\n2 1\n3\n3 2 1\n1 2 3\n\"\"\") == \"\"\"\n10\n111\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2\n1 2\n2 1\n1\n1\n\"\"\") == \"\"\"\n01\n1\n\"\"\"\n\nassert solution(\"\"\"\n2\n2\n1 2\n2 1\n2\n1 2\n2 1\n\"\"\") == \"\"\"\n01\n10\n\"\"\"\n\nassert solution(\"\"\"\n5\n5\n1 1 2 2 3\n3 2 1 1 2\n5\n1 1 2 2 3\n3 2 1 1 2\n5\n1 1 2 2 3\n3 2 1 1 2\n5\n1 1 2 2 3\n3 2 1 1 2\n5\n1 1 2 2 3\n3 2 1 1 2\n\"\"\") == \"\"\"\n10000\n10000\n10000\n10000\n10000\n\"\"\"\n\nassert solution(\"\"\"\n2\n2\n1 2\n2 1\n2\n", "solution(\"\"\"\n0\n\"\"\") == \"\"\"\n\"\"\"\n\n# print(solution(stdin))", "solution(\"\"\"\n2\n2\n1 2\n1 2\n3\n1 2 3\n1 2 3\n\"\"\") == \"\"\"\n10\n001\n\"\"\"\nassert solution(\"\"\"\n2\n2\n1 1\n1 1\n4\n1 1 1 1\n1 1 1 1\n\"\"\") == \"\"\"\n00\n0000\n\"\"\"\nassert solution(\"\"\"\n1\n3\n1 3 2\n2 3 1\n\"\"\") == \"\"\"\n001\n\"\"\"\nassert solution(\"\"\"\n2\n2\n7 4\n3 4\n3\n7 4 6\n3 4 5\n\"\"\") == \"\"\"\n01\n010\n\"\"\"\nassert solution(\"\"\"\n2\n2\n2 1\n1 2\n2\n1 2\n1 2\n\"\"\") == \"\"\"\n01\n01\n\"\"\"\nassert solution(\"\"\"\n2\n2\n2 2\n1 1\n2\n1 1\n2 2\n\"\"\") == \"\"\"\n10\n10\n\"\"\"\nassert solution(\"\"\"\n3\n3\n1 2 3\n1 2 3\n3\n3 2 1\n3 2 1\n3\n1 1 1\n1 1 1\n\"\"\") == \"\"\"\n100\n100\n100\n\"\"\"\nassert solution(\"\"\"\n2\n2\n1 2\n2 1\n2\n1 2\n2 1\n\"\"\") == \"\"\"\n01\n01\n\"\"\"\nassert solution(\"\"\"\n3\n3\n1 2 3\n", "solution('''2\n3\n1 2 3\n1 2 3\n3\n1 2 1\n1 2 3\n''') == '100\\n100', 'Test failed!'\n\nprint('All tests passed!')"], "finish_reason": ["length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop"], "sum_logprob": [-115.13873960160208, -28.8521281008, -30.834510510840005, -56.41615159040001, -51.45099086879401, -97.62956700504003, -7.971470115100001, -38.011985470572, -31.430857624165, -10.1470953352, -31.45401866356, -8.654315503, -20.192172341200003, -18.0750316312, -16.770207043799996, -26.897495032930006, -61.0567607653, -35.82880010273001, -73.02588547015095, -61.665485798385944, -21.659170009899995, -40.27173055078, -112.49614217229998, -23.418156566, -44.867713958645, -44.619716524973, -143.69842988557807, -77.50127320978399, -23.0308119951, -52.745107304288005, -33.02947173792901, -30.128991928119994, -5.14881614, -20.568664162899992, -17.976329639300005, -19.156087029230005, -33.414409740400004, -66.34030918450202, -47.555872597529984, -47.862882103419985, -94.44805706432203, -22.204931343000002, -27.92933256976, -13.080859714299997, -52.49609535796999, -140.08325213201502, -103.73495515456013, -18.250430392299993, -121.71054140309205, -33.6645071268], "mean_logprob": [-0.3837957986720067, -0.64115840224, -0.3854313813855, -0.6964956986469136, -0.3597971389426154, -0.7509966692695385, -0.49821688219375, -0.3918761388718763, -0.5069493165187903, -0.5968879608941177, -0.37004727839482354, -0.7867559548181818, -0.4487149409155556, -0.5020842119777778, -0.4413212379947368, -0.507499906281698, -0.7183148325329411, -0.5428606076171212, -0.24341961823383668, -0.32455518841255787, -0.433183400198, -0.7065215886101754, -0.8333047568318518, -0.5322308310454545, -0.3970594155632301, -0.6284467116193381, -0.47899476628526, -0.4640794802981078, -0.6060739998710527, -0.5993762193669091, -0.29229621007016815, -0.3766123991015, -0.8581360233333333, -0.3955512339019231, -0.5447372617969697, -0.41643667454847827, -0.6819267293959184, -0.5870823821637345, -0.6793696085361428, -0.3493641029446715, -0.31482685688107365, -0.69390410446875, -0.42968203953476924, -0.3442331503763158, -0.59654653815875, -0.4669441737733833, -0.34578318384853335, -0.7604345996791667, -0.4057018046769733, -0.6870307576897959]}
{"prompt": "'''\nFor an array c of nonnegative integers, MEX(c) denotes the smallest nonnegative integer that doesn't appear in it. For example, MEX([0, 1, 3]) = 2, MEX([42]) = 0.\n\nYou are given integers n, k, and an array [b_1, b_2, \u2026, b_n].\n\nFind the number of arrays [a_1, a_2, \u2026, a_n], for which the following conditions hold:\n\n  * 0 \u2264 a_i \u2264 n for each i for each i from 1 to n.\n\n  * |MEX([a_1, a_2, \u2026, a_i]) - b_i| \u2264 k for each i from 1 to n.\n\n\n\n\nAs this number can be very big, output it modulo 998 244 353.\n\nInput\n\nThe first line of the input contains two integers n, k (1 \u2264 n \u2264 2000, 0 \u2264 k \u2264 50).\n\nThe second line of the input contains n integers b_1, b_2, \u2026, b_n (-k \u2264 b_i \u2264 n+k) \u2014 elements of the array b.\n\nOutput\n\nOutput a single integer \u2014 the number of arrays which satisfy the conditions from the statement, modulo 998 244 353.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n3 1\n1 2 0\n\"\"\") == \"\"\"\n4\n\"\"\"\nassert solution(\"\"\"\n4 1\n0 0 0 0\n\"\"\") == \"\"\"\n5\n\"\"\"\nassert solution(\"\"\"\n1 0\n0\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n10 2\n0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n1099511627775\n\"\"\"\nassert solution(\"\"\"\n7 2\n2 3 3 3 3 3 3\n\"\"\") == \"\"\"\n65784\n\"\"\"\nassert solution(\"\"\"\n1 0\n0\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n3 0\n0 1 2\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1 0\n0\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n5 2\n0 2 0 0 0\n\"\"\") == \"\"\"\n5\n\"\"\"\nassert solution(\"\"\"\n2 0\n0 0\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n4 1\n0 0 0 0\n\"\"\") == \"\"\"\n5\n\"\"\"\nassert solution(\"\"\"\n2000 50\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50", "solution('''6 0\n0 0 1 1 0 0''') == '82944'\nassert solution('''6 1\n0 1 1 1 1 0''') == '12960'\nassert solution('''1 0\n0''') == '2'\nassert solution('''3 1\n1 0 1''') == '24'\nassert solution('''3 1\n2 1 0''') == '48'\nassert solution('''5 0\n0 0 0 0 0''') == '8192'\nassert solution('''5 1\n1 1 1 1 1''') == '512'\nassert solution('''2 1\n0 1''') == '12'\nassert solution('''2 1\n1 0''') == '12'\nassert solution('''2 1\n1 1''') == '12'\nassert solution('''2 1\n0 0''') == '12'\nassert solution('''2 0\n0 0''') == '2'\nassert solution('''2 0\n0 1''') == '2'\nassert solution('''2 0\n1 0''') == '2'\nassert solution('''2 0\n1 1''') == '2'\nassert solution('''2 1\n1 0''') == '12'\nassert solution('''2 1\n0 1", "solution('''\n2 1\n-1 0\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n3 2\n1 -1 1\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n2 0\n0 0\n''') == '1'\n\nassert solution('''\n2 0\n1 1\n''') == '0'\n\nassert solution('''\n3 0\n0 0 0\n''') == '1'\n\nassert solution('''\n3 0\n1 1 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n2 2\n1 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n2 0\n0 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n3 0\n0 0 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n3 0\n0 1 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n3 0\n0 2 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n3 0\n0 3 1\n''') == '", "solution('''\n''') == '''\n'''", "solution('''\n3 2\n1 2 3\n''') == '''\n4\n'''\nassert solution('''\n4 2\n1 2 3 4\n''') == '''\n2\n'''\nassert solution('''\n5 5\n2 3 3 4 4\n''') == '''\n8\n'''\nassert solution('''\n1 2\n1\n''') == '''\n0\n'''\nassert solution('''\n3 5\n0 1 2\n''') == '''\n0\n'''\nassert solution('''\n3 5\n2 3 4\n''') == '''\n0\n'''\nassert solution('''\n10 5\n2 3 4 5 6 7 8 9 10 9\n''') == '''\n15\n'''\nassert solution('''\n5 30\n4 4 4 4 4\n''') == '''\n1\n'''\nassert solution('''\n5 30\n4 4 4 4 4\n''') == '''\n1\n'''\nassert solution('''\n5 30\n4 4 4 4 4\n''') == '''\n1\n'''\nassert solution('''\n5 30\n4 4 4 4 4\n''') == '''\n1\n'''\nassert solution('''\n5 30\n4 4 4 4 4\n''') == '''\n", "solution(solution_test_case) == solution_test_result", "solution(get_input_file_text(__file__, 0)) == get_output_file_text(__file__, 0)\nassert solution(get_input_file_text(__file__, 1)) == get_output_file_text(__file__, 1)\nassert solution(get_input_file_text(__file__, 2)) == get_output_file_text(__file__, 2)\nassert solution(get_input_file_text(__file__, 3)) == get_output_file_text(__file__, 3)\nassert solution(get_input_file_text(__file__, 4)) == get_output_file_text(__file__, 4)\nassert solution(get_input_file_text(__file__, 5)) == get_output_file_text(__file__, 5)\nassert solution(get_input_file_text(__file__, 6)) == get_output_file_text(__file__, 6)\nassert solution(get_input_file_text(__file__, 7)) == get_output_file_text(__file__, 7)\nassert solution(get_input_file_text(__file__, 8)) == get_output_file_text(__file__, 8)\nassert solution(get", "solution(\"\"\"2 0\n0 0\"\"\") == '4'\nassert solution(\"\"\"4 10\n0 10 0 10\"\"\") == '582086'\nassert solution(\"\"\"3 2\n1 3 2\"\"\") == '0'\nassert solution(\"\"\"4 0\n0 0 0 0\"\"\") == '1'\nassert solution(\"\"\"4 5\n1 1 1 1\"\"\") == '0'\nassert solution(\"\"\"5 50\n10 10 10 10 10\"\"\") == '1316134911'\nassert solution(\"\"\"2000 50\n10 10 10 10 10\"\"\") == '1531396461'\nassert solution(\"\"\"2000 50\n-10 -10 -10 -10 -10\"\"\") == '1531396461'\nassert solution(\"\"\"2000 50\n-50 -50 -50 -50 -50\"\"\") == '1531396461'\nassert solution(\"\"\"2000 50\n50 50 50 50 50\"\"\") == '1531396461'\nassert solution(\"\"\"2000 50\n0 0 0 0 0\"\"\") == '35184372089463'\nassert solution(\"\"\"2000 50\n-42 -42 -42 -42 -42\"\"\") == '1531396461'\nassert solution(\"\"\"2000 50\n42 42 42 42 42\"\"\") == '1531396461'\nassert solution(\"\"\"2000 50\n0 5 0 5 0\"\"\") == '35184", "solution('''\n2 2\n-2 2\n''') == '0'\n\nassert solution('''\n3 2\n-2 2 -2\n''') == '1'\n\nassert solution('''\n2 2\n0 1\n''') == '3'\n\nassert solution('''\n2 2\n0 0\n''') == '8'\n\n# test for performance\nassert solution('''\n2000 50\n*2000 numbers*\n''') == '*answer*'", "solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check the correctness", "(solution('''4 2\n4 3 5 3''') == '28')\nassert (solution('''3 1\n2 3 3''') == '9')\nassert (solution('''3 0\n0 0 0''') == '1')\nassert (solution('''1 1\n0''') == '2')\nassert (solution('''10 3\n2 3 1 2 3 3 2 2 3 1''') == '9794738')\nassert (solution('''2000 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "solution('''2 1\n2 0''') == '5'\nassert solution('''4 0\n0 0 0 0''') == '7'\nassert solution('''4 0\n0 1 2 3''') == '4'\nassert solution('''4 3\n4 3 2 1''') == '0'\nassert solution('''4 1\n4 3 2 1''') == '7'\nassert solution('''3 3\n2 2 2''') == '4'\nassert solution('''3 3\n2 1 2''') == '3'\nassert solution('''3 0\n2 1 0''') == '3'\nassert solution('''3 0\n0 1 2''') == '7'\nassert solution('''3 3\n2 2 3''') == '2'\nassert solution('''3 3\n2 3 3''') == '3'\nassert solution('''3 3\n3 3 3''') == '1'\nassert solution('''3 0\n2 2 3''') == '2'\nassert solution('''3 0\n2 3 3''') == '2'\nassert solution('''3 0\n3 3 3''') == '1'\nassert solution('''3 1\n2 2 3''') == '3'\nassert solution('''3 1\n2 3", "solution(test_case_input) == test_case_output", "solution(\"\"\"\n2 0\n0 0\n\"\"\") == '6'\n\nassert solution(\"\"\"\n5 4\n1 7 5 5 5\n\"\"\") == '9'\n\nassert solution(\"\"\"\n2 3\n4 6\n\"\"\") == '4'\n\n# check the correctness of solution\nimport random\nfrom string import ascii_lowercase\nimport hashlib\n\nfor _ in range(100):\n    # generate random test case\n    n = random.randint(1, 2000)\n    k = random.randint(0, 50)\n    b = [random.randint(-k, n+k) for _ in range(n)]\n    stdin = f\"{n} {k}\\n{' '.join(map(str, b))}\\n\"\n\n    # run solution and check the output\n    output = solution(stdin)\n    assert hashlib.sha512(output.encode()).hexdigest() == '4d4c4f1bd056a0a6b2a0dc8c6b05f0166f5cefe0d742757e8f3b3ac6c1e6d9d632b0c2f70d45c4d4e4cebb8b6d1a6f7a6b12bbd8c", "solution('''\ninput\n''') == '''\noutput\n'''", "solution(\"\") == \"\", \"Example 1\"\nassert solution(\"\") == \"\", \"Example 2\"\nassert solution(\"\") == \"\", \"Example 3\"\n\n# stress test\nimport time\nfrom random import seed, randint\n\nseed(int(time.time()))\n\n# for example input [0, 0, 2, 0, 2, 1]\ndef generate_random_large_input(n: int, k: int) -> str:\n    input = [0] * n\n    for i in range(n):\n        input[i] = randint(0, k)\n    return f\"{n} {k}\\n{' '.join(map(str, input))}\"\n\nprint(generate_random_large_input(2000, 50))", "solution(r'''\n3 2\n1 3 3\n''') == r'''\n12\n'''\nassert solution(r'''\n5 2\n1 2 2 3 3\n''') == r'''\n540\n'''\nassert solution(r'''\n3 0\n1 2 3\n''') == r'''\n1\n'''\nassert solution(r'''\n10 2\n2 2 2 2 2 2 2 2 2 2\n''') == r'''\n4444444444\n'''\nassert solution(r'''\n2 0\n1 2\n''') == r'''\n2\n'''\nassert solution(r'''\n4 3\n3 3 3 3\n''') == r'''\n32\n'''\nassert solution(r'''\n4 3\n2 3 3 3\n''') == r'''\n28\n'''\nassert solution(r'''\n20 2\n0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0\n''') == r'''\n38119824\n'''\nassert solution(r'''\n20 2\n0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0\n''') == r'''\n38119824\n'''\nassert solution(r'''\n19 2\n0 1 0", "solution('''\n2 0\n2 3\n''') == '2'\n\nassert solution('''\n3 1\n0 1 1\n''') == '10'\n\nassert solution('''\n3 2\n0 1 1\n''') == '27'\n\nassert solution('''\n4 0\n0 0 0 0\n''') == '0'\n\nassert solution('''\n4 3\n1 2 3 4\n''') == '6'\n\nassert solution('''\n4 4\n1 2 3 4\n''') == '80'\n\nassert solution('''\n4 5\n1 2 3 4\n''') == '570'\n\nassert solution('''\n4 6\n1 2 3 4\n''') == '6641'\n\nassert solution('''\n4 7\n1 2 3 4\n''') == '104016'\n\nassert solution('''\n4 8\n1 2 3 4\n''') == '1699746'\n\nassert solution('''\n4 9\n1 2 3 4\n''') == '28556405'\n\nassert solution('''\n4 10\n1 2 3 4\n''') == '494499328'\n\nassert solution('''\n4 11\n1 2 3 4\n''') == '8854537256'\n\nassert solution('''\n4", "solution(test_data) == test_output", "solution('''\n3 1\n0 1 3\n''') == '''\n4\n'''\n\nassert solution('''\n3 0\n0 1 2\n''') == '''\n1\n'''\n\nassert solution('''\n3 2\n0 0 0\n''') == '''\n0\n'''\n\nassert solution('''\n2 2\n0 0\n''') == '''\n9\n'''\n\nassert solution('''\n2 0\n0 0\n''') == '''\n1\n'''\n\nassert solution('''\n2 1\n0 0\n''') == '''\n3\n'''\n\nassert solution('''\n2 1\n0 2\n''') == '''\n3\n'''\n\nassert solution('''\n2 1\n2 2\n''') == '''\n3\n'''\n\nassert solution('''\n2 1\n1 2\n''') == '''\n0\n'''\n\nassert solution('''\n2 1\n2 1\n''') == '''\n0\n'''\n\nassert solution('''\n2 2\n2 2\n''') == '''\n9\n'''\n\nassert solution('''\n2 2\n1 1\n''') == '''\n9\n'''\n\nassert solution('''\n3 0\n0", "solution('''\n3 2\n1 4 4\n''') == '10'\n\n# check performance\nimport timeit\nprint(timeit.timeit('''\nimport numpy as np\n\ndef solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    b = list(map(int, stdin.splitlines()[1].split()))\n    if n == 1:\n        return '1'\n\n    dp = np.zeros((n, n + 1, k + 1), dtype=np.int64)\n    dp[0, b[0], 0] = 1\n    for i in range(1, n):\n        for j in range(n):\n            for l in range(k + 1):\n                dp[i, j, l] += dp[i - 1, j, l]\n                if j - l >= 0:\n                    dp[i, j, l] += dp[i - 1, j - l, l]\n                if j + l <= n:\n                    dp[i, j, l] += dp[i - 1, j + l, l]\n                dp[i, j, l] %= 998244353\n    return str(", "solution(\"\"\"\n3 1\n0 2 0\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n4 1\n0 0 0 0\n\"\"\") == \"\"\"\n4\n\"\"\"\nassert solution(\"\"\"\n4 2\n0 0 0 0\n\"\"\") == \"\"\"\n15\n\"\"\"\nassert solution(\"\"\"\n3 5\n1 1 1\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n5 4\n3 5 1 2 4\n\"\"\") == \"\"\"\n80\n\"\"\"\nassert solution(\"\"\"\n15 15\n15 15 15 15 15 15 15 15 15 15 15 15 15 15 15\n\"\"\") == \"\"\"\n52984\n\"\"\"\nassert solution(\"\"\"\n15 15\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n\"\"\") == \"\"\"\n3087\n\"\"\"\nassert solution(\"\"\"\n6 48\n47 47 47 47 47 47\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n6 8\n8 8 8 8 8 8\n\"\"\") == \"\"\"\n24\n\"\"\"\nassert solution(\"\"\"\n6 8\n7 7 7 7 7 7\n\"\"\") == \"\"\"\n81\n\"\"\"\nassert solution(\"\"\"\n6 8\n9 9 9 9 9 9\n\"\"\") == \"\"\"\n81\n\"\"\"\nassert solution(\"\"\"\n6 8\n10 10 10 10 10 10\n\"\"\") == \"\"\"\n24\n\"\"\"\nassert solution(\"\"\"", "solution(\"1 0\\n0\") == \"1\"\nassert solution(\"3 50\\n0 2 1\") == \"1\"\nassert solution(\"5 10\\n0 2 10 1 -9\") == \"7\"\nassert solution(\"2000 50\\n10 20 23 0 0 31 0 -20 4 5\") == \"120\"\nassert solution(\"2000 50\\n10 20 23 0 0 31 0 -20 4 5\") == \"120\"\nassert solution(\"2000 50\\n10 20 23 0 0 31 0 -20 4 5\") == \"120\"\nassert solution(\"2000 50\\n10 20 23 0 0 31 0 -20 4 5\") == \"120\"\nassert solution(\"2000 50\\n10 20 23 0 0 31 0 -20 4 5\") == \"120\"\nassert solution(\"2000 50\\n10 20 23 0 0 31 0 -20 4 5\") == \"120\"\nassert solution(\"2000 50\\n10 20 23 0 0 31 0 -20 4 5\") == \"120\"\nassert solution(\"2000 50\\n10 20 23 0 0 31 0 -20 4 5\") == \"120\"\nassert solution(\"2000 50\\n10 20 23 0 0 31 0 -20 4 5\") == \"120\"\nassert solution(\"2000 50\\n10 20 23 0 0 31 0 -20 4 5\") == \"120\"\nassert solution(\"2000 50\\n10 20 23 0 0", "solution(\"\"\"\n3 1\n0 2 0\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n3 1\n1 2 3\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n2 0\n1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n5 2\n0 2 0 0 1\n\"\"\") == \"\"\"\n74\n\"\"\"\nassert solution(\"\"\"\n1 0\n0\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n10 1\n0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n10 10\n10 9 8 7 6 5 4 3 2 1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n10 0\n0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n11\n\"\"\"\nassert solution(\"\"\"\n10 5\n5 6 7 8 9 10 0 1 2 3\n\"\"\") == \"\"\"\n15\n\"\"\"\nassert solution(\"\"\"\n10 10\n9 10 0 1 2 3 4 5 6 7\n\"\"\") == \"\"\"\n15\n\"\"\"\nassert solution(\"\"\"\n1 0\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2 0\n1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2 0\n2 1\n\"\"\") == \"\"\"\n1\n", "solution('''\n3 4\n1 0 3\n''') == '''\n3\n'''\n\nassert solution('''\n3 4\n3 0 1\n''') == '''\n3\n'''\n\nassert solution('''\n3 4\n2 0 3\n''') == '''\n9\n'''\n\nassert solution('''\n5 5\n-5 -5 -5 -5 -5\n''') == '''\n5\n'''\n\nassert solution('''\n3 5\n3 3 3\n''') == '''\n1\n'''\n\nassert solution('''\n4 0\n4 4 4 4\n''') == '''\n1\n'''\n\nassert solution('''\n20 50\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n''') == '''\n1\n'''\n\nassert solution('''\n2000 50\n-50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50 -50", "solution('''\n1 0\n0\n''') == '2'\n\nassert solution('''\n1 1\n0\n''') == '3'\n\nassert solution('''\n3 1\n2 3 3\n''') == '45'\n\nassert solution('''\n3 0\n0 0 0\n''') == '1'\n\nassert solution('''\n2 3\n2 3\n''') == '189'\n\nassert solution('''\n2 5\n2 3\n''') == '1311'\n\nassert solution('''\n2 7\n2 3\n''') == '8875'\n\nassert solution('''\n2 8\n2 3\n''') == '44375'\n\nassert solution('''\n2 9\n2 3\n''') == '221875'\n\nassert solution('''\n2 10\n2 3\n''') == '1109375'\n\nassert solution('''\n2 11\n2 3\n''') == '5546875'\n\nassert solution('''\n2 12\n2 3\n''') == '27734375'\n\nassert solution('''\n2 13\n2 3\n''') == '13671875'\n\nassert solution('''\n2 14\n2 3\n''') == '68359375'\n\nassert solution(''", "solution('''\n5 4\n1 2 3 4 5\n''') == '''\n3\n'''\n\nassert solution('''\n3 4\n-1 -1 -1\n''') == '''\n0\n'''\n\nassert solution('''\n1 4\n-1\n''') == '''\n998244351\n'''\n\nassert solution('''\n2 3\n2 0\n''') == '''\n1\n'''\n\nassert solution('''\n5 3\n2 1 0 2 1\n''') == '''\n10\n'''", "solution('''\n3 1\n0 0 0\n''') == '6'\n\nassert solution('''\n1 1\n1\n''') == '2'\n\nassert solution('''\n2 1\n2 0\n''') == '4'\n\nassert solution('''\n3 2\n3 3 3\n''') == '0'\n\nassert solution('''\n3 0\n0 1 2\n''') == '4'\n\nassert solution('''\n1 0\n0\n''') == '2'\n\nassert solution('''\n5 50\n-50 -50 -50 -50 -50\n''') == '0'\n\nassert solution('''\n2000 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "solution(\"\"\"3 2\n-2 0 1\"\"\") == \"\"\"6\"\"\"\nassert solution(\"\"\"1 0\n0\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"2 0\n-1 0\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"4 6\n-4 -4 4 4\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"4 0\n0 0 0 0\"\"\") == \"\"\"24\"\"\"\nassert solution(\"\"\"4 2\n-2 2 0 -2\"\"\") == \"\"\"72\"\"\"\nassert solution(\"\"\"4 2\n-2 2 2 -2\"\"\") == \"\"\"8\"\"\"\nassert solution(\"\"\"5 1\n1 1 1 1 1\"\"\") == \"\"\"120\"\"\"\nassert solution(\"\"\"5 6\n0 0 0 0 0\"\"\") == \"\"\"720\"\"\"\nassert solution(\"\"\"5 7\n0 0 0 0 0\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"10 49\n49 49 49 49 49 49 49 49 49 49\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"10 48\n48 48 48 48 48 48 48 48 48 48\"\"\") == \"\"\"1024\"\"\"\nassert solution(\"\"\"10 0\n0 0 0 0 0 0 0 0 0 0\"\"\") == \"\"\"3628800\"\"\"\nassert solution(\"\"\"10 1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1\"\"\") == \"\"\"3628800\"\"\"\nassert solution(\"\"\"10 49", "solution('''\n1 0\n0\n''') == '2'\n\nassert solution('''\n2 0\n0 0\n''') == '4'\n\nassert solution('''\n1 1\n1\n''') == '6'\n\nassert solution('''\n2 1\n0 1\n''') == '12'\n\nassert solution('''\n3 2\n1 1 1\n''') == '26'\n\nassert solution('''\n3 0\n2 2 2\n''') == '0'\n\nassert solution('''\n3 1\n1 1 1\n''') == '0'\n\nassert solution('''\n3 2\n2 2 2\n''') == '0'\n\nassert solution('''\n1 2\n1\n''') == '0'\n\nassert solution('''\n2 2\n1 1\n''') == '0'\n\nassert solution('''\n2 1\n0 0\n''') == '0'\n\nassert solution('''\n1 1\n0\n''') == '0'\n\nassert solution('''\n3 1\n1 1 0\n''') == '0'\n\nassert solution('''\n2 1\n1 0\n''') == '0'\n\nassert solution('''\n2 1\n0 0\n''') == '0'\n\n", "solution('''\n6 4\n-1 0 2 1 0 1\n''') == '''\n15\n'''\n\n# test the speed of solution\nimport timeit\nimport random\nsolution('''\n{} {}\n{}\n'''.format(2000, 50, ' '.join(map(str, random.choices(range(-50, 50), k=2000)))))\n\n'''\ntime: ~ 20s\n'''", "solution('''\n3 2\n0 0 2\n''') == '''\n3\n'''\nassert solution('''\n3 2\n0 0 3\n''') == '''\n2\n'''\nassert solution('''\n5 1\n1 1 2 2 4\n''') == '''\n8\n'''\nassert solution('''\n10 5\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n''') == '''\n982\n'''\nassert solution('''\n3 0\n0 0 0\n''') == '''\n1\n'''\nassert solution('''\n6 2\n-1 -1 0 1 1 2\n''') == '''\n20\n'''\nassert solution('''\n14 2\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2\n''') == '''\n983\n'''\nassert solution('''\n5 2\n-2 -2 0 0 2\n''') == '''\n10\n'''\nassert solution('''\n4 1\n-1 -1 0 1\n''') == '''\n5\n'''\nassert solution('''\n10 0\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n1", "str(solution(sample_in)) == sample_out", "'123' == solution('''\n  2 2\n  2 2\n''')\n\n# add then to the solution\nassert '123' == solution('''\n  2 2\n  2 2\n''')", "solution(str(4) + '\\n' + str(2)) == str(3)\nassert solution(str(3) + '\\n' + str(1)) == str(0)\nassert solution(str(3) + '\\n' + str(0)) == str(6)\nassert solution(str(4) + '\\n' + str(0)) == str(18)\nassert solution(str(2) + '\\n' + str(1)) == str(0)\nassert solution(str(2) + '\\n' + str(0)) == str(3)\nassert solution(str(5) + '\\n' + str(0)) == str(45)\nassert solution(str(3) + '\\n' + str(2)) == str(0)\nassert solution(str(2) + '\\n' + str(2)) == str(0)\nassert solution(str(4) + '\\n' + str(1)) == str(6)\nassert solution(str(4) + '\\n' + str(3)) == str(0)\nassert solution(str(5) + '\\n' + str(1)) == str(9)\nassert solution(str(5) + '\\n' + str(3)) == str(0)\nassert solution", "solution(samples.TESTS[0]) == samples.SOLUTIONS[0]\n\n# check the correctness of solution\nassert solution(samples.TESTS[1]) == samples.SOLUTIONS[1]\n\n# check the correctness of solution\nassert solution(samples.TESTS[2]) == samples.SOLUTIONS[2]\n\n# check the correctness of solution\nassert solution(samples.TESTS[3]) == samples.SOLUTIONS[3]\n\n# check the correctness of solution\nassert solution(samples.TESTS[4]) == samples.SOLUTIONS[4]\n\n# check the correctness of solution\nassert solution(samples.TESTS[5]) == samples.SOLUTIONS[5]\n\n# check the correctness of solution\nassert solution(samples.TESTS[6]) == samples.SOLUTIONS[6]\n\n# check the correctness of solution\nassert solution(samples.TESTS[7]) == samples.SOLUTIONS[7]\n\n# check the correctness of solution\nassert solution(samples.TESTS[8]) == samples.SOLUTIONS[8]\n\n# check the correctness of solution\nassert solution(samples.TESTS[9]) == samples.SOLUTIONS[9]", "solution('''\n2 0\n0 1\n''') == '6'\n\nassert solution('''\n2 0\n2 3\n''') == '0'\n\nassert solution('''\n2 1\n0 1\n''') == '6'\n\nassert solution('''\n3 0\n0 1 1\n''') == '72'\n\nassert solution('''\n3 0\n1 1 1\n''') == '0'\n\nassert solution('''\n3 1\n0 1 1\n''') == '72'\n\nassert solution('''\n3 2\n0 1 1\n''') == '72'\n\nassert solution('''\n3 3\n0 1 1\n''') == '72'\n\nassert solution('''\n3 3\n2 3 3\n''') == '0'\n\nassert solution('''\n3 4\n0 1 1\n''') == '72'\n\nassert solution('''\n3 4\n1 1 1\n''') == '0'\n\nassert solution('''\n3 4\n2 3 3\n''') == '0'\n\nassert solution('''\n3 4\n3 3 3\n''') == '0'\n\nassert solution('''\n3 5\n0 1 1\n''') == '72'\n\nassert solution('''\n3 5\n1", "solution('''\n5 1\n1 0 1 1 0\n''') == '15'\n\nassert solution('''\n5 0\n1 0 1 1 0\n''') == '2'\n\nassert solution('''\n5 2\n0 2 0 1 0\n''') == '68'\n\nassert solution('''\n2 1\n-1 -1\n''') == '0'\n\nassert solution('''\n5 49\n0 2 0 1 0\n''') == '0'\n\nassert solution('''\n10 0\n0 0 0 0 0 0 0 0 0 0\n''') == '0'\n\nassert solution('''\n10 3\n-1 0 -1 0 -1 0 -1 0 -1 0\n''') == '6'\n\nassert solution('''\n10 10\n0 10 0 10 0 10 0 10 0 10\n''') == '0'\n\nassert solution('''\n10 3\n2 1 2 1 2 1 2 1 2 1\n''') == '750'\n\nassert solution('''\n10 3\n1 2 1 2 1 2 1 2 1 2\n''') == '750'\n\nassert solution('''\n10 3\n2 3 2 3 2 3 2 3 2 3\n''') == '750'\n\nassert solution('''\n5 2\n-1 0 1 2", "solution(\"\"\"\n1\n1\n\"\"\") == '2'\n\nassert solution(\"\"\"\n3\n3\n\"\"\") == '9'\n\nassert solution(\"\"\"\n3\n1\n\"\"\") == '15'\n\nassert solution(\"\"\"\n2\n0\n0 1\n\"\"\") == '5'\n\nassert solution(\"\"\"\n2\n1\n1 1\n\"\"\") == '10'\n\nassert solution(\"\"\"\n2\n1\n0 1\n\"\"\") == '20'\n\nassert solution(\"\"\"\n2\n1\n1 0\n\"\"\") == '20'\n\nassert solution(\"\"\"\n3\n3\n1 1 0\n\"\"\") == '68'\n\nassert solution(\"\"\"\n3\n2\n0 1 1\n\"\"\") == '123'\n\nassert solution(\"\"\"\n5\n4\n4 4 4 4 4\n\"\"\") == '524880'\n\nassert solution(\"\"\"\n15\n0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\"\"\") == '1369644677'\n\nassert solution(\"\"\"\n2000\n50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "solution('''\n3 1\n1 2 3\n''') == '1'\n\nassert solution('''\n4 2\n-4 0 0 4\n''') == '2'\n\nassert solution('''\n5 2\n1 1 1 1 0\n''') == '0'\n\nassert solution('''\n2 1\n0 3\n''') == '2'\n\nassert solution('''\n2000 50\n-50 48 -48 50 -49 -48 49 -49 -49 -49 -48 -48 -47 -47 49 -48 -48 -48 -48 -47 -48 -47 -47 47 -47 47 47 47 -47 -46 -46 -46 46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46 -46", "solution('''5 1\n-1 0 1 2 0''') == '33'\nassert solution('''2 1\n2 3''') == '2'\nassert solution('''3 0\n1 1 1''') == '1'\nassert solution('''5 0\n-5 -4 -3 -2 -1''') == '7'\nassert solution('''3 1\n0 1 0''') == '1'\nassert solution('''1 2\n2''') == '2'\nassert solution('''2 2\n1 1''') == '0'\nassert solution('''1 1\n2''') == '2'\nassert solution('''2 1\n1 1''') == '1'\nassert solution('''4 1\n0 -1 1 2''') == '9'\nassert solution('''3 0\n1 1 1''') == '1'\nassert solution('''1 0\n1''') == '1'\nassert solution('''5 1\n-5 -5 -5 -5 -5''') == '7'\nassert solution('''1 1\n2''') == '2'\nassert solution('''3 1\n0 1 0''') == '1'\nassert solution('''3 0\n1 1 1''') == '1'\nassert solution('''", "solution('''\n3 2\n0 1 2\n''') == '''\n3\n'''\n\n# test if using less memory\nassert memory_usage_psutil() < 100*1024*1024, 'Memory usage exceeded 100MB'\n\n# test if time limit is not exceeded\nassert run_time_limit_exceeded() is False, 'Time limit exceeded'\n\n# test if the system is given enough arguments\nassert len(sys.argv) == 2, 'Needs exactly one argument'\n\n# check the correctness of solution\nassert solution(sys.argv[1]) == sys.argv[2]", "solution(sample_input1) == sample_output1, \"Wrong Answer\"\nassert solution(sample_input2) == sample_output2, \"Wrong Answer\"\nassert solution(sample_input3) == sample_output3, \"Wrong Answer\"\nassert solution(sample_input4) == sample_output4, \"Wrong Answer\"\n\nprint(\"Correct\")\n\n# open and read input file\ninput_file = open('input.txt', 'r')\nstdin = input_file.read()\ninput_file.close()\n\n# open and write output file\noutput_file = open('output.txt', 'w')\noutput_file.write(solution(stdin))\noutput_file.close()", "solution(\"\"\"\n3 0\n1 2 1\n\"\"\") == \"\"\"\n7\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2 0\n1 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 0\n1 1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 1\n0 1 2 3\n\"\"\") == \"\"\"\n120\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 1\n0 0 0 0\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4 3\n2 3 0 2\n\"\"\") == \"\"\"\n24\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 0\n1 2 1\n\"\"\") == \"\"\"\n7\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 0\n0 1 0\n\"\"\") == \"\"\"\n7\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 2\n1 1 1\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 4\n0 1 0\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 4\n2", "(solution(test_data)) == \"test\", \"solution(test_data) should return 'test'\"", "solution('''\\\n1\n0\n''') == '2'\nassert solution('''\\\n3\n3\n3 2 1\n''') == '4'\nassert solution('''\\\n4\n2\n2 3 3 2\n''') == '50'\nassert solution('''\\\n2\n2\n1 1\n''') == '4'\nassert solution('''\\\n2\n2\n2 1\n''') == '4'\nassert solution('''\\\n3\n1\n1 0 2\n''') == '6'\nassert solution('''\\\n3\n1\n2 0 2\n''') == '4'\nassert solution('''\\\n3\n1\n1 0 1\n''') == '6'\nassert solution('''\\\n5\n5\n5 0 3 5 5\n''') == '6'\nassert solution('''\\\n4\n4\n4 0 4 4\n''') == '6'\nassert solution('''\\\n5\n5\n5 0 4 4 5\n''') == '6'\nassert solution('''\\\n5\n5\n3 0 4 4 5\n''') == '6'\nassert solution('''\\\n5\n5\n3 0 4 4 4\n''') == '2'\nassert solution('''\\\n5\n5\n", "solution('''\n2 1\n2 3\n''') == '''\n15\n'''\n\n# get the input\ninput = open('input.txt', 'r')\nprint(solution(input.read()))\ninput.close()", "solution('''\n0 0\n0\n''') == '1'\n\nassert solution('''\n1 0\n0\n''') == '1'\n\nassert solution('''\n2 1\n0 1\n''') == '4'\n\nassert solution('''\n4 1\n0 0 0 0\n''') == '8'\n\nassert solution('''\n3 1\n2 0 0\n''') == '5'\n\nassert solution('''\n1 1\n0\n''') == '1'\n\nassert solution('''\n1 1\n2\n''') == '0'\n\nassert solution('''\n2 1\n2 2\n''') == '0'\n\nassert solution('''\n4 1\n0 2 0 0\n''') == '4'\n\nassert solution('''\n4 1\n0 1 0 0\n''') == '6'\n\nassert solution('''\n5 1\n0 0 0 0 0\n''') == '16'\n\nassert solution('''\n10 1\n1 0 2 0 1 0 2 0 1 0\n''') == '512'\n\nassert solution('''\n2 2\n-2 2\n''') == '15'\n\nassert solution('''\n3 2\n-2 2 2\n''') == '64'\n\nassert solution(''", "solution('''\n3 1\n0 0 0\n''') == '10'\n\nassert solution('''\n3 2\n0 0 0\n''') == '228'\n\nassert solution('''\n3 50\n50 50 50\n''') == '6'\n\nassert solution('''\n1 0\n0\n''') == '2'\n\nassert solution('''\n1 1\n1\n''') == '1'\n\nassert solution('''\n1 1\n0\n''') == '1'\n\nassert solution('''\n2 0\n0 0\n''') == '4'\n\nassert solution('''\n2 0\n1 1\n''') == '0'\n\nassert solution('''\n2 1\n1 1\n''') == '2'\n\nassert solution('''\n2 1\n0 0\n''') == '2'\n\nassert solution('''\n3 1\n0 0 0\n''') == '10'\n\nassert solution('''\n3 2\n0 0 0\n''') == '228'\n\nassert solution('''\n4 1\n0 0 0 0\n''') == '52'\n\nassert solution('''\n4 2\n0 0 0 0\n''') == '5892'\n\nassert solution('''\n4 3\n0 0 0 0\n", "solution(\"0 0\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"3 2\") == \"93\"\nassert solution(\"5 1\") == \"878\"\nassert solution(\"5 50\") == \"876\"\nassert solution(\"5 49\") == \"874\"\nassert solution(\"5 48\") == \"872\"\nassert solution(\"5 47\") == \"870\"\nassert solution(\"5 46\") == \"868\"\nassert solution(\"5 45\") == \"866\"\nassert solution(\"5 44\") == \"864\"\nassert solution(\"5 43\") == \"862\"\nassert solution(\"5 42\") == \"860\"\nassert solution(\"5 41\") == \"858\"\nassert solution(\"5 40\") == \"856\"\nassert solution(\"5 39\") == \"854\"\nassert solution(\"5 38\") == \"852\"\nassert solution(\"5 37\") == \"850\"\nassert solution(\"5 36\") == \"848\"\nassert solution(\"5 35\") == \"846\"\nassert solution(\"5 34\") == \"844\"\nassert solution(\"5 33\") == \"842\"\nassert solution(\"5 32\") == \"840\"\nassert solution(\"5 31\") == \"838\"\nassert solution(\"5 30\") == \"836\""], "finish_reason": ["length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "length"], "sum_logprob": [-121.91607674849513, -119.08730141145, -79.63734960677589, -7.830857008, -116.47914709299552, -13.080334351300001, -23.948127688436, -179.50540858311, -67.913040224164, -17.126521641123983, -96.13704222200008, -119.6510943360339, -11.572428369, -406.6312822753462, -8.5945123343, -106.65293803147004, -150.51993653659505, -165.42969765381196, -9.0834575867, -76.56185059890505, -83.57326166951408, -166.315912262743, -106.27128894156209, -121.33863561745692, -91.51086728299306, -94.87157371896099, -75.85416498487704, -68.14334636989007, -145.51777893218497, -96.15522344435107, -76.91011953313999, -126.34666891111317, -11.615406011, -52.166084203999986, -77.87608804332703, -29.786784201631384, -71.77198045330805, -150.40126164633108, -138.3014998449531, -139.60178146959004, -148.299871843545, -113.45597656428203, -45.84420021113, -107.41849479027297, -28.962427396099997, -137.79415660371797, -30.236044250459997, -124.38824555466597, -86.43632826915596, -69.00178337918905], "mean_logprob": [-0.4063869224949833, -0.3969576713715, -0.26545783202258666, -0.5593469291428571, -0.38826382364331835, -0.81752089695625, -0.07982709229478667, -0.5983513619437, -0.6118291912086847, -0.057088405470413335, -0.32045680740666665, -0.39883698112011334, -0.7714952246, -1.3554376075844867, -0.4774729074611111, -0.6094453601798285, -0.50173312178865, -0.5514323255127067, -0.8257688715181818, -0.25520616866301665, -0.27857753889838, -0.5543863742091434, -0.3542376298052067, -0.40446211872485666, -0.30503622427664334, -0.31623857906320335, -0.5834935768067462, -0.22714448789963335, -0.4850592631072833, -0.32051741148117, -0.7614863320112871, -0.421155563037044, -0.8934927700769231, -1.0867934209166668, -0.25958696014442334, -0.09928928067210467, -0.23923993484436, -0.5013375388211033, -0.4610049994831767, -0.4653392715653, -0.49433290614515, -0.8046523160587375, -0.27616988078993976, -0.35806164930091, -1.158497095844, -0.45931385534572666, -0.5399293616153572, -0.41462748518222, -0.28812109423052, -0.23000594459729667]}
{"prompt": "'''\nLet's call a sequence of integers x_1, x_2, ..., x_k MEX-correct if for all i (1 \u2264 i \u2264 k) |x_i - \\operatorname{MEX}(x_1, x_2, ..., x_i)| \u2264 1 holds. Where \\operatorname{MEX}(x_1, ..., x_k) is the minimum non-negative integer that doesn't belong to the set x_1, ..., x_k. For example, \\operatorname{MEX}(1, 0, 1, 3) = 2 and \\operatorname{MEX}(2, 1, 5) = 0.\n\nYou are given an array a consisting of n non-negative integers. Calculate the number of non-empty MEX-correct subsequences of a given array. The number of subsequences can be very large, so print it modulo 998244353. \n\nNote: a subsequence of an array a is a sequence [a_{i_1}, a_{i_2}, ..., a_{i_m}] meeting the constraints 1 \u2264 i_1 < i_2 < ... < i_m \u2264 n. If two different ways to choose the sequence of indices [i_1, i_2, ..., i_m] yield the same subsequence, the resulting subsequence should be counted twice (i. e. two subsequences are different if their sequences of indices [i_1, i_2, ..., i_m] are not the same).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 5 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 n).\n\nThe sum of n over all test cases doesn't exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single integer \u2014 the number of non-empty MEX-correct subsequences of a given array, taken modulo 998244353.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''3\n5\n1 0 1 3 2\n4\n2 0 1 3\n4\n2 2 2 2''') == '''10\n6\n8'''", "solution('''\n4\n4\n1 0 1 3\n4\n2 1 5\n1\n1\n2\n0 1\n''') == '''\n3\n3\n1\n2\n'''", "solution(r'''\n\n''') == r'''\n\n'''\n\n# test speed of solution\n# timeit.timeit('solution(r\"\"\"\\n\"\"\")', number=10, globals=globals())", "solution(\"\") == \"\"\n\n# check the performance of solution\nassert solution(\"\") == \"\"", "solution(open('filename').read()) == open('filename').read()", "(solution('''\\\n4\n4\n0 0 0 1\n3\n0 0 0\n3\n1 0 0\n1\n1''') == '''\\\n13\n7\n7\n1''')\n# TODO test performance (run the solution and measure the time)\n\n# TODO write performance tests based on knowledge about the problem's complexity\n# TODO submit this solution to CodeForces\n# TODO come up with a more optimal solution\n# TODO submit this more optimal solution to CodeForces\n# TODO update this comment to reflect your conclusions and improvements", "solution(\"123\") == \"321\"", "solution('''\n1\n4\n1 0 1 3\n''') == '''\n'''\n\n# get input and run solution\ninput = [line.strip() for line in sys.stdin][1:]\nprint(solution('\\n'.join(input)))", "solution(\"\"\"5\n5\n1 0 1 3 2\n5\n2 1 5 2 1\n5\n1 1 0 1 1\n5\n0 0 0 0 0\n5\n0 1 0 1 0\"\"\") == \"\"\"15\n20\n6\n1\n6\"\"\"", "solution(r'''\n1\n5\n0 1 2 3 4\n''') == r'''\n66\n'''\n\n# submit solution\nif __name__ == '__main__':\n    import os\n    if os.path.exists('input.txt'):\n        with open('input.txt', 'r') as f:\n            print(solution(f.read()))\n    else:\n        print(solution(r'''\n1\n5\n0 1 2 3 4\n        '''))", "solution(\"\"\"\n1\n7\n1 0 1 2 0 1 2\n\"\"\") == \"32\"\nassert solution(\"\"\"\n3\n3\n1 2 0\n3\n0 1 0\n3\n1 0 0\n\"\"\") == \"2\"", "solution('''\n1\n5\n1 0 1 3 2\n''') == '19'\n\nassert solution('''\n1\n2\n3 4\n''') == '3'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '22'\n\nassert solution('''\n1\n3\n1 2 3\n''') == '3'\n\nassert solution('''\n1\n5\n0 0 0 0 0\n''') == '1'\n\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == '1'\n\nprint('PASSED')", "solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n3\n'''\n\nassert solution('''\n1\n5\n2 3 3 4 5\n''') == '''\n12\n'''\n\nassert solution('''\n1\n5\n1 2 2 3 4\n''') == '''\n16\n'''\n\nassert solution('''\n1\n5\n2 2 3 3 3\n''') == '''\n1\n'''\n\nassert solution('''\n1\n5\n0 1 2 3 4\n''') == '''\n5\n'''\n\nassert solution('''\n1\n5\n0 1 0 2 3\n''') == '''\n10\n'''\n\nassert solution('''\n1\n5\n0 1 0 2 0\n''') == '''\n1\n'''\n\nassert solution('''\n1\n5\n0 0 0 0 0\n''') == '''\n1\n'''\n\nassert solution('''\n1\n5\n0 1 0 1 0\n''') == '''\n1\n'''\n\n# a very slow solution\ndef solution_slow(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    res = []\n    for t in range", "solution('''\n1\n3\n1 1 1\n''') == '7'\n\nassert solution('''\n1\n3\n2 1 3\n''') == '10'\n\nassert solution('''\n1\n1\n0\n''') == '1'\n\nassert solution('''\n1\n4\n0 0 0 0\n''') == '20'\n\nassert solution('''\n1\n4\n1 2 3 0\n''') == '40'\n\nassert solution('''\n1\n5\n1 2 3 0 0\n''') == '83'\n\nassert solution('''\n1\n5\n2 3 0 0 0\n''') == '103'\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '1'\n\nassert solution('''\n1\n5\n5 4 3 2 1\n''') == '1'\n\nassert solution('''\n1\n5\n5 0 0 1 2\n''') == '25'\n\nassert solution('''\n1\n5\n5 0 0 1 1\n''') == '20'\n\nassert solution('''\n1\n5\n5 0 0 0 0\n''') == '90'\n\nassert solution('''\n1\n5\n0 0 0 0 0\n''') == '106'\n", "solution(r'''\n1\n5\n1 2 0 1 3\n''') == r'''\n5\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n5\n2 3 3 4 4\n''') == r'''\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n3\n1 0 0\n''') == r'''\n2\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n5\n0 1 2 3 4\n''') == r'''\n32\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n5\n1 1 1 1 1\n''') == r'''\n6\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4\n2 3 3 4\n''') == r'''\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n3\n1 0 1\n''') == r'''\n2\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n5\n1 2 1 1 1\n''') == r'''\n2\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n5", "solution(r'''\n1\n5\n1 0 1 3 4\n''') == r'''\n3\n'''\n\n# stress testing\nfrom random import randint, randrange\nfrom string import ascii_letters\nfrom time import time\n\nMAX_N = 10**5\nMAX_A = 10**5\n\ndef solution_t(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    testcases = int(stdin[0])\n    for i in range(1, testcases*2, 2):\n        n = int(stdin[i])\n        a = [int(s) for s in stdin[i+1].split()]\n        assert len(a) == n\n        assert all(0 <= x <= MAX_A for x in a)\n        ans = solution(stdin[i:i+2])\n        assert 1 <= len(ans) <= 10**5, f'{len(ans)}'\n        assert all(ch in ascii_letters for ch in ans), f'{ans}'\n    return 'Correct'\n\ndef generate_test():\n    n = randint(1, MAX_N)\n    a = [randint(0, MAX_A) for _ in range(n)]\n    return '\\n'.join", "solution('''\n1\n5\n0 1 0 3 2\n''') == '6'\n\n# load the data\nwith open('input.txt') as f:\n    stdin = f.read()\n\n# get the output\noutput = solution(stdin)\n\n# save the output to file\nwith open('output.txt', 'w') as f:\n    f.write(output)", "(solution('1\\n5\\n0 0 0 0 0') == '6')\nassert (solution('1\\n5\\n0 0 0 1 0') == '8')\nassert (solution('1\\n5\\n0 0 0 1 2') == '16')\nassert (solution('1\\n5\\n0 0 0 1 3') == '22')\nassert (solution('1\\n5\\n0 0 0 1 4') == '28')\nassert (solution('1\\n5\\n0 0 0 1 5') == '34')\nassert (solution('1\\n5\\n0 0 0 1 6') == '42')\nassert (solution('1\\n5\\n0 0 0 1 7') == '50')\nassert (solution('1\\n5\\n0 0 0 1 8') == '60')\nassert (solution('1\\n5\\n0 0 0 1 9') == '70')\nassert (solution('1\\n5\\n0 0 0 1 10') == '80')\nassert (solution('1\\n5\\n0 0 0 1 11') == '92')\nassert (solution('1\\n5\\n0 0 0 1 12') == '104')\nassert (solution('1\\n5\\n0 0 0 1", "solution('''\n1\n4\n1 1 2 3\n''') == '12'\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '8'\nassert solution('''\n1\n1\n1\n''') == '2'\nassert solution('''\n1\n3\n1 3 2\n''') == '6'\nassert solution('''\n1\n3\n1 2 2\n''') == '6'\nassert solution('''\n1\n5\n5 4 4 4 5\n''') == '4'\nassert solution('''\n1\n4\n2 3 3 2\n''') == '6'\nassert solution('''\n1\n4\n1 2 2 1\n''') == '12'\nassert solution('''\n1\n4\n0 1 0 2\n''') == '12'\nassert solution('''\n1\n4\n0 1 0 0\n''') == '6'\nassert solution('''\n1\n4\n0 0 0 0\n''') == '6'\nassert solution('''\n1\n4\n1 2 3 4\n''') == '8'\nassert solution('''\n1\n5\n0 0 0 0 0\n''') == '6'\nassert solution('''\n1\n5\n1 2 3 4 5\n''", "solution(test_data) == test_output\n \n# run solutions with system input\nfrom solutions.modular_fibonacci import solution\nfrom runner import run_solution\nfrom contextlib import redirect_stdout\nimport sys\nimport io\nfrom datetime import datetime\n\ninput = None\nwith open('/input.txt') as f:\n    input = f.read()\n\noutput = None\nwith io.StringIO() as buf, redirect_stdout(buf):\n    start = datetime.now()\n    run_solution(solution, input)\n    output = buf.getvalue()\n    end = datetime.now()\n    print('Elapsed time:', end - start)\n\nwith open('/output.txt', 'w') as f:\n    f.write(output)", "solution('''\n1\n5\n1 0 1 3 2\n''') == '10'\n\nassert solution('''\n1\n5\n1 1 0 1 1\n''') == '5'\n\nassert solution('''\n1\n3\n3 2 1\n''') == '3'\n\nassert solution('''\n1\n5\n5 4 3 2 1\n''') == '15'\n\nassert solution('''\n1\n5\n5 4 3 1 1\n''') == '9'\n\nassert solution('''\n1\n1\n0\n''') == '1'\n\nassert solution('''\n1\n1\n1\n''') == '1'\n\nassert solution('''\n1\n2\n0 1\n''') == '3'\n\nassert solution('''\n1\n2\n1 0\n''') == '3'\n\nassert solution('''\n1\n2\n1 1\n''') == '2'\n\nassert solution('''\n1\n3\n0 1 1\n''') == '4'\n\nassert solution('''\n1\n3\n1 0 1\n''') == '5'\n\nassert solution('''\n1\n3\n1 1 0\n''') == '5'\n\nassert solution('''\n1\n3\n1 1 1\n", "solution('''2\n3\n1 0 1\n3\n2 1 5''') == '''4\n9'''", "solution(read('tests/12.in')) == read('tests/12.ans')", "solution('''\n''') == '''\n'''", "solution('''\n3\n3\n1 2 0\n3\n0 1 2\n3\n0 1 3\n''') == '''\n2\n7\n2\n'''", "solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert", "solution(input()) == output", "solution(SAMPLE_INPUT) == '\\n'.join(SAMPLE_OUTPUT)", "solution('''\n2\n5\n1 0 1 3 2\n5\n2 1 5 0 1\n''') == '''\n10\n14\n'''\n\n# this is a template for Hackerrank submission\n\nimport io\nimport sys\n\ndef read(stdin: str) -> str:\n    '''\n    reads the whole stdin and returns it as string\n    '''\n    return stdin\n\ndef main() -> None:\n    '''\n    main function\n    '''\n    stdin = read(sys.stdin.read())\n    stdout = solution(stdin)\n    sys.stdout.write(stdout)\n\nif __name__ == '__main__':\n    main()", "solution('''\ninputs\n''') == '''\noutputs\n'''", "solution(example) == '''\\\n1\n'''", "solution('''\n2\n3\n1 0 1\n3\n2 1 5\n''') == '''\n7\n3\n'''", "solution(__doc__) == '''\n'''", "solution('''1\n3\n2 1 5''') == '3'\nassert solution('''1\n5\n1 0 1 3 2''') == '22'\nassert solution('''1\n2\n2 3''') == '2'\nassert solution('''1\n2\n0 0''') == '4'\nassert solution('''1\n4\n0 0 0 0''') == '16'\nassert solution('''1\n4\n0 0 1 0''') == '8'\nassert solution('''1\n4\n1 1 0 0''') == '4'\nassert solution('''1\n4\n0 0 0 1''') == '4'\nassert solution('''1\n4\n0 1 0 0''') == '8'\nassert solution('''1\n4\n0 0 0 2''') == '8'\nassert solution('''1\n4\n0 0 2 0''') == '12'\nassert solution('''1\n4\n0 2 0 0''') == '12'\nassert solution('''1\n4\n2 0 0 0''') == '12'\nassert solution('''1\n4\n1 0 0 1''') == '8'\nassert solution('''1\n4\n0 0 1 1''') == '8'\nassert solution('''", "True\n\n# check the correctness of solution with large dataset\nassert True\n\n# check the correctness of solution with large dataset\nassert True", "solution(r'''\n2\n3\n0 1 2\n3\n0 0 0\n''') == r'''\n5\n1\n'''", "solution('''\n5\n5\n1 0 1 3 2\n6\n1 0 1 3 2 0\n4\n2 3 3 3\n4\n3 3 3 3\n1\n1\n''') == '''\n8\n17\n4\n4\n1\n'''", "solution('''\n1\n5\n1 0 1 3 2\n''') == '''\n25\n'''\n\nassert solution('''\n2\n2\n1 0\n3\n2 3 3\n''') == '''\n4\n4\n'''\n\n# write your solution in standard input\nwhile True:\n    print(solution(input()))", "solution(test_input) == test_output\n\nprint(solution(stdin))", "solution('''\nT\nN\n''') == '''\n'''", "(solution('''3\n3\n0 1 2\n3\n1 0 1\n3\n1 0 2''') == '''4\n3\n3''')", "solution(\"\\n\".join([\n    \"1\",\n    \"4\",\n    \"0 0 1 3\"\n])) == \"2\"\n\nassert solution(\"\\n\".join([\n    \"1\",\n    \"3\",\n    \"2 1 5\"\n])) == \"3\"\n\nassert solution(\"\\n\".join([\n    \"2\",\n    \"3\",\n    \"2 1 5\",\n    \"3\",\n    \"1 1 1\"\n])) == \"3\\n4\"\n\nassert solution(\"\\n\".join([\n    \"1\",\n    \"5\",\n    \"0 3 3 3 5\"\n])) == \"10\"\n\nassert solution(\"\\n\".join([\n    \"1\",\n    \"10\",\n    \"0 0 1 2 2 3 4 5 5 7\"\n])) == \"46\"\n\nassert solution(\"\\n\".join([\n    \"1\",\n    \"5\",\n    \"0 0 1 2 4\"\n])) == \"1\"\n\nassert solution(\"\\n\".join([\n    \"1\",\n    \"7\",\n    \"0 0 0 2 3 4 5\"\n])) == \"6\"\n\nassert solution(\"\\n\".join([\n    \"1\",\n    \"6\",\n    \"0 0 1 2 3 4\"\n])) ==", "(solution('''\n2\n5\n1 0 1 3 2\n5\n2 1 5 0 0\n''') == '''\n8\n16\n''')\n# =============================", "solution('''\n3\n3\n1 2 1\n3\n0 0 0\n3\n1 2 3\n''') == '''\n8\n1\n2\n'''", "solution(stdin) == stdout", "solution(\"\"\"1\n3\n1 1 2\"\"\") == \"\"\"3\"\"\"\n\nassert solution(\"\"\"2\n3\n1 1 2\n5\n2 1 3 4 3\"\"\") == \"\"\"3\n16\"\"\"\n\nassert solution(\"\"\"1\n5\n0 0 0 0 0\"\"\") == \"\"\"16\"\"\"\n\nassert solution(\"\"\"1\n1\n0\"\"\") == \"\"\"1\"\"\"\n\nassert solution(\"\"\"1\n5\n1 0 1 2 1\"\"\") == \"\"\"14\"\"\"\n\nassert solution(\"\"\"1\n3\n0 1 2\"\"\") == \"\"\"3\"\"\"\n\nassert solution(\"\"\"1\n5\n0 1 0 2 1\"\"\") == \"\"\"12\"\"\"\n\nassert solution(\"\"\"1\n4\n1 0 2 1\"\"\") == \"\"\"8\"\"\"\n\nassert solution(\"\"\"1\n5\n0 0 0 1 1\"\"\") == \"\"\"12\"\"\"\n\nassert solution(\"\"\"1\n1\n1\"\"\") == \"\"\"0\"\"\"\n\nassert solution(\"\"\"1\n2\n0 1\"\"\") == \"\"\"2\"\"\"\n\nassert solution(\"\"\"1\n3\n0 0 1\"\"\") == \"\"\"3\"\"\"\n\nassert solution(\"\"\"1\n3\n1 0 1\"\"\") == \"\"\"4\"\"\"\n\nassert solution(\"\"\"1\n3\n1 1 1\"\"\") == \"\"\"2\"\"\"\n\nassert solution(\"\"\"1\n4\n0 0 0 0\"\"\") == \"\"\"10\"\"\"\n\nassert", "solution(stdin) == stdout\n\nprint('\\n\\n\\n')\n\n# %% Test\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''\nstdout = '''\n'''\n\nstdin = '''\n'''", "solution('''\n1\n5\n1 0 1 3 5\n''') == '''\n8\n'''\n\nassert solution('''\n2\n2\n0 1\n1\n1\n''') == '''\n1\n0\n'''\n\nassert solution('''\n3\n3\n0 0 0\n4\n1 2 3 4\n5\n0 0 0 0 0\n''') == '''\n1\n16\n1\n'''\n\nassert solution('''\n2\n2\n0 0\n2\n1 1\n''') == '''\n1\n0\n'''\n\n# print solution\nwith open('solution.out', 'w+') as f:\n    f.write(solution(open('input.in', 'r').read()))", "solution('''4\n4\n2 3 3 3\n4\n0 2 3 3\n1\n1\n1\n1''') == '''7\n4\n1\n1'''", "solution('''\n1\n5\n0 0 0 0 0\n''') == '31258'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 0\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n2 2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 1 1 1\n''') == '16'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 0 0\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n0 0 0 0 1\n''') == '31258'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == '28'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n0 1 0 1 0\n''') == '31259'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n0 0 0 0 3\n''') == '15629'\n\n#"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length"], "sum_logprob": [-30.152871767800004, -23.039322255229997, -26.4666217221, -11.355590031999997, -14.303797554999996, -179.51308312760804, -11.729664203999997, -29.530470829426005, -42.64377143386, -37.296671936206, -50.550727190399996, -63.63539191959, -114.6555448547347, -118.98197461507209, -83.98485947633307, -123.06554829822097, -42.10224472519, -54.700098670972025, -116.24813402280893, -107.58344899814297, -76.17555412685697, -15.137037146599999, -20.852032531330003, -6.027714274999999, -27.8462228753, -15.358054571230003, -7.87589191, -14.016190109360002, -89.22523318708502, -12.840908546000001, -16.097360376, -12.8653262592, -9.2153374858, -90.87763510183144, -23.320218934, -17.377023212399997, -47.364937935050015, -63.89262625519001, -12.566860266759997, -16.54808484, -27.4766943119, -107.29806570904901, -33.050070505, -25.304128547600012, -5.2164134007, -121.33846765597507, -47.59426169742691, -75.02607299447102, -36.768305903, -111.14984090715798], "mean_logprob": [-0.7538217941950001, -0.5008548316354348, -0.4901226244833333, -0.5407423824761904, -0.8939873471875, -1.4134888435244723, -1.3032960226666666, -0.4762979166036452, -0.7227757870145762, -0.3134174112286218, -0.9191041307345454, -0.4419124438860417, -0.3821851495157823, -0.39660658205024, -0.279949531587777, -0.4102184943274033, -0.45763309483902176, -0.18233366223657332, -0.38749378007603, -0.5784056397749624, -0.25391851375619, -0.5406084695214286, -0.9929539300633333, -0.43055101964285714, -0.6961555718825, -0.05119351523743333, -1.1251274157142857, -0.6093995699721739, -0.5407589890126364, -0.6420454273, -1.1498114554285714, -0.4020414456, -0.7088721142923077, -0.30292545033943835, -0.8041454804827586, -0.5110889180117647, -0.7764743923778689, -0.7791783689657317, -0.5984219174647619, -0.9193380466666666, -0.7426133597810811, -0.3576602190301633, -0.8060992806097561, -0.6326032136899999, -0.5796014889666666, -0.40446155885325, -0.15864753899142334, -0.42628450565040343, -0.8754358548333333, -0.37049946969052666]}
{"prompt": "'''\nMonocarp is playing yet another computer game. In this game, his character has to kill a dragon. The battle with the dragon lasts 100^{500} seconds, during which Monocarp attacks the dragon with a poisoned dagger. The i-th attack is performed at the beginning of the a_i-th second from the battle start. The dagger itself does not deal damage, but it applies a poison effect on the dragon, which deals 1 damage during each of the next k seconds (starting with the same second when the dragon was stabbed by the dagger). However, if the dragon has already been poisoned, then the dagger updates the poison effect (i.e. cancels the current poison effect and applies a new one).\n\nFor example, suppose k = 4, and Monocarp stabs the dragon during the seconds 2, 4 and 10. Then the poison effect is applied at the start of the 2-nd second and deals 1 damage during the 2-nd and 3-rd seconds; then, at the beginning of the 4-th second, the poison effect is reapplied, so it deals exactly 1 damage during the seconds 4, 5, 6 and 7; then, during the 10-th second, the poison effect is applied again, and it deals 1 damage during the seconds 10, 11, 12 and 13. In total, the dragon receives 10 damage.\n\nMonocarp knows that the dragon has h hit points, and if he deals at least h damage to the dragon during the battle \u2014 he slays the dragon. Monocarp has not decided on the strength of the poison he will use during the battle, so he wants to find the minimum possible value of k (the number of seconds the poison effect lasts) that is enough to deal at least h damage to the dragon.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of the test case contains two integers n and h (1 \u2264 n \u2264 100; 1 \u2264 h \u2264 10^{18}) \u2014 the number of Monocarp's attacks and the amount of damage that needs to be dealt.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9; a_i < a_{i + 1}), where a_i is the second when the i-th attack is performed.\n\nOutput\n\nFor each test case, print a single integer \u2014 the minimum value of the parameter k, such that Monocarp will cause at least h damage to the dragon.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"input\") == \"output\"", "solution(input()) == output()\n```", "solution('''\n1\n1 1\n1\n''') == '1'\n\n# test the performance of solution\nfrom random import randint\nfrom time import time\n\nn = 1000\nh = int(1e18)\na = [i for i in range(1, n + 1)]\n\nprint('n = {}'.format(n))\nprint('h = {}'.format(h))\nprint('a = {}'.format(a))\n\nstart = time()\nfor i in range(1, n + 1):\n    solution('''\n1\n{} {}\n{}\n'''.format(i, h, a[:i]))\nend = time()\n\nprint('total time = {}ms'.format((end - start) * 1000))", "solution('''\n2\n4 10\n2 4 10 12\n2 3\n2 3\n''') == '''\n1\n2\n'''", "solution('''\n1\n5 100\n1 2 3 4 5\n''') == '''\n4\n'''\nassert solution('''\n2\n2 1\n4 5\n3 2\n3 4 5\n''') == '''\n1\n1\n'''\nassert solution('''\n1\n5 1000000000\n1 2 3 4 5\n''') == '''\n63\n'''\nassert solution('''\n1\n1 10000000000000000000\n1\n''') == '''\n10000000000000000000\n'''\nassert solution('''\n1\n5 1000000000000000000\n1 2 3 4 5\n''') == '''\n10000000000000000000\n'''\n\n# test speed of solution\n# stdin = open('input.txt', 'r')\n# result = open('my_output.txt', 'w')\n# start = time.time()\n# solution(stdin, result)\n# end = time.time()\n# print(end - start)\n# result.close()\n# stdin.close()", "solution('''\n2\n5 10\n2 4 5 10 15\n4 8\n1 5 10 20\n''') == '''\n3\n4\n'''", "solution('''\n1\n5 5\n1 2 4 7 9\n''') == '''\n3\n'''\n\n# check if solution gives the right answer on large input values\n#assert solution('''\n#1\n#''') == '''\n#'''", "solution('''\n1\n10 7\n2 5 6 10 11 14 20 23 24 34\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5 3\n1 2 5 6 9\n3 2\n1 5 7\n''') == '''\n3\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 7\n2 5 6 10 11 14 20 23 24 34\n''') == '''\n4\n'''", "solution(\"\"\"1\n3 100\n2 3 4\n\"\"\") == \"3\", \"Your Solution is wrong!\"\nassert solution(\"\"\"1\n1 100\n1\n\"\"\") == \"100\", \"Your Solution is wrong!\"\nassert solution(\"\"\"2\n5 100\n1 2 3 4 5\n2 3\n\"\"\") == \"2\", \"Your Solution is wrong!\"", "solution(\"\"\"\\\n4\n3 10\n2 3 5\n2 10\n3 6\n3 10\n1 3 5\n1 10\n1\n\"\"\") == \"\"\"\\\n2\n2\n2\n1\n\"\"\"\n\nassert solution(\"\"\"\\\n1\n4 20\n4 8 10 12\n\"\"\") == \"\"\"\\\n3\n\"\"\"\n\nassert solution(\"\"\"\\\n1\n3 20\n5 8 10\n\"\"\") == \"\"\"\\\n5\n\"\"\"\n\nassert solution(\"\"\"\\\n1\n3 20\n5 10 15\n\"\"\") == \"\"\"\\\n5\n\"\"\"\n\nassert solution(\"\"\"\\\n1\n3 20\n1 4 7\n\"\"\") == \"\"\"\\\n7\n\"\"\"\n\nassert solution(\"\"\"\\\n1\n3 20\n1 4 10\n\"\"\") == \"\"\"\\\n6\n\"\"\"\n\nassert solution(\"\"\"\\\n1\n3 20\n1 6 10\n\"\"\") == \"\"\"\\\n5\n\"\"\"\n\nassert solution(\"\"\"\\\n1\n5 20\n1 5 7 9 11\n\"\"\") == \"\"\"\\\n4\n\"\"\"\n\nassert solution(\"\"\"\\\n1\n5 20\n1 5 7 9 15\n\"\"\") == \"\"\"\\\n4\n\"\"\"\n\nassert solution(\"\"\"\\\n1\n5 20\n1 5 7 9 19\n\"\"\") == \"\"\"\\\n3\n\"\"\"\n\nassert solution(\"\"\"\\\n1\n5 20", "solution(SAMPLE) == SAMPLE_RESULT\n\n# check the correctness of solution for small\nassert solution(SMALL) == SMALL_RESULT\n\n# check the correctness of solution for large\nassert solution(LARGE) == LARGE_RESULT\n\n# get inputs from stdin\nt = int(input())\nfor test_index in range(t):\n    n, h = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    print(solution(t, n, h, a))", "solution('''\n1\n7 10\n1 2 3 4 5 6 7\n''') == '''\n4\n'''\nassert solution('''\n1\n2 3\n4 7\n''') == '''\n2\n'''\nassert solution('''\n1\n3 4\n1 2 3\n''') == '''\n1\n'''\nassert solution('''\n1\n10 1234\n1 3 5 7 11 13 17 19 23 29\n''') == '''\n4\n'''\nassert solution('''\n1\n6 8\n1 2 3 4 5 6\n''') == '''\n3\n'''\nassert solution('''\n1\n5 8\n1 2 2 4 5\n''') == '''\n2\n'''\nassert solution('''\n1\n5 8\n1 2 2 4 5\n''') == '''\n2\n'''\nassert solution('''\n1\n5 9\n1 2 2 4 5\n''') == '''\n3\n'''\nassert solution('''\n1\n3 11\n1 2 3\n''') == '''\n5\n'''\nassert solution('''\n1\n6 20\n1 2 3 4 5 6\n''') == '''\n6\n'''\nassert solution('''\n1\n3 25\n1 2 3\n''') ==", "solution(\"1\") == \"1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"5\") == \"5\"\nassert solution(\"25\") == \"5\"\nassert solution(\"6\") == \"6\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"6\"\nassert solution(\"7\") == \"7\"\nassert solution(\"8\") == \"8\"\nassert solution(\"9\") == \"9\"\nassert solution(\"10\") == \"10\"\nassert solution(\"11\") == \"11\"\nassert solution(\"12\") == \"12\"\nassert solution(\"13\") == \"13\"\nassert solution(\"14\") == \"14\"\nassert solution(\"15\") == \"15\"\nassert solution(\"16\") == \"16\"\nassert solution(\"17\") == \"17\"\nassert solution(\"18\") == \"18\"\nassert solution(\"19\") == \"19\"\nassert solution(\"20\") == \"20\"\nassert solution(\"21\") == \"21\"\nassert solution(\"22\") == \"22\"\nassert solution(\"23\") == \"23\"\nassert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"25\"\nassert solution(\"26\") == \"26\"\nassert", "solution('''\n2\n5 3\n2 4 10 13 15\n5 2\n1 3 5 7 9\n''') == '''\n3\n3\n'''", "solution('''\n3\n3 10\n2 3 9\n3 13\n2 3 9\n1 12\n23\n''') == '''\n4\n4\n7\n'''", "solution('''\n2\n4 10\n2 4 10 15\n4 6\n1 3 5 7\n''') == '''\n7\n3\n'''", "solution(\"\"\"\n1\n5 12\n2 4 10 12 13\n\"\"\") == \"\"\"\n4\n\"\"\"\n\nassert solution(\"\"\"\n1\n3 15\n3 5 7\n\"\"\") == \"\"\"\n5\n\"\"\"\n\nassert solution(\"\"\"\n1\n4 8\n4 5 6 7\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n1\n2 3\n2 3\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n7 1000000000\n1 2 3 4 5 6 7\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n2 1000000000000000000\n7 8888888888888888888\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n2 1000000000000000000\n1 8888888888888888888\n\"\"\") == \"\"\"\n8888888888888888888\n\"\"\"\n\nassert solution(\"\"\"\n1\n5 1000000000000000000\n5 4 3 2 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n1 1000000000000000000\n1\n\"\"\") == \"\"\"\n8888888888888888888\n\"\"\"\n\nassert solution(\"\"\"\n1\n2 1000000000000000000\n1 2\n\"\"\") == \"\"\"\n8888888888888888888\n\"\"\"\n\nassert solution(\"\"\"\n1\n3 1000000000000000000", "solution('''\n1\n4 6\n1 2 5 6\n''') == '''\n2\n'''\nassert solution('''\n1\n4 5\n1 2 5 6\n''') == '''\n1\n'''\nassert solution('''\n1\n4 1\n1 2 5 6\n''') == '''\n4\n'''\nassert solution('''\n1\n1 1\n1\n''') == '''\n1\n'''\nassert solution('''\n1\n1 10\n1\n''') == '''\n1\n'''\nassert solution('''\n1\n2 10\n1 3\n''') == '''\n2\n'''\nassert solution('''\n1\n2 9\n1 3\n''') == '''\n1\n'''\nassert solution('''\n1\n4 12\n1 2 4 5\n''') == '''\n3\n'''\nassert solution('''\n1\n6 4\n1 2 3 4 5 6\n''') == '''\n1\n'''\nassert solution('''\n1\n6 5\n1 2 3 4 5 6\n''') == '''\n2\n'''\nassert solution('''\n1\n6 6\n1 2 3 4 5 6\n''') == '''\n3\n'''\nassert solution('''\n1\n", "solution(\"\"\"\n4\n1 1\n1\n1 1\n2\n2 1\n1 2\n2 2\n1 2\n\"\"\") == \"\"\"\n1\n1\n1\n2\n\"\"\"", "solution(\"\"\"\n3\n3 10\n2 4 10\n3 11\n2 4 10\n3 12\n2 4 10\n\"\"\") == \"\"\"\n4\n3\n2\n\"\"\"", "solution('''\n1\n4 8\n1 2 4 10\n''') == '4'\n\nassert solution('''\n3\n3 9\n2 3 5\n1 3\n1 2 3\n3 100\n10 20 30\n''') == '''\n3\n1\n30\n'''", "solution(\"1\\n3 5\\n1 2 4\") == \"3\"\nassert solution(\"2\\n3 5\\n1 2 4\\n3 5\\n2 3 5\") == \"3\\n1\"\nassert solution(\"3\\n3 5\\n1 2 4\\n3 5\\n2 3 5\\n3 5\\n1 2 5\") == \"3\\n1\\n2\"\n\n# obtain input from stdin\nT = int(input())\ninputs = [input() for _ in range(T)]\nstdin = \"\\n\".join(inputs)\n\n# print solution\nprint(solution(stdin))", "solution(r'''\n3\n3 2\n1 3 5\n2 3\n7 10\n2 10\n2 100\n''') == r'''\n2\n5\n10\n'''", "solution(\"\"\"\n3\n3 8\n2 4 10\n3 8\n1 4 7\n3 8\n1 2 3\n\"\"\") == \"\"\"\n3\n2\n3\n\"\"\"", "solution('''1\n\n''') == '''1'''\n\n# get the input\nwith open('input.txt', 'r') as f:\n    T = int(f.readline())\n    for t in range(T):\n        input_data = f.readline()\n        with open('output.txt', 'a') as f:\n            f.write(solution(input_data) + '\\n')", "solution('''2\n4 8\n2 4 10 12\n4 8\n1 2 3 4''') == '''4\n3'''", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution('''\n1\n4 10\n2 4 10 14\n''') == '4'\n\nassert solution('''\n1\n4 10\n2 6 10 12\n''') == '3'\n\nassert solution('''\n1\n4 10\n1 2 4 8\n''') == '9'\n\nassert solution('''\n2\n4 10\n2 4 10 14\n4 10\n2 6 10 12\n''') == '4\\n3'\n\nassert solution('''\n1\n1 2\n1\n''') == '2'\n\n# get input and print output\nif __name__ == '__main__':\n    text = input()\n    print(solution(text))", "solution('''\n1\n5 7\n1 2 3 5 6\n''') == '4'\n\nassert solution('''\n1\n5 10\n1 2 3 5 6\n''') == '1'\n\nassert solution('''\n2\n4 17\n1 3 5 7\n2 3\n1 1000000000\n''') == '''\n5\n0\n'''", "solution('''\n1\n4 10\n2 4 10 30\n''') == '7'\nassert solution('''\n3\n3 100\n3 6 9\n1 1\n1\n3 2\n3 6 9\n''') == '1\\n0\\n0'\n\nif __name__ == '__main__':\n    import os\n    print(solution(open(os.path.join(__file__.rsplit('/', 1)[0], 'input.txt'), 'r').read()))", "(solution(SAMPLE_DATA) == EXPECTED_RESULT)", "solution(\"\"\"\n1\n2 3\n1 2\n\"\"\") == \"3\", \"solution is wrong\"\nassert solution(\"\"\"\n1\n3 10\n1 10 100\n\"\"\") == \"100\", \"solution is wrong\"\nassert solution(\"\"\"\n1\n5 10\n2 3 3 3 4\n\"\"\") == \"1\", \"solution is wrong\"\nassert solution(\"\"\"\n1\n4 5\n1 2 3 4\n\"\"\") == \"4\", \"solution is wrong\"\nassert solution(\"\"\"\n1\n4 1\n1 3 5 6\n\"\"\") == \"3\", \"solution is wrong\"\nassert solution(\"\"\"\n1\n1 1\n1\n\"\"\") == \"1\", \"solution is wrong\"\nassert solution(\"\"\"\n1\n5 1000000000\n1 3 5 7 9\n\"\"\") == \"2\", \"solution is wrong\"\nassert solution(\"\"\"\n1\n5 4\n1 2 5 7 9\n\"\"\") == \"1\", \"solution is wrong\"\nassert solution(\"\"\"\n1\n5 3\n2 3 3 3 4\n\"\"\") == \"2\", \"solution is wrong\"\nassert solution(\"\"\"\n1\n5 3\n1 2 3 4 5\n\"\"\") == \"3\", \"solution is wrong\"\nassert solution(\"\"\"\n1\n5 3\n1 3 5 6 8\n\"\"\") == \"2", "solution(stdin) == stdout", "solution('''\n1\n3 10\n2 4 10\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n4 8\n2 3 4 5\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n5 100\n1 1 1 2 2\n''') == '20'\n\n# check the correctness of solution\nassert solution('''\n1\n3 5\n2 3 4\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n5 1\n1 2 3 4 5\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n10 1000000\n2 3 4 5 6 7 8 9 10 11\n''') == '999999'\n\n# check the correctness of solution\nassert solution('''\n1\n10 1000000\n1 1 1 1 1 1 1 1 1 1\n''') == '1000000'\n\n# check the correctness of solution\nassert solution('''\n1\n5 100\n1 1 1 1 1\n''') == '20'\n\n# check the correctness of solution\nassert solution('''\n1\n5 100\n5 5 5 5 5\n''') == '5'\n\n# check the correctness of solution\nassert solution(''", "solution(\"\"\"\n\"\"\" == \"\"\"\n\"\"\")\n\n# submit the solution\n# add new line to the end of the file\nwith open('FILE.in', 'r+') as f:\n    content = f.read()\n    f.seek(0, 0)\n    f.write(content + '\\n')\n\n# submit the solution\nsubprocess.call([\n    'curl',\n    '-X', 'POST',\n    '--data-binary',\n    '@-',\n    'https://api.susy.asia/codeforces/YOUR_ACCESS_TOKEN/submit/problem/YOUR_CONTEST_ID/YOUR_PROBLEM_ID',\n    '-H', 'Expect:'\n], stdin=open('FILE.in', 'rb'))", "solution('''\n2\n2 3\n3 5\n3 10\n3 7 10\n''') == '''\n1\n1\n'''", "solution('''2\n5 5\n1 2 4 7 9\n6 4\n1 2 3 4 5 6''') == '''2\n1'''", "solution('''\n4\n4 10\n1 2 3 4\n4 10\n2 3 5 6\n5 11\n1 3 5 6 8\n7 10000\n2 5 13 24 30 40 42\n''') == '''\n1\n1\n1\n6\n'''", "solution('''\n3\n3 5\n2 4 10\n3 10\n2 4 10\n3 10\n1 2 10\n''') == '''\n4\n5\n5\n'''", "solution(\"\") == \"\"\nprint(\"passed\")", "solution('''\n2\n4 5\n2 4 10 20\n5 5\n1 2 3 4 5\n''') == '''\n4\n1\n'''", "solution('''\n2\n4 20\n2 4 8 10\n5 40\n2 3 4 8 16\n''') == '''\n5\n5\n'''", "solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\nassert solution(input_5) == output_5\nassert solution(input_6) == output_6\nassert solution(input_7) == output_7\nassert solution(input_8) == output_8\nassert solution(input_9) == output_9\nassert solution(input_10) == output_10\nassert solution(input_11) == output_11\nassert solution(input_12) == output_12\nassert solution(input_13) == output_13\nassert solution(input_14) == output_14\nassert solution(input_15) == output_15\nassert solution(input_16) == output_16\nassert solution(input_17) == output_17\nassert solution(input_18) == output_18\nassert solution(input_19) == output_19\nassert solution(input_20) == output_20\nassert solution(input_21) == output_21\nassert solution(input_22) == output_22\nassert solution(input_23) == output_23\nassert solution(input_24) == output_24\nassert solution(input_25) == output_25\nassert", "solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check performance of solution\n\nimport datetime\nstart = datetime.datetime.now()\nfor _ in range(1000):\n    solution(problem_statement)\nprint(datetime.datetime.now() - start)", "solution(\"\") == \"\"", "solution('''2\n3 5\n2 4 10\n3 5\n3 5 7''') == '''4\n3'''", "solution(\"1\\n\" \"4 2\\n\" \"2 4 7 10\") == \"2\", \"Example1\"\nassert solution(\"1\\n\" \"5 5\\n\" \"1 2 3 4 5\") == \"4\", \"Example2\"\nassert solution(\"1\\n\" \"1 1\\n\" \"100\") == \"100\", \"Example3\"\nassert solution(\"1\\n\" \"3 3\\n\" \"1 2 3\") == \"3\", \"Example4\"\nassert solution(\"1\\n\" \"1 2\\n\" \"1\") == \"2\", \"Example5\"\nassert solution(\"1\\n\" \"5 3\\n\" \"10 40 40 10 40\") == \"1\", \"Example6\"\nassert solution(\"1\\n\" \"10 6\\n\" \"4 1 1 1 6 2 4 4 5 2\") == \"4\", \"Example7\"\nassert solution(\"1\\n\" \"3 2\\n\" \"1 7 11\") == \"2\", \"Example8\"\nassert solution(\"1\\n\" \"1 1\\n\" \"1\") == \"1\", \"Example9\"\nassert solution(\"1\\n\" \"2 2\\n\" \"1 2\") == \"2\", \"Example10\"\nassert solution(\"1\\n\" \"5 9\\n\" \"2 3 4 5 6\") == \"5\", \"Example", "solution('''\n1\n4 10\n1 2 4 10\n''') == '''\n4\n'''\n\n# get input\ndef get_input() -> str:\n    return open('input.txt', 'r').read()\n\n# write output\ndef write_output(output: str) -> None:\n    open('output.txt', 'w').write(output)\n\n# main\nif __name__ == '__main__':\n    write_output(solution(get_input()))", "solution('''\n1\n5 10\n2 2 2 4 5\n''') == '3'\n\nassert solution('''\n1\n8 100\n1 2 3 4 5 6 7 8\n''') == '8'\n\nassert solution('''\n1\n8 200\n1 2 3 4 5 6 7 8\n''') == '16'\n\nassert solution('''\n1\n8 1\n1 2 3 4 5 6 7 8\n''') == '1'\n\nassert solution('''\n1\n3 100\n3 4 5\n''') == '97'\n\nassert solution('''\n1\n3 1000000\n3 4 5\n''') == '999997'\n\nassert solution('''\n2\n5 6\n1 2 3 4 5\n3 1\n1 2 3\n''') == '''\n1\n1\n'''\n\nassert solution('''\n2\n5 10\n1 2 3 4 5\n3 10\n1 2 3\n''') == '''\n2\n3\n'''\n\nassert solution('''\n2\n5 5\n1 2 3 4 5\n3 5\n1 2 3\n''') == '''\n1\n3\n'''\n\n# fast I/O\nimport sys\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open", "'1' == solution('''\n1\n3 7\n3 8 10\n''')\n\nassert '1' == solution('''\n1\n1 7\n3\n''')\n\nassert '2' == solution('''\n1\n1 6\n1\n''')\n\nassert '11' == solution('''\n1\n6 11\n1 2 3 4 5 6\n''')\n\nassert '5' == solution('''\n1\n4 6\n1 2 3 4\n''')\n\nassert '10' == solution('''\n1\n7 11\n1 2 3 4 5 6 7\n''')\n\nassert '3' == solution('''\n1\n2 3\n2 3\n''')\n\nassert '7' == solution('''\n1\n5 10\n1 2 3 4 5\n''')\n\n# print the solution to standard output\n# print(solution(stdin=sys.stdin))"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop"], "sum_logprob": [-8.171627552, -13.85458879024, -73.56255133474, -23.1603084622, -108.24323860918201, -28.591607047, -51.161920707600004, -69.236211644357, -60.014204753710004, -132.24304602618216, -58.87627896167798, -118.58384487675107, -42.462053704571005, -26.722596990200003, -40.10333633276, -23.1621201671, -120.51994287988089, -75.8498609580405, -21.382014040099996, -19.14289505879999, -49.629334544000024, -60.895490141642995, -43.41137442229998, -27.158729477499996, -44.628266276560005, -23.484828789699996, -12.348644217294991, -78.61976485052003, -54.32623690087401, -64.90762190045, -16.204436303, -134.0571627609051, -5.715085223999999, -100.83578762659396, -84.496484517933, -26.6575367734, -26.238503478999995, -68.99868662553997, -28.019817361100003, -10.82202837, -19.3503696779, -33.152674165099995, -14.623381591895495, -37.91757722024001, -5.74051682, -20.545760056, -157.50295812822577, -35.13321597602499, -123.07829896578397, -113.42578800489905], "mean_logprob": [-0.9079586168888889, -1.25950807184, -0.4227732835329885, -0.6811855430058824, -0.46656568366026724, -0.7727461364054053, -0.8251922694774194, -0.5867475563081102, -0.750177559421375, -0.44081015342060664, -0.45997092938810935, -0.3952794829225033, -0.14154017901523666, -0.7032262365842106, -0.9781301544575609, -0.6433922268638889, -0.40173314293293666, -0.252832869860135, -0.4972561404674419, -0.47857237647, -0.740736336477612, -0.41425503497716326, -1.0095668470302326, -0.6789682369375, -0.4462826627656, -0.733900899678125, -0.04116214739098333, -0.49137353031575, -0.6391321988338118, -0.5500645923766949, -0.9532021354705882, -0.44685720920301664, -0.6350094693333334, -0.33611929208864666, -0.44944938573368615, -0.8078041446484848, -0.7496715279714286, -1.1499781104256666, -0.6516236595604651, -0.9018356975, -0.5229829642675675, -0.8960182206783783, -0.048744605306318335, -0.6018663050831746, -0.9567528033333332, -0.6848586685333333, -0.52500986042742, -0.3028725515174569, -0.41026099655261333, -0.5401228000233286]}
{"prompt": "'''\nYou are given a sequence a_1, a_2, ..., a_n consisting of n pairwise distinct positive integers.\n\nFind \\left\u230a \\frac n 2 \\right\u230b different pairs of integers x and y such that: \n\n  * x \u2260 y; \n  * x and y appear in a; \n  * x~mod~y doesn't appear in a. \n\n\n\nNote that some x or y can belong to multiple pairs.\n\n\u230a x \u230b denotes the floor function \u2014 the largest integer less than or equal to x. x~mod~y denotes the remainder from dividing x by y.\n\nIf there are multiple solutions, print any of them. It can be shown that at least one solution always exists.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the sequence.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^6).\n\nAll numbers in the sequence are pairwise distinct. The sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nThe answer for each testcase should contain \\left\u230a \\frac n 2 \\right\u230b different pairs of integers x and y such that x \u2260 y, x and y appear in a and x~mod~y doesn't appear in a. Print the pairs one after another.\n\nYou can print the pairs in any order. However, the order of numbers in the pair should be exactly such that the first number is x and the second number is y. All pairs should be pairwise distinct.\n\nIf there are multiple solutions, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(get_input('set1.in')) == get_input('set1.ans')\nassert solution(get_input('set2.in')) == get_input('set2.ans')\nassert solution(get_input('set3.in')) == get_input('set3.ans')\n\nprint('Passed!')", "solution('''\n2\n2\n2 3\n4\n1 2 3 4\n''') == '''\n2 3\n1 2\n1 3\n1 4\n2 3\n'''\n\nassert solution('''\n2\n3\n3 2 1\n4\n4 1 2 3\n''') == '''\n2 3\n2 1\n3 1\n4 1\n4 2\n'''\n\nassert solution('''\n1\n4\n1 2 3 4\n''') == '''\n2 3\n2 4\n3 4\n'''\n\n# stress testing solution\nif __name__ == '__main__':\n    MAX_LEN = int(1e5)\n    MAX_VAL = int(1e6)\n    while True:\n        n = random.randint(2, MAX_LEN)\n        arr = sorted(random.sample(range(1, MAX_VAL + 1), n))\n        expected = solution(f'1\\n{n}\\n{\" \".join(map(str, arr))}')\n        res = subprocess.run(['python', 'main.py'], input=f'1\\n{n}\\n{\" \".join(map(str, arr))}', encoding='utf-8', stdout=subprocess.PIPE, stderr=subprocess.PIP", "solution('''\n1\n4\n1 2 3 4\n''') == '''\n1 4\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 2 3\n''') == '''\n1 3\n'''\n\nassert solution('''\n3\n3\n1 2 3\n5\n1 3 5 7 11\n8\n1 2 3 4 5 6 7 8\n''') == '''\n1 3\n1 5\n2 3\n2 5\n2 7\n3 7\n'''", "solution(\"\") == \"\", \"expected solution to equal ''\"\nassert solution(\"\") == \"\", \"expected solution to equal ''\"\nassert solution(\"\") == \"\", \"expected solution to equal ''\"\n\n# collect input\ndef collect_input(source: str = __file__) -> str:\n    \"\"\"Collect input from a source file.\n    \n    :param source: optional source file path.\n    :return: a multi-line string.\n    \"\"\"\n    with open(source.replace(\".py\", \".input\"), \"r\", encoding=\"utf-8\") as file:\n        return file.read()\n\n# code for pulling the above into a file for grading purposes\ntry:\n    with open(\"../tests/{}.input\".format(__file__.replace(\".py\", \"\")), \"w\", encoding=\"utf-8\") as file:\n        file.write(collect_input())\nexcept Exception:\n    pass", "solution(\"\\n\".join([\n    \"1\",\n    \"4\",\n    \"3 7 9 5\"\n])) == \"\\n\".join([\n    \"3 7\",\n    \"3 9\",\n    \"3 5\",\n    \"7 5\"\n])\n\nassert solution(\"\\n\".join([\n    \"1\",\n    \"6\",\n    \"2 3 4 7 5 8\"\n])) == \"\\n\".join([\n    \"2 5\",\n    \"2 8\",\n    \"3 4\",\n    \"3 7\",\n    \"3 5\",\n    \"3 8\"\n])\n\nassert solution(\"\\n\".join([\n    \"1\",\n    \"8\",\n    \"1 2 3 5 6 7 8 9\"\n])) == \"\\n\".join([\n    \"1 6\",\n    \"1 7\",\n    \"1 8\",\n    \"1 9\",\n    \"2 3\",\n    \"2 5\",\n    \"2 6\",\n    \"2 7\"\n])\n\nassert solution(\"\\n\".join([\n    \"1\",\n    \"1\",\n    \"1\"\n])) == \"\\n\"\n\n# check the correctness of solution on random generated testcases\nfrom random import randint, seed\n\nfor _ in range(1000):\n    seed(None)\n    n =", "solution('''\n1\n6\n1 3 2 4 5 6\n''') == '''\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n'''\n\nassert solution('''\n1\n3\n3 2 1\n''') == '''\n1 2\n1 3\n2 3\n'''\n\nassert solution('''\n1\n8\n2 3 4 5 7 9 10 11\n''') == '''\n2 3\n2 4\n2 5\n2 7\n2 9\n2 10\n2 11\n3 4\n3 5\n3 7\n3 9\n3 10\n3 11\n4 5\n4 7\n4 9\n4 10\n4 11\n5 7\n5 9\n5 10\n5 11\n7 9\n7 10\n7 11\n9 10\n9 11\n10 11\n'''", "(\n    solution(\n        '''4\n4\n1 2 3 4\n4\n1 2 3 5\n4\n1 2 3 4\n8\n2 3 5 7 11 13 17 19'''\n    )\n    ==\n    '''1 2\n3 4\n1 2\n3 5\n1 2\n3 4\n2 3\n5 7\n3 5\n7 11\n5 7\n11 13\n7 11\n13 17\n11 13\n17 19'''\n)\n\n# simulate the stdin\nsys.stdin = io.StringIO(\n    '''4\n4\n1 2 3 4\n4\n1 2 3 5\n4\n1 2 3 4\n8\n2 3 5 7 11 13 17 19'''\n)\n\n# execute the main program here\n# check the result at http://ideone.com/\n\nif __name__ == '__main__':\n    solution(sys.stdin.read())", "(solution('''\n2\n4\n1 2 3 4\n6\n1 2 3 4 5 6\n''') == '''\n1 4\n3 2\n3 2\n5 1\n''')", "solution(\"2\\n5\\n2 4 8 16 32\\n7\\n1 5 8 13 17 25 29\") == \"8 16\\n8 17\\n8 25\\n8 29\"", "solution('''\n3\n8\n1 2 3 4 6 7 8 9\n3\n7 8 9\n6\n2 3 5 6 7 8\n''') == '''\n1 2\n1 6\n1 8\n2 3\n2 4\n2 7\n3 4\n3 5\n4 5\n4 6\n5 6\n'''", "solution('''\n2\n4\n1 2 3 4\n4\n4 3 2 1\n''') == '''\n1 4\n2 4\n'''", "solution(\"\"\"\n1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\"\n\nprint(\"Passed all tests\")", "solution(\"\"\"\n4\n4\n1 2 3 4\n5\n1 2 3 4 5\n4\n4 2 3 1\n4\n1 2 1 2\n\"\"\") == \"\"\"\n1 2\n1 3\n1 4\n2 3\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 3\n2 4\n\"\"\"", "solution(\"\"\"2\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n\"\"\") == \"\"\"1 2\n1 3\n1 4\n2 3\n2 4\n\"\"\"\n# this should be a valid test case with n=6\nassert solution(\"\"\"1\n6\n1 2 3 4 5 6\n\"\"\") == \"\"\"1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n\"\"\"\n# this should be a valid test case with n=7\nassert solution(\"\"\"1\n7\n1 2 3 4 5 6 7\n\"\"\") == \"\"\"1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n\"\"\"\n# this should be a valid test case with n=8\nassert solution(\"\"\"1\n8\n1 2 3 4 5 6 7 8\n\"\"\") == \"\"\"1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 3\n2 4\n\"\"\"\n# this should be a valid test case with n=9\nassert solution(\"\"\"1\n9\n1 2 3 4 5 6 7 8 9\n\"\"\") == \"\"\"1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n2 3\n2 4\n\"\"\"\n# this should be a valid test case with n=10\nassert solution(\"\"\"1\n10\n1 2 3 4 5", "solution(\"1\\n5\\n1 2 3 4 5\") == \"1 2\\n1 3\\n1 4\\n2 3\\n3 4\", \"Example 1\"\nassert solution(\"1\\n7\\n1 2 3 4 5 6 7\") == \"1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 4\", \"Example 2\"\nassert solution(\"2\\n9\\n1 2 3 4 5 6 7 8 9\\n7\\n1 2 3 4 5 6 7\") == \"1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 4\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\", \"Example 3\"\nassert solution(\"1\\n7\\n1 2 4 5 6 7 10\") == \"1 2\\n1 4\\n1 5\\n1 6\\n1 7\\n2 4\\n4 5\", \"Example 4\"\n\n# ---- Here goes the submission ----\n\ndef to_int(s):\n    return int(s)\n\ndef to_tuple(x):\n    return (x[0], x[1])\n\nif __name__ == \"__main__\":\n    n_tests = int(input())\n    answers = []", "solution('''\n2\n3\n1 2 3\n6\n2 3 4 5 6 7\n''') == '''\n1 3\n2 4\n3 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n1 2\n2 3\n4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n3 4 5 6 7\n''') == '''\n3 4\n4 5\n5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n2 3 4 5 6\n''') == '''\n2 3\n3 4\n4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 6 7 8 9\n''') == '''\n5 6\n6 7\n7 8\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 6 7 8 10\n''') == '''\n5 6\n6 7\n7 8\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 6 7 9 10\n''') == '''\n5 6\n6 7\n7 9\n'''\n\n# check the correctness of solution\n", "solution('''\n2\n5\n2 3 5 8 17\n8\n1 1 1 1 1 1 1 1\n''') == '''\n2 17 \n3 5 \n'''", "solution(\"\"\"\n2\n7\n1 2 5 3 7 6 4\n4\n3 1 2 3\n\"\"\") == \"\"\"\n1 2\n5 6\n3 4\n1 2\n\"\"\"", "solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n1 3\n2 3\n3 4\n3 5\n3 6\n4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 1 2 3\n''') == '''\n1 2\n1 3\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == '''\n1 1\n1 1\n1 1\n1 1\n1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 1 2\n''') == '''\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n''') == '''\n1 3\n2 3\n3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n2 3 4 5 6 7\n''') == '''\n2 3\n3 4\n4 5\n5 6\n6 7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n1 3\n2 3\n3 4\n3 5\n3", "solution(\"\"\"1\n6\n1 2 3 4 5 6\"\"\") == \"\"\"1 2\n1 3\n1 4\n1 5\n1 6\"\"\", \"Case #1: Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n7\n1 2 3 4 5 6 7\"\"\") == \"\"\"1 2\n1 3\n1 4\n1 5\n1 6\n1 7\"\"\", \"Case #2: Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n1 2 3 6\"\"\") == \"\"\"1 2\n1 3\"\"\", \"Case #3: Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n3 7 8 10\"\"\") == \"\"\"3 7\n3 8\n3 10\"\"\", \"Case #4: Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n1 4 6 9\"\"\") == \"\"\"1 4\n1 6\"\"\", \"Case #5: Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n2 3 6 10\"\"\") == \"\"\"2 3\n2 6\n2 10\"\"\", \"Case #6: Wrong answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n4\n1 2 4 8\"\"\") == \"\"\"1 2\n1 4\"\"\", \"Case #7: Wrong", "solution('''\n2\n2\n1 2\n5\n1 4 2 3 2\n''') == '''\n1 2\n2 3 3 4 4 2\n'''", "solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n1 3\n2 3\n2 4\n3 4\n'''\n\n# check the speed of solution\nimport timeit\nprint(timeit.timeit(lambda: solution(stdin), number=1))\n\n# submit solution\nprint(solution(stdin))", "solution('''\n2\n2\n2 3\n2\n1 2\n''') == '''\n1 2\n1 2\n'''\n\n# test the speed of solution\nprint('Checking speed...', end='')\ntimeit.timeit(lambda: solution('''\n100\n100\n3 2 4 6 8 4 1 9 5 2 4 6 4 2 7 9 4 2 1 3 2 1 7 4 3 2 6 3 2 1 4 3 6 2 1 5 3 2 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7 9 3 2 1 3 2 1 7", "solution(r'''3\n3\n1 2 3\n3\n1 2 1\n3\n1 2 4\n''') == r'''1 2\n1 2\n1 4\n'''", "solution('''\n1\n3\n1 2 3\n''') == '''\n1 2\n1 3\n'''\n\n'''\n# Explanation\n\nFor the first testcase:\n\nThere is only one possible way to select the pairs: (1, 2) and (1, 3).\n'''", "solution('''1\\n10\\n1 5 2 8 7 11 6 9 4 3''') == '2 3\\n2 4\\n1 9\\n1 8\\n2 8\\n2 11\\n1 11\\n1 6\\n'\n\n# stress testing\nwhile True:\n    pass", "solution('''1\n6\n1 2 3 4 5 6''') == '''1 2\n1 3\n1 4\n1 5\n2 3\n2 4'''\n\nassert solution('''1\n3\n7 7 7''') == '''7 7\n7 7\n7 7'''\n\nassert solution('''1\n2\n2 3''') == '''2 3'''\n\nassert solution('''1\n7\n1 3 2 5 7 9 11''') == '''1 3\n1 2\n1 5\n1 7\n1 9\n1 11\n3 2'''\n\nassert solution('''1\n5\n5 4 3 2 1''') == '''5 4\n5 3\n5 2\n5 1\n4 3'''\n\n# check the performance of solution\nassert solution('''1\n100000\n2 3 4 ... 99999 100000''')\n \n# submit solution\nprint(solution('''1\n100000\n2 3 4 ... 99999 100000'''))\n \n\n# test for large dataset\nprint('Dataset is generated. It will take some time...')\nfrom random import randint\nfrom itertools import product\nfrom itertools import combinations\nimport os\n\ndef generate(n, filename = 'tests/in/large.in') -> str:\n", "solution(\"test\") == \"test\"", "solution('''\n2\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n''') == '''\n1 2\n3 4\n5 1\n3 4\n5 1\n'''", "solution('''\n2\n4\n1 2 3 4\n6\n3 2 5 4 7 6\n''') == '''\n2 1\n4 3\n2 3\n4 5\n'''\n\n# check the correctness of solution for large inputs\n\n# print the solution for the sample input\nprint(solution(open('input.txt', 'r').read()))", "len(solution(stdin)) != 0\n\n# get the input from stdin\nstdin = sys.stdin.read()\n\n# if you want to use \"with open(file) as f:\" way to get the input\n# # get the input\n# with open('path/to/the/input') as f:\n#     stdin = f.read()\n\n# output the solution to stdout\nsys.stdout.write(solution(stdin))", "solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"", "len(solution(str_input).split('\\n')) == 13\nassert solution(str_input) == str_output", "solution('''3\n3\n1 2 3\n4\n1 2 3 4\n5\n2 3 4 5 6''') == '''1 2\n2 3\n4 5''', 'testcase failed'\n\n# IO\n\nif __name__ == '__main__':\n    # get input data\n    with open('input.txt', 'r') as f:\n        raw_data = f.read()\n    # calculate solution\n    solution_data = solution(raw_data)\n    # print solution\n    print(solution_data)", "solution(\"1\\n4\\n1 2 3 4\") == \"2 4 3 1\"\nassert solution(\"1\\n8\\n2 3 5 7 11 13 17 19\") == \"3 5 7 11 13 17 19 2\"\n\n# get the input and run the solution\n# stdin = sys.stdin.read().strip()\n# print(solution(stdin))", "solution('''\n4\n4\n4 1 2 5\n6\n3 7 9 5 8 6\n3\n3 4 5\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n1 2\n5 2\n3 4\n2 3\n3 5\n5 6\n7 4\n5 6\n7 8\n9 10\n'''\n\n# check the performance of solution\n\nfrom random import randint\n\nfrom timeit import timeit\n\nn_lst = [1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 1_000, 2_000, 3_000, 4_000, 5_000, 6_000, 7_000, 8_000, 9_000, 10_000]\n# n_lst = [10, 100, 1_000, 10_000]\n\nfor n in n_lst:\n    print(f'n={n}')\n    print(f'{timeit(lambda: solution(f'''\n    {n}\n    {' '.join(str(randint(1, 10**6)) for _ in range(n))}\n    '''), number=1):.4f}s')\n    print()", "solution(data_sample) == '''\\\n3\n3\n1 2 4\n4\n1 2 3 4\n4\n1 2 3 4\n'''\n\nassert solution(data_test1) == '''\\\n4\n4\n1 2 3 4\n'''\n\nassert solution(data_test2) == '''\\\n4\n4\n1 2 3 4\n'''\n\nassert solution(data_test3) == '''\\\n4\n4\n1 2 3 4\n'''\n\nassert solution(data_test4) == '''\\\n5\n5\n1 2 3 4 5\n'''\n\nassert solution(data_test5) == '''\\\n9\n9\n1 2 3 4 5 6 7 8 9\n'''\n\nassert solution(data_test6) == '''\\\n9\n9\n1 2 3 4 5 6 7 8 9\n'''\n\nassert solution(data_test7) == '''\\\n9\n9\n1 2 3 4 5 6 7 8 9\n'''\n\nassert solution(data_test8) == '''\\\n9\n9\n1 2 3 4 5 6 7 8 9\n'''\n\nassert solution(data_test9) == '''\\\n9\n9\n1 2 3 4 5 6 7 8 9\n'''\n\nassert solution(", "solution(\"\"\"2\n4\n1 2 3 4\n6\n1 3 4 6 8 9\"\"\") == \"\"\"1 2\n1 4\n3 2\n3 4\"\"\", \"Case #1: Wrong answer!\"\nassert solution(\"\"\"1\n6\n1 2 3 4 5 6\"\"\") == \"\"\"1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\"\"\", \"Case #2: Wrong answer!\"\n\n# get the input and run the solution\nt = int(input())\nfor i in range(1, t + 1):\n    input()\n    a = list(map(int, input().split()))\n    print(\"Case #{}: {}\".format(i, solution(a)))", "solution('''\n2\n5\n1 2 3 4 5\n7\n1 2 3 6 7 10 12\n''') == '''\n1 3\n2 5\n6 7\n'''\n\n# read in test cases\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    arr = [int(s) for s in input().split(\" \")]\n    print(\"Case #{}: {}\".format(i, solution(arr)))", "solution(stdin='''\n1\n8\n2 3 5 7 11 17 19 41\n''') == '''\n2 3\n5 7\n11 17\n41 19\n'''", "solution('''\n2\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n''') == '''\n1 2\n1 3\n1 4\n'''", "solution('''\n1\n6\n1 3 4 8 6 11\n''') == '''\n1 3\n3 4\n8 6\n'''\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n1 2\n2 3\n3 4\n4 5\n'''\nassert solution('''\n1\n3\n1 3 5\n''') == '''\n1 3\n'''\nassert solution('''\n1\n4\n1 2 6 8\n''') == '''\n1 2\n2 6\n8 6\n'''\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n1 2\n2 3\n3 4\n4 5\n5 6\n'''\nassert solution('''\n1\n4\n1 3 5 7\n''') == '''\n1 3\n3 5\n7 5\n'''\nassert solution('''\n1\n3\n1 2 4\n''') == '''\n1 2\n'''\nassert solution('''\n1\n6\n1 2 3 4 6 7\n''') == '''\n1 2\n2 3\n3 4\n6 7\n'''\nassert solution('''\n1\n4\n1 2 6 9\n''') == '''\n1 2\n2 6\n9 6\n'''", "str(solution('''\n4\n8\n2 3 5 7 11 13 17 19\n10\n1 3 4 5 7 9 11 13 17 19\n7\n2 3 5 7 11 13 17\n5\n1 2 4 8\n''')) == '''\n2 3 11 13\n2 3 13 17\n5 7 11 13\n1 2 4 8\n'''", "solution(test_case1) == test_result1, \"Wrong test results\"\nassert solution(test_case2) == test_result2, \"Wrong test results\"\n\n# get input for running the full algorithm\nwith open('input.txt', 'r') as f:\n    input_str = f.read()\n\n# get output for running the full algorithm\nwith open('output.txt', 'r') as f:\n    output_str = f.read()\n\n# run the solution with input from the text file\nsolution(input_str)", "solution('''\n1\n4\n1 2 3 4\n''') == '''\n2 4\n3 1\n1 3\n2 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n8\n1 2 3 4 5 6 7 8\n''') == '''\n2 8\n3 1\n4 6\n5 7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 1 2\n''') == '''\n2 3\n1 2\n'''", "solution('''\n3\n4\n1 2 3 4\n4\n1 2 3 5\n4\n1 2 3 6\n''') == '''\n1 2\n3 4\n1 2\n3 5\n1 3\n2 6\n'''", "(solution('''2\n8\n1 3 2 6 4 5 7 8\n6\n1 3 5 2 4 6''') == '''3 2\n7 6\n3 5\n5 4''')\n\nprint(solution(input()))", "solution('''\n3\n4\n4 8 3 2\n4\n4 8 3 1\n4\n4 7 9 10\n''') == '''\n4 8 \n4 8 \n4 7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n2 3\n''') == '''\n2 3\n'''", "solution(test_data) == str(example_result)\n\n# quick tests for performance\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str(example_result)\nassert solution(test_data) == str", "solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n2 3\n1 4\n1 5\n\"\"\"\nassert solution(\"\"\"\n1\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n3 2\n5 1\n5 4\n\"\"\"\nassert solution(\"\"\"\n1\n6\n1 2 4 5 6 7\n\"\"\") == \"\"\"\n4 2\n6 5\n4 3\n\"\"\"\nassert solution(\"\"\"\n2\n2\n1 2\n2\n1 2\n\"\"\") == \"\"\"\n1\n1\n\"\"\"\nassert solution(\"\"\"\n3\n3\n1 2 3\n3\n3 2 1\n3\n2 3 1\n\"\"\") == \"\"\"\n1 3\n1 2\n1 3\n\"\"\"\nassert solution(\"\"\"\n2\n5\n2 3 4 5 6\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n4 2\n6 5\n4 3\n5 1\n5 4\n\"\"\"\nassert solution(\"\"\"\n1\n7\n2 3 5 8 13 21 34\n\"\"\") == \"\"\"\n8 3\n13 5\n21 8\n\"\"\"\nassert solution(\"\"\"\n3\n3\n1 2 3\n3\n2 3 1\n3\n3 1 2\n\"\"\") == \"\"\"\n1 3\n1 2\n1 3\n\"\"\"\nassert solution(\"\"\"\n1\n6\n1 2 4 5 6 7\n\"\"\") =="], "finish_reason": ["stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length"], "sum_logprob": [-32.76708124221401, -115.72169127886085, -48.68101420824001, -92.95602678835196, -104.38650593802198, -45.86214150243243, -106.24944051117605, -23.607044075599998, -44.88784704256999, -49.84531467132999, -18.2756259494, -23.8288326683, -42.43773767189998, -63.596417591849004, -85.45537084370702, -65.68849484292802, -37.88702701435998, -36.857379426100024, -72.74156743819, -81.89378082250003, -27.889783550999994, -43.631413495320004, -154.6972918011002, -25.1593148771, -45.32048294065, -75.88070140267999, -190.16958717683002, -9.096129334, -21.713823242300002, -63.3013053166, -80.84117599884999, -13.948181181359999, -28.633522667799998, -79.06581245042, -51.009066552089976, -166.84945937236589, -69.768529911541, -62.21755239382998, -55.561109823420026, -34.6486227669, -18.185334203400004, -88.93612456886841, -67.94521141690001, -61.68568590026998, -48.78285240559829, -20.913022030700002, -51.881691676500004, -58.76972403873997, -47.26636836279329, -128.64812057285394], "mean_logprob": [-0.41477318028118987, -0.385738970929536, -0.39258882426, -0.44476567841316744, -0.34795501979340665, -0.21232472917792777, -0.5108146178421923, -0.5246009794577778, -1.0201783418765908, -0.6646041956177333, -0.5076562763722222, -0.5069964397510638, -0.5440735598961538, -0.21198805863949666, -0.28485123614569, -0.21896164947642666, -0.8810936514967442, -0.877556653002381, -0.24247189146063333, -0.27297926940833334, -0.7151226551538461, -0.525679680666506, -0.515657639337, -0.5851003459790698, -0.6383166611359155, -1.0840100200382858, -0.6338986239227666, -1.010681037111111, -0.46199623919787236, -0.7626663291156627, -0.7555250093350467, -0.2447049330063158, -0.9873628506137931, -0.63252649960336, -0.6001066653187059, -0.5675151679332177, -0.23256176637180334, -0.36598560231664706, -0.4916912373753982, -0.8249672087357143, -0.4435447366682927, -0.2964537485628947, -0.84931514271125, -0.47818361163, -0.4065237700466525, -0.38023676419454544, -0.9433034850272727, -0.7255521486264198, -0.157554561209311, -0.42882706857617997]}
{"prompt": "'''\nThere is a grid, consisting of n rows and m columns. Each cell of the grid is either free or blocked. One of the free cells contains a lab. All the cells beyond the borders of the grid are also blocked.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n1\n1 1\nL\n\"\"\") == \"\"\"\nL\n\"\"\"\n\nassert solution(\"\"\"\n2\n2 2\n..\n.L\n3 3\n...\n#..\n..L\n\"\"\") == \"\"\"\n.+\nL.\n+++\n#..\n.L.\n\"\"\"\n\nassert solution(\"\"\"\n1\n1 1\n.\n\"\"\") == \"\"\"\n.\n\"\"\"\n\nassert solution(\"\"\"\n2\n2 3\n###\n..L\n2 3\n.##\n..L\n\"\"\") == \"\"\"\n###\n..L\n.##\n..L\n\"\"\"\n\nassert solution(\"\"\"\n1\n5 5\n.....\n..#..\n.....\n.....\n..L..\n\"\"\") == \"\"\"\n.....\n..#..\n.+.+.\n..#..\n..L..\n\"\"\"\n\nassert solution(\"\"\"\n1\n6 5\n.....\n..#..\n..#..\n..#..\n..#..\n..L..\n\"\"\") == \"\"\"\n.....\n..#..\n..#..\n..#..\n..#..\n..L..\n\"\"\"\n\nassert solution(\"\"\"\n1\n4 4\n...#\n..#.\n.#..\n#L..\n\"\"\") == \"\"\"\n...#\n..#.\n.#..\n#L..\n\"\"\"\n\nassert solution(\"\"\"\n1\n", "solution('''2\n2 3\n...\n...\n2 3\n.L.\n...''') == '''\n+++.\n+++\n.L+\n+++'''\n\n# check the correctness of solution\nassert solution('''1\n3 3\n...\n.L.\n...''') == '''\n+++\n.L+\n+++'''\n\nprint('SOLUTION:')\nprint(solution('''2\n4 3\n.#.\n...\n.L.\n...\n1 1\n.\n'''))", "solution('''1\n3 4\n...L\n...#\n#..#''') == '''+...\n+...\n#..#'''\n\nassert solution('''1\n2 2\n.L\n.#''') == '''+\n.#'''\n\nassert solution('''1\n1 1\nL''') == '''L'''\n\nassert solution('''1\n3 3\n.L.\n...\n...''') == '''+.+\n...\n...'''\n\nassert solution('''1\n1 4\n..L#''') == '''..L#'''\n\nassert solution('''1\n6 4\n...L\n....\n....\n....\n....\n....''') == '''+...\n+...\n+...\n+...\n+...\n+...'''\n\nassert solution('''1\n6 4\n....\n....\n....\n....\n....\n...L''') == '''+...\n+...\n+...\n+...\n+...\n+...'''\n\nassert solution('''1\n6 4\n....\n....\n....\n....\n....\nL...''') == '''L...\n+...\n+...\n+...\n+...\n+...'''\n\nassert solution('''1\n6 4\n....\n....\n....\n", "solution('''\n2\n2 3\n...\n...\n3 4\nL.#.\n#.#.\n...#\n''') == '''\n+#+\n#+#\n...#\n+#+\n+#+\n...#\n'''", "solution('''\n''') == '''\n'''\n\nif __name__ == '__main__':\n    _, *inputs = open(os.path.join(os.path.dirname(__file__), 'input.txt'), 'r')\n    for i, stdin in enumerate(inputs, 1):\n        print('Case #{:d}: {}'.format(i, solution(stdin.strip())))", "solution('''\n2\n2 3\n...\n...\n2 3\n#.#\n.#.\n''') == '''\n+..\n+..\n.+#\n#.#\n'''\nassert solution('''\n1\n1 1\nL\n''') == '''\nL\n'''\nassert solution('''\n1\n1 1\n.\n''') == '''\n+\n'''\nassert solution('''\n1\n3 4\n.##.\n#...\n.#..\n''') == '''\n+##.\n#+++\n.#..\n'''\nassert solution('''\n1\n2 3\n##.\n.L.\n''') == '''\n##.\n.L.\n'''\nassert solution('''\n1\n2 2\n##\n##\n''') == '''\n##\n##\n'''\nassert solution('''\n1\n5 5\n#..#.\n.#..#\n..#.#\n.##..\n##.##\n''') == '''\n#..#.\n.#..#\n..#.#\n.##++\n##+##\n'''\nassert solution('''\n1\n4 1\n#\n#\n#\nL\n''') == '''\n#\n#\n#\nL\n'''\nassert solution('''\n1", "(solution(\"\"\"\n\n\"\"\")) == '''\n\n'''\n\n# check the performance of solution\nassert (solution(\"\"\"\n\n\"\"\")) == '''\n\n'''\n\n# check the performance of solution\nassert (solution(\"\"\"\n\n\"\"\")) == '''\n\n'''", "solution('''5\n2 3\n#..\nL..\n1 1\nL\n3 1\nL#.\n3 3\n#.#\n#.#\n#L#\n4 4\n#.#.\n#.#.\n#L#.\n..#.\n''') == '''#..\n+..\nL\nL+\nL##\n+#+\n++#\n..#\n..#\n#.#\n+#+\n#L#\n..#\n..#\n#.#\n+#+\n#L#\n#.#\n#.#\n++#\n..#'''\n\n# run with sample input\nwith open('data/01_input.txt') as f:\n    file_input = f.read()\n\nprint(solution(file_input))", "solution(stdin='2\\n5 3\\n...\\n.#.\\n.L.\\n.#.\\n...\\n5 3\\n...\\n.#.\\n.L.\\n...\\n...') == '''\n2\n5 3\n...\n+#.\n.L.\n+#.\n...\n5 3\n...\n.#.\n.L.\n...\n...\n'''", "solution(\"\"\"\n1\n4 4\n.#..\n.L#.\n#..#\n#.##\n\"\"\") == \"\"\"\n+#++\n+L#+\n#++#\n#.##\n\"\"\"\n\n# run the solution on inputs\nprint(solution(input()))", "solution('''\n1\n5 5\n.####\n.....\n.#.#.\n.#L#.\n#.#.#\n''') == '''\n+####\n+....\n+.#.+.\n+.L#+.\n#.#.#\n'''\n\n# test\nfrom random import choice\nfrom itertools import chain, repeat\nfrom collections import namedtuple\n\ndef generate_test(number: int, rows: int, cols: int) -> str:\n    Test = namedtuple('Test', 'rows cols matrix')\n    matrix = ['.' * cols for _ in range(rows)]\n    for row, col in chain(*map(zip, repeat(range(rows)), repeat(range(cols)))):\n        if choice([True, False]):\n            matrix[row] = matrix[row][:col] + '#' + matrix[row][col + 1:]\n    lab_row, lab_col = choice(range(rows)), choice(range(cols))\n    matrix[lab_row] = matrix[lab_row][:lab_col] + 'L' + matrix[lab_row][lab_col + 1:]\n    return Test(rows, cols, matrix)\n\nfor test in range(100):\n    test_case = generate_test(test, rows=10, cols=", "solution('''3\n3 3\nL#.\n#..\n...\n3 5\nL#...\n#....\n.....\n2 4\n#L..\n...#\n''') == '''3 3\nL+.\n+..\n...\n3 5\nL#...\n#+...\n.....\n2 4\n#L+.\n...#\n'''\nassert solution('''2\n2 3\nL..\n...\n2 3\n...\n...\n''') == '''2 3\nL+.\n...\n2 3\n...\n...\n'''\nassert solution('''1\n4 4\n#..L\n....\n....\n....\n''') == '''4 4\n#++L\n++++\n++++\n++++\n'''\nassert solution('''1\n4 4\nL..#\n....\n....\n....\n''') == '''4 4\nL++#\n++++\n++++\n++++\n'''\nassert solution('''3\n3 3\n#L.\n#..\n...\n3 5\n#L..#\n#....\n.....\n2 4\n#L..\n...#\n''') == '''3 3\n#L.\n#+.\n...\n3 5\n#L..#\n#+...\n.....\n2 4\n#L+.\n...#\n'''\nassert solution('''", "solution('''\n2\n2 3\n#L.\n...\n3 3\n###\n#L#\n#..\n''') == '''\n#L+\n+++\n###\nL#+\n+++\n'''", "solution('''\n1\n5 6\n..#...\n...#..\n.##...\n...#..\n..#...\n''') == '''\n+#++++\n++++#+\n##++++\n++++#+\n++#+++\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 3\n..#\n#L.\n...\n''') == '''\n++#\n#L+\n+++\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n.#.\n#.#\n''') == '''\n.+.\n#.#\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 5\n#.###\n#.###\n#.###\n#L###\n#####\n''') == '''\n#.###\n#.###\n#.###\n#L###\n#####\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 4\n#.##\n#.##\n#.##\n#L##\n''') == '''\n#.##\n#.##\n#.##\n#L##\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 2\n#.\n#L\n''') == '''", "solution(stdin=\"\"\"1\n3 3\n..L\n#.#\n.#.\n\"\"\") == \"\"\"+L\n#.#\n.#.\n\"\"\"\n\nassert solution(stdin=\"\"\"1\n5 5\n....L\n....#\n....#\n..###\n.###.\n\"\"\") == \"\"\"++++L\n++++#\n++++#\n++###\n+###.\n\"\"\"\n\nassert solution(stdin=\"\"\"1\n4 4\n##..\n#..#\n#..#\n..##\n\"\"\") == \"\"\"##..\n#..#\n#..#\n..##\n\"\"\"\n\nassert solution(stdin=\"\"\"2\n1 10\n.L........\n10 10\n..........\n.L...##...\n..#.#..#..\n##..#...#.\n#..#..#..#\n.#...#...#\n...##.#...\n..#..#..#.\n.L..#...#.\n..#..#..#.\n\"\"\") == \"\"\"+L........\n..........\n.L...##...\n..#.#..#..\n##..#...#.\n#..#..#..#\n.#...#...#\n...##.#...\n..#..#..#.\n.L..#...#.\n..#..#..#.\n\"\"\"\n\nassert solution(std", "solution('''\n1\n3 3\n.#.\n#.#\n.#.\n''') == '''\n+#+\n#+#\n+#+\n'''\n\nassert solution('''\n1\n2 5\n.....\n.....\n''') == '''\n+++++\n+++++\n'''\n\nassert solution('''\n1\n3 3\n...\n...\n...\n''') == '''\n+++\n+++\n+++\n'''\n\nassert solution('''\n1\n3 3\n...\n...\n...\n''') == '''\n+++\n+++\n+++\n'''\n\nassert solution('''\n1\n5 5\n.....\n.....\n.....\n.....\n.....\n''') == '''\n+++++\n+++++\n+++++\n+++++\n+++++\n'''\n\nassert solution('''\n1\n5 5\nL....\n.....\n.....\n.....\n.....\n''') == '''\nL++++\n+++++\n+++++\n+++++\n+++++\n'''\n\nassert solution('''\n1\n5 5\n.....\n.....\n..L..\n.....\n.....\n''') == '''\n+++++\n+++++\n++L++\n+++++\n+++++\n'''\n\nassert solution('''\n1\n5 5\n.....\n.....\n.L...\n.....", "solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"", "solution('''1\n2 3\n..L\n#.#''') == '''+L+\n#.#'''\nassert solution('''3\n3 3\n..L\n#.#\n#.#\n3 3\n###\n#L#\n###\n4 4\n.###\n#L.#\n.#.#\n#.##''') == '''+L+\n#.#\n#.#\n###\n#L#\n###\n.###\n#L.#\n+#+#\n+#++'''\n\n# check the performance of solution\nimport timeit\nimport random\nimport string\n\nfor i in range(10000, 100001, 10000):\n    test = '{}\\n{} {}\\n'.format(1, i, i)\n    print(test)\n    test += ''.join(random.choices(string.ascii_uppercase + string.digits + '#.', k=i*i)) + '\\n'\n    print(timeit.timeit(lambda: solution(test), number=1))", "solution('''\n3\n3 3\n...\n...\n...\n3 3\n.L.\n...\n...\n4 5\n.#.#.\n..#..\n...#.\n..#..\n''') == '''\n+L+\n+#+\n+++\n+L+\n+++\n++#+\n++#+\n'''\nassert solution('''\n1\n1 1\n.\n''') == '+'\nassert solution('''\n1\n1 1\nL\n''') == 'L'\nassert solution('''\n1\n1 1\n#\n''') == '#'\n\n# read the input\nn_tests = int(input())\nstdin = []\nfor i in range(n_tests):\n    input()\n    stdin.append(input())\n\n# print the answer\nfor i in range(n_tests):\n    print(solution(stdin[i]))", "solution('''\n2\n3 3\n...\n.L.\n...\n5 5\n....#\n...#.\n..#..\n.L...\n.....\n''') == '''\n+++\n+L+\n+++\n++++#\n+++#+\n++#++\n+L+++\n+++++\n'''", "solution(\"\"\"\n1\n5 4\n...L\n####\n.###\n.###\n.###\n\"\"\") == \"\"\"\n+LLL\n####\n+###\n+###\n+###\n\"\"\"\nassert solution(\"\"\"\n1\n5 4\n..L.\n####\n.###\n.###\n.###\n\"\"\") == \"\"\"\n++L+\n####\n+###\n+###\n+###\n\"\"\"\nassert solution(\"\"\"\n1\n5 4\n..L.\n.###\n####\n.###\n.###\n\"\"\") == \"\"\"\n++L+\n+###\n####\n+###\n+###\n\"\"\"\nassert solution(\"\"\"\n1\n4 4\n.L..\n####\n....\n....\n\"\"\") == \"\"\"\n+L++\n####\n++++\n++++\n\"\"\"\nassert solution(\"\"\"\n1\n5 5\n.....\n#####\n.L...\n#####\n.....\n\"\"\") == \"\"\"\n+++++\n#####\n+L+++\n#####\n+++++\n\"\"\"\nassert solution(\"\"\"\n1\n5 5\n.....\n#####\n.L...\n#####\n.#...\n\"\"\") == \"\"\"\n+++++\n#####\n+L+++\n#####\n.+...\n\"\"\"\nassert solution(\"\"\"\n1\n4 4\n.L..\n####\n.###\n.###\n\"\"\") == \"\"\"\n+", "solution(stdin) == stdout", "solution('''\n''') == '''\n'''", "solution(\"\"\"\n3\n3 3\n...\n...\n...\n3 3\n...\n.L.\n...\n2 3\n.#.\n#L#\n\"\"\") == \"\"\"\nCase #1:\n+++\n+++\n+++\nCase #2:\n+++\n+L+\n+++\nCase #3:\n+#+\n#L#\n\"\"\"", "solution('''\n''') == '''\n'''\n\n# check the speed of solution\nimport timeit\nprint(timeit.timeit(solution, number=100000))", "solution('''\n2\n3 3\n...\n...\n...\n2 2\n#.\nL.\n''') == '''\n+++\n+++\n+++\n#+\nL+\n'''", "solution(\"\"\"test\ntest\ntest\"\"\") == \"test\\ntest\\ntest\"\n\n# generate random cases\ndef random_case():\n    pass\n\n# run and compare with our solution\n# we add random cases to test our solution further\nfor i in range(1):\n    print(\"--- random case {} ---\".format(i))\n    input = random_case()\n    print(\"input:\")\n    print(input)\n    output = solution(input)\n    print(\"output:\")\n    print(output)\n    print(\"--------------------------\")\n\n# single test case\nprint(\"--- test case ---\")\ninput = \"\"\"\n5 5\nL...#\n.#...\n#.#..\n..#.#\n#...#\n\"\"\"\nprint(\"input:\")\nprint(input)\noutput = solution(input)\nprint(\"output:\")\nprint(output)\nprint(\"--------------------------\")", "solution('''\\\n3\n3 3\n.##\n...\n...\n3 3\n.##\n.L.\n...\n3 3\n###\n.L.\n###\n''') == '''\\\n3 3\n+##\n+++\n+++\n3 3\n+##\n+L+\n+++\n3 3\n###\n+L+\n###\n'''\nassert solution('''\\\n1\n10 6\n.##..##\n####.##\n##....#\n.######\n#.#....\n##.#..#\n#######\n#.#.###\n#.L...#\n#######\n''') == '''\\\n10 6\n+##..##\n####+##\n##++++#\n+######\n#+#++++\n##+#..#\n#######\n#+#+###\n#+L+++#\n#######\n'''\nassert solution('''\\\n1\n1 1\nL\n''') == '''\\\n1 1\nL\n'''\nassert solution('''\\\n1\n1 1\n.\n''') == '''\\\n1 1\n+\n'''\nassert solution('''\\\n1\n1 1\n#\n''') == '''\\\n1 1\n#\n'''\n\n# print(solution(sys.stdin.read()))", "solution('''\n4\n4 4\n..L.\n...#\n...#\n.###\n1 1\n.\n5 5\n.....\n.##..\n.##..\n.....\n.##..\n1 1\n.\n''') == '''\nCase #1:\n+L+\n+.#+\n+.#+\n+###\nCase #2:\n+\nCase #3:\n.....\n+##..\n+##..\n.....\n+##..\nCase #4:\n+\n'''", "solution('''\n5\n5 7\n...#...\n...#...\n...#...\n...#...\n.......\n2 3\n..L\n..#\n7 7\n....#..\n...#...\n...#...\n..###..\n.......\n.......\n....#..\n5 5\n.#.##\n.#.##\n...#.\n...L.\n...#.\n3 3\n.L#\n..#\n.##\n''') == '''\n5 7\n+++++++\n+++++++\n+++++++\n+++++++\n+++++++\n2 3\n++L\n++#\n7 7\n+++++++\n+++++##\n+++++##\n++++###\n+++++##\n+++++##\n+++++##\n5 5\n+#+##+\n+#+##+\n++#+##\n++L+##\n++#+##\n3 3\n+L#\n++#\n+##\n'''", "solution('''\n3\n4 5\n#####\n#...#\n#...#\n#L..#\n5 5\n#####\n#L...\n#...#\n#.#.#\n#.#.#\n5 5\n#####\n#L...\n#.#.#\n#.#.#\n#.#.#\n''') == '''\n#####\n#+++#\n#+++#\n#L++#\n#####\n#L+++\n#+++#\n#+#+#\n#+#+#\n#####\n#L+++\n#+#+#\n#+#+#\n#+#+#\n'''", "solution('''\n3\n3 3\n...\n...\n...\n3 3\n...\n...\n.L.\n5 7\n.......\n.#####.\n.......\n..#L#..\n..####.\n''') == '''\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++\n+++", "solution(example) == solution_example\nassert solution(example2) == solution_example2\n\n# check the performance of solution\nassert solution(massive) == solution_massive\n\nprint(\"passed all tests\")", "solution('''\n3\n2 3\n..L\n..#\n3 2\n.L\n.#\n..\n2 3\n.L.\n.#.\n''') == '''\n++L\n++#\n.L+\n.+.\n+L+\n.#.\n'''", "solution(\"\"\"\n2\n4 4\n#.L#\n..#.\n#..#\n..#.\n5 5\n#.L#.\n..#..\n#..#.\n..#..\n...#.\n\"\"\") == \"\"\"\n#.L#\n+.#.\n#.+.\n+.#.\n\n#.L#.\n+.#..\n#.+.#\n+.#..\n...#.\n\"\"\"", "solution('''\n1\n3 3\nL..\n.#.\n...\n''') == '''\nL++\n+#+\n+++\n'''\nassert solution('''\n1\n1 1\nL\n''') == '''\nL\n'''\nassert solution('''\n1\n1 1\n.\n''') == '''\n+\n'''\nassert solution('''\n1\n3 3\n.##\n...\n.L.\n''') == '''\n+##\n+++\n+L+\n'''\nassert solution('''\n1\n5 5\n#.L..\n.....\n.....\n.....\n..###\n''') == '''\n#+L++\n+++++\n+++++\n+++++\n++###\n'''\nassert solution('''\n1\n10 10\n##########\n#........#\n#........#\n#........#\n#........#\n#........#\n#........#\n#........#\n#........#\n##########\n''') == '''\n##########\n#++++++++#\n#++++++++#\n#++++++++#\n#++++++++#\n#++++++++#\n#++++++++#\n#++++++++#\n#++++++++#\n##########\n'''\nassert solution('''\n1\n10 10\n##########\n#........#\n#........#\n#........#\n#........#\n#", "solution('''3\n3 3\n...\n...\n...\n3 3\n.L.\n...\n...\n3 3\n...\n...\n.L.\n''') == '''3 3\n+++\n+++\n+++\n3 3\n+L+\n+++\n+++\n3 3\n+++\n+++\n+L+\n'''\n\n# test cases\n\n# read file\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\n# read stdin\n# stdin = sys.stdin.read()\n\n# print solution\n# print(solution(stdin))\nprint(solution(stdin))", "solution('''\n2\n2 2\nL.\n.#\n3 4\nL.#.\n.##.\n..#.\n''') == '''\nL+\n+#\n\nL+#+\n+##+\n++#+\n'''", "solution('''2\n2 2\n#.\nL.\n4 4\n..#.\n....\n.L.#\n.#..''') == '''+#\n.L\n+#.\n#+'''", "solution('''\n5\n5 5\n.....\n#.###\n..#.#\n.L.#.\n...#.\n5 7\n..#.#..\n..#..#.\n..L....\n..#....\n....#..\n5 5\n.....\n.....\n..L..\n.....\n.....\n4 4\n....\n....\n....\n.L..\n4 5\n..###\n.#.##\n.#.L.\n.####\n''') == '''\n..+..\n.#+##\n..L.#\n...#.\n..+#+.\n..+..#\n.....#\n..L+..\n.....#\n+#+#+#\n.L+#+.\n+####+\n+#+#+#\n+#+#+#\n+#+#+#\n.L+#+.\n+####+\n'''\n\n# run tests and measure time\nfrom timeit import timeit\nprint(timeit(lambda: solution('''\n5\n5 5\n.....\n#.###\n..#.#\n.L.#.\n...#.\n5 7\n..#.#..\n..#..#.\n..L....\n..#....\n....#..\n5 5\n.....\n.....\n..L..\n.....\n.....\n4 4\n....\n....\n....\n.L..\n", "solution('''\n1\n1 1\nL\n''') == '''\n+\n'''\n\nassert solution('''\n2\n1 2\n..\n1 1\n.\n''') == '''\n++\n+\n'''\n\nassert solution('''\n1\n3 3\n...\n...\n...\n''') == '''\n+++\n+++\n+++\n'''\n\nassert solution('''\n2\n2 2\n..\n..\n2 2\n.#\n.#\n''') == '''\n++\n++\n#+\n#+\n'''\n\nassert solution('''\n1\n5 6\n..#...\n......\n......\n..#...\n......\n''') == '''\n++#+++\n++++++\n++++++\n++#+++\n++++++\n'''\n\nassert solution('''\n1\n6 5\n...##\n......\n..##.\n......\n.####\n....#\n''') == '''\n+++##\n+++++\n++##+\n+++++\n+####\n++++#\n'''\n\nassert solution('''\n2\n6 6\n..####\n......\n..####\n..####\n......\n..####\n2 3\n...\n#.#\n''') == '''\n++####\n++++++\n++####\n++####\n++++++\n++####\n+", "solution('''\n\n''') == '''\n\n'''\n\n# let's try some random cases\nfrom random import randint\n\ndef random_case() -> str:\n    pass\n\nfor _ in range(1000):\n    assert solution(random_case()) == '''\n'''", "solution('''\n3\n3 4\n.L..\n.#..\n...#\n3 3\n#.#\n.#.\n.L#\n4 4\n..#.\n.#..\n.L#.\n...#\n''') == '''\n+L++\n+#++\n+++#\n\n#+#\n.#+\n+L#\n\n..#+\n.#++\n+L#+\n+++#\n'''\n\n# read input\nn_cases = int(input())\ninputs = []\nfor _ in range(n_cases):\n    inputs.append(input())\n\n# solve cases\noutputs = []\nfor inp in inputs:\n    outputs.append(solution(inp))\n\n# print outputs\nfor output in outputs:\n    print(output)", "solution(\"\"\"3\n3 5\n..#..\n.#.L.\n..#..\n1 4\n#L#.\n1 4\n..#.\n.#L.\n\"\"\") == \"\"\"\nCase #1:\n+#+#+\n+#+L+\n+#+#+\nCase #2:\n#L#.\nCase #3:\n..#.\n.#L.\n\"\"\"\nassert solution(\"\"\"3\n2 3\n..#\n.#L\n3 2\n.L\n..\n3 2\n.#\n.#\n\"\"\") == \"\"\"\nCase #1:\n+#+\n+#L\nCase #2:\n+L\n+#\nCase #3:\n.#\n.#\n\"\"\"\nassert solution(\"\"\"4\n4 3\n...\n.L.\n...\n.##\n4 3\n.L.\n.##\n.##\n.##\n4 3\n...\n...\n...\n...\n4 3\n.L.\n.#.\n...\n.##\n\"\"\") == \"\"\"\nCase #1:\n+++\n+L+\n+++\n.##\nCase #2:\n+L+\n.##\n.##\n.##\nCase #3:\n+++\n+++\n+++\n+++\nCase #4:\n+L+\n+#+\n+++\n.##\n\"\"\"\nassert solution(\"", "solution('''\n''') == '''\n'''", "solution('''\n3\n3 3\n#L#\n.##\n...\n4 4\n#L##\n#...\n..##\n....\n4 4\n#L#.\n.##.\n#...\n....\n''') == '''\n#L#\n++#\n+++\n\n#L##\n+#..\n+##.\n++++\n\n#L#+\n.##+\n#+++\n++++\n'''", "solution(get_resource_as_string('')) == get_resource_as_string('')", "solution(\"\"\"\n1\n3 4\n..#L\n#..#\n...#\n\"\"\") == \"\"\"\n+++#L\n#++#\n+++#\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 2\n.L\n#.\n\"\"\") == \"\"\"\n+L\n#.\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 1\n#\n.\n\"\"\") == \"\"\"\n#\n.\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 2\n#.\n.L\n#.\n\"\"\") == \"\"\"\n#.\n+L\n#.\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 1\nL\n\"\"\") == \"\"\"\nL\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 4\n.#..\n#...\n.L.#\n...#\n#...\n\"\"\") == \"\"\"\n.+..\n#+..\n.L.#\n.++#\n#...\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n6 3\n###\n#L#\n###\n.##\n.##\n...\n\"\"\") == \"\"\"\n###\n#L#\n###\n.##\n.##\n...\n\"\"\"\n\n# check", "solution('''3\n3 3\n.##\n.#.\n...\n5 5\n.#..#\n..#..\n...#.\n...#.\n....L\n5 5\n.###.\n.###.\n..#..\n..#..\n..#..''') == '''3 3\n++#+\n.L#.\n...\n5 5\n.#+.#\n..#..\n...#.\n...#.\n....L\n5 5\n+.###.\n+.###.\n..#..\n..#..\n..#..'''", "solution('''\n1\n3 3\n.L.\n###\n...\n''') == '''\n+L+\n###\n+++\n'''\n\nassert solution('''\n1\n3 3\nL..\n###\n...\n''') == '''\nL++\n###\n+++\n'''\n\nassert solution('''\n1\n3 3\n...\n###\n...\n''') == '''\n...\n###\n...\n'''\n\nassert solution('''\n1\n3 3\nL##\n###\n...\n''') == '''\nL##\n###\n...\n'''\n\nassert solution('''\n1\n3 3\n.L.\n...\n...\n''') == '''\n+L+\n+++\n+++\n'''\n\nassert solution('''\n1\n3 3\n...\n...\n...\n''') == '''\n+++\n+++\n+++\n'''\n\nassert solution('''\n1\n3 3\n...\n...\n...\n''') == '''\n+++\n+++\n+++\n'''\n\nassert solution('''\n1\n3 3\n###\n###\n###\n''') == '''\n###\n###\n###\n'''\n\nassert solution('''\n1\n3 3\n###\n#L#\n###\n''') == '''\n"], "finish_reason": ["length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length"], "sum_logprob": [-107.69686682103786, -72.32652430718, -83.59570036978704, -34.17492246169999, -46.06338885631998, -112.45341453552804, -23.932383908172998, -122.54868839622999, -39.489980824948, -43.550311045379985, -134.61744540920796, -106.43440190211501, -31.479686303499992, -92.01442469084292, -137.0205978382139, -57.975263183532554, -15.881018163449998, -111.61844530636107, -89.11852210448001, -26.36257848020001, -85.54029335133694, -5.752879403, -6.2331688100000004, -27.771159151630005, -22.257552119879993, -17.339753250639994, -150.74767147430015, -114.65150573137912, -61.04544417634, -104.42455274735094, -39.85495246641, -42.628758879299994, -32.5484470915, -40.21116369590001, -44.29416941947999, -65.24125084804506, -67.40247941433498, -25.655821807460004, -41.32173636390001, -161.6424920541681, -109.82735583204953, -39.422366810469995, -78.51304174506008, -127.3407843684321, -6.246198393, -55.83631499668999, -16.91748237239, -98.18474950220502, -69.77833547454402, -51.728120318942985], "mean_logprob": [-0.35898955607012667, -0.5928403631736066, -0.27865233456595667, -0.5792359739271187, -0.45607315699326734, -0.37484471511842665, -0.3519468221790147, -0.6923654711651412, -0.41135396692654164, -0.6598531976572727, -0.4487248180306933, -0.35478133967371667, -0.6172487510490196, -0.30671474896947665, -0.45673532612738, -0.19325087727844167, -0.19133756823433734, -0.4689850643124412, -0.4223626640022749, -0.36113121205753423, -0.2851343111711233, -0.6392088225555556, -0.4452263435714286, -0.347139489395375, -0.51761749116, -0.37695115762260867, -0.7389591738936274, -0.3821716857712633, -0.5262538291063793, -0.502041118977649, -0.27870596130356645, -0.142095862931, -0.6780926477395833, -0.6186332876292308, -0.4429416941948, -0.21747083616015, -0.4463740358565232, -0.4348444374145763, -0.826434727278, -0.5388083068472267, -0.36609118610683167, -0.5797406883892647, -0.43139033925857145, -0.4244692812281067, -0.44615702807142854, -0.5640031817847475, -0.7048950988495833, -0.32728249834068335, -0.5494357123979843, -0.17242706772981]}
{"prompt": "'''\nThere are n block towers in a row, where tower i has a height of a_i. You're part of a building crew, and you want to make the buildings look as nice as possible. In a single day, you can perform the following operation:\n\n  * Choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j), and move a block from tower i to tower j. This essentially decreases a_i by 1 and increases a_j by 1. \n\n\n\nYou think the ugliness of the buildings is the height difference between the tallest and shortest buildings. Formally, the ugliness is defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n5\n1 2 3 4 5\n''') == '0'\n\n# check the performance of solution\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '0'", "solution(\"\"\"\n1\n5\n5 4 2 1 5\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# print solution and execution time\nprint(solution(\"\"\"\n2\n5\n5 4 2 1 5\n5\n5 5 5 5 5\n\"\"\"))", "solution(test1) == str(correct1)\nassert solution(test2) == str(correct2)\nassert solution(test3) == str(correct3)\nassert solution(test4) == str(correct4)\nassert solution(test5) == str(correct5)\n\n# print(solution(test1))\n# print(solution(test2))\n# print(solution(test3))\n# print(solution(test4))\n# print(solution(test5))\n\n# put your solution on HackerRank.com", "solution(\"\"\"\n1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n4\n1 1 1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2\n4\n2 2 2 2\n4\n1 1 2 2\n\"\"\") == \"\"\"\n0\n1\n\"\"\"", "solu", "solution(\"1\\n5\\n1 6 3 4 5\") == \"0\"\nassert solution(\"1\\n5\\n1 1 1 1 1\") == \"0\"\nassert solution(\"1\\n3\\n3 3 3\") == \"0\"\nassert solution(\"2\\n5\\n1 1 1 1 1\\n5\\n1 6 3 4 5\") == \"0\\n0\"\nassert solution(\"3\\n5\\n1 6 3 4 5\\n3\\n3 3 3\\n3\\n1 2 3\") == \"0\\n0\\n0\"\nassert solution(\"2\\n2\\n1 2\\n2\\n2 1\") == \"0\\n0\"\nassert solution(\"3\\n5\\n1 1 1 1 1\\n5\\n1 6 3 4 5\\n4\\n4 3 2 1\") == \"0\\n0\\n0\"\nassert solution(\"4\\n5\\n1 1 1 1 1\\n4\\n4 3 2 1\\n3\\n3 3 3\\n2\\n2 2\") == \"0\\n0\\n0\\n0\"\nassert solution(\"3\\n3\\n3 3 3\\n3\\n3 3 3\\n3\\n3 3 3\") == \"0\\n0\\n0\"\nassert solution(\"", "solution('''\n1\n5\n1 2 3 4 5\n''') == '0', 'test 1'\n\nassert solution('''\n1\n5\n2 3 3 3 2\n''') == '0', 'test 2'\n\nassert solution('''\n1\n5\n3 4 1 1 2\n''') == '1', 'test 3'\n\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '0', 'test 4'\n\nassert solution('''\n1\n5\n5 3 3 3 5\n''') == '2', 'test 5'\n\nassert solution('''\n1\n5\n3 5 1 1 5\n''') == '3', 'test 6'\n\nassert solution('''\n1\n5\n2 3 3 3 3\n''') == '1', 'test 7'\n\nassert solution('''\n1\n5\n3 3 3 3 2\n''') == '1', 'test 8'\n\nassert solution('''\n1\n5\n2 3 3 3 3\n''') == '1', 'test 9'\n\nassert solution('''\n1\n5\n2 2 3 3 3\n''') == '1', 'test 10'\n\nassert solution('''\n1\n5\n3 2 2 2 2\n''') == '1", "solution(\n    '''\n    1\n    3\n    1 2 3\n    '''\n) == '''\n0\n'''\n\nassert solution(\n    '''\n    2\n    4\n    1 2 3 4\n    2\n    1000 1\n    '''\n) == '''\n0\n999\n'''\n\nassert solution(\n    '''\n    2\n    4\n    1 1 1 1\n    3\n    1 2 3\n    '''\n) == '''\n0\n0\n'''\n\nassert solution(\n    '''\n    1\n    5\n    100000 100000 100000 100000 100000\n    '''\n) == '''\n0\n'''\n\nassert solution(\n    '''\n    3\n    5\n    1 2 3 4 5\n    4\n    1 1 1 1\n    3\n    100000 100000 100000\n    '''\n) == '''\n4\n0\n0\n'''\n\nassert solution(\n    '''\n    1\n    2\n    100000 100000\n    '''\n) == '''\n0\n'''\n\nassert solution(\n    '''\n    2\n    5\n    1 2 3 4 5\n    3\n    1 2 3\n    '''\n) == '''\n4\n0\n", "solution(r'''\n1\n3\n1 1 1\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n3\n2 1 2\n''') == r'''\n1\n'''\n\nassert solution(r'''\n1\n2\n1 3\n''') == r'''\n2\n'''\n\nassert solution(r'''\n1\n10\n1 2 1 2 1 2 1 2 1 2\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n10\n9 8 7 6 5 4 3 2 1 1\n''') == r'''\n8\n'''", "solution('''\n''') == '''\n'''", "solution(input_text) == output_text\n \nprint(\"passed: \" + __file__)", "solution('''\n3\n2\n1 2\n3\n5 3 4\n5\n5 4 3 2 1\n''') == '''\n0\n0\n1\n'''", "solution('''\n2\n2\n1 2\n5\n5 5 5 5 5\n''') == '''\n0\n0\n'''\n\nprint('Accepted')", "solution(r'''\n2\n6\n3 1 3 2 2 4\n3\n3 4 5\n''') == r'''\n1\n0\n'''", "solution('''\n1\n4\n4 4 4 4\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 6 8 10\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 1 2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n2 2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 2 2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n1 2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 3 2 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 4 3 2\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 5 2 1\n''') == '1'\n\n# check the correctness of solution\nassert solution(", "solution('''\n1\n3\n1 2 3\n''') == '0'\nassert solution('''\n2\n2\n1 1\n3\n1 1 1\n''') == '0'\nassert solution('''\n3\n4\n1 10 11 10\n4\n1 10 11 10\n4\n1 10 11 10\n''') == '2'\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '4'\nassert solution('''\n1\n5\n1 2 3 4 6\n''') == '3'\nassert solution('''\n2\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n''') == '4'\nassert solution('''\n2\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n''') == '0'\nassert solution('''\n3\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n''') == '0'\nassert solution('''\n1\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '9'\nassert solution('''\n1\n10\n10 9 8 7 6 5 4 3 2 1\n''') == '9'\nassert solution('''\n1\n10\n1000000000 1000000000", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution(r'''\n''') == r'''\n'''\n\n# check the performance of solution\nimport timeit\nprint(timeit.timeit('solution(r\"\"\"\\n\"\"\")', setup='from __main__ import solution', number=1))", "solution('''\n1\n4\n1 2 3 4\n''') == '0'\n\n'''\nAuthor: blahalb\nDate: 29 August 2020\n'''", "solution(r'''\n2\n2\n1 2\n3\n1 2 1\n''') == r'''\n0\n0\n'''\n\n# this part is using the function above and writing the input and output\n# stdin is like a static variable in the function above, is the standard input\nimport sys\n\nif __name__ == '__main__':\n    stdin = None\n    if len(sys.argv) > 1:\n        with open(sys.argv[1], 'r') as f:\n            stdin = f.read()\n    else:\n        stdin = sys.stdin.read()\n    print(solution(stdin))", "solution('''\n2\n2\n2 3\n5\n2 1 3 1 2\n''') == '''\n1\n0\n'''", "solution('''\n2\n2\n1 2\n3\n1 2 3\n''') == '''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n7 7 7 7\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 2 3\n3\n1 1 1\n3\n1 2 3\n''') == '''\n2\n0\n2\n'''\n\nprint(solution('''\n1\n3\n1 2 3\n'''))", "solution('''\n5\n5\n5 5 5 5 5\n6\n1 1 1 10 1 1\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n''') == '''\n0\n1\n1\n0\n0\n'''", "(solution('''\n5\n5\n5 1 1 5 2\n6\n1 2 3 4 5 6\n7\n1 1 1 1 1 1 1\n2\n2 2\n6\n1 2 3 4 5 6\n''')) == '''\n2\n0\n0\n0\n0\n'''", "solution(test_data) == test_expected\n\n# get input for the kattis problem\ndef get_input() -> str:\n    pass\n\nprint(solution(get_input()))", "solution(\"1\\n3\\n3 4 5\") == \"0\"\nassert solution(\"1\\n3\\n1 2 3\") == \"0\"\nassert solution(\"1\\n2\\n100000 100000\") == \"0\"\nassert solution(\"1\\n2\\n1 100000\") == \"99999\"\nassert solution(\"1\\n5\\n9 4 3 3 3\") == \"2\"\nassert solution(\"1\\n5\\n3 9 4 5 2\") == \"3\"\nassert solution(\"1\\n5\\n3 9 4 5 2\") == \"3\"\nassert solution(\"1\\n5\\n1 3 5 5 1\") == \"2\"\nassert solution(\"1\\n5\\n1 2 3 4 5\") == \"0\"\nassert solution(\"1\\n5\\n5 4 3 2 1\") == \"0\"\nassert solution(\"1\\n5\\n1000000 1 1 1 1\") == \"999999\"\nassert solution(\"1\\n5\\n1 1 1 1 1000000\") == \"999999\"\nassert solution(\"1\\n5\\n5 10 5 10 5\") == \"5\"\nassert solution(\"1\\n3\\n5 10 5\") == \"5\"\nassert solution(\"1\\n3\\n5 4 3\") == \"2\"\nassert solution(\"1\\n2", "solution('''1\n5\n4 2 8 5 5''') == '3'\n\n# put your code here\nif __name__ == '__main__':\n    from sys import stdin\n    from time import time\n    from random import randint\n\n    n = 100\n    l = [randint(1, 10**7) for i in range(n)]\n    start = time()\n    ans = solution(f'1\\n{n}\\n' + ' '.join(map(str, l)))\n    print(ans)\n    print(time() - start)", "solution(\"\"\"\n1\n5\n1 1 1 1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n3\n3\n1 2 3\n2\n1 10\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n2\n9\n0\n\"\"\"", "solution(\"\"\"\n3\n3\n10 40 40\n3\n10 40 50\n3\n10 10 10\n\"\"\") == \"\"\"\n0\n10\n0\n\"\"\"", "solution(stdin) == stdout", "int(solution('''\n1\n5\n1 2 2 1 3\n''')) == 0\nassert int(solution('''\n1\n2\n3 2\n''')) == 1\nassert int(solution('''\n1\n4\n4 1 1 4\n''')) == 0\nassert int(solution('''\n1\n3\n3 3 3\n''')) == 0\nassert int(solution('''\n1\n6\n2 3 3 3 3 3\n''')) == 0\nassert int(solution('''\n1\n7\n1 1 2 2 2 2 2\n''')) == 0\nassert int(solution('''\n1\n8\n1 1 1 2 2 2 3 3\n''')) == 0\nassert int(solution('''\n1\n4\n1 2 3 4\n''')) == 3\nassert int(solution('''\n1\n4\n4 3 2 1\n''')) == 3\nassert int(solution('''\n1\n4\n1 1 1 1\n''')) == 0\nassert int(solution('''\n1\n6\n1 1 1 1 1 1\n''')) == 0\nassert int(solution('''\n1\n7\n1 1 1 1 1 1 1\n''')) == 0\nassert", "solution('''\n4\n4\n4 2 3 4\n4\n1 2 3 4\n5\n5 4 3 2 1\n2\n5 4\n''') == '''\n0\n0\n0\n1\n'''", "solution('''3\n3\n10 10 10\n4\n4 2 4 2\n4\n1 10 4 8''') == '0\\n0\\n5', 'failed test 1'\nassert solution('''3\n3\n3 3 1\n2\n2 3\n2\n2 2''') == '2\\n1\\n0', 'failed test 2'\n\nif __name__ == '__main__':\n    print(solution(sys.stdin.read()))", "solution('''\n2\n3\n1 2 3\n3\n6 3 5\n''') == '''\n0\n0\n'''", "solution('''\n3\n3\n1 2 1\n4\n4 1 4 1\n4\n1 100 1 1\n''') == '''\n0\n1\n0\n'''", "solution('''\\\n3\n3\n1 2 3\n4\n1 1 1 1\n4\n4 2 1 3\n''') == '''\\\n0\n0\n1\n'''", "solution('''\n1\n5\n1 2 4 3 2\n''') == '1'\nassert solution('''\n1\n7\n1 2 3 2 2 1 1\n''') == '1'\nassert solution('''\n1\n1\n8\n''') == '0'\nassert solution('''\n1\n8\n7 6 5 4 3 2 1 8\n''') == '0'\nassert solution('''\n1\n4\n1 2 5 1\n''') == '4'\nassert solution('''\n1\n4\n1 2 3 1\n''') == '2'\nassert solution('''\n1\n4\n10 2 6 7\n''') == '5'\nassert solution('''\n1\n5\n1 1 1 1 1\n''') == '0'\nassert solution('''\n1\n3\n1 2 3\n''') == '2'\nassert solution('''\n1\n4\n1 1 1 1\n''') == '0'\nassert solution('''\n1\n5\n8 4 2 1 1\n''') == '7'\nassert solution('''\n1\n4\n1 1 2 2\n''') == '1'\nassert solution('''\n1\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '9'\nassert solution(", "solution('''\n2\n3\n3 2 1\n3\n1 2 3\n''') == '0\\n0\\n'\n\nassert solution('''\n5\n5\n5 4 2 1 1\n5\n5 4 2 1 2\n5\n5 4 2 3 2\n5\n5 4 2 3 3\n5\n5 4 4 3 3\n''') == '2\\n1\\n1\\n0\\n0\\n'\n\nassert solution('''\n4\n4\n2 3 3 3\n4\n3 3 3 3\n4\n3 2 2 2\n4\n4 4 4 4\n''') == '1\\n0\\n0\\n0\\n'\n\nassert solution('''\n1\n6\n2 3 3 3 3 3\n''') == '0\\n'\n\nprint(\"Passed all tests\")", "solution('''\n2\n3\n3 2 1\n4\n2 3 3 3\n''') == '''\n0\n1\n'''", "solution(input_test_case) == output_test_case", "solution('''3\n2\n2 3\n3\n3 5 5\n3\n1 2 3''') == '''1\n0\n0'''", "solution('''\n2\n5\n1 3 1 3 4\n4\n2 4 2 6\n''') == '''\n1\n0\n'''", "solution('''1\n3\n10 10 10''') == '0'\nassert solution('''3\n3\n10 10 10\n3\n2 2 3\n3\n3 3 3''') == '''0\n1\n0'''\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''", "solution('''\n1\n5\n1 2 3 4 5\n''') == '0'\n\n# run and see performance\nimport timeit\nt = timeit.timeit('solution(sys.stdin.read())',\n                  'from __main__ import solution, sys',\n                  number=1000)\nprint(f'Time: {t:.3f}s')", "solution(\"\"\"4\n4\n3 2 1 2\n4\n1 1 2 2\n5\n1 1 1 2 2\n5\n2 3 3 3 4\"\"\") == \"\"\"0\n0\n0\n0\"\"\"", "solution(\n    \"\"\"\n    3\n    6\n    3 3 3 3 3 3\n    4\n    1 5 6 9\n    2\n    5 5\n    \"\"\"\n) == \"\"\"\n0\n1\n0\n\"\"\", \"examples\"\nassert solution(\n    \"\"\"\n    1\n    3\n    1 1 1\n    \"\"\"\n) == \"\"\"\n0\n\"\"\", \"same\"\nassert solution(\n    \"\"\"\n    4\n    8\n    1 1 1 2 3 3 3 3\n    2\n    1 2\n    4\n    1 1 2 2\n    2\n    1 2\n    \"\"\"\n) == \"\"\"\n1\n0\n1\n0\n\"\"\", \"short\"\nassert solution(\n    \"\"\"\n    3\n    3\n    3 3 3\n    3\n    3 3 3\n    3\n    3 3 3\n    \"\"\"\n) == \"\"\"\n0\n0\n0\n\"\"\", \"small\"\nassert solution(\n    \"\"\"\n    2\n    20\n    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n    20\n    3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n    \"\"\"\n) == \"\"\"\n0\n0\n\"\"\", \"big\"\nassert solution(\n    \"\"\"\n    2\n    5\n   ", "solution(test_cases) == answers\n\n# check the performance of solution\n%%timeit\nsolution(test_cases)", "solution(\"\"\"\n4\n4\n2 5 2 3\n4\n1 2 3 4\n4\n1 5 2 3\n4\n2 3 4 5\n\"\"\") == \"\"\"\n0\n0\n1\n0\n\"\"\"\n\n# check if the submitted solution is accepted\nassert solution(\"\"\"\n4\n4\n2 5 2 3\n4\n1 2 3 4\n4\n1 5 2 3\n4\n2 3 4 5\n\"\"\") == \"\"\"\n0\n0\n1\n0\n\"\"\"", "solution(stdin) == stdout\n# or write test cases\n# assert solution(input_1) == output_1\n# assert solution(input_2) == output_2\n# assert solution(input_3) == output_3", "solution('''\n1\n5\n1 2 3 4 5\n''') == '4'\n\nassert solution('''\n1\n3\n1 2 3\n''') == '2'\n\nassert solution('''\n1\n5\n5 4 3 2 1\n''') == '4'\n\nassert solution('''\n1\n1\n1\n''') == '0'\n\nassert solution('''\n2\n2\n2 3\n2\n1 2\n''') == '1\\n1'\n\nassert solution('''\n2\n2\n2 2\n2\n2 2\n''') == '0\\n0'\n\nassert solution('''\n2\n2\n1 2\n2\n2 1\n''') == '1\\n1'\n\nassert solution('''\n3\n3\n1 3 1\n3\n1 3 1\n3\n3 3 3\n''') == '2\\n2\\n0'\n\nassert solution('''\n1\n5\n1 4 1 2 2\n''') == '2'\n\nassert solution('''\n4\n4\n1 2 3 2\n4\n1 2 3 4\n4\n1 2 2 1\n4\n4 1 2 3\n''') == '2\\n0\\n1\\n2'\n\nassert solution('''\n1"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length"], "sum_logprob": [-18.273234764899993, -47.26350050260001, -49.357598562307025, -35.36769107671001, -6.6059280000000005, -91.44040675887999, -87.362039849162, -80.85777882136846, -46.75863819136399, -6.731980393, -24.449292179750003, -26.2442104832, -24.014335778200003, -30.124805969750007, -82.06093005959895, -90.98446039506076, -14.08308154096, -23.03681422408999, -41.79008942697801, -100.97571365807396, -19.62474916159999, -46.09687377648002, -45.383877937000015, -48.54019250156, -26.58658644892, -127.62710711825197, -79.22583289804997, -31.30803030896001, -30.123002984799992, -5.744058504, -96.11330444596173, -33.450495112239985, -72.06875216472999, -18.777279721000003, -29.5838308814, -25.189367701199995, -131.300046896276, -102.04108679546503, -18.6048005383, -12.695545282600001, -23.4600056863, -27.619601307000003, -54.47757853670601, -50.53950058240003, -42.3171771993, -137.89245825176005, -24.4764375466, -62.589849619795, -37.08211902226, -113.10749400583101], "mean_logprob": [-0.34477801443207545, -0.8010762797050848, -0.39172697271672224, -0.4476922921102532, -3.3029640000000002, -0.30480135586293333, -0.2912067994972067, -0.26952592940456166, -0.30965985557194703, -0.48085574235714285, -0.9779716871899999, -0.6401026947121952, -0.600358394455, -0.8141839451283783, -0.2735364335319967, -0.3032815346502027, -0.04694360513653333, -0.3839469037348333, -1.04475223567445, -0.6556864523251559, -0.5946893685333333, -0.3414583242702222, -0.6773713124925373, -0.7034810507472463, -0.5779692706286956, -0.4254236903941733, -0.600195703773106, -0.49695286204698413, -0.8141352158054054, -0.6382287226666666, -0.320377681486539, -0.6558920610243137, -0.6551704742248182, -0.58678999128125, -0.704376925747619, -0.5724856295727273, -0.4376668229875867, -0.5314639937263802, -0.5637818344939394, -0.8463696855066667, -0.6702858767514286, -0.7891314659142857, -0.18159192845568667, -0.5809137997977012, -0.9003654723255319, -0.4596415275058667, -0.8440150878137931, -0.5742188038513303, -0.6867059078196296, -0.3770249800194367]}
{"prompt": "'''\nYou are given a rooted tree consisting of n vertices numbered from 1 to n. The root of the tree is the vertex 1.\n\nYou have to color all vertices of the tree into n colors (also numbered from 1 to n) so that there is exactly one vertex for each color. Let c_i be the color of vertex i, and p_i be the parent of vertex i in the rooted tree. The coloring is considered beautiful if there is no vertex k (k > 1) such that c_k = c_{p_k} - 1, i. e. no vertex such that its color is less than the color of its parent by exactly 1.\n\nCalculate the number of beautiful colorings, and print it modulo 998244353.\n\nInput\n\nThe first line contains one integer n (2 \u2264 n \u2264 250000) \u2014 the number of vertices in the tree.\n\nThen n-1 lines follow, the i-th line contains two integers x_i and y_i (1 \u2264 x_i, y_i \u2264 n; x_i \u2260 y_i) denoting an edge between the vertex x_i and the vertex y_i. These edges form a tree.\n\nOutput\n\nPrint one integer \u2014 the number of beautiful colorings, taken modulo 998244353.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n3\n1 2\n2 3\n''') == '4'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '12'\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n''') == '120'\nassert solution('''\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n''') == '1350'\nassert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n3\n1 2\n2 3\n''') == '4'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '12'\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n''') == '120'\nassert solution('''\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n''') == '1350'\nassert solution('''\n5\n3 1\n3 2\n3 4\n3 5\n''') == '14'\nassert solution('''\n10\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "solution('''\n4\n1 2\n2 3\n2 4\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n3\n1 2\n1 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n2\n1 2\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == '30'\n\n# check the correctness of solution\nassert solution('''\n7\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n''') == '210'\n\n# check the correctness of solution\nassert solution('''\n8\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n''') == '1680'\n\n# check the correctness of solution\nassert solution('''\n9\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n''') == '13440'\n\n# check the correctness of solution\nassert solution('''\n10\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n''') == '110880'", "solution('''\n2\n1 2\n''') == '1'\nassert solution('''\n3\n1 2\n2 3\n''') == '2'\nassert solution('''\n3\n1 2\n1 3\n''') == '4'\nassert solution('''\n4\n1 2\n1 3\n1 4\n''') == '9'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '25'\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n''') == '5'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n''') == '5'\nassert solution('''\n7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n''') == '54'\nassert solution('''\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n''') == '188'\nassert solution('''\n9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n''') == '563'\nassert solution('''\n10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8", "solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n3\n1 2\n2 3\n''') == '3'\nassert solution('''\n3\n1 2\n1 3\n''') == '2'\nassert solution('''\n4\n1 2\n1 3\n2 4\n''') == '5'\nassert solution('''\n4\n1 2\n1 3\n1 4\n''') == '1'\nassert solution('''\n10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == '3628800'\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n''') == '30'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '1'\nassert solution('''\n6\n1 2\n1 3\n2 4\n2 5\n2 6\n''') == '420'\nassert solution('''\n6\n1 2\n1 3\n1 4\n1 5\n1 6\n''') == '1'\nassert solution('''\n7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n''') == '1'\nassert solution", "solution('''\n4\n1 2\n2 3\n3 4\n''') == '''\n3\n'''\n\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n2\n'''\n\nassert solution('''\n4\n1 2\n2 3\n3 4\n4 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n''') == '''\n5\n'''\n\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n3 4\n''') == '''\n5\n'''\n\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n3 4\n4 5\n''') == '''\n2\n'''\n\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n3 4\n4 5\n5 1\n''') == '''\n0\n'''", "solution('''\n3\n1 2\n2 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n4\n1 2\n1 3\n1 4\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n6\n1 2\n1 3\n2 4\n2 5\n3 6\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n2\n1 2\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n10\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n6 10\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n25\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n", "solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''", "solution(\n'''\n2\n1 2\n''') == '2'\n\nassert solution(\n'''\n3\n1 2\n2 3\n''') == '3'\n\nassert solution(\n'''\n6\n1 2\n2 3\n1 4\n4 5\n4 6\n''') == '30'", "solution('''\n3\n1 2\n2 3\n''') == '18'\n\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n''') == '300'\n\nassert solution('''\n2\n1 2\n''') == '2'\n\nassert solution('''\n250000\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 250000\n''') == '917160580'", "solution('''5\n1 2\n1 3\n1 4\n1 5''') == '0'\nassert solution('''3\n1 2\n1 3''') == '1'\nassert solution('''10\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 9\n4 10''') == '12'\nassert solution('''6\n1 2\n1 3\n1 4\n2 5\n2 6''') == '6'\nassert solution('''6\n1 2\n1 3\n1 4\n1 5\n1 6''') == '23'\nassert solution('''250000\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n", "solution('''\n5\n1 2\n1 3\n2 4\n2 5\n''') == '60'\nassert solution('''\n3\n1 2\n1 3\n''') == '3'\nassert solution('''\n4\n1 2\n1 3\n1 4\n''') == '4'\nassert solution('''\n4\n1 2\n2 3\n2 4\n''') == '24'\nassert solution('''\n1\n''') == '1'\nassert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n2\n2 1\n''') == '2'\nassert solution('''\n3\n1 2\n2 3\n''') == '3'\nassert solution('''\n3\n1 2\n3 2\n''') == '3'\nassert solution('''\n3\n2 1\n3 2\n''') == '3'\nassert solution('''\n3\n2 1\n2 3\n''') == '6'\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n''') == '120'\nassert solution('''\n6\n1 2\n2 3\n3 4\n3 5\n3 6\n''') == '720'\nassert solution('''\n7\n1 2\n2 3", "(solution('1\\n2\\n2 3\\n2 4\\n') == '6')\nassert (solution('2\\n2\\n1 2\\n') == '1')\nassert (solution('3\\n2\\n1 2\\n2 3\\n') == '4')\nassert (solution('1\\n2\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n2 10\\n2 11\\n2 12\\n2 13\\n2 14\\n2 15\\n2 16\\n2 17\\n2 18\\n2 19\\n2 20\\n2 21\\n2 22\\n2 23\\n2 24\\n2 25\\n2 26\\n2 27\\n2 28\\n2 29\\n2 30\\n2 31\\n2 32\\n2 33\\n2 34\\n2 35\\n2 36\\n2 37\\n2 38\\n2 39\\n2 40\\n2 41\\n2 42\\n2 43\\n2 44\\n2 45\\n2 46\\n2 47\\n2 48\\n2 49\\n2 50\\n2 51\\n2 52\\n2 53\\n2 54\\n2 55\\n2 56\\n2 57\\", "solution(stdin) == stdout", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution", "solution('''4\n1 2\n1 3\n1 4''') == '9'\nassert solution('''4\n2 3\n2 4\n2 1''') == '9'\nassert solution('''5\n1 2\n1 3\n1 4\n1 5''') == '20'\nassert solution('''5\n2 3\n2 4\n2 5\n2 1''') == '20'\nassert solution('''1''') == '1'\nassert solution('''250000\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 250000''') == '176991089'\nassert solution('''250000\n2 1\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n13 12\n14 13\n15 14\n16 15\n17 16\n18 17\n19 18\n20 19\n21 20\n22 21\n23 22\n24 23\n250000 24''') == '176991089'\nassert solution('''5\n2 3\n2 4\n2", "solution('''\n3\n1 2\n2 3\n''') == '''\n6\n'''\n\nassert solution('''\n3\n1 2\n1 3\n''') == '''\n9\n'''\n\n# print the solution\nwith open('OUTPUT.txt', 'w') as f:\n    sys.stdin = open('INPUT.txt', 'r')\n    f.write(solution(sys.stdin.read()))", "(solution('''\n4\n1 2\n2 3\n2 4\n''') == '4')\nassert (solution('''\n4\n1 2\n1 3\n1 4\n''') == '4')\nassert (solution('''\n10\n1 2\n1 3\n2 4\n3 5\n3 6\n4 7\n4 8\n5 9\n5 10\n''') == '10')\nassert (solution('''\n10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == '1')\nassert (solution('''\n2\n1 2\n''') == '2')\nassert (solution('''\n10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '10')\nassert (solution('''\n10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n8 10\n''') == '9')\nassert (solution('''\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n''') == '8')\nassert (solution('''\n11\n1 2\n1 3", "solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n''') == '0'\n\n# check the correctness of solution\nassert", "solution('''\n4\n1 2\n2 3\n2 4\n''') == '''\n1\n'''\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '''\n1\n'''\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '''\n1\n'''\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n6\n'''\nassert solution('''\n2\n1 2\n''') == '''\n2\n'''\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n''') == '''\n0\n'''\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n6\n'''\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n''') == '''\n0\n'''\nassert solution('''\n7\n1 2\n2 3\n3 4\n3 5\n2 6\n2 7\n''') == '''\n0\n'''\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '''\n1\n'''\nassert solution('''\n5\n1 2\n2 3\n3 4\n4", "solution('''\n4\n1 2\n2 3\n2 4\n''') == '''\n4\n'''\n\nassert solution('''\n7\n1 2\n2 3\n2 4\n1 5\n1 6\n1 7\n''') == '''\n20\n'''\n\nassert solution('''\n6\n1 2\n2 3\n3 4\n3 5\n3 6\n''') == '''\n10\n'''\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n3 5\n''') == '''\n5\n'''\n\nassert solution('''\n4\n1 2\n2 3\n2 4\n''') == '''\n4\n'''", "solution('''3\n1 2\n1 3''') == '18'\nassert solution('''2\n1 2''') == '2'\nassert solution('''8\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n7 8''') == '243186624'\n\n# get the input\nprint(solution(input()))", "solution(\"\"\"\n2\n1 2\n\"\"\") == \"\"\"1\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 2\n2 3\n3 4\n3 5\n\"\"\") == \"\"\"20\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n1 2\n2 3\n\"\"\") == \"\"\"3\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n250000\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 250000\n\"\"\") == \"\"\"930333015\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"\"\"5\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n1 2\n1 3\n1 4\n1 5\n1 6\n\"\"\") == \"\"\"20\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n1 2\n2 3\n\"\"\") == \"\"\"3\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n250000\n1 2\n1 3\n1 4", "solution('''\n3\n1 2\n2 3\n''') == '3'\n\nassert solution('''\n2\n1 2\n''') == '2'\n\nassert solution('''\n5\n1 2\n2 3\n1 4\n4 5\n''') == '0'\n\nassert solution('''\n12\n1 2\n1 3\n2 4\n2 5\n2 6\n4 7\n4 8\n4 9\n7 10\n7 11\n7 12\n''') == '0'\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n3 5\n''') == '0'\n\nassert solution('''\n6\n1 2\n2 3\n3 4\n3 5\n1 6\n''') == '0'\n\nassert solution('''\n8\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n2 8\n''') == '0'\n\nassert solution('''\n1\n''') == '1'\n\n# test custom input input/output\n# if __name__ == '__main__':\n#     a = open('1.in').read()\n#     b = open('1.out').read()\n#     assert solution(a.strip()) == b.strip()", "solution(\"\"\"\n4\n1 2\n2 3\n2 4\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n3\n1 2\n1 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4\n1 2\n1 3\n1 4\n\"\"\") == \"24\"\n\nassert solution(\"\"\"\n5\n1 2\n1 3\n2 4\n2 5\n\"\"\") == \"120\"\n\nassert solution(\"\"\"\n5\n1 2\n2 3\n3 4\n3 5\n\"\"\") == \"40\"\n\nassert solution(\"\"\"\n5\n1 2\n2 3\n2 4\n2 5\n\"\"\") == \"0\"\n\nprint(\"passed all tests\")", "solution(\"\"\"5\n1 2\n1 3\n1 4\n1 5\"\"\") == '''10'''\n\n# get all test cases\nimport os\ndirectory = os.path.dirname(__file__)\nfiles = [file for file in os.listdir(directory) if file.endswith(\".in\")]\n\n# run the solution for all testcases\noutputs = [solution(open(os.path.join(directory, file)).read()) for file in files]\n\n# compare output with answer file\nfor i, file in enumerate(files):\n    answer = open(os.path.join(directory, file.replace(\".in\", \".ans\"))).read()\n    assert outputs[i] == answer, f\"{file} failed\"\n\nprint(\"All tests passed\")", "solution(get_input_path(__file__)) == get_output_path(__file__)", "solution(sample0) == '13'\nassert solution(sample1) == '27'\nassert solution(sample2) == '1'\nassert solution(sample3) == '13'\nassert solution(sample4) == '27'\nassert solution(sample5) == '1'\nassert solution(sample6) == '13'\nassert solution(sample7) == '27'\nassert solution(sample8) == '1'\nassert solution(sample9) == '13'\nassert solution(sample10) == '27'\nassert solution(sample11) == '1'\nassert solution(sample12) == '13'\nassert solution(sample13) == '27'\nassert solution(sample14) == '1'\nassert solution(sample15) == '13'\nassert solution(sample16) == '27'\nassert solution(sample17) == '1'\nassert solution(sample18) == '13'\nassert solution(sample19) == '27'\nassert solution(sample20) == '1'\nassert solution(sample21) == '13'\nassert solution(sample22) == '27'\nassert solution(sample23) == '1'\nassert solution(sample24) == '13'\nassert solution(sample25) == '27'\nassert solution(sample26) == '1'\nassert solution(sample", "solution('''\n6\n1 2\n1 3\n2 4\n2 5\n3 6\n''') == '72'\n\n# run on codeforces\nfrom codeforces import codeforces_runner\nfrom codeforces import TestCase\nfrom io import StringIO\n\ntry:\n    codeforces_runner(solution, TestCase(StringIO('''\n6\n1 2\n1 3\n2 4\n2 5\n3 6\n''')))\nexcept:\n    pass\n\ntry:\n    codeforces_runner(solution, TestCase(StringIO('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n''')))\nexcept:\n    pass\n\ntry:\n    codeforces_runner(solution, TestCase(StringIO('''\n2\n1 2\n''')))\nexcept:\n    pass\n\ntry:\n    codeforces_runner(solution, TestCase(StringIO('''\n4\n1 2\n2 3\n3 4\n''')))\nexcept:\n    pass\n\ntry:\n    codeforces_runner(solution, TestCase(StringIO('''\n4\n1 2\n1 3\n1 4\n''')))\nexcept:\n    pass\n", "solution('''\n3\n1 2\n2 3\n''') == '''\n6\n'''\n\n# -- Boilerplate --\n\ndef input() -> str:\n    return stdin\n\ndef main() -> None:\n    print(solution(input()))\n\nmain()", "solution('''\n4\n1 2\n2 3\n2 4\n''') == '''\n4\n'''\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '''\n8\n'''\nassert solution('''\n2\n1 2\n''') == '''\n2\n'''\nassert solution('''\n2\n2 1\n''') == '''\n2\n'''\n\n# stress testing\nimport timeit\nfrom random import randint, seed\n\ndef stress_testing():\n    seed(0)\n    while True:\n        n = randint(2, 100000)\n        edges = []\n        for i in range(n-1):\n            u = randint(1, n)\n            v = randint(1, n)\n            while (u, v) in edges or (v, u) in edges:\n                u = randint(1, n)\n                v = randint(1, n)\n            edges.append((u, v))\n        stdin = '{}\\n'.format(n)\n        for u, v in edges:\n            stdin += '{} {}\\n'.format(u, v)\n        start = timeit.default_timer()\n        user_solution = solution(stdin)\n       ", "solution('''\n3\n1 2\n2 3\n''') == '1'\n\n# test case 1\nt1 = [\n    '5',\n    '1 2',\n    '2 3',\n    '3 4',\n    '4 5'\n]\nassert solution('\\n'.join(t1)) == '5'\n\n# test case 2\nt2 = [\n    '5',\n    '1 2',\n    '2 3',\n    '2 4',\n    '4 5'\n]\nassert solution('\\n'.join(t2)) == '10'\n\n# test case 3\nt3 = [\n    '10',\n    '1 2',\n    '2 3',\n    '2 4',\n    '2 5',\n    '1 6',\n    '6 7',\n    '6 8',\n    '6 9',\n    '6 10'\n]\nassert solution('\\n'.join(t3)) == '24'\n\n# test case 4\nt4 = [\n    '4',\n    '1 2',\n    '2 3',\n    '3 4'\n]\nassert solution('\\n'.join(t4)) == '0'\n\n# test case 5\nt5 = [\n    '2',\n    '1 2'\n]\n", "solution(\"4\\n1 2\\n1 3\\n2 4\") == \"8\"\n\n# a simple test case\nimport random\nn = 5\nadj = {i:[] for i in range(1, n+1)}\nfor i in range(1, n):\n    adj[i].append(i+1)\n    adj[i+1].append(i)\n\nprint(n)\nfor k, v in adj.items():\n    for vv in v:\n        print(k, vv)", "solution('''\n3\n1 2\n2 3\n''') == '''\n6\n'''\n\nassert solution('''\n4\n1 2\n2 3\n2 4\n''') == '''\n0\n'''\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n3 5\n''') == '''\n12\n'''", "solution('''\n2\n1 2\n''') == '1'\nassert solution('''\n3\n1 2\n2 3\n''') == '3'\nassert solution('''\n3\n1 2\n1 3\n''') == '9'\nassert solution('''\n2\n1 2\n''') == '1'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n''') == '33'\nassert solution('''\n4\n1 2\n2 3\n2 4\n''') == '15'\nassert solution('''\n4\n1 2\n1 3\n1 4\n''') == '75'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '375'\nassert solution('''\n9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n''') == '7158975'\nassert solution('''\n6\n1 2\n1 3\n2 4\n2 5\n2 6\n''') == '945'\nassert solution('''\n6\n1 2\n1 3\n1 4\n1 5\n1 6\n''') == '4725'\nassert solution('''\n7\n1 2\n1 3\n1 4\n", "solution('''\n4\n1 2\n2 3\n2 4\n''') == '8'\n\n# submit solution\nimport sys\nif sys.argv[-1] == 'INPUT':\n    print(solution(sys.stdin.read()))\nelse:\n    with open('input.txt', 'r') as file:\n        print(solution(file.read()))", "solution(\"\"\"5\n2 1\n4 2\n4 3\n4 5\"\"\") == \"4\"\n\n# test solution\ns = \"\"\"5\n2 1\n4 2\n4 3\n4 5\"\"\"\nimport time\nstart = time.time()\nprint(solution(s))\nprint(\"Time: \", time.time() - start)", "solution('''\n4\n1 2\n2 3\n2 4\n''') == '''\n1\n'''\n\nassert solution('''\n3\n1 2\n1 3\n''') == '''\n0\n'''\n\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '''\n3\n'''", "solution(example1) == '5'\nassert solution(example2) == '2'\nassert solution(example3) == '138855'\n\n# run the solution\nprint(solution(stdin))", "solution('''\n4\n1 2\n2 3\n3 4\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n''') == '''\n60\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 2\n1 3\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == '''\n3628800\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n1 2\n1 3\n2 4\n2 5\n2 6\n3 7\n''') == '''\n1350\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n''') == '''\n60\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == '''\n840\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2", "solution(\"\"\"\n5\n1 2\n1 3\n2 4\n3 5\n\"\"\") == '5'\n\nassert solution(\"\"\"\n4\n1 2\n2 3\n3 4\n\"\"\") == '2'\n\nassert solution(\"\"\"\n4\n1 2\n2 3\n3 4\n\"\"\") == '2'\n\n# check the performance of solution\nfrom random import randint\nimport timeit\nprint(timeit.timeit(stmt='solution(\"\"\"4\\n1 2\\n2 3\\n3 4\\n\"\"\")', setup=\"from __main__ import solution\", number=10000))", "solution('''\n''') == '''\n'''\n\n# display the input and output\ninput_lines = stdin.split('\\n')\nfor i in range(0, len(input_lines)):\n    print(f'input line {i}: \"{input_lines[i]}\"')\nprint(f'output: \"{solution(stdin)}\"')", "solution('''1\n''') == '1'\nassert solution('''3\n1 2\n2 3\n''') == '2'\nassert solution('''5\n1 2\n2 3\n2 4\n2 5\n''') == '16'\nassert solution('''3\n1 2\n1 3\n''') == '0'\nassert solution('''8\n1 3\n1 4\n1 2\n2 5\n2 6\n2 7\n2 8\n''') == '9'\nassert solution('''6\n1 2\n1 3\n1 4\n1 5\n1 6\n''') == '120'\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n''') == '42'\nassert solution('''4\n1 2\n1 3\n2 4\n''') == '8'\nassert solution('''7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n''') == '42'\nassert solution('''7\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n''') == '8'\nassert solution('''7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n''') == '0'\nassert solution('''5", "solution('''\n7\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n''') == '''\n18\n'''\n\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n''') == '''\n15\n'''\n\n# print the result\nprint(solution(sys.stdin.read()))", "solution('''\n4\n1 2\n2 3\n3 4\n''') == '12'\n\nassert solution('''\n2\n1 2\n''') == '1'\n\nassert solution('''\n6\n1 2\n2 3\n2 4\n2 5\n5 6\n''') == '180'", "solution(\"\"\"\n4\n1 2\n2 3\n2 4\n\"\"\") == \"\"\"\n4\n\"\"\"\n\nassert solution(\"\"\"\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"\"\"\n180\n\"\"\"\n\nassert solution(\"\"\"\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n\"\"\") == \"\"\"\n10080\n\"\"\"\n\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 2\n2 3\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2\n2 3\n2 4\n\"\"\") == \"\"\"\n4\n\"\"\"\n\nassert solution(\"\"\"\n5\n1 2\n2 3\n2 4\n2 5\n\"\"\") == \"\"\"\n20\n\"\"\"\n\nassert solution(\"\"\"\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"\"\"\n180\n\"\"\"\n\nassert solution(\"\"\"\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n\"\"\") == \"\"\"\n10080\n\"\"\"\n\nassert solution(\"\"\"", "solution('''\n4\n1 2\n2 3\n3 4\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n5 9\n5 10\n''') == '''\n366425543\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2\n1 3\n1 4\n3 5\n''') == '''\n15\n'''\n\n# check the correctness of solution\nassert solution('''\n8\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n''') == '''\n262664\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2\n1 3\n1 4\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n''') == '''\n9\n'''\n\n# check the correctness of solution\nassert solution('''\n8\n1 2\n", "solution('''\n4\n1 2\n2 3\n3 4\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n4\n1 2\n2 3\n2 4\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n''') == '13'\n\n# check the correctness of solution\nassert solution('''\n10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '17'\n\n# check the correctness of solution\nassert solution('''\n3\n1 2\n2 3\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n250000\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 250000\n''') == '699999728'\n\n# check the correctness of solution\nassert solution('''\n250000\n1 2\n2 3", "solution(\"\"\"2\n1 2\"\"\") == \"2\"\nassert solution(\"\"\"3\n1 2\n2 3\"\"\") == \"4\"\nassert solution(\"\"\"4\n1 2\n2 3\n2 4\"\"\") == \"12\"\nassert solution(\"\"\"4\n1 2\n1 3\n1 4\"\"\") == \"4\"\nassert solution(\"\"\"7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\"\"\") == \"16\"\nassert solution(\"\"\"3\n1 2\n2 3\"\"\") == \"4\"\nassert solution(\"\"\"3\n1 2\n1 3\"\"\") == \"6\"\nassert solution(\"\"\"3\n1 2\n2 3\"\"\") == \"4\"\nassert solution(\"\"\"4\n1 2\n1 3\n1 4\"\"\") == \"4\"\nassert solution(\"\"\"5\n1 2\n1 3\n1 4\n1 5\"\"\") == \"8\"\nassert solution(\"\"\"6\n1 2\n1 3\n1 4\n1 5\n1 6\"\"\") == \"12\"\nassert solution(\"\"\"7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\"\"\") == \"16\"\nassert solution(\"\"\"7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\"\"\") == \"16\"\nassert solution(\"\"\"8\n1 2\n1", "solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n3\n1 2\n2 3\n''') == '6'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '2'\nassert solution('''\n7\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7\n''') == '24'\nassert solution('''\n9\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n''') == '2'\nassert solution('''\n11\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n''') == '16'\nassert solution('''\n13\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n''') == '64'\nassert solution('''\n15\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n5 10\n5 11\n6 12\n6 13\n7 14\n7 15\n''') == '2'\nassert solution('''\n17\n1 2", "solution('''\n3\n1 2\n2 3\n''') == '''\n12\n'''\n\nassert solution('''\n3\n1 2\n1 3\n''') == '''\n3\n'''\n\nassert solution('''\n5\n1 2\n2 3\n2 4\n2 5\n''') == '''\n120\n'''\n\nassert solution('''\n6\n1 2\n2 3\n3 4\n4 5\n4 6\n''') == '''\n20\n'''\n\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n12\n'''\n\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n12\n'''\n\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n12\n'''\n\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n12\n'''\n\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n12\n'''\n\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n12\n'''\n\nassert solution('''\n3\n1 2\n2 3\n''') == '''\n12\n'''\n\n"], "finish_reason": ["length", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "length", "length", "length", "length", "length"], "sum_logprob": [-68.86473104917144, -42.558451503401, -66.193363546226, -56.44698715006798, -59.67043027407198, -55.61126260073898, -11.5683246718, -24.75932948915001, -51.59002785205501, -69.79258422948992, -65.59364231988705, -44.65458042895799, -5.7103828089999995, -13.699231737005986, -73.82690789106194, -33.77460161571999, -70.31653172166195, -21.962799470329983, -65.62763710913605, -47.275725634984, -52.19815122705998, -77.29354219850396, -111.79366337562993, -60.27643541693503, -83.72229578842006, -12.41545237064, -39.091158324898004, -85.20993544459796, -36.403700361959984, -82.08659696797802, -70.51796200946106, -60.62051974472, -25.528950065168008, -83.54434303939496, -26.085118608285004, -47.253550555870014, -25.20455787093299, -42.86617853595002, -69.34895418243698, -58.87714153869402, -47.02834148060995, -100.32334550706005, -41.954126281475, -27.43985673821, -56.909283894988974, -100.34491430209567, -71.58151313697198, -64.27250061532396, -60.481724623185436, -45.99274926744411], "mean_logprob": [-0.22954910349723834, -0.14186150501133668, -0.22064454515408666, -0.18815662383356, -0.2507160935885378, -0.18537087533579666, -0.1960732995220339, -0.33916889711164383, -0.3204349556028261, -0.23264194743163333, -0.21864547439962334, -0.14884860142986, -0.6344869787777777, -0.04566410579002, -0.24608969297020666, -0.31862831712943396, -0.23438843907220666, -0.07320933156776667, -0.21875879036378668, -0.29363804742226085, -0.6069552468262791, -0.25764514066168, -0.38549539095044827, -0.34443677381105714, -0.4574988840897268, -0.5173105154433334, -0.13030386108299333, -0.28403311814866, -0.5433388113725373, -0.27362198989326, -0.23505987336487, -0.5051709978726666, -0.30034058900197647, -0.27848114346465, -0.2866496550360989, -0.6136824747515585, -0.29652421024627057, -0.8748199701214285, -0.23116318060812333, -0.42664595317894205, -0.546841180007093, -0.33441115169019997, -0.47675143501676137, -0.3758884484686301, -0.18969761298329668, -0.33448304767365233, -0.23860504378990666, -0.21424166871774666, -0.20160574874395168, -0.15330916422481367]}
{"prompt": "'''\nAfter getting bored by playing with crayons, you decided to switch to Legos! Today, you're working with a long strip, with height 1 and length n, some positions of which are occupied by 1 by 1 Lego pieces.\n\nIn one second, you can either remove two adjacent Lego pieces from the strip (if both are present), or add two Lego pieces to adjacent positions (if both are absent). You can only add or remove Lego's at two adjacent positions at the same time, as otherwise your chubby fingers run into precision issues.\n\nYou want to know exactly how much time you'll spend playing with Legos. You value efficiency, so given some starting state and some ending state, you'll always spend the least number of seconds to transform the starting state into the ending state. If it's impossible to transform the starting state into the ending state, you just skip it (so you spend 0 seconds).\n\nThe issue is that, for some positions, you don't remember whether there were Legos there or not (in either the starting state, the ending state, or both). Over all pairs of (starting state, ending state) that are consistent with your memory, find the total amount of time it will take to transform the starting state to the ending state. Print this value modulo 1 000 000 007 (10^9 + 7). \n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 2000) \u2014 the size of the Lego strip.\n\nThe second line of each test case contains a string s of length n, consisting of the characters 0, 1, and ? \u2014 your memory of the starting state: \n\n  * 1 represents a position that definitely has a Lego piece, \n  * 0 represents a position that definitely does not have a Lego piece, \n  * and ? represents a position that you don't remember. \n\n\n\nThe third line of each test case contains a string t of length n, consisting of the characters 0, 1, and ? \u2014 your memory of the ending state. It follows a similar format to the starting state.\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 2000.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem modulo 1 000 000 007 (10^9 + 7). \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(r'''\n1\n5\n1?010\n?1?01\n''') == r'''\n11\n'''\n\nassert solution(r'''\n1\n6\n11?01?\n?01?10\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n5\n01?0?\n?0?01\n''') == r'''\n8\n'''\n\nassert solution(r'''\n1\n8\n1?01?101\n10?1?100\n''') == r'''\n200\n'''\n\nassert solution(r'''\n1\n5\n1??0?\n?10?1\n''') == r'''\n5\n'''\n\n# print the result\nwith open('output.txt', 'w') as fout:\n    for i, result in enumerate(solution(open('input.txt').read()), 1):\n        fout.write(f'Case #{i}:\\n{result}')", "solution('''\n1\n4\n101?\n?010\n''') == '''\n4\n'''\nassert solution('''\n1\n6\n1???00\n?100?1\n''') == '''\n6\n'''\nassert solution('''\n1\n4\n11??\n??11\n''') == '''\n0\n'''\nassert solution('''\n1\n8\n1??1?1??\n?1??1??1\n''') == '''\n80\n'''\nassert solution('''\n1\n3\n?11\n111\n''') == '''\n1\n'''\nassert solution('''\n1\n7\n??????1\n???????\n''') == '''\n1\n'''\nassert solution('''\n1\n5\n11?1?\n???11\n''') == '''\n1\n'''\nassert solution('''\n1\n7\n???????\n???????\n''') == '''\n2\n'''\nassert solution('''\n1\n9\n1????1???\n?1????1??\n''') == '''\n16\n'''\nassert solution('''\n1\n9\n??????1??\n???????1?\n''') == '''\n16\n'''\nassert solution('''\n1\n10", "solution(\"\"\"1\n3\n?1?\n?10\n\"\"\") == \"2\"\nassert solution(\"\"\"1\n3\n010\n010\n\"\"\") == \"0\"\nassert solution(\"\"\"1\n3\n011\n011\n\"\"\") == \"4\"\nassert solution(\"\"\"2\n2\n??\n11\n2\n00\n?0\n\"\"\") == \"6\"\nassert solution(\"\"\"1\n4\n???1\n1000\n\"\"\") == \"0\"\nassert solution(\"\"\"1\n4\n1000\n???1\n\"\"\") == \"4\"\nassert solution(\"\"\"2\n2\n10\n01\n2\n?0\n?0\n\"\"\") == \"4\"\nassert solution(\"\"\"1\n4\n01??\n00??\n\"\"\") == \"8\"\nassert solution(\"\"\"1\n4\n??00\n??11\n\"\"\") == \"16\"\nassert solution(\"\"\"1\n5\n?00??\n?11??\n\"\"\") == \"8\"\nassert solution(\"\"\"1\n5\n??000\n??111\n\"\"\") == \"32\"\nassert solution(\"\"\"1\n5\n????0\n11110\n\"\"\") == \"0\"\nassert solution(\"\"\"1\n5\n??0??\n??1??\n\"\"\") == \"8\"\nassert solution(\"\"\"1\n5\n00???\n11???\n\"\"\") == \"", "solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"\n2\n4\n1000\n1000\n4\n1000\n0010\n\"\"\") == \"\"\"\n4\n4\n\"\"\"", "solution(r'''\n2\n5\n10?0?\n01??1\n6\n000?10\n1?01??\n''') == r'''\n7\n121\n'''", "solution(None) == None\nassert solution(None) == None", "solution('''2\n5\n101?0\n0?011\n5\n01??0\n01??0''') == '''6\n0'''", "solution(\"\"\"> 4\n> 5\n?1?1?\n?0?0?\n> 3\n10?\n01?\n> 5\n???0?\n???1?\n> 4\n????\n????\n> 2\n?0\n?1\"\"\") == \"\"\"5\n1\n5\n0\n5\n0\n5\n0\n5\n0\n5\n0\n1\n3\n1\n3\n1\n3\n1\n3\n1\n3\n1\n3\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n", "solution('''\ninput\n''') == '''\noutput\n'''", "solution('''\n1\n5\n0??0?\n?1??1\n''') == '''\n5\n'''\n\nassert solution('''\n2\n5\n0??0?\n?1??1\n5\n0??0?\n?1??1\n''') == '''\n5\n5\n'''\n\n# submit\nimport time\nfrom datetime import datetime\n\ndef main():\n    problem_id = input()\n    print(problem_id)\n    start = datetime.now()\n    with open(f'../problems/{problem_id}.in', 'r') as f_in:\n        f_out = open(f'../problems/{problem_id}.out', 'w')\n        result = solution(f_in.read())\n        f_out.write(result)\n        f_out.close()\n    print(datetime.now() - start)\n\nmain()", "solution('''\n1\n2\n01\n10\n''') == '''\n1\n'''\n\n# copy the input data\nfrom sys import stdin\ninput = stdin.read()\n\n# launch solution\nprint(solution(input))", "solution('''\n2\n4\n??11\n?0??\n4\n10?1\n?0??\n''') == '''\n1\n1\n'''", "solution(\"\"\"2\n2\n?0\n1?\n2\n00\n00\"\"\") == \"\"\"1\n0\"\"\"\nassert solution(\"\"\"2\n4\n????\n?1??\n4\n?1??\n?1??\n2\n?1\n1?\"\"\") == \"\"\"4\n0\"\"\"\nassert solution(\"\"\"2\n2\n??\n??\n3\n?0?\n?0?\"\"\") == \"\"\"6\n0\"\"\"\nassert solution(\"\"\"1\n4\n?0??\n?0??\n2\n?1\n?1\"\"\") == \"\"\"4\"\"\"\nassert solution(\"\"\"1\n4\n?0??\n?0??\n3\n?0?\n?0?\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"1\n3\n??1\n?1?\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"2\n3\n?0?\n??1\n2\n??\n11\"\"\") == \"\"\"2\n0\"\"\"\nassert solution(\"\"\"1\n4\n????\n?1??\n2\n?1\n?1\"\"\") == \"\"\"16\"\"\"\nassert solution(\"\"\"1\n4\n?1??\n?1??\n2\n?1\n?1\"\"\") == \"\"\"16\"\"\"\nassert solution(\"\"\"1\n3\n?1?\n?1?\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"1\n3\n?1?", "solution(\"\"\"\n2\n4\n01??\n1?00\n2\n10\n11\n\"\"\") == \"\"\"\n7\n0\n\"\"\"", "solution(get_input(__file__, 2)) == get_result(__file__, 2)", "solution(ex1) == out1", "solution('''\n1\n4\n0?10\n1?00\n''') == '''\n8\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n0?\n?1\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n0??\n?0?\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n01?0?\n??0??\n''') == '''\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n??0??0\n?0110?\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7\n??0??0?\n?0110??\n''') == '''\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n8\n?0110??0\n??0??0??\n''') == '''\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n9\n??0??0??0\n?0110??00\n''') == '''\n0\n'''\n\n", "solution('''\n2\n5\n1?010\n?01??\n5\n1?000\n??100\n''') == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1??\n??1\n3\n0??\n??0\n3\n???\n0??\n''') == '''\n2\n1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4\n1?1?\n1?1?\n4\n10??\n?01?\n4\n0?0?\n1?1?\n4\n1?1?\n0?0?\n''') == '''\n0\n2\n2\n2\n'''\n\nassert solution('''\n2\n2\n1?\n?1\n2\n0?\n?0\n''') == '''\n0\n0\n'''\n\nassert solution('''\n1\n5\n1?1?1\n1?1?1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n1?1?1\n1?0?1\n''') == '''\n2\n'''\n\nassert solution('''\n1\n7\n1?1?10?\n?1?01?", "solution(input_example) == output_example", "solution(stdin=\"\"\"\n2\n2\n?0\n1?\n4\n11??\n1??1\n\"\"\") == \"\"\"\n4\n20\n\"\"\"", "solution(\"\") == \"\"\n\n# print(solution(\"\"\"\n# 1\n# 3\n# ?01\n# 010\n# \"\"\"))", "solution('''\n1\n5\n?0001\n11?00\n''') == '2'", "solution('''1\n4\n01??\n?01?\n''') == '1'\n\n# check the correctness of solution\nassert solution('''1\n8\n?01??001\n11??0?01\n''') == '3'", "solution(\"\"\"\n3\n6\n100100\n100100\n6\n100100\n100100\n6\n100100\n100100\n\"\"\") == \"\"\"\n0\n0\n0\n\"\"\"\n\nprint(\"Test passed.\")", "solution('''\n4\n4\n10?0\n1?01\n4\n??00\n??00\n4\n10?0\n1?01\n4\n??00\n??00\n''') == '''\n6\n0\n6\n0\n'''\n\n# get the input\nwith open('day25.in') as f:\n    stdin = f.read()\n\n# print the solution\nprint(solution(stdin))", "solution(\"\"\"\n\n\"\"\") == \"\"\"\n\n\"\"\"", "solution('''1\n5\n1??1?\n?101??\n''') == '21'\nassert solution('''2\n2\n??\n??\n4\n0??0\n00?0\n''') == '4'\nassert solution('''1\n4\n??00\n0?10\n''') == '2'\n\n# get the input\nstdin = ''\nfor line in sys.stdin:\n    stdin += line\n\n# print the output\nprint(solution(stdin))", "solution(\"\"\"2\n4\n00??\n?0??\n5\n?0001\n11???\n\"\"\") == \"\"\"3\n11\"\"\"\n\nassert solution(\"\"\"3\n3\n???\n???\n6\n?????\n?????\n5\n01???\n?01??\n\"\"\") == \"\"\"12\n0\n1\"\"\"", "solution(\"\"\"\\\n3\n6\n0??10?\n?11??0\n6\n?????\n?11??0\n7\n??01000\n11101??\n\"\"\") == \"\"\"\\\n21\n0\n21\n\"\"\"\n\n# simulate user input from the terminal\nif __name__ == '__main__':\n    from sys import stdin\n    print(solution(stdin.read()))", "solution('''3\n4\n?1??\n11??\n4\n01??\n0?1?\n3\n??1\n101\n''') == '''4\n4\n3'''\n\n# get the input\nn, *input = open('input.txt', 'r').read().splitlines()\n\n# print the output\nprint(solution('\\n'.join(input)))", "True # TODO", "solution('''1\n4\n??01\n1111\n''') == '0'\n\nassert solution('''1\n6\n??00?0\n0?0??1\n''') == '4'\n\nassert solution('''1\n1\n0\n0\n''') == '0'\n\nassert solution('''1\n1\n?\n?\n''') == '2'\n\nassert solution('''1\n1\n1\n1\n''') == '0'\n\nassert solution('''1\n1\n1\n0\n''') == '0'\n\nassert solution('''1\n1\n0\n1\n''') == '0'\n\nassert solution('''1\n2\n01\n10\n''') == '1'\n\nassert solution('''1\n2\n??\n??\n''') == '4'\n\nassert solution('''1\n2\n10\n01\n''') == '1'\n\nassert solution('''1\n2\n01\n00\n''') == '0'\n\nassert solution('''1\n2\n00\n01\n''') == '0'\n\nassert solution('''1\n2\n00\n00\n''') == '0'\n\nassert solution('''1\n2\n10\n10\n''') == '0'\n", "solution('''\n1\n4\n??11\n01?0\n''') == '''\n8\n'''\n\n# can't be done in less than 10 seconds\nassert solution('''\n1\n15\n???????????????\n???????????????\n''') == '''\n1024\n'''\n\n# you can turn any state into all zeros in no time\nassert solution('''\n1\n4\n1?11\n0000\n''') == '''\n0\n'''\n\n# you can't turn all ones into anything else.\nassert solution('''\n1\n4\n1111\n1111\n''') == '''\n0\n'''\n\n# you can turn anything into all ones in no time.\nassert solution('''\n1\n4\n1111\n0000\n''') == '''\n0\n'''\n\n# got it?\nassert solution('''\n1\n5\n01??1\n01?10\n''') == '''\n5\n'''\n\n# got it?\nassert solution('''\n1\n5\n01???\n01?10\n''') == '''\n6\n'''\n\n# got it?\nassert solution('''\n1\n4\n?111\n?111\n''') == '''\n3\n'''\n\n# got it?\nassert solution('''", "solution('''\n2\n2\n0?\n1?\n2\n10\n0010010010\n01??000101\n''') == '''\n1\n0\n'''", "solution('''\n1\n4\n?1??\n???1\n''') == '2'\n\n# press the green button in the gutter to run the script\nif __name__ == '__main__':\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = str(input())\n        t = str(input())\n        print(solution(str(n) + '\\n' + s + '\\n' + t))", "solution('''\n2\n4\n?1??\n1??1\n4\n0111\n1010\n''') == '''\n6\n0\n'''\nassert solution('''\n1\n5\n?0??0\n0?0??\n''') == '''\n10\n'''\nassert solution('''\n1\n4\n??00\n00??\n''') == '''\n0\n'''\n\n# stress test solution against extreme inputs\nimport random\nimport string\n\ndef gen_random_string(min_len: int, max_len: int) -> str:\n    s = ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(min_len, max_len)))\n    return s\n\ndef check_solution(solution_func):\n    for i in range(100):\n        n = random.randint(2, 2000)\n        s = gen_random_string(n, n)\n        t = gen_random_string(n, n)\n        stdin = f'1\\n{n}\\n{s}\\n{t}\\n'\n        result = solution_func(stdin)\n        print(result)\n\ncheck_solution(solution)", "solution('''\n1\n4\n0?1?\n?100\n''') == '''\n8\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n?0??\n?1??\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n?0??\n?0??\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n0?1?\n1?00\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n0?0??\n?101?\n''') == '''\n64\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7\n??????0\n??????1\n''') == '''\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7\n??????0\n?100100\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7\n??????0\n1??0110\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution", "solution('''\n3\n6\n1?01??\n?0??1?\n5\n1?1??\n0???1\n6\n0??01?\n?10??1\n''') == '''\n8\n1\n1\n'''", "solution(r'''\n2\n3\n1?0\n??1\n3\n001\n?0?\n''') == r'''\n0\n2\n'''", "solution(\"\"\"\n2\n2\n0?\n0?\n6\n?100??\n?101??\n\"\"\") == \"\"\"\n1\n1\n\"\"\"", "solution('''\n1\n6\n1??01?\n??01??\n''') == '3'\n\nassert solution('''\n1\n3\n1??\n??1\n''') == '0'\n\nassert solution('''\n2\n2\n??\n??\n2\n1?\n??\n''') == '2'\n\nassert solution('''\n3\n3\n??1\n1??\n3\n01?\n1?0\n3\n???\n??0\n''') == '8'\n\nassert solution('''\n6\n2\n1?\n??\n2\n??\n??\n2\n??\n1?\n4\n1??0\n??1?\n4\n?11?\n?11?\n3\n???\n1??\n3\n?1?\n?1?\n''') == '5'\n\nassert solution('''\n3\n3\n10?\n?01\n3\n?0?\n??1\n3\n??1\n??1\n''') == '2'\n\nassert solution('''\n1\n4\n1?10\n?0?1\n''') == '4'\n\nassert solution('''\n1\n4\n0?01\n???1\n''') == '7'\n\nassert solution('''\n1\n3\n1??\n1??", "solution('''\n0\n''') == '''\n\n'''", "solution('''\n3\n3\n0?1\n1?0\n4\n001?\n0??1\n4\n01??\n?01?\n''') == '''\n4\n4\n0\n'''", "solution(\"\"\"1\n5\n0?1?0\n11011\"\"\") == \"\"\"5\"\"\"", "solution(\"\"\"\n2\n2\n01\n10\n2\n00\n?1\n\"\"\") == \"\"\"\n1\n-1\n\"\"\"\n\n# check the speed of solution\nimport timeit\ntimeit.timeit(lambda: solution(\"\"\"\n2\n2\n01\n10\n2\n00\n?1\n\"\"\"), number=1)\n#print(solution(\"\"\"\n#2\n#2\n#01\n#10\n#2\n#00\n#?1\n#\"\"\"))", "True # for now\n\n# get input and run solution\ninputs = []\nsolutions = []\n\ninputs.append('''\n3\n2\n01\n10\n3\n??0\n?10\n4\n0001\n1100\n''')\n\nsolutions.append('''\n1\n3\n3\n''')\n\nfor i, (test_input, test_solution) in enumerate(zip(inputs, solutions)):\n    assert parse_input(test_input) == test_solution.strip(), f'Test {i} failed!'\n    print(f'Test {i} passed!')\n\n'''\n\nProblem: \n\n'''\n\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert True # for now\n\n# get input and run solution\ninputs = []\nsolutions = []\n\ninputs.append('''\n\n''')\n\nsolutions.append('''\n\n''')\n\nfor i, (test_input, test_solution) in enumerate(zip(inputs, solutions)):\n    assert parse_input(test_input) == test_solution.strip(), f'Test {i} failed!'\n    print(f'Test {i} passed!')\n\n'''\n", "'112233' == solution('112233')", "solution('''\n1\n4\n1??0\n1??0\n''') == '''\n0\n'''\nassert solution('''\n1\n4\n1??0\n?1?0\n''') == '''\n2\n'''\nassert solution('''\n2\n4\n1??0\n1??0\n5\n1?11?\n?11??\n''') == '''\n0\n6\n'''\n\n# stress testing\nfrom random import randint, choice\nfrom string import digits, ascii_letters\n\ndef gen_string(length: int, characters: str) -> str:\n    return ''.join(choice(characters) for _ in range(length))\n\ndef gen_list(length: int, characters: str) -> str:\n    return [choice(characters) for _ in range(length)]\n\ndef gen_custom(length: int, characters: str) -> str:\n    gen_char = lambda: choice(characters)\n    first = gen_char()\n    last = gen_char()\n    chars = gen_list(length - 2, characters)\n    return first + ''.join(chars) + last\n\ndef gen_testcase(length: int, characters: str) -> str:\n    n = randint(2, length)\n", "solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n\n# check the performance of solution\nassert solution(stdin) == \"2\""], "finish_reason": ["stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop"], "sum_logprob": [-126.56470191832602, -134.427328515057, -149.1185014724521, -7.3111733862, -22.980030968499996, -46.60386377900001, -10.7074240968, -30.623742784, -101.02049333274994, -9.129648062400001, -84.91903827846306, -37.78270270333, -28.7222614573, -144.1123698645261, -25.4087996057, -20.274483167530004, -14.190975811000001, -99.21601491299103, -140.12874995580088, -10.274505489300001, -31.423932731300003, -25.99671850745, -19.116704618, -45.396293012, -35.37032824536001, -59.550178410090005, -9.212308576999998, -69.41589246457202, -67.29904983019999, -83.10321746309499, -64.09324205182998, -8.86056613657, -80.68796058183506, -175.12745267897694, -38.859199581200016, -40.867571109842, -131.055056912225, -108.87944128282854, -53.20693180549997, -26.961614947200005, -29.323189837000005, -171.6719722348462, -12.817691706000002, -35.90112471889999, -22.761210795000004, -50.06426681762998, -96.86553657028989, -17.397864950000002, -132.3885921451809, -23.4584428275], "mean_logprob": [-0.5408747945227607, -0.44809109505019, -0.49706167157484, -0.4569483366375, -0.7924148609827586, -1.05917872225, -0.7138282731200001, -0.8506595217777778, -0.33673497777583333, -0.5072026701333333, -0.393143695733625, -0.6514259086781035, -0.7364682424948717, -0.4803745662150867, -0.794024987678125, -0.8447701319804167, -1.576775090111111, -0.33072004970997, -0.46709583318600334, -0.9340459535727272, -0.8492954792243244, -0.7877793487106061, -0.831161070347826, -0.7964261931929825, -0.7074065649072, -0.5838252785302941, -0.7086391213076924, -0.5882702751234915, -0.9614149975742857, -0.903295841990163, -0.7121471339092222, -2.2151415341425, -0.26895986860611665, -0.58375817559659, -0.925219037647619, -0.35230664749863794, -0.447286883659471, -0.362931470942762, -0.9173608931982759, -0.6913234601846154, -0.8378054239142857, -0.5722399074494877, -0.7539818650588235, -0.718022494378, -1.0346004906818183, -0.45102943078945945, -0.3228851219009667, -1.739786495, -0.44129530715060267, -0.5864610706875]}
{"prompt": "'''\n'Twas the night before Christmas, and Santa's frantically setting up his new Christmas tree! There are n nodes in the tree, connected by n-1 edges. On each edge of the tree, there's a set of Christmas lights, which can be represented by an integer in binary representation.\n\n<image>\n\nHe has m elves come over and admire his tree. Each elf is assigned two nodes, a and b, and that elf looks at all lights on the simple path between the two nodes. After this, the elf's favorite number becomes the [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of the values of the lights on the edges in that path.\n\nHowever, the North Pole has been recovering from a nasty bout of flu. Because of this, Santa forgot some of the configurations of lights he had put on the tree, and he has already left the North Pole! Fortunately, the elves came to the rescue, and each one told Santa what pair of nodes he was assigned (a_i, b_i), as well as the parity of the number of set bits in his favorite number. In other words, he remembers whether the number of 1's when his favorite number is written in binary is odd or even.\n\nHelp Santa determine if it's possible that the memories are consistent, and if it is, remember what his tree looked like, and maybe you'll go down in history!\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers, n and m (2 \u2264 n \u2264 2 \u22c5 10^5; 1 \u2264 m \u2264 2 \u22c5 10^5) \u2014 the size of tree and the number of elves respectively.\n\nThe next n-1 lines of each test case each contains three integers, x, y, and v (1 \u2264 x, y \u2264 n; -1 \u2264 v < 2^{30}) \u2014 meaning that there's an edge between nodes x and y. If \n\n  * v = -1: Santa doesn't remember what the set of lights were on for this edge. \n  * v \u2265 0: The set of lights on the edge is v. \n\n\n\nThe next m lines of each test case each contains three integers, a, b, and p (1 \u2264 a, b \u2264 n; a \u2260 b; 0 \u2264 p \u2264 1) \u2014 the nodes that the elf was assigned to, and the parity of the number of set bits in the elf's favorite number.\n\nIt is guaranteed that the sum of all n and the sum of all m don't exceed 2 \u22c5 10^5 each.\n\nIt is guaranteed that the given edges form a tree.\n\nOutput\n\nFor each test case, first print either YES or NO (in any case), whether there's a tree consistent with Santa's memory or not. \n\nIf the answer is YES, print n-1 lines each containing three integers: x, y, and v (1 \u2264 x, y \u2264 n; 0 \u2264 v < 2^{30}) \u2014 the edge and the integer on that edge. The set of edges must be the same as in the input, and if the value of some edge was specified earlier, it can not change. You can print the edges in any order.\n\nIf there are multiple answers, print any.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(open('task.in', 'r').read()) == open('task.out', 'r').read()", "solution('''\n''') == '''\n'''\n\ndef parse_stdin(input: str) -> list:\n    lines = input.split('\\n')\n    ntests = int(lines[0])\n    lines = lines[1:]\n    tests = []\n    for _ in range(ntests):\n        # parse the tree\n        nodes, edges = [int(x) for x in lines[0].split()]\n        lines = lines[1:]\n        trees = []\n        for i in range(edges):\n            trees.append([int(x) for x in lines[i].split()])\n        lines = lines[edges:]\n        # parse the elves\n        elves = []\n        for i in range(nodes):\n            elves.append([int(x) for x in lines[i].split()])\n        lines = lines[nodes:]\n        tests.append((nodes, edges, trees, elves))\n    return tests\n\nif __name__ == '__main__':\n    ntests = int(input())\n    lines = []\n    for i in range(ntests):\n        n, m = [int(x) for x in input().split()]\n        trees = []\n        for _ in range(n - 1):\n            trees.append([int(", "solution('''\n2\n4 3\n1 2 5\n2 3 8\n2 4 3\n1 2 1\n2 3 0\n3 4 1\n3 2\n1 2 -1\n2 3 -1\n1 2 1\n3 2 0\n''') == '''\nYES\n1 2 5\n2 3 8\n2 4 3\nNO\n'''", "solution(stdin_test_1) == stdout_test_1\nassert solution(stdin_test_2) == stdout_test_2\n\n# get the input\ntest_cases = int(input())\nall_inputs = []\nfor i in range(test_cases):\n    n, m = [int(x) for x in input().split()]\n    all_edges = []\n    for j in range(n-1):\n        a, b, v = [int(x) for x in input().split()]\n        all_edges.append([a, b, v])\n    all_elves = []\n    for j in range(m):\n        a, b, p = [int(x) for x in input().split()]\n        all_elves.append([a, b, p])\n    all_inputs.append([n, m, all_edges, all_elves])\n\n# print(all_inputs)\n\n# iterate over test cases\nfor n, m, all_edges, all_elves in all_inputs:\n    # build the tree\n    tree = {}\n    for edge in all_edges:\n        if edge[0] not in tree:\n            tree[edge[0]] = []\n        if", "solution(\"\"\"<input>\"\"\") == \"\"\"<output>\"\"\"\n \n# check the performance of solution\nassert solution(\"\"\"<input>\"\"\") == \"\"\"<output>\"\"\"", "solution(\"\"\"\n2\n6 4\n1 2 -1\n2 3 -1\n2 4 -1\n4 5 -1\n4 6 -1\n1 4 0\n1 6 1\n4 5 0\n4 6 1\n5 6 1\n6 6 6\n1 2 2\n2 3 2\n2 4 2\n2 5 2\n5 6 2\n5 4 2\n4 1 2\n4 2 2\n4 3 2\n4 6 2\n4 5 2\n5 1 2\n5 2 2\n5 3 2\n5 4 2\n5 6 2\n5 4 2\n5 3 2\n5 2 2\n5 1 2\n5 6 2\n5 4 2\n5 3 2\n5 2 2\n5 1 2\n5 6 2\n5 4 2\n5 3 2\n5 2 2\n5 1 2\n5 6 2\n5 4 2\n5 3 2\n5 2 2\n5 1 2\n5 6 2\n5 4 2\n5 3 2\n5 2 2\n5 1 2\n5 6 2\n5 4 2\n5 3 2\n5 2 2\n5 1 2\n5 6 2\n5 4 2\n5 3 2\n5 2 2\n5 1 2\n5 6 2\n5 4 2\n5 3 2\n5 2 2\n5 1 2\n5 6 2\n5 4 2\n5 3 2\n5 2 2\n5 1 2\n5 6", "solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n''') == '''\n", "solution(INPUT) == OUTPUT\n\n# check the speed of solution\nimport timeit\nsetup = 'from __main__ import solution'\nprint(timeit.timeit(setup=setup, stmt='solution(INPUT)', number=10000))", "solution('''\n2\n2 1\n1 2 -1\n1 2 0\n4 4\n1 2 -1\n2 3 -1\n3 4 -1\n1 4 -1\n1 2 0\n1 3 1\n2 4 0\n1 4 1\n''') == '''\nYES\n1 2 0\n1 2 0\nYES\n1 2 0\n2 3 1\n3 4 0\n'''", "solution('''\n3\n7 6\n2 3 -1\n2 4 -1\n1 2 1\n3 5 -1\n3 6 -1\n6 7 -1\n3 2 1\n2 4 1\n2 5 1\n1 2 1\n1 3 1\n1 4 1\n7 3\n2 3 -1\n2 4 -1\n1 2 1\n3 5 -1\n3 6 -1\n6 7 -1\n1 2 1\n1 3 1\n1 4 1\n''') == '''\nYES\n2 3 1\n2 4 1\n1 2 1\n3 5 1\n3 6 0\n6 7 0\nNO\nYES\n2 3 1\n2 4 1\n1 2 1\n3 5 1\n3 6 0\n6 7 0\n'''", "solution(\"\") == \"\", \"Empty case\"\nassert solution(\"1\\n4 3\\n1 2 4\\n2 3 5\\n3 4 4\\n3 4\\n3 4\\n1 2\\n\") == \"YES\\n3 4 4\\n1 2 4\\n2 3 5\\n\", \"Example\"\n\n# get the input, run the solution and get the result\ninput = sys.stdin.read()\nprint(solution(input))", "solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\") == \\\n\"\"\"\n\"\"\"\n\n# check the correctness", "solution('''\n1\n4 3\n1 2 10\n2 3 1\n3 4 -1\n2 3 0\n1 3 1\n3 4 1\n''') == '''\nYES\n1 2 10\n2 3 1\n3 4 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 3\n1 2 10\n2 3 1\n3 4 -1\n2 3 0\n1 3 0\n3 4 1\n''') == '''\nNO\n'''\n\n# # check the correctness of solution\nassert solution('''\n2\n3 2\n1 2 -1\n2 3 -1\n1 2 0\n1 3 1\n3 1\n1 2 -1\n1 2 0\n''') == '''\nYES\n1 2 0\n2 3 0\nYES\n1 2 0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 4\n1 2 -1\n2 3 -1\n3 4 -1\n4 5 -1\n5 6 -1\n6 7 -1\n7 8 -1\n8 9 -1\n9 10 -1\n1 10 0\n1 9 1\n1 4 0\n1 7 1\n''') == '''\nYES\n1 2 0\n2 3 0\n3 4 0\n4 5 0\n5 6 0\n6 7 0\n", "solution('''\n4\n4 2\n1 2 2\n2 3 3\n2 4 2\n1 2 0\n2 3 1\n5 4\n1 2 2\n2 3 3\n2 4 2\n1 5 -1\n1 2 0\n2 3 1\n4 4 0\n5 5 1\n6 4\n1 2 2\n2 3 3\n2 4 2\n1 5 -1\n1 2 0\n2 3 1\n4 4 0\n5 5 1\n6 4\n1 2 2\n2 3 3\n2 4 2\n1 5 -1\n1 2 0\n2 3 1\n4 4 0\n5 5 1\n''') == '''\nYES\n1 2 2\n2 3 3\n2 4 2\n1 5 2\nYES\n1 2 2\n2 3 3\n2 4 2\n1 5 3\nYES\n1 2 2\n2 3 3\n2 4 2\n1 5 2\nNO\n'''\n\n#O(|E|+|V|)\ndef solution(stdin: str) -> str:\n    #input\n    stdin = stdin.splitlines()\n    n_cases = int(stdin[0])\n    data = stdin[1:]\n    test_cases = []\n    i = 0\n    #process input\n    for n_case in range(n_cases):\n        n, m =", "solution(sample_input) == sample_output", "solution('''\n2\n4 3\n1 2 1\n2 3 2\n1 4 -1\n1 2 1\n2 3 0\n1 3 1\n5 2\n1 2 -1\n2 3 -1\n1 4 1\n2 5 -1\n2 4 1\n2 5 0\n''') == '''\nYES\n1 2 1\n2 3 2\n1 4 1\nNO\n'''", "solution('''\\\n10\n3 2\n1 2 -1\n2 3 -1\n1 2 0\n1 3 1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 0\n1 3 1\n1 4 0\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 0\n1 3 1\n1 4 1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 1\n1 3 0\n1 4 1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 1\n1 3 1\n1 4 0\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 1\n1 3 1\n1 4 1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 1\n1 3 1\n1 4 1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 1\n1 3 1\n1 4 1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 1\n1 3 1\n1 4 1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 1\n1 3 1\n1 4 1\n''", "solution(case1) == expected1\nassert solution(case2) == expected2\nassert solution(case3) == expected3\nassert solution(case4) == expected4\nassert solution(case5) == expected5\nassert solution(case6) == expected6\nassert solution(case7) == expected7\nassert solution(case8) == expected8\nassert solution(case9) == expected9\nassert solution(case10) == expected10\nassert solution(case11) == expected11\nassert solution(case12) == expected12\nassert solution(case13) == expected13\nassert solution(case14) == expected14\nassert solution(case15) == expected15\nassert solution(case16) == expected16\nassert solution(case17) == expected17\nassert solution(case18) == expected18\nassert solution(case19) == expected19\nassert solution(case20) == expected20\nassert solution(case21) == expected21\nassert solution(case22) == expected22\nassert solution(case23) == expected23\nassert solution(case24) == expected24\nassert solution(case25) == expected25\nassert solution(case26) == expected26\nassert solution(case27) == expected27\nassert solution(case28) == expected28\nassert solution(case29) == expected29\nassert solution(case30) == expected30\nassert", "solution(open('test.in').read()) == open('test.out').read()\n\nstdin = open('input.in').read()\nif len(stdin) > 1:\n    print(solution(stdin))\nelse:\n    print('The input file is empty')", "solution(\n'''\n3\n3 2\n1 2 0\n2 3 -1\n1 2\n2 3\n4 4\n1 2 0\n2 3 0\n2 4 0\n1 2\n1 3\n2 4\n3 4\n'''\n) == '''\nYES\n1 2 0\n2 3 0\nYES\n1 2 0\n2 3 0\n2 4 0\nNO\n'''", "solution(f'''2\n3 3\n1 2 0\n2 3 -1\n1 2\n2 3\n3 1\n4 4\n1 2 1\n1 3 -1\n2 4 0\n1 3\n2 4\n1 2\n3 4\n''') == '''NO\nYES\n1 2 0\n2 3 0\n1 3 1\nYES\n1 2 1\n1 3 0\n2 4 0\n3 4 1\n'''", "solution('''\n3\n3 2\n1 2 -1\n2 3 -1\n1 2 0\n2 3 1\n5 5\n1 2 -1\n2 3 -1\n2 4 -1\n2 5 -1\n1 3 0\n2 3 1\n1 4 0\n1 5 0\n1 5 1\n4 4\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 0\n1 3 1\n1 4 1\n2 4 0\n''') == '''\nYES\n1 2 0\n2 3 0\nYES\n1 2 0\n2 3 0\n2 4 0\n2 5 1\nYES\n1 2 0\n2 3 0\n3 4 0\n'''\n\n# print solution\n'''\n\n'''", "solution(example1) == example1_solution\nassert solution(example2) == example2_solution\nassert solution(example3) == example3_solution\n\n# upload solution to the judge system\ntry:\n    import requests\n    url = 'https://www.hackerrank.com/rest/contests/master/challenges/santas-lights/hackers/{}/download_solution?language_slug=python3'\n    auth = {'Authorization': os.environ['HACKERRANK_API_KEY']}\n    response = requests.post(url.format(user_id), headers=auth, files={'solution': ('solution.py', open('solution.py', 'rb'))})\n    print(response.text)\nexcept:\n    print('An error occured during upload')", "solution(SAMPLE_INPUT) == EXPECTED_OUTPUT, (\n    f'expected: {EXPECTED_OUTPUT}, got: {solution(SAMPLE_INPUT)}')\n\n# test solution\nwith open(input_file, 'r') as f:\n    data = f.read()\n\n# submit to codeforces\nsubmit(solution(data), f'https://codeforces.com/problemset/problem/1377/C')", "solution(\"\") == \"\", \"ERROR\"\n\n# --- Local Test ---\ndef local_test():\n    IN = \"\"\n    OUT = \"\"\n    assert solution(IN) == OUT, \"ERROR\"\n    print(\"OK\")\n\nlocal_test()", "solution('''1\n4 2\n1 2 1\n2 3 2\n2 4 3\n1 3 0\n2 3 1''') == '''YES\n1 2 1\n2 3 2\n2 4 3'''\n\nassert solution('''1\n5 4\n1 2 1\n2 3 2\n2 4 3\n2 5 4\n1 3 0\n2 3 1\n2 4 0\n2 5 1''') == '''YES\n1 2 1\n2 3 2\n2 4 3\n2 5 4'''\n\nassert solution('''1\n4 3\n1 2 1\n2 3 2\n2 4 3\n1 3 0\n2 3 1\n2 4 0''') == '''NO'''", "solution(\"\"\"2\n5 3\n1 2 -1\n2 3 -1\n3 4 -1\n4 5 -1\n1 5 0\n3 5 1\n1 2 1\n3 2 0\n3 2\n1 2 -1\n2 3 -1\n2 3 0\n1 3 1\"\"\") == \"\"\"YES\n1 2 1\n2 3 1\n3 4 0\n4 5 0\nNO\"\"\"", "solution('''\n''') == '''\n'''", "solution(sample_input) == sample_output", "solution('''\n2\n2 1\n1 2 -1\n1 2 0\n3 2\n1 2 -1\n2 3 -1\n1 2 0\n1 3 1\n5 2\n1 2 0\n2 3 -1\n2 4 1\n2 5 -1\n1 5 0\n1 3 1\n''') == '''\nYES\n1 2 0\n2 3 -1\n2 4 1\n2 5 -1\nNO\n'''\n\n# check the performance of solution\n# from random import randint\n# from time import time\n# from datetime import timedelta\n\n# n = 20\n# max_value = 200\n# test_data = '''{0} {1}\n# {2}\n# '''\n# v = '-1'\n# edges = [f'{randint(1, n)} {randint(1, n)} {v}' for _ in range(n - 1)]\n# m = randint(1, n)\n# a = [randint(1, n) for _ in range(m)]\n# b = [randint(1, n) for _ in range(m)]\n# test_data = test_data.format(n, m, '\\n'.join(edges))\n# start = time()\n# for i in range(max_value):\n", "(solution('''\n6\n4 2\n1 2 1\n2 3 0\n2 4 -1\n2 3\n1 2\n1 3\n4 1\n1 2 0\n2 3 0\n2 4 0\n1 3\n2 2\n1 2 0\n1 2 1\n3 2\n1 2 -1\n2 3 -1\n1 2\n1 3\n4 2\n1 2 -1\n2 3 -1\n2 4 -1\n2 3\n1 2\n1 3\n''') == '''\nNO\nNO\nYES\n1 2 0\n2 3 0\n2 4 0\nYES\n1 2 1\n2 3 0\n2 4 0\nYES\n1 2 0\n2 3 1\n2 4 0\nYES\n1 2 0\n2 3 0\n2 4 1\n''')\n\n# test performance\ndef test():\n    import timeit\n    test_cases = '''\n6\n4 2\n1 2 1\n2 3 0\n2 4 -1\n2 3\n1 2\n1 3\n4 1\n1 2 0\n2 3 0\n2 4 0\n1 3\n2 2\n1 2 0\n1 2 1\n3 2\n1 2 -1\n2 3 -1\n1 2\n1 3\n4 2\n1 2 -1\n2 3 -1\n2 4 -1\n2 3\n1 2\n1", "solution(\"\"\"4\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 4 0\n2 4 1\n3 4 1\n4 4\n1 2 -1\n2 3 -1\n3 4 -1\n1 4 0\n2 4 1\n3 4 1\n4 4\n1 2 1\n2 3 -1\n3 4 -1\n1 4 0\n2 4 1\n3 4 1\n2 2\n1 2 1\n2 1 0\"\"\") == \"\"\"YES\n3 4 0\n2 3 1\n1 2 1\nNO\nYES\n1 2 1\n2 3 0\n3 4 1\nNO\"\"\"\n\n# test case 2\nassert solution(\"\"\"1\n2 1\n1 2 -1\n1 2 0\"\"\") == \"\"\"YES\n1 2 0\"\"\"\n\n# test case 3\nassert solution(\"\"\"1\n3 2\n1 2 -1\n2 3 1\n1 3 0\n2 3 1\"\"\") == \"\"\"YES\n1 2 0\n2 3 1\"\"\"\n\n# test case 4\nassert solution(\"\"\"1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 4 0\n2 4 1\n3 4 1\"\"\") == \"\"\"YES\n3 4 0\n2 3 1\n1 2 1\"\"\"\n\n# test case 5\nassert solution(\"\"\"1\n4 3\n1 2 -1", "solution('''\n#\n''') == ''\n\nassert solution('''\n#\n''') == ''", "solution(\n'''\n1\n6 4\n1 2 -1\n2 3 -1\n2 4 -1\n3 5 -1\n3 6 -1\n1 2 0\n1 4 1\n3 5 0\n5 6 1\n'''\n) == '''\nYES\n1 2 0\n2 3 0\n2 4 1\n3 5 0\n3 6 1\n'''\n\nassert solution(\n'''\n2\n4 3\n1 2 -1\n2 3 -1\n1 4 -1\n1 2 0\n1 3 1\n3 4 0\n4 2\n1 2 -1\n1 2 0\n2 1 1\n'''\n) == '''\nYES\n1 2 1\n2 3 0\n1 4 0\nNO\n'''", "solution('''\n2\n3 2\n1 2 1\n2 3 1\n1 2 0\n1 3 1\n3 2\n1 2 -1\n2 3 1\n1 2 0\n1 3 1\n''') == '''\nYES\n1 2 1\n2 3 1\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 2\n1 2 1\n2 3 1\n1 2 0\n1 3 1\n''') == '''\nYES\n1 2 1\n2 3 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7 6\n1 2 1\n2 3 1\n3 4 1\n1 5 1\n5 6 1\n6 7 1\n1 4 0\n2 3 1\n4 5 1\n5 6 1\n6 7 1\n''') == '''\nYES\n1 2 1\n2 3 1\n3 4 1\n1 5 1\n5 6 1\n6 7 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 2\n1 2 -1\n2 3 1\n1 2 0\n1 3 1\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n1 2 1\n1 2 0\n2 1\n1 2 -1", "solution(INPUT_SAMPLE0) == OUTPUT_SAMPLE0\nassert solution(INPUT_SAMPLE1) == OUTPUT_SAMPLE1\nassert solution(INPUT_SAMPLE2) == OUTPUT_SAMPLE2\nassert solution(INPUT_CUSTOM) == OUTPUT_CUSTOM\n\nprint('all tests passed')", "solution('''\n1\n3 2\n1 2 -1\n2 3 -1\n1 2 1\n2 3 0\n''') == '''\nYES\n1 2 2\n2 3 3\n'''\n\nassert solution('''\n1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 1\n2 3 0\n1 4 1\n''') == '''\nYES\n1 2 3\n2 3 6\n3 4 4\n'''\n\nassert solution('''\n1\n3 2\n1 2 -1\n2 3 -1\n1 2 1\n2 3 1\n''') == '''\nNO\n'''", "solution(\"\"\"1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 4 0\n1 4 1\n1 4 0\n\"\"\") == \"\"\"YES\n1 2 1\n2 3 0\n3 4 0\n\"\"\"\n\n# check for speed\nimport random\nimport time\nn = int(2 * (10 ** 5))\nm = int(2 * (10 ** 5))\narr = [random.randint(1, n) for _ in range(n)]\nprint(solution(f\"\"\"1\n{n} {m}\n\"\"\" + \"\\n\".join(f\"{x} {y} {random.randint(-1, (2 ** 30))}\" for x, y in zip(arr, arr[1:]))))\nstart = time.time()\nfor _ in range(10):\n    solution(f\"\"\"1\n{n} {m}\n\"\"\" + \"\\n\".join(f\"{x} {y} {random.randint(-1, (2 ** 30))}\" for x, y in zip(arr, arr[1:])))\nprint(\"elapsed:\", time.time() - start)\n\n# stress test\nwhile True:\n    n = random.randint(2, (2 * (10 ** 5)))\n    m = random.randint(1, (2 * (", "\"YES\\n1 2 1\\n3 2 2\\n3 4 3\\n\" == solution(\"2\\n5 3\\n1 2 -1\\n2 3 -1\\n3 4 -1\\n1 2 0\\n3 4 1\\n1 5 1\\n2 3 0\\n5 3\\n1 2 -1\\n2 3 -1\\n3 4 -1\\n1 2 0\\n3 4 1\\n1 5 1\\n1 5 0\\n\")", "solution('''\n\n''') == '''\n\n'''", "solution('''\n3\n4 2\n1 2 2\n2 3 2\n2 4 2\n2 3 1\n2 3 0\n4 3\n1 2 1\n2 3 1\n2 4 1\n1 3 1\n2 3 0\n2 4 0\n4 3\n1 2 1\n2 3 1\n2 4 -1\n1 3 1\n2 3 0\n2 4 0\n''') == '''\nNO\nYES\n2 3 0\n2 4 1\nYES\n2 3 0\n2 4 1\n'''", "solution(test_cases[0]) == '2\\n1 2 0\\n2 3 3'\nassert solution(test_cases[1]) == 'NO'\nassert solution(test_cases[2]) == 'YES\\n1 2 2\\n2 3 0\\n3 4 5'\nassert solution(test_cases[3]) == 'YES\\n1 2 0\\n2 3 5\\n2 4 3\\n2 5 2\\n5 6 0\\n5 7 4\\n5 8 6\\n5 9 0\\n5 10 1\\n5 11 1\\n5 12 4\\n5 13 0\\n5 14 1\\n5 15 2\\n5 16 6\\n5 17 4\\n5 18 0\\n5 19 2\\n5 20 1\\n5 21 4\\n5 22 1\\n5 23 0\\n5 24 0\\n5 25 3\\n5 26 3\\n5 27 1\\n5 28 1\\n5 29 0\\n5 30 6\\n5 31 2\\n5 32 1\\n5 33 6\\n5 34 3\\n5 35 3\\n5 36 4\\n5 37 4\\n5 38 6\\n5 39 0\\n5 40 0\\n5 41 1\\n5 42 1\\n5 43 0\\n5 44 4\\n5 45 3\\n", "solution(stdin) == stdout", "solution(r'''\n5\n5 2\n1 2 1\n2 3 2\n3 4 3\n4 5 -1\n3 5 0\n2 4 1\n5 2\n1 2 2\n2 3 2\n3 4 -1\n4 5 3\n2 4 0\n2 4 1\n5 2\n1 2 2\n2 3 2\n3 4 -1\n4 5 -1\n2 4 0\n2 4 1\n5 2\n1 2 2\n2 3 2\n3 4 -1\n4 5 -1\n2 4 1\n2 4 0\n3 3\n1 2 1\n2 3 -1\n1 3 0\n2 3 1\n''') == '''\\\nYES\n1 2 2\n2 3 2\n3 4 3\n4 5 3\nYES\n1 2 2\n2 3 2\n3 4 -1\n4 5 -1\nYES\n1 2 2\n2 3 2\n3 4 -1\n4 5 -1\nYES\n1 2 2\n2 3 2\n3 4 -1\n4 5 -1\nNO\n'''", "solution(EXAMPLE_INPUT) == EXAMPLE_OUTPUT", "solution('''\n1\n4 2\n1 2 1\n2 3 2\n3 4 -1\n1 4 0\n3 4 1\n''') == '''\nYES\n1 2 1\n2 3 2\n3 4 1\n'''\n\nassert solution('''\n1\n3 1\n1 2 -1\n2 3 -1\n2 3 0\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n3 1\n1 2 1\n2 3 -1\n1 3 1\n''') == '''\nYES\n1 2 1\n2 3 1\n'''\n\nassert solution('''\n1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 0\n1 3 1\n1 4 0\n''') == '''\nYES\n1 2 1\n2 3 1\n3 4 0\n'''\n\nassert solution('''\n1\n4 3\n1 2 -1\n2 3 -1\n3 4 -1\n1 2 0\n1 3 1\n1 4 1\n''') == '''\nYES\n1 2 0\n2 3 1\n3 4 1\n'''\n\n# check the performance of solution\nassert solution('''\n20\n''') == '''\n1\n2 3\n1 2\n2 3\n3 1\n3 1\n3 1", "solution(r'''1\n3 2\n1 2 -1\n2 3 -1\n1 2 0\n2 3 1\n''') == r'''YES\n1 2 1\n2 3 0\n'''\nassert solution(r'''1\n3 2\n1 2 -1\n2 3 -1\n1 2 0\n2 3 0\n''') == r'''NO\n'''\nassert solution(r'''2\n3 2\n1 2 -1\n2 3 -1\n1 2 0\n2 3 1\n1 1\n1 1 -1\n1 1 0\n''') == r'''YES\n1 2 1\n2 3 0\nYES\n1 1 1\n'''\nassert solution(r'''1\n5 2\n1 2 -1\n2 3 -1\n2 4 -1\n4 5 -1\n1 5 0\n2 4 1\n''') == r'''YES\n1 2 0\n2 3 0\n2 4 1\n4 5 0\n'''\nassert solution(r'''1\n5 2\n1 2 -1\n2 3 -1\n2 4 -1\n4 5 -1\n1 5 0\n2 4 0\n''') == r'''NO\n'''\nassert solution(r'''1\n5 3\n1 2 -1\n2 3 -1\n2 4 -1\n4 5 -1\n", "solution('''\n4\n3 2\n1 2 2\n2 3 3\n1 2 1\n2 3 0\n1 2\n2 3 0\n2 3\n1 2 -1\n2 3 -1\n1 2 0\n2 3 1\n1 2\n2 3 0\n2 3\n1 2 -1\n2 3 -1\n1 2 0\n2 3 0\n''') == '''\nYES\n1 2 2\n2 3 3\nNO\nYES\n1 2 0\n2 3 1\nYES\n1 2 0\n2 3 0\n'''", "solution('''\n3\n\n4 2\n1 2 0\n2 3 1\n3 4 -1\n1 4 0\n2 4 1\n\n4 2\n1 2 0\n2 3 1\n3 4 -1\n1 4 0\n2 4 0\n\n3 2\n1 2 0\n2 3 1\n1 3 0\n2 3 1\n''') == '''\nYES\n1 2 0\n2 3 1\n3 4 1\n\nNO\n\nYES\n1 2 0\n2 3 1\n3 4 1\n'''", "solution(stdin=\"\"\"\n1\n3 2\n1 2 -1\n2 3 -1\n1 2 0\n2 3 1\n\"\"\") == \"\"\"\nYES\n1 2 0\n2 3 1\n\"\"\"\n\nassert solution(stdin=\"\"\"\n1\n2 1\n1 2 -1\n1 2 1\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check submission is passed\nprint(\"passed\")"], "finish_reason": ["stop", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop"], "sum_logprob": [-14.8758366247, -92.1344674321541, -34.83159357346, -80.25897418960993, -16.866814713100005, -91.15636811225998, -17.467633500489324, -31.258161607066995, -34.27126967691999, -72.64625834110501, -70.25742563749499, -19.669571873885985, -87.09350005680594, -132.390511171984, -6.568673975, -41.862948166129996, -49.55382687224203, -18.441619564874994, -38.09350822921, -33.99748835966002, -50.194550573439976, -67.89961267050995, -88.35135297075401, -74.05778142918447, -43.31734741467002, -45.94758903683001, -38.59957574683999, -5.753188461, -6.570142509799999, -138.92919019910002, -96.21377895945552, -87.35084565773099, -18.969944420399997, -58.072786300549986, -74.74403122169699, -22.533748042125, -40.613589390749965, -109.70172396626498, -48.993384844587986, -6.6657113705, -51.481958131870016, -137.74998920826428, -5.508382023999999, -75.94620326929903, -8.1212332113, -94.65017492919, -58.21263242548901, -46.02691738326002, -38.68442209247, -49.03500968274], "mean_logprob": [-0.5721475624884615, -0.30711489144051335, -0.43539491966825, -0.2675299139653667, -0.4216703678275, -0.3038545603742, -0.058225445001631, -0.5297993492723221, -0.37660735908703297, -0.4273309314182647, -0.6628059022405188, -0.06556523957962, -0.29031166685602, -0.44130170390661333, -0.5971521795454545, -0.46514386851255557, -0.16517942290747334, -0.061472065216249996, -0.5771743671092424, -0.3777498706628889, -0.5121892915657142, -0.40416436113398807, -0.45308386138848206, -0.6553785967184469, -0.7468508174943104, -0.2889785474014465, -0.43370309827910114, -0.41094203292857145, -0.5972856827090909, -0.46309730066366667, -0.32071259653151835, -0.29116948552577, -0.7296132469384615, -0.34567134702708335, -0.24914677073899, -0.2852373169889241, -0.270757262605, -0.36567241322088334, -0.44138184544673875, -0.41660696065625, -0.443809983895431, -0.4591666306942143, -0.6120424471111111, -0.3273543244366336, -0.45117962285, -0.3155005830973, -0.19404210808496333, -0.37420258035170734, -0.3278340855294068, -0.5329892356819566]}
{"prompt": "'''\nYou are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\") == \"\", \"No input\"\nassert solution(\"2 1\") == \"2\", \"1-1\"\nassert solution(\"1 2\") == \"1\", \"2-2\"\nassert solution(\"1 2\\n1 2\") == \"1\\n1\", \"2-2\"\nassert solution(\"1 1\") == \"0\", \"1-1\"\nassert solution(\"2 3\") == \"2\", \"3-3\"\nassert solution(\"1 10\") == \"5\", \"10-10\"\nassert solution(\"1 100\") == \"32\", \"100-100\"\nassert solution(\"1 100\\n2 3\") == \"32\\n2\", \"100-100 and 3-3\"\nassert solution(\"1 1000\") == \"130\", \"1000-1000\"\nassert solution(\"1 10000\") == \"1294\", \"10000-10000\"\nassert solution(\"1 100000\") == \"13110\", \"100000-100000\"\nassert solution(\"1 1000000\") == \"131593\", \"1000000-1000000\"\nassert solution(\"1 10000000\") == \"1316118\", \"10000000-10000000\"\nassert solution(\"1 100000000\") == \"13161337\", \"100000000-100000000\"\nassert solution(\"1 1000000000\") == \"131613468\", \"1000000000-1000000000\"\nassert solution", "solution('''\n1\n2 5\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 5\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 2\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 10\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 100\n''') == '''\n16\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 10\n1 10\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 100\n1 100\n1 100\n''') == '''\n16\n16\n16\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 10\n1 10\n1 10\n1 10\n''') == '''\n2\n2\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100\n1 100", "solution('''\n3\n1 2\n1 4\n1 10\n''') == '''\n1\n2\n6\n'''", "solution('''\n2\n2 3\n2 5\n''') == '''\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1000000\n''') == '''\n53\n'''\n\nimport sys\nsys.stdin = open('./data/input.txt', 'r')\nprint(solution(sys.stdin.read()))", "solution('''\n3\n1 10\n6 9\n1 999999\n''') == '''\n3\n1\n2\n'''", "solution('''\n2\n2 5\n1 4\n''') == '''\n2\n2\n'''", "solution(\"\") == \"\", \"Sample test case failed\"\n\n# check the performance of solution\nassert solution(\"\") == \"\", \"Performance test case failed\"", "solution('''\n1\n1 5\n''') == '''\n0\n'''\n\nassert solution('''\n2\n1 3\n1 4\n''') == '''\n1\n2\n'''\n\nassert solution('''\n3\n1 2\n1 10\n1 12\n''') == '''\n1\n4\n6\n'''\n\nassert solution('''\n1\n1 100\n''') == '''\n39\n'''", "solution(str(in_example)) == out_example", "solution('''\n2\n2 5\n10 20\n''') == '''\n1\n4\n'''", "solution(\"2\\n2 5\\n15 20\") == \"1\\n0\"", "solution('''\n2\n1 5\n3 4\n''') == '''\n3\n1\n'''", "solution('''\n2\n2 5\n5 7\n''') == '''\n2\n0\n'''", "solution(\"\"\"\n1\n2 5\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# test the performance of solution\nfrom utils import *\nassert measure_func_performance(solution, [\"\"\"\n1\n2 5\n\"\"\"] * 100) < 100", "solution(\"\"\"\n5\n2 2\n2 5\n2 10\n1 3\n5 10\n\"\"\") == \"\"\"\n0\n1\n2\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n8 22\n3 4\n3 5\n3 6\n\"\"\") == \"\"\"\n1\n1\n2\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 10\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 7\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n4 21\n4 22\n4 23\n4 24\n\"\"\") == \"\"\"\n1\n1\n2\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n\"\"\") == \"\"\"\n1\n2\n2\n2\n2\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n4 5\n4 6\n4 7\n4 8\n\"\"\") == \"\"\"\n1\n2\n2\n2\n\"\"\"\n\n# check", "solution('''\n1\n1 5\n''') == '''\n2\n'''\n\nassert solution('''\n1\n1 1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n3 3\n''') == '''\n1\n'''\n\nassert solution('''\n1\n1 6\n''') == '''\n1\n'''\n\nassert solution('''\n1\n2 4\n''') == '''\n2\n'''\n\nassert solution('''\n1\n5 20\n''') == '''\n3\n'''\n\nassert solution('''\n1\n7 10\n''') == '''\n3\n'''\n\nassert solution('''\n1\n3 18\n''') == '''\n2\n'''\n\nassert solution('''\n1\n15 23\n''') == '''\n4\n'''\n\nassert solution('''\n1\n2 3\n''') == '''\n1\n'''\n\nassert solution('''\n1\n1 5\n''') == '''\n2\n'''\n\nassert solution('''\n1\n1 5\n''') == '''\n2\n'''\n\nassert solution('''\n1\n1 5\n''') == '''\n2\n'''\n\nassert solution", "solution('''\n1\n1 2\n''') == '0'\n\n# show explanations\nprint(solution.__doc__)\n\n# stress test\nimport random\nwhile True:\n    with open('input.txt', 'w') as f:\n        f.write('''\n100\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n", "solution(\"\"\"\n1\n2 5\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n2 2\n2 3\n2 5\n\"\"\") == \"\"\"\n1\n1\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2 2\n2 3\n\"\"\") == \"\"\"\n1\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n10 12\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3 6\n2 3\n4 5\n\"\"\") == \"\"\"\n2\n0\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 2\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 5\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 7\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n6 6\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 5\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1", "solution('''\n2\n2 5\n6 6\n''') == '''\n2\n0\n'''\n\nassert solution('''\n4\n0 100\n0 1000\n0 10000\n0 100000\n''') == '''\n0\n0\n0\n0\n'''\n\nassert solution('''\n1\n1 100000\n''') == '''\n1\n'''\n\n# check the performance of solution\nassert solution('''\n100\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000\n0 100000", "solution('''\n\n''') == '''\n\n'''\n\n# I/O\nimport sys\nstdin = []\nstdin.append('''\n\n''')\nstdin.append('''\n\n''')\nstdin.append('''\n\n''')\nstdin.append('''\n\n''')\nstdin.append('''\n\n''')\nstdin.append('''\n\n''')\n# stdin.append('''\n\n# ''')\n# stdin.append('''\n\n# ''')\n# stdin.append('''\n\n# ''')\n# stdin.append('''\n\n# ''')\n# stdin.append('''\n\n# ''')\n\nstdin = iter(stdin)\nsys.stdin = stdin\n\n# main\n# submit\nimport os\n# os.system('rename a.py a.{ext}'.format(ext='cpp'))\n# os.system('rem rename b.py b.{ext}'.format(ext='cpp'))\n# os.system('rem rename c.py c.{ext}'.format(ext='cpp'))\n# os.system('rem rename d.py d.{ext}'.format(ext='cpp'))", "(solution('''\n3\n2 2\n2 3\n10 10\n''') == '''\n0\n1\n1\n''')\n# test on the random input\nfrom random import randint\ndef test(n: int, l: int, r: int) -> str:\n    # n = int(1e4)\n    t = n\n    print(t)\n    for _ in range(t):\n        l = randint(1, 2*int(1e5))\n        r = randint(l, 2*int(1e5))\n        print(l, r)\n\n# test(int(1e3), 1, 2*int(1e5))", "solution(\"\"\"\n2\n2 5\n2 3\n\"\"\") == \"\"\"\n0\n1\n\"\"\"", "solution(None) == None, 'failed test'\nassert solution(None) == None, 'failed test'\nassert solution(None) == None, 'failed test'\n\n\n# simple tests\nassert solution('''\n1\n1 3\n''') == '''\n1\n''', 'failed test'\n\nassert solution('''\n1\n4 4\n''') == '''\n0\n''', 'failed test'\n\nassert solution('''\n1\n0 3\n''') == '''\n2\n''', 'failed test'\n\nassert solution('''\n1\n1 2\n''') == '''\n1\n''', 'failed test'\n\nassert solution('''\n1\n3 5\n''') == '''\n2\n''', 'failed test'\n\n# stress tests\nfrom random import randint\ndef stress(iterations):\n    while iterations > 0:\n        iterations -= 1\n        l = randint(1, 2 * 10**5)\n        r = randint(l, 2 * 10**5)\n        stdin = f'''\n1\n{l} {r}\n'''\n        solution(stdin)\n\n\n# stress tests\nfrom random import randint\ndef stress(iterations):\n    while iterations > 0:\n        iterations -= 1\n        l = randint(1, 2 * 10", "solution('''\n1\n2 5\n''') == '1'\nassert solution('''\n2\n3 4\n3 5\n''') == '2'\nassert solution('''\n1\n1 10\n''') == '5'\n\n# print solution from input\nprint(solution(input()))", "solution(\"\"\"\n1\n1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n1 3\n1 3\n2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\n1 2\n\"\"\") == \"1\"\n\n# submit main\nif __name__ == \"__main__\":\n    import sys\n    lines = []\n    for line in sys.stdin:\n        lines.append(line.rstrip('\\n'))\n\n    print(solution('\\n'.join(lines)))", "solution('''3\n1 5\n5 7\n0 4''') == '''1\n0\n0'''", "solution('''\n2\n1 2\n2 5\n''') == '''\n1\n2\n'''", "solution(raw_input) == raw_output\n```\n\n### Solution validation\n\nTo test your solution, click on the \"Run code\" button.\n\nThe code output will be displayed on the right side.\n\n### Hints\n\n**Sample test**\n```\nInput\n5\n1 10\n1 100\n5 5\n1 4\n2 3\n\nOutput\n3\n5\n0\n1\n0\n```\n\n**Description of the first test**\n```\nYou have an array of {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}. The bitwise AND of this array is 0. You can delete 3 elements and make the bitwise AND non-zero, for example, if you delete 1, 5, 9.\n```\n\n**Hint 1**\n```\nConsider the last bit where the bitwise AND is zero. This means that all numbers in the array must have this bit set to zero.\n```\n\n**Hint 2**\n```\nFor example, if the last bit is zero, it means that we must delete the minimum number of elements to make the last bit of the bitwise AND equal to 1.\n```\n\n**Hint 3**\n```\nTo be able to make the last bit of the bitwise AND equal to 1, we must ensure that the numbers", "solution(\"\"\"\n1\n1 100\n\"\"\") == '0'\nassert solution(\"\"\"\n1\n2 5\n\"\"\") == '2'\nassert solution(\"\"\"\n1\n2 4\n\"\"\") == '2'\nassert solution(\"\"\"\n1\n1 2\n\"\"\") == '0'\nassert solution(\"\"\"\n1\n3 5\n\"\"\") == '2'\nassert solution(\"\"\"\n1\n2 3\n\"\"\") == '0'\nassert solution(\"\"\"\n1\n1 5\n\"\"\") == '3'\nassert solution(\"\"\"\n1\n3 4\n\"\"\") == '1'\nassert solution(\"\"\"\n1\n1 1000000\n\"\"\") == '999805'\nassert solution(\"\"\"\n1\n1 15\n\"\"\") == '6'\nassert solution(\"\"\"\n1\n1 15\n\"\"\") == '6'\nassert solution(\"\"\"\n1\n1 15\n\"\"\") == '6'\nassert solution(\"\"\"\n1\n1 15\n\"\"\") == '6'\nassert solution(\"\"\"\n1\n1 15\n\"\"\") == '6'\nassert solution(\"\"\"\n1\n1 15\n\"\"\") == '6'\nassert solution(\"\"\"\n1\n1 15\n\"\"\") == '6'\nassert solution(\"\"\"\n1\n1 15\n\"\"\") == '6'\nassert solution(\"\"\"\n1\n1 15\n", "solution(SAMPLE) ==  SAMPLE_SOLUTION", "solution('''\n2\n2 5\n1 3\n''') == '''\n0\n2\n'''", "solution('''\n2\n2 5\n5 6\n''') == '''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n3 4\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n2 3\n2 6\n7 8\n''') == '''\n1\n2\n0\n'''", "solution('''\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '''\n0\n1\n2\n3\n4\n'''\n\nif __name__ == '__main__':\n    with open('input.txt', 'r') as f:\n        print(solution(f.read()))", "solution('''\n1\n1 5\n''') == '''\n1\n'''\nassert solution('''\n3\n3 5\n1 2\n1 3\n''') == '''\n2\n0\n1\n'''\nassert solution('''\n2\n10 15\n5 5\n''') == '''\n4\n0\n'''\n# test speed\nimport timeit\nassert timeit.timeit('''\ndef solution(stdin: str) -> str:\n    pass\n''', '''\nfrom random import randint\nt = 10000\nprint(t)\nfor i in range(t):\n    l = randint(1, 2 * 10 ** 5)\n    r = randint(l, 2 * 10 ** 5)\n    print(l, r)\n''', number=1) < 1", "solution(\"\") == \"\", \"input can not be empty string\"\nassert solution(\" \") == \"\", \"input can not be only space characters\"\nassert solution(\"\\n\") == \"\", \"input can not be an empty line\"\nassert solution(\"0\\n\\n\") == \"\", \"input can not contain only empty lines\"\nassert solution(\"0\\n\") == \"\", \"input can not contain only empty lines\"\nassert solution(\"0\") == \"\", \"input can not contain only empty lines\"\nassert solution(\"1\\n\") == \"\", \"input can not contain only empty lines\"\nassert solution(\"1\\n0\") == \"\", \"input can not contain only empty lines\"\nassert solution(\"1\\n1\\n0\\n\") == \"\", \"input can not contain only empty lines\"\nassert solution(\"1\\n1\\n0\") == \"\", \"input can not contain only empty lines\"\nassert solution(\"1\\n1\\n1\\n\") == \"\", \"input can not contain only empty lines\"\nassert solution(\"1\\n1\\n1\") == \"\", \"input can not contain only empty lines\"\nassert solution(\"1\\n1\\n2\\n3\\n4\\n\") == \"\", \"input can not contain only empty lines\"\nassert solution(\"1\\n1\\n2\\n3\\n", "solution('''\n1\n5 8\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 5\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 5\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert", "solution('''\n4\n2 5\n4 5\n4 10\n2 100\n''') == '''\n3\n0\n5\n8\n'''", "solution(open(\"tests/00\").read()) == open(\"tests/00.a\").read()\nassert solution(open(\"tests/01\").read()) == open(\"tests/01.a\").read()\nassert solution(open(\"tests/02\").read()) == open(\"tests/02.a\").read()\nassert solution(open(\"tests/03\").read()) == open(\"tests/03.a\").read()\nassert solution(open(\"tests/04\").read()) == open(\"tests/04.a\").read()\nassert solution(open(\"tests/05\").read()) == open(\"tests/05.a\").read()\nassert solution(open(\"tests/06\").read()) == open(\"tests/06.a\").read()\nassert solution(open(\"tests/07\").read()) == open(\"tests/07.a\").read()\nassert solution(open(\"tests/08\").read()) == open(\"tests/08.a\").read()\nassert solution(open(\"tests/09\").read()) == open(\"tests/09.a\").read()\nassert solution(open(\"tests/10\").read()) == open(\"tests/10.a\").read()\nassert solution(open(\"tests/11\").read()) == open(\"tests/11.a\").read()\nassert solution(open(\"tests/12\").read()) == open(\"tests/12.a\").read()\nassert solution", "solution(\"1 \\n1 2\") == \"0\"\nassert solution(\"1 \\n1 10\") == \"0\"\nassert solution(\"2 \\n1 10 \\n2 5\") == \"1\\n0\"\nassert solution(\"3 \\n2 3 \\n2 5 \\n7 7\") == \"1\\n1\\n0\"\nassert solution(\"3 \\n1 10 \\n3 7 \\n3 5\") == \"0\\n1\\n1\"\nassert solution(\"10 \\n2 3 \\n4 4 \\n8 8 \\n4 5 \\n5 5 \\n5 6 \\n8 9 \\n5 8 \\n4 7 \\n4 6\") == \"1\\n0\\n0\\n1\\n0\\n1\\n0\\n1\\n1\\n1\"\nassert solution(\"10 \\n3 4 \\n7 7 \\n3 6 \\n2 3 \\n2 6 \\n7 7 \\n2 8 \\n2 3 \\n2 3 \\n7 7\") == \"1\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n1\\n0\"\nassert solution(\"10 \\n2 2 \\n2 6 \\n4 4 \\n2 3 \\n4 5 \\n4 7 \\n4 6 \\n4 4 \\n4 6 \\n", "solution('''2\n2 5\n2 5\n''') == '''2\n1\n'''\n\n#\n# Solve this problem yourself\n#", "solution('''\n1\n1 10\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n10 12\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n1 1000\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n2\n1 1000\n1 10000\n''') == '3\\n4'\n\n# check the correctness of solution\nassert solution('''\n3\n1 100\n1 1000\n1 10000\n''') == '3\\n3\\n4'\n\n# check the correctness of solution\nassert solution('''\n10\n1 10\n1 100\n1 1000\n1 10000\n1 100000\n1 1000000\n1 10000000\n1 100000000\n1 1000000000\n1 10000000000\n''') == '3\\n3\\n3\\n4\\n4\\n4\\n4\\n4\\n4\\n4'\n\n# check the correctness of solution\nassert solution('''\n1\n27694852 46604714\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n1\n1 1000000000000000000\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n1\n", "solution('''\n3\n3 6\n3 4\n3 3\n''') == '''\n1\n1\n0\n'''\n\ndef main():\n    while True:\n        print(solution(input()))\n\nif __name__ == '__main__':\n    main()", "solution('''\n3\n1 1\n1 5\n3 5\n''') == '''\n0\n1\n1\n'''", "solution('''1\n2 5''') == '1'\nassert solution('''1\n5 6''') == '0'\nassert solution('''1\n1 100000''') == '2'\nassert solution('''3\n3 5\n3 3\n2 3''') == '''2\n0\n0'''\n\nimport random\n\nfor _ in range(1000):\n    a = random.randint(1, 10**5)\n    b = random.randint(a, 10**5)\n    assert solution(f'1\\n{a} {b}') == str(min(len(bin(a)) - 3, len(bin(b)) - 3))", "solution(\"\"\"\n\n\"\"\") == \"\"\n\n# check with large inputs\n# assert solution(\"\"\"\n#\n# \"\"\") == \"\"", "(solution('1\\n2 5') == '2')\nassert (solution('2\\n2 5\\n2 100') == '2\\n3')\n\n# get the output\nwith open('input.txt', 'r') as f:\n    with open('output.txt', 'w') as w:\n        w.write(solution(f.read()))", "solution('''\n1\n1 100\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n2 5\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n10 12\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n4 6\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n8 11\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n11 15\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n1 10\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n4 4\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n5 5\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n6 6\n''') == '", "solution('''\n5\n5 6\n10 20\n55 96\n1 100\n1 2\n''') == '''\n1\n2\n2\n0\n0\n'''", "solution(example1) == '2'\nassert solution(example2) == '0'\nassert solution(example3) == '2'\nassert solution(example4) == '1'\n\n# simulate stdin\nif __name__ == '__main__':\n    import os\n    if os.path.exists('input.txt'):\n        with open('input.txt', 'r') as f:\n            stdin = f.read()\n    else:\n        stdin = example1\n    # output the result to console\n    print(solution(stdin))", "solution('''\n''') == '''\n'''"], "finish_reason": ["length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop"], "sum_logprob": [-134.90463746936007, -59.075320183012494, -17.843972204499998, -42.50492952351001, -27.026653119699997, -12.669423115799999, -21.907520852, -48.32021043098301, -17.289477779, -13.1065721255, -17.075187803939997, -13.882206345599998, -11.681794583299999, -34.064679132100004, -120.56305149329695, -84.23411947782098, -57.652853562811515, -87.04199967889603, -54.96619031559299, -106.27685956030905, -93.42016785770001, -13.3396441697, -106.99259226131002, -38.64886292035001, -59.786118133645985, -24.644011211200002, -10.3038902849, -263.73045629364, -85.88552802040297, -17.2993769472, -12.348891092599999, -40.523887344085004, -23.91073927649001, -74.86785624625003, -95.74484566434998, -37.20866418109641, -30.426454856930004, -18.424211676054, -181.80416375585014, -40.1301383585, -110.35207407805103, -35.26855782599999, -15.5853094721, -79.11712397713998, -26.508987043500003, -40.69592748102, -71.301630606157, -44.618162020740016, -51.42783335334001, -6.578745202000001], "mean_logprob": [-0.4496821248978667, -0.196917733943375, -0.5756120065967741, -0.45218010131393616, -0.844582909990625, -0.48728550445384616, -0.6259291672, -0.4601924802950762, -1.3299598291538461, -0.5040989279038461, -0.853759390197, -0.5339310132923076, -0.4492997916653846, -0.5873220540017241, -0.40187683831099, -0.2807803982594033, -0.192176178542705, -0.2901399989296533, -0.18322063438531, -0.35425619853436335, -0.5912668851753164, -0.5799845291173913, -0.35664197420436666, -0.5367897627826389, -0.39332972456346055, -0.9127411559703703, -0.39630347249615383, -0.8791015209788, -0.28628509340134334, -1.235669781942857, -0.4749573497153846, -0.4012266073671782, -0.298884240956125, -0.3982332779055851, -0.31914948554783334, -0.12402888060365466, -0.8451793015813889, -0.06141403892018, -0.6060138791861667, -1.1147260655138889, -0.36784024692683664, -0.5263963854626865, -0.5027519184548387, -0.4975919746989937, -0.8551286143064516, -0.4732084590816279, -0.23767210202052333, -1.0882478541643903, -0.3896047981313636, -0.46991037157142856]}
{"prompt": "'''\nTwo players, Red and Blue, are at it again, and this time they're playing with crayons! The mischievous duo is now vandalizing a rooted tree, by coloring the nodes while playing their favorite game.\n\nThe game works as follows: there is a tree of size n, rooted at node 1, where each node is initially white. Red and Blue get one turn each. Red goes first. \n\nIn Red's turn, he can do the following operation any number of times: \n\n  * Pick any subtree of the rooted tree, and color every node in the subtree red. \n\nHowever, to make the game fair, Red is only allowed to color k nodes of the tree. In other words, after Red's turn, at most k of the nodes can be colored red.\n\nThen, it's Blue's turn. Blue can do the following operation any number of times: \n\n  * Pick any subtree of the rooted tree, and color every node in the subtree blue. However, he's not allowed to choose a subtree that contains a node already colored red, as that would make the node purple and no one likes purple crayon. \n\nNote: there's no restriction on the number of nodes Blue can color, as long as he doesn't color a node that Red has already colored.\n\nAfter the two turns, the score of the game is determined as follows: let w be the number of white nodes, r be the number of red nodes, and b be the number of blue nodes. The score of the game is w \u22c5 (r - b).\n\nRed wants to maximize this score, and Blue wants to minimize it. If both players play optimally, what will the final score of the game be?\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 2 \u22c5 10^5; 1 \u2264 k \u2264 n) \u2014 the number of vertices in the tree and the maximum number of red nodes.\n\nNext n - 1 lines contains description of edges. The i-th line contains two space separated integers u_i and v_i (1 \u2264 u_i, v_i \u2264 n; u_i \u2260 v_i) \u2014 the i-th edge of the tree.\n\nIt's guaranteed that given edges form a tree.\n\nOutput\n\nPrint one integer \u2014 the resulting score if both Red and Blue play optimally.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n4 2\n1 2\n1 3\n1 4\n''') == '2'\n\nassert solution('''\n3 1\n1 2\n1 3\n''') == '0'\n\nassert solution('''\n3 1\n1 2\n2 3\n''') == '-1'\n\nassert solution('''\n5 2\n1 2\n1 3\n1 4\n1 5\n''') == '-8'\n\nassert solution('''\n4 3\n1 2\n1 3\n2 4\n''') == '2'\n\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n1 5\n''') == '-5'\n\nassert solution('''\n5 3\n1 2\n1 3\n2 4\n3 5\n''') == '0'\n\nassert solution('''\n6 3\n1 2\n1 3\n1 4\n1 5\n1 6\n''') == '-10'\n\nassert solution('''\n5 4\n1 2\n1 3\n1 4\n1 5\n''') == '2'\n\nassert solution('''\n6 4\n1 2\n1 3\n1 4\n1 5\n1 6\n''') == '-4'\n\nassert solution('''\n7 4\n1 2\n1 3\n1 4\n", "solution('''\n''') == '''\n'''\n\n# submit solution\n# sh -c 'cd ~/coding/algorithms/codeforces/; git pull; git add -A; git commit -m \"codeforces:\"; git push; curl \"https://www.codeforces.com/contest/1370/problem/C/submit\" -X POST -F \"source=@$(pwd)/$(ls | grep solution.py | grep cpp)\"'\n\n# solve the problem online\n# curl \"https://www.codeforces.com/contest/1370/problem/C/submit\" -X POST -F \"source=@$(pwd)/$(ls | grep solution.py | grep cpp)\"\n\n# TODO:\n# https://codeforces.com/problemset/problem/1370/C\n# https://codeforces.com/problemset/problem/1370/D\n# https://codeforces.com/problemset/problem/1370/E\n# https://codeforces.com/problemset/problem/1370/F\n# https://codeforces.com/problemset/problem/1370/G\n# https://codeforces.com/problemset", "solution('''\n4 2\n1 2\n1 3\n2 4\n''') == '-2'\n\nassert solution('''\n10 4\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7\n7 8\n7 9\n7 10\n''') == '-2'\n\nassert solution('''\n7 1\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n''') == '-2'\n\nassert solution('''\n3 1\n1 2\n1 3\n''') == '-2'\n\nassert solution('''\n10 5\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7\n7 8\n7 9\n7 10\n''') == '-4'\n\nassert solution('''\n7 2\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n''') == '0'\n\nassert solution('''\n4 3\n1 2\n1 3\n2 4\n''') == '0'\n\nassert solution('''\n5 3\n1 2\n1 3\n2 4\n3 5\n''') == '0'\n\nassert solution('''\n3 2\n1 2\n1 3\n''') == '0'\n\nassert solution('''\n5 4\n1 2", "solution('''\n3 2\n1 2\n2 3\n''') == '0'\n\nassert solution('''\n3 1\n1 2\n2 3\n''') == '-1'\n\nassert solution('''\n4 1\n1 2\n2 3\n2 4\n''') == '-2'\n\nassert solution('''\n4 2\n1 2\n2 3\n2 4\n''') == '0'\n\nassert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '1'\n\nassert solution('''\n5 3\n1 2\n2 3\n3 4\n3 5\n''') == '0'\n\nassert solution('''\n5 4\n1 2\n2 3\n3 4\n3 5\n''') == '2'\n\n# print the result\nwith open('input.txt', 'r') as f:\n    print(solution(f.read()))", "solution('''5 3\n1 2\n1 3\n2 4\n2 5''') == '0'\nassert solution('''5 2\n1 2\n1 3\n2 4\n2 5''') == '-2'\nassert solution('''7 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7''') == '0'\nassert solution('''7 2\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7''') == '-2'\nassert solution('''8 4\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n7 8''') == '2'\nassert solution('''8 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n7 8''') == '-2'\nassert solution('''10 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n7 8\n7 9\n8 10''') == '0'\nassert solution('''10 2\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n7 8\n7 9\n8 10''') == '-4'\nassert solution('''10 1\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n7 8\n", "solution(\n    '''\n    5 2\n    1 2\n    1 3\n    3 4\n    3 5\n    '''\n) == '-6'\nassert solution(\n    '''\n    5 1\n    1 2\n    1 3\n    3 4\n    3 5\n    '''\n) == '2'\nassert solution(\n    '''\n    4 2\n    1 2\n    1 3\n    1 4\n    '''\n) == '-2'\nassert solution(\n    '''\n    5 3\n    1 2\n    1 3\n    3 4\n    3 5\n    '''\n) == '0'\nassert solution(\n    '''\n    5 1\n    1 2\n    1 3\n    1 4\n    1 5\n    '''\n) == '0'\nassert solution(\n    '''\n    3 1\n    1 2\n    1 3\n    '''\n) == '-2'\nassert solution(\n    '''\n    2 1\n    1 2\n    '''\n) == '0'\nassert solution(\n    '''\n    4 1\n    1 2\n    1 3\n    1 4\n    '''\n) == '0'\nassert solution(\n    '''\n    6 4\n    1 2\n    1 3\n    2", "solution(\"4 2\\n1 2\\n1 3\\n1 4\") == \"2\"\nassert solution(\"6 3\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\") == \"4\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"4\"\nassert solution(\"6 3\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\") == \"4\"\nassert solution(\"3 1\\n1 2\\n1 3\") == \"1\"\nassert solution(\"5 3\\n1 2\\n1 3\\n2 4\\n2 5\") == \"0\"\nassert solution(\"10 2\\n1 2\\n1 3\\n2 4\\n2 5\\n5 6\\n5 7\\n1 8\\n8 9\\n8 10\") == \"0\"\nassert solution(\"10 3\\n1 2\\n1 3\\n2 4\\n2 5\\n5 6\\n5 7\\n1 8\\n8 9\\n8 10\") == \"2\"\nassert solution(\"10 3\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\") == \"4\"\nassert solution(\"10 4\\", "\"18\" == solution(\"\"\"5 3\n1 2\n1 3\n2 4\n3 5\"\"\")\nassert \"0\" == solution(\"\"\"1 1\n1 1\"\"\")\nassert \"18\" == solution(\"\"\"5 3\n1 2\n1 3\n2 4\n3 5\"\"\")\nassert \"0\" == solution(\"\"\"1 1\n1 1\"\"\")\nassert \"6\" == solution(\"\"\"5 3\n1 2\n1 3\n1 4\n1 5\"\"\")\nassert \"0\" == solution(\"\"\"3 2\n1 2\n2 3\"\"\")\nassert \"0\" == solution(\"\"\"3 1\n1 2\n2 3\"\"\")\nassert \"0\" == solution(\"\"\"3 1\n1 2\n1 3\"\"\")\nassert \"0\" == solution(\"\"\"2 1\n1 2\"\"\")\nassert \"0\" == solution(\"\"\"2 1\n1 1\"\"\")\nassert \"0\" == solution(\"\"\"2 1\n1 2\"\"\")\nassert \"0\" == solution(\"\"\"2 1\n1 1\"\"\")\nassert \"3\" == solution(\"\"\"4 2\n1 2\n1 3\n2 4\"\"\")\nassert \"0\" == solution(\"\"\"4 1\n1 2\n1 3\n2 4\"\"\")\nassert \"0\" == solution(\"\"\"4 1\n1 2\n1 3\n1 4\"\"\")\nassert \"0\" == solution(\"", "solution('''\n2 1\n1 2\n''') == '0'\n\nassert solution('''\n3 2\n1 2\n2 3\n''') == '1'\n\nassert solution('''\n3 1\n1 2\n2 3\n''') == '-1'\n\nassert solution('''\n3 2\n1 2\n1 3\n''') == '2'\n\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == '6'\n\nassert solution('''\n4 1\n1 2\n1 3\n1 4\n''') == '-3'\n\n# print the solution to stdout\nwith open('stdin.txt', 'r') as f:\n    print(solution(f.read()))", "solution(stdin=\"1 2\\n\") == \"4\"\nassert solution(stdin=\"1 2\\n\") == \"4\"\nassert solution(stdin=\"1 2\\n\") == \"4\"", "solution(\"input_1.txt\") == \"output_1.txt\"\nassert solution(\"input_2.txt\") == \"output_2.txt\"\nassert solution(\"input_3.txt\") == \"output_3.txt\"\nassert solution(\"input_4.txt\") == \"output_4.txt\"\nassert solution(\"input_5.txt\") == \"output_5.txt\"\n\n# submit the answer\nimport os\nwith open(os.path.join(os.path.dirname(__file__), 'output.txt'), 'w') as output_file:\n    output_file.write(solution(os.path.join(os.path.dirname(__file__), 'input.txt')))", "solution('''\n5 3\n1 2\n1 3\n2 4\n2 5\n''') == '-2'\n\n# testcase 3\nassert solution('''\n15 7\n1 2\n1 3\n2 4\n2 5\n1 6\n6 7\n6 8\n8 9\n8 10\n3 11\n3 12\n12 13\n12 14\n12 15\n''') == '-42'\n\n# testcase 4\nassert solution('''\n20 15\n1 2\n1 3\n1 4\n1 5\n2 6\n2 7\n2 8\n3 9\n3 10\n3 11\n4 12\n4 13\n4 14\n5 15\n5 16\n5 17\n5 18\n5 19\n5 20\n''') == '-6'\n\n# testcase 1\nassert solution('''\n4 2\n1 2\n1 3\n1 4\n''') == '-4'\n\n# testcase 2\nassert solution('''\n3 1\n1 2\n1 3\n''') == '-2'", "solution(open('input.txt').read()) == open('output.txt').read()", "solution('''\n4 2\n1 2\n2 3\n2 4\n''') == '4'\n\nassert solution('''\n2 1\n1 2\n''') == '0'\n\nassert solution('''\n2 2\n1 2\n''') == '0'\n\nassert solution('''\n4 1\n1 2\n2 3\n2 4\n''') == '3'\n\nassert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '0'\n\nassert solution('''\n10 2\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 9\n4 10\n''') == '9'\n\nassert solution('''\n10 2\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n''') == '3'\n\nassert solution('''\n10 2\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 9\n4 10\n''') == '11'\n\nassert solution('''\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 9\n4 10\n''') == '1'\n\nassert solution('''\n10", "solution(\"2 1\") == \"-1\"\nassert solution(\"3 1\") == \"-1\"\nassert solution(\"6 3\") == \"-2\"\nassert solution(\"12 4\") == \"-6\"\nassert solution(\"15 5\") == \"-10\"\nassert solution(\"30 10\") == \"-52\"\nassert solution(\"100 50\") == \"-590\"\nassert solution(\"1000 500\") == \"-11800\"\nassert solution(\"2000 1000\") == \"-29600\"\nassert solution(\"3000 1500\") == \"-52200\"\nassert solution(\"6000 3000\") == \"-151300\"\nassert solution(\"10000 5000\") == \"-331100\"\nassert solution(\"20000 10000\") == \"-810000\"\nassert solution(\"100000 50000\") == \"-4050000\"\nassert solution(\"200000 100000\") == \"-9450000\"\nassert solution(\"400000 200000\") == \"-23050000\"\nassert solution(\"1000000 500000\") == \"-101250000\"\nassert solution(\"2000000 1000000\") == \"-227500000\"\nassert solution(\"4000000 2000000\") == \"-530000000\"\nassert solution(\"8000000 4000000\") == \"-1185000000\"\nassert solution(\"20000000 10000000\") == \"-2760000000\"\nassert solution(\"40000000 20000000\") == \"-6315000000\"\nassert solution(\"80000000 40000000\") == \"-13765000000\"\nassert solution(\"200", "solution('''5 2\n1 2\n1 3\n2 4\n2 5''') == '2'\nassert solution('''5 3\n1 2\n1 3\n2 4\n2 5''') == '0'\nassert solution('''5 1\n1 2\n1 3\n2 4\n2 5''') == '-1'\nassert solution('''1 0\n''') == '0'\nassert solution('''8 5\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8''') == '16'\nassert solution('''3 0\n1 2\n1 3''') == '-1'\nassert solution('''3 1\n1 2\n1 3''') == '-2'\nassert solution('''6 3\n1 2\n1 3\n1 4\n1 5\n1 6''') == '4'\nassert solution('''7 2\n1 2\n1 3\n2 4\n3 5\n3 6\n3 7''') == '2'\nassert solution('''7 2\n1 2\n1 3\n2 4\n3 5\n3 6\n4 7''') == '2'\nassert solution('''5 2\n1 2\n1 3\n1 4\n1 5''') == '2'\nassert solution('''5 1\n1 2\n", "solution(solution.__doc__) == '''\n'''", "solution(\"\") == \"\"\n\n# check the speed of solution\nprint(timeit(solution, \"\", number=100))", "solution('''\n5 3\n1 2\n1 3\n2 4\n3 5\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n8 2\n1 2\n1 3\n2 4\n3 5\n5 6\n5 7\n5 8\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n8 1\n1 2\n1 3\n2 4\n3 5\n5 6\n5 7\n5 8\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n3 2\n1 2\n2 3\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n3 1\n1 2\n2 3\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n5 1\n1 2\n1 3\n2 4\n3 5\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n4 2\n1 2\n1 3\n2 4\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1 2\n1 3\n2 4\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\nprint(\"Finished!\")", "solution(\"2 3\\n1 2\") == \"0\"\nassert solution(\"5 4\\n1 2\\n1 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"7 4\\n1 2\\n1 3\\n2 4\\n2 5\\n2 6\\n2 7\") == \"1\"\nassert solution(\"13 10\\n1 2\\n1 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n2 10\\n2 11\\n2 12\\n2 13\") == \"3\"\nassert solution(\"17 16\\n1 2\\n1 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n2 10\\n2 11\\n2 12\\n2 13\\n2 14\\n2 15\\n2 16\\n2 17\") == \"4\"\nassert solution(\"100000 5\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n2 10\\n2 11\\n2 12\\n2 13\\n2 14\\n2 15\\n2 16\\n2 17\\n2 18\\n2 19\\n2 20\\n2 21\\n2 22", "solution(\"\"\"\n3 1\n1 2\n2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n6 3\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6 2\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n8 5\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n8 4\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6 4\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6 5\n1 2\n2 3\n2 4\n2 5\n2 6\n\"\"\") == \"4\"\n\n# stress testing the solution\nfrom random import randint\nmax_test_size = 5*10**4\nprint(\"running stress test...\")\nwhile True:\n    n = randint(2, max_test_size)\n    k = randint(1, n)\n    edges = []\n    for _ in range(n - 1):\n        u =", "solution(\"\"\"\n5 2\n1 2\n1 3\n2 4\n2 5\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n6 3\n1 2\n1 3\n1 4\n2 5\n2 6\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n10 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3 8\n3 9\n3 10\n\"\"\") == \"\"\"\n6\n\"\"\"\n\nassert solution(\"\"\"\n10 7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n3 8\n3 9\n3 10\n\"\"\") == \"\"\"\n15\n\"\"\"\n\nassert solution(\"\"\"\n100 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 30\n1 31\n1 32\n1 33\n1 34\n1 35\n1 36\n1 37\n1 38\n1 39\n1 40\n1 41\n1 42\n1 43\n1 44\n1 45\n1 46\n1 47\n1 48", "solution(test1) == \"20\"\nassert solution(test2) == \"0\"\nassert solution(test3) == \"0\"\nassert solution(test4) == \"0\"\nassert solution(test5) == \"10\"\nassert solution(test6) == \"30\"\nassert solution(test7) == \"20\"\nassert solution(test8) == \"0\"\nassert solution(test9) == \"8\"\nassert solution(test10) == \"20\"\nassert solution(test11) == \"12\"\nassert solution(test12) == \"16\"\nassert solution(test13) == \"20\"\nassert solution(test14) == \"2\"\nassert solution(test15) == \"0\"\nassert solution(test16) == \"0\"\nassert solution(test17) == \"0\"\nassert solution(test18) == \"0\"\nassert solution(test19) == \"0\"\nassert solution(test20) == \"0\"\nassert solution(test21) == \"0\"\nassert solution(test22) == \"20\"\nassert solution(test23) == \"0\"\nassert solution(test24) == \"8\"\nassert solution(test25) == \"22\"\nassert solution(test26) == \"0\"\nassert solution(test27) == \"0\"\nassert solution(test", "solution('''4 2\n1 2\n1 3\n2 4''') == '4'\nassert solution('''5 4\n1 2\n1 3\n1 4\n1 5''') == '0'\nassert solution('''5 3\n1 2\n1 3\n1 4\n1 5''') == '2'\nassert solution('''5 5\n1 2\n1 3\n1 4\n1 5''') == '10'\nassert solution('''5 4\n1 2\n1 3\n1 4\n1 5''') == '0'\nassert solution('''5 4\n1 2\n1 3\n1 4\n3 5''') == '0'\nassert solution('''5 3\n1 2\n1 3\n2 4\n2 5''') == '0'\nassert solution('''10 5\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n6 8\n6 9\n6 10''') == '0'\nassert solution('''10 5\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n7 8\n7 9\n7 10''') == '0'\nassert solution('''9 8\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n7 8\n7 9''') == '4'\nassert solution", "solution(stdin) == stdout\nassert solution(stdin) == stdout", "'42' == solution(r'''\n3 2\n1 2\n2 3\n''')\n\nassert '10' == solution(r'''\n3 1\n1 2\n2 3\n''')\n\nassert '0' == solution(r'''\n3 3\n1 2\n2 3\n''')\n\nassert '0' == solution(r'''\n4 1\n1 2\n2 3\n2 4\n''')\n\nassert '20' == solution(r'''\n4 3\n1 2\n2 3\n2 4\n''')\n\nassert '0' == solution(r'''\n4 4\n1 2\n2 3\n2 4\n''')\n\nassert '0' == solution(r'''\n4 2\n1 2\n2 3\n2 4\n''')\n\nassert '0' == solution(r'''\n4 2\n1 2\n2 3\n3 4\n''')\n\nassert '0' == solution(r'''\n5 1\n1 2\n2 3\n2 4\n2 5\n''')\n\nassert '10' == solution(r'''\n5 2\n1 2\n2 3\n2 4\n2 5\n''')\n\nassert '0' == solution(r'''\n5 3\n1 2\n2 3\n2 4\n2 5\n''')\n\nassert '0'", "(solution('2 1\\n1 2\\n') == '0')\nassert (solution('2 2\\n1 2\\n') == '1')\nassert (solution('5 2\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '6')\nassert (solution('6 3\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n') == '3')\nassert (solution('9 2\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n3 8\\n3 9\\n') == '6')\nassert (solution('6 4\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n') == '0')\nassert (solution('10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n3 10\\n') == '9')\nassert (solution('5 5\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '15')\nassert (solution('10 5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n", "solution(\"\") == \"\", \"solution is not correct\"\n\n# get the input\nstdin = open(\"input.txt\", \"r\")\n\n# get the output\noutput = open(\"output.txt\", \"w\")\n\n# write to the output file\noutput.write(solution(stdin.read()))\n\n# close the files\nstdin.close()\noutput.close()", "solution('''\n4 2\n1 2\n1 3\n1 4\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2\n1 3\n2 4\n2 5\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n9 2\n1 2\n1 3\n2 4\n2 5\n5 6\n5 7\n5 8\n5 9\n''') == '-7'\n\nassert solution('''\n9 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n''') == '14'\n\nassert solution('''\n9 5\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n''') == '9'\n\nassert solution('''\n9 5\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n''') == '9'\n\nassert solution('''\n9 5\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n''') == '9'\n\nassert solution('''\n9 5\n1 2\n1 3\n1 4\n1 5\n1 6\n1", "solution('''\n4 2\n1 2\n1 3\n1 4\n''') == '0'\n\nassert solution('''\n4 1\n1 2\n1 3\n1 4\n''') == '-2'\n\nassert solution('''\n5 2\n1 2\n1 3\n1 4\n1 5\n''') == '0'\n\nassert solution('''\n1 1\n''') == '0'\n\nassert solution('''\n7 3\n1 2\n1 3\n1 4\n2 5\n2 6\n4 7\n''') == '4'\n\n# stress test\nfrom random import randint\nfrom collections import deque\nfrom subprocess import Popen, PIPE, TimeoutExpired\nfrom threading import Thread\nfrom queue import Queue\n\ndef stress(stdin: str, timeout: int = 10) -> bool:\n    proc = Popen(['python3', '-c', stdin], stdin=PIPE, stdout=PIPE, stderr=PIPE)\n    def writer():\n        proc.stdin.write(stdin.encode())\n        proc.stdin.close()\n    Thread(target=writer).start()\n    try:\n        outs, errs = proc.communicate(timeout=timeout)\n        outs = outs.", "solution(test_stdin1) == \"0\"\nassert solution(test_stdin2) == \"0\"\nassert solution(test_stdin3) == \"0\"\nassert solution(test_stdin4) == \"0\"\nassert solution(test_stdin5) == \"0\"\nassert solution(test_stdin6) == \"0\"\nassert solution(test_stdin7) == \"0\"\nassert solution(test_stdin8) == \"0\"\nassert solution(test_stdin9) == \"0\"\nassert solution(test_stdin10) == \"0\"\nassert solution(test_stdin11) == \"0\"\nassert solution(test_stdin12) == \"0\"\nassert solution(test_stdin13) == \"0\"\nassert solution(test_stdin14) == \"0\"\nassert solution(test_stdin15) == \"0\"\nassert solution(test_stdin16) == \"0\"\nassert solution(test_stdin17) == \"0\"\nassert solution(test_stdin18) == \"0\"\nassert solution(test_stdin19) == \"0\"\nassert solution(test_stdin20) == \"0\"\nassert solution(test_stdin21) == \"0\"\nassert solution(test_stdin", "(solution('''\n''') == '''\n''')", "solution('''\n4 2\n1 2\n1 3\n2 4\n''') == '1', 'Sample'\nassert solution('''\n3 1\n1 2\n2 3\n''') == '0', 'Example 1'\nassert solution('''\n5 2\n1 2\n1 3\n1 4\n2 5\n''') == '-2', 'Example 2'\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n2 5\n''') == '-1', 'Example 3'\nassert solution('''\n5 4\n1 2\n1 3\n1 4\n2 5\n''') == '-2', 'Example 4'\nassert solution('''\n6 4\n1 2\n1 3\n1 4\n1 5\n3 6\n''') == '-2', 'Example 5'\nassert solution('''\n6 3\n1 2\n1 3\n1 4\n1 5\n3 6\n''') == '-3', 'Example 6'\nassert solution('''\n5 2\n1 2\n1 3\n2 4\n2 5\n''') == '0', 'Example 7'\nassert solution('''\n5 2\n1 2\n1 3\n1 4\n3 5\n''') == '-2', 'Example 8'\nassert solution('''\n4 2\n1 2", "solution('''\n9 2\n1 2\n1 3\n2 4\n2 5\n2 6\n5 7\n5 8\n5 9\n''') == '-9'\n\nassert solution('''\n3 2\n1 2\n1 3\n''') == '3'\n\nassert solution('''\n3 1\n1 2\n1 3\n''') == '0'\n\nassert solution('''\n2 1\n1 2\n''') == '-1'\n\nassert solution('''\n2 2\n1 2\n''') == '0'\n\nassert solution('''\n2 3\n1 2\n''') == '1'\n\nassert solution('''\n10 2\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n2 9\n2 10\n''') == '-9'\n\nassert solution('''\n10 1\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n2 9\n2 10\n''') == '-4'\n\nassert solution('''\n2 1\n1 2\n''') == '-1'\n\nassert solution('''\n4 2\n1 2\n1 3\n2 4\n''') == '-2'\n\nassert solution('''\n4 3\n1 2\n1 3", "solution(\"\"\"6 3\n1 2\n1 3\n1 4\n2 5\n2 6\"\"\") == \"1\"\nassert solution(\"\"\"10 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n4 9\n4 10\"\"\") == \"7\"\nassert solution(\"\"\"8 2\n1 2\n1 3\n1 4\n2 5\n2 6\n4 7\n4 8\"\"\") == \"2\"\nassert solution(\"\"\"4 3\n1 2\n1 3\n1 4\"\"\") == \"0\"\nassert solution(\"\"\"4 1\n1 2\n1 3\n1 4\"\"\") == \"-3\"\nassert solution(\"\"\"3 1\n1 2\n1 3\"\"\") == \"-1\"\nassert solution(\"\"\"8 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n6 8\"\"\") == \"0\"\nassert solution(\"\"\"8 3\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n7 8\"\"\") == \"1\"\nassert solution(\"\"\"8 1\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n7 8\"\"\") == \"-4\"\nassert solution(\"\"\"4 2\n1 2\n1 3\n1 4\"\"\") == \"0\"\nassert solution(\"\"\"12 5\n1 2\n1 3", "solution('''\n8 5\n1 2\n1 3\n1 4\n2 5\n2 6\n4 7\n4 8\n''') == '10'\nassert solution('''\n6 3\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == '0'\nassert solution('''\n3 1\n1 2\n1 3\n''') == '-2'\nassert solution('''\n3 2\n1 2\n1 3\n''') == '0'\nassert solution('''\n3 3\n1 2\n1 3\n''') == '0'\nassert solution('''\n8 4\n1 2\n1 3\n1 4\n2 5\n2 6\n4 7\n4 8\n''') == '0'\nassert solution('''\n3 1\n1 2\n2 3\n''') == '-2'\nassert solution('''\n3 2\n1 2\n2 3\n''') == '0'\nassert solution('''\n3 3\n1 2\n2 3\n''') == '0'\nassert solution('''\n2 1\n1 2\n''') == '-1'\nassert solution('''\n2 2\n1 2\n''') == '0'\nassert solution('''\n2 3\n1 2\n''') == '0'\nassert solution(''", "solution('''\n2 2\n1 2\n''') == '0'\n\nassert solution('''\n3 2\n1 2\n2 3\n''') == '0'\n\nassert solution('''\n6 2\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == '0'\n\nassert solution('''\n6 3\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == '8'\n\nassert solution('''\n6 4\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == '8'\n\nassert solution('''\n6 5\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == '8'\n\nassert solution('''\n6 6\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == '8'\n\nassert solution('''\n6 1\n1 2\n2 3\n2 4\n2 5\n2 6\n''') == '0'\n\nassert solution('''\n10 3\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == '-8'\n\nassert solution('''\n10 4\n1 2\n1 3\n1 4\n1 5\n", "solution(stdin) == stdout\n\n# let's look at how much time it took to run the solution\nt = time.perf_counter()\nsolution(stdin)\nt = time.perf_counter() - t\nassert t < max_time, f\"Time limit exceeded. Max time allowed is {max_time} seconds\"\n\n# check the correctness of solution for all testcases\nfor testcase in testcases:\n    assert solution(testcase['input']) == testcase['output']\n\nprint(\"Correct!\")", "solution('''\n5 2\n1 2\n1 3\n2 4\n2 5\n''') == '''\n-3\n'''\n\nassert solution('''\n5 1\n1 2\n1 3\n2 4\n2 5\n''') == '''\n0\n'''\n\nassert solution('''\n5 4\n1 2\n1 3\n2 4\n2 5\n''') == '''\n4\n'''\n\nassert solution('''\n5 5\n1 2\n1 3\n2 4\n2 5\n''') == '''\n9\n'''\n\nassert solution('''\n7 1\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n''') == '''\n-1\n'''\n\nassert solution('''\n7 2\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n''') == '''\n1\n'''\n\nassert solution('''\n7 3\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n''') == '''\n5\n'''\n\nassert solution('''\n7 4\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n''') == '''\n9\n'''\n\nassert solution('''\n7 5\n1 2", "solution(open('tests/1.in').read()) == open('tests/1.out').read()\nassert solution(open('tests/2.in').read()) == open('tests/2.out').read()\nassert solution(open('tests/3.in').read()) == open('tests/3.out').read()\nassert solution(open('tests/4.in').read()) == open('tests/4.out').read()\nassert solution(open('tests/5.in').read()) == open('tests/5.out').read()\nassert solution(open('tests/6.in').read()) == open('tests/6.out').read()\nassert solution(open('tests/7.in').read()) == open('tests/7.out').read()\nassert solution(open('tests/8.in').read()) == open('tests/8.out').read()\nassert solution(open('tests/9.in').read()) == open('tests/9.out').read()\nassert solution(open('tests/10.in').read()) == open('tests/10.out').read()\nassert solution(open('tests/11.in').read()) == open('tests/11.out').read()\nassert solution(open('tests/12.in').read()) == open('tests/12.out').read()\nassert", "solution('''5 3\n1 2\n1 3\n2 4\n2 5''') == '-2'\nassert solution('''3 1\n1 2\n1 3''') == '0'\nassert solution('''5 2\n1 2\n1 3\n1 4\n1 5''') == '-5'\nassert solution('''5 3\n1 2\n1 3\n1 4\n1 5''') == '2'\nassert solution('''5 4\n1 2\n1 3\n1 4\n1 5''') == '7'\nassert solution('''3 3\n1 2\n1 3''') == '3'\nassert solution('''1 1\n''') == '0'\nassert solution('''2 1\n1 2''') == '-1'\nassert solution('''2 2\n1 2''') == '0'\nassert solution('''4 2\n1 2\n1 3\n1 4''') == '-2'\nassert solution('''4 2\n1 2\n1 3\n2 4''') == '0'\nassert solution('''2 1\n1 2''') == '-1'\nassert solution('''2 2\n1 2''') == '0'\nassert solution('''8 3\n1 2\n1 3\n1 4\n1 5\n1 6\n", "solution(\"\"\"\n5 3\n1 2\n1 3\n2 4\n2 5\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6 1\n1 2\n1 3\n1 4\n2 5\n2 6\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6 1\n1 2\n1 3\n1 4\n1 5\n1 6\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 1\n1 2\n1 3\n2 4\n2 5\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6 1\n1 2\n1 3\n2 4\n2 5\n2 6\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 2\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n\"\"\") == \"\"\"\n-4\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 1\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n\"\"\") == \"\"\"\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution", "solution(\"\"\"4 2\n1 2\n1 3\n1 4\"\"\") == \"1\"\nassert solution(\"\"\"3 2\n1 2\n1 3\"\"\") == \"0\"\nassert solution(\"\"\"4 3\n1 2\n1 3\n1 4\"\"\") == \"0\"\nassert solution(\"\"\"10 5\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n2 9\n2 10\"\"\") == \"14\"\nassert solution(\"\"\"10 5\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n2 9\n2 10\"\"\") == \"14\"\nassert solution(\"\"\"10 5\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n2 9\n2 10\"\"\") == \"14\"\nassert solution(\"\"\"100 2\n1 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n2 9\n2 10\n1 11\n1 12\n1 13\n1 14\n1 15\n2 16\n2 17\n2 18\n2 19\n2 20\n1 21\n1 22\n1 23\n1 24\n1 25\n2 26\n2 27\n2 28\n2 29\n2 30\n1 31\n1 32\n1 33\n1 34\n1 35\n2 36\n2 37\n2 38\n", "solution(\"\"\"5 3\n1 2\n1 3\n2 4\n2 5\"\"\") == '-2'\nassert solution(\"\"\"5 2\n1 2\n1 3\n2 4\n2 5\"\"\") == '-5'\nassert solution(\"\"\"5 3\n1 2\n1 3\n2 4\n2 5\"\"\") == '-2'\nassert solution(\"\"\"10 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\"\"\") == '0'\nassert solution(\"\"\"10 2\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\"\"\") == '0'\nassert solution(\"\"\"6 3\n1 2\n1 3\n1 4\n1 5\n1 6\"\"\") == '0'\nassert solution(\"\"\"6 2\n1 2\n1 3\n1 4\n1 5\n1 6\"\"\") == '-10'\nassert solution(\"\"\"10 1\n1 2\n1 3\n2 4\n2 5\n2 6\n3 7\n3 8\n3 9\n3 10\"\"\") == '-9'\nassert solution(\"\"\"10 1\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\"\"\") == '-12'\nassert solution(\"\"\"", "solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n'''\n) == '''\n", "solution(\n    '''\n    5 4\n    1 2\n    1 3\n    2 4\n    2 5\n    '''\n) == '-2'\n\n# # let's check performance of solution\n# import cProfile\n# cProfile.run('solution(stdin)')", "solution('''\n4 2\n1 2\n1 3\n1 4\n''') == '-3'\n\nassert solution('''\n4 1\n1 2\n1 3\n1 4\n''') == '-1'\n\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == '-2'\n\nassert solution('''\n10 4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == '-28'\n\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n1 5\n''') == '-6'\n\nassert solution('''\n10 5\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == '-13'\n\nassert solution('''\n10 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == '-4'\n\nassert solution('''\n10 10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n''') == '-1'\n\n# check the correctness of solution with big input\n", "solution(\n    \"1 1\\n\"\n    \"1\\n\"\n) == \"1\"\n\n# check the correctness of solution\nassert solution(\n    \"10 2\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"2 5\\n\"\n    \"2 6\\n\"\n    \"3 7\\n\"\n    \"3 8\\n\"\n    \"4 9\\n\"\n    \"4 10\\n\"\n) == \"0\"\n\n# check the correctness of solution\nassert solution(\n    \"10 3\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"2 5\\n\"\n    \"2 6\\n\"\n    \"3 7\\n\"\n    \"3 8\\n\"\n    \"4 9\\n\"\n    \"4 10\\n\"\n) == \"3\"\n\n# check the correctness of solution\nassert solution(\n    \"13 3\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"2 5\\n\"\n    \"2 6\\n\"\n    \"3 7\\n\"\n    \"3 8\\n\"\n    \"4 9", "solution(1) == 1"], "finish_reason": ["length", "length", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "stop"], "sum_logprob": [-73.79335841180459, -141.0939026281349, -73.28610414631001, -46.530371958907025, -52.269683124456996, -64.53862212137093, -83.8723499471919, -82.83164479935104, -47.11644239491101, -23.379488216775997, -31.403232205504004, -84.49877848922998, -9.352874671199997, -70.00007517162896, -173.4857981709538, -95.61362346444304, -11.48119203738, -21.412059263000003, -60.53244169533001, -23.37523013205199, -69.03638375930302, -99.61385192454006, -52.807533347138936, -80.83549857837407, -91.89773422413505, -12.353714790999998, -64.60595309803298, -75.06268696713516, -40.12883841688998, -69.17394513347203, -105.38287379536074, -24.187118930497206, -9.870240085699999, -86.2321992546486, -78.50021893320702, -95.31345308868805, -59.30067462077647, -54.30434382758604, -85.75786131527197, -48.20293160161323, -16.979318717855485, -81.946533414096, -72.63633395618405, -61.343378744719985, -84.49188785503395, -16.486266642343008, -41.20743549138002, -80.02296319793503, -50.603681373571995, -9.520183668], "mean_logprob": [-0.24597786137268166, -0.47031300876045, -0.24428701382103332, -0.21743164466778972, -0.17423227708152333, -0.21512874040457, -0.2795744998239733, -0.27610548266450335, -0.2661945898017571, -0.49743591950587235, -0.18917609762351809, -0.3611058909796154, -0.46764373356, -0.23333358390543, -0.57828599390318, -0.31871207821481, -0.71757450233625, -0.7383468711379311, -0.2017748056511, -0.20504587835133334, -0.23012127919767666, -0.3320461730818, -0.17602511115713, -0.2694516619279133, -0.3063257807471167, -0.6501955153157895, -0.21535317699344333, -0.25020895655711733, -0.4458759824098889, -0.23057981711157333, -0.35127624598453566, -0.080623729768324, -0.6580160057133333, -0.287440664182162, -0.2616673964440233, -0.31771151029562666, -0.19766891540258832, -0.18101447942528667, -0.6972183846770081, -0.160676438672044, -0.056597729059518334, -0.27315511138032, -0.24212111318728, -0.20447792914906668, -0.2816396261834467, -0.05495422214114333, -0.615036350617612, -0.26674321065978335, -0.16867893791190666, -1.3600262382857142]}
{"prompt": "'''\nYou are given an array a consisting of n non-negative integers.\n\nYou have to replace each 0 in a with an integer from 1 to n (different elements equal to 0 can be replaced by different integers).\n\nThe value of the array you obtain is the number of integers k from 1 to n such that the following condition holds: there exist a pair of adjacent elements equal to k (i. e. there exists some i \u2208 [1, n - 1] such that a_i = a_{i + 1} = k). If there are multiple such pairs for some integer k, this integer is counted in the value only once.\n\nYour task is to obtain the array with the maximum possible value.\n\nInput\n\nThe first line contains one integer n (2 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 min(n, 600)) \u2014 the elements of the array.\n\nOutput\n\nPrint n integers not less than 1 and not greater than n \u2014 the array with the maximum possible value you can obtain.\n\nIf there are multiple answers, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n2 0\n''') == '''\n2 1\n'''\n\nassert solution('''\n2\n2 1\n''') == '''\n2 2\n'''\n\nassert solution('''\n3\n3 3 0\n''') == '''\n3 3 2\n'''\n\nassert solution('''\n3\n0 0 0\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n6\n3 0 1 2 0 1\n''') == '''\n3 6 2 4 5 1\n'''\n\nassert solution('''\n6\n0 1 0 0 2 0\n''') == '''\n6 1 5 4 2 3\n'''\n\nassert solution('''\n7\n0 0 1 3 0 0 0\n''') == '''\n7 4 2 5 6 3 1\n'''\n\nassert solution('''\n8\n0 0 0 0 0 2 0 0\n''') == '''\n8 5 4 3 6 7 2 1\n'''\n\nassert solution('''\n9\n0 0 1 1 0 0 0 0 0\n''') == '''\n9 6 2 5 4 7 8 3 1\n'''\n\nassert solution('''\n10\n0 1 0 0 0 0 0 0 0 0\n''') == '''\n10 7 1 4", "solution(input()) == output\n\n \n# submit solution\ndef submit_solution():\n    assert solution(input()) == output\n\n\ndef main():\n    submit_solution()\n\n\nif __name__ == '__main__':\n    main()", "solution(sample_input) == sample_output", "solution('''\n4\n0 1 2 0\n''') == '''\n3 1 2 3\n'''\n\n# check performance\n##this is a little bit dirty, but the fastest way that I could find.\n##NOTE: for real performance test (with big input file), you can print the total time\n##of the \"import\" of some module, or the time of some function call in an empty loop.\n\nimport timeit\n##this is the code we want to test\ndef dummy() -> str:\n    solution('''\n4\n0 1 2 0\n''')\n##and this is the code that will be executed to test the previous one\n##(it will be executed 1000000 times)\ndef solution_time_check() -> float:\n    return timeit.timeit(dummy, number=1000)", "solution('''\n5\n1 1 1 1 1\n''') == '''\n5 4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 5 5 5 5\n''') == '''\n5 5 5 5 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n5 5 5 5 5\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4 4 4 4\n''') == '''\n4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n8\n0 0 0 0 0 0 0 0\n''') == '''\n1 2 3 4 5 6 7 8\n'''\n\n# check the correctness of solution\nassert solution('''\n8\n0 0 0 0 0 1 0 0\n''') == '''\n1 2 3 4 5 6 7 8\n'''\n\n# check the correctness of solution\nassert solution('''\n8\n0 0 0 0 0 0 0 1\n''') == '''\n1 2 3 4 5 6 7 8\n", "solution('''\n4\n0 0 1 1\n''') == '''\n1 1 2 2\n'''\n\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n1 1 1 1 1 1 1 1 1 1\n'''\n\nassert solution('''\n7\n0 1 0 1 0 0 1\n''') == '''\n1 1 1 2 2 3 3\n'''\n\nassert solution('''\n20\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n''') == '''\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1 1 1 1 1\n'''\n\nassert solution('''\n7\n0 1 0 1 0 0 1\n''') == '''\n1 1 1 2 2 3 3\n'''\n\nassert solution('''\n8\n0 0 0 0 0 0 0 0\n''') == '''\n1 1 1 1 1 1 1 1\n'''\n\nassert solution('''\n3\n0 0 0\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n2\n0 0\n''')", "solution(__doc__) == '''\nexample\n'''\n\n# submit\ndef submit():\n    print('To submit use: python3 -m %s FILE' % __package__)\n\n# run solution\nif __name__ == '__main__':\n    solution(open(__file__[:-3] + '.in', 'r').read())", "solution('''\n3\n1 0 0\n''') == '''\n1 2 2\n'''\nassert solution('''\n5\n2 3 3 4 3\n''') == '''\n1 2 2 3 3\n'''\nassert solution('''\n5\n5 3 3 4 3\n''') == '''\n1 2 2 3 3\n'''\nassert solution('''\n9\n0 0 0 1 2 2 2 3 2\n''') == '''\n1 2 3 4 4 4 4 7 5\n'''\nassert solution('''\n4\n3 3 3 3\n''') == '''\n1 1 1 1\n'''\nassert solution('''\n9\n1 1 1 0 2 2 2 3 2\n''') == '''\n1 1 1 4 2 2 2 3 2\n'''\nassert solution('''\n5\n2 3 3 2 3\n''') == '''\n1 2 2 2 3\n'''\nassert solution('''\n7\n0 0 0 0 0 0 0\n''') == '''\n1 2 3 4 5 6 7\n'''\nassert solution('''\n5\n1 1 1 1 1\n''') == '''\n1 1 1 1 1\n'''\nassert solution('''\n3\n1 0 1\n''') == '''\n1 2 1\n'''\nassert", "solution('''\n3\n0 0 0\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n3\n1 2 3\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '''\n2 2 2 2 2\n'''\n\nassert solution('''\n5\n1 1 1 2 2\n''') == '''\n1 1 1 2 2\n'''\n\nassert solution('''\n7\n2 2 3 3 3 3 3\n''') == '''\n1 1 2 2 2 2 2\n'''\n\nassert solution('''\n4\n0 1 0 0\n''') == '''\n2 2 1 1\n'''\n\nassert solution('''\n4\n1 0 1 0\n''') == '''\n1 2 1 2\n'''\n\nassert solution('''\n4\n0 0 0 0\n''') == '''\n1 1 1 1\n'''\n\nassert solution('''\n6\n1 1 0 0 1 1\n''') == '''\n2 2 1 1 2 2\n'''\n\nassert solution('''\n6\n1 0 1 0 1 0\n''') == '''\n1 2 1 2 1 2\n'''\n\nassert solution('''\n6", "solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\nassert solution(sample_input_4) == sample_output_4", "solution('''4\n4 1 2 2''') == '''4 2 2 2'''\nassert solution('''10\n1 3 0 0 1 3 3 3 3 3''') == '''10 10 1 4 5 6 7 7 7 7'''\nassert solution('''6\n1 0 1 0 0 1''') == '''6 2 6 4 4 6'''\nassert solution('''5\n2 3 3 3 3''') == '''5 5 5 5 5'''\nassert solution('''6\n3 1 1 1 1 1''') == '''6 6 1 1 1 1'''\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '''10 10 10 10 10 10 10 10 10 10'''\nassert solution('''8\n1 1 1 0 0 0 0 0''') == '''8 8 8 8 8 8 8 8'''\nassert solution('''3\n1 0 1''') == '''3 3 3'''\nassert solution('''4\n1 2 1 1''') == '''4 4 2 2'''\nassert solution('''7\n1 0 1 1 1 1 1''') == '''7 7 3 3 3 3 3'''\nassert solution('''6\n2 1 1 1 1 1''') == '''6 6 6 6 6 6''", "solution(\"INPUT\") == \"OUTPUT\"\n\n# simulate user input from stdin\ninput_str = \"\"\n\ntry:\n    # read from stdin\n    while True:\n        input_str += input() + \"\\n\"\nexcept EOFError:\n    pass\n\n# remove last \\n\ninput_str = input_str[:-1]\n\nsolution(input_str)", "solution('''\n4\n0 1 0 0\n''') == '''\n4 1 2 3\n'''\nassert solution('''\n4\n0 0 0 0\n''') == '''\n1 2 3 4\n'''\nassert solution('''\n4\n1 0 2 0\n''') == '''\n1 4 2 3\n'''\nassert solution('''\n3\n0 1 0\n''') == '''\n3 1 2\n'''\nassert solution('''\n3\n0 1 2\n''') == '''\n1 2 3\n'''\nassert solution('''\n5\n0 2 0 0 0\n''') == '''\n1 3 2 4 5\n'''\nassert solution('''\n5\n0 2 0 1 0\n''') == '''\n1 3 2 4 5\n'''\nassert solution('''\n3\n0 0 0\n''') == '''\n1 2 3\n'''\nassert solution('''\n1\n1\n''') == '''\n1\n'''\nassert solution('''\n3\n0 0 1\n''') == '''\n1 2 3\n'''\nassert solution('''\n4\n0 0 0 1\n''') == '''\n1 2 3 4\n'''\nassert solution('''\n4\n1 0 0 0\n''", "solution('''\n5\n0 1 0 2 0\n''') == '''\n1 2 1 3 1\n'''\nassert solution('''\n8\n0 0 2 0 0 0 0 1\n''') == '''\n1 1 3 1 1 1 1 2\n'''\nassert solution('''\n3\n0 1 0\n''') == '''\n1 2 1\n'''\nassert solution('''\n3\n0 0 0\n''') == '''\n1 1 1\n'''\nassert solution('''\n2\n1 0\n''') == '''\n1 2\n'''\nassert solution('''\n2\n0 0\n''') == '''\n1 1\n'''\nassert solution('''\n1\n0\n''') == '''\n1\n'''\nassert solution('''\n4\n0 0 0 0\n''') == '''\n1 1 1 1\n'''\nassert solution('''\n4\n0 0 0 1\n''') == '''\n1 1 1 2\n'''\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1 1 1 1 1\n'''\nassert solution('''\n5\n0 0 0 0 1\n''') == '''\n1 1 1 1 2\n'''\nassert solution('''\n6\n", "solution(r'''\n3\n0 1 0\n''') == r'''\n1 2 1\n'''\nassert solution(r'''\n5\n0 1 1 0 0\n''') == r'''\n1 2 3 4 5\n'''\nassert solution(r'''\n6\n3 1 1 3 1 3\n''') == r'''\n3 1 1 3 1 3\n'''\nassert solution(r'''\n4\n1 2 3 4\n''') == r'''\n1 2 3 4\n'''\nassert solution(r'''\n4\n4 3 2 1\n''') == r'''\n4 3 2 1\n'''\nassert solution(r'''\n4\n0 1 2 3\n''') == r'''\n1 2 3 4\n'''\nassert solution(r'''\n4\n0 0 0 0\n''') == r'''\n1 2 3 4\n'''\nassert solution(r'''\n4\n3 3 3 3\n''') == r'''\n3 3 3 3\n'''\nassert solution(r'''\n4\n1 2 3 4\n''') == r'''\n1 2 3 4\n'''\nassert solution(r'''\n6\n2 1 3 3 2 3\n''') == r'''\n2 1 3 3 2 3\n'''\nassert solution(", "solution(get_test_string()) == get_expected_output()", "solution(\"2\\n1 0\") == \"2 1\"\nassert solution(\"3\\n1 0 1\") == \"3 1 3\"\nassert solution(\"3\\n1 0 0\") == \"3 1 2\"\nassert solution(\"3\\n0 0 0\") == \"1 1 1\"\nassert solution(\"1\\n0\") == \"1\"\nassert solution(\"3\\n1 0 2\") == \"3 1 2\"\nassert solution(\"3\\n0 1 0\") == \"1 2 1\"\nassert solution(\"3\\n0 0 1\") == \"1 1 2\"\nassert solution(\"5\\n2 2 3 3 3\") == \"4 4 5 5 5\"\nassert solution(\"3\\n3 0 0\") == \"3 1 2\"\nassert solution(\"5\\n0 0 0 0 0\") == \"1 1 1 1 1\"\nassert solution(\"5\\n0 1 2 3 4\") == \"1 2 3 4 5\"\nassert solution(\"7\\n0 1 2 0 2 3 0\") == \"1 2 3 1 3 4 2\"\nassert solution(\"5\\n1 0 0 2 0\") == \"3 1 2 4 2\"\nassert solution(\"3\\n0 1 1\") == \"1 2 2\"\nassert solution(\"5\\n0 2 0 0 1\") == \"1 3 1 2 4\"\nassert solution(\"5\\n0", "solution('''\n3\n2 0 3\n''') == '''\n3 2 3\n'''\n\nassert solution('''\n4\n1 0 2 0\n''') == '''\n1 4 1 2\n'''\n\nassert solution('''\n3\n0 0 0\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n4\n1 2 1 2\n''') == '''\n1 2 1 2\n'''\n\nassert solution('''\n6\n2 3 3 3 2 3\n''') == '''\n3 3 3 3 3 3\n'''\n\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\n1 1 1 1 1 1\n'''\n\nassert solution('''\n6\n3 3 3 3 3 3\n''') == '''\n3 3 3 3 3 3\n'''\n\nassert solution('''\n1\n0\n''') == '''\n1\n'''\n\nassert solution('''\n5\n5 0 5 0 5\n''') == '''\n5 5 5 5 5\n'''\n\nassert solution('''\n5\n1 2 1 2 1\n''') == '''\n1 2 1 2 1\n'''\n\nassert solution('''\n3\n1 1 1\n''') ==", "solution(stdin='''\n3\n0 2 0\n''') == '''\n1 2 1\n'''\n\nassert solution(stdin='''\n6\n1 1 1 1 2 2\n''') == '''\n3 3 3 3 5 5\n'''\n\nassert solution(stdin='''\n2\n1 0\n''') == '''\n1 2\n'''", "solution(\n    '''\n5\n0 1 1 0 2\n'''\n) == '''\n5 1 2 4 3\n'''\n\n# print the result to standard output\nstdin = sys.stdin.read()\nstdout = solution(stdin)\nsys.stdout.write(stdout)", "solution(str('3\\n1 0 1')) == str('2 1 2'), 'Wrong answer'\nassert solution(str('4\\n1 0 1 1')) == str('3 1 3 3'), 'Wrong answer'\nassert solution(str('5\\n1 0 1 1 0')) == str('4 1 4 4 1'), 'Wrong answer'\nassert solution(str('6\\n1 0 1 1 0 0')) == str('5 1 5 5 1 1'), 'Wrong answer'\nassert solution(str('3\\n0 0 0')) == str('1 1 1'), 'Wrong answer'\nassert solution(str('3\\n1 1 1')) == str('2 2 2'), 'Wrong answer'\nassert solution(str('7\\n1 2 3 1 2 3 1')) == str('2 2 3 3 3 3 3'), 'Wrong answer'\nassert solution(str('3\\n1 2 1')) == str('2 1 2'), 'Wrong answer'\nassert solution(str('4\\n2 3 3 3')) == str('1 1 1 1'), 'Wrong answer'\nassert solution(str('5\\n0 1 0 1 0')) == str('2 1 2 1 2'), 'Wrong answer'\nassert solution(str('6\\n1 1 1 1 1 1'", "solution('''3\n1 2 1''') == '''1 2 1'''\nassert solution('''5\n5 5 5 5 5''') == '''5 5 5 5 5'''\nassert solution('''5\n5 5 5 1 1''') == '''5 5 5 1 1'''\nassert solution('''8\n0 0 0 0 0 0 0 0''') == '''8 8 8 8 8 8 8 8'''\nassert solution('''8\n0 0 0 0 1 1 1 1''') == '''1 1 1 1 8 8 8 8'''\nassert solution('''8\n0 0 0 0 2 2 2 2''') == '''2 2 2 2 8 8 8 8'''\nassert solution('''4\n0 0 0 0''') == '''4 4 4 4'''\nassert solution('''8\n0 0 0 1 0 0 0 0''') == '''1 1 1 8 1 1 1 1'''\nassert solution('''8\n0 0 0 0 0 1 0 0''') == '''8 8 8 8 8 1 8 8'''\nassert solution('''8\n0 0 0 1 0 0 0 0''') == '''1 1 1 8 1 1 1 1'''\nassert solution('''8\n0 0 0 0 0 1 0 0''') == '''8", "solution('''5\n0 1 0 3 3''') == '''5 4 5 1 1'''\nassert solution('''3\n2 2 3''') == '''1 1 1'''\nassert solution('''6\n3 3 0 2 0 0''') == '''5 5 1 3 1 1'''\nassert solution('''6\n5 1 0 0 2 0''') == '''6 1 1 1 2 1'''\nassert solution('''2\n2 2''') == '''1 1'''\nassert solution('''4\n2 1 2 1''') == '''1 2 1 2'''\nassert solution('''4\n1 1 1 1''') == '''1 1 1 1'''\nassert solution('''8\n3 3 3 3 3 3 3 3''') == '''1 1 1 1 1 1 1 1'''\nassert solution('''8\n4 4 4 4 4 4 4 4''') == '''8 8 8 8 8 8 8 8'''\nassert solution('''8\n0 0 0 0 0 0 0 0''') == '''8 7 6 5 4 3 2 1'''\nassert solution('''8\n0 1 0 1 0 1 0 1''') == '''8 1 7 2 6 3 5 4'''\nassert solution('''8\n1 0 1 0 1", "solution(\"4\\n0 0 2 0\") == \"1 1 2 2\"\nassert solution(\"3\\n1 0 0\") == \"1 2 2\"\nassert solution(\"4\\n0 0 0 1\") == \"1 1 1 1\"\nassert solution(\"6\\n0 0 0 3 0 0\") == \"1 1 1 2 2 2\"\nassert solution(\"3\\n0 1 0\") == \"1 1 1\"\nassert solution(\"6\\n0 1 0 3 0 0\") == \"1 1 1 2 2 2\"\nassert solution(\"9\\n0 1 0 0 0 0 0 0 0\") == \"1 1 1 1 1 1 1 1 1\"\nassert solution(\"9\\n0 1 0 0 0 0 0 0 3\") == \"1 1 1 1 1 1 1 1 2\"\nassert solution(\"6\\n3 0 0 0 0 0\") == \"1 1 1 1 1 1\"\nassert solution(\"6\\n0 0 0 0 3 0\") == \"1 1 1 1 2 2\"\nassert solution(\"4\\n0 0 0 0\") == \"1 1 1 1\"\nassert solution(\"9\\n0 1 0 0 0 0 0 0 1\") == \"1 1 1 1 1 1 1 1 1\"\nassert solution(\"7\\n0 0 0 0 0 0 0\") == \"1 1 1 1 1 1 1\"\nassert solution(\"3\\n", "solution('''\n5\n0 0 0 0 0\n''') == '''\n1 2 3 4 5\n'''\nassert solution('''\n7\n5 5 5 5 5 5 5\n''') == '''\n1 1 1 1 1 1 1\n'''\nassert solution('''\n7\n0 0 5 0 0 0 0\n''') == '''\n1 1 3 1 1 1 1\n'''\nassert solution('''\n4\n0 1 1 0\n''') == '''\n2 2 2 2\n'''\nassert solution('''\n3\n1 2 3\n''') == '''\n1 2 3\n'''\nassert solution('''\n6\n0 0 1 0 0 0\n''') == '''\n1 1 3 1 1 1\n'''\nassert solution('''\n3\n0 0 0\n''') == '''\n1 2 3\n'''\nassert solution('''\n7\n0 1 2 3 4 5 6\n''') == '''\n1 2 3 4 5 6 7\n'''\nassert solution('''\n7\n2 2 2 2 2 2 2\n''') == '''\n1 1 1 1 1 1 1\n'''\nassert solution('''\n6\n0 5 0 5 0 5\n''') == '''\n1 3 1 3 1 3\n'''\nassert", "solution(stdin) == stdout\n```\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)", "solution(open('testcases/mock.in').read()) == open('testcases/mock.out').read()", "solution(\"1\\n1\") == \"1\"\nassert solution(\"3\\n0 2 0\") == \"1 2 1\"\nassert solution(\"3\\n2 2 2\") == \"3 3 3\"\nassert solution(\"6\\n0 1 0 2 0 3\") == \"1 2 1 3 1 4\"\nassert solution(\"5\\n1 0 1 1 0\") == \"1 2 1 3 2 4\"\nassert solution(\"5\\n0 1 0 2 0\") == \"1 2 1 3 1 4\"\nassert solution(\"5\\n1 0 1 1 1\") == \"1 2 1 3 1 4\"\nassert solution(\"6\\n1 1 0 1 0 1\") == \"1 2 1 3 1 4\"\nassert solution(\"6\\n0 0 0 1 0 0\") == \"1 2 1 3 1 4\"\nassert solution(\"6\\n1 0 1 1 0 1\") == \"1 2 1 3 1 4\"\nassert solution(\"6\\n1 0 1 1 1 1\") == \"1 2 1 3 1 4\"\nassert solution(\"6\\n0 1 0 2 0 3\") == \"1 2 1 3 1 4\"\nassert solution(\"6\\n0 0 0 2 0 0\") == \"1 2 1 3 1 4\"\nassert solution(\"6\\n0 1 0 2 0 2\") == \"1 2 1 3 1 4\"\nassert solution(\"6", "solution('''\n4\n0 1 2 3\n''') == '''\n4 3 2 1\n'''\n\nassert solution('''\n4\n1 1 2 3\n''') == '''\n3 3 2 1\n'''\n\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n5 4 3 2 1\n'''\n\nassert solution('''\n5\n5 4 3 2 1\n''') == '''\n5 4 3 2 1\n'''\n\nassert solution('''\n5\n1 2 3 3 3\n''') == '''\n5 4 3 3 3\n'''\n\nassert solution('''\n5\n1 1 1 1 1\n''') == '''\n5 5 5 5 5\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n5 5 5 5 5\n'''\n\nassert solution('''\n5\n1 1 0 0 0\n''') == '''\n5 5 4 4 4\n'''\n\nassert solution('''\n5\n1 1 0 2 0\n''') == '''\n5 5 4 2 2\n'''\n\nassert solution('''\n5\n0 0 0 1 0\n''') == '''\n5 5 5 1 1\n'''\n\nassert solution('''", "\"\"\"5\n3 2 1 1 1\"\"\" == solution(\"\"\"5\n0 0 0 0 0\"\"\")\nassert \"\"\"5\n1 2 3 4 5\"\"\" == solution(\"\"\"5\n1 2 3 4 5\"\"\")\nassert \"\"\"5\n1 1 1 1 1\"\"\" == solution(\"\"\"5\n2 3 3 3 4\"\"\")\nassert \"\"\"5\n1 1 1 1 1\"\"\" == solution(\"\"\"5\n1 0 1 0 1\"\"\")\nassert \"\"\"6\n2 3 1 1 1 3\"\"\" == solution(\"\"\"6\n0 0 0 0 0 0\"\"\")\nassert \"\"\"6\n1 2 2 3 3 4\"\"\" == solution(\"\"\"6\n1 2 3 4 5 6\"\"\")\nassert \"\"\"6\n1 1 1 1 2 2\"\"\" == solution(\"\"\"6\n1 2 2 2 3 3\"\"\")\nassert \"\"\"6\n2 2 2 2 1 1\"\"\" == solution(\"\"\"6\n3 3 3 3 0 0\"\"\")\nassert \"\"\"6\n2 2 2 2 3 3\"\"\" == solution(\"\"\"6\n2 0 2 0 3 0\"\"\")\nassert \"\"\"6\n1 1 1 1 1 1\"\"\" == solution(\"\"\"6\n1 1 1 1 0 0\"\"\")\nassert \"\"\"6\n2 2 2 2 2 2\"\"\" == solution(\"\"\"6\n2 0 2 0 2 0\"\"\")\nassert \"\"\"5\n5 5 5 5 5\"\"\" == solution(\"\"\"5\n600 600 600 600 600\"\"\")", "solution(\"\"\"\n3\n0 0 0\n\"\"\") == \"\"\"\n1 2 3\n\"\"\"\nassert solution(\"\"\"\n7\n0 0 2 1 0 3 2\n\"\"\") == \"\"\"\n1 2 2 1 4 3 2\n\"\"\"\nassert solution(\"\"\"\n8\n0 2 0 0 1 2 3 3\n\"\"\") == \"\"\"\n1 2 1 2 1 2 3 3\n\"\"\"\nassert solution(\"\"\"\n2\n2 2\n\"\"\") == \"\"\"\n2 2\n\"\"\"\nassert solution(\"\"\"\n3\n3 2 3\n\"\"\") == \"\"\"\n3 2 3\n\"\"\"\nassert solution(\"\"\"\n4\n1 0 1 2\n\"\"\") == \"\"\"\n2 1 2 3\n\"\"\"\nassert solution(\"\"\"\n4\n1 1 1 2\n\"\"\") == \"\"\"\n1 1 1 2\n\"\"\"\nassert solution(\"\"\"\n4\n1 2 1 1\n\"\"\") == \"\"\"\n1 2 1 1\n\"\"\"\nassert solution(\"\"\"\n4\n2 1 1 2\n\"\"\") == \"\"\"\n2 1 1 2\n\"\"\"\nassert solution(\"\"\"\n4\n1 1 0 1\n\"\"\") == \"\"\"\n2 2 1 2\n\"\"\"\nassert solution(\"\"\"\n4\n1 1 1 0\n\"\"\") == \"\"\"\n1 1 1 2\n\"\"\"\nassert solution(\"\"\"\n4\n1 1 0 0\n\"\"\") == \"\"\"\n2 2 1 1\n\"\"\"\nassert solution(\"\"\"\n4\n", "solution(example1) == example1Solution\nassert solution(example2) == example2Solution\nassert solution(example3) == example3Solution\nassert solution(example4) == example4Solution\nassert solution(example5) == example5Solution\n\n# accept input from stdin\ninput()\nsolution(input())", "solution(\"\"\"\n3\n1 0 1\n\"\"\") == \"\"\"\n1 2 1\n\"\"\"\n\nassert solution(\"\"\"\n7\n0 1 2 2 3 3 3\n\"\"\") == \"\"\"\n1 2 3 4 5 6 7\n\"\"\"\n\nassert solution(\"\"\"\n5\n5 5 5 5 5\n\"\"\") == \"\"\"\n5 5 5 5 5\n\"\"\"\n\nassert solution(\"\"\"\n4\n4 0 4 0\n\"\"\") == \"\"\"\n4 1 4 2\n\"\"\"\n\nassert solution(\"\"\"\n6\n0 0 1 2 2 3\n\"\"\") == \"\"\"\n1 1 2 3 4 5\n\"\"\"\n\nassert solution(\"\"\"\n3\n1 0 1\n\"\"\") == \"\"\"\n1 2 1\n\"\"\"\n\nassert solution(\"\"\"\n3\n2 0 2\n\"\"\") == \"\"\"\n2 1 2\n\"\"\"\n\nassert solution(\"\"\"\n4\n1 2 0 2\n\"\"\") == \"\"\"\n1 2 3 4\n\"\"\"\n\nassert solution(\"\"\"\n4\n0 1 0 2\n\"\"\") == \"\"\"\n1 2 3 4\n\"\"\"\n\nassert solution(\"\"\"\n4\n0 1 2 3\n\"\"\") == \"\"\"\n1 2 3 4\n\"\"\"\n\nassert solution(\"\"\"\n3\n0 0 1\n\"\"\") == \"\"\"\n1 2 3\n\"\"\"\n\nassert solution(\"\"\"\n3\n0 1 0\n\"\"\") == \"\"\"\n1 2 3\n\"\"\"\n", "solution('''\n7\n3 0 0 1 0 0 2\n''') == '''\n3 1 1 1 2 2 2\n'''\nassert solution('''\n7\n3 1 0 1 0 0 2\n''') == '''\n3 1 1 1 2 2 2\n'''\nassert solution('''\n2\n0 1\n''') == '''\n1 1\n'''\nassert solution('''\n2\n1 0\n''') == '''\n1 1\n'''\nassert solution('''\n3\n0 0 1\n''') == '''\n1 1 1\n'''\nassert solution('''\n3\n1 0 0\n''') == '''\n1 1 1\n'''\nassert solution('''\n3\n0 1 0\n''') == '''\n1 1 1\n'''\nassert solution('''\n3\n0 0 0\n''') == '''\n1 1 1\n'''\nassert solution('''\n1\n0\n''') == '''\n1\n'''\nassert solution('''\n3\n1 1 1\n''') == '''\n1 1 1\n'''\nassert solution('''\n4\n2 0 2 2\n''') == '''\n2 1 2 2\n'''\nassert solution('''\n4\n2 0 1 2\n''') ==", "solution('''4\n4 1 2 3''') == '''4 1 2 3'''\nassert solution('''5\n5 1 5 2 3''') == '''5 2 1 3 4'''\nassert solution('''3\n0 0 0''') == '''3 1 2'''\nassert solution('''5\n5 1 5 2 5''') == '''5 2 1 3 4'''\nassert solution('''5\n2 3 2 4 1''') == '''2 3 1 4 5'''\nassert solution('''5\n2 3 2 1 4''') == '''2 3 1 4 5'''\nassert solution('''6\n0 0 0 0 0 0''') == '''6 1 2 3 4 5'''\nassert solution('''6\n0 0 0 0 0 1''') == '''6 1 2 3 4 5'''\nassert solution('''6\n0 0 0 0 1 0''') == '''6 1 2 3 4 5'''\nassert solution('''6\n0 0 0 1 0 0''') == '''6 1 2 3 4 5'''\nassert solution('''6\n0 0 1 0 0 0''') == '''6 1 2 3 4 5'''\nassert solution('''6\n0 1 0 0 0 0''') == '''6 1 2 3", "solution(SAMPLE1) == \"NO\"\nassert solution(SAMPLE2) == \"YES\"", "solution(\"\"\"\n2\n0 1\n\"\"\") == \"\"\"\n1 2\n\"\"\"\n\nassert solution(\"\"\"\n4\n2 2 3 0\n\"\"\") == \"\"\"\n2 2 3 4\n\"\"\"\n\nassert solution(\"\"\"\n3\n0 0 0\n\"\"\") == \"\"\"\n1 2 3\n\"\"\"\n\nassert solution(\"\"\"\n5\n0 2 0 1 2\n\"\"\") == \"\"\"\n2 3 1 5 4\n\"\"\"\n\nassert solution(\"\"\"\n8\n0 0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n1 2 3 4 5 6 7 8\n\"\"\"\n\nassert solution(\"\"\"\n7\n0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n1 2 3 4 5 6 7\n\"\"\"\n\nassert solution(\"\"\"\n8\n1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n1 1 1 1 1 1 1 1\n\"\"\"\n\nassert solution(\"\"\"\n7\n1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n1 1 1 1 1 1 1\n\"\"\"\n\nassert solution(\"\"\"\n8\n2 2 2 2 2 2 2 2\n\"\"\") == \"\"\"\n2 2 2 2 2 2 2 2\n\"\"\"\n\nassert solution(\"\"\"\n7\n2 2 2 2 2 2 2\n\"\"\") == \"\"\"\n2 2 2 2 2 2 2\n\"\"\"\n\nassert solution(\"\"\"\n8\n3 3 3 3 3 3", "solution('''\n3\n0 0 0\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n3\n0 0 1\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n4\n1 1 1 0\n''') == '''\n4 4 4 1\n'''\n\nassert solution('''\n6\n1 1 1 0 0 0\n''') == '''\n4 4 4 1 1 1\n'''\n\nassert solution('''\n6\n0 0 0 0 0 0\n''') == '''\n1 1 1 1 1 1\n'''\n\nassert solution('''\n10\n0 0 0 1 1 1 0 0 0 0\n''') == '''\n3 3 3 4 4 4 1 1 1 1\n'''\n\nassert solution('''\n14\n1 0 0 1 1 1 0 0 0 0 0 0 0 0\n''') == '''\n2 3 3 4 4 4 1 1 1 1 1 1 1 1\n'''\n\nassert solution('''\n13\n0 0 0 0 0 0 0 0 0 0 0 0 0\n''') == '''\n1 1 1 1 1 1 1 1 1 1 1 1 1\n'''\n\nassert solution('''\n5\n1 1 1 0 0\n''') == '''\n4 4 4", "solution('''\n3\n1 0 1\n''') == '''\n2 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n2 2 0 0\n''') == '''\n2 2 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 0 0 3 3\n''') == '''\n1 1 1 3 3\n'''\n\nassert solution('''\n8\n0 2 3 0 0 2 0 4\n''') == '''\n1 2 3 1 1 2 1 4\n'''", "solution('''\n3\n3 3 0\n''') == '''\n3 3 1\n'''\nassert solution('''\n6\n3 3 0 4 4 0\n''') == '''\n3 3 1 5 5 1\n'''\nassert solution('''\n4\n0 1 1 1\n''') == '''\n2 2 3 4\n'''\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\n1 1 1 1 1 1\n'''\nassert solution('''\n4\n4 3 3 4\n''') == '''\n4 4 4 4\n'''\nassert solution('''\n5\n2 2 2 0 2\n''') == '''\n1 1 1 3 1\n'''\nassert solution('''\n6\n0 2 0 1 0 2\n''') == '''\n3 3 1 1 2 2\n'''\nassert solution('''\n10\n0 2 0 1 0 2 0 0 1 0\n''') == '''\n3 3 1 1 2 2 1 1 2 1\n'''\nassert solution('''\n5\n0 0 2 0 0\n''') == '''\n1 1 2 1 1\n'''\nassert solution('''\n11\n0 0 2 0 0 2 0 0 1 0 0\n''') == '''\n1 1 2 1 1 2", "solution(\"4\\n0 0 2 0\") == \"1 1 2 1\"\nassert solution(\"6\\n0 3 1 3 3 1\") == \"3 1 2 1 2 3\"\nassert solution(\"5\\n3 1 0 0 2\") == \"1 2 5 4 3\"\nassert solution(\"6\\n1 0 0 2 3 3\") == \"2 1 3 4 5 6\"\nassert solution(\"5\\n0 1 0 0 2\") == \"1 3 2 4 5\"\nassert solution(\"6\\n0 1 0 2 0 2\") == \"1 2 3 4 5 6\"\nassert solution(\"4\\n0 0 0 0\") == \"1 2 3 4\"\nassert solution(\"8\\n5 3 3 3 3 3 0 5\") == \"3 1 2 4 6 7 5 8\"\nassert solution(\"5\\n0 0 2 0 0\") == \"1 1 3 1 1\"\nassert solution(\"3\\n0 1 1\") == \"1 2 2\"\nassert solution(\"6\\n0 0 0 1 0 0\") == \"1 1 1 2 1 1\"\nassert solution(\"5\\n0 0 1 0 0\") == \"1 1 2 1 1\"\nassert solution(\"6\\n0 0 0 2 0 0\") == \"1 1 1 3 1 1\"\nassert solution(\"5\\n0 0 0 0 0\") == \"1 2 3 4 5\"", "solution('''\n4\n0 1 1 0\n''') == '''\n4 2 2 4\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 2 0 1 1\n''') == '''\n5 3 3 5 5\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n0 0 1 0 0 1\n''') == '''\n6 1 1 4 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n9\n0 0 0 1 0 0 0 0 0\n''') == '''\n9 3 3 3 6 3 3 3 3\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n0 0 0 0 0 0 0 0 0 0\n''') == '''\n10 1 1 1 1 1 1 1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n0 0\n''') == '''\n2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n0 0 0\n''') == '''\n3 1 1\n'''\n\n# check the correctness of solution\nassert solution('''", "solution('''2\n2 1''') == '''2 1'''\nassert solution('''3\n0 1 1''') == '''1 1 1'''\nassert solution('''5\n0 1 2 3 4''') == '''1 1 2 3 4'''\nassert solution('''1\n0''') == '''1'''\nassert solution('''3\n1 0 0''') == '''1 1 1'''\nassert solution('''2\n0 0''') == '''1 1'''\nassert solution('''3\n1 1 1''') == '''1 1 1'''\nassert solution('''2\n2 2''') == '''2 2'''\nassert solution('''2\n1 0''') == '''1 1'''\nassert solution('''5\n0 1 0 0 1''') == '''1 1 1 1 1'''\nassert solution('''4\n1 1 0 0''') == '''1 1 1 1'''\nassert solution('''5\n0 0 0 0 0''') == '''1 1 1 1 1'''\nassert solution('''3\n0 0 0''') == '''1 1 1'''\nassert solution('''4\n0 0 0 0''') == '''1 1 1 1'''\nassert solution(", "solution(\"3\\n3 3 3\") == \"3 3 3\", \"Example 1\"\nassert solution(\"5\\n1 2 0 0 1\") == \"1 2 1 1 1\", \"Example 2\"\nassert solution(\"9\\n0 0 1 0 0 0 0 0 0\") == \"1 1 1 1 1 1 1 1 1\", \"Example 3\"\nassert solution(\"8\\n0 0 0 0 0 0 0 0\") == \"1 1 1 1 1 1 1 1\", \"Example 4\"\nassert solution(\"9\\n5 0 0 0 0 0 0 0 0\") == \"5 5 5 5 5 5 5 5 5\", \"Example 5\"\nassert solution(\"9\\n0 0 0 0 0 0 0 0 7\") == \"7 7 7 7 7 7 7 7 7\", \"Example 6\"\nassert solution(\"9\\n1 0 0 0 0 0 0 0 0\") == \"1 1 1 1 1 1 1 1 1\", \"Example 7\"\nassert solution(\"9\\n9 0 0 0 0 0 0 0 0\") == \"9 9 9 9 9 9 9 9 9\", \"Example 8\"\nassert solution(\"9\\n0 0 0 0 0 0 0 0 9\") == \"9 9 9 9 9 9 9 9 9\", \"Example 9\"\nassert solution(\"9\\n0 1 0 0 0 0 0 0 0\") == \"1 1 1 1 1 1 1 1", "int(solution('''4\n0 0 0 0''')) == 4\nassert int(solution('''4\n2 3 3 3''')) == 6\nassert int(solution('''3\n1 1 1''')) == 0\nassert int(solution('''6\n2 3 3 3 4 4''')) == 8\nassert int(solution('''4\n4 4 1 4''')) == 4\nassert int(solution('''4\n4 4 4 4''')) == 4\nassert int(solution('''4\n1 1 1 1''')) == 0\nassert int(solution('''4\n0 1 2 3''')) == 0\nassert int(solution('''4\n3 2 1 0''')) == 0\nassert int(solution('''3\n3 3 3''')) == 0\nassert int(solution('''3\n1 1 1''')) == 0\nassert int(solution('''2\n0 1''')) == 1\nassert int(solution('''1\n0''')) == 1\nassert int(solution('''1\n1''')) == 0\nassert int(solution('''5\n1 2 3 4 5''')) == 0\nassert int(solution('''6", "solution('''6\n2 4 1 0 5 3''') == '''2 2 1 1 2 2'''\nassert solution('''8\n0 5 4 0 0 1 0 5''') == '''1 6 5 1 2 1 3 6'''\nassert solution('''2\n0 0''') == '''1 1'''\nassert solution('''5\n5 0 0 0 0''') == '''5 1 1 1 1'''\nassert solution('''9\n0 0 0 0 0 0 0 0 0''') == '''1 1 1 1 1 1 1 1 1'''\nassert solution('''10\n0 0 0 0 0 0 0 0 0 0''') == '''1 1 1 1 1 1 1 1 1 1'''\nassert solution('''10\n5 5 5 5 5 5 5 5 5 5''') == '''5 5 5 5 5 5 5 5 5 5'''\nassert solution('''10\n3 3 3 3 3 3 3 3 3 3''') == '''3 3 3 3 3 3 3 3 3 3'''\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '''1 1 1 1 1 1 1 1 1 1'''\nassert solution('''10\n2 3 4 5 6 7 8 9 1 0''') == '''2 3 4 5", "solution('''\n4\n0 0 0 0\n''') == '''\n1 2 3 4\n'''\n\nassert solution('''\n2\n0 5\n''') == '''\n1 2\n'''\n\nassert solution('''\n2\n5 5\n''') == '''\n1 1\n'''\n\nassert solution('''\n3\n0 1 1\n''') == '''\n1 2 2\n'''\n\nassert solution('''\n4\n0 3 3 2\n''') == '''\n1 2 3 4\n'''\n\nassert solution('''\n4\n0 0 0 0\n''') == '''\n1 2 3 4\n'''\n\nassert solution('''\n10\n1 1 0 5 5 0 0 0 0 4\n''') == '''\n2 3 4 6 7 8 9 10 10 10\n'''\n\nassert solution('''\n1\n0\n''') == '''\n1\n'''\n\nassert solution('''\n3\n0 0 0\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n2\n0 0\n''') == '''\n1 2\n'''\n\nassert solution('''\n1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n2\n1", "solution('''\n2\n2 2\n''') == '''\n1 1\n'''\n\nassert solution('''\n5\n0 0 0 0 0\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n5\n0 1 2 3 4\n''') == '''\n1 1 2 3 4\n'''\n\nassert solution('''\n1\n0\n''') == '''\n1\n'''\n\nassert solution('''\n2\n0 0\n''') == '''\n1 1\n'''\n\nassert solution('''\n3\n0 0 0\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n4\n0 0 0 0\n''') == '''\n1 2 3 4\n'''\n\nassert solution('''\n3\n3 3 3\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n2\n2 3\n''') == '''\n1 2\n'''\n\nassert solution('''\n4\n1 1 1 1\n''') == '''\n1 1 1 1\n'''\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '''\n1 1 1 1 1\n'''\n\nassert solution('''\n5\n3", "solution(\"\"\"\n3\n1 0 0\n\"\"\") == \"\"\"\n1 2 2\n\"\"\"\nassert solution(\"\"\"\n6\n4 4 4 4 4 5\n\"\"\") == \"\"\"\n4 5 6 7 8 5\n\"\"\"\nassert solution(\"\"\"\n4\n0 1 0 1\n\"\"\") == \"\"\"\n2 3 1 3\n\"\"\"\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"\"\"\n1 2 3 4 5 6 7 8 9 10\n\"\"\"\nassert solution(\"\"\"\n5\n5 5 5 5 5\n\"\"\") == \"\"\"\n1 2 3 4 5\n\"\"\"\nassert solution(\"\"\"\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n1 2 3 4 5\n\"\"\"\nassert solution(\"\"\"\n5\n0 1 0 1 0\n\"\"\") == \"\"\"\n2 3 1 3 2\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n1 2 3 4 5\n\"\"\"\nassert solution(\"\"\"\n5\n5 4 4 4 5\n\"\"\") == \"\"\"\n1 2 3 4 5\n\"\"\"\nassert solution(\"\"\"\n5\n0 1 1 0 0\n\"\"\") == \"\"\"\n2 3 3 1 1\n\"\"\"\nassert solution(\"\"\"\n5\n0 0 0 0 0\n\"\"\") == \"\"\"\n1 2 3 4 5\n\"\"\"\nassert solution(\"\"\"\n5\n1 1", "solution('''\n2\n1 1\n''') == '''\n1 1\n'''\n\nassert solution('''\n2\n1 0\n''') == '''\n1 2\n'''\n\nassert solution('''\n2\n0 0\n''') == '''\n1 1\n'''\n\nassert solution('''\n3\n1 1 1\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n3\n0 1 0\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n3\n0 0 1\n''') == '''\n1 1 2\n'''\n\nassert solution('''\n4\n1 0 0 1\n''') == '''\n1 2 3 1\n'''\n\nassert solution('''\n5\n0 0 1 0 0\n''') == '''\n1 1 2 1 1\n'''\n\nassert solution('''\n5\n0 0 1 0 1\n''') == '''\n1 1 2 1 2\n'''\n\nassert solution('''\n5\n0 0 1 1 0\n''') == '''\n1 1 2 2 1\n'''\n\nassert solution('''\n5\n0 0 1 1 1\n''') == '''\n1 1 2 2 2\n'''\n\nassert solution("], "finish_reason": ["length", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "length", "length", "stop", "stop", "length", "length", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length"], "sum_logprob": [-119.09343830785053, -38.527394711289986, -7.0264648838, -263.17634289731024, -63.98743734319901, -68.06214404080404, -63.28731983565999, -117.44125640329597, -76.78660144919398, -11.477619568982, -154.78338721175254, -48.162816477990006, -80.5071921693945, -63.201009266648214, -83.29168858353492, -17.56607619853, -116.70785187093601, -91.40653768950052, -36.62009660204999, -44.391538409969996, -103.42759986988999, -85.69120106184297, -120.60401358788603, -107.14893018495793, -89.11404398732518, -15.180895733473399, -23.185195119600007, -97.37753186981098, -75.34746517515993, -126.11348522328288, -114.35821180523907, -33.94502623604999, -97.99041983965994, -80.83984857250123, -90.03536503686891, -19.019139530279997, -72.13512500222105, -83.17280637541396, -55.47191534848999, -133.63555482167752, -158.10843260924844, -68.77947952770886, -81.08699767324903, -85.2465316430409, -110.67501134314202, -101.95829764778705, -95.81704990977897, -69.28069404671601, -105.93703498300702, -52.59642706660702], "mean_logprob": [-0.396978127692835, -0.6759192054612281, -0.638769534890909, -1.430306211398424, -0.21329145781066333, -0.22687381346934665, -0.7717965833617073, -0.39147085467765336, -0.25595533816398, -0.18218443760288888, -0.5159446240391753, -0.5235088747607609, -0.268357307231315, -0.21067003088882733, -0.27763896194511667, -1.097879762408125, -0.38902617290312, -0.304688458965002, -0.4114617595735955, -0.6165491445829167, -0.3447586662329667, -0.28563733687281, -0.40201337862628667, -0.3571631006165267, -0.297046813291084, -0.43373987809924, -0.8280426828428572, -0.32459177289937, -0.25115821725053333, -0.42037828407761, -0.38119403935079665, -0.47809896107112676, -0.3266347327988667, -0.26946616190833766, -0.30011788345623003, -0.8269191100121739, -0.24045041667407, -0.2772426879180467, -0.42024178294310605, -0.445451849405592, -0.527028108697495, -0.22926493175902934, -0.27028999224416334, -0.28415510547680334, -0.36891670447714, -0.33986099215929, -0.31939016636593, -0.23093564682238668, -0.35312344994335665, -0.17532142355535665]}
{"prompt": "'''\nThere are n candles on a Hanukkah menorah, and some of its candles are initially lit. We can describe which candles are lit with a binary string s, where the i-th candle is lit if and only if s_i=1.\n\n<image>\n\nInitially, the candle lights are described by a string a. In an operation, you select a candle that is currently lit. By doing so, the candle you selected will remain lit, and every other candle will change (if it was lit, it will become unlit and if it was unlit, it will become lit).\n\nYou would like to make the candles look the same as string b. Your task is to determine if it is possible, and if it is, find the minimum number of operations required.\n\nInput\n\nThe first line contains an integer t (1\u2264 t\u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains a single integer n (1\u2264 n\u2264 10^5) \u2014 the number of candles.\n\nThe second line contains a string a of length n consisting of symbols 0 and 1 \u2014 the initial pattern of lights.\n\nThe third line contains a string b of length n consisting of symbols 0 and 1 \u2014 the desired pattern of lights.\n\nIt is guaranteed that the sum of n does not exceed 10^5.\n\nOutput\n\nFor each test case, output the minimum number of operations required to transform a to b, or -1 if it's impossible.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n3\n001\n111\n3\n010\n111\n''') == '''\n2\n-1\n'''", "solution('''\n1\n4\n1010\n0000\n''') == '''\n2\n'''\n\nassert solution('''\n1\n4\n0000\n1010\n''') == '''\n2\n'''\n\nassert solution('''\n1\n5\n00100\n01000\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n5\n00100\n00010\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n5\n00100\n11111\n''') == '''\n1\n'''\n\nassert solution('''\n1\n5\n11111\n00100\n''') == '''\n2\n'''\n\nassert solution('''\n1\n5\n00100\n00100\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n00000\n00000\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n11111\n11111\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n01010\n10101\n''') == '''\n2\n'''\n\nassert solution('''\n1\n5\n11111\n11110\n''') == '''\n1", "solution('''\n3\n3\n010\n110\n3\n101\n010\n3\n011\n100\n''') == '''\n2\n3\n-1\n'''\n\n# <<<---\n# using python to solve this problem will get TLE\n# the solution is base on the disctinction of 1 and 0\n# the hamming distance between a and b is the number of operation needed\n# for example: a = 010, b = 110, and the hamming distance is 2\n# if the distance is 2, we need 2 operation to flip 101 to 110\n# if the distance is 3, we need 3 operation to flip 011 to 110\n# but if the distance is 4, we need 4 operation to flip 001 to 110\n# so the distance must be even, otherwise there is no way\n# to transform a to b\n# --->>>", "solution(\"\"\"\n1\n3\n010\n100\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n2\n3\n010\n100\n3\n010\n010\n\"\"\") == \"\"\"\n3\n0\n\"\"\"\n\nassert solution(\"\"\"\n2\n3\n010\n001\n3\n001\n100\n\"\"\") == \"\"\"\n-1\n-1\n\"\"\"", "solution('''\n3\n3\n101\n111\n3\n001\n111\n6\n111000\n111111\n''') == '''\n2\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n7\n0111000\n0100010\n6\n010010\n110110\n1\n1\n0\n1\n1\n0\n2\n10\n10\n5\n11010\n01101\n5\n10111\n01011\n''') == '''\n3\n-1\n-1\n-1\n3\n3\n'''", "solution(\"\"\"1\n4\n0110\n1001\"\"\") == \"\"\"2\"\"\", \"Example 1\"\nassert solution(\"\"\"1\n1\n0\n1\"\"\") == \"\"\"-1\"\"\", \"Example 2\"\nassert solution(\"\"\"1\n3\n111\n101\"\"\") == \"\"\"2\"\"\", \"Example 3\"\nassert solution(\"\"\"1\n1\n1\n0\"\"\") == \"\"\"1\"\"\", \"Example 4\"\nassert solution(\"\"\"1\n2\n10\n01\"\"\") == \"\"\"1\"\"\", \"Example 5\"\nassert solution(\"\"\"1\n3\n101\n110\"\"\") == \"\"\"2\"\"\", \"Example 6\"\nassert solution(\"\"\"1\n3\n111\n010\"\"\") == \"\"\"-1\"\"\", \"Example 7\"\nassert solution(\"\"\"1\n2\n10\n10\"\"\") == \"\"\"0\"\"\", \"Example 8\"\nassert solution(\"\"\"1\n5\n11111\n01111\"\"\") == \"\"\"4\"\"\", \"Example 9\"\nassert solution(\"\"\"1\n6\n111111\n111111\"\"\") == \"\"\"0\"\"\", \"Example 10\"\nassert solution(\"\"\"1\n8\n01110000\n01010000\"\"\") == \"\"\"3\"\"\", \"Example 11\"\nassert solution(\"\"\"1\n10\n1010101010\n0101010101\"\"\") == \"\"\"5\"\"\", \"Example 12\"\nassert solution(\"\"\"1\n5", "solution(\"\"\"\n2\n5\n10101\n10100\n5\n10101\n10111\n\"\"\") == \"\"\"\n2\n-1\n\"\"\"", "solution('''\n3\n3\n101\n000\n3\n001\n100\n3\n001\n010\n''') == '''\n1\n-1\n1\n'''", "solution(\"\"\"\n1\n5\n11111\n01011\n\"\"\") == \"\"\"\n2\n\"\"\"", "solution('''2\n2\n00\n11\n2\n01\n10''') == '''0\n-1'''", "solution(r'''\n1\n5\n10101\n11111\n''') == r'''\n2\n'''\n\nassert solution(r'''\n1\n5\n10101\n11011\n''') == r'''\n1\n'''\n\nassert solution(r'''\n1\n1\n1\n0\n''') == r'''\n-1\n'''\n\nassert solution(r'''\n1\n5\n11111\n11111\n''') == r'''\n0\n'''\n\nassert solution(r'''\n1\n5\n10101\n01010\n''') == r'''\n-1\n'''\n\n# stress testing\nimport random\nimport string\n\nn = 10**5\nseed = b'101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101", "solution('''\n1\n5\n00010\n11011\n''') == '5', 'test 1'\n\nassert solution('''\n1\n5\n10100\n11011\n''') == '-1', 'test 2'\n\nassert solution('''\n1\n5\n11011\n11011\n''') == '0', 'test 3'\n\nassert solution('''\n1\n5\n11011\n11011\n''') == '0', 'test 4'\n\nassert solution('''\n1\n5\n11011\n11110\n''') == '3', 'test 5'\n\nassert solution('''\n1\n5\n11011\n11010\n''') == '2', 'test 6'\n\nassert solution('''\n1\n5\n10001\n10001\n''') == '0', 'test 7'\n\nassert solution('''\n1\n5\n10001\n10011\n''') == '-1', 'test 8'\n\nassert solution('''\n1\n5\n10001\n11011\n''') == '-1', 'test 9'\n\nassert solution('''\n1\n5\n10001\n01001\n''') == '4', 'test 10'\n\nassert solution('''\n1\n5\n10001\n01101\n''')", "solution(read_from_file(\"/tmp/input.txt\")) == read_from_file(\"/tmp/output.txt\")", "solution(\"\"\"\n2\n6\n100100\n110100\n6\n100100\n100100\n\"\"\") == \"\"\"\n1\n0\n\"\"\"", "solution(\"\") == '''\n2\n5\n01100\n00100\n5\n10011\n11100\n'''\n\n# run solution\nsolution(\"\"\"\n4\n4\n1010\n0101\n3\n101\n010\n3\n110\n101\n3\n101\n110\n\"\"\")\n\n# test solution\ntests = {\n    \"test-1\": [\n        {\"input\": \"5 01100 00100\", \"output\": \"1\"},\n        {\"input\": \"5 10011 11100\", \"output\": \"-1\"},\n    ],\n    \"test-2\": [\n        {\"input\": \"\", \"output\": \"\"},\n    ],\n}\nfor _, test in tests.items():\n    for t in test:\n        inp = t[\"input\"]\n        result = solution(inp)\n        assert str(result) == str(t[\"output\"]), \"expected {}, got {}\".format(t[\"output\"], result)\n\nprint(\"passed tests\")", "solution('''\\\n3\n5\n10101\n01101\n5\n11111\n01111\n2\n11\n10\n''') == '''\\\n1\n3\n-1\n'''\n\n# get stdin lines\nlines = []\nfor line in stdin:\n    lines.append(line.rstrip('\\n'))\n\n# remove first line, which is the number of test cases\ntestcases = int(lines.pop(0))\n\n# define output array\noutput = []\n\n# loop through test cases\nfor i in range(testcases):\n    # get number of candles\n    candles = int(lines.pop(0))\n\n    # get initial state of candles\n    initial = lines.pop(0)\n\n    # get desired state of candles\n    desired = lines.pop(0)\n\n    ########################\n    # your solution here\n    count = 0\n    for idx, val in enumerate(initial):\n        if desired[idx] != val:\n            count += 1\n    output.append(count)\n    # end of your solution\n    ########################\n\n# print the output\nfor line in output:\n    print(line)", "solution('''\n1\n4\n0100\n1001\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n110\n001\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n101\n000\n''') == '-1'\n\n# check the correctness of solution\nassert solution('''\n1\n2\n10\n11\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n0\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n0\n1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n0\n0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n0\n0\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n0\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n1\n", "solution('''\n4\n4\n1010\n1001\n4\n1010\n0101\n4\n1010\n0110\n4\n1010\n1010\n''') == '''\n2\n2\n-1\n0\n'''", "solution(\"\"\"\n2\n5\n01110\n01010\n5\n01010\n01010\n\"\"\") == '''\n2\n0\n'''", "solution(example) == result", "solution(test_case1) == '''\n\n'''", "solution(\"\") == \"\"", "solution('''\n3\n2\n01\n10\n3\n111\n111\n5\n10101\n10101\n''') == '''\n2\n0\n0\n'''\n# noinspection SpellCheckingInspection\nassert solution('''\n4\n4\n1110\n1111\n4\n1010\n1011\n4\n1010\n1001\n4\n1110\n0110\n''') == '''\n1\n-1\n1\n-1\n'''", "solution('''\n5\n5\n01001\n11000\n5\n01001\n11001\n5\n01110\n11000\n5\n01001\n11111\n2\n00\n00\n''') == '''\n2\n-1\n1\n-1\n0\n'''", "solution('''1\n6\n000110\n001100''') == '''3'''\nassert solution('''1\n4\n0110\n0110''') == '''0'''\nassert solution('''1\n4\n0110\n1010''') == '''1'''\nassert solution('''1\n3\n010\n001''') == '''-1'''\nassert solution('''1\n5\n00100\n11111''') == '''-1'''\nassert solution('''1\n4\n1110\n0101''') == '''-1'''\nassert solution('''1\n5\n10101\n01010''') == '''-1'''\nassert solution('''1\n5\n01010\n10101''') == '''-1'''\nassert solution('''1\n4\n0101\n1010''') == '''-1'''\nassert solution('''1\n4\n0110\n0101''') == '''-1'''\nassert solution('''1\n3\n111\n000''') == '''-1'''\nassert solution('''1\n3\n110\n111''') == '''-1'''\nassert solution('''1\n3\n101\n111''') == '''-1'''\n", "solution(\"\") == \"\", \"test 0 failed\"\nassert solution(\"\") == \"\", \"test 1 failed\"\nassert solution(\"\") == \"\", \"test 2 failed\"\nassert solution(\"\") == \"\", \"test 3 failed\"\nassert solution(\"\") == \"\", \"test 4 failed\"\nassert solution(\"\") == \"\", \"test 5 failed\"\nassert solution(\"\") == \"\", \"test 6 failed\"\nassert solution(\"\") == \"\", \"test 7 failed\"\nassert solution(\"\") == \"\", \"test 8 failed\"\nassert solution(\"\") == \"\", \"test 9 failed\"\nassert solution(\"\") == \"\", \"test 10 failed\"", "solution(\"\"\"4\n4\n0001\n1111\n4\n1001\n0110\n1\n1\n0\n4\n0000\n1010\"\"\") == \"\"\"2\n2\n-1\n2\"\"\"", "solution(SAMPLE_INPUT_TXT) == SAMPLE_OUTPUT_TXT, f'expected:\\n{SAMPLE_OUTPUT_TXT}\\nbut got:\\n{solution(SAMPLE_INPUT_TXT)}'\n\n# check runtime on large input\nwith open(INPUT_TXT, 'r') as file:\n    # input data\n    stdin = file.read()\n    assert solution(stdin) == OUTPUT_TXT, f'expected:\\n{OUTPUT_TXT}\\nbut got:\\n{solution(stdin)}'", "solution('''\n2\n2\n00\n11\n2\n00\n10\n''') == '''\n-1\n1\n'''\nassert solution('''\n3\n3\n111\n101\n2\n11\n01\n3\n111\n001\n''') == '''\n3\n1\n3\n'''\nassert solution('''\n4\n4\n0000\n1111\n4\n1111\n0000\n4\n0000\n0000\n4\n1111\n1111\n''') == '''\n-1\n1\n0\n0\n'''\nassert solution('''\n5\n5\n00000\n00000\n5\n00000\n11111\n5\n01000\n10101\n5\n01010\n10101\n5\n01010\n11111\n''') == '''\n0\n-1\n2\n1\n2\n'''\nassert solution('''\n6\n6\n000000\n000000\n6\n011000\n101010\n6\n011010\n011010\n6\n011010\n101010\n6\n011010\n101101\n6\n011010\n011010\n''') == '''\n0\n3\n0\n3\n3\n0\n'''\nassert solution('''\n7\n7\n0000000\n0000000\n7\n0011000\n0011000\n7\n0011000\n", "solution('''1\n8\n01101110\n11101000''') == '2'\nassert solution('''1\n6\n100100\n101101''') == '3'\nassert solution('''1\n4\n1110\n1111''') == '-1'\nassert solution('''1\n4\n0000\n1110''') == '2'\nassert solution('''1\n6\n100100\n100100''') == '0'\nassert solution('''1\n10\n0101010101\n1100110011''') == '4'\nassert solution('''1\n10\n0101010101\n1101010101''') == '2'\nassert solution('''1\n10\n0101010101\n1101110111''') == '3'\nassert solution('''1\n15\n000100111010000\n011110111011000''') == '3'\nassert solution('''1\n15\n000100111010000\n011011011011000''') == '5'\nassert solution('''1\n15\n001101111011000\n011110111011000''') == '-1'\nassert solution('''1\n10\n0101010101\n0101010101''') == '0'\nassert solution(''", "solution(\"\"\"\n3\n3\n101\n010\n4\n0101\n1110\n5\n11010\n01110\n\"\"\") == \"\"\"\n1\n2\n-1\n\"\"\"", "solution('''\n1\n3\n011\n110\n''') == '''\n1\n'''\nassert solution('''\n1\n1\n0\n1\n''') == '''\n-1\n'''\nassert solution('''\n1\n4\n0100\n0000\n''') == '''\n-1\n'''\nassert solution('''\n1\n5\n10101\n00000\n''') == '''\n3\n'''\nassert solution('''\n1\n5\n00000\n10101\n''') == '''\n3\n'''\nassert solution('''\n1\n6\n110101\n000111\n''') == '''\n4\n'''\nassert solution('''\n1\n6\n100100\n100100\n''') == '''\n0\n'''\nassert solution('''\n1\n1\n1\n0\n''') == '''\n1\n'''\nassert solution('''\n1\n2\n11\n11\n''') == '''\n0\n'''\nassert solution('''\n1\n3\n101\n110\n''') == '''\n1\n'''\nassert solution('''\n1\n3\n111\n101\n''') == '''\n2\n'''\nassert solution('''\n1\n4\n0100\n0000\n''') ==", "solution(r'''\n2\n5\n11011\n01110\n5\n11111\n11111\n''') == r'''\n2\n0\n'''\n\nassert solution(r'''\n1\n5\n11111\n11111\n''') == r'''\n0\n'''\n\nassert solution(r'''\n2\n5\n11011\n11011\n5\n01010\n01010\n''') == r'''\n0\n0\n'''\n\nassert solution(r'''\n2\n5\n01000\n11000\n5\n01111\n01111\n''') == r'''\n2\n0\n'''\n\nassert solution(r'''\n2\n5\n01010\n11111\n5\n01111\n11111\n''') == r'''\n-1\n0\n'''\n\nassert solution(r'''\n2\n5\n10001\n10001\n5\n10101\n10101\n''') == r'''\n-1\n-1\n'''\n\nassert solution(r'''\n2\n5\n10101\n11111\n5\n11111\n11111\n''') == r'''\n-1\n0\n'''\n\nassert solution(r'''\n2\n5\n11111\n01111\n5\n01111\n01111\n''')", "solution(\"\"\"\n3\n3\n010\n111\n3\n010\n010\n3\n001\n111\n\"\"\") == \"\"\"\n2\n0\n-1\n\"\"\"", "solution(sample) == result\n\n# takes the input from HackerRank\ndef get_input():\n    return input()\n\n# loads the input from a file\ndef get_input_from_file(file_name: str):\n    with open(file_name, 'r') as f:\n        return f.read()\n\n# executes the solution\nprint(solution(get_input()))", "solution(\"\"\"1\n6\n101001\n101101\"\"\") == \"\"\"1\"\"\"\n\n# load data from test file\nwith open('test_case_1.txt', 'r') as fp:\n    data = fp.read()\n    for i in range(4):\n        print(solution(data))", "solution(r'''\n3\n2\n01\n10\n3\n011\n001\n3\n011\n010\n''') == r'''\n1\n-1\n2\n'''", "solution('''3\n3\n001\n000\n3\n001\n100\n5\n00110\n11100''') == '''2\n-1\n4'''", "solution('''\n4\n4\n0010\n1110\n4\n1010\n1111\n4\n1010\n0011\n4\n1001\n1111\n''') == '''\n1\n-1\n1\n0\n'''", "solution(\"\"\"1\n4\n0110\n0101\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"4\n4\n0110\n0101\n3\n010\n010\n3\n010\n000\n3\n000\n010\"\"\") == \"\"\"2\n0\n-1\n3\"\"\"\n\n# display the answer\nprint(solution(open(\"in.txt\", \"r\").read()))", "solution(stdin) == stdout\n\n# check invalid case\n\n# check performance\nif __name__ == '__main__':\n    from timeit import Timer\n    # performance check\n    t = Timer('f()', 'from __main__ import f')\n    print(t.timeit(1000))", "solution(\n'''3\n2\n01\n10\n3\n001\n110\n3\n010\n101\n''') == '''1\n2\n-1'''", "solution(\"\"\"\n3\n3\n101\n000\n3\n001\n010\n3\n010\n010\n\"\"\") == \"\"\"\n-1\n1\n0\n\"\"\"", "solution('''3\n3\n101\n010\n3\n101\n101\n3\n101\n000''') == '''2\n0\n-1'''", "solution('''\n2\n3\n010\n100\n3\n110\n100\n''') == '''\n1\n-1\n'''", "solution('''\n3\n3\n001\n100\n3\n001\n010\n3\n001\n011\n''') == '''\n-1\n-1\n3\n'''", "solution(\"\"\"\n3\n3\n001\n010\n3\n010\n010\n3\n000\n001\n\"\"\") == \"\"\"\n1\n0\n-1\n\"\"\"\n\n# check the performance of solution\nfrom utils import timeit\nfrom random import randint, randrange\n\nn_range = (10**5, 10**5)\nin1 = [randint(0,1) for _ in range(n_range[0])]\nin2 = [randint(0,1) for _ in range(n_range[0])]\n\nin_test = f\"{n_range[0]}\\n{''.join(map(str, in1))}\\n{''.join(map(str, in2))}\"\n\ntimeit(solution, in_test, verbose=True)", "solution(sample_input) == sample_output", "solution('''\n''') == '''\n'''", "solution(\n'''\n4\n4\n0101\n1010\n4\n1100\n1110\n4\n0100\n1010\n4\n1010\n1010\n'''\n) == '''\n1\n-1\n2\n0\n'''\n\n# check the time of solution\nimport time\n\ndef test_time(N: int, input: str) -> None:\n    start = time.time()\n    for _ in range(N):\n        _ = solution(input)\n    end = time.time()\n    per_test = (end - start) / N\n    print('Per test:', per_test)\n    per_char = per_test / len(input)\n    print('Per char:', per_char)\n\ntest_time(10, '''\n4\n4\n0101\n1010\n4\n1100\n1110\n4\n0100\n1010\n4\n1010\n1010\n''')"], "finish_reason": ["stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-15.870347683000002, -75.78238922124, -211.20687560655995, -35.82421447855002, -100.42943172160604, -103.91377853167302, -22.641992561989998, -22.57985477229, -17.520903485799998, -17.465719769470002, -75.921892076329, -85.81777034450505, -22.557291027989997, -24.07471387523, -140.68987469563206, -125.73555189218702, -54.67765467092898, -29.089552576310012, -24.286419751000004, -9.595726505, -15.715332334, -5.526246169999999, -66.63442502189997, -43.752077508340015, -103.31548476325145, -18.41930306394, -34.61024255875001, -61.11320202119977, -131.8659350419954, -154.6030881081272, -27.729514399199996, -93.04729887821419, -98.30082858185305, -21.560473665309996, -72.56437320397, -66.02308847140002, -25.140098535540012, -26.475262403120002, -38.20963700862998, -56.027883363849995, -56.427690575000014, -25.06548974494, -24.634520208639994, -19.72654301759999, -17.265898319099996, -24.140925105909993, -91.95144946801, -6.92835477147, -6.339682610999999, -103.66864551998397], "mean_logprob": [-0.48091962675757577, -0.2526079640708, -1.1057951602437697, -0.42146134680647057, -0.7439217164563408, -0.3463792617722433, -0.6659409577055883, -0.5507281651778049, -0.761778412426087, -0.6022661989472414, -0.2530729735877633, -0.28605923448168336, -0.751909700933, -0.7295367840978788, -0.6308962990835516, -0.4622630584271581, -0.18225884890309665, -0.5194562960055357, -0.6938977071714285, -1.3708180721428571, -1.0476888222666667, -0.9210410283333333, -0.6113250002009174, -0.6629102652778788, -0.344384949210838, -0.1297134018587324, -0.7865964217897727, -0.4460817665781007, -0.4395531168066513, -0.5153436270270907, -0.6602265333142857, -0.3101576629273807, -0.32766942860617665, -0.5673808859292105, -0.7974106945491208, -0.9044258694712328, -0.5846534543148837, -0.678852882131282, -0.7209365473326416, -0.6366804927710227, -0.7729820626712329, -0.6427048652548718, -0.6482768475957895, -0.5331498112864865, -0.5232090399727273, -0.5747839310930952, -0.49973613841309783, -0.62985043377, -0.4528344722142857, -0.4799474329628889]}
{"prompt": "'''\nThis is an interactive problem. The only difference between the easy and hard version is the limit on number of questions.\n\nThere are n players labelled from 1 to n. It is guaranteed that n is a multiple of 3.\n\nAmong them, there are k impostors and n-k crewmates. The number of impostors, k, is not given to you. It is guaranteed that n/3 < k < 2n/3.\n\nIn each question, you can choose three distinct integers a, b, c (1 \u2264 a, b, c \u2264 n) and ask: \"Among the players labelled a, b and c, are there more impostors or more crewmates?\" You will be given the integer 0 if there are more impostors than crewmates, and 1 otherwise.\n\nFind the number of impostors k and the indices of players that are impostors after asking at most n+6 questions.\n\nThe jury is adaptive, which means the indices of impostors may not be fixed beforehand and can depend on your questions. It is guaranteed that there is at least one set of impostors which fulfills the constraints and the answers to your questions at any time.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (6 \u2264 n < 10^4, n is a multiple of 3) \u2014 the number of players.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^4.\n\nInteraction\n\nFor each test case, the interaction starts with reading n.\n\nThen you are allowed to make at most n+6 questions in the following way:\n\n\"? a b c\" (1 \u2264 a, b, c \u2264 n, a, b and c are pairwise distinct).\n\nAfter each one, you should read an integer r, which is equal to 0 if there are more impostors than crewmates among players labelled a, b and c, and equal to 1 otherwise.\n\nAnswer -1 instead of 0 or 1 means that you made an invalid query. Exit immediately after receiving -1 and you will see Wrong answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream.\n\nWhen you have found the indices of all impostors, print a single line \"! \" (without quotes), followed by the number of impostors k, followed by k integers representing the indices of the impostors. Please note that you must print all this information on the same line. \n\nAfter printing the answer, your program must then continue to solve the remaining test cases, or exit if all test cases have been solved.\n\nAfter printing the queries and answers do not forget to output end of line and flush the output buffer. Otherwise, you will get the Idleness limit exceeded verdict. To do flush use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * Read documentation for other languages. \n\n\n\nHacks\n\nYou cannot make hacks in this problem.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n6\n''') == '''\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n0\n? 1 2 3\n", "solution('''\n5\n6\n''') == '''\n? 1 2 3\n1\n? 1 2 4\n0\n? 1 2 5\n1\n? 1 3 4\n1\n? 1 3 5\n0\n? 1 4 5\n1\n! 2 2 4\n'''\nassert solution('''\n2\n6\n''') == '''\n? 1 2 3\n1\n? 1 2 4\n0\n? 1 2 5\n1\n? 1 3 4\n1\n? 1 3 5\n0\n? 1 4 5\n1\n! 2 2 4\n'''\nassert solution('''\n3\n6\n''') == '''\n? 1 2 3\n1\n? 1 2 4\n0\n? 1 2 5\n1\n? 1 3 4\n1\n? 1 3 5\n0\n? 1 4 5\n1\n! 2 2 4\n'''\nassert solution('''\n1\n6\n''') == '''\n? 1 2 3\n1\n? 1 2 4\n0\n? 1 2 5\n1\n? 1 3 4\n1\n? 1 3 5\n0\n? 1 4 5\n1\n! 2 2 4\n'''\nassert solution('''\n5\n12\n''') == '''\n? 1 2 3\n1\n? 1 2 4\n0\n? 1 2 5\n1\n", "solution('''\n''') == '''\n'''", "solution('''\n1\n6\n''') == '''\n'''\n\nif __name__ == '__main__':\n    with open('problem_input.txt', 'r') as input_file:\n        print(solution(input_file.read()))", "solution('''\n3\n6\n''') == '''\n'''", "solution(\"\"\"6\n6\n6\n6\n6\n6\n6\"\"\") == '''? 1 2 3\n1\n? 1 3 5\n0\n? 2 3 6\n1\n! 2 1 5\n? 1 2 3\n1\n? 1 3 5\n0\n? 2 3 6\n1\n! 2 1 5\n? 1 2 3\n1\n? 1 3 5\n0\n? 2 3 6\n1\n! 2 1 5\n? 1 2 3\n1\n? 1 3 5\n0\n? 2 3 6\n1\n! 2 1 5\n? 1 2 3\n1\n? 1 3 5\n0\n? 2 3 6\n1\n! 2 1 5\n? 1 2 3\n1\n? 1 3 5\n0\n? 2 3 6\n1\n! 2 1 5\n? 1 2 3\n1\n? 1 3 5\n0\n? 2 3 6\n1\n! 2 1 5'''", "solution('''\n2\n6\n''') == '''\n? 1 2 3\n1\n? 2 3 4\n0\n? 1 2 4\n1\n? 1 2 5\n1\n? 1 3 4\n1\n? 1 3 5\n1\n? 2 3 5\n1\n? 1 4 5\n1\n! 6 1 2 4 5 6\n9\n? 1 2 3\n1\n? 1 2 4\n1\n? 1 2 5\n1\n? 1 2 6\n1\n? 1 2 7\n1\n? 1 2 8\n1\n? 1 2 9\n1\n? 1 3 4\n1\n? 1 3 5\n1\n? 1 3 6\n1\n? 1 3 7\n1\n? 1 3 8\n1\n? 1 3 9\n1\n? 1 4 5\n1\n? 1 4 6\n1\n? 1 4 7\n1\n? 1 4 8\n1\n? 1 4 9\n1\n? 1 5 6\n1\n? 1 5 7\n1\n? 1 5 8\n1\n? 1 5 9\n1\n? 1 6 7\n1\n? 1 6 8\n1\n? 1 6 9\n1\n? 1 7 8\n1\n? 1 7 9\n1\n? 1 8 9\n1\n? 2 3 4\n1\n? 2 3 5\n1\n? 2 3 6\n1\n? 2", "solution(sample_input) == sample_output\n\n# check the correctness of both the solution and the interaction\nassert solution(sample_input) == sample_output\nassert solution(sample_input) == sample_output\nassert solution(sample_input) == sample_output\n\n# check the correctness of solution on hidden tests\nassert solution(hidden_input) == hidden_output\n\n# ITERATE OVER TEST CASES, ONE AT A TIME\nfor n in [int(n) for n in [6, 9, 15, 27, 36, 48, 54, 63, 75, 81, 90, 108, 117, 135, 162, 189, 243, 324, 486, 648, 972, 1296, 1944, 2592, 3888, 7776, 15552, 31104, 62208, 124416, 248832, 497664, 995328, 1990656, 3981312, 7962624, 15925248, 31854496, 63708816, 127417632, 254835264, 509670528, 1019341056, 2038682144, 4077364288, 8154728576, 16309457112, 32618914208, 65237828448, 130475656896, 260951313792, 521902627584, 1043810495568, 208", "solution('''\n2\n6\n''') == '''\n'''", "solution(\"\"\"\n2\n9\n? 2 3 4\n1\n? 1 2 5\n0\n? 1 2 3\n1\n? 2 3 6\n0\n? 2 3 7\n1\n? 3 7 8\n0\n? 1 5 9\n0\n? 2 5 6\n1\n? 1 2 5\n0\n! 3 2 5 8\n9\n? 2 3 4\n1\n? 1 2 5\n0\n? 1 2 3\n1\n? 2 3 6\n0\n? 2 3 7\n1\n? 3 7 8\n0\n? 1 5 9\n0\n? 2 5 6\n1\n? 1 2 5\n0\n! 3 2 5 8\n\"\"\") == '''\n2\n? 2 3 4\n1\n? 1 2 5\n0\n? 1 2 3\n1\n? 2 3 6\n0\n? 2 3 7\n1\n? 3 7 8\n0\n? 1 5 9\n0\n? 2 5 6\n1\n? 1 2 5\n0\n! 3 2 5 8\n? 2 3 4\n1\n? 1 2 5\n0\n? 1 2 3\n1\n? 2 3 6\n0\n? 2 3 7\n1\n? 3 7 8\n0\n? 1 5 9\n0\n? 2 5 6\n1\n? 1 2 5\n0\n! 3 2 5 8\n'''", "solution(\"\"\"2\n6\n? 1 2 3\n0\n? 2 3 4\n1\n? 1 2 4\n0\n? 5 6 1\n1\n? 2 5 6\n1\n? 3 4 5\n0\n? 1 2 3\n0\n? 2 3 4\n1\n? 1 2 4\n0\n? 5 6 1\n1\n? 2 5 6\n1\n? 3 4 5\n0\n? 1 2 3\n0\n? 2 3 4\n1\n? 1 2 4\n0\n? 5 6 1\n1\n? 2 5 6\n1\n? 3 4 5\n0\n\"\"\") == \"\"\"! 1 2\n? 1 2 3\n0\n? 2 3 4\n1\n? 1 2 4\n0\n? 5 6 1\n1\n? 2 5 6\n1\n? 3 4 5\n0\n! 1 3\n\"\"\"\n\n# test submit", "solution('''\n3\n9\n? 1 2 3\n0\n? 1 2 4\n1\n? 1 5 6\n0\n? 7 8 9\n1\n? 2 3 5\n0\n? 3 4 7\n1\n? 1 3 7\n0\n? 2 4 8\n1\n? 1 2 9\n0\n? 5 6 8\n1\n? 1 5 8\n0\n? 2 5 9\n1\n? 3 6 9\n0\n? 1 3 8\n0\n? 2 4 9\n1\n? 1 4 9\n0\n? 2 5 8\n1\n? 3 6 8\n0\n? 3 4 6\n1\n? 1 3 5\n0\n? 1 4 5\n1\n? 1 2 6\n0\n? 1 4 7\n1\n? 1 5 7\n0\n? 1 2 8\n0\n? 1 5 9\n1\n? 1 3 9\n0\n? 2 6 9\n1\n? 2 4 6\n0\n? 3 4 8\n1\n? 3 5 7\n0\n? 2 7 9\n1\n? 2 4 5\n0\n? 3 5 6\n1\n! 4 1 2 7 9\n21\n? 1 2 3\n0\n? 1 2 4\n1\n? 1 5 6\n0\n? 7 8 9\n1\n? 2 3 5\n0\n? 3 4 7\n1\n? 1", "solution('''\n''') == '''\n'''", "solution('''1\n9''') == '''? 1 2 3\n1\n? 1 5 7\n0\n? 2 3 5\n1\n? 2 4 5\n1\n? 3 4 5\n1\n? 3 4 8\n1\n? 2 7 8\n0\n? 2 4 7\n1\n? 4 7 8\n1\n! 4 4 7 8'''\n\nassert solution('''1\n12''') == '''? 1 2 3\n1\n? 1 4 5\n0\n? 1 6 7\n0\n? 2 3 5\n1\n? 2 4 6\n1\n? 2 8 9\n0\n? 3 5 6\n1\n? 3 4 8\n1\n? 3 5 8\n1\n? 3 5 9\n1\n? 3 7 8\n1\n? 4 6 7\n1\n! 6 1 4 6 7 8 9'''\n\nassert solution('''1\n9''') == '''? 1 2 3\n1\n? 1 5 7\n0\n? 2 3 5\n1\n? 2 4 5\n1\n? 3 4 5\n1\n? 3 4 8\n1\n? 2 7 8\n0\n? 2 4 7\n1\n? 4 7 8\n1\n! 4 4 7 8'''\n\nassert solution('''1\n12''') == '''? 1 2 3\n1\n? 1", "solution('''6\n6\n6\n6\n6\n6\n6''') == '''\n! 3 4 6\n! 3 4 6\n! 3 4 6\n! 3 4 6\n! 3 4 6\n! 3 4 6\n'''", "solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"7\n6\n\"\"\") == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution", "(solution(\"\"\"1\n6\"\"\") == \"\"\"! 3 3 4\n\"\"\")\nassert (solution(\"\"\"2\n6\n9\"\"\") == \"\"\"! 3 3 4\n! 4 1 5\n\"\"\")\nassert (solution(\"\"\"3\n6\n9\n12\"\"\") == \"\"\"! 3 3 4\n! 4 1 5\n! 3 1 4\n\"\"\")\nassert (solution(\"\"\"4\n6\n9\n12\n15\"\"\") == \"\"\"! 3 3 4\n! 4 1 5\n! 3 1 4\n! 4 2 4\n\"\"\")\nassert (solution(\"\"\"2\n6\n15\"\"\") == \"\"\"! 3 3 4\n! 4 2 4\n\"\"\")\nassert (solution(\"\"\"2\n6\n9\"\"\") == \"\"\"! 3 3 4\n! 4 1 5\n\"\"\")\nassert (solution(\"\"\"2\n6\n18\"\"\") == \"\"\"! 3 3 4\n! 4 2 4\n\"\"\")\nassert (solution(\"\"\"2\n6\n21\"\"\") == \"\"\"! 3 3 4\n! 4 2 4\n\"\"\")\nassert (solution(\"\"\"2\n6\n30\"\"\") == \"\"\"! 3 3 4\n! 4 2 4\n\"\"\")\nassert (solution(\"\"\"2\n6\n12\"\"\") == \"\"\"! 3 3 4\n! 3 1 4\n\"\"\")\nassert (solution(\"\"\"2", "solution('''\n\n''') == '''\n\n'''", "solution(\"\") == \"\"", "solution('''3\n6\n''') == '''! 2 1 3\n! 3 1 4 5\n! 2 2 4\n'''\nassert solution('''1\n9\n''') == '''! 3 1 2 3 7\n'''\n\n# author: @deniskrasnobaev\n# contest: Codeforces Round #660 (Div. 2)", "solution(input()) == output(), \"{} does not match {}\".format(solution(input()), output())\n\n# check the correctness of d solution\nassert d_solution(input()) == output(), \"{} does not match {}\".format(d_solution(input()), output())\n\n# check the correctness of solution\nstdin, _, output_data = open(get_input_file_path(), 'r'), open(get_output_file_path(), 'r'), open(get_output_file_path(), 'r')\nwhile True:\n    input_data = stdin.readline()\n    if not input_data:\n        break\n    assert solution(input_data) == output_data.readline(), \"{} does not match {}\".format(solution(input_data), output_data.readline())\n\n# stress testing\nimport random, string\ndef stress(stdin: str) -> str:\n    for _ in range(10000):\n        input_data = ''.join(random.choices(string.ascii_uppercase + string.digits, k=random.randint(6, 50000)))\n        assert solution(input_data) == d_solution(input_data), \"{} does not match {}\".format(solution(input_data), d_solution", "solution(TEST) == '''\n'''", "solution(\"\"\"\n2\n6\n\"\"\") == \"\"\"\n? 1 2 3\n0\n? 1 2 4\n1\n? 1 2 5\n0\n? 1 2 6\n1\n? 1 3 4\n0\n? 1 3 5\n1\n? 1 3 6\n0\n? 1 4 5\n0\n? 1 4 6\n1\n? 1 5 6\n0\n? 2 3 4\n1\n? 2 3 5\n0\n? 2 3 6\n1\n? 2 4 5\n0\n? 2 4 6\n1\n? 2 5 6\n0\n? 3 4 5\n0\n? 3 4 6\n1\n? 3 5 6\n0\n? 4 5 6\n0\n! 3 2 4 6\n\"\"\"\n\n# TODO", "solution('''1\n6''') == '''? 1 2 3\n0\n? 1 2 4\n0\n? 1 3 4\n0\n? 2 3 4\n0\n? 1 2 5\n0\n? 1 2 6\n0\n? 1 3 5\n0\n? 1 3 6\n0\n? 2 3 5\n0\n? 2 3 6\n0\n? 1 4 5\n0\n? 1 4 6\n0\n? 2 4 5\n0\n? 2 4 6\n0\n? 3 4 5\n0\n? 3 4 6\n0\n! 2 5 6'''\n\nassert solution('''2\n6\n9''') == '''? 1 2 3\n0\n? 1 2 4\n0\n? 1 3 4\n0\n? 2 3 4\n0\n? 1 2 5\n0\n? 1 2 6\n0\n? 1 3 5\n0\n? 1 3 6\n0\n? 2 3 5\n0\n? 2 3 6\n0\n? 1 4 5\n0\n? 1 4 6\n0\n? 2 4 5\n0\n? 2 4 6\n0\n? 3 4 5\n0\n? 3 4 6\n0\n! 2 5 6\n? 1 2 3\n0\n? 1 2 4\n0\n? 1 3 4\n0\n? 2 3 4\n0\n? 1 2 5\n0\n?", "solution(\"\") == \"\"\n\n# check the performance of solution\n\n# check the performance of large input\n\n'''\ntime complexity: \nspace complexity: \n'''", "solution(\"\"\"100\n18\n\"\"\") == \"\"\"100\n18\n\"\"\", \"something not quite right\"\n\n# submit\nrunner.submit_solution(solution)", "solution(\"\"\"\n1\n6\n\"\"\") == \"\"\"\n! 3 1 2 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n9\n\"\"\") == \"\"\"\n! 3 3 4 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n6\n9\n15\n\"\"\") == \"\"\"\n! 3 1 2 3\n! 3 3 4 5\n! 6 1 2 3 4 5 6\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n300\n\"\"\") == \"\"\"\n! 100 31 39 59 72 98 100 102 129 139 149 152 173 177 181 188 195 203 225 239 243 246 247 249 251 252 255 260 268 269 272 282 287 288 289 291 298 299\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n15\n\"\"\") == \"\"\"\n! 6 1 2 3 4 5 6\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n12\n\"\"\") == \"\"\"\n! 3 3 4 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n18\n\"\"\") == \"\"\"\n! 6 1 2 3 4 5 6\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n21\n\"\"\") == \"\"\"\n! 9 1 2 3 4 5 6 7 8 9\n\"\"\"\n\n# check the", "solution(\"\"\"\n4\n6\n\"\"\") == \"\"\"\n? 2 3 5\n1\n? 3 4 5\n0\n! 1 3\n3\n? 2 3 6\n0\n? 3 4 6\n1\n! 3 2 6\n6\n? 1 2 3\n1\n? 1 2 5\n0\n? 1 2 6\n0\n? 2 3 5\n1\n? 3 4 5\n0\n? 1 4 6\n1\n? 2 3 6\n0\n? 3 4 6\n1\n! 3 2 6\n\"\"\", \"test 1\"\n\nassert solution(\"\"\"\n4\n6\n\"\"\") == \"\"\"\n? 2 3 5\n1\n? 3 4 5\n0\n! 1 3\n3\n? 2 3 6\n0\n? 3 4 6\n1\n! 3 2 6\n6\n? 1 2 3\n1\n? 1 2 5\n0\n? 1 2 6\n0\n? 2 3 5\n1\n? 3 4 5\n0\n? 1 4 6\n1\n? 2 3 6\n0\n? 3 4 6\n1\n! 3 2 6\n\"\"\", \"test 2\"\n\nassert solution(\"\"\"\n4\n9\n\"\"\") == \"\"\"\n? 1 2 3\n1\n? 1 2 5\n0\n? 1 2 6\n0\n? 2 3 5\n1\n? 3 4 5\n0\n? 1 4 6", "solution('''\n1\n6\n? 1 2 3\n0\n? 1 3 5\n1\n? 1 2 4\n0\n? 2 3 4\n1\n? 3 4 5\n1\n? 4 5 6\n1\n? 5 6 1\n1\n? 2 4 6\n1\n? 1 3 5\n1\n? 1 2 3\n0\n? 2 3 4\n1\n! 2 1 4\n''') == \"1\", \"0\"\nassert solution('''\n1\n6\n? 1 2 3\n0\n? 1 3 5\n1\n? 1 2 4\n0\n? 2 3 4\n1\n? 3 4 5\n1\n? 4 5 6\n1\n? 5 6 1\n1\n? 2 4 6\n1\n? 1 3 5\n1\n? 1 2 3\n0\n? 2 3 4\n1\n! 2 1 4\n''') == \"1\", \"1\"\nassert solution('''\n1\n6\n? 1 2 3\n0\n? 1 3 5\n1\n? 1 2 4\n0\n? 2 3 4\n1\n? 3 4 5\n1\n? 4 5 6\n1\n? 5 6 1\n1\n? 2 4 6\n1\n? 1 3 5\n1\n? 1 2 3\n0\n? 2 3 4\n1\n! 2 1 4\n''') == \"1", "correct(solution('''\n2\n6\n''')) == '''\n? 1 2 3\n1\n? 1 2 4\n0\n? 2 3 4\n1\n? 1 2 5\n0\n? 1 2 6\n0\n? 1 3 4\n1\n? 2 4 5\n0\n? 3 5 6\n0\n! 3 1 3 6\n? 1 2 3\n1\n? 1 2 4\n0\n? 2 3 4\n1\n? 1 2 5\n0\n? 1 2 6\n0\n? 1 3 4\n1\n? 2 4 5\n0\n? 3 5 6\n0\n! 3 1 3 6\n'''\n\n# check the correctness of solution\nassert correct(solution('''\n1\n18\n''')) == '''\n? 1 2 3\n1\n? 1 2 4\n0\n? 1 2 5\n0\n? 1 2 6\n0\n? 1 2 7\n0\n? 1 2 8\n0\n? 1 2 9\n0\n? 1 2 10\n0\n? 1 2 11\n0\n? 1 2 12\n0\n? 1 2 13\n0\n? 1 2 14\n0\n? 1 2 15\n0\n? 1 2 16\n0\n? 1 2 17\n0\n? 1 2 18\n0\n? 1 3 4\n1\n? 2 3 4\n1\n", "solution('''\n1\n6\n''') == '''\n! 2 1 4\n'''\n\n# check the performance of solution\nassert solution('''\n3\n6\n18\n45\n''') == '''\n! 2 1 4\n! 3 1 9 2 12 6 15 18\n! 9 2 5 27 4 6 11 31 35 7 29 43\n'''", "solution('''\n\n''') == '''\n\n'''\n\n# unittest.TestCase.maxDiff = None\n# check the time limit\nassert solution('''\n\n''') == '''\n\n'''", "solution(\n    '''6\n6\n6\n6\n6\n6\n6''') == '''?! \n? 1 2 3\n? 1 2 4\n? 1 2 5\n! 3 1 5 2\n? 1 2 3\n? 1 2 4\n? 1 2 5\n? 1 2 6\n? 1 3 4\n? 1 3 5\n? 1 3 6\n? 1 4 5\n? 1 4 6\n? 1 5 6\n? 2 3 4\n? 2 3 5\n? 2 3 6\n? 2 4 5\n? 2 4 6\n? 2 5 6\n? 3 4 5\n? 3 4 6\n? 3 5 6\n? 4 5 6\n! 6 1 2 3 4 5 6\n? 1 2 3\n? 1 2 4\n? 1 2 5\n? 1 2 6\n? 1 3 4\n? 1 3 5\n? 1 3 6\n? 1 4 5\n? 1 4 6\n? 1 5 6\n? 2 3 4\n? 2 3 5\n? 2 3 6\n? 2 4 5\n? 2 4 6\n? 2 5 6\n? 3 4 5\n? 3 4 6\n? 3 5 6\n? 4 5 6\n! 6 1 2 3 4 5 6\n? 1 2 3\n? 1 2 4\n? 1 2 5\n? 1 2 6\n? 1 3 4\n? 1 3 5\n? 1 3 6", "solution('''3\n6\n? 1 2 3\n0\n? 2 3 4\n1\n? 1 2 5\n0\n? 1 3 4\n1\n? 1 4 5\n0\n? 2 3 5\n1\n? 1 2 4\n0\n! 1 2 4 5\n6\n? 1 2 3\n0\n? 2 3 4\n1\n? 1 2 5\n0\n? 1 3 4\n1\n? 1 4 5\n0\n? 2 3 5\n1\n? 1 2 4\n0\n! 1 2 4 5\n6\n? 1 2 3\n0\n? 2 3 4\n1\n? 1 2 5\n0\n? 1 3 4\n1\n? 1 4 5\n0\n? 2 3 5\n1\n? 1 2 4\n0\n! 1 2 4 5''') == '''! 1 2 4 5\n! 1 2 4 5\n! 1 2 4 5'''", "solution('''4\n6\n''') == '''! 2 1 4'''\nassert solution('''4\n9\n''') == '''! 2 1 4 7'''\nassert solution('''4\n12\n''') == '''! 3 1 4 7 9'''\nassert solution('''4\n18\n''') == '''! 3 1 4 7 9 10 13 15 17'''\nassert solution('''4\n3\n''') == '''! 2 1'''\nassert solution('''4\n24\n''') == '''! 4 1 4 7 9 10 13 15 17 18 19 22'''\nassert solution('''4\n48\n''') == '''! 8 1 4 7 9 10 13 15 17 18 19 22 24 26 27 28 29 31 32 35 37 39 41 42 43 45 46'''\nassert solution('''4\n93\n''') == '''! 32 1 4 7 9 10 13 15 17 18 19 22 24 26 27 28 29 31 32 35 37 39 41 42 43 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92'''\nassert solution('''4\n147\n''') == '''! 51 1 4 7 9 10 13", "solution(\"7\\n9\\n? 1 2 3\\n0\\n? 1 3 4\\n1\\n? 1 4 6\\n1\\n? 1 6 8\\n0\\n? 1 8 9\\n1\\n? 2 4 7\\n1\\n? 2 7 9\\n0\\n\") == \"! 2 1 5\\n\"\nassert solution(\"6\\n6\\n? 1 2 3\\n0\\n? 1 3 4\\n1\\n? 1 4 5\\n1\\n? 1 5 6\\n1\\n? 2 4 6\\n1\\n? 2 5 6\\n0\\n\") == \"! 2 1 2\\n\"\nassert solution(\"4\\n9\\n? 1 2 3\\n0\\n? 1 3 4\\n1\\n? 1 4 5\\n1\\n? 1 5 6\\n1\\n? 1 6 7\\n1\\n? 1 7 8\\n1\\n? 1 8 9\\n1\\n? 2 4 6\\n1\\n? 2 6 8\\n0\\n\") == \"! 2 4 5\\n\"\nassert solution(\"4\\n9\\n? 1 2 3\\n0\\n? 1 3 4\\n1\\n? 1 4 5\\n1\\n? 1 5 6\\n1", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT, 'sample data'", "solution('''\n5\n6\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n6\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n6\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n6\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n6\n''') == '''\n\n'''", "solution(r'''\n\n''') == r'''\n\n'''\n\n# check correctness of submission\nimport random\nstdin_file_name = r'''./tests/tests_data/1/stdin.txt'''\nif stdin_file_name:\n    stdin = open(stdin_file_name, 'r')\nelse:\n    stdin = ''\nprint(solution(stdin))", "solution('''\n\n''') == '''\n\n'''", "solution('''6\n24\n6\n18\n15\n3\n45\n33''') == '''! 3 2 3\n! 2 1 3\n! 3 3 6\n! 1 1 2\n! 5 2 4 6 8 10\n! 2 2 9'''", "solution(\"\"\"3\n6\n\"\"\") == \"\"\"? 1 2 3\n0\n? 2 3 4\n1\n? 1 2 4\n0\n? 1 3 4\n1\n? 1 2 5\n0\n? 2 3 5\n1\n? 1 3 5\n0\n! 3 1 2 5\n6\n? 1 2 3\n0\n? 1 2 4\n1\n? 1 2 5\n0\n? 1 2 6\n1\n? 1 3 4\n0\n? 1 3 5\n1\n? 1 3 6\n0\n? 1 4 5\n1\n? 1 4 6\n0\n? 1 5 6\n1\n? 2 3 4\n0\n? 2 3 5\n1\n? 2 3 6\n0\n? 2 4 5\n1\n? 2 4 6\n0\n? 2 5 6\n1\n? 3 4 5\n0\n? 3 4 6\n1\n? 3 5 6\n0\n? 4 5 6\n1\n! 1 2 3 4 5 6\n6\n? 1 2 3\n0\n? 1 2 4\n1\n? 1 2 5\n0\n? 1 2 6\n1\n? 1 3 4\n0\n? 1 3 5\n1\n? 1 3 6\n0\n? 1 4 5\n1\n? 1 4 6\n0\n? 1 5 6\n1\n? 2 3 4\n0\n? 2 3 5\n", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution(stdin='''\n1\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1\n''') == '''\n'''", "solution('''\n1\n6\n''') == '''\n! 2 1 4\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n3\n3\n9\n9\n''') == '''\n! 1 1\n? 1 2 3\n1\n? 1 2 3\n1\n? 2 3 4\n0\n? 2 3 4\n0\n? 1 3 5\n1\n? 1 3 5\n1\n? 1 2 6\n0\n? 1 2 6\n0\n? 1 2 3\n1\n? 1 2 3\n1\n? 2 3 4\n0\n? 2 3 4\n0\n? 3 4 5\n1\n? 3 4 5\n1\n? 4 5 6\n0\n? 4 5 6\n0\n? 5 6 7\n1\n? 5 6 7\n1\n? 6 7 8\n0\n? 6 7 8\n0\n? 7 8 9\n1\n? 7 8 9\n1\n! 1 8\n? 1 2 3\n1\n? 1 2 3\n1\n? 1 2 4\n0\n? 1 2 4\n0\n? 1 2 5\n1\n? 1 2 5\n1\n? 1 2 6\n0\n? 1 2 6\n0\n? 1 2 7\n1\n? 1 2 7\n1\n? 1 2 8\n0\n? 1 2 8\n0\n?", "solution(input_example) == output_example\n\n# submit solution to the judge system\nsubmit_solution(solution, __file__)", "solution('''\n''') == ''", "solution(\"\"\"2\n9\n\"\"\") == \"\"\"5 1 5 2 6 7 1\n5 1 5 2 6 7 1\n\"\"\"\n\nassert solution(\"\"\"3\n9\n9\n9\n\"\"\") == \"\"\"4 1 4 2 6 7 1\n4 1 4 2 6 7 1\n4 1 4 2 6 7 1\n\"\"\"\n\nassert solution(\"\"\"2\n6\n6\n\"\"\") == \"\"\"3 1 2 4 5 6\n3 1 2 4 5 6\n\"\"\"\n\nassert solution(\"\"\"3\n6\n6\n6\n\"\"\") == \"\"\"3 1 2 4 5 6\n3 1 2 4 5 6\n3 1 2 4 5 6\n\"\"\"\n\nassert solution(\"\"\"3\n6\n6\n6\n\"\"\") == \"\"\"3 1 2 4 5 6\n3 1 2 4 5 6\n3 1 2 4 5 6\n\"\"\"\n\nassert solution(\"\"\"3\n6\n6\n6\n\"\"\") == \"\"\"3 1 2 4 5 6\n3 1 2 4 5 6\n3 1 2 4 5 6\n\"\"\"\n\nassert solution(\"\"\"3\n6\n6\n6\n\"\"\") == \"\"\"3 1 2 4 5 6\n3 1 2 4 5 6\n3 1 2 4 5 6\n\"\"\"\n\nassert solution(\"\"\"4\n6\n6\n6\n6\n\"\"\") == \"\"\"3 1 2 4 5 6\n3 1 2 4 5 6\n3 1 2 4", "solution('''\n1\n6\n''') == '''\n1\n2\n3\n4\n'''\n\n# simulate the interactive nature of the problem\nfrom random import random, choice\nimport random\nimport sys\nimport os\n\ndef question(n):\n    a = choice(range(1, n+1))\n    b = choice(range(1, n+1))\n    while b == a:\n        b = choice(range(1, n+1))\n    c = choice(range(1, n+1))\n    while c == a or c == b:\n        c = choice(range(1, n+1))\n    return (a, b, c)\n\ndef solution(stdin: str) -> str:\n    (t, ) = read_ints(stdin)\n    for _ in range(t):\n        (n, ) = read_ints(stdin)\n        assert n % 3 == 0\n        assert 3*n//2 < n < 2*n\n        sys.stderr.write(f\"n = {n}\\n\")\n        k = int(random.random() * (n//3) + n//3)\n        sys.stderr.write(f\"k = {k}\\n\")\n        p = list(range(1, n+1", "solution(inputs) == outputs\n\nprint(\"Success!\")"], "finish_reason": ["length", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "length", "stop"], "sum_logprob": [-22.01513838107, -46.68964792650301, -5.79802728, -30.541311745589994, -8.192039079, -33.84427189525001, -47.217401264485005, -183.43176153864292, -8.610948731999999, -76.857713805109, -60.18581767451, -141.57778394505598, -5.798027325, -108.98855256665996, -22.20716148550001, -21.95425480895101, -74.79449230506106, -6.4053419828000004, -5.0205201, -69.78232539742997, -130.57753242344504, -14.345990822000001, -42.21048713728998, -37.651553431329006, -31.75888878422, -49.88981668800001, -168.07105043443883, -90.82967134181905, -68.28238210886802, -63.21856928634201, -88.7735318566, -33.58676457301001, -52.296327773079966, -41.15994071785001, -104.27662326725108, -81.09118499181497, -15.20547033334, -17.844304430591485, -80.502032269834, -6.407314310500001, -65.39864861739999, -57.25702916014599, -6.863835053374999, -19.611790297497013, -79.39934940149107, -20.493872910669996, -7.131597177999998, -81.32499382557599, -139.49556382472088, -18.512214784500003], "mean_logprob": [-0.07338379460356667, -0.15563215975501, -0.41414480571428575, -0.4847827261204762, -0.4551132821666667, -0.16509400924512196, -0.15739133754828333, -0.61143920512881, -0.4783860406666667, -0.25878018116198315, -0.3102361735799484, -0.47192594648352, -0.4141448089285714, -0.3632951752222, -0.3965564550982143, -0.07318084936317, -0.24931497435020333, -0.400333873925, -0.8367533500000001, -0.8307419690170238, -0.43525844141148334, -1.1954992351666667, -0.2542800429957229, -0.12550517810443, -0.7939722196055, -1.279226068923077, -0.5602368347814634, -0.30276557113939667, -0.22760794036289334, -0.21072856428780667, -1.0695606247783134, -0.6337125391133962, -0.17432109257693332, -0.20477582446691542, -0.34758874422417, -0.2703039499727167, -0.7240700158733333, -0.1362160643556603, -0.8214493088758571, -0.40045714440625, -1.108451671481356, -0.19085676386715333, -0.42898969083593746, -0.19040573104366018, -0.26466449800497, -0.6210264518384848, -0.7131597178, -0.27108331275192, -0.4649852127490697, -1.2341476523000001]}
{"prompt": "'''\nGiven a positive integer n. Find three distinct positive integers a, b, c such that a + b + c = n and \\operatorname{gcd}(a, b) = c, where \\operatorname{gcd}(x, y) denotes the [greatest common divisor (GCD)](https://en.wikipedia.org/wiki/Greatest_common_divisor) of integers x and y.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first and only line of each test case contains a single integer n (10 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, output three distinct positive integers a, b, c satisfying the requirements. If there are multiple solutions, you can print any. We can show that an answer always exists.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n15\n26\n36\n''') == '''\n1 6 8\n4 7 15\n4 6 26\n'''", "solution(\n'''\n1\n10\n''') == '''\n1 2 7\n'''\n\n# check the speed of solution\nimport timeit\nprint(timeit.timeit(solution, input='1\\n10', number=100000))", "solution(stdin) == stdout", "solution('''\n2\n30\n60\n''') == '''\n8 8 14\n12 8 40\n'''\n\n# test data\nstdin = '''\n10\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n'''\n\nprint(solution(stdin))", "solution(\"\"\"\n1\n1\n\"\"\") == \"\"\"\n1 1 1\n\"\"\"\nassert solution(\"\"\"\n5\n5\n5\n5\n5\n5\n\"\"\") == \"\"\"\n1 1 3\n1 2 2\n2 1 2\n2 2 1\n3 1 1\n\"\"\"\nassert solution(\"\"\"\n1\n9\n\"\"\") == \"\"\"\n1 1 7\n\"\"\"\nassert solution(\"\"\"\n1\n47\n\"\"\") == \"\"\"\n3 3 41\n\"\"\"\nassert solution(\"\"\"\n1\n2\n\"\"\") == \"\"\"\n1 1 1\n\"\"\"\nassert solution(\"\"\"\n1\n4\n\"\"\") == \"\"\"\n1 1 2\n\"\"\"\nassert solution(\"\"\"\n1\n10\n\"\"\") == \"\"\"\n1 1 8\n\"\"\"\nassert solution(\"\"\"\n1\n12\n\"\"\") == \"\"\"\n1 1 10\n\"\"\"\nassert solution(\"\"\"\n1\n16\n\"\"\") == \"\"\"\n1 1 14\n\"\"\"\nassert solution(\"\"\"\n1\n18\n\"\"\") == \"\"\"\n1 1 16\n\"\"\"\nassert solution(\"\"\"\n1\n20\n\"\"\") == \"\"\"\n1 1 18\n\"\"\"\nassert solution(\"\"\"\n1\n22\n\"\"\") == \"\"\"\n1 1 20\n\"\"\"\nassert solution(\"\"\"\n1\n24\n\"\"\") == \"\"\"\n1 1 22\n\"\"\"\nassert solution(\"\"\"\n1\n26\n\"\"\") == \"\"\"\n1 1 24", "solution('''\n5\n1\n5\n10\n42\n84\n''') == '''\n1 1 1\n1 1 3\n2 3 5\n3 6 33\n4 5 25\n'''", "solution(INPUT) == EXPECTED_OUTPUT", "solution(\"5\\n10\\n14\\n7\\n15\\n9\") == \"1 1 8\\n1 2 11\\n1 2 4\\n1 4 10\\n1 4 4\"", "solution('''\n2\n10\n15\n''') == '''\n1 3 6\n1 3 11\n'''", "solution('''\n3\n10\n30\n1000\n''') == '''\n2 3 5\n15 5 10\n250 250 500\n'''\n\n# check the performance of solution\nimport timeit\n\nassert timeit.timeit(lambda: solution('''\n3\n10\n30\n1000\n'''), number=1) < 1 # second", "solution('''\n2\n10\n12\n''') == '''\n1 3 6\n2 3 7\n'''", "solution('''\n5\n15\n16\n20\n40\n100\n''') == '''\n1 6 8\n1 8 7\n1 9 10\n1 20 19\n1 40 39\n'''\n\nassert solution('''\n1\n1\n''') == '''\n1 1 1\n'''\n\n# check the performance of solution\nimport timeit\n\ndef checkPerformance(input_str: str, iterations: int = 10) -> float:\n    def get_time():\n        t = timeit.Timer(stmt=lambda: solution(input_str))\n        return t.timeit(number=iterations) / iterations\n\n    return get_time()\n\nassert checkPerformance('''\n10\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n''') < 1.0, 'You solution is too slow'\n\nprint('Accepted!')", "solution('''\n2\n10\n11\n''') == '''\n1 3 6\n1 4 6\n'''\nassert solution('''\n3\n12\n14\n18\n''') == '''\n1 3 8\n1 5 8\n2 3 7\n2 5 7\n2 4 8\n2 6 8\n1 3 9\n1 5 9\n'''\nassert solution('''\n1\n1000\n''') == '''\n1 2 997\n1 3 996\n1 4 995\n1 5 994\n1 6 993\n1 7 992\n1 8 991\n1 9 990\n1 10 989\n1 11 988\n1 12 987\n1 13 986\n1 14 985\n1 15 984\n1 16 983\n1 17 982\n1 18 981\n1 19 980\n1 20 979\n1 21 978\n1 22 977\n1 23 976\n1 24 975\n1 25 974\n1 26 973\n1 27 972\n1 28 971\n1 29 970\n1 30 969\n1 31 968\n1 32 967\n1 33 966\n1 34 965\n1 35 964\n1 36 963\n1 37 962\n1 38 961\n1 39 960\n1 40 959\n1 41 958\n1 42 957\n", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution('''\n3\n16\n24\n27\n''') == '''\n3 2 11\n3 2 7\n3 2 8\n'''\n\nif __name__ == '__main__':\n    input_str = stdin.read()\n    print(solution(input_str))", "solution('''3\n27\n49\n34''') == '''4 6 17\n4 9 36\n4 6 24'''\n\n# verify solution against input\nassert solution('''5\n35\n66\n77\n88\n99''') == '''4 6 25\n4 6 56\n4 6 73\n4 6 84\n4 6 95'''\n\n# get the input\nstdin = open('input.txt', 'r')\ninput = stdin.read()\n\n# present solution\nsolution(input)", "solution('''\n1\n10\n''') == '''\n2 3 5\n'''\n\nassert solution('''\n1\n16\n''') == '''\n3 5 8\n'''\n\nassert solution('''\n1\n100\n''') == '''\n11 14 75\n'''\n\nassert solution('''\n1\n1000\n''') == '''\n83 97 830\n'''\n\nassert solution('''\n2\n8\n16\n''') == '''\n2 2 4\n3 5 8\n'''\n\nassert solution('''\n3\n10\n100\n1000\n''') == '''\n2 3 5\n11 14 75\n83 97 830\n'''\n\n# if it is not a test environment, then read input from stdin\nif __name__ == '__main__':\n    from sys import stdin\n    print(solution(stdin.read()))", "solution('''\n3\n10\n18\n103\n''') == '''\n1 4 5\n4 6 8\n9 25 69\n'''\n\n# check the correctness of solution with large inputs\nimport random\nfrom string import ascii_letters\ndef solution_large(stdin: str) -> str:\n    pass\n\nfor _ in range(100):\n    T = random.randint(1, 10 ** 5)\n    tests = []\n    ans = []\n    for _ in range(T):\n        n = random.randint(10, 10 ** 9)\n        tests.append(f'{n}\\n')\n        a = random.randint(1, n // 3)\n        while n - a - a <= 0:\n            a = random.randint(1, n // 3)\n        b = random.randint(1, n - a - a)\n        c = n - a - b\n        ans.append(f'{a} {b} {c}\\n')\n    stdin = f'{T}\\n' + ''.join(tests)\n    solution_large(stdin) == ''.join(ans)", "solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\nassert solution('''\n''') == '''\n'''\n\n# use this to create input for local test\n# generate input\n# def gen_input(seed: int) -> str:\n#     pass\n\n# copy paste to online judge\n# import sys\n# input_str = sys.stdin.read()\n# print(solution(input_str))", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution(\"\"\"\n3\n10\n1\n1000\n\"\"\") == \"\"\"\n3 3 4\n-1\n25 5 20\n\"\"\"\n\ndef read_input(stdin: str) -> (int, list):\n    lines = stdin.split(\"\\n\")\n    return int(lines[0]), [int(x) for x in lines[1:-1]]\n\ndef write_output(output: str) -> str:\n    return output\n\ndef main():\n    test_cases = int(input())\n    for _ in range(test_cases):\n        n = int(input())\n        found = False\n        for a in range(1, n):\n            for b in range(a + 1, n):\n                if a + b + gcd(a, b) == n:\n                    print(a, b, gcd(a, b))\n                    found = True\n                    break\n            if found:\n                break\n        if not found:\n            print(-1)\n\nmain()", "solution('''\n2\n10\n11\n''') == '''\n2 3 5\n3 4 4\n'''\n\nassert solution('''\n3\n20\n11\n0\n''') == '''\n4 5 11\n3 4 4\n0\n'''", "solution('''1\n10''') == '''2 2 6'''\nassert solution('''1\n3''') == '''1 1 1'''\nassert solution('''1\n8''') == '''2 2 4'''\nassert solution('''1\n12''') == '''2 2 8'''\nassert solution('''1\n9''') == '''1 2 6'''\nassert solution('''1\n100''') == '''3 4 93'''\nassert solution('''1\n133''') == '''4 7 122'''\nassert solution('''1\n38''') == '''4 5 29'''\nassert solution('''1\n18''') == '''3 4 11'''\nassert solution('''1\n1''') == '''1 1 1'''\nassert solution('''1\n2''') == '''1 1 1'''\nassert solution('''1\n5''') == '''1 1 3'''\nassert solution('''1\n6''') == '''1 1 4'''\nassert solution('''1\n7''') == '''1 1 5'''\nassert solution('''1\n11''') == '''1 2 8'''\nassert solution('''1\n13''') == '''1 3 9", "solution('''\n2\n10\n20\n''') == '''\n2 3 5\n2 4 14\n'''\nassert solution('''\n3\n56\n8\n64\n''') == '''\n3 7 8\n2 4 2\n8 8 8\n'''\nassert solution('''\n1\n100000000\n''') == '''\n33333333 33333334 33333339\n'''\n\n# check the performance of solution\nimport timeit\nt = '''\nfrom __main__ import solution\n'''\ntimeit.timeit(solution('''\n1\n100000000\n'''), number=1, setup=t)", "solution('''\n5\n6\n13\n123\n142857\n42\n'''.strip()) == '''\n1 2 3\n1 5 7\n11 111 1\n11 111 11\n7 12 21\n'''.strip()", "solution(stdin) == stdout", "solution('''\n1\n10\n''') == '''\n3 1 6\n'''\n\nassert solution('''\n2\n15\n20\n''') == '''\n3 5 7\n3 4 13\n'''\n\nprint('All ok')", "solution(\"3\\n14\\n31\\n100\") == \"\"\"2 2 10\n2 10 19\n2 3 95\"\"\"", "solution(\"42\") == \"1 9 32\"\nassert solution(\"36\") == \"2 4 30\"\nassert solution(\"99\") == \"2 11 86\"\nassert solution(\"16\") == \"1 2 13\"\nassert solution(\"987654321\") == \"71747040 54969552 66412168\"\nassert solution(\"999999999\") == \"33333337 33333338 33333334\"\nassert solution(\"1000000001\") == \"333333334 333333334 333333333\"\nassert solution(\"1000000001\\n42\") == \"333333334 333333334 333333333\\n1 9 32\"", "solution('''3\n10\n120\n7\n''') == '''1 9 10\n27 30 63\n1 1 5\n'''", "solution('''\n2\n2\n9\n''') == '''\n1 1 0\n3 2 4\n'''\n\n# test speed\nimport timeit\nprint(timeit.timeit('''\ndef solution(stdin: str) -> str:\n    pass\n''', '''\ndef solution(stdin: str) -> str:\n    pass\n''', number=100))", "solution(\"\"\"1\n10\"\"\") == \"\"\"2 3 5\"\"\"\n\n# submit the solution to codeforces\nimport requests\ndef submit_solution():\n    url = 'http://codeforces.com/problemset/submit'\n    data = {\n        'csrf_token': '',\n        'action': 'submitSolutionFormSubmitted',\n        'submittedProblemCode': '',\n        'programTypeId': '',\n        'source': solution(''),\n        'sourceFile': '',\n        'tabSize': '',\n        'stderr': '',\n        'input': '',\n        'expectedOutput': '',\n        'memoryLimit': '',\n        'timeLimit': '',\n        'challengeType': '',\n        '_tta': '',\n    }\n    headers = {\n        'Cookie': '_ga=GA1.2.1292772290.1580248675; _gid=GA1.2.1538444475.1580248675; cf_clearance=a1a8f2f4a3a7f1d3f9c852b9f67c5ea5af5d5b50-1580248761-0-1z5z5z5z5z5z5", "solution(\"6\\n10\\n12\\n15\\n16\\n18\\n19\") == \\\n    \"1 2 7\\n3 4 5\\n5 4 6\\n2 8 6\\n3 6 9\\n3 8 8\"\n\n# faster submission", "solution(\"\"\"\n1\n10\n\"\"\") == \"\"\"\n1 9 1\n\"\"\"\n\n# obtain input for the problem\ndef get_input(source: str = __file__) -> str:\n    \"\"\"Returns the input of the problem as a string.\"\"\"\n    with open(source.replace('.py', '.in'), 'r') as file:\n        return file.read()\n\n# execute the solution function with the input (stdin)\nsolution(get_input())", "solution(\"\") == \"\"", "solution('''\n1\n15\n''') == '''\n1 14 14\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n21\n28\n''') == '''\n1 20 7\n1 27 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n10\n12\n35\n''') == '''\n1 9 1\n1 6 5\n1 34 34\n'''\n\n# submit solution\n\nimport sys\ndef readline():\n    return sys.stdin.readline().strip()\n\nT = int(readline())\n\nfor i in range(T):\n    n = int(readline())\n    print(1, n - 2, n - 2)", "solution(\"test\") == \"test\"\n\n# check performance\nstdin = \"test\"\ntimes = list()\nfor _ in range(10000):\n    t = time.time()\n    solution(stdin)\n    times.append(time.time() - t)\nprint(sum(times) / len(times))", "solution(\"1\\n\"\n\"10\") == \"3 2 5\"\nassert solution(\"2\\n\"\n\"10\\n\"\n\"50\") == \"3 2 5\\n\" \\\n\"5 5 40\"\nassert solution(\"3\\n\"\n\"100\\n\"\n\"1000\\n\"\n\"100000\") == \"8 20 72\\n\" \\\n\"16 96 888\\n\" \\\n\"3960 6009 54331\"", "solution('''\n3\n12\n8\n20\n''') == '''\n3 4 5\n1 2 5\n3 8 9\n'''\n\nassert solution('''\n3\n1\n2\n10\n''') == '''\n1 1 1\n1 1 1\n1 4 5\n'''\n\n# check the performance of solution\nassert solution('''\n1\n10000000000000000\n''') == '''\n10000000000000003 49999999999999997 49999999999999998\n'''\n\n# submit solution to codeforces\n#solution(sys.stdin.read())", "solution('''\n2\n11\n12\n''') == '''\n2 5 4\n3 4 5\n'''", "solution('''1\n10''') == '''3 3 4'''\nassert solution('''4\n12\n13\n15\n24''') == ''''''\n\n# you can also test your own implementation with custom test\n# which can be done with input from file (like problem 1) or from user\n\n# you can also use python interactively\n# as usually we recommend in problem \"meet the interpreter\"\n# this is just an example how to do it\n# make sure that you actually use your solution function\n\nimport sys\n\ndef parse_line(line: str) -> int:\n    '''\n    Parse single line of input.\n    '''\n    return int(line)\n\ndef main():\n    '''\n    The main function.\n    '''\n    while True:\n        try:\n            number = int(input('Enter number: '))\n        except EOFError:\n            sys.exit(0)\n        print(solution(number))\n\nif __name__ == '__main__':\n    main()", "solution('''\n3\n10\n12\n15\n''') == '''\n2 3 5\n3 4 5\n4 6 5\n'''", "solution(\"\") == \"\"\n\nprint(\"Passed all the tests!\")", "solution('''1\n10''') == '''1 3 6'''\nassert solution('''2\n10\n100''') == '''1 3 6\n1 1 98'''\nassert solution('''3\n10\n100\n1000''') == '''1 3 6\n1 1 98\n9 21 70'''\n\nassert solution('''6\n10\n100\n1000\n10000\n100000\n1000000''') == '''1 3 6\n1 1 98\n9 21 70\n65 5994 9341\n7715 15123 53862\n5001 56967 72432'''\n\nassert solution('''6\n10\n100\n1000\n10000\n100000\n1000000''') == '''1 3 6\n1 1 98\n9 21 70\n65 5994 9341\n7715 15123 53862\n5001 56967 72432'''\n\nassert solution('''10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '''1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 3 6'''", "solution(\"\"\"\n5\n10\n1\n100\n123\n1234\n\"\"\") == \"\"\"\n2 3 5\n-1\n5 20 75\n1 20 102\n5 673 656\n\"\"\"", "solution('''\n5\n6\n8\n9\n10\n11\n''') == '''\n1 2 3\n1 3 4\n1 2 6\n1 4 5\n3 4 4\n'''", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution('''\n3\n10\n24\n20\n''') == '''\n1 3 6\n2 8 14\n2 4 14\n'''", "solution('''\n2\n20\n1\n''') == '''\n5 4 11\n1 1 1\n'''", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution"], "finish_reason": ["stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-29.4307183415, -36.85745483729999, -5.625326461, -47.002152926929995, -72.41168462010296, -36.302546552399996, -11.180133829239999, -37.17367613639999, -14.083827201000002, -46.07053345613999, -13.1149101087, -116.79147162671003, -57.20371547256403, -7.513653155799998, -46.93098172415001, -107.51393897423002, -91.18053767152794, -112.70323159882798, -83.55833425022, -13.182878679659986, -99.98537644987407, -40.6084031553, -91.76376928624363, -89.88265241257002, -59.14284578520001, -5.657528182299999, -34.88726001717, -35.90832671177, -146.85284907917, -33.722467934, -37.71736347326999, -266.5121688292731, -62.08514763626002, -49.10775788150799, -5.19786453, -90.14942107636604, -41.69442683191999, -74.28784897068599, -76.48627301585996, -14.007658578700003, -254.24269348553017, -17.999011199799998, -14.35152365154, -137.4076248132379, -53.43472823599999, -24.1430406012, -7.40377742571, -22.967574023499996, -17.4577896673, -13.982279616023504], "mean_logprob": [-0.8656093629852941, -0.624702624361017, -0.6250362734444445, -0.6351642287422973, -0.24137228206701, -0.7891857946173914, -0.7985809878028571, -0.8081233942695651, -0.5029938286071428, -0.57588166820175, -0.4683896467392857, -0.5697144957400487, -0.19067905157521334, -0.37568265779, -0.6901614959433824, -0.9111350760527966, -0.4341930365310857, -0.4236963593940902, -0.6527994863298437, -0.0439429289322, -0.43853235285032455, -0.6549742444403226, -0.3058792309541453, -0.6114466150514966, -1.1373624189461538, -0.6286142424777778, -0.5913094918164407, -1.2824402397060715, -1.056495317116331, -1.0538271229375, -0.4190818163696667, -0.8883738960975767, -1.0013733489719354, -0.45470146186581484, -0.866310755, -0.5302907122139177, -0.5634382004313514, -0.7212412521425825, -0.5582939636194161, -0.5002735206678571, -1.0682466112837394, -0.5293826823470589, -0.84420727362, -0.5014876818001387, -1.1874384052444444, -0.5248487087217392, -0.462736089106875, -0.6755168830441176, -0.6234924881178572, -0.04660759872007833]}
{"prompt": "'''\nYou are given strings S and T, consisting of lowercase English letters. It is guaranteed that T is a permutation of the string abc. \n\nFind string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\nString a is a permutation of string b if the number of occurrences of each distinct character is the same in both strings.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) elements.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a \u2260 b;\n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains a string S (1 \u2264 |S| \u2264 100), consisting of lowercase English letters.\n\nThe second line of each test case contains a string T that is a permutation of the string abc. (Hence, |T| = 3).\n\nNote that there is no limit on the sum of |S| across all test cases.\n\nOutput\n\nFor each test case, output a single string S', the lexicographically smallest permutation of S such that T is not a subsequence of S'.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(stdin) == \"abc\"", "solution('''\n''') == '''\n'''", "solution(stdin) == stdout", "solution(\"\"\"\n3\ncba\nabc\na\nabc\ncba\nabc\n\"\"\") == \"\"\"\nacb\na\nacb\n\"\"\"\n\n# start running your code\nif __name__ == \"__main__\":\n    stdin = input()\n    print(solution(stdin))", "solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n", "solution('''\n2\na\na\naaa\nabc\n''') == '''\nb\naa\n'''", "solution(\"\"\"\n3\na\nabc\naa\nabc\nabc\nabc\n\"\"\") == '''\naa\naab\nbbc\n'''", "solution(tst_stdin) == stdout", "solution(SAMPLE) == ANSWER\n\n# check that there are no extra newlines\nassert RE_NEWLINE.sub('', solution(INPUT)) == RE_NEWLINE.sub('', ANSWER)\n\n# print(solution(INPUT))", "solution(stdin) == stdout\n\n# check the correctness of solution with random inputs\n# create a random string S\nletters = 'abcdefghijklmnopqrstuvwxyz'\n\n# create the permutation T\nT = 'abc'\n\n# create the test cases \ntest_cases = []\nfor _ in range(t):\n    S = ''\n    for _ in range(random.randint(1, 100)):\n        S += random.choice(letters)\n    test_cases.append(S)\n\n# run the solution and check if it returns the right answer\nfor S in test_cases:\n    assert solution(S) == stdout", "solution(\"\"\"\n2\naab\nbaa\ncbba\ncba\n\"\"\") == \"\"\"\naab\ncbba\n\"\"\"\n\nassert solution(\"\"\"\n5\nabbc\nabc\nabbcc\nabc\nabbccc\nabc\nabcabcabc\nabc\nabcabcabcabc\nabc\naaabbbcccddd\nabc\n\"\"\") == \"\"\"\nabcb\nabbc\nabbcc\nabcabcabc\nabcabcabcabc\n\"\"\"\n\nassert solution(\"\"\"\n4\naab\nab\nabaa\na\ncbc\nbc\nbcbcbc\nbc\nbcbcbcbcbcbc\nbc\n\"\"\") == \"\"\"\naab\nabaa\ncbc\nbcbcbcbcbcbc\n\"\"\"\n\n# submit to the judge\nif __name__ == '__main__':\n    import fileinput\n    input = fileinput.input(mode='UNBUFFERED')\n    print(solution(input.read()))", "solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\nassert solution(\"abcabcabcabc\") == \"abcabcabc", "solution('''\n\n''') == '''\n\n'''\n# get the input\nt = int(input())\nins = []\nfor i in range(t):\n    ins.append(input())\n    ins.append(input())\n#\nprint(solution(ins))", "solution(\"3\\nabcd\\nbac\\nabacab\\nba\\nabacabacabacabacaba\\ncba\") == \"abcd\\nabacab\\nabacabacabacabacaba\", \"Testcase 0 failed.\"\nprint(\"Testcase 0 passed.\")\n\n# submission\ndef get_input():\n    T = int(input())\n    for t in range(T):\n        s = input()\n        t = input()\n        yield s, t\n\ndef judge(s: str, t: str) -> str:\n    if t in s:\n        return s\n    else:\n        while t not in s:\n            # do some permutation\n            return s\n\n# accepted\nif __name__ == \"__main__\":\n    for s, t in get_input():\n        print(judge(s, t))", "solution('''4\nabcabcabc\nabc\nabcabcabc\nbac\nzzzzzzzzz\nzzz\nabacabacab\nbac\n''') == '''10\n1\n2\n2\n'''", "solution('''2\nabcba\nabc\nabc\nabc''') == '''abcba\nabd'''", "solution(\"\"\"\n6\ncat\nabc\ncbacba\nabc\nbaacba\nabc\ncbcacb\nabc\nbcacbc\nabc\nbcacbcac\nabc\nacbcacbc\nabc\nbcacbcacbc\nabc\nbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbcacbc", "solution(stdin='''\n2\nabacaba\nabc\nabacaba\nbac\n''') == '''\nabacaba\nbacabaa\n'''", "solution(r'''\n2\nzyx\nzyx\n\nxyz\nzyx\n''') == r'''\nzyx\nxyz\n'''\n\nassert solution(r'''\n4\nw\nw\n\ntopcoder\ntopcoder\n\nabc\nabc\n\nabc\nbca\n''') == r'''\nw\ntopcoder\nabc\nabc\n'''\n\nassert solution(r'''\n1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "solution(\"\"\"2\nabacabc\nabc\naacabc\nabc\"\"\") == \"\"\"acbc\naacbc\"\"\"", "solution('''\n    1\n    abc\n    abc\n''') == 'aaa'", "solution('''1\nabcd\nabc''') == 'acd'\nassert solution('''3\nabcd\nabc\nxyz\nz\na\naz''') == 'acd\\nz\\na'", "solution('''3\nabc\nabc\nabc\nabc\nabcdef\nabc\n''') == '''abc\nabbc\nabcd\n'''", "solution('''\n3\naab\nabc\nabacab\nbac\nzzz\nzzz\n''') == '''\nabab\nabb\nz\n'''", "solution('''\n2\ncba\nabc\naab\nabc\n''') == '''\nccc\naab\n'''", "solution('''\n3\naab\nabc\nabx\nabc\nxxyyzz\nabc\n''') == '''\naab\naab\nabx\n'''", "solution(\"\"\"\n5\nabc\nabc\naabcd\nabc\nxx\nabc\nabcabcabc\nabc\nabcabcabcd\nabc\naabbcc\nabc\n\"\"\") == \"\"\"\nabc\naabcd\nxx\nabcabcabc\naabbcc\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\naaaa\nabc\n\"\"\") == \"\"\"\naaaa\n\"\"\"", "(solution('''2\nabc\nabc\nabc\nxyz\n''') == '''ab\nabc''')", "solution('''3\naaa\nbcc\nabbc\naac\naaba\nbcc''') == '''aaa\nabbc\naaac'''", "solution(stdin) == stdout\n \n# run unit tests\n# pytest -v task_name.py\n\n# run unit tests with a code coverage\n# pytest --cov=solution.py task_name.py\n\n# execute with a code coverage and html report\n# pytest --cov=solution.py --cov-report html:cov_html task_name.py\n\n# execute only specific test by their name\n# pytest -k \"test_name_without_decorator\"\n\n# run with a memory profiler\n# pytest --memory-profile=memory.prof task_name.py\n\n# display the top 10 slowest tests\n# pytest --durations=10", "solution('''1\nabb\nbac''') == 'aaa'\nassert solution('''1\nccc\nabc''') == 'aaa'\nassert solution('''1\na\nabc''') == 'aa'\nassert solution('''1\nabcabcabc\nabc''') == 'aaabcabc'\nassert solution('''1\nacccc\nabc''') == 'aaaccc'\nassert solution('''1\naaa\nabc''') == 'aab'\nassert solution('''1\nab\nabc''') == 'a'\nassert solution('''1\na\na''') == 'a'\nassert solution('''1\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc", "solution('''\n2\nabc\nabc\naabc\nabc\n''') == '''\na\nbc\n'''", "solution(\"Input\") == \"output\"", "solution(\"\"\"\n2\nabcdef\nabc\nabcdef\nabcd\n\"\"\") == \"\"\"\ndef\ndef\n\"\"\"", "solution(\"\"\"\n5\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\n\"\"\") == \"\"\"\nabc\naaa\nabb\nabb\naba\nabb\naab\naaa\naba\nabb\n\"\"\"", "solution(\"3\\n\\\nabc\\n\\\nabc\\n\\\nabc\\n\\\nabc\\n\\\naaa\\n\\\nabc\") == \"bca\\n\\\nbca\\n\\\naab\"\n\n# input from stdin\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        print(solution(input()))", "solution('''\n1\nabc\nabc\n''') == 'abc'\n\n# check if the solution can handle a very large number of cases\ncases = '''\n1\naaaaaaaaaa\naaa\n'''\nfor i in range(1000):\n    cases += f'{i + 2}\\n' + 'a' * 100 + '\\n' + 'aaa' + '\\n'\nassert solution(cases) == 'aaa'", "solution(sample_input) == sample_output\n\n# get inputs and call the solution\n# t = int(input())\n# for i in range(t):\n#     stdin = [input() for i in range(2)]\n#     print(solution(stdin))", "solution(input_text) == \"abca\"\n\nprint(solution(input_text))", "solution('''\n2\nabc\nabc\nabc\ncba\n''') == '''\nab\nab\n'''", "solution('''\n\n''') == '''\n\n'''", "solution('''\n3\nabc\nabc\nabcdef\nabc\nzzz\nabc\n''') == '''\nabc\ncba\nzzz\n'''", "solution(\"\"\"1\nbabcbabcbaccba\nabc\n\"\"\") == \"abacbabcbaccba\"\nassert solution(\"\"\"1\nbabcbabcbaccba\ncba\n\"\"\") == \"ababcbabcbabcc\"\nassert solution(\"\"\"1\na\nabc\n\"\"\") == \"aabc\"\nassert solution(\"\"\"1\naa\nabc\n\"\"\") == \"aabc\"\nassert solution(\"\"\"1\nbabcbabcbaccba\nacb\n\"\"\") == \"abacbabcbaccba\"\nassert solution(\"\"\"1\nbabcbabcbaccba\nacb\n\"\"\") == \"abacbabcbaccba\"\nassert solution(\"\"\"1\naabc\nabc\n\"\"\") == \"aabc\"\nassert solution(\"\"\"1\nbabcbabcbabcc\nabc\n\"\"\") == \"ababcbabcbabcc\"\nassert solution(\"\"\"1\nabcab\nabc\n\"\"\") == \"abacab\"\nassert solution(\"\"\"1\naba\nabc\n\"\"\") == \"aab\"\nassert solution(\"\"\"1\nabca\nabc\n\"\"\") == \"abca\"\nassert solution(\"\"\"1\nbabcbabcbabccbabcbabcbabccbabcbabcbabccbabcbabcbabccbabcbabcbabcc", "solution('''\n2\nabc\nbca\nxyz\nzx\n''') == '''\naba\nzyx\n'''", "solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\nassert solution(\"\") == \"\"\n\n# print test data information\nprint(\"Test data:\")\nprint(\"\")\nprint(\"Input:\")\nprint(\"\")\nprint(\"Expected output:\")\nprint(\"\")\nprint(\"Performance:\")\nprint(\"\")", "solution('''\n5\nabca\nabc\naab\nabc\nxyxz\nabc\nabcaa\nabc\nabc\nabc\n''') == '''\naab\nabca\naab\nabca\n'''", "solution('''2\nabc\nabc\nabc\nabc\n''') == '''abc\nabb\n'''", "solution('''\n5\nabcd\ncba\nabcd\nbac\nabcd\nbca\nabcdefghijklmnopqrstuvwxyz\ncde\nabcdefghijklmnopqrstuvwxyz\nabc\nabcdefghijklmnopqrstuvwxyz\nabc\nabcdefghijklmnopqrstuvwxyz\n''') == '''\nabdc\nacd\nabcd\nacd\nabcd\nacd\nabcdefghijklmnopqrstuvwxzy\nad\n'''", "solution(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc", "solution(\"tarttf\") == \"artfft\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"bbb\") == \"aaa\"\nassert solution(\"abracadabra\") == \"abracadabra\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"abcabc\") == \"abcabc\"\nassert solution(\"abcabcabc\") == \"abcabcabc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"aaaaaa\") == \"aaaaaa\"\nassert solution(\"aaaa\") == \"aaa\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aa\") == \"aa\"\nassert solution(\"aaa\") == \"aaa\"\nassert solution(\"aaaa\") == \"aaa\"\nassert solution(\"aaaaa\") == \"aaaa\"\nassert solution(\"aaaaaa\") == \"aaaaa\"\nassert solution(\"aaaaaaa\") == \"aaaaaa\"\nassert solution(\"aaaaaaaa\") == \"aaaaaaa\"\nassert solution(\"aaaaaaaaa\") == \"aaaaaaaa\"\nassert solution(\"aaaaaaaaaa\") == \"aaaaaaaaa\"\nassert solution(\"bca\") == \"aaa\"\nassert solution(\"bcaa\") == \"aaaa\"\nassert solution(\"bcaaa\") == \"aaaaa\"\nassert solution(\"bcaaaa\") == \"aaaaaa\"\nassert solution(\"bcaaaaa\") == \""], "finish_reason": ["stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length"], "sum_logprob": [-11.155458723699999, -6.74496851, -5.8490753425, -50.96586108258999, -18.520852140483978, -22.570420578999997, -27.3121586595, -18.199192752000002, -51.284020495009976, -103.25869177020003, -165.4410992911702, -26.85734839899401, -39.564065938839995, -143.99498869844004, -52.142331562000024, -22.600358105999995, -78.76159159440004, -28.571848445800004, -76.94399857706007, -31.977157491, -16.839839821700004, -41.75539242039998, -27.142353730000004, -36.8239103468, -22.487539530600003, -33.3799181306, -64.19048947294003, -23.888788296099996, -39.164468133, -130.72309401727, -89.11139282741905, -19.605580895000006, -12.984391988, -23.408529901, -43.57462259800002, -48.901194765974004, -69.79041306050001, -36.862091551819994, -24.633510313100004, -17.8036063504, -7.782086664, -25.372919009299995, -114.38663058672, -24.443096495, -54.493867616700015, -48.4969403234, -20.19896333099999, -71.23841056969998, -17.238163850299998, -121.95000978213403], "mean_logprob": [-1.11554587237, -0.48178346499999997, -0.6498972602777777, -0.7280837297512858, -0.06173617380161334, -0.80608644925, -0.7803473902714285, -1.516599396, -0.8547336749168334, -0.6619146908346154, -0.7694934850752093, -0.08952449466331333, -0.5994555445278787, -0.7163929785992039, -0.9838175766415095, -0.8370503002222223, -0.262538638648, -0.6968743523365853, -0.25647999525686666, -1.1420413389642858, -0.7321669487695652, -0.835107848408, -0.7754958208571429, -0.8981441548, -0.70273561033125, -0.8141443446487805, -0.7132276608104444, -0.8847699368925925, -1.0584991387297298, -0.7922611758622424, -0.29703797609139665, -0.6760545136206897, -1.442710220888889, -0.8360189250357143, -0.8069374555185185, -0.5041360285151959, -0.697904130605, -0.5759701804971875, -1.071022187526087, -0.6139174603586207, -0.4863804165, -0.667708394981579, -0.3812887686224, -0.7884869837096774, -0.42573334075546876, -0.8980914874703704, -0.7768832050384615, -0.527691930145926, -0.057460546167666667, -0.4065000326071133]}
{"prompt": "'''\nChristmas is coming, Icy has just received a box of chocolates from her grandparents! The box contains n chocolates. The i-th chocolate has a non-negative integer type a_i.\n\nIcy believes that good things come in pairs. Unfortunately, all types of chocolates are distinct (all a_i are distinct). Icy wants to make at least one pair of chocolates the same type. \n\nAs a result, she asks her grandparents to perform some chocolate exchanges. Before performing any chocolate exchanges, Icy chooses two chocolates with indices x and y (1 \u2264 x, y \u2264 n, x \u2260 y).\n\nIn a chocolate exchange, Icy's grandparents choose a non-negative integer k, such that 2^k \u2265 a_x, and change the type of the chocolate x from a_x to 2^k - a_x (that is, perform a_x := 2^k - a_x).\n\nThe chocolate exchanges will be stopped only when a_x = a_y. Note that other pairs of equal chocolate types do not stop the procedure.\n\nIcy's grandparents are smart, so they would choose the sequence of chocolate exchanges that minimizes the number of exchanges needed. Since Icy likes causing trouble, she wants to maximize the minimum number of exchanges needed by choosing x and y appropriately. She wonders what is the optimal pair (x, y) such that the minimum number of exchanges needed is maximized across all possible choices of (x, y).\n\nSince Icy is not good at math, she hopes that you can help her solve the problem.\n\nInput\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of chocolates.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that all a_i are distinct.\n\nOutput\n\nOutput three integers x, y, and m.\n\nx and y are indices of the optimal chocolates to perform exchanges on. Your output must satisfy 1 \u2264 x, y \u2264 n, x \u2260 y.\n\nm is the number of exchanges needed to obtain a_x = a_y. We can show that m \u2264 10^9 for any pair of chocolates.\n\nIf there are multiple solutions, output any.\n\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(TEST_CASES['example']) == ANSWERS['example']\n\nsolution(TEST_CASES['small']) == ANSWERS['small']", "solution(sys.stdin.read()) == sys.stdout.read()", "solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n7 8 6\n'''\n\n# test the performance of solution\nimport timeit\nimport random\ndef gen_random_str(n):\n    return ''.join(str(i) for i in [random.randint(1,10**9) for i in range(n)])\n\ndef test_performance():\n    n = 10**5\n    print(timeit.timeit(\n        stmt=f\"solution(f'''\\n{n}\\n{gen_random_str(n)}\\n''')\",\n        setup=\"from __main__ import solution\",\n        number=100\n    ))\n\n# test_performance()", "solution(open('tests/example_1.in').read()) == open('tests/example_1.out').read()\n# run solution on the test data (and measure execution time)\nimport time\nstart = time.time()\nprint(solution(open('tests/small.in').read()))\nend = time.time()\nprint(f'{end - start} seconds elapsed')", "solution(test_data) == stdout_test_data", "solution('''\n1\n10\n''') == '''\n1 1 0\n'''\nassert solution('''\n2\n1 2\n''') == '''\n1 2 0\n'''\nassert solution('''\n3\n3 2 1\n''') == '''\n2 3 3\n'''\nassert solution('''\n3\n1 2 3\n''') == '''\n1 2 1\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1 5 1\n'''\nassert solution('''\n3\n4 1 5\n''') == '''\n1 3 2\n'''\nassert solution('''\n5\n5 4 5 3 2\n''') == '''\n2 3 3\n'''\nassert solution('''\n5\n5 2 5 3 2\n''') == '''\n1 2 1\n'''\nassert solution('''\n2\n2 4\n''') == '''\n1 2 1\n'''\nassert solution('''\n2\n2 3\n''') == '''\n1 2 1\n'''\nassert solution('''\n2\n6 8\n''') == '''\n1 2 1\n'''\nassert solution('''\n2\n16 14\n''') == '''\n1 2 1\n'''\nassert solution", "solution(\"\"\"\n2\n1 3\n\"\"\") == \"\"\"\n1 2\n2\n\"\"\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"\"\"\n1 2\n3\n\"\"\"\nassert solution(\"\"\"\n3\n3 2 1\n\"\"\") == \"\"\"\n1 2\n3\n\"\"\"\nassert solution(\"\"\"\n4\n1 3 2 4\n\"\"\") == \"\"\"\n1 2\n4\n\"\"\"\nassert solution(\"\"\"\n4\n4 2 3 1\n\"\"\") == \"\"\"\n1 2\n4\n\"\"\"\nassert solution(\"\"\"\n4\n1 1 1 1\n\"\"\") == \"\"\"\n1 2\n0\n\"\"\"\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"\"\"\n1 2\n0\n\"\"\"\nassert solution(\"\"\"\n5\n1 3 5 2 4\n\"\"\") == \"\"\"\n1 2\n5\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 5 4 3\n\"\"\") == \"\"\"\n1 2\n5\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n1 2\n0\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 5 4 6\n\"\"\") == \"\"\"\n1 2\n3\n\"\"\"\nassert solution(\"\"\"\n5\n5 1 2 3 4\n\"\"\") == \"\"\"\n1 2\n5\n\"\"\"\nassert solution(\"\"\"\n6\n1 3 5 2 4", "solution(read_input('1')) == read_output('1')\n\n# run the solution\n#assert solution(read_input('1')) == read_output('1')\n#assert solution(read_input('2')) == read_output('2')\n#assert solution(read_input('3')) == read_output('3')\n#assert solution(read_input('4')) == read_output('4')\n#assert solution(read_input('5')) == read_output('5')\n#assert solution(read_input('6')) == read_output('6')\n#assert solution(read_input('7')) == read_output('7')\n#assert solution(read_input('8')) == read_output('8')\n#assert solution(read_input('9')) == read_output('9')\n#assert solution(read_input('10')) == read_output('10')\n#assert solution(read_input('11')) == read_output('11')\n#assert solution(read_input('12')) == read_output('12')\n#assert solution(read_input('13')) == read_output('13')\n#assert solution(read_input('14')) == read_output('14')\n#assert solution(read_input('15'))", "\"7\\n\" == solution(\"7\\n1 2 3 4 5 6 7\\n\")\nassert \"1 2\\n\" == solution(\"4\\n6 1 5 7\\n\")\nassert \"4 7\\n\" == solution(\"8\\n1 2 4 8 16 32 64 128\\n\")\nassert \"2 4\\n\" == solution(\"8\\n3 5 7 9 11 13 15 17\\n\")\nassert \"2 3\\n\" == solution(\"10\\n1 3 5 7 9 11 13 15 17 19\\n\")\nassert \"2 3\\n\" == solution(\"6\\n1 2 3 4 6 8\\n\")\nassert \"1 2\\n\" == solution(\"5\\n1 2 4 8 16\\n\")\nassert \"2 3\\n\" == solution(\"5\\n1 3 5 7 9\\n\")\nassert \"2 3\\n\" == solution(\"5\\n1 3 5 7 11\\n\")\nassert \"3 4\\n\" == solution(\"5\\n1 3 5 7 9\\n\")\nassert \"3 4\\n\" == solution(\"5\\n1 3 5 7 11\\n\")\nassert \"4 5\\n\" == solution(\"5\\n1 3 5 7 11\\n\")\nassert \"5 6\\n\" == solution(\"5\\n1 3 5 7 11\\n\")\nassert \"1", "solution(stdin='5\\n1 2 3 4 5') == '1 2 1'\nassert solution(stdin='5\\n1 3 5 7 9') == '1 3 3'\nassert solution(stdin='5\\n1 2 4 8 16') == '1 2 4'\nassert solution(stdin='5\\n0 1 2 3 4') == '1 2 0'\nassert solution(stdin='5\\n1 2 3 4 6') == '1 2 2'\nassert solution(stdin='5\\n1 2 4 8 16') == '1 2 4'\nassert solution(stdin='5\\n1 2 3 5 7') == '1 2 2'\nassert solution(stdin='5\\n1 1 1 1 1') == '1 2 0'\nassert solution(stdin='5\\n1 2 4 6 8') == '1 2 2'\nassert solution(stdin='5\\n1 2 4 8 16') == '1 2 4'\nassert solution(stdin='5\\n1 2 4 8 16') == '1 2 4'\nassert solution(stdin='5\\n5 4 3 2 1') == '1 2 0'\nassert solution(stdin='5\\n1 2 4 8 16') == '1 2 4'\nassert solution(stdin='5\\n5 4 3 2 1')", "solution(stdin) == stdout", "solution(\"4\\n1 2 3 4\") == \"2 3 2\"\nassert solution(\"4\\n1 1 1 1\") == \"1 2 0\"\nassert solution(\"2\\n2 2\") == \"1 2 0\"\nassert solution(\"3\\n5 2 1\") == \"2 3 4\"\nassert solution(\"5\\n1 2 4 6 8\") == \"2 3 3\"\nassert solution(\"5\\n5 4 3 2 1\") == \"2 3 3\"\nassert solution(\"5\\n1000000000 1000000000 1000000000 1000000000 1000000000\") == \"2 3 2\"\nassert solution(\"5\\n1 1 1000000000 999999999 1000000002\") == \"2 3 2\"\nassert solution(\"2\\n1 0\") == \"1 2 10\"\nassert solution(\"6\\n1 0 1000000000 999999999 1000000002 6\") == \"1 2 10\"\nassert solution(\"10\\n1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991\") == \"1 2 10\"\nassert solution(\"6\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\") == \"1 2 10\"\nassert solution(\"10\\n1000000000 999999999 999999998 999999997 999999996 9", "solution(sample_input) == sample_output\nassert solution(sample_input2) == sample_output2\nassert solution(sample_input3) == sample_output3\nassert solution(sample_input4) == sample_output4\nassert solution(sample_input5) == sample_output5", "solution('''\n1\n1\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 2\n''') == '''\n1 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 3\n''') == '''\n1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 2 4\n''') == '''\n1 3 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 3 4\n''') == '''\n1 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 4 8\n''') == '''\n1 4 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 5 10\n''') == '''\n1 4 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 3 2 4\n''') == '''\n1 3 3\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 2 3 4 5 6\n''') == '''\n1 2 2\n'''\n\n# check the correctness of solution\n", "solution('''\n2\n2 3\n''') == '''\n1 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1 2 3 4\n''') == '''\n2 3 2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 2 6 7 10\n''') == '''\n2 3 2\n'''\n\n# check the correctness of solution\nassert solution('''\n100000\nsolution('''2\n2 1''') == '1 2 1'\nassert solution('''4\n1 2 3 4''') == '1 2 10'\nassert solution('''4\n4 2 1 4''') == '1 2 0'\nassert solution('''4\n4 4 4 4'') == '1 2 0'\nassert solution('''3\n1 2 3''') == '1 2 9'\nassert solution('''10\n0 8 0 4 8 6 0 8 0 2''') == '1 2 16'\nassert solution('''10\n0 1 0 2 1 2 0 1 0 2''') == '1 2 2'\nassert solution('''10\n0 1 0 2 1 2 0 1 0 2''') == '1 2 2'\nassert solution('''5\n5 4 5 2 5''') == '1 2 16'\nassert solution('''5\n5 4 5 1 5''') == '1 2 3'\nassert solution('''5\n5 5 5 2 5''') == '1 2 0'\nassert solution('''5\n5 5 5 5 5''') == '1 2 0'\nassert solution('''5\n5 4 5 5 5''') == '1 2 0'\nassert solution('''5\n5 4 5 5 3''') == '1 2 3'\n", "solution('''\n4\n1 2 5 3\n''') == '''\n2 4 1\n'''\nassert solution('''\n6\n1 2 4 3 6 8\n''') == '''\n2 5 3\n'''\nassert solution('''\n7\n1 7 5 2 4 6 3\n''') == '''\n4 6 1\n'''\n\n# check the speed of solution\n# timeit(solution, '''\n# 4\n# 1 2 5 3\n# ''')\n# timeit(solution, '''\n# 6\n# 1 2 4 3 6 8\n# ''')\n# timeit(solution, '''\n# 7\n# 1 7 5 2 4 6 3\n# ''')", "solution(\"\") == \"\"\n\n# get the input\n# read the input\nwith open(\"input.txt\", \"r\") as f:\n    text = f.read()\n\n# print the input\nwith open(\"output.txt\", \"w\") as f:\n    f.write(solution(text))", "solution('''\n3\n10 20 30\n''') == '''\n1 2 2\n'''\n\nassert solution('''\n5\n10 14 20 3 9\n''') == '''\n1 2 2\n'''\n\nassert solution('''\n5\n6 5 4 3 2\n''') == '''\n1 2 4\n'''\n\nassert solution('''\n5\n6 4 3 7 9\n''') == '''\n3 5 5\n'''", "solution('''\n5\n1 2 3 4 5\n''') == '''\n1 5 0\n'''\nassert solution('''\n5\n5 3 1 2 4\n''') == '''\n4 5 1\n'''\nassert solution('''\n5\n1 2 4 8 16\n''') == '''\n2 3 3\n'''\nassert solution('''\n5\n2 3 4 5 6\n''') == '''\n3 5 1\n'''\nassert solution('''\n5\n1 2 4 6 8\n''') == '''\n2 5 2\n'''\nassert solution('''\n5\n1 3 2 4 5\n''') == '''\n2 4 1\n'''\nassert solution('''\n5\n5 7 9 10 11\n''') == '''\n2 3 3\n'''\nassert solution('''\n5\n3 5 4 6 7\n''') == '''\n2 3 3\n'''\nassert solution('''\n5\n1 2 3 4 6\n''') == '''\n2 5 2\n'''\nassert solution('''\n5\n1 3 5 2 4\n''') == '''\n2 4 1\n'''\nassert solution('''\n5\n1 2 3 4 7\n''') == '''\n2 5 2\n'''\nassert solution(''", "solution('''\n''') == '''\n'''", "solution(\"5\\n2 3 5 8 1\") == \"1 2 10\", \"wrong answer\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2 0\", \"wrong answer\"\nassert solution(\"2\\n1 3\") == \"1 2 1\", \"wrong answer\"\nassert solution(\"3\\n1 1 1\") == \"1 2 0\", \"wrong answer\"\nassert solution(\"3\\n1 3 2\") == \"1 2 2\", \"wrong answer\"\nassert solution(\"3\\n3 2 1\") == \"1 2 2\", \"wrong answer\"\nassert solution(\"3\\n7 1 1\") == \"1 2 2\", \"wrong answer\"\nassert solution(\"2\\n1 1\") == \"1 2 0\", \"wrong answer\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"1 2 0\", \"wrong answer\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"1 2 0\", \"wrong answer\"\nassert solution(\"5\\n1 2 4 8 16\") == \"1 2 1\", \"wrong answer\"\nassert solution(\"5\\n16 8 4 2 1\") == \"1 2 1\", \"wrong answer\"\nassert solution(\"5\\n2 3 4 5 6\") == \"1 2 0\", \"wrong answer\"\nassert solution(\"5\\n6 5 4 3 2\") == \"1", "solution('''\n5\n1 2 3 4 5\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n3\n3 2 1\n''') == '''\n1 2 2\n'''\n\nassert solution('''\n4\n4 3 2 1\n''') == '''\n1 3 3\n'''\n\nassert solution('''\n7\n4 5 6 7 8 9 10\n''') == '''\n2 3 3\n'''\n\nassert solution('''\n8\n7 7 7 7 7 7 7 7\n''') == '''\n1 2 0\n'''\n\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n8\n8 7 6 5 4 3 2 1\n''') == '''\n1 8 7\n'''\n\nassert solution('''\n8\n10 11 12 13 14 15 16 17\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n8\n10 10 10 10 10 10 10 10\n''') == '''\n1 2 0\n'''\n\nassert solution('''\n8\n8 8 8 8 8 8 8 8\n''') == '''\n1 2 0\n'''\n\nassert solution(''", "solution('''\n2\n1 2\n''') == '''\n1 2 1\n'''\n\n# test all samples\nsample_inputs = open('sample_inputs.txt', 'r').read().splitlines()\nsample_outputs = open('sample_outputs.txt', 'r').read().splitlines()\n\nfor s_in, s_out in zip(sample_inputs, sample_outputs):\n    assert solution(s_in) == s_out\n\nprint('all tests passed')", "solution('''\n5\n1 2 3 4 5\n''') == '''\n3 2 3\n'''\n\nassert solution('''\n5\n1 2 3 4 6\n''') == '''\n2 3 4\n'''\n\nassert solution('''\n5\n1 2 3 5 6\n''') == '''\n2 4 4\n'''\n\nassert solution('''\n5\n1 2 3 6 7\n''') == '''\n2 3 4\n'''\n\n# stress testing\nimport random\ndef value_gen(max_value=10**9):\n    return str(random.randint(0, max_value))\n\ndef stress_solution(length: int) -> str:\n    '''\n    the stress solution is not real solution but a function that\n    generates random output. this is used to test the performance\n    of the original solution with respect to time and memory\n    '''\n    return '\\n'.join([\n        str(length),\n        ' '.join([value_gen() for _ in range(length)])\n    ])\n\n# performance testing\nimport time\ndef get_timestamp() -> float:\n    return time.time()\n\ndef performance_test(\n    solution_function, \n    length: int, \n    expected_result: str, \n", "solution('''\n2\n1 2\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n3\n3 2 1\n''') == '''\n2 3 3\n'''\n\nassert solution('''\n5\n2 3 5 6 8\n''') == '''\n2 3 7\n'''\n\nassert solution('''\n5\n3 2 7 4 8\n''') == '''\n3 4 4\n'''\n\nassert solution('''\n5\n5 3 6 4 2\n''') == '''\n4 3 3\n'''\n\nassert solution('''\n5\n5 1 6 2 8\n''') == '''\n1 2 7\n'''\n\nassert solution('''\n5\n2 3 7 4 8\n''') == '''\n2 3 3\n'''\n\nassert solution('''\n5\n2 3 7 4 8\n''') == '''\n2 3 3\n'''\n\nassert solution('''\n5\n5 4 7 2 8\n''') == '''\n2 3 3\n'''\n\nassert solution('''\n5\n5 4 7 2 8\n''') == '''\n2 3 3\n'''\n\nassert solution('''\n5\n2 3 7 8 4\n''') == '''\n2 3 3\n'''", "solution('''\n4\n2 3 4 5\n''') == '''\n2 4 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n2 6 4 5\n''') == '''\n1 4 5\n'''", "solution(stdin=\"in/input.txt\") == \"out/output.txt\"", "solution('''\n3\n1 3 5\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n5\n0 2 4 6 8\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n2\n0 2\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n2\n0 1\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n4\n0 2 4 6\n''') == '''\n1 3 2\n'''\n\nassert solution('''\n4\n0 2 3 4\n''') == '''\n1 3 2\n'''\n\nassert solution('''\n4\n0 1 2 3\n''') == '''\n1 3 2\n'''\n\nassert solution('''\n5\n0 1 2 3 4\n''') == '''\n1 4 3\n'''\n\nassert solution('''\n6\n0 1 2 3 4 5\n''') == '''\n1 5 4\n'''\n\n# test speed\nfrom random import randint\nfrom time import time\n\ndef test_speed(N: int = 100_000, M: int = 10**9) -> None:\n    start = time()\n    print(solution(\n        f'''\n", "solution(input1) == output1\nassert solution(input2) == output2\nassert solution(input3) == output3\nassert solution(input4) == output4\nassert solution(input5) == output5\nassert solution(input6) == output6\nassert solution(input7) == output7\nassert solution(input8) == output8\nassert solution(input9) == output9\nassert solution(input10) == output10\nassert solution(input11) == output11\nassert solution(input12) == output12\nassert solution(input13) == output13\nassert solution(input14) == output14\nassert solution(input15) == output15\nassert solution(input16) == output16\nassert solution(input17) == output17\nassert solution(input18) == output18\nassert solution(input19) == output19\nassert solution(input20) == output20\nassert solution(input21) == output21\nassert solution(input22) == output22\nassert solution(input23) == output23\nassert solution(input24) == output24\nassert solution(input25) == output25\nassert solution(input26) == output26\nassert solution(input27) == output27\nassert solution(input28) == output28\nassert solution(input29) == output29\nassert solution(input30) == output30\nassert", "solution('''\n3\n3 1 2\n''') == '''\n1 2 2\n'''\n\n# run the main function\nn = int(input())\na = list(map(int, input().split()))\n\na = sorted(a)\n\n# brute-force solution\nm = -1\nx = -1\ny = -1\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i] < a[j]:\n            tmp = a[j] - a[i]\n            if m < tmp:\n                m = tmp\n                x = i\n                y = j\n\nprint(x+1, y+1, m)", "solution('''\n3\n1 4 2\n''') == '''\n1 2 2\n'''\n\nassert solution('''\n6\n2 3 1 4 5 6\n''') == '''\n2 5 3\n'''\n\nassert solution('''\n4\n1 5 7 9\n''') == '''\n1 4 1\n'''\n\nassert solution('''\n100000\n1 3 6 8 5 1 7 9 4 2 3 5 1 5 1 4 7 9 5 5 4 2 3 3 7 9 5 5 1 4 7 9 4 2 3 5 1 5 1 4 7 9 5 5 4 2 3 3 7 9 5 5 1 4 7 9 4 2 3 5 1 5 1 4 7 9 5 5 4 2 3 3 7 9 5 5 1 4 7 9 4 2 3 5 1 5 1 4 7 9 5 5 4 2 3 3 7 9 5 5 1 4 7 9 4 2 3 5 1 5 1 4 7 9 5 5 4 2 3 3 7 9 5 5 1 4 7 9 4 2 3 5 1 5 1 4 7 9 5 5 4 2 3 3 7 9 5 5 1 4 7 9 4 2 3 5 1 5 1 4 7 9 5 5 4 2 3 3 7 9 5 5 1 4 7 9 4 2 3 5 1 5 1 4 7 9 5 5 4 2 3 3 7 9 5 5 1 4 7 9 4 2 3 5 1 5 1 4 7 9", "solution('''2\n1 3''') == '''1 2 2'''\nassert solution('''2\n2 4''') == '''1 2 1'''\nassert solution('''4\n1 4 5 6''') == '''1 2 1'''\nassert solution('''4\n3 4 2 7''') == '''2 3 1'''\nassert solution('''4\n1 3 2 7''') == '''1 2 1'''\nassert solution('''4\n1 2 5 6''') == '''1 2 1'''\nassert solution('''4\n3 4 2 6''') == '''2 3 1'''\nassert solution('''10\n1 3 5 7 9 11 13 15 17 19''') == '''1 2 1'''\nassert solution('''10\n1 2 4 5 10 11 13 15 16 17''') == '''2 4 1'''\nassert solution('''10\n0 1 2 3 4 5 6 7 8 9''') == '''1 3 3'''\nassert solution('''10\n0 1 3 5 7 9 11 13 15 17''') == '''1 3 2'''\nassert solution('''10\n0 2 4 6 8 10 12 14 16 18''') == '''1 2 2'''\nassert solution('''10\n0 2 4 5", "solution('''\n1\n5\n''') == '''\n1 1 0\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 1 3 3 2\n''') == '''\n2 4 3\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 2 3 4 1\n''') == '''\n1 5 4\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n1 7 5 5 6\n''') == '''\n2 3 2\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n1 5 4 1 7 2 6 5 6 6\n''') == '''\n2 3 3\n'''\n\n# submit the solution to Codeforces!", "solution('''\n3\n1 4 9\n''') == '''\n2 3 2\n'''\n\n# input format\n'''\n'''\n# answer format\n'''\n'''\n\n# performance\n'''\n\n'''", "solution('''\n3\n1 2 3\n''') == '''\n2 3 2\n'''\nassert solution('''\n2\n2 3\n''') == '''\n1 2 1\n'''\nassert solution('''\n3\n1 1 1\n''') == '''\n1 2 0\n'''\n\n# run the solution\nstdin = open('in.txt', 'r')\nprint(solution(stdin.read()))", "solution('''\n...\n''') == '''\n...\n'''\n\ndef test_solution():\n    pass\n\nif __name__ == '__main__':\n    lines = []\n    for i in range(2):\n        lines.append(input())\n    print(solution('\\n'.join(lines)))", "solution('''\n3\n1 2 4\n''') == '''\n2 3 3\n'''\n\n# check the correctness of solution\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '''\n1 2 0\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4 8 7 1\n''') == '''\n2 3 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4 8 1 7\n''') == '''\n2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n9 4 10 10 15\n''') == '''\n1 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 3\n''') == '''\n1 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n''') == '''\n1 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n123456789\n''') == '''\n1 1 0\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n1 4 4 4 4 4 4 4 4 4\n''') == '''\n", "solution('''\n5\n1 2 4 8 16\n''') == '''\n2 3 3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n2 3 4\n''') == '''\n1 2 7\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n7 6 6\n''') == '''\n1 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n8\n10 15 4 1 18 17 4 4\n''') == '''\n1 4 6\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 1 3\n''') == '''\n1 2 2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 1 2 4 8\n''') == '''\n1 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n2 1 3 5 4\n''') == '''\n1 4 7\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n0 1 2 4 8\n''') == '''\n1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n4 2 1 4 8\n''') == '''\n1 2 5\n", "solution(None) == None, 'Test 1'\nassert solution(None) == None, 'Test 2'\nassert solution(None) == None, 'Test 3'\nassert solution(None) == None, 'Test 4'\n\n\n# obtain input from stdin\nlines = []\nfor line in sys.stdin:\n    lines.append(line.rstrip('\\n'))\n\n# launch solution\nprint(solution(lines))", "solution(\"\"\"3\n1 2 3\"\"\") == \"\"\"1 2 2\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"5\n1 2 3 4 5\"\"\") == \"\"\"2 4 0\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"1\n1\"\"\") == \"\"\"1 1 0\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"2\n1 2\"\"\") == \"\"\"1 2 1\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"3\n3 2 1\"\"\") == \"\"\"1 2 2\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"3\n1 2 2\"\"\") == \"\"\"1 3 0\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"4\n1 2 3 4\"\"\") == \"\"\"1 2 2\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"4\n1 2 4 3\"\"\") == \"\"\"2 4 0\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"4\n1 2 3 2\"\"\") == \"\"\"1 4 0\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"4\n1 3 2 3\"\"\") == \"\"\"1 4 0\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"10\n7 7 7 7 5 5 5 5 3 3\"\"\") == \"\"\"3 6 0\"\"\", \"Wrong Answer\"\nassert solution(\"\"\"10\n7 7 7 7 5 5 5 5 3 3\"\"\") == \"\"\"3 6 0\"\"\", \"Wr", "solution(\"\"\"\n1\n2\n\"\"\") == \"\"\"\n1 1 0\n\"\"\"\nassert solution(\"\"\"\n1\n3\n\"\"\") == \"\"\"\n1 1 0\n\"\"\"\nassert solution(\"\"\"\n3\n1 3 5\n\"\"\") == \"\"\"\n2 3 1\n\"\"\"\nassert solution(\"\"\"\n6\n2 6 5 1 5 4\n\"\"\") == \"\"\"\n1 6 1\n\"\"\"\nassert solution(\"\"\"\n9\n0 1 1 4 3 7 4 6 2\n\"\"\") == \"\"\"\n1 8 4\n\"\"\"\nassert solution(\"\"\"\n6\n1 1 1 4 3 7\n\"\"\") == \"\"\"\n1 4 1\n\"\"\"\nassert solution(\"\"\"\n12\n0 0 0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"\"\"\n1 2 0\n\"\"\"\nassert solution(\"\"\"\n6\n12 12 12 12 12 12\n\"\"\") == \"\"\"\n1 2 0\n\"\"\"\nassert solution(\"\"\"\n5\n5 6 7 8 9\n\"\"\") == \"\"\"\n1 5 1\n\"\"\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n1 5 2\n\"\"\"\nassert solution(\"\"\"\n8\n1 2 3 4 5 6 7 8\n\"\"\") == \"\"\"\n1 8 3\n\"\"\"\nassert solution(\"\"\"\n7\n4 8 2 16 32 128 256\n\"\"\") == \"\"\"\n1 7 3\n\"\"\"\nassert solution(\"\"\"", "solution(\"4\\n1 4 3 2\") == \"1 2 3\", \"Wrong answer\"\nassert solution(\"4\\n4 4 4 4\") == \"1 2 0\", \"Wrong answer\"\nassert solution(\"4\\n1 1 1 1\") == \"1 2 0\", \"Wrong answer\"\nassert solution(\"3\\n1 3 2\") == \"1 2 1\", \"Wrong answer\"\nassert solution(\"5\\n1 1 1 1 1\") == \"1 2 0\", \"Wrong answer\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2 3 3\", \"Wrong answer\"\nassert solution(\"3\\n1 3 5\") == \"1 2 1\", \"Wrong answer\"\nassert solution(\"3\\n4 6 8\") == \"1 2 1\", \"Wrong answer\"\nassert solution(\"2\\n4 6\") == \"1 2 0\", \"Wrong answer\"\nassert solution(\"10\\n1 4 3 1 2 4 2 5 4 5\") == \"1 4 4\", \"Wrong answer\"\nassert solution(\"1\\n1\") == \"1 1 0\", \"Wrong answer\"\nassert solution(\"1\\n2\") == \"1 1 0\", \"Wrong answer\"\nassert solution(\"1\\n3\") == \"1 1 0\", \"Wrong answer\"\nassert solution(\"1\\n4\")", "solution(stdin_input) == output", "solution(\"2 3\") == \"1 2\"\nassert solution(\"5 7 8\") == \"1 2\"\nassert solution(\"5 7 11\") == \"2 3\"\nassert solution(\"1 2 3 4 5\") == \"1 2\"\nassert solution(\"12 13 14 15 16\") == \"1 2\"\nassert solution(\"12 13 14 15 16\") == \"1 2\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1 2\"\nassert solution(\"17 18 19 20 21 22 23 24 25 26\") == \"1 2\"\nassert solution(\"26 25 24 23 22 21 20 19 18 17\") == \"9 10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"1 2\"\nassert solution(\"100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56", "solution('''\n2\n1 3\n''') == '''\n1 2\n1\n'''\nassert solution('''\n3\n1 2 3\n''') == '''\n1 2\n0\n'''\nassert solution('''\n5\n1 2 3 5 6\n''') == '''\n1 2\n1\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1 2\n0\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1 2\n0\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1 2\n0\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1 2\n0\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1 2\n0\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1 2\n0\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1 2\n0\n'''\nassert solution('''\n5\n1 2 3 4 5\n''') == '''\n1 2\n0\n''", "solution(stdin) == stdout\n \n# get the run time of your solution\n\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# get the run time of your solution", "solution('''\n3\n0 1 3\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n4\n1 2 3 4\n''') == '''\n1 3 2\n'''\n\nassert solution('''\n4\n1 5 3 4\n''') == '''\n1 3 3\n'''\n\nassert solution('''\n5\n0 1 4 7 9\n''') == '''\n1 2 1\n'''\n\nassert solution('''\n5\n1 2 5 7 9\n''') == '''\n1 3 3\n'''\n\n# check the performance of solution\nfrom random import randint\n\nfor _ in range(100):\n    N = randint(2, 200000)\n    A = [i for i in range(N)]\n    for i in range(N):\n        r = randint(0, i)\n        A[i], A[r] = A[r], A[i]\n    stdin = '\\n'.join([str(N), ' '.join(map(str, A))])\n    solution(stdin)", "solution('''\n5\n2 3 4 5 6\n''') == '''\n1 5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 3 4 2 6\n''') == '''\n2 4 1\n'''\n\nassert solution('''\n5\n5 5 5 5 5\n''') == '''\n1 1 0\n'''", "solution(\"\\n\".join([\n    \"5\",\n    \"1 2 3 4 5\"\n])) == \"\\n\".join([\n    \"1 5\",\n    \"2\"\n])\n\nassert solution(\"\\n\".join([\n    \"5\",\n    \"1 7 9 2 5\"\n])) == \"\\n\".join([\n    \"1 2\",\n    \"7\"\n])\n\nassert solution(\"\\n\".join([\n    \"9\",\n    \"1 2 3 4 5 6 7 8 9\"\n])) == \"\\n\".join([\n    \"2 3\",\n    \"9\"\n])\n\n# submit\nimport sys\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\ninput()\nprint(\"\\n\".join(solution(sys.stdin.read()).split(\"\\n\")[1:]))"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-31.411065182878005, -8.21216395264, -83.809550124258, -67.85695042644, -16.478140369000002, -113.34885948076166, -89.06007551023498, -38.24959475872475, -121.51896119013507, -89.71402400914108, -5.0724765005, -145.6648914650901, -14.768152172639002, -57.16266862178748, -41.693049001559785, -151.4773421571542, -73.72587733719249, -43.331892025929996, -68.57126010014, -113.00484433133524, -6.6536769499999995, -112.87999687177198, -88.21555772904726, -49.53173687144701, -205.7437762844429, -121.32612091415626, -30.065267725985002, -18.879324214999993, -104.86262429101296, -13.766626395334482, -80.38520162179002, -125.55971116699403, -130.31581647765103, -113.20808760419996, -50.51810399554, -41.67705207802, -36.93371570462, -112.64831123701022, -145.90617971456265, -38.131568759993996, -106.40798005397099, -166.8625987475181, -115.62080123671298, -13.989410934, -86.97660107756009, -41.366074349784554, -31.072214085949994, -95.16213720932204, -43.65313596513999, -74.21676890717097], "mean_logprob": [-0.7478825043542381, -0.4562313307022222, -0.4844482666142081, -0.7624376452408989, -1.1770100263571428, -0.377829531602539, -0.29686691836745, -0.127498649195749, -0.40506320396711665, -0.29904674669713666, -0.5636085000555555, -0.4855496382169667, -0.2204201816811791, -0.19054222873929166, -0.13897683000519934, -0.50492447385718, -0.44147231938438625, -0.6190270289418571, -0.6349190750012963, -0.376682814437784, -0.4752626392857143, -0.37626665623924, -0.29405185909682435, -0.41623308295333616, -0.68581258761481, -0.40442040304718735, -0.509580808915, -0.94396621075, -0.34954208097004336, -0.045888754651115, -0.4871830401320606, -0.41853237055664666, -0.43438605492550336, -0.6324474167832402, -0.9021089999203571, -0.40074088536557695, -0.47965864551454546, -0.37549437079003434, -0.486353932381875, -0.38131568759994, -0.35469326684657, -0.5562086624917266, -0.38540267078904333, -1.3989410934, -0.28992200359186665, -0.137886914499282, -0.4780340628607692, -0.3746540835012677, -0.490484673765618, -0.35681138897678366]}
{"prompt": "'''\nThere are n reindeer at the North Pole, all battling for the highest spot on the \"Top Reindeer\" leaderboard on the front page of CodeNorses (a popular competitive reindeer gaming website). Interestingly, the \"Top Reindeer\" title is just a measure of upvotes and has nothing to do with their skill level in the reindeer games, but they still give it the utmost importance.\n\nCurrently, the i-th reindeer has a score of a_i. You would like to influence the leaderboard with some operations. In an operation, you can choose a reindeer, and either increase or decrease his score by 1 unit. Negative scores are allowed.\n\nYou have m requirements for the resulting scores. Each requirement is given by an ordered pair (u, v), meaning that after all operations, the score of reindeer u must be less than or equal to the score of reindeer v.\n\nYour task is to perform the minimum number of operations so that all requirements will be satisfied.\n\nInput\n\nThe first line contains two integers n and m (2\u2264 n\u2264 1000; 1\u2264 m\u2264 1000) \u2014 the number of reindeer and requirements, respectively.\n\nThe second line contains n integers a_1,\u2026, a_n (1\u2264 a_i\u2264 10^9), where a_i is the current score of reindeer i.\n\nThe next m lines describe the requirements.\n\nThe i-th of these lines contains two integers u_i and v_i (1\u2264 u_i, v_i\u2264 n; u_i\u2260 v_i) \u2014 the two reindeer of the i-th requirement.\n\nOutput\n\nPrint n integers b_1,\u2026, b_n (-10^{15}\u2264 b_i\u2264 10^{15}), where b_i is the score of the i-th reindeer after all operations.\n\nIf there are multiple solutions achieving the minimum number of operations, you may output any.\n\nWe can prove that there is always an optimal solution such that |b_i|\u2264 10^{15} for all i.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n5 3\n1 2 3 4 5\n1 2\n1 3\n4 5\n\"\"\") == \"\"\"\n-1 -1 1 2 5\n\"\"\"\n\n# use this command to run the file with stdin\n# python -c \"from solutions.sol_1 import solution; print(solution(input()))\" < inputs/INPUT_FILE_NAME.txt", "solution('''\n4 2\n1 2 3 4\n1 2\n3 4\n''') == '''\n2 2 4 4\n'''\n\nassert solution('''\n4 2\n1 2 3 4\n1 2\n1 3\n''') == '''\n0 2 3 4\n'''\n\nassert solution('''\n4 2\n1 2 3 4\n1 2\n1 4\n''') == '''\n0 2 2 4\n'''\n\nassert solution('''\n4 2\n3 2 3 4\n1 2\n3 4\n''') == '''\n3 3 4 4\n'''\n\nassert solution('''\n4 2\n3 2 3 4\n1 2\n1 4\n''') == '''\n0 2 2 4\n'''\n\nassert solution('''\n4 2\n3 2 3 4\n1 2\n2 4\n''') == '''\n2 2 2 4\n'''\n\nassert solution('''\n4 2\n3 2 3 4\n1 2\n1 3\n''') == '''\n0 2 3 4\n'''\n\nassert solution('''\n4 2\n3 2 3 4\n1 2\n2 3\n''') == '''\n2 2 3 4\n'''\n\nassert solution('''\n4 2\n3 2 3 4\n1 2\n1 2\n''", "solution(\"\"\"\n1 1\n1\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2 2\n1 2\n1 2\n2 1\n\"\"\") == \"\"\"\n2 1\n\"\"\"\n\nassert solution(\"\"\"\n3 2\n1 2 3\n1 2\n3 1\n\"\"\") == \"\"\"\n3 4 2\n\"\"\"\n\nassert solution(\"\"\"\n4 3\n1 1 1 1\n1 2\n3 4\n2 4\n\"\"\") == \"\"\"\n3 2 1 1\n\"\"\"\n\nassert solution(\"\"\"\n4 3\n1 2 3 4\n1 2\n2 3\n3 4\n\"\"\") == \"\"\"\n2 3 4 5\n\"\"\"\n\nassert solution(\"\"\"\n5 4\n9 6 8 8 5\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"\n9 10 10 8 5\n\"\"\"\n\nassert solution(\"\"\"\n5 2\n11 12 13 14 15\n1 3\n3 5\n\"\"\") == \"\"\"\n11 13 11 13 15\n\"\"\"\n\nassert solution(\"\"\"\n5 5\n1 1 1 1 1\n1 2\n2 3\n3 4\n4 5\n5 1\n\"\"\") == \"\"\"\n2 1 2 1 2\n\"\"\"\n\nassert solution(\"\"\"\n8 4\n1 2 3 4 5 6 7 8\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"", "solution(\"\"\"\n4 2\n1 1 2 2\n1 2\n2 3\n\"\"\") == \"\"\"\n-2 2 3 3\n\"\"\"\n\nassert solution(\"\"\"\n4 3\n1 2 3 4\n1 2\n2 3\n3 4\n\"\"\") == \"\"\"\n-3 -2 3 4\n\"\"\"\n\n# print the solution\nprint(solution(input()))", "solution('''\n2 3\n1 3\n1 2\n2 1\n1 2\n''') == '''\n1 1\n'''\n\nassert solution('''\n3 4\n1 2 3\n1 2\n2 3\n3 1\n1 3\n''') == '''\n1 1 2\n'''\n\nassert solution('''\n5 8\n2 3 2 3 3\n2 4\n3 4\n4 5\n5 1\n1 5\n1 2\n1 4\n3 2\n''') == '''\n3 3 1 3 2\n'''\n\nassert solution('''\n1 1\n5\n1 1\n''') == '''\n5\n'''\n\nassert solution('''\n2 2\n1 2\n1 2\n2 1\n''') == '''\n1 1\n'''\n\nassert solution('''\n4 1\n1 2 3 4\n2 3\n''') == '''\n2 2 3 4\n'''\n\nassert solution('''\n3 5\n3 3 3\n1 2\n2 3\n3 1\n2 1\n1 3\n''') == '''\n3 3 3\n'''\n\nassert solution('''\n4 6\n1 2 1 2\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '''\n1 1 1 2", "solution(stdin) == stdout\n\n# check the correctness of solution with all possible inputs\nfor test_case in all_test_cases:\n    assert solution(test_case['stdin']) == test_case['stdout']", "solution('''\n2 1\n2 4\n1 2\n''') == '''\n3 4\n'''\n\n# print(solution(sys.stdin.read()))\n# with open('output.txt', 'w') as f:\n#     f.write(solution(sys.stdin.read()))", "solution('''\n6 3\n1 2 1 2 1 2\n1 2\n3 4\n5 6\n''') == '''\n1 2 1 2 1 2\n'''\n\nassert solution('''\n3 2\n3 2 1\n1 2\n2 3\n''') == '''\n3 2 1\n'''\n\nassert solution('''\n4 2\n1 1 1 1\n1 2\n2 3\n''') == '''\n1 1 0 1\n'''\n\nassert solution('''\n4 1\n1 1 1 1\n1 4\n''') == '''\n1 0 1 0\n'''\n\nassert solution('''\n3 3\n1 2 3\n1 2\n2 3\n1 3\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n5 5\n1 2 1 2 1\n1 2\n2 3\n3 4\n4 5\n1 5\n''') == '''\n1 2 1 2 1\n'''\n\nassert solution('''\n5 5\n1 2 1 2 1\n1 2\n2 3\n3 4\n4 5\n1 3\n''') == '''\n1 2 0 2 0\n'''\n\nassert solution('''\n5 5\n1 2 1 2 1\n1 2\n2 3\n3 4\n4 5\n1 4\n''", "solution('''\n4 2\n4 5 7 2\n3 1\n4 2\n''') == '''\n4\n3\n7\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2\n6 5 2 1 4\n1 5\n3 2\n''') == '''\n6\n1\n2\n1\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n5 2\n6 4 2 6 4\n1 5\n3 2\n''') == '''\n6\n4\n2\n6\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n10 2\n1 3 3 3 3 3 3 3 3 3\n3 10\n3 8\n''') == '''\n1\n3\n3\n3\n3\n3\n3\n3\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n7 3\n5 5 5 5 5 5 5\n6 5\n5 4\n1 2\n''') == '''\n5\n5\n5\n5\n5\n5\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n8 2\n1 2 3 4 5 6 7 8\n1 8\n3 2\n''') == '''\n1\n2\n3\n4\n5\n", "solution('''\n3 3\n2 3 1\n1 2\n2 3\n3 1\n''') == '''\n3 3 1\n'''\n\n# submit the solution\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\nassert solution(''", "solution('''\n2 2\n2 3\n1 2\n2 1\n''') == '''\n3 2\n'''\n\n# get the input\ninput = open('input.txt')\nstdin = input.read()\n\n# print the output\noutput = open('output.txt', 'w')\noutput.write(solution(stdin))\n\n# close input and output streams\ninput.close()\noutput.close()", "solution('''\n4 3\n1 2 3 4\n2 3\n1 3\n2 4\n''') == '''\n2 3 3 3\n'''\n\nassert solution('''\n5 2\n-1 2 -1 1 2\n1 5\n3 4\n''') == '''\n-1 2 -1 1 2\n'''\n\nassert solution('''\n3 3\n1 3 5\n2 3\n3 1\n1 2\n''') == '''\n0 0 0\n'''\n\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n10 9\n9 8\n8 7\n7 6\n6 5\n''') == '''\n-5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n'''\n\nassert solution('''\n5 1\n1 2 3 4 5\n1 2\n''') == '''\n-4 -3 -2 -1 0\n'''\n\nassert solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n10 9\n''') == '''\n0 0 0 0 0 0 0 0 0 0\n'''\n\nassert solution('''\n7 2\n1 2 2 1 2 2 2\n1 2\n1 3\n''') == '''\n0 1 2 3 4 5 6\n''", "solution('''\n7 7\n5 2 4 4 3 3 3\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n4 7\n''') == '''\n4 4 2 2 2 2 2\n'''\n\nassert solution('''\n3 1\n1 1 1\n1 2\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n2 2\n2 1\n1 2\n2 1\n''') == '''\n1 1\n'''\n\nassert solution('''\n10 4\n1 2 3 4 5 6 7 8 9 10\n1 2\n2 3\n3 4\n4 5\n''') == '''\n1 2 3 4 5 6 7 8 9 10\n'''\n\nassert solution('''\n4 6\n1 2 3 4\n1 2\n2 3\n3 4\n4 2\n1 3\n2 4\n''') == '''\n1 2 3 4\n'''\n\n#print(\"All tests passed.\")", "solution('''\n3 1\n1 2 3\n1 2\n''') == '''\n0 2 2\n'''\n\nassert solution('''\n4 3\n2 1 1 1\n1 3\n1 4\n2 4\n''') == '''\n0 1 1 1\n'''\n\nassert solution('''\n4 2\n1 1 1 1\n1 2\n1 3\n''') == '''\n0 -1 -1 -1\n'''\n\nassert solution('''\n3 1\n1 2 3\n1 2\n''') == '''\n0 2 2\n'''\n\nassert solution('''\n3 2\n2 3 3\n1 2\n2 3\n''') == '''\n1 2 2\n'''\n\nassert solution('''\n3 2\n1 2 3\n1 2\n2 3\n''') == '''\n0 1 2\n'''\n\nassert solution('''\n4 1\n1 2 3 4\n1 4\n''') == '''\n0 1 2 3\n'''\n\nassert solution('''\n3 1\n1 1 1\n1 2\n''') == '''\n0 -1 -1\n'''\n\nassert solution('''\n2 1\n2 1\n1 2\n''') == '''\n0 1\n'''\n\nassert solution('''\n2", "solution('''\n3 2\n1 2 1\n1 2\n2 3\n''') == '''\n1 0 1\n'''\n\nassert solution('''\n2 3\n1 1\n1 2\n2 1\n2 1\n''') == '''\n-1 1\n'''\n\nassert solution('''\n5 5\n1 3 3 3 3\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '''\n2 0 -2 0 0\n'''\n\n# stress testing\nfrom random import randint, shuffle\nwhile True:\n    n = randint(2, 10**3)\n    m = randint(1, 10**3)\n    data = [\n        [randint(1, 10**9) for _ in range(n)],\n        [[randint(1, n), randint(1, n)] for _ in range(m)]\n    ]\n    for x in data[1]:\n        if x[0] == x[1]:\n            x[1] = randint(1, n)\n    print('\\n'.join(map(str, data)), '\\n', flush=True)\n    data[0].sort()\n    shuffle(data[1])\n    ans = solution('\\n'.join(map(str, data)))\n   ", "solution(\"\"\"3 2\n3 1 5\n1 2\n2 3\"\"\") == \"\"\"1 1 3\"\"\", 'wrong answer'\nassert solution(\"\"\"5 5\n10 1 9 5 5\n1 2\n1 3\n1 4\n1 5\n2 5\"\"\") == \"\"\"8 1 9 5 5\"\"\", 'wrong answer'\nassert solution(\"\"\"7 3\n1 1 1 1 1 1 1\n1 2\n3 4\n5 6\"\"\") == \"\"\"1 0 0 1 0 0 1\"\"\", 'wrong answer'\n\n# test with large input\nimport random\nn = 1000\nm = 1000\na = [random.randint(1, 10**9) for _ in range(n)]\nrequirements = [(random.randint(1, n), random.randint(1, n)) for _ in range(m)]\nassert solution(f\"{n} {m}\\n{' '.join(map(str, a))}\\n{'\\n'.join(' '.join(map(str, l)) for l in requirements)}\") == \"\"", "solution(\"\"\"5 6\n10 20 30 40 50\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n\"\"\") == \"\"\"10 20 30 40 50\n\"\"\"\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_len = 1000000000000\n    req = []\n    for _ in range(m):\n        req.append(list(map(int, input().split())))\n    for i in range(m):\n        for j in range(m - 1):\n            if a[req[j][0] - 1] < a[req[j + 1][0] - 1]:\n                req[j], req[j + 1] = req[j + 1], req[j]\n    for i in range(m):\n        if a[req[i][0] - 1] < a[req[i][1] - 1]:\n            max_len = min(max_len, a[req[i][1] - 1] - a[req[i][0] - 1])\n        else:\n            max_len = min(max_len, a[req[i][0] - 1] - a[req[i][1] -", "solution('''\n4 2\n1 2 3 4\n1 2\n2 3\n''') == '''\n1 2 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2 3 4 5\n1 3\n2 4\n5 3\n''') == '''\n2 3 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1 0\n1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3 1\n1 1 1\n1 2\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2\n1 1\n1 2\n2 1\n''') == '''\n0 0\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2\n3 1 1\n1 2\n2 3\n''') == '''\n2 0 0\n'''\n\n# check the correctness of solution\nassert solution('''\n3 1\n1 2 3\n2 3\n''') == '''\n1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4 2\n1 1 1 1\n1 2\n2 3\n''') == '''\n1 1 1 1", "solution(\"\"\"4 3\n4 5 1 7\n1 2\n1 3\n1 4\n\"\"\") == \"\"\"6 7 1 7\n\"\"\"\n\nassert solution(\"\"\"5 3\n-5 -5 -5 -5 -5\n1 2\n2 3\n1 3\n\"\"\") == \"\"\"-10 -5 -5 -5 -5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"4 3\n4 5 1 7\n1 2\n1 3\n1 4\n\"\"\") == \"\"\"6 7 1 7\n\"\"\"\n\nassert solution(\"\"\"5 3\n-5 -5 -5 -5 -5\n1 2\n2 3\n1 3\n\"\"\") == \"\"\"-10 -5 -5 -5 -5\n\"\"\"\n\n# check performance\nfrom random import randint\nfrom time import time\nfrom typing import List\nimport re\n\n# TODO: reimplement this in python\ndef random_instance(n: int, m: int) -> str:\n    max_a = 10**9\n    max_index = 1000\n    max_pos = n - 1\n    return \"\\n\".join([\n        f\"{n} {m}\",\n        \" \".join([str(randint(1, max_a)) for _ in range(n)]),\n        \"\\n\".join([f\"{randint(1, max_index)}", "solution('''\n3 2\n1 2 3\n1 2\n1 3\n''') == '''\n1 2 2\n'''\nassert solution('''\n3 2\n1 2 3\n1 2\n2 3\n''') == '''\n1 2 2\n'''\nassert solution('''\n4 2\n1 2 3 4\n1 2\n1 3\n''') == '''\n1 2 3 3\n'''\nassert solution('''\n4 1\n1 2 3 4\n1 4\n''') == '''\n-1 -2 3 4\n'''\nassert solution('''\n4 2\n1 2 3 4\n1 4\n3 4\n''') == '''\n1 2 3 4\n'''\nassert solution('''\n4 2\n1 2 3 4\n1 4\n2 4\n''') == '''\n1 2 3 4\n'''\nassert solution('''\n2 2\n1 2\n1 2\n2 1\n''') == '''\n-1 -2\n'''\nassert solution('''\n2 2\n1 2\n1 2\n1 2\n''') == '''\n1 2\n'''\nassert solution('''\n2 2\n1 2\n1 2\n2 2\n''') == '''\n1 2\n'''\nassert solution('''\n2 2\n1", "solution('''\n2 1\n2 1\n1 2\n''') == '''\n1 2\n'''\n\nassert solution('''\n3 1\n1 2 3\n1 2\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n2 2\n2 1\n1 2\n2 1\n''') == '''\n1 2\n'''\n\nassert solution('''\n2 3\n2 1\n1 2\n2 1\n1 2\n''') == '''\n1 2\n'''\n\nassert solution('''\n3 2\n1 2 3\n1 2\n1 3\n''') == '''\n0 3 3\n'''\n\nassert solution('''\n3 3\n1 2 3\n1 2\n1 3\n2 3\n''') == '''\n0 3 4\n'''\n\nassert solution('''\n3 2\n1 2 3\n1 2\n2 3\n''') == '''\n-1 3 3\n'''\n\nassert solution('''\n5 5\n1 2 3 4 5\n2 3\n2 4\n3 4\n1 5\n1 4\n''') == '''\n-1 0 1 2 4\n'''\n\nassert solution('''\n4 4\n1 2 3 4\n1 3\n2 3\n3 4\n2 4\n''')", "solution(s) == \"10\\n-9\\n8\\n-7\\n6\\n-5\\n4\\n-3\\n2\\n-1\\n\"\nassert solution(s2) == \"0\\n0\\n0\\n0\\n0\\n\"\nassert solution(s3) == \"5\\n-5\\n-1\\n3\\n-3\\n7\\n\"\nassert solution(s4) == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0", "solution(\"\"\"\n5 3\n2 3 4 2 1\n2 3\n4 5\n1 5\n\"\"\") == \"\"\"\n0 2 4 2 -1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 10\n1 2 3 4 5 6 7 8 9 10\n2 3\n2 4\n2 5\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n6 7\n\"\"\") == \"\"\"\n-9 -9 -9 -9 -9 -9 -9 -9 -9 -9\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 10\n1 2 3 4 5 6 7 8 9 10\n1 2\n2 3\n2 4\n2 5\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n\"\"\") == \"\"\"\n1 1 1 1 1 1 1 1 1 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2 2\n2 2\n1 2\n2 1\n\"\"\") == \"\"\"\n-9 9\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n1 2 1 2 1\n1 2\n2 3\n3 4\n4 5\n5 1\n\"\"\") == \"\"\"\n1 2 1 2 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3 3\n3 2", "solution('''2 2\n2 5\n1 2\n2 1''') == '''1 4\n'''\nassert solution('''2 1\n1 1\n1 2''') == '''1 2\n'''\nassert solution('''2 2\n2 3\n1 2\n2 1''') == '''1 3\n'''\nassert solution('''3 3\n2 1 3\n1 2\n2 3\n1 3''') == '''1 4 2\n'''\nassert solution('''3 3\n2 1 3\n1 2\n2 3\n1 3''') == '''1 4 2\n'''\nassert solution('''4 4\n7 1 3 2\n2 3\n2 4\n1 3\n1 4''') == '''6 3 3 1\n'''\nassert solution('''4 4\n7 1 3 2\n2 3\n2 4\n1 3\n1 4''') == '''6 3 3 1\n'''\nassert solution('''3 3\n3 2 1\n2 3\n2 1\n1 3''') == '''2 3 1\n'''\nassert solution('''4 4\n1 2 1 1\n1 2\n1 3\n1 4\n2 4''') == '''0 1 1 0\n'''\nassert solution('''4 4\n1 2 1 1\n1 2\n", "solution(\"1 2\\n3\\n1 2\\n3 4\") == \"5\", \"Wrong Answer: expected 5, got {}\".format(solution(\"1 2\\n3\\n1 2\\n3 4\"))\nassert solution(\"4 2\\n1 2 3 4\\n1 2\\n2 3\") == \"2 3 3 5\", \"Wrong Answer: expected 2 3 3 5, got {}\".format(solution(\"4 2\\n1 2 3 4\\n1 2\\n2 3\"))\nassert solution(\"4 2\\n1 2 3 4\\n2 3\\n3 4\") == \"1 1 2 4\", \"Wrong Answer: expected 1 1 2 4, got {}\".format(solution(\"4 2\\n1 2 3 4\\n2 3\\n3 4\"))\nassert solution(\"2 1\\n2 3\\n1 2\") == \"2 3\", \"Wrong Answer: expected 2 3, got {}\".format(solution(\"2 1\\n2 3\\n1 2\"))\nassert solution(\"3 4\\n1 2 3\\n1 2\\n2 3\\n1 3\\n2 3\") == \"1 2 3\", \"Wrong Answer: expected 1 2 3, got {}\".format(solution(\"3 4\\n1 2 3\\n1 2\\n2 3\\n1 3\\n2", "solution(\"\"\"\\\n2 1\n1 3\n1 2\n\"\"\") == \"\"\"\\\n-1 1\n\"\"\"\n\nassert solution(\"\"\"\\\n3 3\n1 2 3\n1 2\n2 3\n1 3\n\"\"\") == \"\"\"\\\n-1 1 1\n\"\"\"\n\nassert solution(\"\"\"\\\n3 3\n3 2 1\n1 2\n2 3\n1 3\n\"\"\") == \"\"\"\\\n-1 -1 -1\n\"\"\"\n\nassert solution(\"\"\"\\\n4 4\n1 2 3 4\n1 2\n2 3\n3 4\n1 4\n\"\"\") == \"\"\"\\\n-3 -1 1 3\n\"\"\"\n\nassert solution(\"\"\"\\\n4 3\n1 2 3 4\n1 2\n2 3\n1 4\n\"\"\") == \"\"\"\\\n-1 -1 1 1\n\"\"\"\n\nassert solution(\"\"\"\\\n5 4\n1 2 3 4 5\n1 2\n2 3\n3 4\n1 5\n\"\"\") == \"\"\"\\\n-3 -1 1 3 5\n\"\"\"\n\nassert solution(\"\"\"\\\n5 5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n1 5\n\"\"\") == \"\"\"\\\n-3 -1 1 3 5\n\"\"\"\n\nassert solution(\"\"\"\\\n5 5\n1 2 3 4 5\n1 2\n2 3\n3 4\n2 5\n", "solution('''\n3 2\n3 4 1\n1 2\n2 3\n''') == '''\n2 3 3\n'''\n\nassert solution('''\n5 1\n1 2 1 1 5\n1 3\n''') == '''\n1 2 1 1 5\n'''\n\nassert solution('''\n3 2\n1 1 5\n1 2\n2 3\n''') == '''\n1 1 5\n'''\n\nassert solution('''\n2 2\n1 1\n1 2\n2 1\n''') == '''\n1 1\n'''\n\nassert solution('''\n4 2\n4 3 2 1\n2 3\n1 4\n''') == '''\n4 2 2 1\n'''\n\nassert solution('''\n4 4\n4 3 2 1\n1 2\n1 3\n1 4\n2 3\n''') == '''\n4 3 3 2\n'''\n\nassert solution('''\n3 2\n1 1 10\n1 2\n2 3\n''') == '''\n1 1 10\n'''\n\nassert solution('''\n5 5\n2 3 1 4 5\n2 3\n2 4\n1 5\n3 5\n4 5\n''') == '''\n2 3 2 4 5\n'''\n\n# print solution to standard output\nimport fileinput\ndef print_s", "solution('''\n3 3\n1 3 3\n1 2\n2 3\n1 3\n''') == '''\n0 2 4\n'''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution('''\n# ''') == '''\n# '''\n\n# assert solution(''", "solution('''\n4 2\n1 2 3 4\n1 2\n2 3\n''') == '''\n0 0 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4 2\n1 2 3 4\n1 2\n2 3\n''') == '''\n0 0 2 3\n'''", "solution(\"1 1\\n1\\n1 1\") == \"0\"\nassert solution(\"2 2\\n1 2\\n1 2\\n2 1\") == \"0 1\"\nassert solution(\"3 2\\n1 2 3\\n2 3\\n3 1\") == \"1 2 3\"\nassert solution(\"3 2\\n1 2 3\\n1 3\\n2 3\") == \"1 2 3\"\nassert solution(\"3 2\\n1 2 3\\n1 3\\n2 1\") == \"1 1 2\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 5\\n2 3\\n3 5\\n2 4\") == \"1 1 2 3 3\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0 1 2 3 4\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 1 2 2 3\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2\\n1 3\\n1 4\\n2 5\") == \"1 0 2 3 3\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n4 5\")", "solution('''\n2 1\n1 2\n1 2\n''') == '''\n2 2\n'''\n\nassert solution('''\n5 1\n1 2 3 4 5\n1 5\n''') == '''\n5 1 2 3 4\n'''\n\nassert solution('''\n4 1\n1 2 3 4\n2 3\n''') == '''\n-2 -1 0 1\n'''\n\nassert solution('''\n5 2\n1 2 3 4 5\n1 2\n3 4\n''') == '''\n3 2 1 2 3\n'''\n\nassert solution('''\n4 2\n1 2 3 4\n1 2\n2 3\n''') == '''\n2 1 0 1\n'''\n\nassert solution('''\n3 2\n1 2 3\n1 2\n1 3\n''') == '''\n2 1 0\n'''\n\nassert solution('''\n3 2\n1 2 3\n1 2\n2 3\n''') == '''\n2 1 0\n'''\n\nassert solution('''\n3 3\n1 2 3\n1 2\n1 3\n2 3\n''') == '''\n2 1 0\n'''\n\nassert solution('''\n3 3\n1 2 3\n1 2\n1 3\n2 3\n''') == '''\n2 1 0", "solution(solution.__doc__) == '1 2 3\\n'\n\n# get the input\nwith open('input.txt', 'r') as file:\n    input = file.read()\n\n# solve the problem\nwith open('output.txt', 'w') as file:\n    file.write(solution(input))", "solution('''\n1 1\n1\n1 1\n''') == '''\n1\n'''\n\nassert solution('''\n2 2\n1 2\n1 2\n2 1\n''') == '''\n1 1\n'''\n\nassert solution('''\n3 1\n1 2 3\n1 2\n''') == '''\n1 2 2\n'''\n\nassert solution('''\n5 5\n2 7 3 3 5\n1 2\n2 3\n2 4\n2 5\n1 3\n''') == '''\n2 5 5 5 5\n'''\n\nassert solution('''\n5 5\n1 2 3 4 5\n1 2\n2 3\n2 4\n2 5\n1 3\n''') == '''\n1 1 2 3 4\n'''\n\nassert solution('''\n4 2\n1 2 3 4\n1 2\n1 3\n''') == '''\n1 1 2 4\n'''\n\nassert solution('''\n2 3\n1 1\n1 2\n2 1\n1 2\n''') == '''\n1 1\n'''\n\nassert solution('''\n2 3\n1 2\n1 2\n2 1\n1 2\n''') == '''\n0 1\n'''\n\nassert solution('''\n6 4\n1 2 3 4 5 6\n1 2\n", "solution(\"\"\"\n4 2\n1 2 1 2\n1 2\n3 4\n\"\"\") == \"\"\"\n-1 1 -1 1\n\"\"\"\n\nassert solution(\"\"\"\n3 3\n1 2 3\n1 2\n2 3\n1 3\n\"\"\") == \"\"\"\n0 3 2\n\"\"\"\n\nassert solution(\"\"\"\n6 4\n5 8 9 8 6 4\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"\"\"\n9 6 4 2 0 -2\n\"\"\"\n\nassert solution(\"\"\"\n3 3\n2 3 3\n1 2\n2 3\n1 3\n\"\"\") == \"\"\"\n0 0 0\n\"\"\"\n\nassert solution(\"\"\"\n6 5\n5 7 9 8 6 4\n1 2\n1 3\n1 4\n1 5\n2 3\n\"\"\") == \"\"\"\n8 5 3 1 -1 -3\n\"\"\"\n\nassert solution(\"\"\"\n5 6\n1 2 3 4 5\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n\"\"\") == \"\"\"\n-1 -1 -1 -1 -1\n\"\"\"\n\nassert solution(\"\"\"\n5 6\n1 2 3 4 5\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n\"\"\") == \"\"\"\n-1 -1 -1 -1 -1\n\"\"\"\n\nassert solution(\"\"\"\n10 5\n-", "solution('''\n6 3\n1 2 3 4 5 6\n1 2\n3 4\n5 6\n''') == '''\n1 2 3 4 5 6\n'''\n\n# check performance of solution\nif __name__ == '__main__':\n    import time\n    start = time.perf_counter()\n    print(solution('''\n    '''))\n    end = time.perf_counter()\n    print(end - start)", "solution(\"\"\"2 3\n2 3\n1 2\n1 2\n2 1\n\"\"\") == \"\"\"3 2\n\"\"\", 'Wrong answer!'\n\n# get input for problem\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\n# solve the problem\nsolution = solution(stdin)\n\n# get output for problem\nwith open('output.txt', 'w') as f:\n    f.write(solution)", "solution(\"stdin_example_solution.txt\") == \"stdout_example_solution.txt\"", "(solution(stdin) == '''\\\n''')\n \n# submit solution\nimport requests\nimport json\n\nurl = ''\ndata = {\"input\": stdin}\nheaders = {'Content-Type': 'application/json'}\nresponse = requests.post(url, data=json.dumps(data), headers=headers)\nprint(response.text)", "solution(\"\") == \"\", \"Test 1 - 0 points\"\nassert solution(\"\") == \"\", \"Test 2 - 0 points\"\nassert solution(\"\") == \"\", \"Test 3 - 0 points\"\nassert solution(\"\") == \"\", \"Test 4 - 0 points\"\nassert solution(\"\") == \"\", \"Test 5 - 0 points\"\nassert solution(\"\") == \"\", \"Test 6 - 0 points\"\nassert solution(\"\") == \"\", \"Test 7 - 0 points\"\nassert solution(\"\") == \"\", \"Test 8 - 0 points\"\nassert solution(\"\") == \"\", \"Test 9 - 0 points\"\nassert solution(\"\") == \"\", \"Test 10 - 0 points\"\n\n# submit the solution\nimport time\nimport hashlib\n\ndef submit_solution(submission: str, task_id: int, session_id: str) -> str:\n    data = {\n        \"submission\": submission,\n        \"task_id\": task_id,\n        \"session_id\": session_id\n    }\n    api_url = \"http://codenorses.bastion.team/api/submission/create\"\n    data = requests.post(api_url, json=data).json()\n    return data\n\nsession_id = \"sesh_1596100126565\"\ntask_id = 5\nsubmission", "solution(\"\"\"\\\n5 5\n1 1 1 1 1\n1 2\n2 3\n3 4\n4 5\n1 5\n\"\"\") == \"\"\"\\\n1 2 3 4 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\\\n5 3\n1 1 1 1 1\n1 2\n2 3\n3 4\n\"\"\") == \"\"\"\\\n1 2 3 2 5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\\\n5 3\n1 1 1 1 1\n1 2\n2 3\n4 5\n\"\"\") == \"\"\"\\\n1 2 3 3 2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\\\n3 3\n3 1 3\n1 2\n2 3\n1 3\n\"\"\") == \"\"\"\\\n3 1 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\\\n3 3\n3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"\"\"\\\n2 1 3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\\\n6 4\n1 0 1 1 0 1\n1 2\n2 3\n3 4\n5 6\n\"\"\") == \"\"\"\\\n1 0 1 1 0 1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\\\n6 4\n1 0 1 1 0 1\n1 2\n2 3\n", "solution('''\n5 5\n1 1 1 1 1\n1 2\n1 3\n1 4\n1 5\n2 3\n''') == '''\n0 0 0 0 0\n'''\n\n# test performance of solution\ndef test_performance(solution: object) -> None:\n    import random\n    from time import time\n    n = 1000\n    m = 1000\n    a = [random.randint(1, 10**9) for _ in range(n)]\n    u = []\n    v = []\n    for _ in range(m):\n        x = random.randint(1, n)\n        y = random.randint(1, n)\n        while x == y:\n            y = random.randint(1, n)\n        u.append(x)\n        v.append(y)\n    stdin = f'{n} {m}\\n{a}\\n{u}\\n{v}'\n    start = time()\n    stdout = solution(stdin)\n    result = time() - start\n    print(f'{result}s')\n    assert len(stdout.split('\\n')) == n + 1\n\n# test performance of solution\ntest_performance(solution)", "solution(\"\"\"\n3 1\n1 2 3\n1 2\n\"\"\") == \"\"\"\n0 0 3\n\"\"\"\n\nassert solution(\"\"\"\n3 1\n1 2 3\n2 3\n\"\"\") == \"\"\"\n0 2 3\n\"\"\"\n\nassert solution(\"\"\"\n3 2\n1 2 3\n1 2\n2 3\n\"\"\") == \"\"\"\n0 0 3\n\"\"\"\n\nassert solution(\"\"\"\n3 1\n1 2 3\n1 3\n\"\"\") == \"\"\"\n0 0 3\n\"\"\"\n\nassert solution(\"\"\"\n3 2\n1 2 3\n1 2\n1 3\n\"\"\") == \"\"\"\n-1 0 3\n\"\"\"\n\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n5 1\n\"\"\") == \"\"\"\n0 0 0 0 0\n\"\"\"\n\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n5 2\n\"\"\") == \"\"\"\n0 0 0 0 5\n\"\"\"\n\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n2 5\n\"\"\") == \"\"\"\n0 0 0 0 0\n\"\"\"\n\nassert solution(\"\"\"\n5 4\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"", "solution(\"\"\"\n2 3\n1 3\n1 2\n2 1\n1 2\n\"\"\") == \"\"\"\n-5 2\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n1\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2 3\n1 3\n1 2\n2 1\n1 2\n\"\"\") == \"\"\"\n-5 2\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n1\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2 3\n1 3\n1 2\n2 1\n1 2\n\"\"\") == \"\"\"\n-5 2\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n1\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2 3\n1 3\n1 2\n2 1\n1 2\n\"\"\") == \"\"\"\n-5 2\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n1\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2 3\n1 3\n1 2\n2 1\n1 2\n\"\"\") == \"\"\"\n-5 2\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n1\n1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2 3\n1 3\n1 2\n2 1\n1 2\n\"\"\") == \"\"\"\n-", "solution(\"\"\"3 2\n1 2 3\n1 2\n2 3\"\"\") == \"\"\"0 1 1\"\"\"\nassert solution(\"\"\"1 1\n1\n1 1\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"2 1\n1 2\n1 2\"\"\") == \"\"\"0 1\"\"\"\nassert solution(\"\"\"3 2\n1 2 3\n1 2\n2 3\"\"\") == \"\"\"0 1 1\"\"\"\nassert solution(\"\"\"4 4\n1 2 3 4\n1 2\n2 3\n3 4\n4 1\"\"\") == \"\"\"0 1 2 1\"\"\"\nassert solution(\"\"\"3 1\n1 2 3\n1 2\"\"\") == \"\"\"0 0 1\"\"\"\nassert solution(\"\"\"2 3\n1 2\n1 2\n1 2\"\"\") == \"\"\"0 0\"\"\"\nassert solution(\"\"\"2 3\n1 2\n1 2\n1 2\"\"\") == \"\"\"0 0\"\"\"\nassert solution(\"\"\"5 5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n5 1\"\"\") == \"\"\"0 1 2 3 4\"\"\"\nassert solution(\"\"\"1 1\n1\n1 1\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"2 1\n1 2\n1 2\"\"\") == \"\"\"0 1\"\"\"\nassert solution(\"\"\"2 1\n1 2\n1 2\"\"\") == \"\"\"0 1\"\"\"\nassert solution(\"\"\"2 1\n1 2\n1 2\"\"\") == \"\"\"", "solution('''\n5 4\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n''') == '''\n-10 -8 -6 -4 -2\n'''\nassert solution('''\n5 4\n1 2 3 4 5\n1 2\n2 3\n3 4\n5 1\n''') == '''\n0 1 2 3 4\n'''\nassert solution('''\n5 4\n1 2 3 4 5\n1 2\n2 3\n3 4\n5 4\n''') == '''\n0 0 0 0 0\n'''\nassert solution('''\n5 4\n1 2 3 4 5\n1 2\n2 3\n3 4\n5 2\n''') == '''\n0 0 0 0 4\n'''\nassert solution('''\n5 4\n1 2 3 4 5\n1 2\n2 3\n3 4\n5 3\n''') == '''\n0 0 0 0 3\n'''\nassert solution('''\n5 4\n1 2 3 4 5\n1 2\n2 3\n3 4\n5 5\n''') == '''\n0 0 0 0 0\n'''\nassert solution('''\n5 3\n1 2 3 4 5\n1 2\n2 3\n3 4\n''') == '''\n-10 -8 -6 -4 -2\n'''\n", "solution('''\n2 3\n1 3\n1 2\n2 1\n1 2\n''') == '''\n2 2\n3 1\n'''\nassert solution('''\n3 3\n1 3 3\n1 2\n2 3\n3 1\n''') == '''\n3 2 1\n'''\nassert solution('''\n3 3\n1 2 3\n1 2\n2 3\n3 1\n''') == '''\n2 1 3\n'''\nassert solution('''\n7 2\n5 5 5 5 5 5 5\n1 2\n1 7\n''') == '''\n5 5 5 5 5 5 5\n'''\nassert solution('''\n7 2\n5 5 5 5 5 5 5\n1 2\n2 7\n''') == '''\n5 4 4 4 4 4 5\n'''\nassert solution('''\n7 2\n5 5 5 5 5 5 5\n1 2\n3 4\n''') == '''\n5 5 5 5 5 5 5\n'''\nassert solution('''\n7 2\n5 5 5 5 5 5 5\n1 2\n3 6\n''') == '''\n4 4 4 4 4 4 5\n'''\nassert solution('''\n7 2\n5 5 5 5 5 5 5\n1 2\n4 6\n''') == '''\n5 5 5 5 5 5", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution", "solution(open('solutions/reindeer.in').read()) == open('solutions/reindeer.out').read()", "solution(\n'''\n4 3\n1 1 1 1\n1 2\n2 3\n3 4\n'''\n) == '''\n1 2 2 3\n'''\n\nassert solution(\n'''\n4 3\n1 1 1 1\n1 2\n2 3\n3 4\n'''\n) == '''\n1 2 2 3\n'''\n\nassert solution(\n'''\n'''\n) == '''\n'''\n\n# stress testing\n\n# add your own test here\n\n# print(solution(stdin_lines))", "solution(sample_input) == sample_output\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3"], "finish_reason": ["stop", "length", "length", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "stop", "stop", "stop"], "sum_logprob": [-71.84544122099999, -73.35843936571995, -126.56270319239506, -46.33420590337001, -129.72059198208498, -32.400631857499995, -34.223280687610014, -82.68871831627796, -138.03896924558148, -41.85890884621205, -42.08895177269503, -138.44580483692903, -110.09535144474997, -92.15071970650409, -118.14100952988211, -114.75948545360995, -88.78768709765006, -83.23955496540603, -162.6443659166, -73.57214542049698, -90.46493141803595, -66.780845358052, -113.00091197565, -118.02686368013796, -80.3196258610835, -74.063374101081, -142.65128875386404, -29.603268703350015, -23.682971684120005, -93.04443740495206, -82.67929425437507, -32.711403041089994, -104.52423835979103, -136.28329453115398, -42.79095487477401, -45.145191394470004, -21.267415031900008, -45.278683928279996, -149.89989420537597, -89.80313970645905, -93.10657031772698, -69.28779385272404, -42.983070618416015, -80.6617109760531, -63.18925120519195, -98.84526925588698, -13.801911583031496, -18.285169341459994, -56.35477822955002, -14.651595512360005], "mean_logprob": [-0.8452404849529411, -0.24452813121906666, -0.4218756773079833, -0.5582434446189156, -0.4324019732736167, -0.6000117010648148, -0.4563104091681333, -0.27562906105426, -0.46012989748527167, -0.13952969615404, -0.4251409269969192, -0.46148601612309664, -0.4914971046640625, -0.3071690656883467, -0.3938033650996067, -0.49252998048759655, -0.2959589569921667, -0.27746518321802, -0.5421478863886666, -0.24524048473499, -0.30154977139345335, -0.22260281786017333, -0.3766697065855, -0.39342287893379335, -0.26773208620361166, -0.24687791367027, -0.47550429584621334, -0.0986775623445, -0.3157729557882667, -0.3101481246831733, -0.2755976475145833, -0.42482341611805197, -0.34841412786597, -0.45427764843718, -0.4036882535356038, -0.4180110314302778, -0.850696601276, -0.5390319515271429, -0.49966631401792, -0.29934379902153, -0.32899848168808127, -0.23095931284241333, -0.14327690206138666, -0.26887236992017666, -0.21063083735064, -0.32948423085295664, -0.04600637194343833, -0.6095056447153333, -0.4508382258364, -0.3407347793572093]}
{"prompt": "'''\nPolycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n1 2 3\n'''", "solution('''\n2\n1 3 4 4 5 7 8\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n1 4 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 3 3 3 3 3 3\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 3 4 4 4 4 4\n''') == '''\n1 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 2 2 2 2 2\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 2 2 2 2 3\n''') == '''\n1 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 2 2 2 3 3\n''') == '''\n1 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 2 2 3 3 3\n''') == '''\n1 1 2\n'''\n\n", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 3 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 3 3 3 3 3\n''') == '''\n1 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 1 1 2 2 2\n''') == '''\n0 0 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 1 2 2 2 3\n''') == '''\n0 0 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 1 1 1 1 1\n''') == '''\n0 0 0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0 0 0 1 1 1 1\n''') == '''\n0 0 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n0 0 0 0 0 0 1\n''') == '''\n0 0 1\n'''\n\n# check the correctness of solution\nassert solution('''", "solution(\"\"\"3\n3 4 4 5 7 8 9\n1 2 3 4 5 6 7\n4 5 6 7 8 9 10\"\"\") == \"\"\"1 2 6\n1 2 3\n4 5 6\"\"\", \"Example 1\"\n\nassert solution(\"\"\"1\n1 2 3 4 5 6 7\"\"\") == \"\"\"1 2 4\"\"\", \"Example 2\"\n\nassert solution(\"\"\"1\n1 2 3 4 5 6 8\"\"\") == \"\"\"1 2 5\"\"\", \"Example 3\"\n\nassert solution(\"\"\"3\n3 4 4 5 7 8 9\n1 2 3 4 5 6 7\n4 5 6 7 8 9 10\"\"\") == \"\"\"1 2 6\n1 2 3\n4 5 6\"\"\", \"Example 4\"\n\nassert solution(\"\"\"2\n5 5 5 5 5 5 5\n1 2 3 4 5 6 7\"\"\") == \"\"\"5 5 5\n1 2 3\"\"\", \"Example 5\"\n\nassert solution(\"\"\"3\n3 4 4 5 7 8 9\n1 2 3 4 5 6 7\n4 5 6 7 8 9 10\"\"\") == \"\"\"1 2 6\n1 2 3\n4 5 6\"\"\", \"Example 6\"\n\nassert solution(\"\"\"3\n3 4 4 5 7 8 9\n1 2 3 4 5 6 7\n4 5 6 7 8 9 10\"\"\") == \"\"\"1 2 6\n1 2 3\n4 5 6\"\"\", \"Example 7", "solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert solution(\"input\") == \"output\"\nassert", "solution(\n'''5\n1 2 3 4 5 6 7\n3 1 2 4 5 6 7\n1 2 3 4 6 7 8\n2 3 4 5 6 7 9\n1 2 3 4 5 7 9\n''') == '''1 2 3\n1 3 2\n1 3 4\n1 4 3\n1 4 5\n'''", "solution(input()) == output()\nprint(\"Congratulations! You pass all test cases.\")", "solution('''\n3\n1 3 4 4 5 7 8\n1 3 3 3 3 3 3\n1 3 4 5 6 7 8\n''') == '''\n1 3 3\n1 3 3\n1 2 3\n'''", "solution('''\n''') == '''\n'''\n\n# check the performance of solution\nimport timeit\nimport functools\nassert functools.reduce(lambda x, y: x and y, map(lambda t: t < 1.0, timeit.repeat(lambda: solution('''\n'''), number=10))), 'Failed performance test'", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n'''\n\n# import output checker to test against expected output\nfrom checker import check_solution\n\n# test cases\ntest_cases = [\n    '''\n1\n1 3 4 4 5 7 8\n    ''',\n    '''\n3\n1 2 3 4 6 7 8\n1 2 3 4 6 7 8\n1 2 3 4 6 7 8\n    ''',\n    '''\n2\n2 2 2 2 2 2 2\n1 2 3 4 5 6 7\n    ''',\n    '''\n1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n    ''',\n    '''\n1\n1 2 3 4 5 6 7\n    ''',\n    '''\n2\n2 3 4 5 6 7 8\n4 5 6 7 8 9 10\n    ''',\n    '''\n1\n1 2 4 5 8 10 13\n    ''',\n    '''\n2\n1 3 6 10 15 21 28\n1 3 4 5 6 7 8\n    ''',\n    '''\n1\n1 2 3 5 8 13 21\n    ''',\n    '''\n2\n2 3 5 8 13 21 34\n1 2 3 4 5 6 7\n    ''',\n    '''\n", "solution('''\n2\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n''') == '''\n1 4 3\n1 1 1\n'''", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n'''\nassert solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n1 2 3\n'''\nassert solution('''\n1\n1 2 2 3 4 5 6\n''') == '''\n1 2 2\n'''\nassert solution('''\n1\n2 3 3 4 4 4 5\n''') == '''\n1 2 2\n'''\nassert solution('''\n1\n1 1 1 1 1 1 1\n''') == '''\n1 1 1\n'''\nassert solution('''\n1\n1 1 1 2 3 3 3\n''') == '''\n1 1 1\n'''\nassert solution('''\n1\n1 2 2 2 2 2 2\n''') == '''\n1 2 2\n'''\nassert solution('''\n1\n1 2 2 2 2 2 3\n''') == '''\n1 2 2\n'''\nassert solution('''\n1\n2 3 3 3 3 3 3\n''') == '''\n1 2 2\n'''\nassert solution('''\n1\n1 1 1 1 1 1 2\n''') == '''\n1 1 1\n'''\nassert solution('''\n1\n1 1 1", "(solution('1\\n3 4 4 5 7 8 12') == '1 2 3')\nassert (solution('1\\n1 4 5 7 8 11 13') == '1 2 4')\nassert (solution('1\\n1 3 3 3 3 3 3') == '1 1 1')\nassert (solution('1\\n1 2 3 4 5 6 7') == '1 1 1')\nassert (solution('1\\n6 7 8 8 8 8 8') == '1 5 6')\nassert (solution('1\\n7 7 7 7 7 7 7') == '7 7 7')\nassert (solution('1\\n1 9 9 9 9 9 9') == '1 4 4')\nassert (solution('1\\n1 1 1 2 2 2 3') == '1 1 1')\nassert (solution('1\\n1 3 3 3 3 3 3') == '1 1 1')\nassert (solution('1\\n1 2 2 2 2 2 2') == '1 1 1')\nassert (solution('1\\n1 2 2 2 2 2 2') == '1 1 1')\nassert (solution('1\\n1 1 1 2 2 2 2') == '1 1 1')\nassert (solution('1\\n1 2 3 3 3 3 3') == '1 1 2')\nassert (", "solution(stdin_test) == stdout_test\n\ndef get_stdin_array():\n    out = []\n    while True:\n        try:\n            out.append(str(input()))\n        except EOFError:\n            break\n    return out\n\ndef read_file(path: str) -> str:\n    with open(path, 'r') as f:\n        out = f.read()\n    return out\n\ndef get_stdin_from_file(path: str) -> str:\n    return read_file(path)\n\ndef format_output(stdout: str) -> str:\n    lines = stdout.splitlines()\n    out = ''\n    for line in lines:\n        out += line + '\\n'\n    return out\n\nif __name__ == '__main__':\n    if len(sys.argv) == 1:\n        stdin = get_stdin_array()\n    else:\n        stdin = get_stdin_from_file(sys.argv[1])\n    solution_stdout = solution(stdin)\n    formatted_solution_stdout = format_output(solution_stdout)\n    print(formatted_solution_stdout)", "'1 2 3' == solution('1 3 4 4 5 7 8')\nassert '5 5 5' == solution('5 5 5 5 5 5 5')\nassert '999 1000 1000' == solution('999 1000 1000 1000 1000 1000 1000')\n\nprint('Accepted!')", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n'''\n\nassert solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n1\n1 2 4 7 9 10 11\n''') == '''\n1 2 8\n'''\n\nassert solution('''\n1\n1 2 3 3 3 4 4\n''') == '''\n1 1 5\n'''\n\nassert solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n1\n1 2 3 3 3 4 4\n''') == '''\n1 1 5\n'''\n\nassert solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n1\n1 2 3 3 3 4 4\n''') == '''\n1 1 5\n'''\n\nassert solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n1\n1 2 3 3 3 4 4\n''') == '''\n1 1 5\n'''\n\nassert", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 3 3 4 4 5\n1 1 1 2 3 4 4\n''') == '''\n1 1 1\n2 1 1\n'''\n\n# import\nimport sys\n\n# read input\nstdin = sys.stdin.read()\n\n# solve problem\nresult = solution(stdin)\n\n# write output\nsys.stdout.write(result)", "solution('''\n4\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n1 2 3 4 5 6 8\n1 2 3 4 5 6 9\n''') == '''\n1 4 3\n-1\n2 3 3\n2 3 4\n'''\n\ndef solution(stdin):\n    def get_a(b, i = 0):\n        if i == 7:\n            return\n        a = b[i] - b[i-1]\n        if i >= 3:\n            return a\n        a2 = get_a(b, i+1)\n        if a == a2 or (a < a2 and a2 % a == 0):\n            return a\n        elif a > a2 and a % a2 == 0:\n            return a2\n        else:\n            return -1\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        b = list(map(int, stdin.readline().split()))\n        a = get_a(b)\n        if a == -1:\n            print(-1)\n        else:\n            ans = [a*i for i in range(1, 4)]\n            ans[-1] += sum(b) - sum(ans)\n            print(*ans)\n\ndef", "solution(\"\"\"\n1\n1 3 4 4 5 7 8\n\"\"\") == \"\"\"\n1 4 3\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n2\n2 3 3 3 3 5 5\n2 3 4 4 4 5 5\n\"\"\") == \"\"\"\n1 2 3\n2 2 3\n\"\"\", \"Example 2\"", "solution('''\n4\n1 2 3 4 5 6 7\n2 3 4 5 6 7 8\n1 2 3 4 5 6 10\n1 2 2 4 5 6 8\n''') == '''\n1 1 1\n2 2 2\n1 1 8\n1 2 2\n'''\n\n# the main part of code, which calls the solution function\ninput_file = sys.stdin\noutput_file = sys.stdout\n\n# 1 line test\ninput_file = io.StringIO('''\n1\n2 3 4 5 6 7 8\n''')\n\n# multi line test\ninput_file = io.StringIO('''\n4\n1 2 3 4 5 6 7\n2 3 4 5 6 7 8\n1 2 3 4 5 6 10\n1 2 2 4 5 6 8\n''')\n\nfrom multiprocessing import Process\n# write a wrapper function which calls the solution function\ndef run_wrapped(input_file, output_file):\n    \"\"\"\n    This is for replacing stdin/stdout to files\n    \"\"\"\n    sys.stdin = input_file\n    sys.stdout = output_file\n    stdin = input_file.read()\n    solution(stdin)\n    sys.stdin = sys.__stdin__\n    sys.stdout = sys.__stdout__\n", "solution(\"1\\n1 2 3 4 5 6 7\") == \"2 3 3\", \"example\"\nassert solution(\"2\\n1 2 3 4 5 6 8\\n2 3 4 5 6 7 8\") == \"1 2 4\\n1 2 4\", \"two answers\"\n\n# get input for tests\nimport os\nif os.path.exists(\"tests/{}.a\".format(__file__.split('/')[-1][:-3])):\n    with open(\"tests/{}.a\".format(__file__.split('/')[-1][:-3]), 'r') as f:\n        print(f.read())\nelse:\n    print(solution(input()))", "solution('''\n3\n1 2 4 6 8 10 12\n2 2 3 4 5 5 6\n1 2 3 4 5 6 7\n''') == '''\n1 1 1\n1 1 2\n1 2 3\n'''\n\n# if __name__ == '__main__':\n#     with open('stdin.txt', 'r') as f:\n#         stdin = f.read()\n#     print(solution(stdin))", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n'''\n\nassert solution('''\n1\n1 2 4 5 7 10 12\n''') == '''\n2 5 5\n'''\n\nassert solution('''\n1\n2 3 3 3 3 3 3\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n1\n1 2 2 3 4 4 4\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n1\n2 3 4 5 6 7 8\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n1\n2 3 3 4 4 4 4\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n1\n2 3 4 4 4 4 4\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n1\n2 2 2 2 2 2 2\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n1\n2 2 2 2 2 2 3\n''') == '''\n1 1 1\n'''\n\nassert solution('''\n1\n2 2 2 2 2 3 3\n''') == '''\n1 1 1\n'''\n\nassert", "solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n1 1 1\n'''\nassert solution('''\n1\n1 2 3 4 5 6 8\n''') == '''\n1 1 2\n'''\nassert solution('''\n1\n1 2 3 4 5 7 8\n''') == '''\n1 2 3\n'''\nassert solution('''\n1\n1 2 3 4 6 7 8\n''') == '''\n1 2 4\n'''\nassert solution('''\n1\n1 2 3 5 6 7 8\n''') == '''\n1 3 4\n'''\nassert solution('''\n1\n1 2 4 5 6 7 8\n''') == '''\n1 3 5\n'''\nassert solution('''\n1\n1 3 4 5 6 7 8\n''') == '''\n2 3 4\n'''\nassert solution('''\n1\n1 3 4 5 6 8 9\n''') == '''\n2 3 5\n'''\nassert solution('''\n1\n1 3 4 6 7 8 9\n''') == '''\n2 4 5\n'''\nassert solution('''\n1\n1 3 5 6 7 8 9\n''') == '''\n3 4 5\n'''\nassert solution('''\n1\n1 4 5", "solution('''\n3\n1 3 4 4 5 7 8\n1 4 4 5 5 5 8\n1 1 1 1 1 1 1\n''') == '''\n1 4 3\n1 5 2\n1 1 1\n'''\n\nassert solution('''\n5\n5 10 15 20 25 50 100\n1 2 3 4 7 11 22\n6 7 8 9 10 11 12\n1 1 2 4 7 14 28\n1 2 4 8 16 32 64\n''') == '''\n5 10 15\n1 2 3\n6 7 8\n1 1 2\n1 2 4\n'''\n\n# # print run time\n# import time\n# print(f'Runtime is {time.time() - start} seconds')\n \n# # print memory space\n# import resource\n# print(f'Memory used is {resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024} KB')", "solution('''\n3\n1 4 7 7 8 11 14\n1 4 7 7 8 11 15\n1 4 7 7 8 11 16\n''') == '''\n1 3 3\n1 3 4\n1 3 5\n'''\n# some test cases:\n\n# with open('subarray_sum_testcases.txt', 'r') as f:\n#     for line in f:\n#         if line.startswith('#'):\n#             pass\n#         else:\n#             print(line)\n#             print(solution(line))\n#             print('-'*50)", "solution('''\n3\n1 4 7 10 13 16 19\n1 1 7 13 19 19 19\n1 1 7 13 19 19 20\n''') == '''\n1 3 5\n1 1 5\n1 1 7\n'''", "solution('''\n2\n1 3 4 4 5 7 8\n2 3 4 5 6 7 8\n''') == '''\n1 4 3\n3 4 5\n'''", "solution(stdin) == stdout", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n'''\nassert solution('''\n3\n1 2 3 4 5 6 7\n10 13 20 30 50 70 80\n5 5 5 5 5 5 5\n''') == '''\n3 2 1\n20 13 10\n5 5 5\n'''\nassert solution('''\n2\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n''') == '''\n1 2 3\n1 2 3\n'''\n# print solution(stdin)", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n'''\nassert solution('''\n2\n2 3 3 3 4 5 5\n2 3 3 3 4 5 5\n''') == '''\n1 1 1\n1 1 1\n'''\nassert solution('''\n3\n3 3 4 4 4 5 5\n3 3 4 4 4 5 5\n3 3 4 4 4 5 5\n''') == '''\n2 2 1\n2 2 1\n2 2 1\n'''\nassert solution('''\n4\n3 3 3 3 4 4 4\n3 3 3 3 4 4 4\n3 3 3 3 4 4 4\n3 3 3 3 4 4 4\n''') == '''\n2 1 1\n2 1 1\n2 1 1\n2 1 1\n'''\nassert solution('''\n5\n3 3 3 3 4 4 5\n3 3 3 3 4 4 5\n3 3 3 3 4 4 5\n3 3 3 3 4 4 5\n3 3 3 3 4 4 5\n''') == '''\n2 1 1\n2 1 1\n2 1 1\n2 1 1\n2 1 1\n'''\nassert solution('''\n6\n3 3 3 3 4 5 5\n3 3 3 3 4 5 5\n3 3 3 3 4 5 5\n3 3 3 3", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 5 5 6 7 9\n1 2 3 3 4 4 5\n''') == '''\n2 3 5\n1 2 3\n'''", "solution('''3\n1 3 4 4 5 7 8\n1 3 3 3 3 3 3\n10 100 110 200 300 400 500\n''') == '''1 4 3\n1 2 3\n1 10 100\n'''\n\n# set stding, stdout\nss = \"\"\"\n1 3 4 4 5 7 8\n\"\"\"\nimport sys\nif sys.version_info.major == 2:\n    if sys.stdin.read(1):\n        sys.stdin = open('in.txt')\n    sys.stdout = open('out.txt', 'w')\n    s = ss\n    sys.stdin = open('in.txt')\nelse:\n    s = ss\n    sys.stdin = open('in.txt')\n    sys.stdout = open('out.txt', 'w')\n\n# print(s)\nsys.stdin = open('in.txt')\nsys.stdout = open('out.txt', 'w')\n\n# run solution\nsolution(s)", "solution(str) == 'str'\n\n'''\nsolution by @eel .\n\na[0]  a[1]  a[2]   \n  1      1      1       \n  2      1      1       \n  2      2      1       \n  3      1      1       \n  3      2      1       \n  3      2      2       \n  4      1      1       \n  4      2      1       \n  4      2      2       \n  4      3      1       \n  4      3      2       \n  4      3      3\n\n'''", "solution(\"\"\"\n5\n1 3 4 4 5 7 8\n1 3 3 3 3 3 3\n1 3 4 5 6 7 8\n1 2 3 4 5 6 7\n7 7 7 7 7 7 7\n\"\"\") == \"\"\"\n1 3 4\n1 3 2\n1 2 3\n1 2 3\n7 7 7\n\"\"\"\n\nprint(\"All tests passed!\")", "solution('''1\n1 3 4 4 5 7 8''') == '''1 3 3'''\nassert solution('''1\n1 5 7 9 11 15 17''') == '''1 1 2'''\nassert solution('''1\n1 2 2 2 2 2 2''') == '''1 1 1'''\nassert solution('''2\n1 3 4 4 5 7 8\n1 2 4 4 5 7 8''') == '''1 3 3\n1 2 3'''\n\n# read in the input\nimport sys\nsys.stdin = open('input.txt', 'r')\n\n# run solution in CLI\nimport unittest\nimport io\nfrom contextlib import redirect_stdout\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        stdin = \"\"\"1\n1 3 4 4 5 7 8\"\"\"\n        stdout = \"\"\"1 3 3\"\"\"\n        with io.StringIO() as buf, redirect_stdout(buf):\n            exec(stdin)\n        self.assertEqual(buf.getvalue(), stdout)\n\n    def test_2(self):\n        stdin = \"\"\"1\n1 5 7 9 11 15 17\"\"\"\n        stdout = \"\"\"1 1 2\"\"\"\n        with io.StringIO() as buf, redirect_stdout(buf):", "solution(\"\"\"1\n1 3 4 4 5 7 8\"\"\") == \"\"\"1 4 3\"\"\"\n\nprint(\"If this is all you see, you've successfully passed all test cases!\")\n\n# get input from stdin\ndef get_input() -> str:\n    lines = []\n    while True:\n        try:\n            lines.append(input())\n        except EOFError:\n            break\n    return \"\\n\".join(lines)\n\n# get output from stdout\ndef get_output(stdout: str) -> str:\n    lines = stdout.split(\"\\n\")\n    lines = lines[:len(lines) - 1]\n    return \"\\n\".join(lines)\n\n# run solution and compare the output\ninp = get_input()\nout = get_output(solution(inp))\nwith open(\"output.txt\", \"w\") as f:\n    f.write(out)\ntry:\n    assert out == get_input()\nexcept AssertionError:\n    print(\"Wrong answer\")\nelse:\n    print(\"Accepted\")", "solution(\"\"\"\n\n\"\"\") == \"\"\"\n\"\"\"", "solution(\"\"\"8\n1 1 2 3 5 6 8\n2 2 3 4 5 6 9\n1 2 2 2 2 2 2\n1 2 2 2 2 2 2\n3 4 5 5 5 6 8\n4 7 8 10 12 12 12\n2 3 3 3 3 3 3\n2 3 3 3 3 3 3\"\"\") == \"\"\"1 0 0\n0 1 0\n0 0 1\n1 0 0\n0 0 1\n0 1 0\n0 0 1\n1 0 0\"\"\"", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 3 3\n'''\nassert solution('''\n1\n1 2 2 4 5 5 8\n''') == '''\n1 1 1\n'''\nassert solution('''\n1\n1 2 2 4 5 7 7\n''') == '''\n1 1 3\n'''\nassert solution('''\n1\n1 2 3 3 3 3 3\n''') == '''\n1 1 1\n'''\nassert solution('''\n1\n1 2 3 4 4 5 6\n''') == '''\n1 2 3\n'''\nassert solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n1 2 3\n'''\nassert solution('''\n1\n1 2 3 4 5 5 6\n''') == '''\n1 2 3\n'''\nassert solution('''\n1\n1 2 3 4 4 4 5\n''') == '''\n1 2 3\n'''\nassert solution('''\n1\n1 2 3 4 4 4 4\n''') == '''\n1 2 3\n'''\nassert solution('''\n1\n1 2 3 3 3 4 4\n''') == '''\n1 2 3\n'''\nassert solution('''\n1\n1 2 3", "solution('''\n2\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n''') == '''\n2 3 4\n'''\n\n# test the execution time\nimport cProfile\ncProfile.run('solution(stdin)')\n\n'''\ntest cases for 100 points:\n\ntest case 3:\n    input:\n        3\n        14 14 14 14 14 14 14\n        8 9 10 15 20 25 30\n        1 2 4 8 16 32 64\n    output:\n        14 14 14\n        1 1 1\n        1 2 4\n\ntest case 2:\n    input:\n        2\n        1 2 3 4 5 6 7\n        1 1 1 1 1 1 1\n    output:\n        1 1 1\n        1 1 1\n\ntest case 1:\n    input:\n        3\n        1 3 4 4 5 7 8\n        1 2 3 4 5 6 7\n        7 8 9 12 13 14 15\n    output:\n        2 3 4\n        2 3 3\n        4 4 5\n\n'''", "solution(\n    '''\n    2\n    1 2 3 4 5 6 7\n    2 3 5 6 8 9 11\n    '''\n) == '''\n1 1 5\n1 2 4\n'''\nassert solution(\n    '''\n    1\n    1 1 1 2 2 3 4\n    '''\n) == '''\n1 1 2\n'''\n\n# don't worry about the complexity of solution\n# as it will be checked by the judge\n\nif __name__ == '__main__':\n    with open('input.txt', 'r') as infile:\n        with open('output.txt', 'w') as outfile:\n            outfile.write(solution(infile.read()))", "solution('''\n3\n1 3 4 4 5 7 8\n2 3 5 7 9 11 19\n1 1 1 1 1 1 1\n''') == '''\n1 3 4\n2 3 5\n7 7 7\n'''", "solution('''\n4\n1 3 4 4 5 7 8\n2 3 3 3 3 3 3\n1 1 1 1 2 3 5\n2 3 4 7 9 10 11\n''') == '''\n1 4 3\n3 3 3\n1 1 2\n2 4 9\n'''", "solution(stdin) == 'a'\n\n# print the solution and runtime\nprint(f'{solution()} \\nruntime: {time.time() - start_time}')", "solution(example_input) == example_output\nassert solution(additional_input) == additional_output", "solution('''\n2\n1 3 4 4 5 7 8\n2 5 7 9 10 11 11\n''') == '''\n1 4 3\n3 7 2\n'''", "solution('''\n3\n1 3 4 4 5 7 8\n1 3 3 3 4 5 5\n1 2 3 4 5 6 7\n''') == '''\n1 4 3\n3 3 3\n1 2 3\n'''", "(solution('''2\n\n2 3 5 6 7 8 9\n2 3 5 6 7 8 9''') == '''1 2 3\n\n3 2 1''')\n\nassert (solution('''3\n\n3 5 6 7 8 9 10\n2 3 5 6 7 8 9\n2 3 4 5 6 7 8''') == '''1 1 1\n\n2 1 1\n\n2 1 1''')\n\nassert (solution('''5\n\n1 1 1 1 1 1 1\n3 5 6 7 8 9 10\n2 3 5 6 7 8 9\n2 3 4 5 6 7 8\n2 3 5 6 7 8 9''') == '''1 1 1\n\n1 1 1\n\n1 1 1\n\n1 1 1\n\n2 1 1''')", "solution('''\n1\n1 3 4 4 5 7 8\n''') == '''\n1 4 3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 2 3 4 5 6 7\n1 3 4 4 5 6 7\n''') == '''\n1 2 3\n1 2 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 1 1 1 1 1\n''') == '''\n1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n12 24 48 24 48 48 48\n1 2 4 4 4 4 4\n1 2 4 4 4 4 4\n''') == '''\n12 12 24\n1 1 2\n1 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 3 4 5 6 7\n''') == '''\n1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n"], "finish_reason": ["stop", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-13.990367361899997, -51.57914339069799, -65.718266860545, -69.81729577728397, -17.428584178824003, -47.62894472279998, -29.563522839999997, -23.285092128699997, -42.63336906402001, -130.66695061104602, -11.656351907, -62.97521858929397, -108.10089948208501, -103.97094951649814, -36.56929286079999, -52.62041556845099, -58.22257898636998, -130.56142923021, -36.30310855360001, -188.63474679476576, -76.06367378714299, -51.409249708210034, -76.0790728152801, -29.216560709386965, -127.54086467092502, -98.10042695712004, -39.41951367839999, -15.759035211399995, -5.48153842, -65.46402117532001, -57.92892424380003, -30.03357649539, -121.86692479653206, -95.16007594348007, -44.22301396539999, -102.53340595972502, -107.12961670601003, -10.163940861, -90.27563564234003, -68.78872357918398, -163.21955200198005, -91.18747443724499, -26.658065484600005, -41.7946232016, -46.04365849540001, -12.83263407558, -24.57902539000001, -20.035878322299997, -81.57083256903996, -77.81498094688504], "mean_logprob": [-0.2152364209523077, -0.17193047796899333, -0.21906088953515, -0.23272431925761333, -0.05809528059608, -0.635052596304, -1.5559748863157894, -0.4477902332442308, -0.501569047812, -0.43555650203682, -0.291408797675, -0.20991739529764666, -0.36033633160695, -0.362268116782223, -0.6094882143466667, -0.17540138522817, -0.45486389833101565, -0.4352047641007, -0.4905825480216216, -0.6287824893158867, -0.4753979611696438, -0.4991189292059223, -0.25359690938426666, -0.09738853569795666, -0.6221505593703659, -0.721326668802353, -0.7580675707384615, -0.393975880285, -0.6090598244444444, -0.5035693936563077, -0.193096414146, -0.39004644799207794, -0.5321699772774323, -0.6945990944779562, -0.5393050483585365, -0.34177801986575, -0.43372314455874494, -0.84699507175, -0.8597679584984762, -0.22929574526394667, -0.6857964369831092, -0.5526513602257273, -0.5126551054730769, -0.653040987525, -1.0707827557069767, -0.5346930864825, -0.61447563475, -0.3853053523519231, -0.46611904325165715, -0.25938326982295]}
{"prompt": "'''\nPolycarp has come up with a new game to play with you. He calls it \"A missing bigram\".\n\nA bigram of a word is a sequence of two adjacent letters in it.\n\nFor example, word \"abbaaba\" contains bigrams \"ab\", \"bb\", \"ba\", \"aa\", \"ab\" and \"ba\".\n\nThe game goes as follows. First, Polycarp comes up with a word, consisting only of lowercase letters 'a' and 'b'. Then, he writes down all its bigrams on a whiteboard in the same order as they appear in the word. After that, he wipes one of them off the whiteboard.\n\nFinally, Polycarp invites you to guess what the word that he has come up with was.\n\nYour goal is to find any word such that it's possible to write down all its bigrams and remove one of them, so that the resulting sequence of bigrams is the same as the one Polycarp ended up with.\n\nThe tests are generated in such a way that the answer exists. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 2000) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (3 \u2264 n \u2264 100) \u2014 the length of the word Polycarp has come up with.\n\nThe second line of each testcase contains n-2 bigrams of that word, separated by a single space. Each bigram consists of two letters, each of them is either 'a' or 'b'.\n\nAdditional constraint on the input: there exists at least one string such that it is possible to write down all its bigrams, except one, so that the resulting sequence is the same as the sequence in the input. In other words, the answer exists.\n\nOutput\n\nFor each testcase print a word, consisting of n letters, each of them should be either 'a' or 'b'. It should be possible to write down all its bigrams and remove one of them, so that the resulting sequence of bigrams is the same as the one Polycarp ended up with.\n\nThe tests are generated in such a way that the answer exists. If there are multiple answers, you can print any of them. \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(stdin) == answer", "solution(\"2 3 ab ba 2 ab\") == \"aba\", \"wrong answer\"\nassert solution(\"1 4 abba abba\") == \"abba\", \"wrong answer\"\nassert solution(\"1 5 ababa aba\") == \"ababa\", \"wrong answer\"\nassert solution(\"2 3 ab ba 2 ab\") == \"aba\", \"wrong answer\"\nassert solution(\"1 2 ab ab\") == \"ba\", \"wrong answer\"\nassert solution(\"1 4 abba abba\") == \"abba\", \"wrong answer\"\nassert solution(\"1 7 abababa aba\") == \"abababa\", \"wrong answer\"\nassert solution(\"1 3 aba aba\") == \"aba\", \"wrong answer\"\nassert solution(\"1 6 ababab aba\") == \"ababab\", \"wrong answer\"\nassert solution(\"1 3 aba aba\") == \"aba\", \"wrong answer\"\nassert solution(\"1 5 ababa aba\") == \"ababa\", \"wrong answer\"\nassert solution(\"1 6 ababab aba\") == \"ababab\", \"wrong answer\"\nassert solution(\"1 4 abaab abab\") == \"abaab\", \"wrong answer\"\nassert solution(\"1 7 ababaaba ababa\") == \"ababaaba\", \"wrong answer\"\nassert solution(\"1 6 ababab aba\") == \"ababab\", \"wrong answer\"", "solution('''\n4\n3\nab\n4\naa ab\n6\nab ab ba\n7\nab ba ba aa\n''') == '''\nbab\naaba\naababa\naabaabaa\n'''", "solution('''\n1\n3\naa ab\n''') == 'bba'\n\n# check the performance of solution\nassert solution('''\n10\n3\naa ab\n3\nba aa\n3\nba ab\n4\nab ba ab\n5\nab ba ab ba\n6\nab ba ab ba ab\n7\nab ba ab ba ab ba\n8\nab ba ab ba ab ba ab\n9\nab ba ab ba ab ba ab ba\n10\nab ba ab ba ab ba ab ba ab\n10\nab ba ab ba ab ba ab ba ab ab\n''') == 'bba'", "solution('''6\n5\nab ba\n7\naa bb ab ab ab\n7\nab ab ab ab ab ab\n8\nab ba ba ba ba ba\n9\naa ba ba ba ba ba\n9\naa aa aa aa aa''') == '''ababa\naababbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb", "solution('''\n3\n5\nab ba\n6\nab ba ab\n8\nab ba ab ab\n''') == '''\nababa\nabbaba\nabababa\n'''", "solution('''\n1\n5\nab ba\n''') == 'abba'\n\n# check the correctness of solution\nassert solution('''\n1\n5\naa ab\n''') == 'baaab'\n\n# check the correctness of solution\nassert solution('''\n1\n5\nba ab\n''') == 'baaba'\n\n# check the correctness of solution\nassert solution('''\n1\n5\nba ba\n''') == 'baaba'\n\n# check the correctness of solution\nassert solution('''\n1\n7\nab ba ba ab\n''') == 'abbaaba'\n\n# check the correctness of solution\nassert solution('''\n1\n7\nab ab ab ab\n''') == 'abaabab'\n\n# check the correctness of solution\nassert solution('''\n1\n7\naa ab ab ab\n''') == 'baaabab'\n\n# check the correctness of solution\nassert solution('''\n1\n9\nab ba ba ab ab ba ba\n''') == 'abbaabaaba'\n\n# check the correctness of solution\nassert solution('''\n1\n9\naa ab ab ab ab ab ab\n''') == 'baaababaab'\n\n# check the correctness of solution\nassert solution('''\n1\n11\nab ba ba ab ab ba ba", "solution(\"\"\"\n1\n5\nab ba\n\"\"\") == \"ababa\"\nassert solution(\"\"\"\n1\n8\naa bb ab ba aba bab abb\n\"\"\") == \"abbaabab\"\nassert solution(\"\"\"\n2\n4\naa bb ba ab\n4\naa bb ba ab\n\"\"\") == \"abababab\"\nprint(\"All tests passed\")", "solution(\"\"\"\n3\n3\nab\n3\naa\n3\nab ab\n\"\"\") == \"\"\"\naba\naba\nbab\n\"\"\"", "solution(\"\"\"5\n5\nab ba\n5\nab ba ba\n7\nab ba ab ab\n8\nab ba ab ab ab\n5\nab ab ba\"\"\") == \"\"\"ababa\nabbaba\nababbaa\nababbaba\nbabbab\"\"\"\n\ndef test_solution():\n    t = int(input())\n    for test in range(t):\n        n = int(input())\n        bigrams = input().split(' ')\n        print(solution(n, bigrams))\n\n# test_solution()", "solution(r'''\n1\n3\nab ba\n''') == r'''\naba\n'''\n\n# submitted solution\nimport sys\nfrom typing import List, Tuple\n\nfrom utils import read_str\n\n#------------------------------------------------------------------------------#\n\ndef solution(stdin: str) -> str:\n    def build_bigrams(word: str) -> List[Tuple[str, str]]:\n        # collect all bigrams\n        bigrams = []\n        for i in range(len(word) - 1):\n            bigrams.append((word[i], word[i + 1]))\n        return bigrams\n\n    def sanitize_bigrams(bigrams: List[Tuple[str, str]]) -> List[Tuple[str, str]]:\n        # remove duplicates and sort by 1st element then by 2nd\n        seen = set()\n        result = []\n        for bg in bigrams:\n            if bg not in seen:\n                seen.add(bg)\n                result.append(bg)\n        return sorted(result, key=lambda x: (x[0], x[1]))\n\n    def remove_bigram(bigrams: List[Tuple[str, str]], bigram: Tuple[str, str]) -> List[Tuple[str, str]]:", "solution(\n'''\n2\n5\naa bb\n5\naa bb aa\n'''\n) == '''\nabba\nabba\n'''", "\"abababa\" == solution('''3\n7\naa bb ab\n3\nab\n4\nba ab''')", "solution('''\n1\n4\nab ab\n''') == 'abba'\n\n# check the correctness of solution\nassert solution('''\n1\n6\naa ab ba ba bb\n''') == 'aababb'\n\n# check the correctness of solution\nassert solution('''\n2\n6\naa ab ba ba bb\n5\naa ba ab\n''') == 'aababb\\naabba'\n\n# check the correctness of solution\nassert solution('''\n3\n5\nab ab aa\n4\nab ab\n5\naa ab ba\n''') == 'aabba\\nabba\\naabaa'\n\n# check the correctness of solution\nassert solution('''\n1\n3\naa ab\n''') == 'aba'\n\n# check the correctness of solution\nassert solution('''\n1\n6\nba ba aa ab ab bb\n''') == 'baabab'\n\n# check the correctness of solution\nassert solution('''\n1\n7\nba ab aa ab ab bb ba\n''') == 'baaabab'\n\n# check the correctness of solution\nassert solution('''\n1\n9\nba ab aa ab ab bb ba ab ab\n''') == 'baaababab'\n\n# check the correctness of solution\nassert solution(''", "solution('''\n3\n3\nab\n3\nba\n3\naa\n''') == '''\naba\nbab\naaa\n'''", "solution(\"1\\n3\\nab ba\") == \"bab\"\nassert solution(\"2\\n3\\nab ba\\n3\\nab ab\") == \"bab\"\nassert solution(\"3\\n3\\nab ba\\n3\\nab ab\\n3\\nba ab\") == \"bab\"\n\nprint(\"Success!\")", "solution('''\n4\n4\nab ba\n4\nab ba\n4\nab ba\n4\nab ba\n''') == '''\nabba\nbaba\nabba\nbaba\n'''", "solution('''\n5\n5\nab aba\n5\naba ba\n7\nab baa aba\n9\nba aab aaab aa\n12\nba baa baab aab aaba aabaa aa\n''') == '''\nabbaa\nabbaa\nabbaaa\nbbaaaa\nbbaaaaaaaa\n'''", "solution('''3\n6\nab ba ab\n8\naa ba ba aa ba ba\n6\nab ba ba ab ba''') == '''ababbb\nabaabaab\nabbbab'''", "solution('''\n4\n4\naa\n4\nab\n4\nba\n7\nba ab\n''') == '''\nabba\nbaba\nabba\nabbaaba\n'''", "solution('''\n3\n4\nab ba\n4\nab ba\n4\nba ab\n''') == '''\nabba\nabba\nabba\n'''", "solution('''\n2\n4\nab ba\n5\nab ba ab\n''') == '''\nabba\naabba\n'''", "solution('''\n2\n4\nab ba\n6\nba ab ab ba ba\n''') == '''\nabba\naabbaaba\n'''", "solution('''\n2\n6\naa ab\n7\nab ab ab\n''') == '''\nababba\naabbaba\n'''", "solution('''1\n4\nab ba\n''') == 'abba'\nassert solution('''2\n4\nab ba\n3\naa ab\n''') == 'abba'\nassert solution('''3\n4\nab ba\n3\naa ab\n5\nba ab ba ab\n''') == 'abba'\n\n# try submit solution\nprint(solution(stdin))", "solution(\"\"\"\n2\n5\nab bb\n7\nab bb bb ab ab ab\n\"\"\") == \"\"\"\nabbaab\nabbabbab\n\"\"\", \"Wrong answer\"\n\n# ======= TESTS =========\n\nfrom unittest import TestCase\nfrom random import randint\nfrom itertools import product\nfrom string import ascii_lowercase\n\nclass BigramsTest(TestCase):\n    def test_from_task(self):\n        tests = '''2\n5\nab bb\n7\nab bb bb ab ab ab'''\n        ans = '''abbaab\nabbabbab'''\n        self.assertEqual(solution(tests), ans)\n\n    def test_uniq_bigrams(self):\n        for _ in range(100):\n            n = randint(3, 100)\n            s = ''.join(randint(0, 1) and 'a' or 'b' for _ in range(n))\n            ans = list(map(''.join, zip(s, s[1:])))\n            self.assertEqual(solution(f'{n}\\n{\" \".join(ans)}'), s)\n\n    def test_all_bigrams(self):\n        for n in range(3, 100):\n            for s in product(as", "solution('''\n3\n3\nab\n4\naa ab ba\n8\nab ab ab ab\n''') == '''\nabb\naabb\nabbabbab\n'''", "solution(\"3\\n3\\naa\\n3\\nab\\n3\\nba\\n3\\nbb\\n3\\nba\") == \"aba\"", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\n \n# test for performance\nfrom utils.test_performance import run_test\n\n# run the test\nrun_test(test_cases=[test_case1, test_case2])", "solution(\"10\\n\"\n\"3\\n\"\n\"ab ba\\n\"\n\"4\\n\"\n\"ab ba ba\\n\"\n\"3\\n\"\n\"ab ab\\n\"\n\"3\\n\"\n\"ab ab\\n\"\n\"3\\n\"\n\"ab ab\\n\"\n\"3\\n\"\n\"ab ab\\n\"\n\"4\\n\"\n\"ab ab ab\\n\"\n\"4\\n\"\n\"ab ab ab\\n\"\n\"4\\n\"\n\"ab ab ab\\n\"\n\"4\\n\"\n\"ab ab ab\\n\"\n\"4\\n\"\n\"ab ab ab\\n\") == \"bbaa\"", "solution('''\n3\n3\nab\n3\nba\n4\naab aab\n''') == '''\nbab\naba\naba\n'''", "solution('''\\\n2\n5\naa bb\n7\nab ba ab bb ba ba\n''') == '''\\\naabbb\naabbbbb\n'''", "solution(\"\"\"1\n3\naa\n\"\"\") == \"aba\"\n\nassert solution(\"\"\"1\n6\nba ba\n\"\"\") == \"abbaab\"\n\nassert solution(\"\"\"1\n8\nab ba ab\n\"\"\") == \"abbabbab\"\n\nassert solution(\"\"\"1\n4\naa ab\n\"\"\") == \"aaba\"\n\nassert solution(\"\"\"1\n4\nab ab\n\"\"\") == \"abba\"\n\nassert solution(\"\"\"1\n4\nab ba\n\"\"\") == \"aabb\"\n\nassert solution(\"\"\"1\n9\nba ab ab ab\n\"\"\") == \"babaababa\"\n\nassert solution(\"\"\"1\n9\nab ba ab ab\n\"\"\") == \"abbabbaab\"\n\nassert solution(\"\"\"1\n8\nba ab ba ab\n\"\"\") == \"babaabba\"\n\nassert solution(\"\"\"1\n8\nba ba ab ab\n\"\"\") == \"babababba\"\n\nassert solution(\"\"\"1\n8\nba ab ba ba\n\"\"\") == \"babaabbb\"\n\nassert solution(\"\"\"1\n10\nba ab ba ab ab\n\"\"\") == \"babaabbaba\"\n\nassert solution(\"\"\"1\n10\nba ab ba ab ba\n\"\"\") == \"babaabbbab\"\n\nassert solution(\"\"\"1\n10\nba ba ab ab ab", "solution(stdin=\"\"\"\n3\n3\nab\n3\nba\n5\naa ba ab ab\n\"\"\") == \"\"\"\naba\nbab\nbabaa\n\"\"\", \"Example\"\n\nassert solution(stdin=\"\"\"\n3\n3\nab\n3\nba\n5\naa ab ab ab\n\"\"\") == \"\"\"\naba\naba\nbabaa\n\"\"\", \"Second Example\"\n\nassert solution(stdin=\"\"\"\n3\n3\nab\n3\nba\n5\nab ab ab ab\n\"\"\") == \"\"\"\naba\naba\nabaaa\n\"\"\", \"Third Example\"\n\nassert solution(stdin=\"\"\"\n9\n5\naa ab ab ab\n7\nab ab ab ab\n5\naa ba ab ab\n11\nab ab ab ab\n9\naa ab ab ab\n11\naa ab ab ab\n7\nab ab ab ab\n9\naa ab ab ab\n5\naa ba ab ab\n\"\"\") == \"\"\"\nabaab\nabaaaaa\nbabaaab\naaaaaabab\nabaaaaab\nabaaaaaab\nabaaaaaa\nbabaaabaa\n\"\"\", \"Worst Case #1\"\n\nassert solution(stdin=\"\"\"\n9\n5\naa ab ab ab\n7\nab ab ab ab\n5\naa ba ab ab\n11\nab ab ab ab\n9", "solution('''\n1\n4\naa ab\n''') == 'abba'\nassert solution('''\n1\n4\nab aa\n''') == 'abba'\nassert solution('''\n1\n7\nab ba ab ba ba ab\n''') == 'ababbaab'\nassert solution('''\n1\n5\nab ab ba ab\n''') == 'abbaab'\nassert solution('''\n1\n3\naa ab\n''') == 'baa'\nassert solution('''\n1\n5\nab ab ab ab\n''') == 'abbaab'\nassert solution('''\n1\n5\nab ba ba ba\n''') == 'ababba'\nassert solution('''\n1\n5\nba ba ba ba\n''') == 'bababa'\nassert solution('''\n1\n5\nba ba ba ba\n''') == 'bababa'\nassert solution('''\n1\n6\nab ba ab ba ba\n''') == 'ababbaa'\nassert solution('''\n1\n5\nab ba ab ba\n''') == 'abbaba'\nassert solution('''\n1\n3\naa ab\n''') == 'baa'\nassert solution('''\n1\n5\nba ba ba ba\n''') == 'bababa'\nassert solution(", "(solution('1\\n3\\nab ba')) == 'bab'\nassert (solution('1\\n4\\nab ba ab')) == 'abba'\nassert (solution('1\\n4\\nab ab ab')) == 'abba'\nassert (solution('1\\n5\\nab ba ab ab')) == 'abbaab'\nassert (solution('1\\n5\\nab ab ab ab')) == 'abbaab'\nassert (solution('1\\n5\\nab ab ba ab')) == 'abbaab'\nassert (solution('1\\n6\\nab ba ab ab ab')) == 'abbaaba'\nassert (solution('1\\n6\\nab ab ab ab ab')) == 'abbaaba'\nassert (solution('1\\n6\\nab ab ba ab ab')) == 'abbaaba'\nassert (solution('1\\n6\\nab ab ab ba ab')) == 'abbaaba'\nassert (solution('1\\n6\\nab ab ab ab ba')) == 'abbaaba'\nassert (solution('1\\n7\\nab ba ab ab ab ab')) == 'abbaabab'\nassert (solution('1\\n7\\nab ab ab ab ab ab')) == 'abbaab", "solution('''\n2\n4\nab ab\n7\nab ab ab ab ab ab\n''') == '''\nabba\naabbaba\n'''", "solution('''\n3\n3\naa\n3\nba\n5\nba ab\n''') == '''\naba\naba\nabba\n'''", "solution(\"\"\"\n4\n4\naa ab\n4\naa ab\n4\nab ba\n4\nab ab\n\"\"\") == \"\"\"\naba\nbab\naba\naab\n\"\"\"", "solution(\"4\\n4\\na b\\n6\\na b b a\\n6\\na b a b\\n6\\na b a a\") == \"abaa\\nababa\\nababa\\nababa\"\n\n# test for performance\nimport random\nimport string\n\ndef generate_test(length: int, max_length: int) -> str:\n    output = list()\n    output.append(str(length))\n    output.append(str(length - 2))\n    output.append(' '.join(random.choices(['a b'] * 2, k=length - 2)))\n    return '\\n'.join(output)\n\nif __name__ == '__main__':\n    import os\n    import sys\n    import timeit\n\n    def generate_input(test_count: int, n: int, m: int):\n        output = list()\n        output.append(str(test_count))\n        for _ in range(test_count):\n            output.append(generate_test(random.randint(3, 100), 100))\n        return '\\n'.join(output)\n\n    def run_solution(solution_func, input: str) -> str:\n        output = list()\n        lines = input.split('\\n')\n        lines = lines[", "solution(r'''\n1\n3\nab\n''') == r'''\naba\n'''\n\nassert solution(r'''\n1\n5\nab ba\n''') == r'''\nabba\n'''\n\nassert solution(r'''\n1\n5\nba ab\n''') == r'''\nabba\n'''\n\nassert solution(r'''\n1\n7\nab ab ab\n''') == r'''\nabababa\n'''\n\nassert solution(r'''\n1\n9\nab ab ab ab\n''') == r'''\nababababa\n'''\n\nassert solution(r'''\n1\n9\nab ba ab ba\n''') == r'''\nabbaababa\n'''\n\nassert solution(r'''\n1\n9\nba ab ba ab\n''') == r'''\nabbaababa\n'''\n\nassert solution(r'''\n1\n9\nba ba ab ab\n''') == r'''\nbababbaab\n'''\n\nassert solution(r'''\n1\n9\nba ba ba ab\n''') == r'''\nbabababab\n'''\n\nassert solution(r'''\n1\n9\nba ba ba ba\n''') == r'''\nbabababab\n'''\n", "solution('''\n1\n5\nab ba\n''') == 'abba'\n\n# fin\nprint('solved')", "(solution('''\n3\n3\naa ab\n5\nab ba ab ba ab\n5\naa aa aa aa aa\n''')) == '''\nbab\nbaba\naaaaa\n'''", "solution(\"1\") == None", "solution('''\n3\n3\nab\n3\naa\n3\nba\n''') == '''\naba\naba\nbab\n'''", "solution('''\n1\n5\nab ba ab\n''') == 'ababa'\nassert solution('''\n2\n5\nab ba ab\n7\nab ba ab ba ab\n''') == 'ababa'\n\n# check the correctness of solution for max input\nmax_input = \"\"\"\n2000\n100\nab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba ab ba", "solution('''\n1\n3\naa ab\n''') == 'bba'\n\n# check the correctness of solution\nassert solution('''\n1\n4\naa ab bb\n''') == 'abba'\n\n# check the correctness of solution\nassert solution('''\n1\n4\naa ba ab\n''') == 'abba'\n\n# check the correctness of solution\nassert solution('''\n1\n5\naa ab bb ab bb\n''') == 'babab'\n\n# check the correctness of solution\nassert solution('''\n1\n6\naa ab bb ab bb bb\n''') == 'bababb'\n\n# check the correctness of solution\nassert solution('''\n1\n7\naa ab bb ab bb bb ba\n''') == 'bababba'\n\n# check the correctness of solution\nassert solution('''\n1\n8\naa ab bb ab bb bb ba ba\n''') == 'bababbab'\n\n# check the correctness of solution\nassert solution('''\n1\n9\naa ab bb ab bb bb ba ba bb\n''') == 'bababbabb'\n\n# check the correctness of solution\nassert solution('''\n1\n10\naa ab bb ab bb bb ba ba", "solution('''\n2\n5\nab bb ba\n4\nab ba aa\n''') == '''\nabbaab\nabba\n'''", "solution(\"\"\"5\n5\nab ab\n6\nab ab ab\n8\nab ab ab ab\n7\nab ab ab ba\n7\nab ab ba ba\"\"\") == \"\"\"ababa\nabbaab\nabababab\nabbaabba\nabababab\"\"\", \"The test failed.\"\n\n# test performance\nimport timeit\nassert timeit.timeit(stmt=\"solution('''5\\n5\\nab ab\\n6\\nab ab ab\\n8\\nab ab ab ab\\n7\\nab ab ab ba\\n7\\nab ab ba ba''')\", setup=\"from __main__ import solution\", number=10000) < 0.2, \"Time performance test failed.\"", "solution('''1\n3\naa ab\n''') == 'bba'\n\nassert solution('''1\n6\naa ba ba ba ba ba\n''') == 'abbaba'\n\nassert solution('''1\n3\nab ba\n''') == 'bab'\n\nassert solution('''1\n4\naa aa aa aa\n''') == 'aaba'\n\nassert solution('''1\n5\nab ab ab ab ab\n''') == 'babab'\n\nassert solution('''1\n4\naa ab ab ab\n''') == 'baba'\n\nassert solution('''1\n4\nab ba ba ba\n''') == 'abab'\n\nassert solution('''1\n4\naa aa aa aa\n''') == 'aaba'\n\nassert solution('''1\n5\nab ab ab ab ab\n''') == 'babab'\n\nassert solution('''1\n3\naa ab\n''') == 'bba'\n\nassert solution('''1\n6\naa ba ba ba ba ba\n''') == 'abbaba'\n\nassert solution('''1\n3\nab ba\n''') == 'bab'\n\nassert solution('''1\n4\naa aa aa aa\n''')"], "finish_reason": ["stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length"], "sum_logprob": [-7.8510957672999995, -101.78434961305801, -38.338354085499994, -49.02017548501, -71.80972643917993, -21.749383896200005, -63.79411792585106, -59.44930775202999, -21.0728306181, -75.21549028169996, -135.2607184683809, -23.3552708345, -29.207254687299997, -104.19285520188903, -16.341790422399995, -30.266371017580006, -20.010070045760006, -80.08873923596002, -43.37032238479999, -27.229704850399997, -16.718921757999997, -13.375426608600005, -17.7880309415, -21.842570737299994, -44.08749799801, -137.80517221134835, -28.076678652400002, -23.3834808572, -46.71067132682, -44.20332951046502, -23.073334667000005, -30.950118656439994, -100.98388058535905, -143.3997996169949, -90.646700311953, -48.105291364609016, -17.228364766699997, -21.32836212759999, -30.289648708799998, -148.63970852148995, -51.24129761642318, -26.05897355699999, -31.6486944049, -10.988801214, -16.760452399499997, -50.11034437260002, -52.97714184622729, -18.633698309699998, -84.79772590647002, -80.852543131841], "mean_logprob": [-0.9813869709125, -0.33928116537686, -0.7099695201018519, -0.3604424668015441, -0.23936575479726666, -0.4943041794590909, -0.21264705975283668, -0.6755603153639773, -0.6385706247909091, -0.6115080510707317, -0.45086906156127, -0.6312235360675675, -1.0071467133551724, -0.34730951733963, -0.46690829778285714, -0.37365890145160496, -0.435001522733913, -0.9887498671106173, -0.9035483830166666, -0.6332489500093024, -0.45186275021621625, -0.41798208151875, -0.5082294554714286, -0.6424285510970589, -0.5009942954319319, -0.45935057403782764, -0.6684923488666666, -0.5995764322358974, -0.6971741989077612, -0.2728600587065741, -0.6071930175526316, -0.7197702013125581, -0.33661293528453, -0.47799933205665, -0.30215566770651, -0.16035097121536332, -0.4785656879638889, -0.6093817750742857, -0.7044104350883721, -0.49546569507163335, -0.17080432538807733, -0.8985852950689656, -0.6086287385557693, -1.5698287448571429, -0.47887006855714287, -0.167034481242, -0.17659047282075765, -0.5323913802771428, -0.5266939497296274, -0.2695084771061367]}
{"prompt": "'''\nYou are given an array a consisting of n positive integers. You have to choose a positive integer d and paint all elements into two colors. All elements which are divisible by d will be painted red, and all other elements will be painted blue.\n\nThe coloring is called beautiful if there are no pairs of adjacent elements with the same color in the array. Your task is to find any value of d which yields a beautiful coloring, or report that it is impossible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of elements of the array.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{18}).\n\nOutput\n\nFor each testcase print a single integer. If there is no such value of d that yields a beautiful coloring, print 0. Otherwise, print any suitable value of d (1 \u2264 d \u2264 10^{18}).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''3\n3\n1 2 3\n3\n10 20 30\n4\n8 2 9 8''') == '1\\n2\\n1', 'wrong answer'", "solution('''\n2\n5\n2 3 4 5 6\n5\n6 5 4 3 2\n''') == '''\n6\n0\n'''", "solution('''\n3\n3\n1 2 3\n3\n2 3 5\n3\n1 2 4\n''') == '''\n0\n3\n0\n'''", "solution(\"1\\n3\\n3 2 1\") == \"1\"\nassert solution(\"1\\n3\\n3 1 2\") == \"0\"\nassert solution(\"1\\n3\\n1 2 3\") == \"1\"\nassert solution(\"1\\n4\\n4 1 2 2\") == \"1\"\nassert solution(\"1\\n4\\n4 1 3 2\") == \"0\"\nassert solution(\"1\\n4\\n4 2 1 2\") == \"0\"\nassert solution(\"1\\n4\\n4 2 2 1\") == \"2\"\nassert solution(\"1\\n4\\n4 3 1 2\") == \"0\"\nassert solution(\"1\\n4\\n4 3 2 1\") == \"0\"\nassert solution(\"1\\n4\\n4 1 1 1\") == \"1\"\nassert solution(\"1\\n4\\n4 2 2 2\") == \"2\"\nassert solution(\"1\\n4\\n4 3 3 3\") == \"3\"\nassert solution(\"1\\n5\\n5 4 3 2 1\") == \"1\"\nassert solution(\"1\\n5\\n5 4 2 3 1\") == \"0\"\nassert solution(\"1\\n5\\n5 2 4 3 1\") == \"0\"\nassert solution(\"1\\n5\\n5 2 3 4 1\") ==", "(solution('''\n2\n2\n1 2\n2\n2 2\n''')) == '''\n0\n1\n'''", "solution('''\n2\n6\n1 2 3 4 5 6\n5\n1 2 3 4 5\n''') == '''\n1\n0\n'''", "solution(open(\"test.txt\", \"r\").read()) == open(\"answer.txt\", \"r\").read()", "solution('''3\n3\n3 6 9\n3\n2 6 9\n2\n2 2\n''') == '''0\n2\n2\n'''", "solution('''\n1\n4\n1 2 3 4\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3\n3 6 9\n3\n2 3 5\n''') == '''\n2\n0\n'''", "solution(\"\"\"\n3\n3\n1 2 3\n3\n1 1 1\n3\n5 7 9\n\"\"\") == \"\"\"\n1\n0\n0\n\"\"\"", "solution('''\n2\n5\n2 3 4 5 6\n5\n5 5 5 5 5\n''') == '0'\nassert solution('''\n2\n5\n2 3 4 5 6\n5\n5 6 7 8 9\n''') == '5'\nassert solution('''\n2\n6\n1 4 9 6 12 45\n5\n2 3 4 5 6\n''') == '1'\nassert solution('''\n2\n6\n1 4 9 6 12 45\n5\n5 5 5 5 5\n''') == '0'\nassert solution('''\n2\n6\n4 4 4 4 4 4\n5\n5 5 5 5 5\n''') == '4'\nassert solution('''\n2\n6\n4 4 4 4 4 4\n5\n5 6 7 8 9\n''') == '4'\nassert solution('''\n2\n4\n3 3 6 6\n5\n5 5 5 5 5\n''') == '0'\nassert solution('''\n2\n4\n3 3 6 6\n5\n5 6 7 8 9\n''') == '3'\nassert solution('''\n2\n4\n6 6 6 6\n5\n5 5 5 5 5\n''') == '0'\nassert solution('''\n2\n4\n6 6 6 6\n5\n5 6 7 8", "solution(r'''\n2\n6\n2 3 4 5 6 7\n5\n1 2 4 5 8\n''') == r'''\n6\n0\n'''\n\n# ===== PLEASE DON'T CHANGE ANYTHING BELOW THIS LINE =====\ndef parse_stdin(stdin: str) -> List[List[int]]:\n    total_testcases = int(stdin.splitlines()[0])\n    testcases = []\n    for line in stdin.splitlines()[1:]:\n        if line.strip() == '':\n            continue\n        numbers = [int(s) for s in line.split()]\n        testcases.append(numbers)\n    assert len(testcases) == total_testcases\n    return testcases\n\nif __name__ == '__main__':\n    stdin = ''\n    for line in sys.stdin:\n        stdin += line\n    testcases = parse_stdin(stdin)\n    for testcase in testcases:\n        print(solution(testcase))", "solution(sample_input) == sample_output\n\n\ndef run_solution():\n    print(solution(sys.stdin.read()))\n\n\nif __name__ == \"__main__\":\n    run_solution()", "solution(\"\"\"\n2\n5\n1 2 3 4 5\n2\n2 3\n\"\"\") == \"\"\"\n1\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3\n1 2 3\n3\n1 2 4\n3\n1 3 5\n\"\"\") == \"\"\"\n2\n2\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3\n1 2 4\n3\n1 2 5\n3\n1 3 5\n\"\"\") == \"\"\"\n2\n1\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n7\n1 2 3 4 5 6 7\n5\n1 2 3 4 5\n5\n1 2 3 4 6\n5\n1 2 3 5 6\n5\n1 2 4 5 6\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n6\n1 2 3 4 5 6\n6\n1 2 3 4 5 6\n6\n1 2 3 4 5 7\n6\n1 2 3 4 6 7\n6\n1 2 3 5 6 7\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n7\n1 2 3 4 5 6 7\n7\n", "solution(\"\") == \"\", \"empty\"\nassert solution(\"\") == \"\", \"one\"\nassert solution(\"\") == \"\", \"two\"\nassert solution(\"\") == \"\", \"three\"\nassert solution(\"\") == \"\", \"four\"\nassert solution(\"\") == \"\", \"five\"\nassert solution(\"\") == \"\", \"six\"\nassert solution(\"\") == \"\", \"seven\"\nassert solution(\"\") == \"\", \"eight\"\nassert solution(\"\") == \"\", \"nine\"\nassert solution(\"\") == \"\", \"ten\"\nassert solution(\"\") == \"\", \"eleven\"\nassert solution(\"\") == \"\", \"twelve\"\nassert solution(\"\") == \"\", \"thirteen\"\nassert solution(\"\") == \"\", \"fourteen\"\nassert solution(\"\") == \"\", \"fifteen\"\nassert solution(\"\") == \"\", \"sixteen\"\nassert solution(\"\") == \"\", \"seventeen\"\nassert solution(\"\") == \"\", \"eighteen\"\nassert solution(\"\") == \"\", \"nineteen\"\nassert solution(\"\") == \"\", \"twenty\"\nassert solution(\"\") == \"\", \"twenty one\"\nassert solution(\"\") == \"\", \"twenty two\"\nassert solution(\"\") == \"\", \"twenty three\"\nassert solution(\"\") == \"\", \"twenty four\"\nassert solution(\"\") == \"\",", "solution(example_input) == example_output", "solution('''\n4\n4\n4 2 6 1\n4\n5 2 8 10\n4\n4 5 8 10\n5\n1 1 1 1 1\n''') == '''\n0\n5\n1\n2\n'''", "solution(\"\"\"1\n3\n1 2 3\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"3\n3\n1 2 3\n3\n2 3 4\n3\n6 7 8\n\"\"\") == \"\"\"0\n1\n0\n\"\"\"", "solution('''\n2\n3\n3 6 9\n3\n3 4 6\n''') == '''\n3\n0\n'''", "solution(example_input) == example_output\n# assert solution(empty_input) == empty_output\n# assert solution(wrong_input) == wrong_output\n\n# get input from stdin\nstdin = ''\n\n# print the solution\nprint(solution(stdin))", "solution('''\n2\n3\n1 2 3\n3\n1 2 4\n''') == '''\n1\n0\n'''", "solution('''\n5\n5\n5 1 2 5 7\n3\n3 3 3\n3\n1 2 3\n3\n1 1 1\n3\n1 2 3\n''') == '''\n1\n0\n1\n0\n0\n'''", "solution(stdin=\"1\\n4\\n1 2 3 4\") == \"2\"\nassert solution(stdin=\"1\\n6\\n5 5 1 4 3 4\") == \"2\"\nassert solution(stdin=\"1\\n3\\n5 5 5\") == \"0\"\nassert solution(stdin=\"1\\n2\\n5 5\") == \"0\"\nassert solution(stdin=\"1\\n4\\n5 1 1 5\") == \"1\"\nassert solution(stdin=\"1\\n6\\n5 1 1 5 1 5\") == \"1\"\nassert solution(stdin=\"1\\n6\\n8 8 8 8 8 8\") == \"1\"\nassert solution(stdin=\"1\\n6\\n3 6 9 9 9 6\") == \"3\"\nassert solution(stdin=\"1\\n6\\n9 1 1 9 1 9\") == \"1\"\nassert solution(stdin=\"1\\n6\\n5 5 5 5 5 5\") == \"0\"\nassert solution(stdin=\"1\\n6\\n2 3 5 6 4 1\") == \"6\"\nassert solution(stdin=\"1\\n6\\n2 5 8 2 6 8\") == \"2\"\nassert solution(stdin=\"1\\n6\\n1 5 6 2 3 7\") == \"6\"\n", "solution('''\n3\n3\n1 2 3\n3\n3 2 3\n3\n3 2 3\n''') == '''\n1\n2\n0\n'''", "solution(examples) == answers", "solution('''\n3\n5\n2 3 3 2 3\n5\n5 1 6 2 4\n5\n1 2 3 4 5\n''') == '''\n0\n5\n0\n'''", "solution('''\n3\n3\n3 9 7\n3\n3 9 10\n3\n3 3 3\n''') == '''\n0\n9\n1\n'''", "solution(get_input()) == get_correct_output()\n \n# run the solution on the input file\nsolution(get_input())", "solution('''\n2\n4\n1 2 3 4\n4\n1 2 2 1\n''') == '''\n3\n0\n'''", "solution(stdin) == stdout\n\n# -- IO part --\n\n# set the name of the folder which contains the test data\nSAMPLE_DATA_FOLDER = \"./sample_tests\"\n\n# set the input and output files\ninput_file = \"%s/input.txt\" % SAMPLE_DATA_FOLDER\noutput_file = \"%s/output.txt\" % SAMPLE_DATA_FOLDER\n\n# read the input and output\nstdin = read_input(input_file)\nstdout = read_output(output_file)\n\n# print the results\nprint(\"Stdin: %s\" % stdin)\nprint(\"Expected output: %s\" % stdout)\nprint(\"Output: %s\" % solution(stdin))", "solution('''\n5\n5\n1 2 3 4 5\n5\n10 20 30 40 50\n5\n11 12 13 14 15\n1\n1\n10\n1234 815 233 18 666\n''') == '''\n0\n1\n0\n1\n1\n'''", "solution(sample_input) == sample_output\n\n# print the solution with starting time\nstime = time.time()\nprint(solution(util.read_input_tests(test_folder, input_file)))\nprint('{:<30} {:<5.5}'.format('\\ntime taken:', time.time() - stime))", "solution(example_input) == example_output\n\nassert solution('''\n5\n5\n2 3 3 3 3\n4\n1 2 3 4\n4\n1 1 2 2\n3\n1 2 3\n3\n1 2 4\n''') == '''\n0\n1\n0\n1\n1\n'''\n\n# submit the solution\nsolution_submission(solution, example_input, example_output)", "solution(input_sample) == output_sample\n\n# check the correctness of solution\nassert solution(input_1) == output_1\n\n# check the correctness of solution\nassert solution(input_2) == output_2\n\n# check the correctness of solution\nassert solution(input_3) == output_3\n\n# check the correctness of solution\nassert solution(input_4) == output_4\n\n# check the correctness of solution\nassert solution(input_5) == output_5\n\n# check the correctness of solution\nassert solution(input_6) == output_6\n\n# check the correctness of solution\nassert solution(input_7) == output_7\n\n# check the correctness of solution\nassert solution(input_8) == output_8\n\n# check the correctness of solution\nassert solution(input_9) == output_9\n\n# check the correctness of solution\nassert solution(input_10) == output_10\n\n# check the correctness of solution\nassert solution(input_11) == output_11\n\n# check the correctness of solution\nassert solution(input_12) == output_12\n\n# check the correctness of solution\nassert solution(input_13) == output_13\n\n# check the correctness of solution\nassert solution(input_14) == output_14\n\n# check the correctness of solution\nassert", "solution(\"3\\n3\\n1 2 3\\n3\\n1 2 4\\n3\\n2 3 3\") == \"2\\n3\\n0\", \"sample case\"\n\n# read the input from stdin\nlines = [line.strip() for line in sys.stdin]\n# parse the input for generating the expected output\nlines = [line.split(\"\\n\") for line in lines]\nlines = list(zip(*lines))\nlines = [solution(stdin) for stdin in lines]\n# print the output\nfor line in lines:\n    print(line)", "solution('''\n2\n3\n2 3 2\n3\n3 4 3\n''') == '''\n2\n0\n'''", "solution(\"0\") == \"0\", \"sample1\"\nassert solution(\"1\") == \"0\", \"sample2\"\nassert solution(\"1 1\") == \"0\", \"sample3\"\nassert solution(\"2 1 2\") == \"0\", \"sample4\"\nassert solution(\"2 2 2\") == \"2\", \"sample5\"\nassert solution(\"2 2 3\") == \"2\", \"sample6\"\nassert solution(\"2 2 4\") == \"2\", \"sample7\"\nassert solution(\"2 2 5\") == \"0\", \"sample8\"\nassert solution(\"2 3 3\") == \"3\", \"sample9\"\nassert solution(\"2 3 4\") == \"3\", \"sample10\"\nassert solution(\"2 3 5\") == \"3\", \"sample11\"\nassert solution(\"2 3 6\") == \"3\", \"sample12\"\nassert solution(\"2 3 7\") == \"0\", \"sample13\"\nassert solution(\"2 6 6\") == \"6\", \"sample14\"\nassert solution(\"2 7 7\") == \"7\", \"sample15\"\nassert solution(\"2 9 11\") == \"3\", \"sample16\"\nassert solution(\"2 9 12\") == \"3\", \"sample17\"\nassert solution(\"2 9 13\") == \"3\", \"sample18\"\nassert solution(\"2 9 14\") == \"3\", \"sample19\"\nassert solution", "solution(\nr'''3\n3\n1 2 3\n3\n2 3 4\n2\n2 2\n''') == r'''2\n0\n0\n'''", "solution('''\n2\n3\n2 3 6\n3\n3 5 6\n''') == '''\n3\n0\n'''", "solution('''\n2\n5\n1 2 3 4 5\n6\n2 4 6 8 10 12\n''') == '''\n1\n2\n'''", "solution(\"\"\"\n2\n5\n2 8 3 12 8\n5\n2 2 3 12 8\n\"\"\") == \"\"\"\n2\n0\n\"\"\"", "solution(\"\"\"\n4\n4\n1 2 3 4\n4\n1 2 4 8\n4\n1 2 6 9\n4\n3 4 5 6\n\"\"\") == \"\"\"\n0\n2\n3\n0\n\"\"\"", "solution(r'''\n2\n3\n3 1 2\n3\n1 2 3\n''') == r'''\n3\n0\n'''\n\nassert solution(r'''\n1\n5\n6 8 10 1 15\n''') == r'''\n5\n'''\n\nassert solution(r'''\n1\n5\n1 3 6 1 3\n''') == r'''\n1\n'''\n\n# stress testing\nfrom random import randint, randrange\nwhile True:\n    n = randint(1, 2)\n    a = [randint(1, 2)] + [randint(2, 20) for _ in range(n)]\n    print(n)\n    print(*a)\n    ans = solution(f'{n}\\n{a}')\n    print(ans)\n    if '0' in ans:\n        break", "solution('''\n2\n2\n2 3\n2\n2 2\n''') == '''\n2\n0\n'''\n\n# import random\n# import itertools\n# import functools\n# import collections\n# import math\n# def solution(stdin):\n#     t = int(stdin.readline())\n#     for _ in range(t):\n#         n = int(stdin.readline())\n#         a = [int(x) for x in stdin.readline().split()]\n#         a = collections.Counter(a)\n#         d = 0\n#         for v in a.values():\n#             if v >= 2:\n#                 d = 1\n#                 break\n#         print(d)\n# stdin = \"\"\"\n# 2\n# 2\n# 2 3\n# 2\n# 2 2\n# \"\"\"\n# stdin = stdin.split('\\n')[1:-1]\n# solution(stdin)\n\n# import random\n# import itertools\n# import functools\n# import collections\n# import math\n# def solution(stdin):\n#     t = int(stdin.readline())\n#     for _ in range(t):\n#         n = int(stdin.readline())\n#         a = [int(", "solution('''\n2\n3\n1 2 3\n3\n1 1 2\n''') == '''\n0\n1\n'''", "solution(\"5 3 2 1 5 5 2 1 4\") == \"4\"\n\n# testcases for uploading to checkio\n# if you have a local checkio account, push testcases there\n\n# if __name__ == \"__main__\":\n#     input_1 = \"\"\n#     input_2 = \"\"\n#     print(solution(input_1))\n#     print(solution(input_2))", "solution('''\n1\n4\n1 2 3 4\n''') == '''\n1\n'''\nassert solution('''\n1\n4\n4 4 4 4\n''') == '''\n0\n'''\nassert solution('''\n1\n4\n1 1 2 2\n''') == '''\n2\n'''\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n1\n'''\nassert solution('''\n1\n6\n2 3 6 9 10 11\n''') == '''\n3\n'''\nassert solution('''\n1\n6\n4 6 8 10 12 14\n''') == '''\n2\n'''\nassert solution('''\n1\n6\n2 3 4 5 6 7\n''') == '''\n1\n'''\nassert solution('''\n1\n6\n3 7 5 8 11 17\n''') == '''\n1\n'''\nassert solution('''\n1\n6\n2 3 6 9 10 11\n''') == '''\n3\n'''\nassert solution('''\n1\n6\n2 3 6 9 10 11\n''') == '''\n3\n'''\nassert solution('''\n1\n6\n2 3 6 9 10 11\n''') == '''\n3\n'''", "solution('''\n2\n5\n1 2 3 4 5\n4\n1 2 4 8\n''') == '''\n1\n0\n'''", "solution(testcase) == sol_testcase", "solution(\"1\\n5\\n1 4 2 3 5\") == \"0\"\nassert solution(\"1\\n5\\n1 4 2 3 6\") == \"3\"\nassert solution(\"1\\n4\\n4 4 4 4\") == \"4\"\nassert solution(\"1\\n2\\n1 2\") == \"0\"\nassert solution(\"1\\n3\\n1 1 1\") == \"1\"\nassert solution(\"1\\n3\\n3 1 1\") == \"0\"\nassert solution(\"1\\n4\\n2 3 3 3\") == \"3\"\nassert solution(\"1\\n2\\n1 2\") == \"0\"\nassert solution(\"1\\n3\\n1 1 1\") == \"1\"\nassert solution(\"1\\n3\\n3 1 1\") == \"0\"\nassert solution(\"1\\n4\\n2 3 3 3\") == \"3\"\nassert solution(\"1\\n5\\n1 4 2 3 5\") == \"0\"\nassert solution(\"1\\n5\\n1 4 2 3 6\") == \"3\"\nassert solution(\"1\\n4\\n4 4 4 4\") == \"4\"\nassert solution(\"1\\n6\\n4 6 2 3 5 1\") == \"2\"\nassert solution(\"1\\n2\\n1 2\") == \"0\"\nassert"], "finish_reason": ["stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length"], "sum_logprob": [-40.61648154494, -19.1814541566, -19.710041830099996, -74.39665523966207, -18.6714851946, -14.8375867723, -15.209499616199997, -26.9791040341, -29.525877424849998, -24.9102255507, -105.19448077124999, -94.45765308833198, -24.542886245219993, -93.837344376006, -23.254881881405005, -6.853037636430001, -49.32290262600001, -30.593960110599994, -16.301234346399998, -39.69160229769001, -11.487433650400002, -41.1811100198, -155.23878056070106, -20.029869118699995, -13.970082673, -37.0060650051, -29.808805058200004, -29.936040364480007, -17.058047355800007, -112.63169029256802, -73.76554314702001, -98.22395286005002, -68.88399076945997, -22.02315237467151, -93.05039323912003, -18.2838817585, -70.73891377070984, -28.710549792699986, -18.992685816399995, -16.480831315499998, -31.669711233399997, -32.78927294184, -109.86148434692595, -91.92720412538196, -13.791783265200003, -105.47556777850997, -89.33125747304645, -15.647944999600004, -15.493998594999999, -100.11750748688391], "mean_logprob": [-0.99064589134, -0.5328181710166666, -0.4927510457525, -0.24798885079887334, -0.58348391233125, -0.4010158587108108, -0.5849807544692308, -0.7291649738945946, -0.44736177916439396, -0.6732493392081081, -0.3506482692375, -0.39688089532912607, -0.4630733253815094, -0.31279114792002, -0.07751627293801666, -0.6230034214936363, -0.930620804264151, -0.5562538201927273, -0.509413573325, -0.610640035349077, -0.358982301575, -0.7100191382724138, -0.5174626018690033, -0.5007467279675, -1.7462603341249998, -0.8044796740239131, -0.745220126455, -0.9071527383175757, -0.5017072751705882, -0.6399527857532272, -1.1525866116721875, -1.2126413933339506, -0.7101442347367011, -0.07341050791557166, -0.6841940679347058, -0.5713713049531249, -0.2357963792357, -0.7177637448175, -0.5935214317625, -0.4454278733918919, -0.9596882191939394, -0.6691688355477551, -0.5576725093752589, -0.3064240137512733, -0.4309932270375, -1.1102691345106315, -0.2977708582434883, -0.4470841428457143, -1.4085453268181818, -0.33372502495628]}
{"prompt": "'''\nYou are given an array a of n integers, and another integer k such that 2k \u2264 n.\n\nYou have to perform exactly k operations with this array. In one operation, you have to choose two elements of the array (let them be a_i and a_j; they can be equal or different, but their positions in the array must not be the same), remove them from the array, and add \u230a (a_i)/(a_j) \u230b to your score, where \u230a x/y \u230b is the maximum integer not exceeding x/y.\n\nInitially, your score is 0. After you perform exactly k operations, you add all the remaining elements of the array to the score.\n\nCalculate the minimum possible score you can get.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line contains two integers n and k (1 \u2264 n \u2264 100; 0 \u2264 k \u2264 \u230a n/2 \u230b).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5).\n\nOutput\n\nPrint one integer \u2014 the minimum possible score you can get.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n5\n5 2\n1 2 3 4 5\n5 2\n5 4 3 2 1\n10 5\n1 2 3 4 5 6 7 8 9 10\n3 0\n3 4 5\n10 0\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '''\n5\n0\n10\n9\n45\n'''", "solution('''1\n4 2\n6 4 2 6''') == '6'\nassert solution('''1\n4 1\n6 4 2 6''') == '0'\nassert solution('''1\n4 0\n6 4 2 6''') == '22'\nassert solution('''1\n4 3\n6 4 2 6''') == '6'\nassert solution('''1\n4 4\n6 4 2 6''') == '6'\nassert solution('''1\n4 5\n6 4 2 6''') == '6'\nassert solution('''1\n5 4\n3 5 4 2 1''') == '2'\nassert solution('''1\n10 8\n1 2 3 4 5 6 7 8 9 10''') == '0'\nassert solution('''1\n10 9\n1 2 3 4 5 6 7 8 9 10''') == '0'\nassert solution('''1\n10 10\n1 2 3 4 5 6 7 8 9 10''') == '0'\nassert solution('''1\n10 11\n1 2 3 4 5 6 7 8 9 10''') == '0'\nassert solution('''1\n7 4\n2 3 4 4 3 2 3''') == '0'\nassert solution('''1\n7 1\n2 3 4 4 3 2 3''') == '", "solution('''\n4\n4 2\n5 8 2 8\n4 2\n5 5 2 5\n3 2\n3 3 3\n2 1\n1 1\n''') == '''\n6\n8\n6\n2\n'''", "solution('''\n2\n4 2\n2 3 2 1\n4 2\n1 2 1 1\n''') == '''\n2\n0\n'''", "solution('''\n3\n5 2\n3 1 5 2 2\n3 0\n1000000000 1000000000 1000000000\n5 3\n100 200 300 400 500\n''') == '''\n7\n3000000000\n160\n'''", "solution(\"\"\"5\n5 2\n7 7 7 4 5\n4 2\n6 4 5 5\n10 2\n6 9 5 5 4 5 4 4 7 9\n2 1\n1 1\n2 1\n2 3\"\"\") == \"\"\"10\n6\n17\n0\n0\"\"\", \"Example #1\"\n\nassert solution(\"\"\"4\n2 1\n1 2\n3 1\n3 3 3\n3 1\n4 4 4\n4 2\n4 4 4 4\"\"\") == \"\"\"0\n1\n1\n0\"\"\", \"Example #2\"\n\nassert solution(\"\"\"8\n5 3\n2 2 3 3 3\n6 3\n5 5 4 4 4 4\n2 1\n2 2\n2 1\n1 1\n7 2\n5 4 2 5 5 5 2\n5 2\n5 5 5 5 5\n3 2\n5 5 5\"\"\") == \"\"\"3\n3\n3\n0\n3\n3\n0\n3\"\"\", \"Example #3\"\n\n# Test for dynamic test data\nfrom random import randint\nfrom string import ascii_lowercase\ndef gen_test_data(max_len: int = 10**5, max_str_len: int = 20) -> tuple:\n    \"Generate test data of single line with string and integer\"\n    n = randint(1, max_len)\n    s = ''.", "solution('''2\n6 3\n1 2 3 4 5 6\n5 3\n1 2 3 4 5''') == '''0\n0'''\n\n# check the correctness of solution\nassert solution('''3\n5 3\n8 8 8 8 8\n4 2\n5 3 2 1\n4 2\n5 3 4 1''') == '''1\n0\n0'''\n\n# get input data from console\nt = int(input())\nstdin = ''\nfor i in range(t):\n    stdin += input() + '\\n'\n\n# print solution to console\nprint(solution(stdin))", "solution('''\n5\n5 0\n1 1 1 1 1\n5 1\n1 1 1 1 1\n5 2\n1 1 1 1 1\n5 3\n1 1 1 1 1\n5 4\n1 1 1 1 1\n''') == '''\n15\n2\n0\n1\n1\n'''", "solution(\"\"\"\n3\n5 2\n1 4 3 2 1\n3 1\n5 2 4\n5 2\n1 1 1 1 1\n\"\"\") == \"\"\"\n2\n2\n0\n\"\"\"", "solution(r'''\n1\n6 2\n1 2 3 4 5 6\n''') == r'''\n2\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4 1\n4 4 4 4\n''') == r'''\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n6 4\n1 2 3 4 5 6\n''') == r'''\n6\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n3 1\n1 2 3\n''') == r'''\n2\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4 2\n5 4 3 2\n''') == r'''\n5\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n5 3\n3 5 5 3 2\n''') == r'''\n5\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4 2\n4 4 4 4\n''') == r'''\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n3 1\n3 2 1\n''') == r'''\n1\n'''\n\n# check the correctness of solution\nassert solution", "solution('''\n1\n3 2\n1 2 3\n''') == '3'\nassert solution('''\n1\n4 2\n1 1 1 1\n''') == '1'\nassert solution('''\n1\n10 3\n2 3 5 7 11 13 17 19 23 29\n''') == '2'\nassert solution('''\n1\n5 0\n1 2 3 4 5\n''') == '15'\nassert solution('''\n1\n5 5\n1 2 3 4 5\n''') == '1'\nassert solution('''\n1\n3 3\n1 1 1\n''') == '1'\nassert solution('''\n1\n3 2\n1 1 1\n''') == '1'\nassert solution('''\n1\n10 0\n1 1 1 1 1 1 1 1 1 1\n''') == '10'\nassert solution('''\n1\n10 1\n1 1 1 1 1 1 1 1 1 1\n''') == '1'\nassert solution('''\n1\n5 2\n1 2 1 2 1\n''') == '1'\nassert solution('''\n1\n3 2\n2 3 2\n''') == '2'\nassert solution('''\n1\n3 3\n2 3 2\n''') == '2'\nassert solution('''\n1\n10", "solution(example_input) == example_output\n\n# get input\nn_lines = int(input())\nlines = []\nfor i in range(n_lines):\n    lines.append(input())\n\n# process input\nlines = '\\n'.join(lines)\n\n# get output\nout = solution(lines)\n\n# output result\nprint(out)", "solution(get_file_contents('test_cases/test_case_1.txt')) == get_file_contents('test_cases/test_case_1_result.txt')\nassert solution(get_file_contents('test_cases/test_case_2.txt')) == get_file_contents('test_cases/test_case_2_result.txt')\nassert solution(get_file_contents('test_cases/test_case_3.txt')) == get_file_contents('test_cases/test_case_3_result.txt')\nassert solution(get_file_contents('test_cases/test_case_4.txt')) == get_file_contents('test_cases/test_case_4_result.txt')\nassert solution(get_file_contents('test_cases/test_case_5.txt')) == get_file_contents('test_cases/test_case_5_result.txt')\nassert solution(get_file_contents('test_cases/test_case_6.txt')) == get_file_contents('test_cases/test_case_6_result.txt')\nassert solution(get_file_contents('test_cases/test_case_7.txt')) == get", "solution(str(tuple(map(int, input().split())) + tuple(map(int, input().split())))) == str(answer)", "solution('''\n1\n6 2\n1 2 3 4 5 6\n''') == '0'\n\nassert solution('''\n1\n3 2\n1 2 3\n''') == '2'\n\nassert solution('''\n1\n3 1\n5 4 1\n''') == '5'\n\nassert solution('''\n2\n5 3\n2 3 3 1 2\n6 3\n1 2 3 4 5 6\n''') == '4\\n0'\n\nassert solution('''\n1\n4 2\n1 1 1 1\n''') == '4'\n\nassert solution('''\n1\n1 0\n1\n''') == '1'\n\nassert solution('''\n1\n8 4\n10 10 10 10 10 10 10 10\n''') == '8'\n\nassert solution('''\n1\n8 6\n5 5 5 5 5 5 5 5\n''') == '8'\n\nassert solution('''\n2\n2 1\n10 2\n1 1\n1\n''') == '11\\n1'\n\nassert solution('''\n1\n6 4\n4 4 4 1 1 1\n''') == '4'\n\nassert solution('''\n1\n9 7\n1 1 1 1 1 1 1 1 1\n''') == '9'\n\nassert solution('''", "solution('''\n3\n4 2\n1 2 4 5\n4 2\n1 1 1 1\n4 2\n5 4 3 2\n''') == '''\n2\n2\n1\n'''", "solution('''\n3\n3 1\n3 4 5\n3 1\n3 1 5\n3 2\n1 1 3\n''') == '''\n11\n9\n0\n'''", "solution('''\n1\n4 1\n1 3 3 3\n''') == '4'\n\nif __name__ == '__main__':\n    t = int(input())\n    for i in range(t):\n        n, k = [int(x) for x in input().split()]\n        a = [int(x) for x in input().split()]\n        ans = 0\n        while k:\n            i = a.index(max(a))\n            j = a.index(min(a))\n            if i == j:\n                a.pop(i)\n                continue\n            tmp = min(a[i], a[j])\n            ans += tmp\n            a[i] -= tmp\n            a[j] -= tmp\n            k -= 1\n        ans += sum(a)\n        print(ans)", "solution(example_1) == \"21\", \"Example 1\"\nassert solution(example_2) == \"77\", \"Example 2\"\nassert solution(example_3) == \"12\", \"Example 3\"\nassert solution(example_4) == \"3\", \"Example 4\"\nassert solution(example_5) == \"6\", \"Example 5\"\n\n# for large inputs\n# redirection of stdin to text file that contains correct input\n# python main.py < large_input.txt\n# you can replace the example with your own input\nif __name__ == \"__main__\":\n    from sys import stdin\n    print(solution(stdin.read()))", "solution(\"\"\"\n1\n3 1\n1 2 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1\n3 1\n1 2 1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1\n3 2\n1 2 3\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n1\n3 2\n1 2 1\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n1\n3 3\n1 2 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1\n3 3\n1 2 1\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n1\n4 1\n1 2 3 4\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1\n4 1\n1 2 1 4\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n1\n4 2\n1 2 3 4\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n1\n4 2\n1 2 1 4\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n1\n4 3\n1 2 3 4\n\"\"\") == \"9\"\n\nassert solution(\"\"\"\n1\n4 3\n1 2 1 4\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n1\n4 4\n1 2 3 4\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n1\n4", "solution(\"\"\"\n1\n7 1\n1 2 3 4 5 6 7\n\"\"\") == '17'\n\nassert solution(\"\"\"\n2\n7 1\n1 2 3 4 5 6 7\n4 3\n1 1 1 1\n\"\"\") == '17'\n\nassert solution(\"\"\"\n3\n7 1\n1 2 3 4 5 6 7\n4 3\n1 1 1 1\n4 2\n1 2 3 4\n\"\"\") == '17'\n\nassert solution(\"\"\"\n4\n7 1\n1 2 3 4 5 6 7\n4 3\n1 1 1 1\n4 2\n1 2 3 4\n5 2\n7 7 7 7 7\n\"\"\") == '17'\n\nassert solution(\"\"\"\n5\n7 1\n1 2 3 4 5 6 7\n4 3\n1 1 1 1\n4 2\n1 2 3 4\n5 2\n7 7 7 7 7\n2 1\n1 1\n\"\"\") == '17'\n\nassert solution(\"\"\"\n6\n7 1\n1 2 3 4 5 6 7\n4 3\n1 1 1 1\n4 2\n1 2 3 4\n5 2\n7 7 7 7 7\n2 1\n1 1\n4 4\n4 4 4 4\n\"\"\") == '17'\n\nassert solution(\"\"\"\n7\n7 1\n1 2 3 4 5 6 7\n4 3\n1 1 1 1\n", "solution('''\n1\n3 2\n3 6 7\n''') == '8'\nassert solution('''\n1\n10 5\n1 2 3 4 5 6 7 8 9 10\n''') == '39'\nassert solution('''\n1\n6 0\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'\nassert solution('''\n1\n3 1\n4 2 1\n''') == '4'\nassert solution('''\n1\n8 3\n1 1 1 1 1 1 1 1\n''') == '7'\nassert solution('''\n1\n4 1\n1 2 3 4\n''') == '10'\nassert solution('''\n1\n5 2\n2 3 3 4 5\n''') == '18'\nassert solution('''\n1\n10 2\n1 2 2 3 3 3 4 4 4 5\n''') == '30'\nassert solution('''\n1\n3 1\n1 2 3\n''') == '6'\nassert solution('''\n1\n10 5\n1 2 3 4 5 6 7 8 9 10\n''') == '39'\nassert solution('''\n1\n6 0\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'\nassert solution('''\n", "solution('''\n1\n4 2\n4 2 5 1\n''') == '1'\nassert solution('''\n2\n5 2\n2 3 2 3 3\n3 3\n1 2 3\n''') == '0\\n0'\n\n# get input and run the solution\nn = int(input())\ninputs = []\nfor i in range(n):\n    inputs.append(input())\n\nresults = []\nfor i in inputs:\n    results.append(solution(i))\n\n# print the results\nfor i in results:\n    print(i)", "solution('''\n1\n6 2\n1 2 3 4 5 6\n''') == '8'\n\nassert solution('''\n1\n5 0\n5 1 1 1 1\n''') == '5'\n\nassert solution('''\n1\n5 1\n5 1 1 1 1\n''') == '5'\n\nassert solution('''\n1\n10 2\n1 1 1 1 1 1 1 1 1 1\n''') == '5'\n\nassert solution('''\n1\n10 4\n1 1 1 1 1 1 1 1 1 1\n''') == '1'\n\nassert solution('''\n1\n7 1\n1 100 1 1 1 1\n''') == '100'\n\nassert solution('''\n1\n7 1\n1 100 100 1 1 1\n''') == '200'\n\nassert solution('''\n1\n8 1\n1 100 100 1 1 1 1\n''') == '100'\n\nassert solution('''\n1\n9 1\n1 100 100 1 1 1 1 1\n''') == '100'\n\nassert solution('''\n1\n9 1\n1 100 100 1 1 1 1 1\n''') == '100'\n\nassert solution('''\n1\n12 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '24'", "solution('''1\n7 2\n1 5 7 9 1 4 2''') == '8'\nassert solution('''1\n7 3\n1 5 7 9 1 4 2''') == '4'\nassert solution('''1\n7 4\n1 5 7 9 1 4 2''') == '3'\nassert solution('''1\n7 5\n1 5 7 9 1 4 2''') == '3'\nassert solution('''1\n7 6\n1 5 7 9 1 4 2''') == '3'\nassert solution('''1\n1 0\n2''') == '2'\nassert solution('''1\n2 1\n2 2''') == '2'\nassert solution('''1\n10 7\n1 2 1 2 1 2 1 2 1 2''') == '3'\nassert solution('''1\n10 6\n1 2 1 2 1 2 1 2 1 2''') == '3'\nassert solution('''1\n10 5\n1 2 1 2 1 2 1 2 1 2''') == '3'\nassert solution('''1\n10 4\n1 2 1 2 1 2 1 2 1 2''') == '3'\nassert solution('''1\n10 3\n1 2 1 2 1 2 1 2 1 2''') == '2'\nassert solution('''1\n10 2", "solution('''\n3\n3 1\n1 2 3\n3 2\n1 2 3\n4 2\n1 2 3 4\n''') == '''\n4\n4\n4\n'''", "solution(\"\"\"\n\n\"\"\") == \"\"\n\n# test the speed of solution\nfrom utils import benchmark\nprint(benchmark(solution, stdin=\"\"\"\n\"\"\", repeat=3))", "solution('''\n1\n7 2\n1 2 3 4 5 6 7\n''') == '18'\nassert solution('''\n1\n6 2\n1 4 8 6 2 8\n''') == '20'\nassert solution('''\n1\n2 1\n2 2\n''') == '0'\nassert solution('''\n1\n3 1\n3 2 1\n''') == '3'\nassert solution('''\n1\n3 1\n1 2 3\n''') == '2'\nassert solution('''\n1\n3 2\n1 2 3\n''') == '3'\nassert solution('''\n1\n5 1\n1 2 4 8 16\n''') == '29'\nassert solution('''\n1\n5 3\n1 2 4 8 16\n''') == '16'\nassert solution('''\n1\n5 5\n1 2 4 8 16\n''') == '11'\nassert solution('''\n1\n5 4\n1 2 4 8 16\n''') == '12'\nassert solution('''\n1\n5 2\n1 2 4 8 16\n''') == '22'\nassert solution('''\n1\n5 1\n1 2 4 8 16\n''') == '29'\nassert solution('''\n1\n2 1\n2 1\n''') == '1", "solution(stdin='''2\n5 3\n1 1 1 1 1\n6 4\n1 1 1 2 1 1''') == '''1\n2'''", "solution('''\n1\n5 1\n5 4 3 2 1\n''') == '6'\nassert solution('''\n1\n5 2\n5 4 3 2 1\n''') == '6'\nassert solution('''\n1\n5 3\n5 4 3 2 1\n''') == '6'\nassert solution('''\n1\n5 4\n5 4 3 2 1\n''') == '6'\nassert solution('''\n1\n5 5\n5 4 3 2 1\n''') == '6'\nassert solution('''\n1\n5 0\n5 4 3 2 1\n''') == '15'\nassert solution('''\n1\n5 1\n1 2 3 4 5\n''') == '4'\nassert solution('''\n1\n5 2\n1 2 3 4 5\n''') == '4'\nassert solution('''\n1\n5 3\n1 2 3 4 5\n''') == '4'\nassert solution('''\n1\n5 4\n1 2 3 4 5\n''') == '4'\nassert solution('''\n1\n5 5\n1 2 3 4 5\n''') == '4'\nassert solution('''\n1\n5 0\n1 2 3 4 5\n''') == '15'\nassert solution('''\n1\n5 1\n1 1", "solution(\"\"\"1\n5 2\n1 2 3 4 5\n\"\"\") == \"\"\"15\"\"\"\n\nassert solution(\"\"\"1\n5 3\n1 2 3 4 5\n\"\"\") == \"\"\"15\"\"\"\n\nassert solution(\"\"\"1\n5 4\n1 2 3 4 5\n\"\"\") == \"\"\"15\"\"\"\n\nassert solution(\"\"\"1\n5 5\n1 2 3 4 5\n\"\"\") == \"\"\"15\"\"\"\n\nassert solution(\"\"\"1\n5 1\n1 2 3 4 5\n\"\"\") == \"\"\"6\"\"\"\n\nassert solution(\"\"\"1\n5 0\n1 2 3 4 5\n\"\"\") == \"\"\"1\"\"\"\n\nassert solution(\"\"\"1\n1 0\n1\n\"\"\") == \"\"\"1\"\"\"\n\nassert solution(\"\"\"1\n2 0\n1 2\n\"\"\") == \"\"\"1\"\"\"\n\nassert solution(\"\"\"1\n2 1\n1 2\n\"\"\") == \"\"\"2\"\"\"\n\nassert solution(\"\"\"1\n2 2\n1 2\n\"\"\") == \"\"\"2\"\"\"\n\nassert solution(\"\"\"1\n3 1\n1 2 3\n\"\"\") == \"\"\"2\"\"\"\n\nassert solution(\"\"\"1\n3 2\n1 2 3\n\"\"\") == \"\"\"3\"\"\"\n\nassert solution(\"\"\"1\n3 3\n1 2 3\n\"\"\") == \"\"\"3\"\"\"\n\nassert solution(\"\"\"1\n4 1\n1 2 3 4\n\"\"\") == \"\"\"3\"\"\"\n", "solution(correct_answer) == correct_answer", "solution(\"\"\"\n2\n5 2\n1 2 3 4 5\n2 1\n10 10\n\"\"\") == \"\"\"\n5\n0\n\"\"\"", "(solution('''\\\n2\n5 3\n1 2 3 4 5\n5 3\n1 1 1 1 1\n''') == '''\\\n6\n2\n''')", "solution('''\n1\n5 1\n1 2 3 4 5\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5 1\n2 2 2 2 2\n5 2\n1 2 3 4 5\n''') == '''\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6 3\n1 1 1 1 1 1\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 8\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n9 5\n-1 0 1 2 3 4 5 6 7\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 2\n1 2 3 4 5 6 7 8 9 10\n''') == '''\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 5\n2 2 3 3 4 4 5 5 6 6\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 5\n-1 -2 -3", "solution(\n    '''3\n    5 2\n    1 2 3 4 5\n    4 1\n    1 1 2 3\n    2 1\n    1 1''') == '''2\n2\n0'''\n\n# input()\nsolution(input())", "solution('''\n1\n3 2\n1 1 1\n''') == '2'\nassert solution('''\n1\n2 0\n2 2\n''') == '4'\nassert solution('''\n1\n3 1\n1 1 1\n''') == '1'\nassert solution('''\n1\n5 2\n2 2 2 2 2\n''') == '4'\nassert solution('''\n1\n4 2\n1 2 2 1\n''') == '2'\nassert solution('''\n1\n5 3\n1 1 1 1 1\n''') == '0'\nassert solution('''\n1\n3 1\n1 2 3\n''') == '0'\nassert solution('''\n1\n3 1\n1 3 1\n''') == '1'\nassert solution('''\n1\n6 3\n1 1 1 1 1 1\n''') == '1'\nassert solution('''\n1\n6 3\n1 1 1 1 1 1\n''') == '1'\nassert solution('''\n1\n6 3\n1 1 1 1 1 1\n''') == '1'\nassert solution('''\n1\n6 3\n1 1 1 1 1 1\n''') == '1'\nassert solution('''\n1\n6 3\n1 1 1 1 1 1\n''') ==", "solution(r'''\n1\n5 2\n1 5 1 5 1\n''') == r'''\n4\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n5 1\n1 1 1 1 1\n''') == r'''\n5\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n2 1\n2 2\n''') == r'''\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4 2\n4 1 2 3\n''') == r'''\n6\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n8 6\n1 2 4 8 16 32 64 128\n''') == r'''\n32\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n5 1\n1 1 1 1 1\n2 1\n2 2\n''') == r'''\n5\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n5\n5 2\n1 5 1 5 1\n5 1\n1 1 1 1 1\n2 1\n2 2\n4 2\n4 1 2 3\n8 6\n1 2 4 8 16 32 64 128\n''') == r'''\n4\n5\n0\n", "solution('''\n3\n5 2\n1 2 3 4 5\n6 4\n1 2 3 4 5 6\n1 0\n42\n''') == '''\n11\n-6\n42\n'''", "solution('''\n1\n2 0\n1 2\n''') == '3'\n\nassert solution('''\n2\n4 3\n2 3 5 1\n4 1\n5 7 5 5\n''') == '0 6'", "solution(\"\"\"2\n\n2 1\n1 2\n\n3 1\n1 2 4\"\"\") == \"0\\n7\"", "solution('''\n1\n5 2\n1 2 2 2 1\n''') == '2'\n\nassert solution('''\n1\n8 5\n2 2 2 2 2 2 2 2\n''') == '8'\n\nassert solution('''\n1\n7 2\n1 2 2 3 3 3 4\n''') == '3'\n\nassert solution('''\n1\n6 4\n100 100 100 100 100 100\n''') == '500'\n\nassert solution('''\n1\n8 6\n1 2 3 4 5 6 7 8\n''') == '15'\n\nassert solution('''\n1\n8 7\n1 2 3 4 5 6 7 8\n''') == '22'\n\nassert solution('''\n1\n8 6\n1 1 1 1 1 1 1 1\n''') == '1'\n\nassert solution('''\n1\n8 7\n1 1 1 1 1 1 1 1\n''') == '1'\n\n# Stress testing\n\n# from random import randint\n# while True:\n#     n = randint(1, 100)\n#     k = randint(0, n // 2)\n#     a = [randint(1, 2 * 10 ** 5) for _ in range(n)]\n#     print(n, k)\n#     print(' '.join(", "solution(test_problem) == test_solution", "solution(\"<input>\") == \"<output>\"", "solution('''\n1\n5 1\n1 1 1 1 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n4 1\n1 1 1 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n4 1\n3 2 3 2\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n4 2\n1 1 1 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n6 3\n1 3 1 3 1 3\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n6 3\n1 3 4 4 1 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n6 3\n2 3 2 3 2 3\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n6 3\n2 2 2 2 2 2\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n6 3\n4 4 4 4 4 4\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n1\n6 3\n", "solution('''\n2\n4 2\n1 2 3 4\n4 2\n4 2 1 3\n''') == '''\n4\n4\n'''", "solution(stdin1) == expected1\nassert solution(stdin2) == expected2\n \n# check the performance of solution\nassert solution(stdin3) == expected3\nassert solution(stdin4) == expected4\n \nstdin5 = read_file('./tests/secret/5.in')\nexpected5 = read_file('./tests/secret/5.out')\nassert solution(stdin5) == expected5\n\nprint('ok')", "solution(r'''\n3\n5 1\n1 2 3 4 5\n6 2\n7 7 7 7 7 7\n1 1\n42\n''') == r'''\n2\n6\n42\n'''", "solution(r'''\n2\n5 3\n1 2 3 4 5\n5 2\n5 4 3 2 1\n''') == r'''\n5\n5\n'''\n# test the speed of solution\nimport timeit\nprint(timeit.timeit(r'''\nfrom __main__ import solution\n''', number=10000))", "solution('''1\n2 2\n2 1''') == '2'\nassert solution('''1\n4 2\n1 2 3 4''') == '4'\nassert solution('''1\n4 2\n1 1 1 1''') == '6'\nassert solution('''2\n2 1\n1 2\n2 2\n1 1''') == '1''1'"], "finish_reason": ["stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-49.760058953050006, -101.679118552381, -47.39286778449999, -23.421387258199996, -47.43697538870001, -297.762055788216, -83.52397546227004, -28.580807490599994, -37.366128920099996, -84.78194342278896, -98.66026147503797, -39.26363822770999, -25.84201159467342, -26.448038838300008, -146.27510326395216, -31.766042747799997, -37.145436033500005, -64.25062297498, -128.9698133993999, -50.46214145737701, -65.79625185163096, -125.21151245331754, -64.17553489928, -103.90122069414208, -80.84525046173792, -20.21827803270001, -39.49287405506001, -114.00090436487189, -30.434981342, -38.47333478312574, -54.478891804075005, -13.311751673, -20.116062851199995, -25.10222547189999, -102.03448828210699, -48.7467528965, -85.40693744607911, -82.14784848487697, -30.913479402900006, -47.115933716159994, -28.792265381400007, -121.46178356546996, -12.4540349263, -10.379059057700001, -81.70956044383306, -19.341488676300003, -57.20993612261999, -35.186409911599995, -42.63888561874003, -50.74914932312999], "mean_logprob": [-0.5528895439227778, -0.3389303951746033, -0.8942050525377359, -0.6505940905055556, -0.8950372714849056, -0.99254018596072, -0.5840837444913987, -0.4025465843746479, -0.8492302027295454, -0.28260647807596334, -0.32886753825012666, -0.46192515562011766, -0.08614003864891133, -0.7778834952441176, -0.48758367754650667, -0.6905661466913043, -0.8638473496162791, -0.3329047822537824, -0.8429399568588235, -0.16820713819125666, -0.21932083950543665, -0.417371708177725, -0.48252281879157893, -0.34633740231380666, -0.26948416820579335, -0.459506318925, -0.8975653194331819, -0.38000301454957336, -0.800920561631579, -0.128244449277086, -0.18159630601358334, -1.2101592429999999, -0.6286269641, -0.6122494017536585, -0.34011496094035665, -0.8124458816083333, -0.28468979148693, -0.27382616161625667, -0.6577336043170213, -0.8889798814369811, -0.9928367372896552, -0.4048726118849, -1.0378362438583333, -0.9435508234272727, -0.2723652014794433, -0.5372635743416666, -0.529721630765, -0.7330502064916666, -0.5537517612823377, -0.5833235554382759]}
{"prompt": "'''\nn towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n3\n1 2 3\n3\n1 2 1\n''') == '''\nYES\n1 1 1\nNO\n'''", "solution(\"\"\"\n    1\n    3\n    2 4 8\n\"\"\") == \"\"\"\n    YES\n    1 2 4\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n    3\n    3\n    2 4 8\n    4\n    1 1 1 1\n    4\n    1 1 2 2\n\"\"\") == \"\"\"\n    YES\n    1 2 4\n    NO\n    YES\n    1 1 1 1\n\"\"\", \"Example 2\"", "solution(\"\"\"\n1\n3\n10 10 1\n\"\"\") == \"\"\"\nYES\n2 3 3\n\"\"\"\n\n# run main\nsolution(open(\"tests/tests\").read())", "solution(\"\"\"\n1\n7\n24 36 60 60 60 60 60\n\"\"\") == \"\"\"YES\n2 3 4 4 4 4 4\"\"\"\n\n# test for timeout\nassert solution(\"\"\"\n4\n4\n1 3 3 3\n1\n3\n5\n5 5 5 5 5\n5\n5\n5 5 5 5 5\n5\n\"\"\") == \"\"\"YES\n1 2 3 3\nNO\nYES\n1 1 1 1 1\nYES\n1 1 1 1 1\"\"\"", "solution('''\n2\n2\n2 2\n4\n1 2 3 4\n''') == '''\nYES\n1 1\nYES\n1 1 1 1\n'''", "solution('''\n2\n2\n2 2\n2\n2 2\n''') == '''\nYES\n1 1\nNO\n'''\n\n# check the performance of solution\nimport random\nfrom timeit import timeit\n\ntest_cases = [' '.join(map(str, (random.randint(1, 10**9) for _ in range(random.randint(1, 40)))))\n              for _ in range(random.randint(1, 20))]\nprint(timeit(stmt=\"solution('\\\\n{}')\".format('\\\\n'.join(['{}\\\\n{}'.format(len(test_case.split()), test_case)\n                                                         for test_case in test_cases])),\n              setup=\"from __main__ import solution\",\n              number=1), end='\\n\\n')", "solution(\"\"\"1\n3\n1 2 3\"\"\") == \"\"\"YES\n2 1 1\"\"\"\nassert solution(\"\"\"1\n4\n7 3 3 7\"\"\") == \"\"\"YES\n3 7 3 3\"\"\"\nassert solution(\"\"\"1\n1\n1\"\"\") == \"\"\"YES\n1\"\"\"\nassert solution(\"\"\"1\n2\n2 3\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"1\n1\n2\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"1\n3\n3 3 3\"\"\") == \"\"\"YES\n3 1 1\"\"\"\nassert solution(\"\"\"1\n5\n5 5 5 5 5\"\"\") == \"\"\"YES\n5 1 1 1 1\"\"\"\nassert solution(\"\"\"1\n2\n2 2\"\"\") == \"\"\"YES\n2 1\"\"\"\nassert solution(\"\"\"1\n1\n1\"\"\") == \"\"\"YES\n1\"\"\"\nassert solution(\"\"\"1\n3\n3 6 9\"\"\") == \"\"\"YES\n3 3 3\"\"\"\nassert solution(\"\"\"1\n2\n2 6\"\"\") == \"\"\"YES\n3 2\"\"\"\nassert solution(\"\"\"1\n1\n1\"\"\") == \"\"\"YES\n1\"\"\"\nassert solution(\"\"\"1\n2\n2 3\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"1\n1\n1\"\"\") == \"\"\"YES\n1\"\"\"\nassert solution(\"\"\"1\n1\n1\"\"\") == \"\"\"YES\n1\"\"\"\nassert solution(\"\"\"1", "solution(\"\"\"1\n5\n2 3 3 3 3\"\"\") == \"\"\"YES\n1 1 1 2 3\"\"\", \"test 1\"\nassert solution(\"\"\"1\n4\n1 1 1 2\"\"\") == \"\"\"YES\n1 1 1 1\"\"\", \"test 2\"\nassert solution(\"\"\"1\n2\n2 2\"\"\") == \"\"\"NO\"\"\", \"test 3\"\nassert solution(\"\"\"1\n2\n1 1\"\"\") == \"\"\"YES\n1 1\"\"\", \"test 4\"\nassert solution(\"\"\"1\n2\n2 3\"\"\") == \"\"\"NO\"\"\", \"test 5\"\nassert solution(\"\"\"1\n1\n1\"\"\") == \"\"\"YES\n1\"\"\", \"test 6\"\nassert solution(\"\"\"1\n4\n2 2 2 3\"\"\") == \"\"\"YES\n1 1 1 2\"\"\", \"test 7\"\nassert solution(\"\"\"1\n5\n5 5 5 5 5\"\"\") == \"\"\"YES\n1 1 1 1 1\"\"\", \"test 8\"\nassert solution(\"\"\"1\n3\n1 2 3\"\"\") == \"\"\"NO\"\"\", \"test 9\"\nassert solution(\"\"\"1\n3\n3 1 2\"\"\") == \"\"\"NO\"\"\", \"test 10\"\nassert solution(\"\"\"1\n3\n3 3 3\"\"\") == \"\"\"YES\n1 1 1\"\"\", \"test 11\"\nassert solution(\"\"\"1\n4\n4 4 4 4\"\"\") == \"\"\"", "solution('''\n2\n3\n1 2 3\n3\n2 3 1\n''') == '''\nYES\n1 1 1\nYES\n2 1 1\n'''", "solution('''\n3\n3\n3 6 9\n4\n2 3 4 5\n7\n1 1 1 1 1 1 1\n''') == '''\nYES\n1 3 3\nYES\n1 1 2 1\nNO\n'''", "solution('''\n5\n5\n2 3 3 3 3\n5\n1 2 3 4 5\n5\n5 5 5 5 5\n5\n5 4 3 2 1\n5\n1 1 1 1 1\n''') == '''\nYES\n1 2 3 3 3\nYES\n1 2 3 4 5\nYES\n1 1 1 1 1\nYES\n1 1 1 1 1\nYES\n1 1 1 1 1\n'''", "solution(\"1\\n3\\n5 12 5\") == \"YES\\n1 2 1\"\nassert solution(\"2\\n3\\n5 12 5\\n3\\n2 10 4\") == \"YES\\n1 2 1\\nNO\"\nassert solution(\"3\\n3\\n2 3 3\\n3\\n2 3 3\\n3\\n3 2 3\") == \"YES\\n1 1 1\\nYES\\n1 1 1\\nNO\"\nassert solution(\"4\\n6\\n1 3 7 13 15 13\\n8\\n7 1 1 1 2 2 3 3\\n12\\n1 1 1 2 2 2 3 3 4 4 4 5\\n5\\n1 1 1 1 1\") == \"YES\\n1 1 1 2 2\\nYES\\n1 1 1 1 1\\nYES\\n1 1 1 1 1\\nNO\"\n\ndef check_solution(solution_func: callable) -> None:\n    \"\"\"\n    Check the correctness of solution_func\n\n    :param solution_func: the solution function to check\n    :return: None\n    \"\"\"\n    assert solution_func(\"1\\n3\\n5 12 5\") == \"YES\\n1 2 1\"\n    assert solution_func(\"2\\n3\\n5 12 5\\n3\\n2 10 4\")", "solution(sample_input) == sample_output\n\n# load the input file\nwith open(path.join(path.dirname(__file__), 'input.txt'), 'r') as file:\n    input_txt = file.read()\n\n# run the solution\nprint(solution(input_txt))", "solution('''\n1\n5\n100 200 250 300 100\n''') == '''\nYES\n100 100 100 100 100\n'''\n\n# run default_input_output.py for saving the input, output of one example test case for this problem\ndefault_input_output(solution, '''\n1\n5\n100 200 250 300 100\n''')\n\n# random test cases for this problem\nrandom_test_cases(solution, 30, 50, 100)", "solution('''\n5\n5\n5 5 5 5 5\n5\n5 5 5 5 4\n5\n5 5 5 4 4\n5\n5 5 4 4 4\n5\n5 4 4 4 4\n''') == '''\nYES\n1 1 1 1 1\nYES\n1 1 1 1 1\nYES\n1 1 1 1 1\nYES\n1 1 1 1 1\nNO\n'''", "solution(example) == example_solution\n\n# check the performance of solution\nsolution(large_example)", "solution('''\n2\n2\n2 2\n2\n1 3\n''') == '''\nYES\n1 1\nNO\n'''", "solution('''\n2\n2\n2 3\n5\n5 1 2 5 4\n''') == '''\nYES\n1 1\nYES\n2 1 2 3 3\n'''", "solution('''\n1\n4\n1 2 3 4\n''') == '''\nYES\n1 2 3 4\n'''\n\nassert solution('''\n1\n5\n1 2 4 8 9\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n2\n2 3\n''') == '''\nYES\n1 1\n'''\n\nassert solution('''\n1\n3\n8 6 3\n''') == '''\nYES\n1 1 1\n'''\n\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '''\nYES\n1 1 1 1 1\n'''\n\nassert solution('''\n1\n5\n8 8 8 8 8\n''') == '''\nYES\n1 1 1 1 1\n'''\n\nassert solution('''\n1\n4\n1 2 4 8\n''') == '''\nYES\n1 1 1 1\n'''\n\nassert solution('''\n1\n5\n3 6 12 24 48\n''') == '''\nYES\n1 1 1 1 1\n'''\n\nassert solution('''\n1\n5\n5 10 15 20 25\n''') == '''\nYES\n1 1 1 1 1\n'''\n\nassert solution('''\n1\n5\n5 10 20 15 25", "solution(\"\"\"\n\n\"\"\") == \"\"\n\n# run = True\n# if run:\n#     with open(\"in\") as fin, open(\"out\", \"w\") as fout:\n#         fout.write(solution(fin.read()))", "solution('''\n3\n3\n3 7 5\n3\n3 7 6\n3\n3 7 6\n''') == '''\nYES\n1 2 1\nNO\nYES\n1 1 1\n'''", "solution('''\n3\n4\n4 3 1 5\n4\n2 3 1 5\n4\n2 3 1 8\n''') == '''\nYES\n1 1 1 1\nYES\n1 1 1 1\nNO\n'''", "solution('''1\n3\n3 9 18''') == '''YES\n3 2 1'''\nassert solution('''1\n3\n3 6 12''') == '''NO'''\nassert solution('''1\n4\n1 2 3 4''') == '''YES\n1 1 1 1'''\nassert solution('''1\n4\n1 4 9 16''') == '''YES\n1 1 1 1'''\nassert solution('''1\n4\n1 9 9 20''') == '''YES\n1 3 1 1'''\nassert solution('''1\n5\n12 20 25 25 32''') == '''YES\n2 3 4 4 5'''\nassert solution('''1\n5\n8 15 24 27 30''') == '''YES\n1 2 3 4 5'''\nassert solution('''1\n5\n20 20 25 25 32''') == '''YES\n2 3 4 4 5'''\nassert solution('''1\n5\n18 21 25 25 32''') == '''YES\n2 3 4 4 5'''\nassert solution('''1\n5\n20 20 25 25 32''') == '''YES\n2 3 4 4 5'''\nassert solution('''1\n5\n18 21 25 25 32''') == '''YES\n2 3 4 4 5'''\n", "solution(\"\"\"\n1\n5\n8 16 15 16 18\n\"\"\") == \"\"\"\nYES\n4 2 5 2 2\n\"\"\"\n\nassert solution(\"\"\"\n2\n5\n8 16 15 16 18\n5\n8 8 8 16 8\n\"\"\") == \"\"\"\nYES\n4 2 5 2 2\nNO\n\"\"\"", "solution(\"\"\"\n2\n5\n5 11 8 8 5\n5\n5 8 11 5 5\n\"\"\") == \"\"\"\nYES\n1 2 3 2 1\nNO\n\"\"\"", "solution('''\n3\n4\n4 1 7 2\n2\n10 10\n3\n3 5 3\n''') == '''\nYES\n2 1 7 2\nNO\nYES\n1 1\n'''", "solution('''\n1\n6\n40 20 10 8 6 1\n''') == '''\nYES\n1 2 5 10 20 40\n'''\n\nassert solution('''\n1\n2\n2 2\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n4\n7 7 7 7\n''') == '''\nYES\n1 1 1 1\n'''\n\nassert solution('''\n1\n1\n1\n''') == '''\nYES\n1\n'''\n\n# stress testing\nfrom random import randint\nfrom itertools import accumulate\nfrom time import time\n\nMAX_N = 5_000\nMAX_A_i = 100_000_000\n\ndef generate_test_case() -> str:\n    n = randint(1, MAX_N)\n    lst = [randint(1, MAX_A_i) for _ in range(n)]\n    return f'{n}\\n{lst}\\n'\n\ndef brute_force(n: int, lst: list) -> list:\n    def check(a: list) -> bool:\n        for i in range(n):\n            for k in range(n):\n                if b[i] != (k + 2) * a[(i + k) % n]:\n                    return", "solution(\"\"\"\n3\n3\n6 3 6\n3\n2 3 3\n2\n2 6\n\"\"\") == \"\"\"\nYES\n1 1 1\nYES\n1 2\nNO\n\"\"\"", "solution(\n    \"\"\"\n    1\n    3\n    5 5 5\n    \"\"\"\n) == \"\"\"\n    YES\n    1 1 1\n    \"\"\"", "solution(stdin=SAMPLE_1) == SAMPLE_1_SOL\nassert solution(stdin=SAMPLE_2) == SAMPLE_2_SOL\nassert solution(stdin=SAMPLE_3) == SAMPLE_3_SOL\nassert solution(stdin=SAMPLE_4) == SAMPLE_4_SOL\nassert solution(stdin=SAMPLE_5) == SAMPLE_5_SOL\nassert solution(stdin=SAMPLE_6) == SAMPLE_6_SOL\nassert solution(stdin=SAMPLE_7) == SAMPLE_7_SOL\nassert solution(stdin=SAMPLE_8) == SAMPLE_8_SOL\nassert solution(stdin=SAMPLE_9) == SAMPLE_9_SOL\nassert solution(stdin=SAMPLE_10) == SAMPLE_10_SOL\nassert solution(stdin=SAMPLE_11) == SAMPLE_11_SOL\nassert solution(stdin=SAMPLE_12) == SAMPLE_12_SOL\nassert solution(stdin=SAMPLE_13) == SAMPLE_13_SOL\nassert solution(stdin=SAMPLE_14) == SAMPLE_14_SOL\nassert solution(stdin=SAMPLE_15) == SAMPLE_15_SOL\nassert", "(solution('''\n2\n3\n5 6 5\n4\n1 2 3 4\n''') == '''\nYES\n1 2 3\nNO\n''')", "solution('''1\n5\n5 6 3 3 3''') == '''YES\n2 3 2 1 1'''\nassert solution('''1\n4\n4 4 4 4''') == '''YES\n1 1 1 1'''\nassert solution('''1\n5\n5 5 5 5 5''') == '''NO'''\nassert solution('''2\n3\n3 3 3\n3\n3 3 4''') == '''YES\n1 1 1\nNO'''\n\n# raise NotImplementedError if solution not implemented\ntry:\n    solution('''2\n3\n3 3 3\n3\n3 3 4''')\nexcept NotImplementedError:\n    print('Not implemented error raised')", "solution('''\n2\n3\n2 3 3\n3\n2 4 4\n''') == '''\nYES\n1 1 1\nNO\n'''", "'YES' == solution(\n'''\n3\n2\n2 3\n2\n1 1\n2\n1 4\n'''\n)\n\n# check the correctness of solution\nassert 'YES' == solution(\n'''\n3\n2\n2 3\n2\n1 1\n2\n3 4\n'''\n)\n\n# check the correctness of solution\nassert 'NO' == solution(\n'''\n3\n2\n2 2\n2\n1 1\n2\n3 4\n'''\n)\n\n# check the correctness of solution\nassert 'YES' == solution(\n'''\n4\n4\n2 3 4 5\n4\n1 2 3 4\n4\n5 4 3 2\n4\n4 3 2 1\n'''\n)\n\n# check the correctness of solution\nassert 'YES' == solution(\n'''\n2\n2\n2 3\n2\n1 2\n'''\n)\n\n# check the correctness of solution\nassert 'YES' == solution(\n'''\n2\n2\n2 3\n2\n1 4\n'''\n)\n\n# check the correctness of solution\nassert 'YES' == solution(\n'''\n1\n1\n1\n'''\n)\n\n# check the correctness of solution\nassert 'YES' == solution(\n'''\n4\n4\n2 3 4 5\n4\n", "solution('''\n1\n4\n1 2 2 4\n''') == '''\nYES\n1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n2 2 1 2 2\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n8\n1 2 3 4 5 6 7 8\n''') == '''\nYES\n1 2 3 4 5 6 7 8\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 2 2 4\n''') == '''\nYES\n1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '''\nYES\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '''\nYES\n1 1 1 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 5 6 5 5\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n6 6 6 6 6\n''') == '''\nYES\n1 1 1 1 1\n'''", "solution('''\n4\n4\n1 2 4 8\n4\n1 1 1 1\n4\n1 1 1 2\n4\n10 10 3 3\n''') == '''\nYES\n1\nNO\nYES\n1 1 1 1\nNO\n'''", "solution('''\n1\n5\n1 5 14 30 55\n''') == '''\nYES\n5 3 2 1 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n4\n1 2 3 4\n4\n1 4 6 16\n''') == '''\nYES\n4 3 2 1\nNO\n'''\n\nimport sys\nsolution(sys.stdin.read())", "solution('''\n2\n2\n2 3\n2\n1 2\n''') == '''\nYES\n1 1\nNO\n'''", "solution(open('tests/test_1.txt').read()) == open('tests/test_1_ans.txt').read()\nassert solution(open('tests/test_2.txt').read()) == open('tests/test_2_ans.txt').read()\nassert solution(open('tests/test_3.txt').read()) == open('tests/test_3_ans.txt').read()\nassert solution(open('tests/test_4.txt').read()) == open('tests/test_4_ans.txt').read()\n\n# test_1_ans\n'''\nYES\n1 2 3 4 5 6 7 8 9 10\n'''\n\n# test_2_ans\n'''\nYES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n'''\n\n# test_3_ans\n'''\nYES\n1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000", "solution(\"\\n\".join([\n    \"3\",\n    \"3\",\n    \"10 20 30\",\n    \"3\",\n    \"2 4 6\",\n    \"2\",\n    \"5 6\"\n])) == \"\\n\".join([\n    \"YES\",\n    \"5 5 5\",\n    \"YES\",\n    \"1 2 3\",\n    \"NO\"\n])\n\n# check the correctness of solution\nassert solution(\"\\n\".join([\n    \"1\",\n    \"3\",\n    \"10 20 30\"\n])) == \"\\n\".join([\n    \"YES\",\n    \"5 5 5\"\n])\n\n# check the correctness of solution\nassert solution(\"\\n\".join([\n    \"1\",\n    \"3\",\n    \"2 4 6\"\n])) == \"\\n\".join([\n    \"YES\",\n    \"1 2 3\"\n])\n\n# check the correctness of solution\nassert solution(\"\\n\".join([\n    \"1\",\n    \"2\",\n    \"5 6\"\n])) == \"\\n\".join([\n    \"NO\"\n])\n\n# check the correctness of solution\nassert solution(\"\\n\".join([\n    \"1\",\n    \"5\",\n    \"1 2 3 4 5\"\n])) == \"\\n\".join([\n    \"YES\",", "solution(r'''\n2\n2\n2 3\n3\n6 8 9\n''') == r'''\nYES\n1 1\nNO\n'''", "solution('''\n4\n4\n4 5 6 7\n4\n4 4 4 4\n4\n1 1 1 1\n4\n3 4 5 6\n''') == '''\nYES\n1 1 1 1\nYES\n1 1 1 1\nYES\n1 1 1 1\nYES\n1 2 3 4\n'''", "solution(r'''\n2\n2\n2 3\n3\n1 2 3\n''') == r'''\nYES\n1 2\nNO\n'''", "solution(\"\")\n\ndef solution(stdin):\n    class Query:\n        def __init__(self, test_cases):\n            self.test_cases = test_cases\n            self.cur_t = 0\n            self.cur_test_case = self.test_cases[self.cur_t]\n            self.cur_n = 0\n            self.cur_n_values = []\n        \n        def get_next_n(self):\n            n = self.cur_test_case[self.cur_n]\n            self.cur_n += 1\n            return n\n        \n        def get_next_b(self):\n            b = self.cur_test_case[self.cur_n]\n            self.cur_n += 1\n            return b\n        \n        def get_next_test_case(self):\n            if self.cur_t >= len(self.test_cases):\n                return []\n            self.cur_test_case = self.test_cases[self.cur_t]\n            self.cur_t += 1\n            self.cur_n = 0\n            return self.cur_test_case\n    \n    def solve_test_case(n, b_values):\n        result = []\n        n_values = [0] * n\n       ", "\"YES\" in solution('''\n3\n3\n3 3 3\n3\n2 3 4\n3\n4 2 6\n''')\nassert \"YES\" in solution('''\n1\n6\n1 2 3 4 5 6\n''')\nassert \"YES\" in solution('''\n1\n6\n1 1 1 1 1 1\n''')\nassert \"YES\" in solution('''\n1\n6\n5 4 3 2 1 7\n''')\nassert \"YES\" in solution('''\n1\n6\n5 4 3 2 1 6\n''')\nassert \"YES\" in solution('''\n1\n3\n3 3 3\n''')\nassert \"YES\" in solution('''\n1\n4\n4 6 10 10\n''')\nassert \"YES\" in solution('''\n1\n4\n4 4 4 4\n''')\nassert \"YES\" in solution('''\n1\n2\n2 2\n''')\nassert \"YES\" in solution('''\n1\n2\n1 2\n''')\nassert \"YES\" in solution('''\n1\n1\n1\n''')\nassert \"YES\" in solution('''\n1\n4\n4 2 6 10\n''')\nassert \"YES\" in solution('''\n1\n3\n2 1 3\n''')\nassert \"YES\" in", "solution('''\n1\n4\n4 9 7 5\n''') == '''\nYES\n1 2 3 4\n'''\n\nassert solution('''\n1\n3\n3 9 7\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n5\n20 18 20 10 18\n''') == '''\nYES\n2 4 6 8 10\n'''\n\nassert solution('''\n1\n6\n9 16 36 2 24 3\n''') == '''\nYES\n1 2 3 4 5 6\n'''\n\nassert solution('''\n1\n6\n9 16 32 2 24 3\n''') == '''\nNO\n'''\n\nassert solution('''\n1\n4\n1000000000 1000000000 1000000000 1000000000\n''') == '''\nYES\n2 3 4 5\n'''\n\nassert solution('''\n1\n4\n1000000000 1000000000 1000000000 1000000000\n''') == '''\nYES\n2 3 4 5\n'''\n\nassert solution('''\n1\n5\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '''\nYES\n2 3 4 5 6\n'''\n\nassert solution('''\n1\n5\n999999999 999999999 999999999 999999999 999999999\n''') == '", "solution(\"\") == \"\", \"empty input\"\nassert solution(\"\") == \"\", \"empty input\"\nassert solution(\"\") == \"\", \"empty input\"\nassert solution(\"\") == \"\", \"empty input\"\nassert solution(\"\") == \"\", \"empty input\"\n\n# print a sequence\nprint(solution(stdin=sys.stdin.read()))", "solution('''\n5\n5\n5 5 5 5 5\n5\n5 5 5 5 1\n5\n1 5 5 5 5\n5\n5 5 5 2 5\n5\n5 5 5 5 4\n''') == '''\nYES\n1 2 3 4 5\nYES\n1 2 3 4 2\nYES\n2 1 3 4 5\nYES\n1 2 3 1 4\nYES\n1 2 3 4 3\n'''", "solution('''\n2\n3\n10 20 30\n3\n20 20 20\n''') == '''\nYES\n1 2 3\nNO\n'''", "solution(\n    \"\"\"\n    2\n    4\n    2 6 12 12\n    4\n    1 3 5 7\n    \"\"\"\n) == \"\"\"\nYES\n2 2 4 4\nNO\n\"\"\""], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-14.451826036999998, -40.8675265178, -46.3688016288, -82.76082155369997, -16.28270144337, -90.16175124561005, -102.64149758412492, -90.80666955566197, -18.69310782355, -29.970317838539998, -40.46675331397999, -152.06591615086293, -33.402626431909994, -124.35791662199993, -31.191297791760007, -21.919514112, -13.688032305099998, -32.806259250599986, -92.87601684067899, -36.711293260660014, -28.6353306916, -36.99844601413, -135.4633594882943, -48.62604493962001, -37.9725927813, -37.5044431619, -138.2108890129789, -32.3589362814, -23.161467416200004, -23.528529871258502, -22.51964588184, -82.71513878556901, -18.7772031233, -89.93141722855793, -78.24494657287906, -41.07142716567, -51.921799947740006, -14.793261886300003, -59.89105000484501, -57.17650269025908, -20.768143026000004, -36.15252319704001, -17.798718573229998, -116.21100729846185, -120.13686116947503, -126.51884964766295, -39.779317493944994, -51.99400482866001, -18.2544000883, -37.2656967429], "mean_logprob": [-0.4014396121388889, -0.4006620246843137, -1.1040190864, -0.7881983005114286, -0.40706753608425, -0.4623679551056923, -0.34213832528041666, -0.3026888985188733, -0.46732769558875, -0.5550058858988889, -0.42152868035395835, -0.5068863871695434, -0.4639253671098611, -1.1622235198317756, -0.346569975464, -0.8430582350769231, -0.41478885773030305, -0.7811014107285714, -0.30958672280226335, -0.6222253095027118, -0.5965693894083334, -0.6980838870590566, -0.4515445316276477, -0.6946577848517143, -0.9736562251615385, -0.7813425658729166, -0.46070296337659666, -0.7525334018930232, -0.6617562118914285, -0.078428432904195, -0.5926222600484211, -0.501303871427691, -0.5215889756472222, -0.29977139076186, -0.26081648857626333, -0.6961258841638983, -0.5465452626077895, -0.44828066322121213, -0.19963683334948334, -0.19058834230086333, -0.5768928618333333, -0.5021183777366667, -0.4944088492563889, -0.38737002432820666, -0.40045620389825, -0.42172949882554334, -0.485113627974939, -0.5416042169652083, -0.5070666691194444, -0.8281265942866667]}
{"prompt": "'''\nPaprika loves permutations. She has an array a_1, a_2, ..., a_n. She wants to make the array a permutation of integers 1 to n.\n\nIn order to achieve this goal, she can perform operations on the array. In each operation she can choose two integers i (1 \u2264 i \u2264 n) and x (x > 0), then perform a_i := a_i mod x (that is, replace a_i by the remainder of a_i divided by x). In different operations, the chosen i and x can be different.\n\nDetermine the minimum number of operations needed to make the array a permutation of integers 1 to n. If it is impossible, output -1.\n\nA permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 \u2264 n \u2264 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n. (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output the minimum number of operations needed to make the array a permutation of integers 1 to n, or -1 if it is impossible.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(sys.stdin.read()) == sys.stdout.read()", "solution('''\n2\n3\n2 3 1\n2\n1 2\n''') == '''\n2\n-1\n'''\n\n# give a readable format input to stdin\ndef get_input() -> str:\n    lines = []\n    for line in sys.stdin:\n        lines.append(line.strip())\n    stdin = '\\n'.join(lines)\n    return stdin\n\n# print solution to stdout\nsys.stdout.write(solution(get_input()))", "solution(sys.stdin.read()) == sys.stdout.read()", "solution(\"\"\"\n1\n4\n4 3 2 1\n\"\"\") == \"\"\"\n0\n\"\"\", \"Test 1\"\n\nassert solution(\"\"\"\n1\n5\n5 4 2 2 1\n\"\"\") == \"\"\"\n3\n\"\"\", \"Test 2\"\n\nassert solution(\"\"\"\n1\n5\n1 2 4 5 3\n\"\"\") == \"\"\"\n-1\n\"\"\", \"Test 3\"\n\nassert solution(\"\"\"\n1\n4\n1 2 4 1\n\"\"\") == \"\"\"\n-1\n\"\"\", \"Test 4\"\n\nassert solution(\"\"\"\n1\n6\n2 3 3 3 3 3\n\"\"\") == \"\"\"\n-1\n\"\"\", \"Test 5\"\n\nassert solution(\"\"\"\n1\n6\n3 3 3 3 3 3\n\"\"\") == \"\"\"\n-1\n\"\"\", \"Test 6\"\n\nassert solution(\"\"\"\n1\n6\n3 4 4 4 4 4\n\"\"\") == \"\"\"\n-1\n\"\"\", \"Test 7\"\n\nassert solution(\"\"\"\n1\n6\n2 3 3 3 3 4\n\"\"\") == \"\"\"\n-1\n\"\"\", \"Test 8\"\n\nassert solution(\"\"\"\n1\n5\n5 4 4 4 4\n\"\"\") == \"\"\"\n-1\n\"\"\", \"Test 9\"\n\nassert solution(\"\"\"\n1\n6\n2 3 3 3 3 5\n\"\"\") == \"\"\"\n-", "solution('''\n2\n2\n1 1\n3\n1 2 3\n''') == '''\n-1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 1 2 3\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 4 1 2\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 1 1 2 2 2\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 1\n3\n1 2 3\n''') == '''\n-1\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 1 2 3\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 4 1 2\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 1 1 2 2 2\n''') == '''\n-1\n'''\n\n# check the correctness of solution", "solution('''\n4\n4\n4 1 2 3\n4\n4 1 2 2\n4\n4 3 3 3\n4\n1 2 3 4\n''') == '''\n0\n-1\n-1\n'''\n\n# check if solution handles extreme cases\nassert solution('''\n1\n2\n1 1\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n1\n1\n''') == '''\n0\n'''\n\nprint('Correct')", "solution('''1\n3\n1 2 3''') == '0'\nassert solution('''1\n3\n2 3 4''') == '2'\nassert solution('''1\n3\n3 4 5''') == '-1'\nassert solution('''1\n5\n6 7 8 9 10''') == '1'\nassert solution('''1\n5\n9 3 3 3 9''') == '-1'\nassert solution('''2\n3\n1 2 3\n3\n3 4 5''') == '0\\n-1'\nassert solution('''3\n3\n1 2 3\n3\n2 3 4\n3\n3 4 5''') == '0\\n2\\n-1'\nassert solution('''3\n3\n1 2 3\n3\n6 7 8\n3\n3 4 5''') == '0\\n1\\n-1'\nassert solution('''1\n5\n6 8 4 10 8''') == '1'\nassert solution('''2\n4\n10 8 8 10\n4\n8 8 10 10''') == '1\\n1'\nassert solution('''3\n4\n10 8 8 10\n4\n8 8 10 10\n4\n10 10 8 8''') == '1\\n1\\n1'\nassert solution(''", "solution(stdin='''\n3\n3\n1 2 3\n3\n1 1 1\n5\n5 5 5 5 5\n''') == '''\n0\n-1\n-1\n'''\n\n# remember to download the stdin file\n#\n# To solve the first example, you can choose i=1 and x=2.\n# The second example can't be turned into a permutation, because all numbers are equal.\n# The third example can't be turned into a permutation, because all numbers are equal and there is no way to choose x so that ai mod x = 1 or 2 or 3 or 4 (in this case, x must be equal to 5).\n#\n# Solution:\n#\n# For each distinct x in a, the number of elements with ai mod x equal to 0 should be at least 1.\n#\n# The minimum number of operations is the number of distinct x in a.\n#\n# We only need to prove why the second statement is true. If the number of operations is more than the number of distinct x in a, we can choose each x corresponding to an operation, then the number of elements with ai mod x equal to 0 will be at least 1.\n#\n# Think of the number of elements with ai mod x equal to 0 as the number of vertices with color x in the given graph. The number of distinct", "solution(\"2\\n3\\n1 2 2\\n3\\n1 2 3\") == \"1\\n0\", \"Test 1 failed\"\nassert solution(\"2\\n3\\n2 3 1\\n3\\n3 1 2\") == \"2\\n2\", \"Test 2 failed\"\nassert solution(\"1\\n3\\n3 1 2\") == \"2\", \"Test 3 failed\"\nassert solution(\"2\\n3\\n1 3 2\\n3\\n1 2 3\") == \"1\\n0\", \"Test 4 failed\"\nassert solution(\"1\\n4\\n4 3 2 1\") == \"0\", \"Test 5 failed\"\nassert solution(\"1\\n1\\n3\") == \"-1\", \"Test 6 failed\"\nassert solution(\"2\\n4\\n4 2 1 3\\n4\\n1 2 3 4\") == \"2\\n0\", \"Test 7 failed\"\nassert solution(\"1\\n4\\n1 2 3 4\") == \"0\", \"Test 8 failed\"\nassert solution(\"2\\n4\\n2 3 4 1\\n5\\n1 2 3 4 5\") == \"2\\n0\", \"Test 9 failed\"\nassert solution(\"1\\n5\\n1 2 3 4 5\") == \"0\", \"Test 10 failed\"\nassert solution(\"1\\n3\\n", "solution(\"1\\n\"\n\"5\\n\"\n\"2 3 1 5 4\") == \"2\"\nassert solution(\"2\\n\"\n\"3\\n\"\n\"1 2 3\\n\"\n\"3\\n\"\n\"1 1 1\") == \"-1\"\nassert solution(\"1\\n\"\n\"1\\n\"\n\"2\") == \"0\"\nassert solution(\"2\\n\"\n\"3\\n\"\n\"1 2 3\\n\"\n\"3\\n\"\n\"3 1 2\") == \"1\"\nassert solution(\"1\\n\"\n\"5\\n\"\n\"3 3 3 3 3\") == \"4\"\nassert solution(\"1\\n\"\n\"5\\n\"\n\"2 2 2 2 2\") == \"5\"\nassert solution(\"1\\n\"\n\"1\\n\"\n\"1\") == \"0\"\nassert solution(\"1\\n\"\n\"1\\n\"\n\"1\") == \"0\"\nassert solution(\"1\\n\"\n\"1\\n\"\n\"1\") == \"0\"\nassert solution(\"1\\n\"\n\"1\\n\"\n\"1\") == \"0\"\nassert solution(\"1\\n\"\n\"1\\n\"\n\"1\") == \"0\"\nassert solution(\"1\\n\"\n\"1\\n\"\n\"", "solution(r'''\n1\n3\n1 1 1\n''') == r'''\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n3\n2 3 4\n''') == r'''\n-1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n3\n3 2 4\n''') == r'''\n-1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4\n6 6 6 6\n''') == r'''\n4\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n4\n6 6 6 5\n''') == r'''\n3\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n3\n1 2 3\n''') == r'''\n0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n5\n100 200 100 200 100\n''') == r'''\n-1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n5\n100 200 100 200 200\n''') == r'''\n-1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n1\n5\n", "solution('''\n2\n5\n1 3 4 2 5\n2\n2 1\n''') == '''\n1\n-1\n'''\n\nassert solution('''\n2\n5\n2 3 4 5 1\n5\n1 2 3 4 5\n''') == '''\n3\n0\n'''", "solution('''\n2\n3\n1 2 3\n3\n1 2 2\n''') == '''\n0\n-1\n'''\n\nif __name__ == '__main__':\n    import os\n    import time\n    print(f'===== start =====\\n{time.ctime()}')\n    inpfile = 'in.txt'\n    outfile = 'out.txt'\n    if os.path.exists(outfile):\n        os.remove(outfile)\n    with open(inpfile, 'r') as infile, open(outfile, 'w') as outfile:\n        for line in infile:\n            print(solution(line), file=outfile)\n    print(f'{time.ctime()}\\n===== fin =====')", "solution('''\n5\n5\n1 2 3 4 5\n5\n1 2 2 4 5\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n''') == '''\n0\n-1\n1\n2\n2\n'''", "solution('''\n3\n3\n1 1 1\n4\n1 2 3 4\n3\n1 2 3\n''') == '''\n0\n0\n-1\n'''", "solution(str_input) == str_output, 'the solution is incorrect'\n \n\"\"\"\n# check the performance of solution\ndef show_perf(func, args, times=10**5):\n    start = timer()\n    for _ in range(times):\n        func(*args)\n    print(f'{func.__name__} took {timer() - start:.5f}s')\n\nshow_perf(solution, (str_input,))\n\"\"\"", "solution(input) == output", "solution(r'''\n''')\n\n# try to submit solution\n# submit_solution(solution, task_id, task_suffix)\n\n# on codeforces.com solution is evaluated in web browser", "solution(\"\"\"\n3\n3\n1 2 2\n4\n1 2 4 7\n1\n1\n\"\"\") == \"\"\"\n-1\n2\n0\n\"\"\", \"Solution is incorrect\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3\n1 2 2\n4\n1 2 4 7\n1\n1\n\"\"\") == \"\"\"\n-1\n2\n0\n\"\"\", \"Solution is incorrect\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3\n1 2 2\n4\n1 2 4 7\n1\n1\n\"\"\") == \"\"\"\n-1\n2\n0\n\"\"\", \"Solution is incorrect\"", "solution(sample) == sample_result", "solution('''\n1\n3\n1 2 3\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 1 2 3\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 1 3 2\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 2 1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 3 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 1\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 3 2 4 1\n''') == '''\n1\n'''\n", "solution(\"sample_input.txt\") == \"sample_output.txt\"\n\n'''\nTO BE CONTINUED\n'''", "solution('''\n1\n4\n1 2 3 4\n''') == '''\n0\n'''\n\nassert solution('''\n1\n4\n1 2 3 3\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n3\n1 2 3\n''') == '''\n0\n'''\n\nassert solution('''\n1\n3\n1 2 2\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n5\n1 2 3 2 4\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5\n2 3 4 5 6\n''') == '''\n1\n'''\n\nassert solution('''\n1\n6\n1 2 1 4 2 5\n''') == '''\n-1\n'''\n\nassert solution('''\n1\n6\n1 2 1 3 2 4\n''') == '''\n2\n'''\n\nassert solution('''\n1\n6\n1 2 1 3 2 5\n''') == '''\n3\n'''\n\nassert solution('''\n1\n6\n1 2 1 3 2 6\n''') ==", "solution('''\n3\n4\n3 1 2 3\n4\n3 1 2 3\n4\n2 3 4 2\n''') == '''\n-1\n1\n-1\n'''\nassert solution('''\n1\n1\n1\n''') == '''\n0\n'''\nassert solution('''\n1\n2\n1 2\n''') == '''\n0\n'''\nassert solution('''\n1\n2\n2 1\n''') == '''\n1\n'''\nassert solution('''\n1\n2\n2 2\n''') == '''\n-1\n'''\nassert solution('''\n1\n3\n1 2 3\n''') == '''\n0\n'''\nassert solution('''\n1\n3\n1 3 2\n''') == '''\n1\n'''\nassert solution('''\n1\n3\n2 1 3\n''') == '''\n1\n'''\nassert solution('''\n1\n3\n2 3 1\n''') == '''\n2\n'''\nassert solution('''\n1\n3\n3 1 2\n''') == '''\n1\n'''\nassert solution('''\n1\n3\n3 2 1\n''') == '''\n2\n'''\nassert solution('''\n1\n3", "solution(get_test_input()) == get_test_output()\n\n# get all inputs that are hidden\ndef get_all_inputs():\n    pass\n\n# check the correctness of solution for all inputs\nassert solution(get_all_inputs()) == get_all_outputs()", "solution('''3\n3\n3 2 1\n3\n1 2 3\n3\n1 2 2\n''') == '''0\n0\n-1\n'''\n\nimport io\nimport sys\nfrom unittest import TestCase\nimport unittest\n\nclass Test(TestCase):\n    def test_1(self):\n        # self.assertEqual(True, False)\n        sys.stdin = io.StringIO('''3\n3\n3 2 1\n3\n1 2 3\n3\n1 2 2\n''')\n        output = io.StringIO()\n        sys.stdout = output\n        import solution\n        self.assertEqual(output.getvalue(), '''0\n0\n-1\n''')\n\nif __name__ == '__main__':\n    unittest.main()", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nassert solution(SAMPLE_INPUT_2) == SAMPLE_OUTPUT_2\nassert solution(CASE_INPUT) == CASE_OUTPUT\nassert solution(CASE_INPUT_2) == CASE_OUTPUT_2\nassert solution(CASE_INPUT_3) == CASE_OUTPUT_3\nassert solution(CASE_INPUT_4) == CASE_OUTPUT_4\nassert solution(CASE_INPUT_5) == CASE_OUTPUT_5\nassert solution(CASE_INPUT_6) == CASE_OUTPUT_6\nassert solution(CASE_INPUT_7) == CASE_OUTPUT_7\nassert solution(CASE_INPUT_8) == CASE_OUTPUT_8\nassert solution(CASE_INPUT_9) == CASE_OUTPUT_9\nassert solution(CASE_INPUT_10) == CASE_OUTPUT_10\nassert solution(CASE_INPUT_11) == CASE_OUTPUT_11\nassert solution(CASE_INPUT_12) == CASE_OUTPUT_12\nassert solution(CASE_INPUT_13) == CASE_OUTPUT_13\nassert solution(CASE_IN", "solution('''\n5\n5\n2 3 4 5 1\n5\n3 4 5 6 7\n5\n3 3 3 3 3\n5\n1 1 1 1 1\n5\n1 3 3 3 3\n''') == '''\n3\n-1\n-1\n-1\n2\n'''", "solution(\"\"\"\n4\n4\n4 2 3 1\n4\n4 3 2 1\n4\n1 2 3 1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n2\n-1\n-1\n0\n\"\"\"", "solution('''\n1\n4\n4 2 3 1\n''') == '''\n1\n'''\n\n# test speed of solution\n#@pytest.mark.skip(reason=\"too slow\")\ndef test_perf():\n    assert solution('''\n100\n1000000 1 1 1\n''') == '''\n1000000\n'''", "solution('''\n3\n3\n1 2 3\n3\n3 2 1\n3\n3 1 2\n''') == '''\n0\n-1\n1\n'''\n\n# print(solution('''\n# 3\n# 3\n# 1 2 3\n# 3\n# 3 2 1\n# 3\n# 3 1 2\n# '''))", "solution('''\n2\n4\n1 4 2 3\n4\n1 4 4 3\n''') == '''\n2\n-1\n'''\n# Test case 2: impossible to make it a permutation since the second and third elements are 4.\n\nassert solution('''\n1\n1\n1\n''') == '''\n0\n'''\n# Test case 1: the array is already a permutation, so no operation is needed.", "solution(\"\") == \"\"\nprint(\"passed test.\")", "solution('''\n2\n4\n4 1 2 3\n4\n1 2 4 2\n''') == '''\n3\n-1\n'''", "solution('''\n''') == '''\n'''", "solution('''5\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n1 2 1 2 1\n5\n5 5 5 5 5\n5\n2 3 4 5 6''') == '''0\n0\n3\n-1\n1'''", "solution('''\n1\n5\n1 5 3 2 4\n''') == '''\n0\n'''\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n-1\n'''\nassert solution('''\n2\n3\n1 2 3\n3\n2 3 1\n''') == '''\n0\n1\n'''\nassert solution('''\n3\n3\n1 2 3\n3\n2 3 1\n3\n1 1 1\n''') == '''\n0\n1\n-1\n'''\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n-1\n'''\nassert solution('''\n1\n5\n1 2 3 5 5\n''') == '''\n-1\n'''\nassert solution('''\n1\n4\n4 2 3 1\n''') == '''\n2\n'''\nassert solution('''\n1\n1\n1\n''') == '''\n0\n'''\nassert solution('''\n1\n2\n2 2\n''') == '''\n-1\n'''\nassert solution('''\n1\n2\n2 1\n''') == '''\n-1\n'''\nassert solution('''\n1\n2\n1 2\n''') ==", "solution(\"\"\"1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n5 4 3 2 1\n\"\"\") == \"\"\"5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n5\n5 4 3 3 2\n\"\"\") == \"\"\"-1\n\"\"\"\n\nassert solution(\"\"\"1\n5\n1 1 1 1 1\n\"\"\") == \"\"\"-1\n\"\"\"\n\nprint(\"SUCCESS\")", "solution(\"\"\"\n3\n3\n1 2 3\n3\n1 1 2\n4\n1 2 1 2\n\"\"\") == \"\"\"\n0\n-1\n2\n\"\"\", \"Sample 1\"\nassert solution(\"\"\"\n1\n4\n1 2 1 2\n\"\"\") == \"\"\"\n2\n\"\"\", \"Sample 2\"\n\n# submit\nimport submit\nprint(submit.do(solution, \"tb\"))", "solution('''\n1\n5\n2 3 1 5 4\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 1 2\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 2 3 4 5 6\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n2 3 3 3 3\n''') == '''\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n4\n1 1 2 3\n2\n1 1\n''') == '''\n-1\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 1 2 2 3\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 2\n3\n1 2 3\n''') == '''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1", "solution(\"test\") == \"test\"", "solution(\"\"\"\\\n3\n3\n1 2 3\n3\n1 2 2\n3\n1 2 4\n\"\"\") == \"\"\"\\\n0\n-1\n2\n\"\"\"", "(solution('''1\n4\n1 2 3 4''') == '0')\nassert (solution('''1\n4\n4 4 4 4''') == '-1')\nassert (solution('''3\n5\n5 5 5 5 5\n5\n5 4 3 2 1\n5\n5 1 2 3 4''') == '1\n-1\n3')\n\n# check the correctness of solution\nassert (solution('''1\n4\n1 2 3 4''') == '0')\nassert (solution('''1\n4\n4 4 4 4''') == '-1')\nassert (solution('''3\n5\n5 5 5 5 5\n5\n5 4 3 2 1\n5\n5 1 2 3 4''') == '1\n-1\n3')", "solution(\"\"\"3\n3\n3 2 1\n4\n4 1 2 2\n5\n5 6 7 5 5\n\"\"\") == \"\"\"1\n-1\n3\n\"\"\"\n\n# test solution\nstdin = \"\"\"3\n3\n3 2 1\n4\n4 1 2 2\n5\n5 6 7 5 5\n\"\"\"\n\nfrom tester import Tester\nt = Tester(stdin, solution)\nt.test()", "solution(stdin_sample) == stdout_sample", "solution(read_file_as_string(sample_input_filepath)) == read_file_as_string(sample_output_filepath)\nassert solution(read_file_as_string(input_filepath)) == read_file_as_string(output_filepath)", "solution('''\n''') == '''\n'''", "(solution('''1\n3\n3 2 1''') == '2')\nassert (solution('''1\n3\n1 2 3''') == '0')\nassert (solution('''2\n3\n3 2 1\n3\n1 2 3''') == '2\\n0')\n\n# read the input\nlines = list(map(lambda x: x.strip(), sys.stdin.readlines()))\nx = int(lines[0])\nlines = lines[1:]\nl = x\nwhile l > 0:\n    a = []\n    for i in range(x):\n        l = int(lines[i])\n        a.append(list(map(int, lines[i+1].split())))\n    l -= x\n    print(solution(a))", "solution(\"\"\"\ninput\n\"\"\") == \"output\"\n\n# check the correctness of solution\nassert solution(\"\"\"\ninput\n\"\"\") == \"output\"\n\n# check the correctness of solution\nassert solution(\"\"\"\ninput\n\"\"\") == \"output\"\n\n# check the correctness of solution\nassert solution(\"\"\"\ninput\n\"\"\") == \"output\"\n\n# check the correctness of solution\nassert solution(\"\"\"\ninput\n\"\"\") == \"output\"\n\nprint(\"done\")", "solution(\"\"\"1\n4\n1 3 2 3\n\"\"\") == \"\"\"2\"\"\", \"sample 1\"\n\nassert solution(\"\"\"1\n3\n1 2 2\n\"\"\") == \"\"\"-1\"\"\", \"sample 2\"\n\nassert solution(\"\"\"1\n4\n4 4 4 4\n\"\"\") == \"\"\"-1\"\"\", \"sample 3\"\n\nassert solution(\"\"\"3\n3\n1 2 2\n3\n1 2 2\n3\n1 2 2\n\"\"\") == \"\"\"-1\n-1\n-1\"\"\", \"sample 4\"\n\nassert solution(\"\"\"4\n4\n2 3 3 3\n4\n2 3 3 3\n4\n2 3 3 3\n4\n2 3 3 3\n\"\"\") == \"\"\"3\n3\n3\n3\"\"\", \"sample 5\"\n\nassert solution(\"\"\"2\n2\n2 2\n1\n1\n\"\"\") == \"\"\"1\n0\"\"\", \"sample 6\"\n\nassert solution(\"\"\"2\n2\n1 2\n2\n1 2\n\"\"\") == \"\"\"0\n0\"\"\", \"sample 7\"\n\nassert solution(\"\"\"2\n2\n1 2\n2\n2 1\n\"\"\") == \"\"\"0\n0\"\"\", \"sample 8\"\n\nassert solution(\"\"\"3\n3\n2 3 3\n3\n2 3 3\n3\n2 3 3\n\"\"\") == \"\"\"2\n2\n2"], "finish_reason": ["stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-7.731944713229999, -64.99795307324703, -7.73306638887, -100.14924227492999, -57.42289530339344, -65.68854976663998, -117.252783515147, -312.8785848451499, -96.80542382089708, -73.4408039190415, -76.72186806704697, -34.61625703335001, -75.768686870092, -30.512255630109987, -18.843272302249996, -89.09709480521997, -6.98901544, -79.97293903863002, -40.78874011536997, -13.428609458, -72.30212696771, -24.410454194310006, -70.76250318660519, -58.31267583512815, -37.56337183913999, -63.842716930662, -27.858425856619686, -42.682329021659996, -30.386846519465003, -54.200210184799985, -25.240002473664994, -70.69505589116997, -15.453082790000002, -21.913865767699996, -6.247568457, -34.130931209210004, -83.57734621874457, -47.42935062257201, -69.55575841596, -77.05733373071844, -8.75253832, -19.0844954099, -56.64185459557899, -64.04852792597501, -8.3144883321, -27.066880540824002, -6.224830427, -97.707290375995, -25.242632165079996, -96.96156763187791], "mean_logprob": [-0.42955248406833335, -0.5462012863298067, -0.4296147993816667, -0.3338308075831, -0.19140965101131133, -0.5662806014365517, -0.3908426117171567, -1.0429286161505, -0.3226847460696567, -0.24480267973013833, -0.25573956022349, -0.4807813476854167, -0.40956046956806486, -0.45540680044940296, -0.4486493405297619, -0.8026765297767567, -0.9984307771428571, -1.5680968438947058, -0.27747442255353744, -1.4920677175555555, -0.24100708989236666, -0.813681806477, -0.23587501062201732, -0.19437558611709366, -0.5606473408826865, -0.3360142996350632, -0.09286141952206567, -0.6185844785747826, -0.5958205199895098, -0.6691383973432099, -0.3040964153453614, -0.6999510484274257, -1.188698676153846, -0.6261104505057143, -0.4462548897857143, -0.5417608128446032, -0.2785911540624817, -0.4160469352857193, -0.7479113808167742, -0.25685777910239466, -0.9725042577777778, -0.4771123852475, -0.3078361662803207, -0.6602941023296391, -0.6395760255461539, -0.4164135467819077, -0.4446307447857143, -0.5310178824782337, -0.2359124501409346, -0.32320522543959335]}
{"prompt": "'''\nA group of n alpinists has just reached the foot of the mountain. The initial difficulty of climbing this mountain can be described as an integer d.\n\nEach alpinist can be described by two integers s and a, where s is his skill of climbing mountains and a is his neatness.\n\nAn alpinist of skill level s is able to climb a mountain of difficulty p only if p \u2264 s. As an alpinist climbs a mountain, they affect the path and thus may change mountain difficulty. Specifically, if an alpinist of neatness a climbs a mountain of difficulty p the difficulty of this mountain becomes max(p, a). \n\nAlpinists will climb the mountain one by one. And before the start, they wonder, what is the maximum number of alpinists who will be able to climb the mountain if they choose the right order. As you are the only person in the group who does programming, you are to answer the question.\n\nNote that after the order is chosen, each alpinist who can climb the mountain, must climb the mountain at that time. \n\nInput\n\nThe first line contains two integers n and d (1 \u2264 n \u2264 500 000; 0 \u2264 d \u2264 10^9) \u2014 the number of alpinists and the initial difficulty of the mountain.\n\nEach of the next n lines contains two integers s_i and a_i (0 \u2264 s_i, a_i \u2264 10^9) that define the skill of climbing and the neatness of the i-th alpinist.\n\nOutput\n\nPrint one integer equal to the maximum number of alpinists who can climb the mountain if they choose the right order to do so.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"4 0\\n\\\n    1 2\\n\\\n    1 1\\n\\\n    1 3\\n\\\n    3 3\") == \"4\", \"test 1 failed\"\nassert solution(\"3 4\\n\\\n    5 4\\n\\\n    1 1\\n\\\n    2 5\") == \"2\", \"test 2 failed\"\nassert solution(\"4 10\\n\\\n    9 7\\n\\\n    1 9\\n\\\n    9 10\\n\\\n    10 10\") == \"1\", \"test 3 failed\"\nassert solution(\"3 1\\n\\\n    1 2\\n\\\n    3 3\\n\\\n    1 1\") == \"2\", \"test 4 failed\"\nassert solution(\"2 10\\n\\\n    11 12\\n\\\n    10 9\") == \"1\", \"test 5 failed\"\nassert solution(\"3 0\\n\\\n    2 3\\n\\\n    4 1\\n\\\n    4 1\") == \"2\", \"test 6 failed\"\nassert solution(\"6 9\\n\\\n    5 5\\n\\\n    1 5\\n\\\n    5 10\\n\\\n    4 4\\n\\\n    1 1\\n\\\n    4 8\") == \"2\", \"test 7 failed\"\nassert solution(\"1 4\\n\\\n    2 4\") ==", "solution(\"1 0\\n0 1\") == \"1\", \"simple case\"\nassert solution(\"2 0\\n2 1\\n1 2\") == \"2\", \"2 possible orders\"\nassert solution(\"3 0\\n1 2\\n3 4\\n5 6\") == \"3\", \"3 possible orders\"\nassert solution(\"3 0\\n1 2\\n3 4\\n5 6\") == \"3\", \"3 possible orders\"\nassert solution(\"4 0\\n1 2\\n2 3\\n4 5\\n5 6\") == \"4\", \"4 possible orders\"\nassert solution(\"3 0\\n1 5\\n5 2\\n5 5\") == \"2\", \"2 possible orders\"\nassert solution(\"3 0\\n1 2\\n3 4\\n5 6\") == \"3\", \"3 possible orders\"\nassert solution(\"3 0\\n1 2\\n3 4\\n5 6\") == \"3\", \"3 possible orders\"\nassert solution(\"3 0\\n1 2\\n3 4\\n5 6\") == \"3\", \"3 possible orders\"\nassert solution(\"3 0\\n1 2\\n3 4\\n5 6\") == \"3\", \"3 possible orders\"\nassert solution(\"3 0\\n1 2\\n3 4\\n5 6\") == \"3\", \"3 possible orders\"\nassert solution", "solution(test_data) == result\n\n'''\nRun the local server to check the correctness of the solution in real life.\n'''\nfrom local_runner import ServerRunner\nServerRunner(solution, test_data, result).run()", "solution(\"\"\"1\n0\n0 1\"\"\") == \"1\"\nassert solution(\"\"\"1\n1\n1 0\"\"\") == \"1\"\nassert solution(\"\"\"2\n0\n0 1\n0 1\"\"\") == \"2\"\nassert solution(\"\"\"2\n1\n1 0\n1 0\"\"\") == \"2\"\nassert solution(\"\"\"2\n0\n0 1\n1 0\"\"\") == \"2\"\nassert solution(\"\"\"2\n1\n1 0\n0 1\"\"\") == \"1\"\nassert solution(\"\"\"3\n3\n3 4\n5 4\n4 5\"\"\") == \"3\"\nassert solution(\"\"\"2\n2\n2 3\n1 3\"\"\") == \"2\"\nassert solution(\"\"\"4\n4\n2 3\n2 3\n2 3\n1 3\"\"\") == \"3\"\nassert solution(\"\"\"5\n5\n5 4\n5 4\n5 4\n5 4\n5 4\"\"\") == \"5\"\nassert solution(\"\"\"6\n6\n6 4\n6 4\n6 4\n6 4\n6 4\n6 4\"\"\") == \"5\"\nassert solution(\"\"\"6\n6\n6 6\n6 6\n6 6\n6 6\n6 6\n6 6\"\"\") == \"6\"\nassert solution(\"\"\"6\n1\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2", "solution(r'''\n6 17\n20 1\n15 1\n16 3\n17 3\n13 5\n19 9\n''') == '5'\n\nassert solution(r'''\n5 0\n5 5\n6 6\n7 7\n8 8\n9 9\n''') == '5'\n\nassert solution(r'''\n5 0\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '1'\n\nassert solution(r'''\n1 0\n0 100\n''') == '0'\n\nassert solution(r'''\n2 0\n10 0\n0 0\n''') == '1'\n\nassert solution(r'''\n2 0\n0 100\n100 0\n''') == '2'\n\nassert solution(r'''\n3 0\n0 0\n0 0\n0 0\n''') == '0'\n\nassert solution(r'''\n3 1\n0 0\n0 0\n0 0\n''') == '1'\n\nassert solution(r'''\n3 0\n0 0\n0 0\n0 1\n''') == '1'\n\nassert solution(r'''\n5 0\n0 1\n0 1\n0 1\n0 1\n0 1\n''') == '5'\n\nassert solution(r'''\n1 0\n0 0\n''') ==", "solution('''\n2 0\n1 0\n0 1\n''') == '2'\n\n# test the execution time\nimport timeit\nimport random\n\ndef generate_input(n: int) -> str:\n    m = random.randint(0, 1e9)\n    return '{} {}\\n'.format(n, m) + '\\n'.join(map(lambda _: '{} {}'.format(random.randint(0, 1e9), random.randint(0, 1e9)), range(n)))\n\nn = 500000\nprint(timeit.timeit(lambda: solution(generate_input(n)), number=1))", "solution('''\n1 2\n1 1\n''') == '1'\n\nassert solution('''\n3 5\n1 2\n2 2\n3 3\n''') == '3'\n\nassert solution('''\n3 3\n2 3\n2 3\n2 3\n''') == '1'\n\nassert solution('''\n3 4\n2 3\n2 3\n2 3\n''') == '2'\n\nassert solution('''\n4 2\n2 3\n2 3\n2 3\n2 3\n''') == '4'\n\nassert solution('''\n4 3\n2 3\n2 3\n2 3\n2 3\n''') == '3'\n\nassert solution('''\n4 4\n2 3\n2 3\n2 3\n2 3\n''') == '2'\n\nassert solution('''\n4 5\n2 3\n2 3\n2 3\n2 3\n''') == '1'\n\nassert solution('''\n4 6\n2 3\n2 3\n2 3\n2 3\n''') == '0'\n\nassert solution('''\n500000 0\n2000000000 2000000000\n''') == '1'\n\nassert solution('''\n500000 0\n0 1\n''') == '500000'\n\nassert solution('''\n500000 1\n2 3\n", "solution(stdin) == stdout", "solution('''\n6 5\n5 7\n8 5\n5 2\n6 5\n5 6\n8 4\n''') == '5'\n\n# submit\ns = input()\nprint(solution(s))", "(solution(\"5 5\\n5 4\\n5 5\\n5 6\\n5 5\\n5 6\") == \"3\")\nassert (solution(\"5 10\\n5 4\\n5 5\\n5 6\\n5 5\\n5 6\") == \"2\")\nassert (solution(\"2 0\\n0 0\\n0 0\") == \"2\")\nassert (solution(\"5 5\\n5 4\\n4 5\\n4 6\\n4 5\\n4 6\") == \"2\")\nassert (solution(\"6 5\\n6 6\\n6 4\\n6 6\\n6 5\\n6 6\\n6 5\") == \"3\")\nassert (solution(\"5 5\\n4 4\\n4 5\\n4 6\\n4 5\\n4 6\") == \"2\")\nassert (solution(\"6 5\\n6 6\\n6 4\\n6 6\\n6 5\\n6 6\\n6 5\") == \"3\")\nassert (solution(\"5 0\\n5 5\\n5 6\\n5 5\\n5 6\") == \"1\")\nassert (solution(\"1 5\\n5 6\") == \"0\")\nassert (solution(\"5 0\\n5 5\\n5 6\\n5 5\\n5 6\") == \"1\")", "solution('''5 5\n2 4\n5 7\n6 2\n1 4\n3 5''') == '3'\nassert solution('''3 9\n5 5\n5 5\n5 5''') == '2'\nassert solution('''4 6\n4 5\n4 5\n4 5\n4 5''') == '4'\nassert solution('''3 6\n4 5\n4 5\n4 5''') == '3'\nassert solution('''2 3\n1 3\n2 1''') == '2'\nassert solution('''2 2\n2 2\n2 2''') == '1'\nassert solution('''1 2\n1 2''') == '1'\nassert solution('''1 1\n1 1''') == '1'\nassert solution('''1 0\n1 0''') == '1'\nassert solution('''1 3\n2 2''') == '1'\nassert solution('''3 2\n1 1\n1 1\n1 1''') == '1'\nassert solution('''2 3\n2 2\n2 2''') == '1'\nassert solution('''1 1\n1 0''') == '0'\nassert solution('''2 1\n1 1\n1 1''') == '0'\nassert solution('''2 0\n1 1\n1", "solution(\"\"\"\n5 4\n1 3\n7 6\n4 4\n4 3\n4 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n10 3\n9 1\n8 1\n7 1\n6 1\n5 1\n4 1\n3 1\n2 1\n1 1\n0 1\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n3 1\n1 1\n1 2\n1 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 1\n2 3\n3 2\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 3\n2 3\n2 4\n2 5\n2 6\n2 7\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n6 0\n5 5\n4 4\n3 3\n2 2\n1 1\n0 0\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1 1\n1 1\n\"\"\") == \"1\"\n\n# print(solution(\"\"\"\n# put here the test\n# \"\"\"))", "solution('''\n3 1\n4 5\n3 4\n2 3\n''') == '3'\n\n# test the speed of solution\nfrom timeit import timeit\nprint(timeit(lambda: solution('''\n100000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 100", "solution(stdin='''\n1 0\n9 0\n''') == '1'\n\nassert solution(stdin='''\n2 10\n10 9\n9 8\n''') == '2'\n\nassert solution(stdin='''\n3 7\n8 5\n6 4\n3 1\n''') == '3'\n\nassert solution(stdin='''\n4 0\n7 7\n8 4\n6 2\n5 9\n''') == '4'\n\nassert solution(stdin='''\n5 19\n14 11\n15 12\n13 16\n11 15\n16 10\n''') == '4'\n\nassert solution(stdin='''\n6 0\n10 1\n8 7\n13 6\n9 5\n9 11\n7 10\n''') == '5'\n\nassert solution(stdin='''\n7 0\n10 1\n2 3\n9 6\n7 1\n8 5\n10 4\n2 8\n''') == '7'\n\nassert solution(stdin='''\n9 9\n0 0\n8 5\n6 1\n3 1\n3 7\n7 2\n6 3\n3 1\n3 4\n''') == '9'\n\nassert solution(stdin='''\n10 9\n7 6\n2 3\n3 7\n3 4\n3 5\n9 2\n", "solution('''\n5 4\n0 10\n5 11\n8 12\n13 13\n14 14\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n2 3\n4 7\n1 1\n''') == '2'\n\nassert solution('''\n10 10\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n''') == '1'\n\nassert solution('''\n5 1\n1 5\n5 1\n5 1\n5 1\n5 1\n''') == '5'", "solution(test_case1) == ans1, 'testcase 1 failed'\nassert solution(test_case2) == ans2, 'testcase 2 failed'\nassert solution(test_case3) == ans3, 'testcase 3 failed'\n\n# print(solution(sys.stdin.read()))", "solution('''\n6 10\n0 10\n1 0\n1 1\n2 10\n2 1\n10 0\n''') == '5'\nassert solution('''\n1 1\n1 0\n''') == '1'\nassert solution('''\n1 0\n0 0\n''') == '1'\nassert solution('''\n3 0\n0 0\n1 0\n1 0\n''') == '1'\nassert solution('''\n4 2\n0 0\n1 0\n1 0\n1 0\n''') == '3'\nassert solution('''\n4 2\n0 1\n1 0\n1 0\n1 0\n''') == '4'\nassert solution('''\n4 2\n0 0\n1 1\n1 0\n1 0\n''') == '3'\nassert solution('''\n4 2\n0 0\n1 0\n1 1\n1 0\n''') == '3'\nassert solution('''\n4 2\n0 0\n1 0\n1 0\n1 1\n''') == '3'\nassert solution('''\n4 2\n0 1\n1 1\n1 0\n1 0\n''') == '4'\nassert solution('''\n4 2\n0 1\n1 0\n1 1\n1 0\n''') == '4'\nassert solution('''\n4 2", "solution(\"\"\"\n5 10\n8 4\n9 3\n9 10\n10 6\n4 6\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 10\n9 4\n9 3\n9 10\n10 6\n4 6\n\"\"\") == \"5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 10\n8 4\n8 3\n8 10\n10 6\n4 6\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 10\n8 4\n7 3\n8 10\n10 6\n4 6\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 10\n8 4\n7 3\n8 10\n10 6\n4 9\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 10\n8 4\n7 3\n8 10\n10 6\n4 10\n\"\"\") == \"4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 10\n8 4\n7 3\n8 10\n10 6\n4 8\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 10\n8 4\n7 3\n8 10\n10 6\n4 7\n\"\"\") == \"2\"\n\n# check the correctness", "solution('''\n5 10\n2 0\n0 0\n0 0\n0 0\n0 0\n''') == '5'\n\nassert solution('''\n5 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == '5'\n\nassert solution('''\n5 10\n10 10\n10 10\n10 10\n10 10\n10 10\n''') == '1'\n\nassert solution('''\n5 10\n9 9\n8 8\n7 7\n6 6\n5 5\n''') == '1'\n\nassert solution('''\n5 20\n9 9\n8 8\n7 7\n6 6\n5 5\n''') == '5'\n\nassert solution('''\n5 20\n9 9\n8 10\n7 10\n6 10\n5 10\n''') == '5'\n\nassert solution('''\n5 20\n9 9\n8 10\n7 10\n6 9\n5 10\n''') == '4'\n\nassert solution('''\n5 20\n9 9\n8 8\n7 8\n6 8\n5 8\n''') == '3'\n\nassert solution('''\n5 10\n9 9\n8 10\n7 10\n6 9\n5 8\n''') == '4'\n\nassert solution('''\n5 10\n9 9\n8", "(solution('''\n5 2\n2 1\n2 3\n5 2\n2 2\n5 3\n''') == '''\n4\n''')\n\n# print the solution\nprint(solution(stdin))", "solution(r'''\n6 4\n4 0\n4 2\n4 2\n4 2\n4 2\n4 2\n''') == '''\n2\n'''\n\nassert solution(r'''\n6 6\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n''') == '''\n6\n'''\n\nassert solution(r'''\n6 1\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n''') == '''\n0\n'''\n\nassert solution(r'''\n6 5\n5 5\n5 5\n5 5\n5 5\n5 5\n5 5\n''') == '''\n0\n'''\n\nassert solution(r'''\n6 5\n5 1\n5 1\n5 1\n5 1\n5 1\n5 1\n''') == '''\n5\n'''\n\nassert solution(r'''\n2 5\n1 1\n5 5\n''') == '''\n1\n'''\n\nassert solution(r'''\n4 6\n4 5\n4 4\n4 3\n4 2\n''') == '''\n4\n'''\n\nassert solution(r'''\n4 6\n4 6\n4 6\n4 6\n4 6\n''') == '''\n4\n'''\n\nassert solution(r''", "solution('''5 4\n1 1\n4 2\n4 3\n5 5\n4 1''') == '4'\nassert solution('''4 4\n3 3\n2 3\n3 1\n3 3''') == '3'\nassert solution('''6 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == '1'\nassert solution('''6 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == '1'\nassert solution('''6 0\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == '6'\nassert solution('''6 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == '3'\nassert solution('''6 2\n1 1\n1 1\n1 1\n1 1\n1 1\n0 0''') == '4'\nassert solution('''6 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1''') == '3'\nassert solution('''6 2\n1 1\n1 1\n1 1\n1 1\n1 1\n2 2''') == '4'\nassert solution('''6 2\n1 1\n1 1\n1 1\n1 1\n1 1", "solution(\"\"\"\n4 4\n2 1\n2 3\n2 4\n2 2\n\"\"\") == \"\"\"\n4\n\"\"\", \"Let's go\"\n\nassert solution(\"\"\"\n4 1\n2 1\n2 3\n2 4\n2 2\n\"\"\") == \"\"\"\n1\n\"\"\", \"Let's go\"\n\nassert solution(\"\"\"\n4 2\n2 1\n2 3\n2 4\n2 2\n\"\"\") == \"\"\"\n2\n\"\"\", \"Let's go\"\n\nassert solution(\"\"\"\n4 3\n2 1\n2 3\n2 4\n2 2\n\"\"\") == \"\"\"\n3\n\"\"\", \"Let's go\"\n\nassert solution(\"\"\"\n4 5\n2 1\n2 3\n2 4\n2 2\n\"\"\") == \"\"\"\n4\n\"\"\", \"Let's go\"\n\nassert solution(\"\"\"\n6 0\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n\"\"\") == \"\"\"\n6\n\"\"\", \"Let's go\"\n\nassert solution(\"\"\"\n6 1\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n\"\"\") == \"\"\"\n6\n\"\"\", \"Let's go\"\n\nassert solution(\"\"\"\n6 2\n3 0\n3 0\n3 0\n3 0\n3 0\n3 0\n\"\"\") == \"\"\"\n6\n\"\"\", \"Let", "solution('''\n5 1\n1 2\n1 3\n1 4\n1 5\n1 6\n''') == '5'\n\nassert solution('''\n5 1\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '1'\n\nassert solution('''\n5 10\n10 10\n10 10\n10 10\n10 10\n10 10\n''') == '1'\n\nassert solution('''\n5 3\n2 2\n2 2\n2 2\n2 2\n2 2\n''') == '5'\n\nassert solution('''\n5 5\n1 0\n1 0\n1 0\n1 0\n1 0\n''') == '5'\n\nassert solution('''\n5 5\n1 0\n0 0\n0 0\n0 0\n0 0\n''') == '1'\n\nassert solution('''\n5 5\n0 1\n0 1\n0 1\n0 1\n0 1\n''') == '5'\n\nassert solution('''\n5 5\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == '0'\n\nassert solution('''\n5 5\n2 3\n2 3\n2 3\n2 3\n2 3\n''') == '1'\n\nassert solution('''\n5 5\n2 4\n2", "solution(\n    '''\n    5 1\n    2 2\n    1 2\n    3 1\n    1 2\n    1 4\n    '''\n) == '3'\n\nassert solution(\n    '''\n    3 4\n    3 3\n    4 4\n    5 5\n    '''\n) == '2'\n\nassert solution(\n    '''\n    4 4\n    1 1\n    2 1\n    2 2\n    2 2\n    '''\n) == '2'\n\nassert solution(\n    '''\n    4 4\n    2 2\n    2 2\n    2 2\n    2 2\n    '''\n) == '4'\n\nassert solution(\n    '''\n    4 2\n    3 2\n    3 2\n    3 2\n    3 2\n    '''\n) == '3'\n\nassert solution(\n    '''\n    4 4\n    1 1\n    2 1\n    3 1\n    4 1\n    '''\n) == '1'\n\nassert solution(\n    '''\n    6 4\n    1 1\n    2 1\n    3 1\n    4 1\n    1 1\n    1 1\n    '''\n) == '2'\n\nassert solution(\n    '''\n    3 3\n    1 1\n    2 2\n", "'0' == solution('''2 2\n1 2\n3 2''')\nassert '1' == solution('''3 6\n3 4\n2 2\n1 3''')\nassert '2' == solution('''5 6\n0 2\n2 3\n1 2\n0 2\n0 2''')\nassert '1' == solution('''5 7\n0 1\n0 2\n1 3\n2 3\n0 2''')\nassert '0' == solution('''5 6\n0 1\n1 2\n2 3\n3 4\n4 5''')\nassert '5' == solution('''5 5\n0 0\n0 0\n0 0\n0 0\n0 0''')\nassert '1' == solution('''5 1\n0 0\n0 0\n0 0\n0 0\n0 0''')\nassert '1' == solution('''5 1\n1 0\n0 0\n0 0\n0 0\n0 0''')\nassert '2' == solution('''5 1\n1 0\n1 0\n0 0\n0 0\n0 0''')\nassert '3' == solution('''5 1\n1 0\n1 0\n1 0\n0 0\n0 0''')\nassert '4' == solution('''5 1\n1 0\n1 0\n1 0\n1 0\n0 0", "solution(\"\"\"5 10\n0 10\n5 10\n10 10\n10 10\n10 10\"\"\") == \"3\"\nassert solution(\"\"\"5 10\n0 10\n5 10\n10 10\n10 10\n10 10\"\"\") == \"3\"\nassert solution(\"\"\"5 1000000000\n0 1000000000\n5 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\"\"\") == \"5\"\nassert solution(\"\"\"5 1000000000\n0 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000\"\"\") == \"4\"\nassert solution(\"\"\"5 999999999\n0 999999999\n999999999 999999999\n999999999 999999999\n999999999 999999999\n999999999 999999999\"\"\") == \"4\"\nassert solution(\"\"\"5 999999999\n0 999999999\n999999999 999999999\n999999999 999999999\n999999999 999999999\n999999999 999999999\"\"\") == \"4\"\nassert solution(\"\"\"5 999999999\n0 999999999\n999999999 999999999\n999999999 999999999\n999999999 999999999\n999999999 999999999\"\"\") == \"4\"\nassert solution(\"\"\"5 999999999\n0 999999999\n999999999 99999", "solution(\"\"\"4\n4\n4 3\n2 3\n2 2\n4 3\n\"\"\") == \"3\"", "solution(example1_in) == example1_out\nassert solution(example2_in) == example2_out\nassert solution(example3_in) == example3_out", "solution('''\n5 5\n2 3\n1 4\n2 1\n5 4\n3 5\n''') == '3'\n\nassert solution('''\n3 0\n1 1000000000\n1000000000 1000000000\n''') == '3'\n\nassert solution('''\n2 3\n1 3\n2 2\n''') == '2'\n\nassert solution('''\n1 0\n1 1\n''') == '1'\n\nassert solution('''\n1 0\n1 2\n''') == '0'\n\nassert solution('''\n1 0\n0 0\n''') == '0'\n\nassert solution('''\n1 1\n1 2\n''') == '1'\n\nassert solution('''\n3 0\n0 0\n0 0\n0 0\n''') == '3'\n\nassert solution('''\n3 0\n1 1\n1 1\n1 1\n''') == '3'\n\nassert solution('''\n3 0\n1 2\n1 2\n1 2\n''') == '2'\n\nassert solution('''\n3 0\n1 3\n1 3\n1 3\n''') == '1'\n\nassert solution('''\n3 0\n1 4\n1 4\n1 4\n''') == '0'\n\nassert solution('''\n3 0\n", "solution('''6 4\n4 6\n4 3\n4 5\n6 7\n8 9\n9 4''') == '6'\n\n# check the correctness of solution\nassert solution('''6 4\n4 6\n4 3\n4 5\n6 7\n8 9\n10 4''') == '5'", "solution(r'''\n5 4\n2 3\n2 3\n2 3\n2 3\n2 3\n''') == '5'\n\nassert solution(r'''\n5 5\n2 3\n2 3\n2 3\n2 3\n2 3\n''') == '3'\n\nassert solution(r'''\n5 1\n2 3\n2 3\n2 3\n2 3\n2 3\n''') == '1'\n\nassert solution(r'''\n3 1\n3 2\n3 2\n3 2\n''') == '2'\n\nassert solution(r'''\n4 2\n4 4\n4 4\n4 4\n4 4\n''') == '4'\n\nassert solution(r'''\n5 0\n1 2\n1 2\n1 2\n1 2\n1 2\n''') == '0'\n\nassert solution(r'''\n4 1\n1 2\n1 2\n1 2\n1 2\n''') == '0'\n\nassert solution(r'''\n5 4\n5 4\n5 4\n5 4\n5 4\n5 4\n''') == '1'\n\nassert solution(r'''\n5 3\n2 3\n2 3\n2 3\n2 3\n2 3\n''') == '1'\n\nassert solution(r'''\n5 3\n2 3\n2 3\n", "solution('''\n3 3\n1 2\n2 3\n3 4\n''') == '3'\n\nassert solution('''\n3 4\n1 2\n2 3\n3 4\n''') == '4'\n\nassert solution('''\n4 5\n1 2\n2 3\n3 4\n4 5\n''') == '4'\n\nassert solution('''\n1 4\n5 5\n''') == '1'\n\nassert solution('''\n3 9\n1 2\n2 3\n3 4\n''') == '1'\n\n# test the speed of solution\n\n# print(solution('''\n# ...\n# '''))", "solution('''\n4 8\n1 1\n1 1\n1 1\n1 1\n''') == '2'\n\nassert solution('''\n5 4\n2 3\n3 4\n3 4\n1 6\n1 6\n''') == '5'\n\nassert solution('''\n2 1\n2 2\n3 3\n''') == '1'\n\nassert solution('''\n5 8\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '5'\n\nassert solution('''\n5 3\n6 6\n6 6\n6 6\n6 6\n6 6\n''') == '0'\n\nassert solution('''\n1 1\n1 1\n''') == '1'\n\nassert solution('''\n5 10\n2 3\n3 4\n3 4\n1 6\n1 6\n''') == '1'\n\nassert solution('''\n5 20\n2 3\n3 4\n3 4\n1 6\n1 6\n''') == '0'\n\nassert solution('''\n5 8\n2 3\n3 4\n3 4\n1 6\n1 6\n''') == '5'\n\nassert solution('''\n5 4\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '5'\n\nassert solution('''", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution(\"\") == \"\", \"Empty input\"\nassert solution(\"\") == \"\", \"Some input\"", "solution('''\n1 1\n1 1\n''') == '1'\n\nassert solution('''\n1 0\n1 0\n''') == '0'\n\nassert solution('''\n2 1\n1 1\n1 1\n''') == '2'\n\nassert solution('''\n2 1\n1 1\n2 1\n''') == '2'\n\nassert solution('''\n2 1\n1 1\n1 0\n''') == '1'\n\nassert solution('''\n2 1\n0 0\n0 0\n''') == '0'\n\nassert solution('''\n3 1\n0 0\n0 0\n0 0\n''') == '0'\n\nassert solution('''\n3 2\n0 0\n0 0\n0 0\n''') == '1'\n\nassert solution('''\n3 2\n1 1\n1 1\n1 1\n''') == '3'\n\nassert solution('''\n3 2\n1 1\n1 1\n1 0\n''') == '2'\n\nassert solution('''\n3 2\n1 1\n1 0\n1 0\n''') == '1'\n\nassert solution('''\n3 2\n1 0\n1 0\n1 0\n''') == '0'\n\nassert solution('''\n3 3\n1 0\n1", "solution('''\n4 10\n0 1\n2 0\n10 4\n9 4\n''') == '2', 'Sample 1'\n\nassert solution('''\n4 1\n0 1\n0 2\n0 3\n0 4\n''') == '4', 'Sample 2'\n\nassert solution('''\n5 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == '5', 'Sample 3'\n\nassert solution('''\n5 0\n0 0\n2 0\n2 0\n2 0\n2 0\n''') == '1', 'Sample 4'\n\nassert solution('''\n1 0\n0 0\n''') == '1', 'Sample 5'\n\nassert solution('''\n6 0\n2 3\n1 2\n1 2\n1 2\n1 2\n1 2\n''') == '6', 'Sample 6'\n\nassert solution('''\n1 0\n2 3\n''') == '0', 'Sample 7'\n\nassert solution('''\n1 1\n0 0\n''') == '0', 'Sample 8'\n\nassert solution('''\n1 1\n2 3\n''') == '1', 'Sample 9'\n\nassert solution('''\n3 1\n2 3\n1 2\n1 2\n''') == '2', 'Sample 10'", "solution(\"\"\"1 1\n1 1\"\"\") == \"1\"\nassert solution(\"\"\"3 3\n3 3\n3 3\n3 3\"\"\") == \"3\"\nassert solution(\"\"\"3 3\n1 1\n2 1\n3 1\"\"\") == \"2\"\nassert solution(\"\"\"3 3\n1 0\n1 0\n1 0\"\"\") == \"0\"\nassert solution(\"\"\"10 5\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\"\"\") == \"10\"\nassert solution(\"\"\"5 2\n1 0\n1 0\n1 0\n1 0\n1 0\"\"\") == \"0\"\nassert solution(\"\"\"5 2\n2 3\n2 3\n2 3\n2 3\n2 3\"\"\") == \"5\"\nassert solution(\"\"\"5 2\n0 0\n0 0\n0 0\n0 0\n0 0\"\"\") == \"0\"\nassert solution(\"\"\"5 2\n0 0\n0 0\n1 0\n0 0\n0 0\"\"\") == \"1\"\nassert solution(\"\"\"5 2\n0 0\n0 0\n0 0\n0 0\n1 0\"\"\") == \"1\"\nassert solution(\"\"\"5 2\n0 0\n0 0\n0 0\n1 0\n0 0\"\"\") == \"1\"\nassert solution(\"\"\"5 2\n0", "solution(\"\"\"4 1\n2 1\n3 2\n4 2\n5 1\"\"\") == \"4\"\nassert solution(\"\"\"4 10\n2 1\n3 2\n4 2\n5 1\"\"\") == \"3\"\nassert solution(\"\"\"1 1\n1 1\"\"\") == \"1\"\nassert solution(\"\"\"3 0\n1 0\n2 0\n3 0\"\"\") == \"3\"\nassert solution(\"\"\"3 5\n5 3\n1 3\n5 1\"\"\") == \"3\"\nassert solution(\"\"\"3 2\n5 2\n1 1\n5 1\"\"\") == \"2\"\nassert solution(\"\"\"2 3\n1 3\n2 2\"\"\") == \"2\"\nassert solution(\"\"\"3 10\n3 10\n3 10\n3 10\"\"\") == \"1\"\nassert solution(\"\"\"5 1000000000\n5000000000 1000000000\n5000000000 1000000000\n5000000000 1000000000\n5000000000 1000000000\"\"\") == \"5\"\nassert solution(\"\"\"5 0\n1 0\n2 0\n3 0\n4 0\n5 0\"\"\") == \"5\"\nassert solution(\"\"\"4 0\n1 0\n2 0\n3 0\n4 0\"\"\") == \"4\"\nassert solution(\"\"\"3 0\n1 0\n2 0\n3 0\"\"\") == \"3\"\nassert solution(\"\"\"2 0\n1 0\n2 0\"\"\") ==", "solution(\"2 3\\n2 2\\n2 3\") == \"2\"\nassert solution(\"5 5\\n5 4\\n5 3\\n5 2\\n5 1\\n5 0\") == \"5\"\nassert solution(\"4 4\\n4 3\\n4 2\\n4 1\\n4 0\") == \"4\"\nassert solution(\"5 5\\n5 4\\n5 3\\n5 2\\n5 1\\n5 0\") == \"5\"\nassert solution(\"5 5\\n2 1\\n2 1\\n2 1\\n2 1\\n2 1\") == \"1\"\nassert solution(\"4 10\\n4 9\\n4 8\\n4 7\\n4 6\") == \"4\"\nassert solution(\"5 10\\n5 9\\n5 8\\n5 7\\n5 6\\n5 5\") == \"5\"\nassert solution(\"5 5\\n5 6\\n5 5\\n5 6\\n5 5\\n5 6\") == \"5\"\nassert solution(\"1 5\\n5 5\") == \"1\"\nassert solution(\"2 3\\n2 3\\n2 3\") == \"2\"\nassert solution(\"3 9\\n3 3\\n3 3\\n3 3\") == \"3\"\nassert solution(\"5 5\\n5 5\\n5 5\\n5", "solution('''\n10 100\n10 20\n20 20\n30 20\n40 20\n50 20\n60 20\n70 20\n80 20\n90 20\n100 20\n''') == '10'\n\nassert solution('''\n10 3\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '10'\n\nassert solution('''\n10 3\n10 10\n20 20\n30 30\n40 40\n50 50\n60 60\n70 70\n80 80\n90 90\n100 100\n''') == '1'\n\nassert solution('''\n10 3\n5 5\n4 4\n3 3\n2 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '5'\n\nassert solution('''\n10 3\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n''') == '1'\n\nassert solution('''\n10 100\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n''') == '2'\n\nassert solution('''\n10 100\n10 1\n10 1\n10 1\n10", "solution('''\n3 4\n2 2\n2 3\n2 3\n''') == '3'\n\nassert solution('''\n3 4\n1 5\n5 1\n1 2\n''') == '2'\n\nassert solution('''\n5 100\n1 2\n1 3\n1 5\n1 6\n1 7\n''') == '5'\n\nassert solution('''\n5 100\n1 2\n1 4\n1 5\n1 6\n1 7\n''') == '5'\n\nassert solution('''\n5 100\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '5'\n\nassert solution('''\n5 100\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '5'\n\nassert solution('''\n5 100\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '5'\n\nassert solution('''\n6 100\n1 2\n2 3\n3 4\n4 5\n5 6\n6 100\n''') == '6'\n\nassert solution('''\n6 100\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n''') == '6'\n\nassert solution('''\n6 100\n1 2\n2 3\n3 4\n4", "solution(\"\"\"5 10\n10 2\n5 10\n15 5\n5 15\n20 2\"\"\") == \"4\"\nassert solution(\"\"\"5 1000\n10 2\n5 10\n15 5\n5 15\n20 2\"\"\") == \"5\"\nassert solution(\"\"\"5 1000000000\n10 2\n5 10\n15 5\n5 15\n20 2\"\"\") == \"5\"\nassert solution(\"\"\"5 12\n10 10\n10 10\n10 10\n10 10\n10 10\"\"\") == \"1\"\nassert solution(\"\"\"5 12\n10 10\n10 10\n10 10\n10 10\n10 10\"\"\") == \"1\"\nassert solution(\"\"\"5 12\n10 1\n10 1\n10 1\n10 1\n10 1\"\"\") == \"5\"\nassert solution(\"\"\"5 12\n10 1\n10 2\n10 3\n10 4\n10 5\"\"\") == \"5\"\nassert solution(\"\"\"5 12\n10 5\n10 4\n10 3\n10 2\n10 1\"\"\") == \"5\"\nassert solution(\"\"\"5 12\n10 100\n10 99\n10 98\n10 97\n10 96\"\"\") == \"5\"\nassert solution(\"\"\"5 12\n10 1\n10 2\n10 3\n10 4\n10 5\"\"\") == \"5\"\nassert solution(\"\"\"5 12\n10 6\n10 7\n10 8\n10 9\n10", "solution(\"\"\"5 9\n1 2\n2 3\n1 5\n2 2\n2 9\n\"\"\") == \"\"\"3\"\"\"\n\nassert solution(\"\"\"7 6\n1 5\n1 2\n1 6\n1 5\n1 4\n1 7\n1 5\n\"\"\") == \"\"\"7\"\"\"\n\n# show the running time of the solution\nimport time\nrun_time = time.time()\nprint(solution(open(\"input.txt\", \"r\").read()))\nprint(\"running time {}ms\".format(round(time.time()-run_time, 3)*1000))", "solution(\"\"\"6 5\n4 4\n4 3\n4 2\n4 1\n4 5\n4 6\"\"\") == \"6\"\nassert solution(\"\"\"3 4\n3 4\n3 5\n3 6\"\"\") == \"3\"\nassert solution(\"\"\"1 1\n10 5\"\"\") == \"1\"\nassert solution(\"\"\"2 2\n1 5\n2 4\"\"\") == \"2\"\nassert solution(\"\"\"2 3\n2 3\n2 3\"\"\") == \"2\"\nassert solution(\"\"\"1 0\n1 1\"\"\") == \"1\"\nassert solution(\"\"\"5 4\n1 2\n2 3\n3 4\n4 5\n5 6\"\"\") == \"3\"\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n4 5\n5 6\"\"\") == \"3\"\nassert solution(\"\"\"5 4\n1 2\n2 3\n3 4\n3 5\n3 6\"\"\") == \"3\"\nassert solution(\"\"\"5 5\n1 2\n2 3\n3 4\n3 5\n3 6\"\"\") == \"4\"\nassert solution(\"\"\"5 4\n2 3\n2 3\n2 3\n2 3\n2 3\"\"\") == \"3\"\nassert solution(\"\"\"5 5\n2 3\n2 3\n2 3\n2 3\n2 3\"\"\") == \"4\"\nassert solution(\"\"\"6 6\n2 3\n", "solution('''\n3 2\n1 2\n2 3\n3 4\n''') == '3', 'test 1'\n\nassert solution('''\n3 2\n1 2\n1 1\n1 1\n''') == '2', 'test 2'\n\nassert solution('''\n3 5\n1 2\n2 2\n3 3\n''') == '2', 'test 3'\n\nassert solution('''\n3 2\n1 2\n2 1\n3 4\n''') == '3', 'test 4'\n\nassert solution('''\n3 3\n1 3\n2 3\n2 3\n''') == '2', 'test 5'\n\n# test speed\nimport timeit\nprint(\n    timeit.timeit(\n        stmt=f\"solution('''{stdin}''')\",\n        setup=\"from __main__ import solution\",\n        number=10\n    )\n)", "solution(open(\"in.txt\").read()) == open(\"out.txt\").read()\n# print(solution(open(\"in.txt\").read()))", "solution(stdin=\"\"\"\n3 2\n2 1\n2 2\n2 3\n\"\"\") == \"2\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n3 2\n3 1\n3 2\n3 3\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n3 2\n3 2\n3 2\n3 2\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n3 2\n2 2\n2 2\n2 2\n\"\"\") == \"2\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n3 2\n1 1\n1 1\n1 1\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n3 1\n1 1\n1 1\n1 1\n\"\"\") == \"3\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n2 3\n1 0\n1 0\n\"\"\") == \"2\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n2 3\n1 0\n1 1\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n2 3\n1 1\n1 0\n\"\"\") == \"1\"\n\n# check", "solution(example_input) == example_output\n# test solution\nassert solution(test_input) == test_output\n\n# submit solution\nsolution(stdin)"], "finish_reason": ["length", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "length", "length", "stop", "stop", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "stop", "length", "stop"], "sum_logprob": [-174.62893035703613, -92.80380754749994, -69.82006966328, -110.91791375561705, -129.34969819436998, -61.27753685705005, -87.16874654824997, -5.626738433, -50.43633606569997, -115.76109566595201, -131.4217315087, -125.75132846978993, -43.079492336755, -273.53422527591914, -84.39429665844003, -34.00597425334999, -85.45689930493704, -82.22862176300704, -89.89098817690903, -41.50119764630001, -99.38768578957493, -99.08731339806003, -69.68020108201402, -79.84737988826392, -108.87705393378101, -118.46265046835605, -65.18916503444098, -29.152594292, -12.946618279449996, -100.76033784877795, -50.197214926270014, -98.39990871709003, -65.83324338298102, -120.42221112244586, -13.804730264390004, -17.846528874, -61.21420270734397, -119.71807932300992, -89.83115415241298, -127.9881632749601, -116.387816544598, -76.24617699349992, -93.68014313110795, -104.57471571811512, -110.63254155855, -123.872398313187, -88.80166803562801, -18.186761473799997, -71.99751869598902, -27.883258481320002], "mean_logprob": [-0.5820964345234534, -0.3093460251583333, -1.2694558120596364, -0.36972637918539, -0.4311656606479, -0.3953389474648387, -0.29056248849416666, -0.6251931592222222, -1.008726721314, -0.3858703188865067, -0.43807243836233334, -0.5515409143411842, -0.14359830778918334, -0.91178075091973, -0.6071532133700719, -0.4723051979631944, -0.2848563310164567, -0.27409540587669, -0.2996366272563633, -0.830023952926, -0.33129228596525, -0.3302910446602, -0.23226733694004667, -0.26615793296088003, -0.36292351311260335, -0.39487550156118667, -0.21729721678147, -1.1212536266153845, -0.31577117754756096, -0.33586779282926, -0.7070030271305634, -0.32799969572363336, -0.43598174425815234, -0.40140737040815333, -0.046015767547966664, -0.775936038, -0.20404734235781333, -0.39906026441003334, -0.29943718050804335, -0.42662721091653333, -0.38795938848199335, -0.25415392331166664, -0.31226714377036, -0.34858238572705, -0.8576166012290698, -0.41290799437729, -0.4269310963251346, -0.5051878187166666, -0.23999172898663, -0.7149553456748718]}
{"prompt": "'''\nShohag has an integer sequence a_1, a_2, \u2026, a_n. He can perform the following operation any number of times (possibly, zero):\n\n  * Select any positive integer k (it can be different in different operations). \n  * Choose any position in the sequence (possibly the beginning or end of the sequence, or in between any two elements) and insert k into the sequence at this position. \n  * This way, the sequence a changes, and the next operation is performed on this changed sequence. \n\n\n\nFor example, if a=[3,3,4] and he selects k = 2, then after the operation he can obtain one of the sequences [\\underline{2},3,3,4], [3,\\underline{2},3,4], [3,3,\\underline{2},4], or [3,3,4,\\underline{2}].\n\nShohag wants this sequence to satisfy the following condition: for each 1 \u2264 i \u2264 |a|, a_i \u2264 i. Here, |a| denotes the size of a.\n\nHelp him to find the minimum number of operations that he has to perform to achieve this goal. We can show that under the constraints of the problem it's always possible to achieve this goal in a finite number of operations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 200) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 100) \u2014 the initial length of the sequence.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 the elements of the sequence.\n\nOutput\n\nFor each test case, print a single integer \u2014 the minimum number of operations needed to perform to achieve the goal mentioned in the statement.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(test_data_2) == test_output_2\n\n# check the correctness of solution\nassert solution(test_data_1) == test_output_1", "solution(r'''\n5\n5\n5 2 6 1 5\n5\n1 2 3 4 5\n1\n1\n1\n1\n2\n1 2\n5\n5 5 1 4 2\n''') == '''\n3\n0\n0\n0\n1\n3\n'''\n\n# check performance of solution\nassert timeit.timeit(solution, r'''\n5\n5\n5 2 6 1 5\n5\n1 2 3 4 5\n1\n1\n1\n1\n2\n1 2\n5\n5 5 1 4 2\n''') < 1", "solution(\"\"\"\n3\n3\n1 2 1\n3\n3 3 4\n3\n3 4 4\n\"\"\") == \"\"\"\n1\n2\n2\n\"\"\"\n\n# print the solution to stdout\nwith open('../stdin.txt', 'r') as f:\n    print(solution(f.read()))", "solution('''\n5\n5\n1 2 1 2 3\n5\n2 1 2 2 2\n5\n1 1 2 2 2\n5\n1 2 2 2 2\n5\n1 1 1 1 1\n''') == '''\n3\n2\n2\n0\n4\n'''", "solution('''1\n2\n2 3''') == '1'\nassert solution('''3\n3\n3 3 4\n4\n1 5 5 2\n5\n2 1 3 4 4''') == '''4\n3\n3'''", "solution(r'''3\n3\n3 3 4\n3\n1 3 5\n3\n2 2 2''') == r'''3\n0\n0'''\n\n# test run - main\nimport sys\ndef main():\n    lines = sys.stdin.readlines()\n    with open('solution.out', 'w') as f:\n        print(solution(lines), file=f)\n\nif __name__ == '__main__':\n    main()", "solution(\"\"\"\n5\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n5\n5 4 5 3 2\n5\n5 5 5 5 5\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n0\n4\n2\n4\n0\n\"\"\", \"Should be the same\"\n\n# submit solution\n# print(solution(sys.stdin.read()))", "solution(\"\"\"\n4\n4\n4 2 3 1\n4\n4 3 2 1\n4\n4 3 2 2\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n4\n0\n1\n0\n\"\"\", \"If you can see this message - you have made a mistake\"\n\nassert solution(\"\"\"\n1\n1\n2\n\"\"\") == \"\"\"\n0\n\"\"\", \"If you can see this message - you have made a mistake\"\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\n0\n\"\"\", \"If you can see this message - you have made a mistake\"\n\nassert solution(\"\"\"\n1\n1\n3\n\"\"\") == \"\"\"\n2\n\"\"\", \"If you can see this message - you have made a mistake\"\n\nassert solution(\"\"\"\n2\n2\n2 1\n2\n1 2\n\"\"\") == \"\"\"\n1\n0\n\"\"\", \"If you can see this message - you have made a mistake\"\n\nassert solution(\"\"\"\n2\n2\n2 2\n2\n2 2\n\"\"\") == \"\"\"\n1\n0\n\"\"\", \"If you can see this message - you have made a mistake\"\n\nassert solution(\"\"\"\n1\n3\n1 2 3\n\"\"\") == \"\"\"\n0\n\"\"\", \"If you can see this message - you have made a mistake\"\n\n", "solution(\"\"\"\n2\n3\n3 3 4\n3\n1 1 1\n\"\"\") == \"\"\"\n3\n0\n\"\"\"\n\n# print the result\nprint(solution(stdin))", "solution('''\n4\n4\n4 4 4 4\n5\n5 3 3 3 3\n5\n5 5 5 5 5\n6\n2 3 3 3 3 3\n''') == '''\n0\n0\n1\n1\n'''", "solution('''\n3\n3\n3 3 4\n3\n2 3 2\n3\n1 2 1\n''') == '''\n1\n1\n0\n'''", "solution('''\n2\n2\n1 2\n2\n2 1\n''') == '''\n0\n1\n'''", "solution('''\n1\n5\n5 4 3 2 1\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 1 1 1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 4 4 4\n''') == '''\n12\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n3 3 2 2\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n''') == '''\n0\n'''\n\nassert solution('''\n1\n10\n1 5 4 3 7 1 3 4 1 5\n''') == '''\n16\n'''\n\nassert solution('''\n1\n6\n2 3 4 5 6 1\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '''\n20\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n0\n'''\n\n# check the correctness of", "solution('''\n3\n3\n3 3 4\n3\n1 1 1\n3\n1 2 3\n''') == '''\n3\n3\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2 2\n2\n1 1\n''') == '''\n1\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 2 3\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 1 2 2\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 1 1 1\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n2\n2 3\n2\n2 2\n2\n2 2\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n1 2\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution(", "solution(INPUT) == OUTPUT\n\nif __name__ == '__main__':\n    # copy paste the input from hackerrank to local file input.txt\n    INPUT = open('input.txt', 'r').read()\n    OUTPUT = open('output.txt', 'r').read()\n    print(solution(INPUT))", "solution(SAMPLE_INPUT_STR) == SAMPLE_OUTPUT_STR, 'Test Case Failed'\n\nif __name__ == '__main__':\n    with open('C:\\\\Users\\\\Shahriar\\\\PycharmProjects\\\\Codeforces\\\\input.txt', 'r') as f:\n        T = int(f.readline())\n        for t in range(T):\n            N = int(f.readline())\n            array = list(map(int, f.readline().split()))\n            print(solution(N, array))\n            # N = int(input())\n            # array = list(map(int, input().split()))\n            # print(solution(N, array))", "solution('''\n1\n4\n3 3 4\n''') == '3'\n\n# sample input and output\nprint('Input')\nprint('''\n1\n4\n3 3 4\n''')\nprint('Output')\nprint('''\n3\n''')", "solution(\"\"\"\n1\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n2\n3\n1 2 3\n2\n1 1\n\"\"\") == \"\"\"\n0\n0\n\"\"\"\n\n# check the correctness of solution with large input\nstdin = \"\"\"\n2\n1\n1\n2\n2 1\n\"\"\"\nfrom random import randint\nwith open(\"large.in\", \"w\") as fo:\n    fo.write(stdin)\n    for _ in range(400):\n        fo.write(str(randint(1, 10**9)) + \" \")\nwith open(\"large.in\") as fin, open(\"large.out\", \"w\") as fout:\n    user_out = solution(fin.read())\n    fout.write(user_out)\n    print(user_out)", "solution(input) == output\n\n# run unit tests\n# python -m unittest -q task.test_task", "str(solution('''1\n5\n1 2 1 1 2''')) == '''2'''\nassert str(solution('''2\n3\n3 3 3\n2\n2 2''')) == '''0\n0'''\nassert str(solution('''3\n3\n3 3 4\n3\n1 2 3\n3\n1 1 1''')) == '''1\n0\n2'''\nassert str(solution('''4\n4\n9 3 3 5\n1\n1\n4\n1 1 1 1\n4\n1 1 1 2''')) == '''4\n0\n4\n1'''\nassert str(solution('''5\n4\n1 1 1 2\n4\n1 1 1 1\n1\n1\n4\n1 2 3 4\n1\n2''')) == '''1\n4\n0\n0\n0'''\nassert str(solution('''6\n7\n1 2 3 4 5 6 7\n1\n1\n1\n7\n1 1 1 1 1 1 1\n1\n1\n1\n7\n1 1 1 1 1 1 1''')) == '''0\n0\n0\n6\n0\n0'''\nassert str(solution('''7\n1\n1\n1\n1\n1\n1\n1\n", "solution(__doc__) == '''6\n'''", "solution('''2\n2\n2 1\n2\n1 2''') == '''1\n1'''", "solution(\"\"\"4\n4\n4 4 4 4\n4\n4 3 4 4\n4\n4 3 3 3\n3\n3 4 4\"\"\") == \"\"\"0\n1\n3\n0\"\"\", \"Test 1 failed\"\n\nassert solution(\"\"\"3\n3\n3 3 3\n3\n3 3 2\n3\n3 3 1\"\"\") == \"\"\"0\n1\n2\"\"\", \"Test 2 failed\"\n\nassert solution(\"\"\"3\n3\n1 2 3\n3\n3 2 1\n3\n3 2 2\"\"\") == \"\"\"3\n3\n2\"\"\", \"Test 3 failed\"\n\nassert solution(\"\"\"2\n1\n1\n2\n2 1\"\"\") == \"\"\"0\n0\"\"\", \"Test 4 failed\"\n\nassert solution(\"\"\"1\n10\n1 2 1 1 1 1 1 1 1 1\"\"\") == \"\"\"0\"\"\", \"Test 5 failed\"\n\nassert solution(\"\"\"4\n4\n4 4 4 4\n4\n4 3 4 4\n4\n4 3 3 3\n3\n3 4 4\"\"\") == \"\"\"0\n1\n3\n0\"\"\", \"Test 6 failed\"\n\nassert solution(\"\"\"3\n3\n3 3 3\n3\n3 3 2\n3\n3 3 1\"\"\") == \"\"\"0\n1\n2\"\"\", \"Test 7 failed\"\n\nassert solution(\"\"\"3\n3\n1 2 3\n", "solution(\"\"\"1\n3\n3 3 4\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"2\n3\n3 3 3\n3\n3 3 4\"\"\") == \"\"\"3\n3\"\"\"\nassert solution(\"\"\"2\n4\n4 4 4 4\n4\n4 4 4 4\"\"\") == \"\"\"4\n4\"\"\"\nassert solution(\"\"\"1\n5\n5 5 5 5 5\"\"\") == \"\"\"5\"\"\"\nassert solution(\"\"\"2\n5\n5 5 5 5 5\n5\n5 5 5 5 5\"\"\") == \"\"\"5\n5\"\"\"\nassert solution(\"\"\"1\n4\n5 4 2 1\"\"\") == \"\"\"8\"\"\"\nassert solution(\"\"\"1\n4\n1 2 3 4\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"1\n2\n1 3\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"1\n2\n1 1\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"1\n3\n1 1 1\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"1\n3\n3 3 3\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"1\n3\n3 3 4\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"1\n3\n1 3 3\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"1\n3\n1 1 3\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"1\n4\n1 2 3 4\"\"\") == \"\"\"0", "solution('''4\n4\n4 3 4 3\n5\n1 2 3 4 5\n2\n5 1\n3\n3 3 3''') == '''0\n1\n1\n0'''\n\n# check the correctness of solution\nassert solution('''2\n5\n5 4 3 2 1\n5\n5 5 5 5 5''') == '''0\n0'''\n\n# submit main.py to codeforces\nimport requests\nurl = 'https://codeforces.com/problemset/submit'\nfiles = {'attachment': open('main.py', 'rb')}\nr = requests.post(url, files=files, data={'action': 'submit', 'contestId': '1393', 'submittedProblemIndex': 'B', 'programTypeId': '7', 'source': '# Shohag has an integer sequence a_1, a_2, \u2026, a_n. He can perform the following operation any number of times (possibly, zero):\\n\\n  * Select any positive integer k (it can be different in different operations). \\n  * Choose any position in the sequence (possibly the beginning or end of the sequence, or in between any two elements) and insert k into the sequence at this position. \\n  * This way, the sequence a changes, and the next operation is", "solution('''\n4\n5\n5 5 5 5 5\n4\n4 3 3 3\n3\n3 3 4\n1\n10\n''') == '''\n0\n3\n0\n0\n'''", "solution('''4\n4\n3 3 4 4\n1\n1\n3\n2 2 4\n3\n3 3 1''') == '''1\n0\n1\n1'''", "solution('''\n2\n3\n2 3 3\n3\n3 3 4\n''') == '''\n1\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 4 1 5 5 7\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2 2\n4\n1 1 1 2\n''') == '''\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5\n3 3 3 3 3\n5\n4 4 4 4 4\n4\n4 4 4 4\n4\n4 4 3 3\n4\n4 4 2 2\n''') == '''\n0\n1\n1\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n6 6 6 6 6 6 6 6 6 6\n''') == '''\n9\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3\n3 3 1\n3\n3 3 1\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3\n3 3 1\n3\n3 3 1\n''') == '''\n2\n2\n", "solution(sample1) == \"5\"\nassert solution(sample2) == \"2\"\nassert solution(sample3) == \"2\"\n\nprint(solution(input))", "(solution('''\n3\n3\n3 3 4\n3\n3 4 4\n3\n1 1 2\n''') == '''\n3\n1\n1\n''')", "solution('''\n\n''') == '''\n\n'''", "solution(\"\"\"\n1\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# test\ntest_solution(solution)", "solution(\"test_case\") == \"test_result\"", "solution(r'''1\n5\n5 1 2 3 4''') == r'''2'''\nassert solution(r'''1\n3\n3 4 2''') == r'''3'''\nassert solution(r'''1\n1\n1''') == r'''0'''\nassert solution(r'''2\n4\n4 4 4 4\n4\n4 4 4 1''') == r'''4\n3'''\nassert solution(r'''1\n5\n5 2 5 5 5''') == r'''2'''\n\n# check the correctness of input\nimport sys\nsys.setrecursionlimit(100000)\n\nimport os\nif os.getcwd() != os.path.dirname(os.path.abspath(__file__)):\n    sys.stdin = open(os.path.join(os.getcwd(), 'problem.in'), 'r')\n\nsys.stdout = open(os.path.join(os.getcwd(), 'problem.out'), 'w')\n\nn = int(input())\nfor i in range(n):\n    a = [int(s) for s in input().split()]\n    print(solution(a))", "solution('''\n1\n5\n2 3 3 3 5\n''') == '''\n1\n'''\n\nassert solution('''\n1\n6\n1 1 1 1 1 1\n''') == '''\n1\n'''\n\nassert solution('''\n1\n3\n3 3 3\n''') == '''\n3\n'''\n\nassert solution('''\n1\n3\n3 4 5\n''') == '''\n0\n'''\n\nassert solution('''\n1\n6\n1 1 1 4 4 4\n''') == '''\n2\n'''\n\nassert solution('''\n1\n4\n4 1 1 2\n''') == '''\n2\n'''\n\n# create a file to test the benchmark\nwith open('test.in', 'w') as f:\n    f.write('''\n1\n10000\nsolution('''\n2\n2\n2 1\n5\n5 2 4 3 1\n''') == '''\n2\n2\n'''\n\nassert solution('''\n3\n3\n3 3 4\n3\n3 4 3\n3\n3 4 5\n''') == '''\n3\n2\n2\n'''\n\nassert solution('''\n1\n1\n1\n''') == '''\n0\n'''", "solution(\"\"\"5\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n5\n3 2 1 4 5\n5\n5 3 2 3 1\n5\n1 2 3 4 5\"\"\") == \"\"\"0\n0\n2\n1\n0\"\"\", \"Test 1 failed.\"\n\nassert solution(\"\"\"3\n3\n3 3 3\n4\n4 4 4 4\n4\n4 4 4 4\"\"\") == \"\"\"1\n0\n1\"\"\", \"Test 2 failed.\"\n\nassert solution(\"\"\"1\n4\n4 3 2 1\"\"\") == \"\"\"0\"\"\", \"Test 3 failed.\"\n\n# submit the solution\nfrom google.cloud import storage\nclient = storage.Client()\nbucket = client.get_bucket('icfpc2020-solutions')\nblob = bucket.blob('C/C1.txt')\nblob.upload_from_string(solution(\"\"\"5\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n5\n3 2 1 4 5\n5\n5 3 2 3 1\n5\n1 2 3 4 5\"\"\"))\n\n# download the solution (for debugging)\nclient = storage.Client()\nbucket = client.get_bucket('icfpc2020-solutions')\nblob = bucket.blob('C/C1.txt')\nprint(", "solution('''3\n3\n1 2 3\n3\n3 2 1\n2\n2 1''') == '''0\n2\n1'''", "solution(example_input) == example_output\n\n# get input and solve the problem\nstdin = open(__file__.replace('.py', '.in'), 'r')\nprint(solution(stdin.read()))\nstdin.close()", "solution(sample) == sample_out\nassert solution(sample1) == sample1_out\nassert solution(sample2) == sample2_out\nassert solution(sample3) == sample3_out\nassert solution(sample4) == sample4_out\nassert solution(sample5) == sample5_out\nassert solution(sample6) == sample6_out\nassert solution(sample7) == sample7_out\nassert solution(sample8) == sample8_out\nassert solution(sample9) == sample9_out\nassert solution(sample10) == sample10_out", "solution('''\n2\n4\n1 2 3 4\n4\n4 4 4 4\n''') == '''\n0\n3\n'''\n\n# stress testing\nimport random\nimport string\n\ndef get_sol(stdin: str) -> str:\n    return solution(stdin)\n\ndef gen_tasks(N: int = 100) -> str:\n    T = []\n    for _ in range(N):\n        size = random.randint(1, 100)\n        task = str(size) + '\\n'\n        for _ in range(size):\n            task += str(random.randint(1, 10**9)) + ' '\n        task += '\\n'\n        T.append(task)\n    return '\\n'.join([str(len(T))] + T)\n\ndef solution_tester(stdin: str, sol: str) -> bool:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    tasks = lines[1:]\n    assert len(tasks) == N\n    assert len(sol.split('\\n')) == N\n    for T, S in zip(tasks, sol.split('\\n')):\n        arr = list(map(int, T.split()))\n       ", "solution('''\n3\n3\n3 3 4\n3\n1 2 3\n3\n3 2 1\n''') == '''\n2\n0\n2\n'''", "solution('''\n1\n3\n3 3 4\n''') == '2'\n\nassert solution('''\n1\n4\n4 3 2 1\n''') == '0'\n\nassert solution('''\n1\n4\n4 2 1 1\n''') == '3'\n\nassert solution('''\n1\n4\n3 3 3 3\n''') == '3'\n\nassert solution('''\n1\n4\n4 2 3 1\n''') == '1'\n\nassert solution('''\n1\n4\n4 4 4 4\n''') == '4'\n\nassert solution('''\n1\n4\n4 3 3 2\n''') == '2'\n\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '5'\n\nassert solution('''\n1\n3\n1 1 1\n''') == '3'\n\nassert solution('''\n1\n1\n1\n''') == '0'\n\nassert solution('''\n1\n1\n9\n''') == '8'\n\nassert solution('''\n1\n4\n4 4 1 1\n''') == '4'\n\nassert solution('''\n1\n4\n4 4 2 2\n''') == '4'\n\nassert solution('''\n1\n4", "solution('''1\n4\n1 2 3 4''') == '''0'''\nassert solution('''1\n4\n4 3 2 1''') == '''5'''\nassert solution('''1\n4\n1 5 2 3''') == '''2'''\nassert solution('''1\n4\n1 2 5 3''') == '''1'''\nassert solution('''1\n4\n1 3 2 5''') == '''1'''\nassert solution('''1\n4\n2 3 1 5''') == '''3'''\nassert solution('''1\n4\n1 5 2 6''') == '''1'''\nassert solution('''1\n4\n1 2 5 6''') == '''0'''\nassert solution('''1\n4\n1 4 2 6''') == '''1'''\nassert solution('''1\n4\n2 3 1 6''') == '''2'''\nassert solution('''1\n4\n2 5 1 6''') == '''1'''\nassert solution('''1\n4\n4 2 1 6''') == '''4'''\nassert solution('''1\n4\n5 1 2 6''') == '''2'''\nassert solution('''1\n4\n5 2 1 6''')", "solution(\"\"\"4\n4\n4 2 4 4\n4\n1 2 3 4\n4\n4 3 2 1\n2\n2 3\"\"\") == \"\"\"1\n0\n0\n2\"\"\"", "solution(stdin=\"1\\n5\\n1 5 3 3 4\") == \"2\", \"An example case\"\nassert solution(stdin=\"3\\n5\\n1 1 1 1 1\\n5\\n1 5 2 4 3\\n5\\n1 2 3 4 5\") == \"0\\n1\\n0\", \"Two simple test cases\"\n\n# check the correctness of input handling\ntry:\n    assert solution(stdin=\"A\\nB\\nC\") == \"Please, provide a valid input.\"\nexcept AssertionError:\n    print(\"Wrong answer: Your program didn't handle invalid input. Try again.\")\nelse:\n    print(\"Correct answer: Input was handled correctly.\")", "solution('''2\n5\n1 3 2 2 1\n5\n3 3 4 4 4''') == '''1\n3'''\n\n# submit the code\n# print(solution(input()))", "solution(str(clue)) == str(solution_answer)\n# check the performance of solution\nassert timeit(lambda: solution(str(clue)), number=1) <= 1", "solution(\"\"\"\\\n3\n3\n3 3 4\n3\n3 2 2\n3\n1 2 3\n\"\"\") == \"\"\"\\\n1\n2\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\\\n5\n5\n5 5 5 5 5\n5\n5 5 5 5 6\n5\n5 5 5 6 6\n5\n5 5 6 6 6\n5\n5 6 6 6 6\n\"\"\") == \"\"\"\\\n0\n1\n2\n3\n4\n\"\"\"\n\nprint(\"Enter data to be processed:\")\nprint(solution(input()))", "solution(r'''3\n3\n3 3 4\n3\n2 1 2\n6\n1 1 1 1 1 1''') == r'''1\n2\n0'''"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-22.917258126855998, -75.38635275134004, -45.94158598799, -43.270465451499994, -44.53227228050001, -74.75482460604995, -55.88595350237001, -99.46855280032001, -24.766874364370004, -41.81222061849999, -21.85703070586, -13.366030675000001, -104.80016539457381, -76.65979899673842, -42.355691866629996, -78.31812327325999, -33.246513035570004, -102.70368117097996, -35.50179778873001, -133.5635711996429, -14.418690682600001, -16.966871096, -101.60071031648995, -103.29060083159102, -104.42083676010203, -35.5799283278, -32.84778316316999, -124.43704434388273, -26.27279855126, -26.343695353899996, -7.634819376100001, -29.295283074199997, -14.854019712999998, -131.543221705959, -99.55982790400503, -52.96224600536002, -131.6457440919075, -20.758186978599998, -27.75294002388, -22.934698430505012, -126.7167913660601, -17.7605356545, -95.16416859816802, -92.4743171231561, -34.821096777200005, -122.57664148152499, -39.82883156920002, -35.151059997619996, -66.93535564614, -25.410473668899996], "mean_logprob": [-0.587622003252718, -0.5754683416132824, -0.620832243080946, -0.6556131129015151, -0.7812679347456141, -0.6858240789545872, -0.6209550389152222, -0.3315618426677333, -0.5628835082811363, -0.7466467967589285, -0.5464257676465, -0.44553435583333334, -0.34933388464857934, -0.25553266332246133, -0.529446148332875, -0.4580007208962573, -0.5277224291360317, -0.5239983733213265, -1.2679213495975, -0.44521190399881, -1.0299064773285715, -0.6525719652307692, -0.3386690343883, -0.34430200277197, -0.34806945586700666, -0.7261209862816327, -0.7639019340272093, -0.4147901478129423, -0.6407999646648781, -0.6425291549731708, -0.47717621100625, -0.8137578631722222, -1.142616901, -0.4681253441493203, -0.33186609301335, -0.5349721818723232, -0.438819146973025, -0.5930910565314286, -0.4703888139640678, -0.17778835992639536, -0.42238930455353335, -0.4440133913625, -0.31721389532722666, -0.30824772374385334, -0.8097929483069768, -0.7661040092595313, -0.8297673243583333, -0.8174665115725581, -0.5032733507228572, -0.6197676504609756]}
{"prompt": "'''\nYou are given two positive integers x and y. You can perform the following operation with x: write it in its binary form without leading zeros, add 0 or 1 to the right of it, reverse the binary form and turn it into a decimal number which is assigned as the new value of x.\n\nFor example: \n\n  * 34 can be turned into 81 via one operation: the binary form of 34 is 100010, if you add 1, reverse it and remove leading zeros, you will get 1010001, which is the binary form of 81. \n  * 34 can be turned into 17 via one operation: the binary form of 34 is 100010, if you add 0, reverse it and remove leading zeros, you will get 10001, which is the binary form of 17. \n  * 81 can be turned into 69 via one operation: the binary form of 81 is 1010001, if you add 0, reverse it and remove leading zeros, you will get 1000101, which is the binary form of 69. \n  * 34 can be turned into 69 via two operations: first you turn 34 into 81 and then 81 into 69. \n\n\n\nYour task is to find out whether x can be turned into y after a certain number of operations (possibly zero).\n\nInput\n\nThe only line of the input contains two integers x and y (1 \u2264 x, y \u2264 10^{18}).\n\nOutput\n\nPrint YES if you can make x equal to y and NO if you can't.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n34 69\n''') == '''\nYES\n'''\nassert solution('''\n34 17\n''') == '''\nNO\n'''\nassert solution('''\n34 34\n''') == '''\nYES\n'''\nassert solution('''\n17 34\n''') == '''\nYES\n'''\nassert solution('''\n69 69\n''') == '''\nYES\n'''\nassert solution('''\n69 34\n''') == '''\nNO\n'''\n\nimport os\nimport time\n\n# test all test cases\nfor file in os.listdir('.'):\n    if file.startswith('input') and file.endswith('.txt'):\n        print('Testing with ' + file)\n        start = time.time()\n        with open(file) as f:\n            output = solution(f.read())\n        end = time.time()\n        with open(file.replace('input', 'output')) as f:\n            expected_output = f.read()\n        assert output == expected_output, 'Expected: ' + expected_output + ' Found: ' + output\n        print('Correct Answer')\n        print('Execution time: ' + str(end - start))\n        print('===============')", "'YES' == solution('34 17')\nassert 'YES' == solution('34 81')\nassert 'YES' == solution('34 69')\nassert 'NO' == solution('34 70')\nassert 'YES' == solution('34 17')\nassert 'YES' == solution('34 35')\nassert 'YES' == solution('34 18')\nassert 'YES' == solution('34 20')\nassert 'YES' == solution('34 22')\nassert 'YES' == solution('34 24')\nassert 'YES' == solution('34 26')\nassert 'YES' == solution('34 28')\nassert 'YES' == solution('34 30')\nassert 'YES' == solution('34 32')\nassert 'YES' == solution('34 37')\nassert 'YES' == solution('34 39')\nassert 'YES' == solution('34 41')\nassert 'YES' == solution('34 43')\nassert 'YES' == solution('34 45')\nassert 'YES' == solution('34 47')\nassert 'YES' == solution('34 49')\nassert 'YES' == solution('34 51')\nassert 'YES' == solution('34 53')\nassert 'YES' == solution('34 55')\nassert 'YES' == solution('34 57')\nassert 'YES' == solution('34 59')\nassert 'YES' == solution('34 61')\nassert 'YES'", "solution('''\n34 17\n''') == '''\nYES\n'''\n\nassert solution('''\n34 69\n''') == '''\nNO\n'''\n\nassert solution('''\n69 17\n''') == '''\nYES\n'''\n\nassert solution('''\n5 7\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1 2\n''') == '''\nNO\n'''\n\nassert solution('''\n1 3\n''') == '''\nNO\n'''\n\nassert solution('''\n1 4\n''') == '''\nNO\n'''\n\nassert solution('''\n1 5\n''') == '''\nNO\n'''\n\nassert solution('''\n1 6\n''') == '''\nNO\n'''\n\nassert solution('''\n1 7\n''') == '''\nNO\n'''\n\nassert solution('''\n1 8\n''') == '''\nNO\n'''\n\nassert solution('''\n1 9\n''') == '''\nNO\n'''\n\nassert solution('''\n1 10\n''') == '''\nNO\n'''\n\nassert solution('''\n1", "solution(stdin='''\n2 1\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n3 6\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\n1000000000000000000 1000000000000000000\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\nsolution('''\n34 17\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n34 81\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n34 69\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n34 35\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n34 10\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n34 33\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n34 34\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n34 32\n''') == '''\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n8589934593 109951162777\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''\n8589934593 34359738373\n''') == '''\nYES\n'''\n\n# check the correctness of solution\nassert solution('''", "solution('''\n34 17\n''') == '''\nYES\n'''\n\nassert solution('''\n34 81\n''') == '''\nYES\n'''\n\nassert solution('''\n1 2\n''') == '''\nNO\n'''\n\nassert solution('''\n3 7\n''') == '''\nNO\n'''\n\nassert solution('''\n100 100\n''') == '''\nYES\n'''\n\nassert solution('''\n999 1234\n''') == '''\nNO\n'''\n\nassert solution('''\n1000000000000000000 1000000000000000000\n''') == '''\nYES\n'''\n\nassert solution('''\n1000000000000000000 999999999999999999\n''') == '''\nYES\n'''\n\nassert solution('''\n999999999999999999 1000000000000000000\n''') == '''\nNO\n'''\n\nassert solution('''\n812349999999999 999999999999999\n''') == '''\nYES\n'''\n\nassert solution('''\n8123456789123456789 999999999999999999\n''') == '''\nNO\n'''\n\nassert solution('''\n717171717171717171 888888888888888888\n''') == '''\nYES", "solution('''\n5 3\n''') == '''\nNO\n'''\nassert solution('''\n9 1\n''') == '''\nYES\n'''\nassert solution('''\n1 10\n''') == '''\nNO\n'''\nassert solution('''\n7 7\n''') == '''\nYES\n'''\nassert solution('''\n1 1000000000000000000\n''') == '''\nYES\n'''\n\n# stress testing the solution\nassert solution('''\n3512332545221323423\n12444444444444444444\n''') == '''\nYES\n'''\nassert solution('''\n23423423421342342132\n34234252423423423354\n''') == '''\nNO\n'''\nassert solution('''\n6194455627881409361556\n6194455627881409361556\n''') == '''\nYES\n'''\nassert solution('''\n9483521621616462162164\n2162162162162162162165\n''') == '''\nNO\n'''\nassert solution('''\n717171717171717171717\n717171717171717171717\n''') == '''\nYES\n'''\nassert", "solution(\"\") == \"\", \"empty case: empty\"\nassert solution(\"\") == \"\", \"all same case: 1\"\nassert solution(\"\") == \"\", \"all same case: 2\"\nassert solution(\"\") == \"\", \"all same case: 3\"\nassert solution(\"\") == \"\", \"all same case: 4\"\nassert solution(\"\") == \"\", \"all same case: 5\"\nassert solution(\"\") == \"\", \"all same case: 6\"\nassert solution(\"\") == \"\", \"all same case: 7\"\nassert solution(\"\") == \"\", \"all same case: 8\"\nassert solution(\"\") == \"\", \"all same case: 9\"\nassert solution(\"\") == \"\", \"all same case: 10\"\nassert solution(\"\") == \"\", \"all same case: 11\"\nassert solution(\"\") == \"\", \"all same case: 12\"\nassert solution(\"\") == \"\", \"all same case: 13\"\nassert solution(\"\") == \"\", \"all same case: 14\"\nassert solution(\"\") == \"\", \"all same case: 15\"\nassert solution(\"\") == \"\", \"all same case: 16\"\nassert solution(\"\") == \"\", \"all same case: 17\"\nassert solution(\"\") == \"\", \"all same case: 18\"\nassert solution(\"\") == \"\", \"all same case: 19\"\nassert solution", "solution(\"34 17\") == \"YES\"\nassert solution(\"69 34\") == \"NO\"\nassert solution(\"1 100000000000000000\") == \"YES\"\nassert solution(\"6 3\") == \"YES\"\nassert solution(\"1000000000000000000 999999999999999999\") == \"YES\"\nassert solution(\"999999999999999999 666666666666666666\") == \"NO\"\nassert solution(\"123456789123456789 987654321987654321\") == \"YES\"\nassert solution(\"123456789123456789 987654321987600000\") == \"NO\"\nassert solution(\"123456789123456789 987654321987777777\") == \"NO\"\nassert solution(\"123456789123456789 987654321987654320\") == \"NO\"\nassert solution(\"123456789123456789 987654321987654322\") == \"NO\"\nassert solution(\"123456789123456789 987654321987654323\") == \"NO\"\nassert solution(\"123456789123456789 987654321987654328\") == \"NO\"\nassert solution(\"123456789123456789 987654321987654329\") == \"NO\"\nassert solution(\"123456789123456789 987654321987654330\")", "solution('''\n10 12\n''') == '''\nYES\n'''\n\nassert solution('''\n10 11\n''') == '''\nNO\n'''\n\nassert solution('''\n10 100\n''') == '''\nYES\n'''\n\nassert solution('''\n100 110\n''') == '''\nYES\n'''\n\nassert solution('''\n100 101\n''') == '''\nNO\n'''\n\nassert solution('''\n100 123\n''') == '''\nNO\n'''\n\nassert solution('''\n123 100\n''') == '''\nYES\n'''\n\nassert solution('''\n123 321\n''') == '''\nYES\n'''\n\nassert solution('''\n123 1234\n''') == '''\nYES\n'''\n\nassert solution('''\n1234 123\n''') == '''\nYES\n'''\n\nassert solution('''\n1234 4321\n''') == '''\nYES\n'''\n\nassert solution('''\n1234 4421\n''') == '''\nNO\n'''\n\nassert solution('''\n4421 1234\n''') == '''\nYES\n'''\n\nassert solution('''\n4421 4421\n''') == '''\nYES\n''", "solution(\"34 81\") == \"YES\"\nassert solution(\"81 34\") == \"NO\"\nassert solution(\"34 17\") == \"YES\"\nassert solution(\"81 69\") == \"YES\"\nassert solution(\"34 69\") == \"YES\"\nassert solution(\"1091 689\") == \"NO\"\nassert solution(\"1091 675\") == \"YES\"\nassert solution(\"67108864 67108864\") == \"YES\"\nassert solution(\"67108864 67108863\") == \"NO\"\nassert solution(\"67108863 67108864\") == \"YES\"\nassert solution(\"67108863 67108863\") == \"YES\"\nassert solution(\"4311810305 4311810305\") == \"YES\"\nassert solution(\"4311810305 4311810304\") == \"NO\"\nassert solution(\"4311810304 4311810305\") == \"YES\"\nassert solution(\"4311810304 4311810304\") == \"YES\"\nassert solution(\"536870912 536870912\") == \"YES\"\nassert solution(\"536870912 536870911\") == \"NO\"\nassert solution(\"536870911 536870912\") == \"YES\"\nassert solution(\"536870911 536870911\") == \"YES\"\nassert solution(\"268435456 268435456\") == \"YES\"", "solution('''34 17''') == 'YES'\nassert solution('''17 34''') == 'NO'\nassert solution('''16 42''') == 'YES'\nassert solution('''1769 1067''') == 'YES'\nassert solution('''18446744073709551615 1000000000000000000''') == 'NO'\nassert solution('''6172 6172''') == 'YES'\nassert solution('''6173 6173''') == 'YES'\nassert solution('''6174 6174''') == 'YES'\nassert solution('''6175 6175''') == 'YES'\nassert solution('''6176 6176''') == 'YES'\nassert solution('''6177 6177''') == 'YES'\nassert solution('''6178 6178''') == 'YES'\nassert solution('''6179 6179''') == 'YES'\nassert solution('''6180 6180''') == 'YES'\nassert solution('''6181 6181''') == 'YES'\nassert solution('''6182 6182''') == 'YES'\nassert solution('''6183 6183''') == 'YES'\nassert solution('''6184 6184''') == 'YES'\nassert solution('''6185 6185''') ==", "solution(\"34 17\") == \"YES\"\nassert solution(\"81 69\") == \"YES\"\nassert solution(\"34 69\") == \"NO\"\n\n# simulate stdin\nimport sys\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2:\n        stdin = sys.argv[1]\n    else:\n        stdin = None\n    with open(\"in.txt\", 'r') as infile:\n        inlines = infile.readlines()\n        if stdin is None:\n            stdin = \"\\n\".join(inlines)\n    with open(\"out.txt\", 'r') as outfile:\n        outlines = outfile.readlines()\n    outstr = \"\\n\".join(outlines)\n    if sys.stdin.isatty():\n        print(solution(stdin))\n    else:\n        assert solution(stdin) == outstr", "solution(test_case_0) == 'YES'\nassert solution(test_case_1) == 'NO'\nassert solution(test_case_2) == 'YES'\nassert solution(test_case_3) == 'YES'\nassert solution(test_case_4) == 'NO'", "\"YES\" == solution(\"34\\n17\")\nassert \"YES\" == solution(\"34\\n69\")\nassert \"NO\" == solution(\"34\\n9\")\nassert \"YES\" == solution(\"34\\n81\")\nassert \"YES\" == solution(\"34\\n100\")\nassert \"YES\" == solution(\"34\\n101\")\nassert \"YES\" == solution(\"34\\n102\")\nassert \"YES\" == solution(\"34\\n103\")\nassert \"YES\" == solution(\"34\\n104\")\nassert \"YES\" == solution(\"34\\n105\")\nassert \"YES\" == solution(\"34\\n106\")\nassert \"YES\" == solution(\"34\\n107\")\nassert \"YES\" == solution(\"34\\n108\")\nassert \"YES\" == solution(\"34\\n109\")\nassert \"YES\" == solution(\"34\\n110\")\nassert \"YES\" == solution(\"34\\n111\")\nassert \"YES\" == solution(\"34\\n112\")\nassert \"YES\" == solution(\"34\\n113\")\nassert \"YES\" == solution(\"34\\n114\")\nassert \"YES\" == solution(\"34\\n115\")\nassert \"YES\" == solution(\"34\\n116\")\nassert \"YES\" == solution(\"34\\n117\")\nassert \"YES\" == solution(\"34\\n118\")\nassert \"", "solution(test_data_str) == ''\nassert solution(test_data_str) == ''\nassert solution(test_data_str) == ''\nassert solution(test_data_str) == ''\nassert solution(test_data_str) == ''", "solution('''1 2''') == 'NO'\nassert solution('''34 17''') == 'YES'\nassert solution('''69 17''') == 'NO'\nassert solution('''81 69''') == 'YES'\nassert solution('''34 69''') == 'YES'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000000", "solution('''3 8''') == 'YES'\nassert solution('''8 3''') == 'NO'\nassert solution('''2 3''') == 'YES'\nassert solution('''4 4''') == 'YES'\nassert solution('''13 13''') == 'YES'\nassert solution('''0 13''') == 'YES'\nassert solution('''100000 100000''') == 'YES'\nassert solution('''100000 50000''') == 'NO'\nassert solution('''1000000000000000000 1''') == 'YES'\nassert solution('''1000000000000000000 13''') == 'YES'\nassert solution('''100000000000000000  1''') == 'YES'\nassert solution('''1000000000000000000 10000000000000000''') == 'YES'\nassert solution('''100000000000000000 100000000000000000''') == 'YES'\nassert solution('''100000000000000000 10000000000000000''') == 'YES'\nassert solution('''1000000000000000000 100000000000000000''') == 'YES'\nassert solution('''1000000000000000000  10000000000000000''') == 'YES'\nassert solution('''1000000000000000000 100000000000000000''') == 'YES'\nassert solution('''1000000000000000000 10000000000000000''') == 'YES'\nassert solution('''1", "solution(\"34 81\") == \"YES\"\nassert solution(\"34 69\") == \"NO\"\nassert solution(\"34 17\") == \"YES\"\nassert solution(\"1 100\") == \"NO\"\nassert solution(\"12345678987654321 12345678987654321\") == \"YES\"\nassert solution(\"12345678987654321 12345678987654320\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert", "solution('''\n34 17\n''') == 'YES'\nassert solution('''\n34 69\n''') == 'NO'\nassert solution('''\n1234567891011 1234567891011\n''') == 'YES'\nassert solution('''\n1234567891011 1234567891012\n''') == 'NO'\nassert solution('''\n34 17\n''') == 'YES'\nassert solution('''\n1234567891011 1234567891013\n''') == 'NO'\nassert solution('''\n1234567891011 1234567891012\n''') == 'NO'\nassert solution('''\n1234567891011 1234567891011\n''') == 'YES'\nassert solution('''\n1234567891011 1234567891012\n''') == 'NO'\nassert solution('''\n1234567891011 1234567891012\n''') == 'NO'\nassert solution('''\n1234567891011 1234567891012\n''') == 'NO'\nassert solution('''\n1234567891011 1234567891012\n''') == 'NO'\nassert solution('''\n1234567891011 1234567891012\n", "solution(\"121 18\") == \"YES\"\nassert solution(\"11 8\") == \"NO\"\nassert solution(\"9876543210 9876543211\") == \"YES\"\nassert solution(\"5 7\") == \"NO\"\nassert solution(\"1 1000000000000000000\") == \"YES\"\nassert solution(\"1000000000000000000 1\") == \"YES\"\nassert solution(\"999999999999999999 999999999999999999\") == \"NO\"\nassert solution(\"1 10\") == \"YES\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"101 101\") == \"NO\"\nassert solution(\"9 1\") == \"YES\"\nassert solution(\"1 9\") == \"YES\"\nassert solution(\"1000000000000000000 1\") == \"YES\"\nassert solution(\"1 10\") == \"YES\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"NO\"\nassert solution(\"3 9\") == \"YES\"\nassert solution(\"5 6\") == \"YES\"\nassert solution(\"1000000000000000000 999999999999999999\") == \"YES\"\nassert solution(\"999999999999999999 1000000000000000000\") == \"YES\"\nassert solution(\"1 10\") == \"YES\"\nassert solution(\"3 5\") == \"YES\"\nassert solution(\"2994278336 7881828736\") == \"YES\"\nassert solution(\"4611686018339584960 4611", "solution(\"\") == \"\"\n# put here more test cases\n\ndef __main():\n    stdin = open(\"input.txt\")\n    print(solution(stdin.read()))\n    stdin.close()\n\n__main()", "solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert solution(\"\")\nassert", "solution('''1 5''') == 'YES'\nassert solution('''0 1''') == 'YES'\nassert solution('''100000 99999''') == 'NO'\nassert solution('''123456789 987654321''') == 'YES'\nassert solution('''123456789 987654320''') == 'NO'\nassert solution('''123456789 987654322''') == 'NO'\nassert solution('''1000000000000000000 2000000000000000000''') == 'YES'\nassert solution('''1000000000000000000 2000000000000000001''') == 'NO'\nassert solution('''1000000000000000000 2000000000000000010''') == 'NO'\nassert solution('''1000000000000000000 2000000000000000100''') == 'NO'\nassert solution('''1000000000000000000 2000000000000001000''') == 'NO'\nassert solution('''1000000000000000000 2000000000000010000''') == 'NO'\nassert solution('''1000000000000000000 2000000000000100000''') == 'NO'\nassert solution('''1000000000000000000 2000000000001000000''') == 'NO'\nassert solution('''1000000000000000000 2000000000010000000''') == 'NO'\nassert solution('''1000000000000000000 2000000000100000000''') == 'NO'\nassert solution('''", "(solution('''\n34 81\n''') == '''\nYES\n''')\n\n# normalize solution\nnormalize(solution)\n\n# check timeit\nprint(timeit(solution, '''\n34 81\n'''))\n\n'''\nSample test(s)\n\nInput\n34 81\nOutput\nYES\n\nInput\n34 17\nOutput\nYES\n\nInput\n34 69\nOutput\nYES\n\nInput\n81 69\nOutput\nYES\n\nInput\n34 50\nOutput\nNO\n\nInput\n34 100\nOutput\nNO\n\nInput\n34 1000\nOutput\nNO\n\nInput\n81 17\nOutput\nNO\n\nInput\n81 50\nOutput\nNO\n\nInput\n81 100\nOutput\nNO\n\nInput\n81 1000\nOutput\nNO\n\nInput\n69 17\nOutput\nNO\n\nInput\n69 50\nOutput\nNO\n\nInput\n69 100\nOutput\nNO\n\nInput\n69 1000\nOutput\nNO\n\nInput\n1 1\nOutput\nYES\n\nInput\n1 2\nOutput\nNO\n\nInput\n1 10\nOutput\nNO\n\nInput\n1 100\nOutput\nNO\n\nInput\n1 1000\nOutput\nNO\n\nInput\n1 10000\nOutput\nNO\n\nInput\n2 3\nOutput\nNO\n\nInput\n3 4\nOutput\nNO\n\nInput", "solution(\"34 81\") == \"YES\"\nassert solution(\"34 17\") == \"YES\"\nassert solution(\"81 69\") == \"YES\"\nassert solution(\"34 69\") == \"NO\"\n\n# print the solution\nwith open(\"sol.txt\", \"w\") as f:\n    f.write(solution(open(\"input.txt\", \"r\").read()))", "solution(\"\") == \"\", \"Empty case\"\nassert solution(\"1\") == \"1\", \"Singleton case\"\n\n# show solution details\n#! cat /tmp/solution.py\n\n#! echo \"import sys; print(solution(sys.stdin.read().strip()))\" > /tmp/run.py\n#! python /tmp/run.py <<EOF\n#! 34 81\n#! EOF\n#! echo $?", "solution(\"\"\"\n10 9\n\"\"\") == \"\"\"\nYES\n\"\"\", \"1st example\"\n\nassert solution(\"\"\"\n10 10\n\"\"\") == \"\"\"\nYES\n\"\"\", \"2nd example\"\n\nassert solution(\"\"\"\n10 8\n\"\"\") == \"\"\"\nNO\n\"\"\", \"3rd example\"\n\nassert solution(\"\"\"\n10 7\n\"\"\") == \"\"\"\nNO\n\"\"\", \"4th example\"\n\nassert solution(\"\"\"\n1 1\n\"\"\") == \"\"\"\nYES\n\"\"\", \"5th example\"\n\nassert solution(\"\"\"\n9999999999999 99\n\"\"\") == \"\"\"\nYES\n\"\"\", \"6th example\"\n\nassert solution(\"\"\"\n1 1000000000000000000\n\"\"\") == \"\"\"\nNO\n\"\"\", \"7th example\"\n\nassert solution(\"\"\"\n4 5\n\"\"\") == \"\"\"\nYES\n\"\"\", \"8th example\"\n\nassert solution(\"\"\"\n4 12\n\"\"\") == \"\"\"\nYES\n\"\"\", \"9th example\"\n\nassert solution(\"\"\"\n1000000000000000000 99999999999999999\n\"\"\") == \"\"\"\nYES\n\"\"\", \"10th example\"\n\nassert solution(\"\"\"\n999999999999999999 999999999999999999\n\"\"\") == \"\"\"\nYES\n\"\"\", \"11th example\"\n\nassert solution(\"\"\"\n999999999999999999 999999999999999998\n\"\"", "solution(\"\"\"\n34 17\n\"\"\") == \"\"\"\nYES\n\"\"\", \"test1\"\n\nassert solution(\"\"\"\n34 69\n\"\"\") == \"\"\"\nNO\n\"\"\", \"test2\"\n\nassert solution(\"\"\"\n34 81\n\"\"\") == \"\"\"\nYES\n\"\"\", \"test3\"\n\nassert solution(\"\"\"\n34 34\n\"\"\") == \"\"\"\nYES\n\"\"\", \"test4\"\n\nassert solution(\"\"\"\n81 69\n\"\"\") == \"\"\"\nYES\n\"\"\", \"test5\"\n\nassert solution(\"\"\"\n81 69\n\"\"\") == \"\"\"\nYES\n\"\"\", \"test6\"\n\nassert solution(\"\"\"\n4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", "solution(\"16 8\") == \"YES\"\nassert solution(\"15 4\") == \"NO\"\nassert solution(\"1 1000000000000000000\") == \"YES\"\nassert solution(\"4000000000 1000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"YES\"\nassert solution(\"1000000000000000000 2000000000000000000\") == \"NO\"\nassert solution(\"1000000000000000000 2000000000000000000\") == \"NO\"\nassert solution(\"3481 1144\") == \"YES\"\nassert solution(\"1 40\") == \"NO\"\nassert solution(\"2583 121803\") == \"YES\"\nassert solution(\"23 10\") == \"YES\"\nassert solution(\"71 998\") == \"YES\"\nassert solution(\"974 15\") == \"YES\"\nassert solution(\"1 9223372036854775807\") == \"YES\"\nassert solution(\"1 9223372036854775808\") == \"NO\"\nassert solution(\"19073486328126 1\") == \"YES\"\nassert solution(\"1 19073486328125\") == \"YES\"\nassert solution(\"19073486328126 19073486328125\") == \"YES\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555", "solution(\"1 10\") == \"YES\"\nassert solution(\"10 1\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"2225 2059\") == \"YES\"\nassert solution(\"2225 2060\") == \"NO\"\nassert solution(\"12345678987654321 98765432123456789\") == \"YES\"\nassert solution(\"12345678987654321 98765432123456788\") == \"NO\"\nassert solution(\"12345678987654321 98765432123456780\") == \"NO\"\nassert solution(\"47 1101001\") == \"YES\"\nassert solution(\"47 1101000\") == \"NO\"\nassert solution(\"12345678987654321 000000000000000000\") == \"YES\"\nassert solution(\"12345678987654321 111111111111111111\") == \"YES\"\nassert solution(\"12345678987654321 1000000000000000000\") == \"YES\"\nassert solution(\"12345678987654321 111111111111111110\") == \"NO\"\nassert solution(\"12345678987654321 1000000000000000001\") == \"NO\"\nassert solution(\"12345678987654321 100000000000000000\") == \"NO\"\nassert solution(\"999999999999999999 999999999999999999\") == \"YES\"\nassert solution(\"999999999999", "solution(\"4 6\") == \"YES\"\nassert solution(\"6 4\") == \"NO\"\nassert solution(\"1 34\") == \"YES\"\nassert solution(\"34 1\") == \"NO\"\nassert solution(\"80 69\") == \"YES\"\nassert solution(\"16 33\") == \"NO\"\nassert solution(\"1087 1087\") == \"YES\"\nassert solution(\"69 69\") == \"YES\"\nassert solution(\"37 37\") == \"YES\"\nassert solution(\"32 32\") == \"YES\"\nassert solution(\"17 17\") == \"YES\"\nassert solution(\"35 35\") == \"YES\"\nassert solution(\"81 81\") == \"YES\"\nassert solution(\"2048 1000000\") == \"YES\"\nassert solution(\"131072 699056\") == \"YES\"\nassert solution(\"1048576 5242880\") == \"YES\"\nassert solution(\"8388608 41943040\") == \"YES\"\nassert solution(\"67108864 335544320\") == \"YES\"\nassert solution(\"536870912 2684354560\") == \"YES\"\nassert solution(\"4294967296 21474836480\") == \"YES\"\nassert solution(\"34359738368 171798691840\") == \"YES\"\nassert solution(\"274877906944 1374389534720\") == \"YES\"\nassert", "solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert solution(\"Input\") == \"Output\"\nassert", "solution('''\n4512 3044\n''') == 'YES', 'Test 1'\n\nassert solution('''\n3774 3432\n''') == 'NO', 'Test 2'\n\nassert solution('''\n1729 1848\n''') == 'YES', 'Test 3'\n\nassert solution('''\n1164 714\n''') == 'NO', 'Test 4'\n\nassert solution('''\n4538 4524\n''') == 'YES', 'Test 5'\n\nassert solution('''\n713 313\n''') == 'YES', 'Test 6'\n\nassert solution('''\n1628 1368\n''') == 'YES', 'Test 7'\n\nassert solution('''\n5702 4296\n''') == 'YES', 'Test 8'\n\nassert solution('''\n7166 4366\n''') == 'YES', 'Test 9'\n\nassert solution('''\n7437 3535\n''') == 'YES', 'Test 10'\n\n# compete\nsolution('1584 6086')", "solution('''1 1''') == 'YES'\nassert solution('''69 34''') == 'NO'\nassert solution('''69 81''') == 'YES'\nassert solution('''1 10''') == 'NO'\nassert solution('''10 1''') == 'YES'\nassert solution('''10000000000 1000000000''') == 'YES'\nassert solution('''1000000000000000000 100000000000000000''') == 'YES'\nassert solution('''1000000000000000000 1000000000000000000''') == 'NO'\nassert solution('''1000000000000000000 1000000000000000001''') == 'YES'\nassert solution('''1000000000000000000 999999999999999999''') == 'YES'\nassert solution('''1000000000000000000 999999999999999998''') == 'YES'\nassert solution('''1000000000000000000 999999999999999997''') == 'YES'\nassert solution('''1000000000000000000 999999999999999996''') == 'YES'\nassert solution('''1000000000000000000 999999999999999995''') == 'YES'\nassert solution('''1000000000000000000 999999999999999994''') == 'YES'\nassert solution('''1000000000000000000 999999999999999993''') == 'YES'\nassert solution('''1000000000000000000 99999999999999999", "solution(r'81 17') == 'YES', 'Test #1 failed!'\nassert solution(r'17 81') == 'NO', 'Test #2 failed!'\nassert solution(r'17 34') == 'YES', 'Test #3 failed!'\nassert solution(r'34 17') == 'YES', 'Test #4 failed!'\nassert solution(r'1 2') == 'NO', 'Test #5 failed!'\nassert solution(r'1 1') == 'YES', 'Test #6 failed!'\nassert solution(r'2048 8192') == 'YES', 'Test #7 failed!'\nassert solution(r'2048 1024') == 'NO', 'Test #8 failed!'\nassert solution(r'1000000000000000000 1000000000000000000') == 'YES', 'Test #9 failed!'\nassert solution(r'1000000000000000000 9999999999999999999') == 'NO', 'Test #10 failed!'", "solution(\"34 17\") == \"YES\"\nassert solution(\"34 81\") == \"YES\"\nassert solution(\"34 69\") == \"YES\"\nassert solution(\"48 4\") == \"NO\"\nassert solution(\"76 8\") == \"NO\"\nassert solution(\"57 62\") == \"NO\"\nassert solution(\"1 10\") == \"NO\"\nassert solution(\"1 5\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"1 8\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"1 6\") == \"NO\"\nassert solution(\"1 9\") == \"NO\"\nassert solution(\"1 7\") == \"NO\"\nassert solution(\"1 5\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"1 8\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"1 6\") == \"NO\"\nassert solution(\"1 9\") == \"NO\"\nassert solution(\"1 7\") == \"NO\"\nassert solution(\"1 5\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"1 8\") == \"NO\"\nassert solution(\"1", "solution(\"34 17\") == \"YES\"\nassert solution(\"34 81\") == \"YES\"\nassert solution(\"34 69\") == \"YES\"\nassert solution(\"35 81\") == \"NO\"\nassert solution(\"1001 12\") == \"YES\"\nassert solution(\"1734 1741\") == \"YES\"\nassert solution(\"1000000000 1000000001\") == \"YES\"\nassert solution(\"1000000000000000000 1000000000000000000\") == \"YES\"\nassert solution(\"100000000000001 1111111111111\") == \"YES\"\nassert solution(\"1000000000000000000000000000000000000000000001 10\") == \"NO\"\nassert solution(\"1000000000000000000000000000000000000000000001 1000000000000000000000000000000000000000000000000\") == \"NO\"\nassert solutionsolution(\"69 17\") == \"YES\"\nassert solution(\"69 81\") == \"NO\"\nassert solution(\"6090 6091\") == \"YES\"\nassert solution(\"17 34\") == \"YES\"\nassert solution(\"17 69\") == \"NO\"\nassert solution(\"81 17\") == \"NO\"\nassert solution(\"17 81\") == \"YES\"\nassert solution(\"17 68\") == \"NO\"\nassert solution(\"17 68\") == \"NO\"\nassert solution(\"68 17\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"2 4\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"3 6\") == \"YES\"\nassert solution(\"4 6\") == \"YES\"\nassert solution(\"5 6\") == \"YES\"\nassert solution(\"5 7\") == \"YES\"\nassert solution(\"5 8\") == \"YES\"\nassert solution(\"6 8\") == \"YES\"\nassert solution(\"6 12\") == \"YES\"\nassert solution(\"7 12\") == \"YES\"\nassert solution(\"7 14\") == \"YES\"\nassert solution(\"8 14\") == \"YES\"\nassert solution(\"8 16\") == \"YES\"\nassert solution(\"9 16\") == \"YES\"\nassert solution(\"9 18\") == \"YES\"\nassert", "solution('''34 81''') == 'YES'\nassert solution('''34 17''') == 'YES'\nassert solution('''81 69''') == 'YES'\nassert solution('''34 69''') == 'NO'", "solution('''\n1 2\n''') == '''\nYES\n'''\n\nassert solution('''\n10 2\n''') == '''\nNO\n'''\n\nassert solution('''\n1234567891 2\n''') == '''\nYES\n'''\n\nassert solution('''\n1000000000000000000 2\n''') == '''\nYES\n'''\n\nassert solution('''\n1000000000000000000 1000000000000000001\n''') == '''\nYES\n'''\n\nassert solution('''\n1000000000000000000  1000000000000000000\n''') == '''\nNO\n'''", "solution('''34 81''') == 'YES'\nassert solution('''34 17''') == 'YES'\nassert solution('''81 69''') == 'YES'\nassert solution('''34 69''') == 'NO'", "solution('''\n34 81\n''') == '''\nYES\n'''\nassert solution('''\n34 69\n''') == '''\nYES\n'''\nassert solution('''\n34 17\n''') == '''\nYES\n'''\nassert solution('''\n34 18\n''') == '''\nNO\n'''\nassert solution('''\n34 40\n''') == '''\nNO\n'''", "solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 4\n''') == 'NO'\nassert solution('''\n10 12\n''') == 'YES'\nassert solution('''\n11 12\n''') == 'NO'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == 'YES'\nassert solution('''\n2 3\n''') == '", "solution('''\n34 17\n''') == 'YES'\nassert solution('''\n10 6\n''') == 'NO'\nassert solution('''\n10 10\n''') == 'YES'\nassert solution('''\n99999999991734 9999999999934\n''') == 'YES'\nassert solution('''\n99999999991734 9999999999969\n''') == 'NO'\nassert solution('''\n99999999991734 9999999999917\n''') == 'YES'\nassert solution('''\n99999999996934 9999999999934\n''') == 'YES'\nassert solution('''\n99999999996934 9999999999969\n''') == 'YES'\nassert solution('''\n99999999996934 9999999999917\n''') == 'YES'\nassert solution('''\n9999999999991734 999999999999934\n''') == 'YES'\nassert solution('''\n9999999999991734 999999999999969\n''') == 'NO'\nassert solution('''\n9999999999991734 999999999999917\n''') == 'YES'\nassert solution('''\n9999999999996934 999999999999934\n''') == 'YES'\nassert solution('''\n9999999999996934 99999", "solution('''\n34 69\n''') == '''\nYES\n'''\n\nassert solution('''\n1 99999999999999999\n''') == '''\nNO\n'''\n\nassert solution('''\n17 34\n''') == '''\nYES\n'''\n\nassert solution('''\n5 5\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution('''\n1 1\n''') == '''\nYES\n'''\n\nassert solution(", "solution('''3 4''') == 'YES'\nassert solution('''4 3''') == 'NO'\nassert solution('''4 4''') == 'YES'\nassert solution('''5 6''') == 'YES'\nassert solution('''5 7''') == 'NO'\nassert solution('''5 8''') == 'YES'\nassert solution('''5 9''') == 'YES'\nassert solution('''5 10''') == 'YES'\nassert solution('''5 11''') == 'YES'\nassert solution('''5 12''') == 'YES'\nassert solution('''5 13''') == 'YES'\nassert solution('''5 14''') == 'YES'\nassert solution('''5 15''') == 'YES'\nassert solution('''5 16''') == 'YES'\nassert solution('''5 17''') == 'YES'\nassert solution('''5 18''') == 'YES'\nassert solution('''5 19''') == 'YES'\nassert solution('''5 20''') == 'YES'\nassert solution('''5 21''') == 'YES'\nassert solution('''5 22''') == 'YES'\nassert solution('''5 23''') == 'YES'\nassert solution('''5 24", "solution(\"34 17\") == \"YES\"\nassert solution(\"34 81\") == \"YES\"\nassert solution(\"34 69\") == \"YES\"\nassert solution(\"34 100\") == \"NO\"\nassert solution(\"34 10100\") == \"NO\"\nassert solution(\"34 1000000000000000001\") == \"NO\"\nassert solution(\"34 10000000000000000001\") == \"NO\"\nassert solution(\"34 1000000000000000000\") == \"NO\"\nassert solution(\"34 1000000000000000000000000000000\") == \"NO\"\nassert solution(\"34 1000000000000000000000000000001\") == \"NO\"\nassert solution(\"34 10000000000000000000000000000001\") == \"NO\"\nassert solution(\"34 100000000000000000000000000000001\") == \"NO\"\nassert solution(\"34 1000000000000000000000000000000001\") == \"NO\"\nassert solution(\"34 10000000000000000000000000000000001\") == \"NO\"\nassert solution(\"34 1000000000000000000000000000000000000000000000000\") == \"NO\"\nassert solution(\"34 1000000000000000000000000000000000000000000000001\") == \"NO\"\nassert solution(\"34 10000000000000000000000000000000000000000000000001\") == \"NO\"\nassert solution(\"34 100000000000000000000000000000000000000000000000001\") == \"NO\"\nassert solution(\"34 10000000000000000000000000000000000000000000000000000000000000000\") == \"NO\"\nassert solution(\"34 10000000000000000000000000000000000000000000000000000000000000001\") == \"NO\"\nassert solution(\"34 100000000000000000000000000000000000000000000000000000000000000001\") == \"NO\"\nassert solution(\"34 100", "solution('''34 81''') == 'YES'\nassert solution('''34 17''') == 'YES'\nassert solution('''17 34''') == 'NO'\nassert solution('''81 34''') == 'NO'\nassert solution('''81 69''') == 'YES'\nassert solution('''69 81''') == 'NO'\nassert solution('''34 69''') == 'YES'\nassert solution('''101 82''') == 'YES'\nassert solution('''123 456''') == 'NO'\nassert solution('''9876543210 9876543210''') == 'YES'\nassert solution('''9539646824 6946114423''') == 'YES'\nassert solution('''9155693214 7781777595''') == 'YES'\nassert solution('''2345678987 5432167890''') == 'YES'\nassert solution('''4561234567 6789032154''') == 'YES'\nassert solution('''9876543210 1234567890''') == 'YES'\nassert solution('''4561234567 5678901234''') == 'YES'\nassert solution('''2345678987 9876543210''') == 'YES'\nassert solution('''", "solution('''34 17''') == 'YES'\nassert solution('''34 81''') == 'YES'\nassert solution('''34 69''') == 'YES'\nassert solution('''81 69''') == 'YES'\nassert solution('''18 45''') == 'NO'\nassert solution('''1 9''') == 'NO'\nassert solution('''1 5''') == 'NO'\nassert solution('''10 20''') == 'NO'\nassert solution('''10000000000 17''') == 'YES'\nassert solution('''10000000000 81''') == 'YES'\nassert solution('''10000000000 69''') == 'YES'\nassert solution('''10000000000 45''') == 'NO'\nassert solution('''10000000000 9''') == 'NO'\nassert solution('''10000000000 5''') == 'NO'\nassert solution('''10000000000 20''') == 'NO'\nassert solution('''1000000000000000000 17''') == 'YES'\nassert solution('''1000000000000000000 81''') == 'YES'\nassert solution('''1000000000000000000 69''') == 'YES'\nassert solution('''1000000000000000000 45''') == 'NO'\nassert solution('''1000000000000000000 9''') == '"], "finish_reason": ["stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "stop", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "length", "length", "length"], "sum_logprob": [-100.16014371953095, -46.925717902262946, -39.58364334240835, -41.32968658597798, -63.17725872936782, -109.38290639972053, -277.39172509211994, -42.773024017759965, -90.33182296706002, -70.92963554908705, -88.22182872859196, -76.80962228324104, -83.80933622594, -18.247722804624, -40.39926729116903, -26.182909875546002, -34.907219455876, -112.90728303236313, -46.423970210488996, -50.739317881968994, -218.55791275677018, -46.44765983196999, -16.28852249049001, -55.98410887537598, -113.47361643541538, -26.70219282581, -78.80034970046701, -87.98725121677504, -49.88240123880397, -210.00684993652015, -121.95372960740008, -136.0581158549, -18.212655913090003, -237.6088286077868, -56.241783917740925, -66.84195636019005, -80.31064209622399, -102.25622391598998, -102.33739153449298, -9.091424450494, -48.79516903325097, -9.091422442494, -25.602276931005996, -36.68672979787901, -74.70996607524904, -42.94515841465905, -32.00114195093896, -65.67392694586397, -201.8527909746298, -64.5097860706], "mean_logprob": [-0.3395259109136644, -0.15641905967421, -0.131945477808028, -0.13776562195326, -0.210590862431226, -0.36460968799906834, -0.9246390836404, -0.14257674672586668, -0.30110607655686666, -0.23643211849695667, -0.29407276242864, -0.25603207427747, -0.3972006456205687, -0.2644597507916522, -0.13466422430389666, -0.4437781334838305, -0.11635739818625333, -0.37635761010787666, -0.15474656736829667, -0.16913105960656333, -0.7285263758559, -0.8445029060358181, -0.0542950749683, -0.18661369625125335, -0.3782453881180513, -0.3178832479263095, -0.7576956701967981, -0.29329083738925, -0.16627467079601332, -0.7000228331217333, -0.40651243202466664, -0.45352705284966666, -0.06070885304363333, -0.9941791991957607, -0.18747261305913668, -0.3309007740603465, -0.2677021403207467, -0.3408540797199667, -0.34112463844831, -0.1652986263726182, -0.3510443815341799, -0.16529858986352727, -0.2586088578889495, -0.12228909932626333, -0.24903322025083, -0.14315052804886333, -0.10667047316979666, -0.21891308981954666, -0.6728426365821, -0.21503262023533332]}
{"prompt": "'''\nMonocarp plays a computer game (yet again!). This game has a unique trading mechanics.\n\nTo trade with a character, Monocarp has to choose one of the items he possesses and trade it for some item the other character possesses. Each item has an integer price. If Monocarp's chosen item has price x, then he can trade it for any item (exactly one item) with price not greater than x+k.\n\nMonocarp initially has n items, the price of the i-th item he has is a_i. The character Monocarp is trading with has m items, the price of the i-th item they have is b_i. Monocarp can trade with this character as many times as he wants (possibly even zero times), each time exchanging one of his items with one of the other character's items according to the aforementioned constraints. Note that if Monocarp gets some item during an exchange, he can trade it for another item (since now the item belongs to him), and vice versa: if Monocarp trades one of his items for another item, he can get his item back by trading something for it.\n\nYou have to answer q queries. Each query consists of one integer, which is the value of k, and asks you to calculate the maximum possible total cost of items Monocarp can have after some sequence of trades, assuming that he can trade an item of cost x for an item of cost not greater than x+k during each trade. Note that the queries are independent: the trades do not actually occur, Monocarp only wants to calculate the maximum total cost he can get.\n\nInput\n\nThe first line contains three integers n, m and q (1 \u2264 n, m, q \u2264 2 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the prices of the items Monocarp has.\n\nThe third line contains m integers b_1, b_2, ..., b_m (1 \u2264 b_i \u2264 10^9) \u2014 the prices of the items the other character has.\n\nThe fourth line contains q integers, where the i-th integer is the value of k for the i-th query (0 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each query, print one integer \u2014 the maximum possible total cost of items Monocarp can have after some sequence of trades, given the value of k from the query.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3 4 3\n1 3 5\n2 3 4 5\n2 3 4\n''') == '''\n16\n14\n12\n'''\n\n# get the input\ninput = open(\"input.txt\", \"r\")\ntext = input.read()\n\n# write the output\noutput = open(\"output.txt\", \"w\")\noutput.write(solution(text))\noutput.close()", "solution('''4\n1 2 3 4\n4 3 2 1\n1\n''') == '10'\nassert solution('''4\n1 2 3 4\n4 3 2 1\n1\n1\n''') == '10\\n10'\nassert solution('''4\n1 2 3 4\n4 3 2 1\n1\n1\n1\n''') == '10\\n10\\n10'\nassert solution('''4\n1 2 3 4\n4 3 2 1\n1\n1\n1\n1\n''') == '10\\n10\\n10\\n10'\nassert solution('''4\n1 2 3 4\n4 3 2 1\n1\n1\n1\n1\n1\n''') == '10\\n10\\n10\\n10\\n10'\nassert solution('''4\n1 2 3 4\n4 3 2 1\n1\n1\n1\n1\n1\n1\n''') == '10\\n10\\n10\\n10\\n10\\n10'\nassert solution('''4\n1 2 3 4\n4 3 2 1\n1\n1\n1\n1\n1\n1\n1\n''') == '10\\n10\\n10\\n10\\n10\\n10\\n10'\nassert solution('''4\n1 2 3 4\n4 3", "solution('''4 2 5\n3 6 8 7\n2 5\n2 1 3 3 3\n''') == '''17\n17\n16\n15\n14\n'''", "solution(\"\"\"\n4 4 4\n1 5 3 6\n2 3 4 5\n0 1 2 3\n\"\"\") == \"\"\"\n16\n17\n18\n19\n\"\"\"", "solution('''\n3 3 2\n1 2 3\n3 2 1\n1 10\n''') == '''\n6\n9\n'''\n\n# get input for autograder\ndef get_input() -> str:\n    lines = []\n    for _ in range(4):\n        lines.append(input())\n    return '\\n'.join(lines)\n\n# this is a template for a python3 script\ndef main():\n    # parse the input\n    #lines = get_input()\n    lines = lines = '''\n    3 3 2\n    1 2 3\n    3 2 1\n    1 10\n    '''\n    # call solution function\n    result = solution(lines)\n    # output result\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "solution(\"6 4 4\\n3 2 1 7 5 8\\n2 3 9 1\\n0\\n2\\n7\\n8\") == \"20\\n32\\n38\\n44\", \"Wrong answer\"\nassert solution(\"5 4 4\\n1 2 3 4 5\\n5 4 3 2 1\\n0\\n1\\n2\\n3\") == \"15\\n15\\n15\\n15\", \"Wrong answer\"\nassert solution(\"10 10 7\\n253707244 551935378 684308229 988336482 239064961 616233656 630192732 538376076 685989747 228023741\\n342094754 12946066 538507467 317270828 239869387 31195600 649189047 439394260 534015473 426967361\\n0\\n1\\n2\\n3\\n4\\n5\\n6\") == \"353335959\\n419968627\\n419968627\\n419968627\\n419968627\\n419968627\\n419968627\", \"Wrong answer\"\nassert solution(\"7 7 7\\n216681059 799082098 380909491 766503839 853581317", "solution('''\n5 5 5\n1 2 3 4 5\n2 3 4 5 6\n0 1 2 3 4\n''') == '''\n15\n16\n15\n16\n15\n'''\n\n# check the correctness of solution\nassert solution('''\n2 3 5\n1 1\n1 2 3\n0 1 2 3 4\n''') == '''\n2\n2\n2\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3 3 5\n3 2 1\n2 3 3\n0 1 2 3 4\n''') == '''\n9\n9\n9\n9\n9\n'''\n\n# check the correctness of solution\nassert solution('''\n4 4 6\n3 2 1 1\n2 3 3 3\n1 2 3 4 5\n''') == '''\n7\n7\n8\n8\n8\n8\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 1\n100\n100\n100\n''') == '''\n100\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 6\n100\n100\n0 1 2 3 4 5\n''') == '''\n100\n100\n100\n100\n100\n100\n'''\n\n# check the correctness of solution\nassert solution('''", "solution(\"\"\"3 3 3\n2 3 3\n1 2 3\n1 0 1\n\"\"\") == \"\"\"\n6\n5\n6\n\"\"\"\n\nassert solution(\"\"\"5 3 3\n5 3 1 7 2\n5 4 2\n1 0 1\n\"\"\") == \"\"\"\n14\n14\n14\n\"\"\"\n\nassert solution(\"\"\"5 5 4\n4 2 5 6 2\n4 3 2 1 1\n1 2 3 4\n\"\"\") == \"\"\"\n11\n12\n13\n15\n\"\"\"", "solution(input_str) == output_str\n \n# check the performance of solution\nassert timeit.timeit(lambda: solution(input_str), number=100) <= 0.5\n \n# check if solution gives the same output for same input\nassert solution(input_str) == solution(input_str)", "solution(\"\") == \"\", \"Test case #1\"\nassert solution(\"\") == \"\", \"Test case #2\"\nassert solution(\"\") == \"\", \"Test case #3\"\nassert solution(\"\") == \"\", \"Test case #4\"\nassert solution(\"\") == \"\", \"Test case #5\"\n\nprint(\"All tests have passed.\")", "(solution(r\"\"\"3 2 4\n1 2 3\n3 4\n3 4 1 0\n\"\"\") == r\"\"\"5\n5\n5\n5\n\"\"\")\n#assert (solution(r\"\"\"3 2 4\n1 2 3\n3 4\n3 4 1 0\n\"\"\") == r\"\"\"5\n5\n5\n5\n\"\"\")", "solution(\"\"\"\n5 4 5\n5 7 10 10 20\n5 8 5 8 9\n0 3 3 3 5\n\"\"\") == \"\"\"\n38\n38\n38\n48\n\"\"\"\n\nassert solution(\"\"\"\n3 1 2\n1 2 2\n1\n3 1\n\"\"\") == \"\"\"\n3\n6\n\"\"\"\n\n# check the performance of solution\nfrom datetime import datetime\nimport random\nrandom.seed(datetime.now())\nn = 2 * 10 ** 5\nm = 2 * 10 ** 5\nq = 2 * 10 ** 5\nprint(\"n, m, q =\", n, m, q)\nprint(\"creating input data\")\nstdin = str(n) + ' ' + str(m) + ' ' + str(q) + '\\n'\nstdin += ' '.join([str(random.randint(1, 10 ** 9)) for _ in range(n)]) + '\\n'\nstdin += ' '.join([str(random.randint(1, 10 ** 9)) for _ in range(m)]) + '\\n'\nstdin += ' '.join([str(random.randint(0, 10 ** 9)) for _ in range(q)]) + '\\n'\nprint(\"solving\")\nstart = datetime.now()\nassert solution(stdin)\nend", "solution('''\n3 4 2\n1 2 3\n3 4 5 6\n0 2\n''') == '''\n9\n12\n'''\n\n'''\nConstraints\n\n1 \u2264 n, m, q \u2264 2 \u22c5 10^5\n1 \u2264 a_i \u2264 10^9\n1 \u2264 b_i \u2264 10^9\n0 \u2264 k \u2264 10^9\n'''", "solution('''\n4 2 2\n4 2 8 5\n4 2\n0 10\n''') == '''\n12\n15\n'''\nassert solution('''\n2 3 1\n1 5\n1 2 3\n0\n''') == '''\n5\n'''\nassert solution('''\n3 1 1\n1 2 3\n1\n3\n''') == '''\n3\n'''\nassert solution('''\n1 2 3\n1 2 3\n1 2 3\n0 1 2\n''') == '''\n1\n3\n6\n'''\nassert solution('''\n1 1 1\n1\n1\n0\n''') == '''\n1\n'''\nassert solution('''\n2 3 1\n0 0\n0 0 0\n1000000000\n''') == '''\n0\n'''\nassert solution('''\n10 6 4\n904359721 252070625 716108423 805852741 983981744 876132422 604159959 925791930 860380527 325144908\n529286567 312819544 314172488 896113609 898981452\n735942401 637502774 958018675 850107468\n4\n''') == '''\n4058340", "solution('''\n3 3 3\n1 2 3\n1 2 3\n0 1 2\n''') == '''\n6\n8\n10\n'''\nassert solution('''\n3 3 3\n1 2 3\n1 2 3\n3 3 3\n''') == '''\n7\n9\n11\n'''\nassert solution('''\n4 2 2\n1 2 4 7\n4 10\n5 10\n''') == '''\n18\n21\n'''\n\nprint('All tests OK')", "solution('''\n4 5 3\n1 2 3 4\n4 3 2 1\n2 3 5\n''') == '''\n27\n19\n27\n'''\n# check the correctness of solution\nassert solution('''\n1 1 1\n6\n7\n6\n''') == '''\n6\n'''\n# check the correctness of solution\nassert solution('''\n1 2 3\n7 3 9\n1 2 3\n2 3 9\n''') == '''\n19\n16\n'''\n# check the correctness of solution\nassert solution('''\n1 2 3\n9 3 1\n1 2 3\n2 3 9\n''') == '''\n19\n16\n'''\n# check the correctness of solution\nassert solution('''\n1 2 3\n9 3 1\n1 2 3\n2 3 1\n''') == '''\n16\n13\n'''\n# check the correctness of solution\nassert solution('''\n1 1 1\n6\n7\n6\n''') == '''\n6\n'''\n# check the correctness of solution\nassert solution('''\n2 2 3\n5 2\n3 4\n2 5\n''') == '''\n8\n6\n7\n'''\n\n# check the correctness of solution\nassert solution('''\n5 5 4\n5 1 3 2 4\n5 4 3", "solution('''\n1 1 2\n1\n2\n0 1\n''') == '''\n1\n3\n'''\n\n# test data for local testing.\ntest_data = '''\n4 3 4\n1 1 1 1\n1 2 3\n0 1 3 5\n'''\n\n# prints the output of the above test data.\nprint(solution(test_data))", "solution(\"\"\"\n6 5 5\n6 7 1 2 6 1\n5 7 7 2 1\n1 2 3 4 5\n\"\"\") == \"\"\"\n20\n18\n14\n11\n6\n\"\"\"\nassert solution(\"\"\"\n4 3 3\n4 3 3 2\n1 4 3\n2 3 4\n\"\"\") == \"\"\"\n9\n7\n5\n\"\"\"\nassert solution(\"\"\"\n1 6 1\n3\n3 1 5 6 4 4\n5\n\"\"\") == \"\"\"\n4\n\"\"\"\nassert solution(\"\"\"\n5 3 3\n4 3 1 2 1\n2 2 2\n2 2 2\n\"\"\") == \"\"\"\n7\n6\n3\n\"\"\"\nassert solution(\"\"\"\n3 4 4\n1 2 3\n3 4 5 6\n1 2 3 4\n\"\"\") == \"\"\"\n6\n6\n7\n7\n\"\"\"\nassert solution(\"\"\"\n6 5 5\n6 7 1 2 6 1\n5 7 7 2 1\n1 2 3 4 5\n\"\"\") == \"\"\"\n20\n18\n14\n11\n6\n\"\"\"\nassert solution(\"\"\"\n3 4 4\n1 2 3\n3 4 5 6\n1 2 3 4\n\"\"\") == \"\"\"\n6\n6\n7\n7\n\"\"\"\nassert solution(\"\"\"\n4 3 3\n4 3 3 2\n1 4 3\n2 3 4\n\"\"\") == \"\"\"\n9\n7\n5\n\"\"\"\n", "solution('''\n4 3 3\n3 1 5 4\n4 2 1\n0 5 10\n''') == '''\n21\n24\n30\n'''\n\nassert solution('''\n5 5 5\n5 2 7 5 5\n5 4 1 2 7\n2 3 4 1 4\n''') == '''\n19\n21\n25\n24\n28\n'''\n\n# print the solution\nwith open('Algo_Weekly_02/Algo_Weekly_02_03.txt', 'r') as f:\n    # read the input\n    stdin = f.read()\n    \n    # solve the problem\n    solution = solution(stdin)\n    \n    # print the result\n    print(solution)", "solution('''\n2 3 3\n1 4\n2 3 5\n0 4 100\n''') == '''\n7\n7\n11\n'''\nassert solution('''\n1 1 1\n10\n9\n0\n''') == '''\n10\n'''\nassert solution('''\n2 2 1\n1 2\n1 2\n0\n''') == '''\n3\n'''\nassert solution('''\n5 5 1\n1 1 1 1 1\n1 1 1 1 1\n1\n''') == '''\n5\n'''\nassert solution('''\n5 4 4\n1 1 1 1 1\n1 1 1 1\n0 1 2 3\n''') == '''\n5\n5\n5\n5\n'''\nassert solution('''\n3 4 6\n1 3 3\n1 3 3 3\n0 0 0 0 0 0\n''') == '''\n6\n6\n6\n6\n6\n6\n'''\nassert solution('''\n4 2 5\n1 2 3 4\n1 2\n0 0 0 0 0\n''') == '''\n4\n4\n4\n4\n4\n'''\nassert solution('''\n1 2 4\n7\n4 5\n0 0 0 0\n''') == '''\n7\n7\n7\n7\n'''\nassert solution(''", "solution('''\n3 4 1\n1 2 3\n3 2 1 2\n1\n''') == '10'\n\n# validate on testdata\nimport random\nimport sys\n\ntestdata = '''\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 1 1 1 1 1 1 1 1 1\n10 9 8 7 6 5 4 3 2 1\n10 10 10 10 10 10 10 10 10 10\n1 1 1 1 1 1 1 1 1 1\n'''\n\nlines = [line.strip() for line in testdata.splitlines()]\n\nfor a in zip(*[iter(lines)] * 3):\n    print(a)\n    nums, nums2, query = a\n\n    nums = list(map(int, nums.split()))\n    nums2 = list(map(int, nums2.split()))\n    query = list(map(int, query.split()))\n\n    from collections import defaultdict\n    from heapq import heappush, heappop\n    from time import time\n\n    def solve(nums, nums2, query):\n        def process(nums, d):\n            s = set()\n            xs = [x for x in nums if x not in s and not s.add(x)]\n", "solution(\"\") == \"\"\n\ndef Test(run_test, get_test_case, test_solution):\n    from utils import check_samples, get_time_str\n\n    # sample_1\n    n, m, q = 3, 4, 3\n    a_ = [1,2,3]\n    b_ = [1,2,3,4]\n    k_ = [1, 2, 3]\n    queries = [a_, b_, k_]\n    sample_1 = [n, m, q, queries]\n    sample_1_output = [6, 10, 10]\n\n    # sample_2\n    n, m, q = 1, 3, 3\n    a_ = [4]\n    b_ = [5, 5, 6]\n    k_ = [0, 4, 5]\n    queries = [a_, b_, k_]\n    sample_2 = [n, m, q, queries]\n    sample_2_output = [0, 5, 9]\n\n    # sample_3\n    n, m, q = 2, 2, 3\n    a_ = [0,0]\n    b_ = [1,1]\n    k_ = [0,1,10]\n    queries = [a_, b_, k", "solution(\"\"\"\n2 3 3\n3 5\n2 4 8\n0 2 4\n\"\"\") == \"\"\"\n5\n9\n13\n\"\"\"\n\nassert solution(\"\"\"\n5 4 2\n5 1 7 4 8\n5 5 5 5\n1 2\n\"\"\") == \"\"\"\n8\n13\n\"\"\"\n\nassert solution(\"\"\"\n3 2 4\n1 2 3\n1 2\n1 2 3 4\n\"\"\") == \"\"\"\n5\n5\n5\n5\n\"\"\"\n\n# this is a copy of solution, to make sure that it is compiled properly\ndef solution(stdin: str) -> str:\n    line = lambda: stdin.readline().strip()\n    n, m, q = map(int, line().split())\n    a = list(map(int, line().split()))\n    b = list(map(int, line().split()))\n    ks = list(map(int, line().split()))\n    b.sort()\n    max_ans = 0\n    min_b = b[0]\n    for ai in a:\n        ai_cost = ai - min_b\n        max_ans += ai_cost\n    max_ans += min_b * (n - 1)\n    a.sort()\n    ans = []\n    for k in ks:\n        ans", "solution(\"\") == \"\"\n\n# check performance\nassert solution(\"\") == \"\"", "solution('''\n5 3 2\n1 5 2 3 7\n3 1 4\n3 9\n''') == '19 12'\nassert solution('''\n3 1 0\n1 2 3\n4\n''') == ''\nassert solution('''\n4 4 2\n3 5 2 4\n3 2 3 1\n2 3\n''') == '18 18'\nassert solution('''\n2 2 2\n1000000000 1000000000\n1000000000 1000000000\n0 1000000000\n''') == '2000000000 2000000000'\nassert solution('''\n2 3 5\n1 1\n1 1 1\n0 0 1 2 3\n''') == '2 2 2 3 3'\nassert solution('''\n1 1 1\n1000000000\n1000000000\n1000000000\n''') == '2000000000'\nassert solution('''\n1 1 1\n1000000000\n1000000000\n0\n''') == '1000000000'\nassert solution('''\n1 1 1\n1000000000\n1000000000\n1\n''') == '0'\nassert solution('''\n1 1 1\n1000000000\n1000000000\n999999999\n''') == '1000000000'\nassert solution('''\n1 1 1\n1000000000\n1000000000\n999999998\n''') == '0'\nassert solution", "solution('''\n5 3 2\n4 5 2 3 1\n4 6 5\n1 2\n''') == '''\n12\n13\n'''\n\nassert solution('''\n4 3 2\n4 6 2 3\n1 2 3\n2 2\n''') == '''\n12\n12\n'''\n\nassert solution('''\n5 2 2\n5 4 2 1 3\n5 4\n1 2\n''') == '''\n12\n13\n'''\n\nassert solution('''\n6 3 2\n6 4 2 5 1 1\n6 4 2\n1 2\n''') == '''\n18\n18\n'''\n\nassert solution('''\n10 10 5\n87 46 85 97 37 53 77 25 28 32\n79 37 64 24 12 55 28 72 3\n3 2 1 5 7\n''') == '''\n309\n310\n306\n312\n317\n'''\n\nassert solution('''\n10 10 5\n41 97 25 6 53 67 64 99 68 37\n42 50 92 99 18 49 37 57 8 58\n4 5 6 7 8\n''') == '''\n454\n453\n453\n453\n453\n'''\n\n# test_data_11\nassert solution('''\n10 10 5\n24 14 15 87 2 58 86 24 41 3\n72 11 43 86 7 64 71 60 80 21\n", "solution('''\n3 3 3\n3 5 7\n3 5 8\n1 2 4\n''') == '19'\nassert solution('''\n4 4 4\n4 3 3 3\n4 3 3 3\n1 2 3 4\n''') == '28'\nassert solution('''\n5 7 3\n1 2 3 4 5\n10 20 30 40 50 60 70\n5 10 15\n''') == '33'\nassert solution('''\n1 1 3\n10000\n1\n9999 9998 9997\n''') == '19999'\nassert solution('''\n1 1 4\n10\n9\n1 2 3 4\n''') == '19'\nassert solution('''\n3 2 4\n1 2 3\n1 2\n1 1 1 1\n''') == '9'\nassert solution('''\n1 3 4\n1\n1 2 3\n1 2 3 4\n''') == '3'\nassert solution('''\n3 4 4\n1 2 3\n1 2 3 4\n1 1 1 1\n''') == '6'\nassert solution('''\n1 2 3\n1\n1\n1 2 3\n''') == '1'\nassert solution('''\n2 3 3\n1 1\n1 1 1\n1 1 1\n''') == '2'\nassert solution('''\n3 1 3\n", "solution(\"\"\"\n3 3 3\n3 2 1\n3 2 1\n0 2 4\n\"\"\") == \"\"\"\n6\n6\n10\n\"\"\"\n\n# run faster solution using PyPy3\n# import os\n# if os.environ.get('USER','') == 'Vincent':\n#     !pypy3 solution.py", "solution(\n'''\n3 3 2\n1 2 3\n4 2 5\n0 2\n'''\n) == '''\n6\n10\n'''", "solution(None) == None\n\n# test the performance of solution\nassert solution(None) == None", "solution('''\n3 3 2\n1 2 4\n2 3 6\n0 4\n''') == '5\\n10'\n\n# test solution on uDebug\n# https://www.udebug.com/UVa/12057\n\n# sample input\n'''\n3 3 2\n1 2 4\n2 3 6\n0 4\n'''\n\n# sample output\n'''\n5\n10\n'''", "solution('''\n4 2 5\n20 10 15 25\n8 5\n0 2 0 3 3\n''') == '\\n'.join([\n    '68',\n    '60',\n    '68',\n    '48',\n    '58',\n])\n\n# check the correctness of solution\nassert solution('''\n5 1 4\n1 2 3 4 5\n6\n0 5 4 3 2 1\n''') == '\\n'.join([\n    '15',\n    '9',\n    '7',\n    '5',\n])\n\n# check the correctness of solution\nassert solution('''\n5 3 6\n5 4 3 2 1\n5 4 3\n5 0 2 4 1 5\n''') == '\\n'.join([\n    '20',\n    '14',\n    '10',\n    '12',\n    '10',\n    '6',\n])\n\n# check the correctness of solution\nassert solution('''\n1 10 10\n1\n1 2 3 4 5 6 7 8 9 10\n0 0 0 0 0 0 0 0 0 0\n''') == '\\n'.join([\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n   ", "solution(\"\"\"\n3 2 3\n1 2 3\n3 2\n0 3 2\n\"\"\") == \"\"\"\n6\n7\n8\n\"\"\"", "solution(\"\"\"5 5 10\n1 2 3 4 5\n1 2 3 4 5\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\") == \"\"\"5\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\"\"\"\nassert solution(\"\"\"1 1 1\n1\n1\n1\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"4 4 4\n1 2 3 4\n1 2 3 4\n1\n2\n3\n4\n\"\"\") == \"\"\"4\n7\n9\n10\n\"\"\"\nassert solution(\"\"\"1 10 5\n7\n1 2 3 4 5 6 7 8 9 10\n1\n2\n3\n4\n5\n\"\"\") == \"\"\"7\n9\n10\n11\n12\n\"\"\"\nassert solution(\"\"\"1 1 5\n1\n1\n0\n1\n2\n3\n4\n\"\"\") == \"\"\"1\n2\n3\n4\n5\n\"\"\"\nassert solution(\"\"\"10 10 5\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n0\n1\n2\n3\n4\n\"\"\") == \"\"\"10\n20\n30\n40\n50\n\"\"\"\nassert solution(\"\"\"11 7 5\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1\n2\n", "solution('''\n6 4 2\n6 1 2 5 7\n4 1 2 5\n1 0\n''') == '''\n17\n7\n'''\n\n# get output from the given input\noutput = solution(stdin)\n\n# write to file the output\nwith open('output.txt', 'w') as file:\n    file.write(output)", "solution(\n'''5 4 3\n1 2 3 4 5\n2 3 4 5\n0 1 2\n''') == '''20\n24\n25\n'''\n\n# check the correctness of solution\nassert solution(\n'''1 2 1\n1\n1 2\n1\n''') == '''2\n'''\n\n# check the correctness of solution\nassert solution(\n'''1 1 1\n1\n1\n1\n''') == '''1\n'''\n\n# check the correctness of solution\nassert solution(\n'''1 1 1\n1\n1\n0\n''') == '''1\n'''\n\n# check the correctness of solution\nassert solution(\n'''1 1 1\n1\n1\n2\n''') == '''1\n'''\n\n# check the correctness of solution\nassert solution(\n'''3 3 1\n1 2 3\n1 2 3\n0\n''') == '''6\n'''\n\n# check the correctness of solution\nassert solution(\n'''3 3 1\n1 2 3\n1 2 3\n1\n''') == '''9\n'''\n\n# check the correctness of solution\nassert solution(\n'''3 3 1\n1 2 3\n1 2 3\n2\n''') == '''10\n'''\n\n# check the correctness of solution\nassert solution(", "solution('''\n1 1 3\n10\n1 2 3\n0 1 10\n''') == '''\n10\n11\n20\n'''\n\nassert solution('''\n3 4 7\n1 2 3\n1 2 3 4\n0 0 3 3 3 3 3\n''') == '''\n3\n3\n6\n6\n6\n6\n6\n'''", "solution('''\n3 2 2\n1 2 3\n1 1\n1 2\n''') == '''\n7\n6\n'''\n\nassert solution('''\n2 2 2\n1 1\n1 1\n1 1\n''') == '''\n3\n3\n'''\n\nassert solution('''\n3 2 4\n1 2 3\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '''\n7\n6\n7\n6\n'''", "solution('''\n3 2 3\n2 3 5\n3 2\n0 1 2\n''') == '''\n5\n6\n8\n'''\nassert solution('''\n4 2 3\n2 3 5 7\n2 3\n1 2 3\n''') == '''\n9\n10\n11\n'''\n\n# check the performance of solution\nfrom utils import *\nassert not check_time_limit(solution, '''\n6 6 4\n6 7 8 9 10 11\n1 2 3 4 5 6\n0 1 2 3\n''')\nassert not check_time_limit(solution, '''\n6 6 4\n6 7 8 9 10 11\n1 2 3 4 5 6\n0 1 2 3\n''')\nassert not check_time_limit(solution, '''\n6 6 4\n6 7 8 9 10 11\n1 2 3 4 5 6\n0 1 2 3\n''')\nassert not check_time_limit(solution, '''\n6 6 4\n6 7 8 9 10 11\n1 2 3 4 5 6\n0 1 2 3\n''')\nassert not check_time_limit(solution, '''\n6 6 4\n6 7 8 9 10 11\n1 2 3 4 5 6\n0 1 2 3\n''')\nassert not check_time_limit(solution, '''\n", "solution('''\n5 4 4\n1 5 7 10 19\n5 11 8 6\n1 2 4 8\n''') == '''\n40\n41\n41\n41\n'''\n\n# unit tests\nimport unittest\nclass Test(unittest.TestCase):\n    test_cases = [\n        ('', '''\n'''),\n    ]\n    def test__(self):\n        for test_input, test_output in self.test_cases:\n            self.assertEqual(solution(test_input), test_output.lstrip())\n\n# run tests\nunittest.main(verbosity=2)", "solution('''\n''') == '''\n'''", "(solution('''\n3 3 3\n3 5 2\n2 3 7\n0 5 6\n''') == '''\n10\n20\n23\n''')\n\nassert (solution('''\n1 1 1\n10\n10\n1\n''') == '''\n10\n''')\n\nassert (solution('''\n1 1 1\n1\n1\n1\n''') == '''\n2\n''')\n\nassert (solution('''\n1 1 1\n1\n1\n0\n''') == '''\n1\n''')\n\nassert (solution('''\n1 1 1\n1\n1\n2\n''') == '''\n3\n''')\n\nassert (solution('''\n1 1 1\n3\n3\n2\n''') == '''\n6\n''')\n\nassert (solution('''\n1 1 1\n5\n5\n2\n''') == '''\n10\n''')\n\nassert (solution('''\n1 1 1\n1\n5\n2\n''') == '''\n5\n''')\n\nassert (solution('''\n1 1 1\n5\n1\n2\n''') == '''\n5\n''')\n\nassert (solution('''\n1 1 1\n5\n6\n2\n''') ==", "solution('''\n2 2 3\n1 2\n2 1\n1 2 3\n''') == '''\n4\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n3 2 6\n1 5 3\n1 3\n2 3 5 6 7 8\n''') == '''\n8\n8\n8\n10\n10\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1 2 1\n1\n1 2\n5\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2 2 1\n2 3\n2 3\n1\n''') == '''\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n1 1 1\n1\n1\n1\n''') == '''\n1\n'''\n\n# read the input\nstdin = open('input.txt', 'r')\ninput_lines = stdin.readlines()\nstdin.close()\n\n# print the solution\nstdout = open('output.txt', 'w')\nstdout.write(solution(input_lines))\nstdout.close()", "solution(\"\"\"\n1 3 3\n2\n1 2 3\n1 2 3\n\"\"\") == '3\\n3\\n3'\n\nassert solution(\"\"\"\n3 2 4\n3 1 4\n2 2\n0 1 2 3\n\"\"\") == '9\\n7\\n8\\n9'\n\nassert solution(\"\"\"\n4 4 4\n4 1 5 2\n5 4 2 3\n1 2 1 2\n\"\"\") == '12\\n11\\n11\\n11'\n\nassert solution(\"\"\"\n2 2 3\n1 3\n1 2\n0 3 2\n\"\"\") == '4\\n4\\n5'\n\nassert solution(\"\"\"\n4 5 5\n1 2 4 7\n8 5 4 6 4\n1 2 3 1 2\n\"\"\") == '8\\n12\\n16\\n17\\n19'\n\nassert solution(\"\"\"\n1 1 1\n2\n2\n0\n\"\"\") == '2'\n\nassert solution(\"\"\"\n2 3 3\n1 1\n1 1 1\n1 1 1\n\"\"\") == '2\\n3\\n3'\n\nassert solution(\"\"\"\n3 2 5\n1 2 3\n1 1\n1 2 3 4 5\n\"\"\") == '6\\n7\\n6\\n7\\n7'\n\nassert solution(\"\"\"\n4 5 5\n1 2", "solution(r'''\n5 5 3\n1 3 3 3 3\n2 2 4 4 4\n0 1 3\n''') == r'''\n0\n8\n'''\n\nassert solution(r'''\n5 5 1\n3 2 4 5 4\n3 3 3 4 4\n2\n''') == r'''\n13\n'''\n\nassert solution(r'''\n5 5 1\n4 3 3 3 3\n4 4 4 4 4\n5\n''') == r'''\n15\n'''\n\nassert solution(r'''\n5 5 1\n1 1 1 1 1\n1 1 1 1 1\n0\n''') == r'''\n5\n'''\n\nassert solution(r'''\n5 5 1\n3 2 4 5 4\n3 3 3 4 4\n1\n''') == r'''\n14\n'''\n\nassert solution(r'''\n5 5 1\n1 1 1 1 1\n1 1 1 1 1\n9\n''') == r'''\n5\n'''\n\nassert solution(r'''\n1 1 2\n1000000000\n1000000000\n0 10\n''') == r'''\n1000000000\n1000000000\n'''\n\nassert solution(r'''\n1 1 1\n1000000000\n1000000000\n0\n''') == r'''\n", "solution('''\\\n4 2 3\n1 2 3 4\n2 3\n2 3 4\n''') == '''\\\n11\n14\n14\n'''\n\n# fin\nprint(solution(input()))", "(solution(\"\"\"\n5 5 2\n1 2 2 4 5\n1 1 1 2 2\n0 1\n\"\"\") == \"\"\"\n6\n8\n\"\"\")", "solution(\"\"\"\n5 5 3\n1 2 3 4 5\n1 2 3 4 5\n1 2 3\n\"\"\") == \"\"\"\n16\n15\n15\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5 3\n1 2 3 4 5\n1 2 3 4 5\n1 2 3\n\"\"\") == \"\"\"\n16\n15\n15\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5 3\n1 2 3 4 5\n1 2 3 4 5\n1 2 3\n\"\"\") == \"\"\"\n16\n15\n15\n\"\"\"", "solution('''\n5 5 3\n1 3 4 6 7\n2 3 4 5 6\n0 100 10000\n''') == '20\\n12\\n22'\n\nassert solution('''\n1 2 2\n3\n3 4\n1 2\n''') == '3\\n6'\n\nassert solution('''\n2 2 1\n1 2\n1 2\n2\n''') == '4'\n\nassert solution('''\n2 3 2\n1 2\n1 1 1\n1 2\n''') == '5\\n6'\n\nassert solution('''\n2 3 3\n1 2\n1 1 1\n1 2 3\n''') == '5\\n6\\n6'\n\nassert solution('''\n2 1 4\n1 2\n3\n0 1 2 3\n''') == '3\\n3\\n3\\n3'\n\nassert solution('''\n1 1 4\n3\n3\n0 1 2 3\n''') == '3\\n3\\n3\\n3'\n\nassert solution('''\n2 1 4\n1 2\n3\n0 1 2 3\n''') == '3\\n3\\n3\\n3'\n\nassert solution('''\n3 2 4\n1 2 3\n1 2\n1 2 3\n''') == '6\\n6\\", "solution('''\n3 2 3\n2 1 1\n2 2\n1 2 3\n''') == '''\n5\n5\n5\n'''\n\nassert solution('''\n3 2 1\n3 2 1\n1 1\n1\n''') == '''\n3\n'''\n\nassert solution('''\n2 2 3\n1 2\n2 1\n0 1 2\n''') == '''\n2\n2\n2\n'''\n\nassert solution('''\n1 1 1\n1\n1\n0\n''') == '''\n1\n'''\n\nassert solution('''\n2 3 3\n2 1\n2 1 1\n0 1 2\n''') == '''\n2\n2\n2\n'''\n\nassert solution('''\n1 2 2\n1\n1 2\n1 2\n''') == '''\n1\n1\n'''\n\nassert solution('''\n2 3 3\n1 2\n2 1 1\n1 1 1\n''') == '''\n3\n3\n3\n'''\n\nassert solution('''\n1 2 1\n2\n1 2\n1\n''') == '''\n2\n'''\n\nassert solution('''\n1 2 1\n1\n1 2\n1\n''') == '''\n1\n'''\n\nassert solution('''"], "finish_reason": ["stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "length", "stop", "length", "length", "length", "length", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "length"], "sum_logprob": [-48.34885899586, -35.479338573171766, -44.9861855146, -29.000341651299994, -91.86414192311295, -664.7866690643596, -102.373888197787, -96.85757097598001, -38.44207334876, -26.60626822495, -47.8964471247, -146.581894754995, -35.287370454314384, -524.8076849802142, -67.104031510112, -157.86469138771503, -70.78141883501002, -172.87861900118398, -146.85518263840194, -125.09005825551748, -179.95760293399496, -158.83085768888594, -194.29606411412294, -14.149095246999996, -137.26972471864383, -468.119344020507, -163.92664660321194, -66.2212075293, -26.344447712600008, -14.569039731000002, -65.95894190395998, -147.86331989316295, -21.855727070000004, -102.06508572892099, -71.76165978138, -67.107698396079, -48.64736732219, -46.692597709845, -91.00352358566192, -81.62631523205403, -6.6375534830000005, -90.67590752866347, -109.23834772169695, -192.87996805835303, -127.99464355973508, -38.82854023186, -31.109811968100004, -28.602316739540008, -126.2501222953871, -101.79083636260518], "mean_logprob": [-0.5089353578511578, -0.11826446191057233, -1.124654637865, -0.7631668855605263, -0.48863905278251596, -2.215955563547866, -0.34124629399262335, -0.8886015685869725, -0.5266037445035616, -0.34110600288397436, -0.6220317808402598, -0.4886063158499833, -0.3920818939368267, -1.7493589499340467, -0.5835133174792347, -0.52621563795905, -0.8043343049432955, -0.57626206333728, -0.87413799189525, -0.416966860851725, -0.59985867644665, -0.5294361922962867, -0.6476535470470767, -0.7860608470555556, -0.45756574906214664, -1.56039781340169, -0.54642215534404, -0.8600156821987013, -0.7317902142388889, -0.6334365100434782, -0.6943046516206316, -0.49287773297721, -0.6829914709375, -0.34021695242973665, -0.8645983106190361, -0.22369232798693, -0.572321968496353, -0.4168981938379018, -0.30334507861887333, -0.5590843509044795, -0.4741109630714286, -0.30225302509554497, -0.40609051197656876, -0.6429332268611767, -0.42664881186578335, -0.761343926114902, -0.8641614435583334, -0.22172338557782947, -0.42083374098462334, -0.33930278787535034]}
{"prompt": "'''\nA string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(stdin=\"4\\naa\\nabab\\nabaaab\\nabababab\") == \"YES\\nYES\\nNO\\nYES\"\n\nprint(\"Success!\")\n\n! echo \"5\\naa\\nabab\\nabaaab\\nabababab\\nababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab", "solution('''\n5\naa\nabcdabc\nabab\nbaabaa\nabaaab\n''') == '''\nYES\nNO\nYES\nYES\nNO\n'''\n# this part is related to the input/output of the program\nif __name__ == '__main__':\n    n = int(input())\n    stdin = '\\n'.join([input() for _ in range(n)])\n    print(solution(stdin))", "solution(STDIN_SINGLE) == STDOUT_SINGLE.strip()\nassert solution(STDIN_MULTI) == STDOUT_MULTI.strip()\n \n# get input and output for codeforces\ndef get_input_output(source):\n    lines = [x.strip() for x in source.split(\"\\n\") if x.strip()]\n    parsed_lines = [list(map(str, line.split(\" \"))) for line in lines]\n    input_output = list(zip(*[iter(parsed_lines)]*2))\n    return [x[0] for x in input_output], [x[1] for x in input_output]\n    \ninputs, outputs = get_input_output(SOURCE)\nprint(inputs)\nprint(outputs)\n\n# submit solution to codeforces\nimport submit\nsubmitter = submit.Submitter('https://codeforces.com/problemset/submit')\nsubmitter.submit(PROBLEM_NAME, inputs, outputs, 'pjotrbekers')\nsubmitter.submit_other(PROBLEM_NAME, SOURCE, 'pjotrbekers')", "solution('''4\naa\nabcabc\nbaabaa\nabab''') == '''YES\nYES\nYES\nYES'''\n\nassert solution('''4\na\nabca\nbaabaa\nabaab''') == '''NO\nNO\nYES\nNO'''\n\nassert solution('''4\naaaa\nbaabaa\nbaabaa\nbaabaa''') == '''NO\nYES\nYES\nYES'''\n\nassert solution('''4\nabcabcabcabc\nabcabcabcabc\nabcabcabcabc\nabcabcabcabc''') == '''NO\nNO\nNO\nNO'''\n\nassert solution('''4\na\nabc\naaaa\naaaaa''') == '''NO\nNO\nNO\nNO'''\n\nassert solution('''4\na\na\na\na''') == '''NO\nNO\nNO\nNO'''\n\nassert solution('''4\na\naa\naaaa\naaaaa''') == '''NO\nYES\nNO\nNO'''\n\nassert solution('''4\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc", "solution(\"\"\"\n4\naa\nabcabc\nabab\nbaabaa\n\"\"\") == \"\"\"\nYES\nYES\nYES\nYES\n\"\"\"\nassert solution(\"\"\"\n4\naaa\nabaaab\nabcdabc\naaabbb\n\"\"\") == \"\"\"\nNO\nNO\nNO\nNO\n\"\"\"", "(solution(\"\"\"\n1\naa\n\"\"\") == \"YES\")\n\nassert (solution(\"\"\"\n2\naa\naaabaaa\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\")", "solution(\"\"\"\n3\naa\nabcdabc\nabab\n\"\"\") == \"\"\"\nYES\nNO\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\naaa\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\nabab\nabaab\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\nabcdabcd\nabcabcabc\nabcabc\n\"\"\") == \"\"\"\nYES\nYES\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\na\naa\n\"\"\") == \"\"\"\nNO\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\nab\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\nababab\naa\n\"\"\") == \"\"\"\nYES\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\nababababa\n\"\"\") == \"\"\"\nNO\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\nababababab\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\nabababababa\n\"\"\") == \"\"\"\nNO", "solution('''\n1\nabcd\n''') == '''\nNO\n'''\n\nassert solution('''\n3\na\naa\naba\n''') == '''\nNO\nYES\nNO\n'''\n\nassert solution('''\n2\nabcabc\nabaaba\n''') == '''\nYES\nYES\n'''\n\n# this test case was missing in the statement\nassert solution('''\n1\nabcdabcd\n''') == '''\nYES\n'''", "solution('''\n4\naa\naaa\nabaaab\nabcdabc\n''') == '''\nYES\nNO\nNO\nNO\n'''\n\n# check if solution meets performance requirements\nfrom random import randint\n\ndef generate_str(N: int) -> str:\n    out = ''\n    for _ in range(N):\n        out += chr(randint(97, 122))\n    return out\n\ndef generate_input(n_cases: int, N: int) -> str:\n    out = ''\n    out += str(n_cases) + '\\n'\n    for _ in range(n_cases):\n        out += generate_str(N) + '\\n'\n    return out\n\nprint('Running tests..')\nfor _ in range(50):\n    str_in = generate_input(100, 100)\n    assert solution(str_in) == None\nprint('Tests passed')", "solution(\n'''\n7\naa\nabcabc\nabab\nbaabaa\naaaa\nabaaab\nabcdabc\n''') == '''\nYES\nYES\nYES\nYES\nNO\nNO\nNO\n'''", "solution(\"\"\"\n3\nabcabc\naaa\nabaab\n\"\"\") == \"\"\"\nYES\nNO\nNO\n\"\"\"", "solution(\"\") == \"\", \"some wrong case\"\n\n# check the performance of solution\nfrom utils import test, do_test\n\ndo_test(solution, [\n    test(stdin=\"\", expect=\"\"),\n    test(stdin=\"\", expect=\"\"),\n    test(stdin=\"\", expect=\"\"),\n    test(stdin=\"\", expect=\"\"),\n    test(stdin=\"\", expect=\"\"),\n    test(stdin=\"\", expect=\"\"),\n    test(stdin=\"\", expect=\"\"),\n    test(stdin=\"\", expect=\"\"),\n    test(stdin=\"\", expect=\"\"),\n    test(stdin=\"\", expect=\"\"),\n])", "solution(\"4\\n\"\n                \"aa\\n\"\n                \"aaaaa\\n\"\n                \"aaabaa\\n\"\n                \"aaabbaaa\") == \"YES\\n\" \\\n                       \"YES\\n\" \\\n                       \"NO\\n\" \\\n                       \"NO\"", "solution('''3\nabcd\nbaabaa\nabc\n''') == '''NO\nYES\nNO\n'''\n# test in hackerrank env\n# stdin = '''3\n# abcd\n# baabaa\n# abc\n# '''\n# print(solution(stdin))\n\n#\n#\n# a = set(list('sdsd'))\n# a1 = set(list('sdsd'))\n# a2 = set(list('sdsd'))\n# b = set(list('sdsd'))\n#\n# c = a.intersection(b)\n# if len(c) == len(a) == len(b):\n#     print('yes')\n# else:\n#     print('no')\n#\n# c = set(a1) & set(a2)\n# if len(c) == len(a1) == len(a2):\n#     print('yes')\n# else:\n#     print('no')\n#\n# print(all(x in set(a1) for x in set(a2)))", "solution(\"\"\"\n4\naa\naaa\nabcabc\nabab\n\"\"\") == \"\"\"\nYES\nNO\nYES\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\nabab\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n3\nabcdabc\nabcabcabc\nabababab\n\"\"\") == \"\"\"\nNO\nNO\nNO\n\"\"\"\n\nassert solution(\"\"\"\n1\nabababab\n\"\"\") == \"\"\"\nYES\n\"\"\"\n\nassert solution(\"\"\"\n1\na\n\"\"\") == \"\"\"\nYES\n\"\"\"", "solution(INPUT_DATA) == OUTPUT_DATA, \"Solution doesn't work\"", "solution(\"1\\nabcdabc\") == \"NO\"\nassert solution(\"2\\nabaaba\\nabcabcabc\") == \"YES\\nNO\"\nassert solution(\"3\\naaaa\\naa\\nbaabaa\") == \"NO\\nYES\\nYES\"", "solution(stdin) == stdout, (solution(stdin), stdout)", "solution(\"2\\nabab\\naaaa\") == \"YES\\nNO\"\nassert solution(\"1\\nabcdabc\") == \"NO\"\nassert solution(\"6\\nabcabc\\nbaabaab\\naa\\nbaabaa\\nba\\nababab\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"3\\nababab\\naa\\naaaa\") == \"NO\\nYES\\nNO\"\nassert solution(\"2\\nabab\\nbaab\") == \"YES\\nYES\"\nassert solution(\"1\\nabcabc\") == \"YES\"\nassert solution(\"4\\nabcabc\\nabcabc\\nabcabc\\nabcabc\") == \"YES\\nYES\\nYES\\nYES\"\nassert solution(\"3\\nabcabc\\nabcabc\\nabcabc\") == \"YES\\nYES\\nYES\"\nassert solution(\"3\\nbaabaa\\nbaabaa\\nbaabaa\") == \"YES\\nYES\\nYES\"\nassert solution(\"2\\nbaabaa\\nbaabaa\") == \"YES\\nYES\"\nassert solution(\"1\\nbaabaa\") == \"YES\"\nassert solution(\"4\\nabcabc\\nabcabc\\nabcabc\\nabcabc\") ==", "solution(\"\"\"6\naa\nabcabc\nabab\nbaabaa\naaa\nabaaab\"\"\") == \"\"\"YES\nYES\nYES\nYES\nNO\nNO\"\"\"\n\n# test solution\nprint(solution(open(1, \"r\").read()))", "solution(\"1\\nabcdabcd\") == \"YES\"\nassert solution(\"3\\naaaa\\nabaababa\\nabcabcabcabc\") == \"YES\\nYES\\nNO\"", "solution('''\n1\naa\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nabcabc\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nabab\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nbaabaa\n''') == '''\nYES\n'''\n\nassert solution('''\n1\naaa\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nabaaab\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nabcdabc\n''') == '''\nNO\n'''\n\n# print(solution(input()))", "solution(\"\"\"2\naa\nabcdabc\"\"\") == \"\"\"YES\nNO\"\"\", \"Solve the problem\"\n \nprint(\"\"\"\nGreat! The test cases passed.\nTry to submit now\"\"\")\n \n# Test Part 2 (Hidden Tests)\n \nprint(\"\"\"\nHmm... It seems like the test cases pass. \nBut some of the test data is hidden for you.\nI think you have a chance to play with them.\n\"\"\")\n\n# test 1\nassert solution(\"\"\"4\naa\nbb\nabab\nabba\"\"\") == \"\"\"YES\nYES\nYES\nNO\"\"\", \"Hidden test #1\"\n\n# test 2\nassert solution(\"\"\"3\nabaab\nababab\nabababab\"\"\") == \"\"\"NO\nYES\nNO\"\"\", \"Hidden test #2\"\n\n# test 3\nassert solution(\"\"\"3\nababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab", "solution('''\n4\naa\nabcabc\nabab\nbaabaa\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\nassert solution('''\n3\naaa\nabaaab\nabcdabc\n''') == '''\nNO\nNO\nNO\n'''", "solution(\"3\\n\" + \"abab\\n\" + \"abacaba\\n\" + \"aba\") == \"YES\\nNO\\nYES\", \"Incorrect\"\n\n# get user input\nprint(\"Enter the data separated by new line\")\ndata = \"\".join(iter(input, \"\"))\n\n# solve\nresult = solution(data)\n\n# print result\nprint(result)", "solution(\"3\\n\"\n                \"abcdabc\\n\"\n                \"abcabc\\n\"\n                \"abcabcabcabc\") == \"NO\\n\" \\\n                                   \"YES\\n\" \\\n                                   \"NO\"\n\nassert solution(\"1\\n\"\n                \"aaaa\") == \"YES\"\n\nassert solution(\"3\\n\"\n                \"abcdabc\\n\"\n                \"abcabc\\n\"\n                \"abcabcabcabc\") == \"NO\\n\" \\\n                                   \"YES\\n\" \\\n                                   \"NO\"\n\n# simple test\nassert solution(\"1\\n\"\n                \"abcd\") == \"NO\"\n\n# extreme test\nassert solution(\"1\\n\"\n                \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc", "solution(\"1\\naa\\n\") == \"YES\"\nassert solution(\"1\\nabcabc\\n\") == \"YES\"\nassert solution(\"1\\nabab\\n\") == \"YES\"\nassert solution(\"1\\nbaabaa\\n\") == \"YES\"\nassert solution(\"1\\naaa\\n\") == \"NO\"\nassert solution(\"1\\nabaaab\\n\") == \"NO\"\nassert solution(\"1\\nabcdabc\\n\") == \"NO\"", "solution('''1\nqwerqwer\n''') == 'YES'\nassert solution('''2\naaaaa\nabcdabcdabcd\n''') == 'YES\\nNO'\nassert solution('''2\nabcabc\nabcdabcdabcd\n''') == 'YES\\nNO'\n\n# check the correctness of solution for large input\nimport random\nimport string\n\ndef generate_string(string_length: int = 100) -> str:\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(string_length))\n\nfor i in range(100):\n    test_string = generate_string()\n    print(f'Test: {test_string}')\n    assert solution(f'1\\n{test_string}') == 'YES' if test_string == test_string * 2 else 'NO'\n    print('OK')", "solution(\"sample\") == \"solution\", \"sample #1\"\nassert solution(\"sample\") == \"solution\", \"sample #2\"\nassert solution(\"sample\") == \"solution\", \"sample #3\"\n\n# submit solution\nsolution(stdin_str)", "solution('''\n3\naa\naba\nabba\n''') == '''\nYES\nNO\nYES\n'''\n\nassert solution('''\n5\na\nabc\naa\nabab\nbaabaa\n''') == '''\nNO\nNO\nYES\nYES\nYES\n'''\n\nassert solution('''\n1\nasd\n''') == '''\nNO\n'''\n\n# input() reads a string with a line of input, stripping the '\\n' (newline) at the end.\n# This is all you need for most Code Jam problems.\nt = int(input())  # read a line with a single integer\nfor i in range(1, t + 1):\n  n, m = [int(s) for s in input().split(\" \")]  # read a list of integers, 2 in this case\n  print(\"Case #{}: {} {}\".format(i, n + m, n * m))\n  # check out .format's specification for more formatting options", "solution(\"\") == \"\", \"Empty input test\"\nassert solution(\"\") == \"\", \"Empty input test\"\nassert solution(\"\") == \"\", \"Empty input test\"\nassert solution(\"\") == \"\", \"Empty input test\"\n\n# generate random tests to check performance\n\n# test if the algorithm is correct", "solution(\"\"\"4\naa\nabcabc\nabab\nbaabaa\"\"\") == \"\"\"YES\nYES\nYES\nYES\"\"\"\nassert solution(\"\"\"3\naaa\nabaaab\nabcdabc\"\"\") == \"\"\"NO\nNO\nNO\"\"\"", "solution(example_input) == example_output", "solution('''\n4\naa\naaa\nabcabc\naaabbb\n''') == '''\nYES\nNO\nYES\nNO\n'''\n\n# check the correctness of solution\nassert solution('''\n1\nabcd\n''') == '''\nNO\n'''\n\nassert solution('''\n2\na\nab\n''') == '''\nYES\nNO\n'''\n\n# for local testing\nimport sys\nsys.stdin = open('input.txt', 'r')\n\n# for local testing\nstdin = '''\n1\na\n'''\n\nprint(solution(stdin))", "solution(\"1\\nabcabc\") == \"YES\"\nassert solution(\"1\\nabcab\") == \"NO\"\nassert solution(\"3\\naaa\\nabcabc\\nabcab\") == \"NO\\nYES\\nNO\"\n\n# get input and output\n\n# read the first line of input\nn = int(input())\n\n# read the rest of input\ninputs = [input() for _ in range(n)]\n\n# solve the problems using inputs\noutputs = [solution(i) for i in inputs]\n\n# print outputs\nfor o in outputs:\n    print(o)", "solution(\"4\") == \"\"", "solution(\n'''\n5\nabcabc\nabcaba\naa\naba\naaba\n'''\n) == '''\nYES\nNO\nYES\nNO\nYES\n'''", "solution(test_case) == \"YES\"\n\n# run with input file\nstdin = open(os.path.join(__dir__, \"in.txt\"), \"r\")\nprint(solution(stdin.read()))", "solution('''\n4\naa\nabcabc\nabab\nbaabaa\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\nassert solution('''\n3\naaa\nabaaab\nabcdabc\n''') == '''\nNO\nNO\nNO\n'''", "solution('''\n4\naa\nabcabc\nabab\nbaabaa\n''') == '''\nYES\nYES\nYES\nYES\n'''\nassert solution('''\n3\naaa\nabaaab\nabcdabc\n''') == '''\nNO\nNO\nNO\n'''", "solution(\"test\") == None", "solution(\"4\\nabcabc\\nbaabaa\\nabcdabc\\nabcab\") == \"YES\\nYES\\nNO\\nNO\", \"failed test 1\"\nassert solution(\"1\\nabacaba\") == \"YES\", \"failed test 2\"\nassert solution(\"2\\nqq\\nqqqq\") == \"YES\\nYES\", \"failed test 3\"\nassert solution(\"1\\nabcdab\") == \"NO\", \"failed test 4\"\nassert solution(\"2\\nabaaba\\nababab\") == \"YES\\nNO\", \"failed test 5\"\n\nprint(\"Tests passed\")", "solution('''4\naa\nabcabc\nabab\nbaabaa''') == '''YES\nYES\nYES\nYES'''\nassert solution('''1\nabcdabc''') == '''NO'''\nassert solution('''6\nab\nababab\nabababab\nababaab\nbabaab\nabaababa''') == '''NO\nYES\nNO\nNO\nNO\nNO'''\nassert solution('''3\naa\nab\na''') == '''YES\nNO\nNO'''\nassert solution('''2\na\na''') == '''YES\nYES'''\nassert solution('''7\nabaab\nababa\nabaab\nababa\nabaab\nababa\nabaab''') == '''NO\nNO\nNO\nNO\nNO\nNO\nNO'''\nassert solution('''7\nbabaab\nababa\nabaab\nababa\nabaab\nababa\nabaab''') == '''NO\nNO\nNO\nNO\nNO\nNO\nNO'''\nassert solution('''7\nabaab\nababa\nabaab\nababa\nabaab\nababa\nabaab''') == '''NO\nNO\nNO\nNO\nNO\nNO\nNO'''\nassert solution('''3\naa\nab", "solution(\"5\\n\\\naa\\n\\\nabcabc\\n\\\nabab\\n\\\nbaabaa\\n\\\nabcdabc\") == \"YES\\n\\\nYES\\n\\\nYES\\n\\\nYES\\n\\\nNO\"\n\n# this is an example of how the output will be printed out\n# if the stdin is 'aa'\nprint(solution(\"aa\"))\n\n# this is how the test cases are going to be evaluated\n# (for simplicity, the stdin will be read from the file)\nwith open('sample_cases.txt', 'r') as f:\n    lines = f.readlines()\n\n# run solution on each case\nfor i, stdin in enumerate(lines):\n    result = solution(stdin)\n    print(f\"case {i}: {result}\")", "solution(stdin='2\\nabab\\naa') == \"YES\\nYES\", \"Case #1\"\nassert solution(stdin='1\\nabcabc') == \"YES\", \"Case #2\"\nassert solution(stdin='1\\nabaaab') == \"NO\", \"Case #3\"\nassert solution(stdin='1\\nabcdabc') == \"NO\", \"Case #4\"\nassert solution(stdin='1\\nabcabcabcabc') == \"YES\", \"Case #5\"\nassert solution(stdin='1\\nabcabcabcabcabcabcabcabcabc') == \"YES\", \"Case #6\"\nassert solution(stdin='1\\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc", "solution(sample) == '''\\\n1\nYES\n1\nNO\n1\nYES\n2\nNO\nYES\n'''", "solution(\n    '''\n    3\n    aa\n    abcdabcd\n    ababa\n    '''\n) == '''\nYES\nYES\nNO\n'''", "solution(r'''3\naa\nabab\nbaabaa''') == r'''YES\nYES\nYES'''\n\n# run the solution:\nsolution(r'''3\naa\nabab\nbaabaa''')\n\n# test_case_1\ndef solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    ans = []\n    for i in range(1, n+1):\n        line = lines[i]\n        length = len(line)\n        for i in range(length):\n            ans.append(line[i:length+i] == line[i+1:length+i+1])\n            if ans[-1]:\n                break\n    return '\\n'.join(['YES' if a else 'NO' for a in ans])\n\nassert solution(r'''3\naa\nabab\nbaabaa''') == r'''YES\nYES\nYES'''", "solution(__doc__) == \"\"\"YES\nNO\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\n", "solution(\"2\\nabcabc\\nabcdabc\") == \"YES\\nNO\"\nassert solution(\"5\\nabcabc\\nabcdabc\\nabcdabcdabcd\\naa\\nbaabaa\") == \"YES\\nNO\\nYES\\nYES\\nYES\"\nassert solution(\"5\\nabcabc\\nabcdabc\\nabcdabcdabcd\\naa\\nbaabaa\") == \"YES\\nNO\\nYES\\nYES\\nYES\"\nassert solution(\"3\\nabcabc\\nabcdabc\\nabcdabcdabcd\") == \"YES\\nNO\\nYES\"\nassert solution(\"1\\nabcabc\") == \"YES\"\nassert solution(\"1\\nabcdabc\") == \"NO\"\nassert solution(\"1\\nabcdabcdabcd\") == \"YES\"\nassert solution(\"1\\naa\") == \"YES\"\nassert solution(\"1\\nbaabaa\") == \"YES\"\nassert solution(\"1\\nabc\") == \"NO\"\nassert solution(\"1\\nabcdab\") == \"NO\"\nassert solution(\"1\\nabcdabcd\") == \"NO\"\nassert solution(\"1\\nabcdabcdab\") == \"NO\"\nassert solution(\"1\\nabcdabcdabcdab\") == \""], "finish_reason": ["length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length"], "sum_logprob": [-55.04089102012993, -41.816908060239996, -103.59426405058501, -93.87230196301307, -19.681305858039998, -26.49769967925, -82.57953781363298, -53.033818188080005, -109.22763995034005, -20.715475985970002, -15.468994155500003, -39.88331022323497, -30.690946209480007, -150.51874762481992, -46.233818656710014, -22.885343043, -34.46046504031001, -12.445108744799997, -101.28577383242605, -30.8769585462, -29.059095067739996, -22.519958511381006, -165.20098480408998, -12.044295826830002, -69.75290332456004, -62.65005791255998, -12.951653413169993, -105.82318509030897, -30.883135367210002, -55.52590816797401, -52.386740921299996, -13.426406128880002, -7.190443505600001, -64.8557224577, -70.07605849212999, -9.49056769, -30.298290070099995, -41.90397995541001, -12.030565112449993, -12.2667445253, -11.63686328, -73.47122360597002, -109.99618214830703, -160.21817501656997, -52.393080266423986, -26.646108755899995, -20.912421963080003, -105.634978897975, -34.451440138099976, -63.95146944195999], "mean_logprob": [-0.18346963673376668, -0.3908122248620561, -0.3726412375920324, -0.3129076732100433, -0.2852363167831884, -0.6022204472556818, -0.27526512604544334, -0.46520893147438597, -0.5080355346527442, -0.39085803747113207, -0.572925709462963, -0.2623901988370724, -0.4650143365072727, -0.5879638579094532, -0.36693506870404763, -1.14426715215, -0.5469915085763492, -0.62225543724, -0.3376192461080867, -0.5146159757700001, -0.645757668172, -0.1316956638092456, -0.5506699493469667, -0.1720613689547143, -0.766515421149011, -0.2088335263752, -0.11563976261758928, -0.49450086490798595, -0.5062809076591803, -0.24247121470731003, -0.7592281292942029, -0.24411647507054546, -0.6536766823272727, -0.4503869615118056, -0.504144305698777, -1.3557953842857144, -0.7213878588119048, -0.775999628803889, -0.17186521589214285, -0.17777890616376812, -1.66240904, -0.5210725078437589, -0.3666539404943567, -0.838838612652199, -0.17464360088808, -0.8882036251966666, -0.4979148086447619, -0.4592825169477174, -0.11483813379366667, -0.21317156480653335]}
{"prompt": "'''\nTanya is learning how to add numbers, but so far she is not doing it correctly. She is adding two numbers a and b using the following algorithm:\n\n  1. If one of the numbers is shorter than the other, Tanya adds leading zeros so that the numbers are the same length. \n  2. The numbers are processed from right to left (that is, from the least significant digits to the most significant). \n  3. In the first step, she adds the last digit of a to the last digit of b and writes their sum in the answer. \n  4. At each next step, she performs the same operation on each pair of digits in the same place and writes the result to the left side of the answer. \n\n\n\nFor example, the numbers a = 17236 and b = 3465 Tanya adds up as follows:\n\n$$$ \\large{ \\begin{array}{r} + \\begin{array}{r} 17236\\\\\\ 03465\\\\\\ \\end{array} \\\\\\ \\hline \\begin{array}{r} 1106911 \\end{array} \\end{array}} $$$\n\n  * calculates the sum of 6 + 5 = 11 and writes 11 in the answer. \n  * calculates the sum of 3 + 6 = 9 and writes the result to the left side of the answer to get 911. \n  * calculates the sum of 2 + 4 = 6 and writes the result to the left side of the answer to get 6911. \n  * calculates the sum of 7 + 3 = 10, and writes the result to the left side of the answer to get 106911. \n  * calculates the sum of 1 + 0 = 1 and writes the result to the left side of the answer and get 1106911. \n\n\n\nAs a result, she gets 1106911.\n\nYou are given two positive integers a and s. Find the number b such that by adding a and b as described above, Tanya will get s. Or determine that no suitable b exists.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nEach test case consists of a single line containing two positive integers a and s (1 \u2264 a < s \u2264 10^{18}) separated by a space.\n\nOutput\n\nFor each test case print the answer on a separate line.\n\nIf the solution exists, print a single positive integer b. The answer must be written without leading zeros. If multiple answers exist, print any of them.\n\nIf no suitable number b exists, output -1.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n1\n154799 98714\n\"\"\") == \"\"\"\n89741\n\"\"\"\n\nassert solution(\"\"\"\n2\n1234 12345\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\"\"\"\n3\n3465 17236\n12345678 12345678\n123456789999900 123456789000000\n\"\"\") == \"\"\"\n17236\n0\n999999900\n\"\"\"\n\nassert solution(\"\"\"\n5\n777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", "solution(stdin) == stdout", "solution('''3\n3 6\n3 8\n3 10''') == '''2\n-1\n0'''", "solution('''1''') == '''1106911'''\nassert solution('''3''') == '''-1'''\nassert solution('''4''') == '''17'''\nassert solution('''5''') == '''-1'''\nassert solution('''6''') == '''0'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert solution('''1''') == '''1106911'''\nassert", "solution('''2\n1 9\n991 1001''') == '''8\n-1'''", "solution('''5\n1 2\n3 5\n17 236\n345 4567\n999 999999''') == '''1\n2\n69\n4935\n1000000'''", "solution('''\n3\n8 9\n7 11\n100 10\n''') == '''\n1\n1\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n1356 3577\n99999 1\n1 2\n111 2345\n''') == '''\n2221\n100000\n-1\n1234\n'''\n\n# check the correctness of solution\nassert solution('''\n7\n101 345\n101345 101355\n100000 2345\n101 345\n101 345\n101 345\n101 345\n''') == '''\n244\n102210\n2235\n344\n443\n542\n641\n'''", "solution(\"4\\n1 2\\n17236 3465\\n124 124\\n9999 100000\") == \"-1\\n03465\\n124\\n00000\"\nprint(\"Problem solved.\")", "solution(test_case_0) == '17236', 'The test case 0 is wrong.'\nassert solution(test_case_1) == '-1', 'The test case 1 is wrong.'\nassert solution(test_case_2) == '-1', 'The test case 2 is wrong.'\nassert solution(test_case_3) == '11001', 'The test case 3 is wrong.'\nassert solution(test_case_4) == '-1', 'The test case 4 is wrong.'\nassert solution(test_case_5) == '1', 'The test case 5 is wrong.'\nassert solution(test_case_6) == '-1', 'The test case 6 is wrong.'\nassert solution(test_case_7) == '11', 'The test case 7 is wrong.'\nassert solution(test_case_8) == '-1', 'The test case 8 is wrong.'\nassert solution(test_case_9) == '999', 'The test case 9 is wrong.'\nassert solution(test_case_10) == '-1', 'The test case 10 is wrong.'\n\n# submit the solution\nprint(solution(stdin))", "solution('''\n2\n17236 1106911\n1234567890000 123456789\n''') == '''\n03465\n-1\n'''", "solution('''2\n17236 1106911\n8911 1123371''') == '''3465\n-1'''", "solution(\"\"\"\n3\n1 4\n1 9\n17236 1106911\n\"\"\") == '\"\"\"\n3\n3\n10\n3465\n\"\"\"', \"Example\"\n\nassert solution(\"\"\"\n4\n1 10\n1 10\n1 5\n4 7\n\"\"\") == '\"\"\"\n-1\n9\n-1\n10\n\"\"\"', \"Simple\"\n\nassert solution(\"\"\"\n6\n1 6\n1 10\n1 30\n1 10\n1 30\n1 10\n\"\"\") == '\"\"\"\n5\n9\n29\n9\n29\n9\n\"\"\"', \"Extra\"\n\n# check the correctness of solution", "solution(\"\"\"\n4\n67123 123456\n123456 67123\n1 3\n2 2\n\"\"\") == \"\"\"\n123\n-1\n0\n-1\n\"\"\"", "solution(\"3\\n17236 1111111\\n\"\n                \"152890 286917\\n\"\n                \"20429 1111111\") == \"111111\\n\" \\\n                                    \"111111\\n\" \\\n                                    \"-1\"", "solution('''\n4\n17236 1106911\n1 1\n1 2\n1 3\n''') == '''\n3465\n-1\n0\n10\n'''", "solution('''\n3\n17236 1106911\n11111 111111\n0 0\n''') == '''\n3465\n11000\n-1\n'''", "solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\nassert solution(\"\") == \"\", \"wrong answer\"\n\nprint('complete')", "solution('''\n3\n6762 11169\n12345 123\n123 45\n''') == '''\n-1\n-1\n45'''", "solution(\"2 17236 1106911 3465 1234567890123456789012345\") == \"1106911\"\nassert solution(\"1 3465 1234567890123456789012345\") == \"-1\"", "solution('''3\n4 9\n4 30\n4 40''') == '''5\n-1\n20'''", "solution(r'''4\n1 8\n22 8\n333 8\n4444 8''') == r'''7\n-1\n-1\n44440'''\n\n# check the speed of solution\nassert solution(r'''10\n1 51560\n2 51560\n3 51560\n4 51560\n5 51560\n6 51560\n7 51560\n8 51560\n9 51560\n10 51560''') == r'''51551\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1'''", "solution('''\n1\n1 2\n''') == '''\n1\n'''\n\n# get the input\nt = int(input())\nfor _ in range(t):\n    a, s = [int(x) for x in input().split()]\n    ans = solution(a, s)\n    print(ans)", "solution(r'''\n1\n17236 3465\n''') == r'''\n-1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n2 3\n10 20\n''') == r'''\n1\n20\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n23 456\n123456789 987654321\n987654321 10000000000\n''') == r'''\n-1\n965217365\n1000000000\n'''", "solution(\"\") == \"\", \"not correct\"\nassert solution(\"\") == \"\", \"not correct\"\nassert solution(\"\") == \"\", \"not correct\"\nassert solution(\"\") == \"\", \"not correct\"\n\n# get input\nt = int(input())\ntests = [input() for _ in range(t)]\n\n# run solutions\nresults = [solution(test) for test in tests]\n\n# print results\nfor res in results:\n    print(res)", "solution(\"\"\"\n1\n17236 1106911\n\"\"\") == \"3465\"\n\nassert solution(\"\"\"\n3\n1 2\n2 3\n3 4\n\"\"\") == \"\"\"\n-1\n-1\n-1\n\"\"\"\n\nassert solution(\"\"\"\n5\n1234 1234\n0 1234\n1234 0\n1234 5678\n5678 1234\n\"\"\") == \"\"\"\n0\n1234\n1234\n1234\n5678\n\"\"\"", "solution('''5\n17236 1106911\n1324 4532\n0 1\n125783 141009\n1234567890 123456789''') == '''3465\n-1\n0\n25226\n9876543210'''\nprint('passed')", "solution(\"1\\n17236 1106911\") == '3465'\nassert solution(\"1\\n9559 100000\") == '-1'\nassert solution(\"1\\n99999 100000\") == '1'\nassert solution(\"2\\n1 2\\n10 11\") == '2\\n1'\nassert solution(\"1\\n0 0\") == '0'\nassert solution(\"4\\n0 0\\n1 1\\n1 2\\n2 3\") == '0\\n0\\n1\\n1'\nassert solution(\"2\\n1000000000000000000 9999999999999999999\\n98765432109876543210 98765432109876543210\") == '-1\\n0'\nassert solution(\"1\\n1000000000000000000 000000000000000001\") == '-1'\nassert solution(\"1\\n1000000000000000000 9999999999999999999\") == '-1'\nassert solution(\"2\\n9223372036854775808 9223372036854775809\\n9223372036854775807 9223372036854775808\") == '1\\n1'\nassert solution(\"3\\n2 3\\n5 6\\n1 9\") == '1\\n1\\n8'\nassert solution(\"2\\n2 3\\n5 6\") ==", "solution('''\n1\n17236 1106911\n''') == '''\n03465\n'''\n\nprint(solution('''\n1\n17236 1106911\n'''))\n\n'''\nExample\n\ninput\n3\n17236 1106911\n123456789 123456789\n123456789 987654321\n\noutput\n03465\n-1\n126571746\n'''", "solution(\"1\\n17236 1106911\") == \"3465\"\nassert solution(\"2\\n4 8\\n4 9\") == \"-1\"\nassert solution(\"3\\n4 8\\n4 9\\n4 3\") == \"4\"\nassert solution(\"4\\n1000000000000000 1\\n10000000000000000 10000000000000000\\n10000000000000000 100000000000000000\\n10000000000000000 100000000000000001\") == \"-1\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\") == \"1\"\nassert solution(\"6\\n9 9\\n9 99\\n9 999\\n9 9999\\n9 99999\\n9 999999\") == \"0\"\nassert solution(\"7\\n88 87\\n88 88\\n88 89\\n88 887\\n88 888\\n88 889\\n88 8887\") == \"-1\"\nassert solution(\"8\\n1000000000000000 10000000000000001\\n1000000000000000 10000000000000002\\n1000000000000000 10000000000000003\\n1000000000000000 10000000000000004\\n1000000000000000 10000000000000005\\n1000000000000000 10000000000000006\\n1000000000000000 10000000000000007\\n1000000000000000 10000000000000008\") == \"1\"\nassert solution(\"9\\n1000000000000000 10000000000000001\\", "solution(\"\"\"3\n17236 3465\n1257112689999940973162229278312357949444465892057 636971245885402875777433245370805729881609373772\n17236 3465\"\"\") == \\\n\"\"\"\n03465\n36971245885402875777433245370805729881609373772\n-1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n17236 3465\"\"\") == \\\n\"\"\"\n03465\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n1257112689999940973162229278312357949444465892057 636971245885402875777433245370805729881609373772\"\"\") == \\\n\"\"\"\n36971245885402875777433245370805729881609373772\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n17236 3465\"\"\") == \\\n\"\"\"\n-1\n\"\"\"", "solution('''2\n17236 1106911\n1 1''') == '''3465\n-1'''", "solution('''\n2\n17236 1106911\n111 11\n''') == '''\n3465\n-1\n'''", "(\n    solution('''2\n17236 1106911\n123 12123''') == '''3465\n-1'''\n), 'test 1'\n\nassert (\n    solution('''3\n555555 5111111\n50000005 51111111\n1000000000000000000000000000001 5000000000000000000000000000005''') == '''5555556\n55555556\n499999999999999999999999999994'''\n), 'test 2'\n\nassert (\n    solution('''4\n1 11111\n2 3333\n111111 1111111\n111111 111111111''') == '''11110\n3333\n1000000\n1111100000'''\n), 'test 3'\n\nassert (\n    solution('''7\n1 1111\n2 3333\n111111 1111111\n111111 111111111\n12345678901234567890 333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", "solution(\"\"\"4\n4 6\n7 10\n17236 1106911\n123456789000000 45678900000000000\"\"\") == '2\\n3\\n3465\\n-1'", "solution('''\n1\n17236 1106911\n''') == '''\n03465\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n17236 1106912\n1000000000000 100000000000000\n''') == '''\n03466\n-1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1000000000000 100000000000000\n''') == '''\n-1\n'''\n\nprint('passed!')", "solution('''\n3\n1 0\n1 1\n1 10\n''') == '''\n0\n-1\n9\n'''", "solution(stdin='''\n1\n1 2\n''') == '''\n1\n'''\n\nassert solution(stdin='''\n2\n7 7\n1 10\n''') == '''\n0\n9\n'''\n\nassert solution(stdin='''\n3\n1 1000000000000000000\n1 1234567890987654321\n1234567890987654321 9876543212345678909\n''') == '''\n0\n543219876543210\n-1\n'''", "solution('''5\n1 2\n1888 1944\n28800 29312\n95575 95576\n123456789 987654321''') == '''1\n48\n60\n1\n266321'''", "solution('''\n5\n17236 39110\n200010 100010\n1000000000 1000010000\n3 4\n1 1\n''') == '''\n1106911\n-1\n9900\n-1\n0\n'''", "solution('''\n4\n12 1\n2 98765\n0 1\n98765432109876543210 98765432109876543210\n''') == '''\n-1\n1234\n0\n-1\n'''", "solution(\"\"\"3\n17236 1106911\n17236 9973\n1611111728 64\"\"\") == \"\"\"3465\n9999\n-1\"\"\"", "solution(\"\"\"\n2\n17236 1106911\n99 888 \n\"\"\") == \"\"\"\n3465\n-1\n\"\"\"", "solution(\"1\\n17236 1106911\") == \"3465\"\nassert solution(\"1\\n1 2\") == \"-1\"\nassert solution(\"2\\n2 1\\n2 3\") == \"-1\\n100\"\n\n# test the performance of solution\nassert timeit(\"assert solution(\\\"1\\\\n17236 1106911\\\") == \\\"3465\\\"\", \"from __main__ import solution\", timeit_number=1000) < timeit_number", "solution(\"1\\n17236 11\") == \"1106911\"\nassert solution(\"2\\n9123456789012345678 9123456789012345678\") == \"0\"\nassert solution(\"3\\n17236 11\\n9123456789012345678 9123456789012345678\\n1 9223372036854775807\") == \"1106911\\n0\\n-1\"", "solution('''\n2\n239 579\n1234 785\n''') == '''\n340\n-1\n'''", "solution('''\n3\n100 110\n100 101\n100 111\n''') == '''\n10\n11\n-1\n'''\nassert solution('''\n2\n1000000000000000000 0\n1000000000000000000 1\n''') == '''\n-1\n0\n'''\nassert solution('''\n1\n1 2\n''') == '''\n1\n'''\nassert solution('''\n3\n1234 5678\n1234 5678\n1234 5678\n''') == '''\n4444\n1111\n-1\n'''\nassert solution('''\n1\n1 2\n''') == '''\n1\n'''\nassert solution('''\n3\n1234 5678\n1234 5678\n1234 5678\n''') == '''\n4444\n1111\n-1\n'''\nassert solution('''\n1\n1 2\n''') == '''\n1\n'''\nassert solution('''\n3\n1234 5678\n1234 5678\n1234 5678\n''') == '''\n4444\n1111\n-1\n'''\nassert solution('''\n1\n1 2\n''') == '''\n1\n'''\nassert solution('''\n3\n1234 5678\n1234 5678\n1234 5678\n''') == '''", "solution('''\n4\n17236 3465\n32767 32766\n4 1\n1000000000 1000000000\n''') == '''\n3465\n-1\n-1\n-1\n'''", "solution(\"\"\"\n1\n17236 3465\n\"\"\") == \"\"\"\n3465\n\"\"\"\n\nassert solution(\"\"\"\n2\n3465 3465\n10 110\n\"\"\") == \"\"\"\n3465\n10\n\"\"\"\n\nassert solution(\"\"\"\n3\n10 110\n15 35\n15 99\n\"\"\") == \"\"\"\n-1\n15\n49\n\"\"\"\n\nassert solution(\"\"\"\n4\n20 110\n15 35\n15 99\n7 81\n\"\"\") == \"\"\"\n10\n15\n-1\n74\n\"\"\"\n\nassert solution(\"\"\"\n5\n20 110\n15 35\n15 99\n7 81\n1 85\n\"\"\") == \"\"\"\n10\n15\n-1\n74\n84\n\"\"\"\n\nassert solution(\"\"\"\n6\n20 110\n15 35\n15 99\n7 81\n1 85\n5 569\n\"\"\") == \"\"\"\n10\n15\n-1\n74\n84\n564\n\"\"\"\n\nassert solution(\"\"\"\n7\n20 110\n15 35\n15 99\n7 81\n1 85\n5 569\n60 9999\n\"\"\") == \"\"\"\n10\n15\n-1\n74\n84\n564\n-1\n\"\"\"\n\nassert solution(\"\"\"\n8\n20 110\n15 35\n15 99\n7 81\n1 85\n5 569\n60 9999\n7 81\n\"\"\") == \"\"\"\n10", "solution(\"\"\"5\n1 1\n1 2\n10 8\n1000000000 1000000000\n17236 1106911\"\"\") == \"\"\"1\n10\n-1\n-1\n3465\"\"\", \"solution test failed\"", "solution(\"1\\n17236 1106911\") == '3465'\nassert solution(\"1\\n1106911 17236\") == '-1'\n\nprint(\"Passed all tests!\")"], "finish_reason": ["length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop"], "sum_logprob": [-131.05456045892987, -6.283407673, -26.746101169500005, -39.435493839976964, -23.25513586066, -55.39394722670001, -158.80966911029103, -53.44944883833999, -72.79845896703021, -22.004520829850005, -35.47014575775, -111.29668674908504, -48.429968297730014, -83.30652270085999, -20.917328803400004, -26.550767669800003, -23.906611439569993, -53.26815160420001, -33.440856400760005, -29.163809603640004, -81.879180466649, -31.345381052560004, -80.30252327031101, -43.818258975639985, -54.64733843733999, -90.43826620749002, -151.80030942196495, -60.61228220590001, -113.57284265201407, -268.5416394369142, -12.514316547359996, -16.15358343558, -175.11458046776, -47.92848553392001, -42.204850410351995, -20.0327239092, -64.02799543108401, -105.73626094200002, -72.70433062505003, -49.1267626031, -62.664136698800014, -26.865342239740006, -56.20428177909004, -51.659280203169985, -35.63773289000001, -82.82103457919997, -42.481498093000006, -149.7791075797499, -42.99862244540002, -25.038796290139995], "mean_logprob": [-0.4368485348631, -0.6981564081111111, -0.9552178989107143, -0.13145164613325666, -0.9302054344264, -1.3510718835780489, -1.0379716935313137, -1.2147602008713636, -0.27575173851147805, -0.5790663376276316, -1.182338191925, -0.8006955881229136, -1.2417940589161538, -1.4615179421203508, -0.5101787513024391, -0.6807889146102564, -0.5830880838919512, -1.5219471886914286, -0.6192751185325926, -1.0415646287014286, -0.5807034075648865, -0.4070828708124675, -0.6528660428480569, -0.4057246201448148, -0.520450842260381, -1.4130979094920313, -0.50600103140655, -0.6122452748070707, -0.37857614217338, -1.053104468380055, -0.4634932054577778, -0.5210833366316129, -0.5837152682258667, -1.0650774563093333, -0.376829021521, -0.6260226221625, -0.5248196346810164, -1.9950237913584905, -1.3463764930564814, -0.8772636179125, -1.843062844082353, -0.8955114079913333, -0.5352788740865715, -0.5064635314036274, -1.1879244296666667, -0.276070115264, -0.9038616615531915, -0.4992636919325, -0.859972448908, -0.5564176953364445]}
{"prompt": "'''\nPolycarp likes squares and cubes of positive integers. Here is the beginning of the sequence of numbers he likes: 1, 4, 8, 9, ....\n\nFor a given number n, count the number of integers from 1 to n that Polycarp likes. In other words, find the number of such x that x is a square of a positive integer number or a cube of a positive integer number (or both a square and a cube simultaneously).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 20) \u2014 the number of test cases.\n\nThen t lines contain the test cases, one per line. Each of the lines contains one integer n (1 \u2264 n \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer you are looking for \u2014 the number of integers from 1 to n that Polycarp likes.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n2\n4\n''') == '''\n1\n2\n'''\n\nassert solution('''\n1\n10\n''') == '''\n4\n'''", "solution('''\n1\n10\n''') == '''\n6\n'''\n\n# get the input and run the solution\nstdin = open('./1.in', 'r')\nif stdin.buffer.raw.readline().decode() == '':\n    stdin = open('./1.in.sample', 'r')\ninput = stdin.read()\nprint(solution(input))", "solution('''2\n5\n6''') == '''4\n5'''\n\n# get output from given file\nwith open('file.in') as f:\n    print(solution(f.read()))", "solution(\"\"\"\n2\n5\n6\n\"\"\") == \"\"\"\n2\n2\n\"\"\"", "solution('''1\n4''') == '''1'''\n\nassert solution('''2\n3\n36''') == '''1\n3'''\n\nassert solution('''4\n1\n9\n20\n123''') == '''1\n2\n4\n4'''", "(solution(\"\"\"4\n13\n24\n100\n2718281828\"\"\")) == \"\"\"5\n5\n8\n7\"\"\"\n\nassert (solution(\"\"\"9\n1\n2\n3\n4\n5\n6\n7\n8\n9\"\"\")) == \"\"\"1\n1\n1\n2\n2\n2\n2\n2\n3\"\"\"\n\n# check the correctness of solution on interview.io\ndef test_solution():\n    test_cases = [\n        [13, 5],\n        [24, 5],\n        [100, 8],\n        [2718281828, 7],\n        [1, 1],\n        [2, 1],\n        [3, 1],\n        [4, 2],\n        [5, 2],\n        [6, 2],\n        [7, 2],\n        [8, 2],\n        [9, 3],\n    ]\n    for n, answer in test_cases:\n        assert solution(str(n)) == str(answer)", "solution(\"\"\"\n5\n1\n5\n8\n9\n10\n\"\"\") == \"\"\"\n1\n2\n2\n2\n3\n\"\"\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n1\n8\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n1\n9\n\"\"\") == \"\"\"\n2\n\"\"\"\n\nassert solution(\"\"\"\n1\n10\n\"\"\") == \"\"\"\n3\n\"\"\"", "solution('''\n4\n4\n9\n14\n18\n''') == '''\n3\n3\n6\n7\n'''", "solution('''\n3\n3\n7\n15\n''') == '''\n1\n3\n6\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1\n''') == '''\n0\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n100\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n10\n1\n2\n4\n''') == '''\n2\n0\n0\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n9\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n16\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n10\n9\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1\n10\n9\n''') == '''\n0\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4\n2\n1\n10\n''') == '''\n1\n0\n0\n2\n'''\n", "solution('''4\n4\n10\n24\n29\n''') == '''3\n5\n7\n5\n'''", "solution(r'''\n4\n4\n5\n10\n7\n''') == r'''\n3\n3\n4\n3\n'''\n\n# submit solution to codeforces\nprint(solution(stdin))", "solution('''\n4\n4\n10\n100\n1000000000\n''') == '''\n3\n5\n20\n312689650\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3\n3\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n4\n4\n''') == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5\n5\n''') == '''\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n6\n6\n''') == '''\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n7\n7\n''') == '''\n4\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n8\n8\n''') == '''\n5\n5\n'''\n\n# check", "solution(stdin) == expected", "solution(test_data) == test_answer\n\nprint(solution(stdin))", "solution('''\n5\n5\n6\n7\n8\n9\n''') == '''\n3\n4\n4\n4\n5\n'''\nassert solution('''\n5\n5\n5\n5\n5\n5\n''') == '''\n3\n3\n3\n3\n3\n'''\n\nprint('GOOD JOB!')", "solution(stdin) == stdout", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution('''\n2\n20\n30\n''') == '''\n5\n6\n'''", "solution(\"\") == \"\"\n\n# submit solution to the judge system\nprint(solution(stdin))", "solution('''\n4\n9\n10\n11\n12\n''') == '''\n4\n4\n4\n5\n'''\n\n# check that the solution is correct for the given test cases\ndef tc(stdin: str) -> int:\n    from math import sqrt, ceil\n    from collections import defaultdict\n    output = {}\n    def p(i):\n        if i in output:\n            return output[i]\n        if i == 1:\n            output[i] = 1\n            return 1\n        elif i == 2:\n            output[i] = 2\n            return 2\n        else:\n            output[i] = 1 + p(i-1)\n            return 1 + p(i-1)\n    n = int(stdin)\n    return p(n)\n\nassert solution('''\n1\n9\n''') == '''\n4\n'''\n\nassert solution('''\n1\n10\n''') == '''\n4\n'''\n\nassert solution('''\n1\n11\n''') == '''\n4\n'''\n\nassert solution('''\n1\n12\n''') == '''\n5\n'''\n\n# upload the solution\nfrom solution_uploader import upload_solution\n\nupload_solution(solution,", "solution('''\n2\n10\n17\n''') == '''\n2\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n21\n34\n88\n''') == '''\n3\n4\n7\n'''\n\nassert solution('''\n2\n2\n2\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1\n1\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n4\n4\n4\n4\n''') == '''\n2\n2\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n2\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n2\n2\n2\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution(", "solution(\"3\\n1\\n4\\n10\") == \"1\\n2\\n4\"\n\n# check the correctness of solution for extreme inputs\nassert solution(\"2\\n100000000\\n1000000000\") == \"31622\\n31622\"", "solution(\"\"\"\n2\n25\n100\n\"\"\") == \"\"\"\n5\n15\n\"\"\"\n\nassert solution(\"\"\"\n3\n25\n100\n50\n\"\"\") == \"\"\"\n5\n15\n10\n\"\"\"\n\n# check the correctness of testcase\ndef solution_check(stdin: str, solution: str) -> bool:\n    try:\n        output = solution(stdin)\n        if output is None:\n            return False\n        output = output.strip()\n        lines = output.split(\"\\n\")\n        if len(lines) != int(stdin.split(\"\\n\")[0]):\n            return False\n        for line in lines:\n            if not line.isdigit():\n                return False\n            value = int(line)\n            if value < 0 or value > 10**9:\n                return False\n        return True\n    except Exception:\n        return False\n\n# testcases\ndef testcase():\n    for i in range(1, 1000):\n        stdin = f\"\"\"\n{i}\n\"\"\"\n        yield stdin, None\n\n# print the testcases\nfor stdin, solution in testcase():\n    print(solution_check(stdin, solution))", "solution('''\n1\n10\n''') == '''\n2\n'''\nassert solution('''\n2\n25\n10\n''') == '''\n3\n2\n'''\nassert solution('''\n3\n100\n1000\n100000\n''') == '''\n9\n28\n183\n'''", "solution(example_input) == example_output\n\n# check the correctness of solution on random input\nimport random\nimport time\n\nwhile True:\n    try:\n        number_of_tests = random.randint(1, 20)\n        test_input = [random.randint(1, 10**9) for _ in range(number_of_tests)]\n        test_input = \"\\n\".join(map(str, test_input))\n        test_output = []\n        for x in test_input.splitlines():\n            x = int(x)\n            test_output.append(sum(1 for i in range(1, x+1) if i**0.5 == int(i**0.5) or i**(1/3) == int(i**(1/3))))\n        test_output = \"\\n\".join(map(str, test_output))\n        start = time.time()\n        assert solution(test_input) == test_output\n        time_for_test = time.time() - start\n        if time_for_test > 3:\n            print(f\"Test fails.\\nInput:\\n{test_input}\\n\\nExpected output:\\n{test_output}\\n\\nActual output:\\n{solution(test_input)}\")\n            break", "solution(\"\") == \"\", \"empty input case\"\nassert solution(\"1\\n10\") == \"5\", \"input 1\"\nassert solution(\"3\\n10\\n80\\n100\") == \"5\\n19\\n22\", \"input 2\"\nassert solution(\"\") == \"\", \"empty input case\"\nassert solution(\"\") == \"\", \"empty input case\"\n\n# check the performance of solution\nimport timeit\n\nassert timeit.timeit(\"solution(\\\"\\\")\", number=100000, globals=globals()) < 1, \"empty input case\"\nassert timeit.timeit(\"solution(\\\"1\\n10\\\")\", number=100000, globals=globals()) < 1, \"input 1\"\nassert timeit.timeit(\"solution(\\\"3\\n10\\n80\\n100\\\")\", number=100000, globals=globals()) < 1, \"input 2\"\nassert timeit.timeit(\"solution(\\\"\\\")\", number=100000, globals=globals()) < 1, \"empty input case\"\nassert timeit.timeit(\"solution(\\\"\\\")\", number=100000, globals=globals()) < 1, \"empty input case\"", "solution('''3\n2\n3\n8''') == '''1\n2\n3'''\n\n# get the input\nt = int(input())\ninputs = []\nfor i in range(t):\n    n = int(input())\n    inputs.append(n)\n\n# solve the problem\noutputs = []\nfor n in inputs:\n    outputs.append(func(n))\n\n# print the outputs\nprint('\\n'.join(map(str, outputs)))", "(solution('''\n3\n6\n4\n6\n''') == '''\n4\n2\n4\n''')", "solution(\"\"\"\n2\n10\n20\n\"\"\") == \"\"\"\n5\n11\n\"\"\"\n\nassert solution(\"\"\"\n4\n4\n11\n20\n100\n\"\"\") == \"\"\"\n2\n4\n11\n35\n\"\"\"", "solution('''\n1\n1\n''') == '''\n1\n'''\nassert solution('''\n1\n4\n''') == '''\n2\n'''\nassert solution('''\n2\n4\n10\n''') == '''\n2\n3\n'''\nassert solution('''\n2\n10\n27\n''') == '''\n3\n4\n'''\nassert solution('''\n1\n27\n''') == '''\n4\n'''\nassert solution('''\n1\n10\n''') == '''\n3\n'''\nassert solution('''\n2\n2\n2\n''') == '''\n1\n1\n'''\nassert solution('''\n1\n1\n''') == '''\n1\n'''\nassert solution('''\n1\n3\n''') == '''\n1\n'''\nassert solution('''\n1\n12\n''') == '''\n3\n'''\nassert solution('''\n1\n28\n''') == '''\n4\n'''\nassert solution('''\n1\n100\n''') == '''\n9\n'''\nassert solution('''\n1\n50\n''') == '''\n8\n'''\nassert solution('''\n2\n5\n6\n''') == '", "solution('''\n3\n7\n9\n3\n''') == '''\n2\n2\n1\n'''\n\n# return the problem answer\nprint(solution('''\n3\n7\n9\n3\n'''))", "solution('''\n2\n2\n3\n''') == '''\n1\n2\n'''\n\n# get the input data\nwith open('input.txt', 'r') as f:\n    data = f.read()\n\n# submit the solution\nprint(solution(data))", "solution(inp) == out\n\n# get input for app\n# loop over the input files and generate output for each\n# each time you generate output, compare it with the expected one and print the result\n# of the comparisson on screen\nif __name__ == '__main__':\n    input_files = sorted(glob.glob(input_files_pattern))\n    for input_file in input_files:\n        with open(input_file, 'r') as f:\n            inp = f.read()\n        out = solution(inp)\n        expected_output_file = input_file.replace('input', 'output')\n        with open(expected_output_file, 'r') as f:\n            expected_out = f.read()\n        print(f'TEST: {input_file} - {\"OK\" if out == expected_out else \"FAIL\"}')", "(solution('''5\n5\n10\n11\n14\n15''') == '''3\n5\n5\n6\n7''')\n\n# get the input for the solution\ndef get_input() -> str:\n    with open('inputs/input.txt', 'r') as f:\n        return f.read()\n\n# get the output of the solution\ndef get_output() -> str:\n    with open('outputs/output.txt', 'r') as f:\n        return f.read()\n\n# check the correctness of solution with large input\nassert (solution(get_input()) == get_output())", "solution(\"\"\"\n2\n8\n20\n\"\"\") == \"\"\"\n2\n5\n\"\"\"\n\n# check performance of solution\nif __name__ == \"__main__\":\n    import timeit\n    print(timeit.timeit(\"assert solution('''\\n2\\n8\\n20\\n''') == '''\\n2\\n5\\n'''\", setup='from __main__ import solution', number=10))", "solution('''1\n10''') == '''7'''\n\nassert solution('''2\n9\n10''') == '''5\n7'''\n\nassert solution('''20\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '''1\n2\n2\n3\n3\n3\n4\n4\n4\n5\n5\n5\n5\n6\n6\n6\n6\n6\n7'''\n\n# push testcases to contest\n# ! /usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport sys\nfrom types import SimpleNamespace\nfrom collections import namedtuple\nimport os\n\n# python3 -m unittest --verbose test_solution.py\n\n\nclass TestCase(namedtuple('TestCase', ['stdin', 'expected'])):\n    @property\n    def stdin(self):\n        return self.stdin\n        # return self.stdin.split('\\n')\n\n    @property\n    def expected(self):\n        return self.expected\n\n\nTEST_CASES = [\n    TestCase(stdin='''1\n10''', expected=", "solution('''\n3\n10\n12\n13\n''') == '''\n4\n4\n4\n'''\n\nassert solution('''\n3\n1\n2\n3\n''') == '''\n1\n1\n1\n'''\n\n# check time complexity\nassert timeit(lambda: solution('''\n100\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112", "solution('''1\n10''') == '4', 'test 1'\nassert solution('''2\n2\n3''') == '2\\n3', 'test 2'\nassert solution('''1\n10000000000''') == '100000', 'test 3'\n\n# submit the solution\nfrom tests.send import send_solution\nsend_solution(solution)", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution(\"3\\n1\\n4\\n15\") == \"1\\n2\\n4\"\nassert solution(\"1\\n10\") == \"4\"\nassert solution(\"10\\n1\\n2\\n4\\n8\\n9\\n16\\n25\\n27\\n32\\n64\") == \"1\\n1\\n2\\n3\\n3\\n4\\n5\\n5\\n6\\n7\"", "solution('''\n2\n13\n24\n''') == '''\n4\n7\n'''", "solution('''\n3\n10\n20\n30\n''') == '''\n2\n3\n3\n'''\n\nif __name__ == '__main__':\n    # print(solution(sys.stdin.read()))\n    print(solution(open('input.txt').read()))", "solution('''3\n7\n10\n28''') == '''4\n5\n9'''", "solution(example_input) == example_output\n\nimport os\n\n# read the input\nwith open(os.path.join(os.path.dirname(__file__), 'input.txt'), 'r') as input_file:\n    input_data = input_file.read().splitlines()\n\n# solve the problem and write the answer\nwith open(os.path.join(os.path.dirname(__file__), 'output.txt'), 'w') as output_file:\n    output_file.write(str(solution(input_data)))", "solution(\n    '''2\n1\n3''') == '''0\n1'''", "solution(\"\"\"\n2\n10\n12\n\"\"\") == \"\"\"\n4\n5\n\"\"\"\n\n# test solution\nassert solution(stdin) == stdout", "solution('''\n3\n3\n4\n13\n''') == '''\n1\n2\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n10\n26\n''') == '''\n3\n8\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n26\n20\n''') == '''\n8\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n26\n20\n3\n''') == '''\n8\n4\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n9\n10\n''') == '''\n2\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n9\n10\n''') == '''\n2\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n100000000\n''') == '''\n11309768\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n13\n26\n25\n''') == '''\n4\n8\n7\n'''\n\n# check the", "solution('''\n3\n20\n10\n30\n''') == '''\n6\n2\n6\n'''", "solution('''\n2\n2\n3\n''') == '''\n1\n2\n'''\n\nif __name__ == '__main__':\n    # generate a testcase\n    import random\n    import time\n\n    # save a testcase\n    n = 100000\n    with open('testcase', 'w') as f:\n        print(n, file=f)\n        for _ in range(n):\n            print(random.randint(1,10**9), file=f)\n    # calculate the time limit\n    s = time.time()\n    for _ in range(n):\n        random.randint(1,10**9)\n    elapsed = time.time() - s\n    with open('time-limit', 'w') as f:\n        print(elapsed * 2 + 0.5, file=f)", "solution('''5\n7\n9\n15\n42\n1000''') == '''5\n7\n10\n17\n84'''"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop"], "sum_logprob": [-17.8801303331, -42.017749405229985, -38.05339606933002, -13.961674378600001, -49.985312102429994, -95.10318027206793, -30.361071151350007, -23.261546056539995, -90.339338557098, -28.004946003600004, -35.729004491419985, -62.055340202547534, -8.659311537999999, -15.147767369799999, -41.18791468392, -5.663060185999999, -8.0008456443, -14.315846624499995, -17.8840732028, -144.42447853442943, -80.60331703002846, -33.717832782049996, -148.94281444058004, -42.432578104963, -109.52758155542605, -75.11728941411296, -47.59196376507999, -21.5157174772, -37.671419545739994, -83.43573877795494, -39.72907227883999, -26.665709473939998, -148.17133938841388, -58.587254430025006, -38.314594523092, -130.64235463660518, -51.094158147499996, -55.39085552255001, -13.608813016059003, -36.01561138932198, -17.0911749365, -32.29528850385, -20.098502120399996, -47.04417729333703, -20.321596411999998, -26.3832320221, -108.8549431264991, -20.99635724356, -111.41491576424994, -36.578706016139996], "mean_logprob": [-0.3886984855021739, -0.43317267428072165, -0.7461450209672549, -0.6648416370761905, -0.7350781191533824, -0.4171192117195965, -0.23719586836992188, -0.726923314266875, -0.30113112852366, -0.93349820012, -0.6741321602154717, -0.20685113400849167, -1.0824139422499999, -0.7213222557047619, -0.49623993595084337, -0.6292289095555555, -0.400042282215, -0.5964936093541666, -0.7451697167833333, -0.48141492844809836, -0.26867772343342833, -0.5714886912211864, -0.5416102343293818, -0.5657677080661734, -0.3650919385180867, -0.2644974979370176, -0.4211678209299115, -0.7419212923172414, -0.7244503758796154, -0.27811912925984966, -0.7223467687061819, -0.3979956637901493, -0.7263300950412451, -0.40405003055189653, -0.3870161062938586, -0.43547451545535, -0.17031386049166666, -0.6223691631747191, -0.04536271005353, -0.3463039556665577, -0.7121322890208333, -0.4485456736645833, -0.83743758835, -0.35911585720104583, -0.9237089278181818, -0.7328675561694444, -0.3628498104216633, -0.7498699015557143, -0.5713585423807692, -1.1430845630043749]}
{"prompt": "'''\nVlad has n friends, for each of whom he wants to buy one gift for the New Year.\n\nThere are m shops in the city, in each of which he can buy a gift for any of his friends. If the j-th friend (1 \u2264 j \u2264 n) receives a gift bought in the shop with the number i (1 \u2264 i \u2264 m), then the friend receives p_{ij} units of joy. The rectangular table p_{ij} is given in the input.\n\nVlad has time to visit at most n-1 shops (where n is the number of friends). He chooses which shops he will visit and for which friends he will buy gifts in each of them.\n\nLet the j-th friend receive a_j units of joy from Vlad's gift. Let's find the value \u03b1=min\\\\{a_1, a_2, ..., a_n\\}. Vlad's goal is to buy gifts so that the value of \u03b1 is as large as possible. In other words, Vlad wants to maximize the minimum of the joys of his friends.\n\nFor example, let m = 2, n = 2. Let the joy from the gifts that we can buy in the first shop: p_{11} = 1, p_{12}=2, in the second shop: p_{21} = 3, p_{22}=4.\n\nThen it is enough for Vlad to go only to the second shop and buy a gift for the first friend, bringing joy 3, and for the second \u2014 bringing joy 4. In this case, the value \u03b1 will be equal to min\\{3, 4\\} = 3\n\nHelp Vlad choose gifts for his friends so that the value of \u03b1 is as high as possible. Please note that each friend must receive one gift. Vlad can visit at most n-1 shops (where n is the number of friends). In the shop, he can buy any number of gifts.\n\nInput\n\nThe first line of the input contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input.\n\nAn empty line is written before each test case. Then there is a line containing integers m and n (2 \u2264 n, 2 \u2264 n \u22c5 m \u2264 10^5) separated by a space \u2014 the number of shops and the number of friends, where n \u22c5 m is the product of n and m.\n\nThen m lines follow, each containing n numbers. The number in the i-th row of the j-th column p_{ij} (1 \u2264 p_{ij} \u2264 10^9) is the joy of the product intended for friend number j in shop number i.\n\nIt is guaranteed that the sum of the values n \u22c5 m over all test cases in the test does not exceed 10^5.\n\nOutput\n\nPrint t lines, each line must contain the answer to the corresponding test case \u2014 the maximum possible value of \u03b1, where \u03b1 is the minimum of the joys from a gift for all of Vlad's friends.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n3\n2 2\n1 2\n3 4\n2 3\n1 1 1\n1 1 1\n\n2 3\n1 1 1\n2 2 2\n\n2 3\n1 1 1\n2 2 2\n''') == '''\n3\n1\n2\n'''", "solution(\"\"\"3\n3 2\n1 5\n3 4\n5 2\n2 2\n2 3\n2 5\n2 2\n1 2\n3 4\n3 2\n1 1\n3 2\n3 4\n3 2\n1 2\n3 2\n3 4\n3 2\n1 2\n3 2\n\"\"\") == \"\"\"2\n2\n2\n2\n2\n2\n\"\"\"", "solution('''\n2\n\n2 2\n1 2\n3 4\n\n3 3\n1 2 3\n4 5 6\n7 8 9\n''') == '''\n3\n7\n'''\n\n# check the speed of solution\nassert solution('''\n2\n\n2 2\n1 2\n3 4\n\n3 3\n1 2 3\n4 5 6\n7 8 9\n''') == '''\n3\n7\n'''\n\n# check the speed of solution\nprint('Please wait...')\nassert solution('''\n2\n\n2 2\n1 2\n3 4\n\n3 3\n1 2 3\n4 5 6\n7 8 9\n''') == '''\n3\n7\n'''\n\nprint('Done!')", "solution('''\n1\n4 5\n1 2 3 4 5\n6 5 4 3 2\n3 4 5 6 1\n2 3 4 5 6\n''') == '1'\nassert solution('''\n1\n4 2\n1 2\n3 4\n5 6\n7 8\n''') == '3'\nassert solution('''\n2\n3 3\n1 2 3\n4 5 6\n7 8 9\n3 3\n3 2 1\n6 5 4\n9 8 7\n''') == '1\\n7'\n\n# print(solution('''\n# 1\n# 3 3\n# 1 2 3\n# 4 5 6\n# 7 8 9\n# '''))", "solution(\"\"\"1\n\n2 2\n1 2\n3 4\"\"\") == \"\"\"3\"\"\"", "solution(\"\"\"\n2\n2 2\n1 2\n3 4\n2 2\n1 2\n2 1\n\"\"\") == \"\"\"\n3\n1\n\"\"\"\n\nassert solution(\"\"\"\n3\n3 2\n5 4 2\n3 2 2\n5 5 2\n3 4\n1 2 3 4\n5 6 7 8\n9 8 7 6\n3 4\n5 4 3 2\n1 6 7 8\n9 8 7 6\n\"\"\") == \"\"\"\n7\n8\n2\n\"\"\"\n\nassert solution(\"\"\"\n4\n4 4\n1 2 3 4\n5 6 7 8\n9 8 7 6\n5 4 5 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 3\n1 2 3 4\n5 6 7 8\n9 8 7 6\n5 4\n1 2 3 4\n5 6 7 8\n9 8 7 6\n5 4\n1 2 3 4\n5 6 7 8\n9 8 7 6\n\"\"\") == \"\"\"\n10\n9\n10\n2\n\"\"\"\n\n# check the correctness of solution with invalid input data\nassert solution(\"\"\"\n2\n2 2\n1 2\n3 4\n2 2\n1 2\n3 4\n\"\"\") == \"\"\"\n3\n3\n\"\"\"\n\nassert solution(\"\"\"\n3\n3 2\n5 4 2\n3 2 2\n5 5 2\n3 4\n1 2 3 4", "solution('''\n1\n2 2\n1 2\n3 4\n''') == '3'\n\nassert solution('''\n2\n2 2\n1 2\n3 4\n\n2 3\n1 2 5\n3 4 6\n7 8 9\n''') == '3\\n6'", "solution('''\n1\n2 2\n1 2\n3 4\n''') == '3'\nassert solution('''\n1\n2 2\n2 1\n1 3\n''') == '2'\nassert solution('''\n1\n2 2\n2 2\n2 2\n''') == '2'\nassert solution('''\n1\n2 2\n1 5\n4 4\n''') == '4'\nassert solution('''\n1\n2 2\n2 4\n1 3\n''') == '2'\nassert solution('''\n1\n3 2\n1 5 2\n4 4 1\n1 5 2\n''') == '2'\nassert solution('''\n1\n3 3\n1 2 3\n4 5 6\n7 8 9\n''') == '1'\nassert solution('''\n1\n4 5\n1 2 3 4\n5 6 7 8\n9 8 7 6\n1 3 2 1\n2 4 6 8\n''') == '1'\nassert solution('''\n1\n5 4\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n''') == '1'\nassert solution('''\n1\n5 4\n10 9 8 7 6\n5 4 3 2 1\n10 9 8 7 6\n5 4 3 2 1\n''", "solution('''\n3\n3 3\n1 2 3\n2 1 3\n2 3 4\n2 2\n3 1\n3 1\n3 3\n1 2 3\n1 2 3\n1 2 3\n''') == '''\n3\n2\n1\n'''", "solution(\"\"\"\n1\n\n3 3\n1 2 3\n4 5 6\n7 8 9\n\"\"\") == \"\"\"\n6\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n\n2 3\n1 2 3\n4 5 6\n\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n\"\"\") == \"\"\"\n5\n6\n\"\"\"\n\nprint(\"\"\"\n#---------------------------\n# Solution\n#---------------------------\n\"\"\")\nprint(solution(\"\"\"\n#---- Copy from here ----\n5\n\n3 3\n1 2 3\n4 5 6\n7 8 9\n\n2 3\n1 2 3\n4 5 6\n\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n\n4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n\n4 5\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n\"\"\"), end=\"\")\n\nprint(\"\"\"\n#----------------------------\n# Output\n#----------------------------\n\"\"\")\nprint(solution(\"\"\"\n1\n\n3 3\n1 2 3\n4 5 6\n7 8 9\n\"\"\"), end=\"\")\n\nprint(\"\"\"\n#----------------------------\n# Output\n#----------------------------\n\"\"\")\nprint(solution(\"\"\"\n", "solution(\"7\\n\\n3 2\\n1 2\\n3 4\\n5 1\\n4 4\\n4\\n1\\n1\\n1\\n6 1\\n2 3 4 5 6 7\\n1 2\\n1 1\\n2 3\\n2 3\\n2 2\\n2 2\\n\") == \\\n'''\n3\n1\n1\n1\n7\n1\n2\n2\n2\n'''", "solution('''\n2\n2 2\n1 2\n3 4\n\n3 2\n1 2\n1 2\n1 2\n''') == '''\n3\n1\n'''\n\n# check the efficiency of solution\nimport timeit\nimport random\n\nM, N = 5, 10**3\n\ndef solution_checker(m, n):\n    vlad = [random.randint(1, 10**9) for _ in range(m * n)]\n    print(solution(f'1\\n{m} {n}\\n' + '\\n'.join(map(str, vlad))))\n\nt = timeit.timeit(f'{solution_checker.__name__}({M}, {N})', globals=globals(), number=1000)\nprint(f'{solution_checker.__name__}({M}, {N}) takes {t / 1000} s')", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution", "'3' == solution('''2\n2 2\n1 2\n3 4\n3 2\n3 4\n5 1\n1 4 7 5''')", "solution('''\n3\n3 4\n1 2 3 4\n5 6 7 8\n9 8 7 6\n2 3\n1 2 3\n4 5 6\n2 3\n10 8 6\n7 6 5\n''') == '''\n8\n6\n5\n'''", "solution(\"\") == \"\", \"case 0\"\nassert solution(\"\") == \"\", \"case 1\"\nassert solution(\"\") == \"\", \"case 2\"\n\n# submit solution\nprint(solution(sys.stdin.read()))", "solution('''\n2\n2 2\n2 3\n4 1\n2 2\n1 2\n3 4\n''') == '''\n3\n3\n'''", "solution(\"1\\n\\n2 2\\n1 2\\n3 4\") == '3'\nassert solution(\"2\\n\\n2 2\\n1 2\\n3 4\\n\\n2 2\\n2 2\\n3 4\") == '3\\n3'\nassert solution(\"3\\n\\n2 2\\n1 2\\n3 4\\n\\n2 2\\n2 2\\n3 4\\n\\n2 2\\n2 3\\n3 4\") == '3\\n3\\n3'\n\n# run the solution\nprint(solution(input()))", "solution('''\n1\n2 2\n1 2\n3 4\n''') == '3'\n\nassert solution('''\n2\n2 2\n1 2\n3 4\n2 2\n0 10\n0 10\n''') == '3\\n0'", "solution('''\n4\n4 2\n1 2\n1 2\n1 2\n1 2\n4 2\n1 2\n3 4\n5 6\n7 8\n4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n3 3\n1 2 3\n4 5 6\n7 8 9\n''') == '''\n3\n5\n5\n5\n'''\n\n# test cases\nprint(solution('''\n4\n4 2\n1 2\n1 2\n1 2\n1 2\n4 2\n1 2\n3 4\n5 6\n7 8\n4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n3 3\n1 2 3\n4 5 6\n7 8 9\n'''))", "solution('''\n2\n2 2\n1 2\n3 4\n2 2\n1 1\n1 1\n''') == '''\n3\n1\n'''", "solution(sample_input) == sample_output\n# get input for the kattis problem\ndef get_input() -> str:\n    '''Read input from the console.\n    \n    Returns:\n        problem input as a string\n    '''\n    return ''\n# get output for the kattis problem\ndef get_output(stdin: str) -> str:\n    '''Run the solution with the specified input.\n    \n    Args:\n        stdin: problem input\n    \n    Returns:\n        problem output\n    '''\n    return solution(stdin)\n# run the solution for sample input and output\ndef test():\n    '''Run the solution with the sample input and output.\n    \n    Returns:\n        True if output is correct, False otherwise\n    '''\n    return solution(sample_input) == sample_output\n# run the solution for kattis input and output\ndef run():\n    '''Run the solution with the kattis input and output.\n    \n    Returns:\n        problem output\n    '''\n    return solution(get_input())\n# run the solution locally or on kattis\nif __name__ == '__main__':\n    if len(sys.argv) == 1:\n        print(run())\n    elif len(sys.argv)", "solution(__doc__) == '''\n'''", "(\n    solution('''\n1\n2 2\n1 2\n3 4\n    ''') == '''\n3\n    '''\n)\n\nassert (\n    solution('''\n2\n2 2\n1 1\n1 1\n4 5\n4 4 4 4 4\n4 4 4 4 4\n4 4 4 4 4\n4 4 4 4 4\n4 4 4 4 4\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n    ''') == '''\n1\n4\n3\n    '''\n)\n\nassert (\n    solution('''\n1\n4 5\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n    ''') == '''\n100\n    '''\n)\n\n# test1\n\n# test2\n\n# test3\n\n# test4\n\n# test5\n\n# test6\n\n# test7\n\n# test8\n\n# test9\n\n# test10\n\n# test11\n\n# test12\n\n# test13\n\n# test14\n\n# test15\n\n# test16\n\n# test17\n\n# test18\n\n# test19\n\n# test20\n\n# test21\n\n# test22\n\n# test23\n\n# test", "(\n    solution(\"\"\"\n2\n2 2\n1 2\n3 4\n2 2\n5 3\n8 7\n    \"\"\") == \"\"\"\n3\n7\n    \"\"\".strip()\n)", "solution('''2\n2 2\n1 2\n3 4\n3 2\n1 2\n3 4\n2 3\n''') == '''3\n4\n'''\n\n# check the correctness of solution\nassert solution('''1\n2 2\n10 10\n9 10\n''') == '''9\n'''\n\n# check the correctness of solution\nassert solution('''1\n2 3\n1 2\n3 4\n5 6\n''') == '''5\n'''\n\n# check the correctness of solution\nassert solution('''1\n3 3\n1 1 1\n3 3 3\n2 2 2\n''') == '''2\n'''\n\n# check the correctness of solution\nassert solution('''3\n2 3\n1 1 1\n3 3 3\n2 2 2\n2 3\n1 1 1\n3 3 3\n2 2 2\n2 3\n1 1 1\n3 3 3\n2 2 2\n''') == '''2\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''3\n3 3\n1 2 3\n4 5 6\n7 8 9\n3 3\n1 2 3\n4 5 6\n7 8 9\n3 3\n1 2 3\n4 5 6\n7 8 9\n''') == '''1\n1\n1\n'''\n\n#", "solution('''\n2\n2 2\n1 2\n3 4\n5 6\n7 8\n''') == '''\n3\n7\n'''\n\n# fin.", "solution(\"\"\"\n3\n2 2\n1 2\n3 4\n2 3\n1 2 3\n4 5 6\n3 3\n1 2 3\n4 5 6\n7 8 9\n\"\"\") == \"\"\"\n3\n7\n9\n\"\"\"\n\n# input\n# t: int\n# m, n: int\n# p_ij: [[int]]\nimport sys\n\nsys.stdin = open(\"C:\\\\Users\\\\lhoa\\\\Downloads\\\\lhoa.inp\")\n\ninput = sys.stdin.read()\n\n# parse stdin\ninput = input.split(\"\\n\")\nt = int(input[0])\n\ninput = input[1:]\n\nfor i in range(t):\n    m, n = map(int, input[1].split())\n    p_ij = input[2:2+m]\n    for j in range(m):\n        p_ij[j] = list(map(int, p_ij[j].split()))\n    input = input[2+m:]\n    print(solution(m, n, p_ij))", "solution('''2\n2 2\n1 2\n3 4\n3 4\n5 5\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25''') == '''3\n20'''", "solution(stdin=example) == stdout_example\n\n# check performance of solution\nstdin = \"\"\nfor line in input_generator():\n    stdin += line\nstart = timer()\nsolution(stdin=stdin)\nprint(f\"solution duration: {timer() - start}\")", "solution(r'''\n''') == r'''\n'''\n\n# check the correctness of solution\nassert solution(r'''\n''') == r'''\n'''\n\nassert solution(r'''\n1\n3 3\n1 3 3\n2 4 5\n3 5 6\n''') == r'''\n4\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n2 3\n1 1 1\n2 2 2\n3 2\n1 1\n2 2\n3 3\n''') == r'''\n1\n3\n'''\n\nassert solution(r'''\n4\n4 2\n1 5\n2 1\n1 2\n1 2\n2 3\n2 1 5\n2 4\n4 1\n2 3\n2 3\n2 3\n2 3\n2 3\n''') == r'''\n1\n1\n1\n1\n'''\n\nassert solution(r'''\n5\n5 5\n1 1 1 1 1\n2 2 2 2 2\n3 3 3 3 3\n4 4 4 4 4\n5 5 5 5 5\n5 5\n1 1 1 1 1\n2 2 2 2 2\n3 3 3 3 3\n4 4 4 4 4\n5 5 5 5 5\n5 5\n5 5 5 5 5\n4 4 4 4 4\n3 3 3 3 3\n", "solution('''\n2\n2 2\n1 2\n3 4\n2 3\n1 2 3\n2 3 4\n''') == '''\n3\n3\n'''", "solution('''\n1\n2 2\n1 2\n3 4\n''') == '3\\n'\n\nassert solution('''\n1\n1 5\n1 2 3 4 5\n''') == '1\\n'\n\nassert solution('''\n2\n3 3\n1 2 3\n4 5 6\n7 8 9\n4 2\n1 2 3 4\n5 6 7 8\n''') == '1\\n4\\n'", "solution(stdin) == stdout\n\nprint('correct')", "solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''", "solution(test_case[0]) == test_case[1]\n\n# get input\nt = int(input())\n\n# get the array of test cases\ntest_cases = []\nfor i in range(t):\n    test_cases.append(input())\n\n# test the solution\nfor test_case in test_cases:\n    print(solution(test_case))", "\"1.0\" == solution(\"1.0 2.0 3.0\\n4.0 5.0 6.0\")\nassert \"5.0\" == solution(\"0.0 0.0 1.0\\n2.0 3.0 4.0\")\nassert \"1.0\" == solution(\"0.0 0.0 0.0\\n1.0 1.0 1.0\")\nassert \"4.0\" == solution(\"1.0 1.0 1.0\\n1.0 1.0 1.0\")\nassert \"2.0\" == solution(\"1.0 2.0 3.0\\n2.0 3.0 4.0\")\nassert \"5.0\" == solution(\"1.0 2.0 3.0\\n3.0 4.0 5.0\")\nassert \"1.0\" == solution(\"2.0 3.0 4.0\\n1.0 2.0 3.0\")\nassert \"4.0\" == solution(\"3.0 4.0 5.0\\n1.0 2.0 3.0\")\nassert \"2.0\" == solution(\"2.0 3.0 4.0\\n1.0 1.0 1.0\")\nassert \"1.0\" == solution(\"2.0 3.0 4.0\\n1.", "solution('''\n1\n\n2 2\n1 2\n3 4\n''') == '3'\n\nassert solution('''\n1\n\n2 2\n2 3\n4 1\n''') == '2'\n\nassert solution('''\n1\n\n4 5\n4 3 2 1 2\n3 1 2 1 1\n2 4 4 2 1\n1 2 2 1 1\n''') == '1'\n\nassert solution('''\n1\n\n3 4\n1 2 3 4\n2 3 4 5\n3 4 5 6\n''') == '1'\n\nassert solution('''\n1\n\n1 4\n1 2 3 4\n''') == '1'\n\nassert solution('''\n1\n\n4 1\n5\n5\n5\n5\n''') == '5'\n\nassert solution('''\n1\n\n4 1\n5\n5\n5\n5\n''') == '5'\n\nassert solution('''\n1\n\n3 3\n3 1 5\n2 6 4\n1 5 8\n''') == '1'\n\nassert solution('''\n1\n\n3 3\n3 5 1\n2 4 6\n1 8 5\n''') == '1'\n\nassert solution('''\n1\n\n4 4\n4 5 6 2\n6 7 1 2\n1 2 4", "solution(r'''\n1\n2 2\n1 2\n3 4\n''') == r'''\n3\n'''\n\nassert solution(r'''\n2\n2 2\n1 2\n3 4\n3 2\n4 1\n3 2\n1 2\n''') == r'''\n3\n2\n'''\n\nassert solution(r'''\n2\n2 3\n2 3 4\n1 3 4\n3 2\n4 1\n3 2\n1 2\n''') == r'''\n4\n2\n'''\n\nassert solution(r'''\n2\n3 3\n7 4 3\n2 3 5\n1 3 9\n3 3\n4 2 7\n3 2 1\n1 2 9\n''') == r'''\n3\n1\n'''\n\n# test performance\nimport timeit\nimport random\n\n# do not forget to disable the write to the stdout\n\n# n, m = 100, 100\n# A = [[str(random.randint(1, 10**9)) for _ in range(n)] for _ in range(m)]\n# stdin = f'1\\n{m} {n}\\n' + '\\n'.join(map(' '.join, A))\n\n# print(len(stdin.split('\\n')))\n# print(timeit.timeit('", "solution(\"\"\"\n1\n2 2\n1 2\n3 4\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n2\n2 2\n1 2\n3 4\n\n2 3\n2 3 4\n6 7 8\n\"\"\") == \"\"\"\n3\n\n6\n\"\"\"", "solution('''\n5\n\n4 5\n4 9 4 1 4\n1 5 7 9 1\n3 8 5 1 9\n3 7 8 6 5\n2 3\n5 1\n4 6\n1 2\n4 1\n4 9\n4 1\n4 5\n6 7\n5 6\n4 5\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n5 6\n1 2 3 4 5\n6 7 8 9 0\n7 1 2 3 4\n8 9 0 1 2\n9 0 1 2 3\n\n''') == '''\n1\n\n3\n\n3\n\n3\n\n3\n\n'''", "solution('''\n1\n2 2\n1 2\n3 4\n''') == '3'\n\nassert solution('''\n3\n3 3\n1 2 3\n4 5 6\n7 8 9\n2 3\n100 100 100\n100 100 100\n100 100 100\n4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n''') == '''\n3\n100\n3\n'''", "solution('''\n3\n3 2\n1 2\n3 4\n5 6\n2 2\n1 3\n2 4\n4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n''') == '''\n3\n4\n5\n'''", "solution('''\n2\n\n2 2\n1 2\n3 4\n\n3 2\n5 7\n9 8\n5 6\n''') == '''\n3\n7\n'''", "solution(stdin=open('tests/02.in')) == open('tests/02.out').read()", "solution('''2\n2 2\n1 2\n3 4\n2 3\n1 3\n2 3\n1 2''') == '3\\n3'\n\n# check that solution indeed returns a string\nassert isinstance(solution('''1\n1 1\n1'''), str)\n\n# check that solution returns the right answer for single-element input\nassert solution('''1\n1 1\n1''') == '1'\n\n# check that solution returns the right answer for multiple-element input\nassert solution('''3\n3 2\n1 2 3\n4 5 6\n2 3 4\n1 2 3\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n", "solution(\n    '''2\n\n2 2\n1 2\n3 4\n\n2 2\n1 100\n1 100''') == '3\\n1'", "solution(\"\") == \"\", \"Empty test case is wrong\"\nassert solution(\"\") == \"\", \"Example test case is wrong\"\nassert solution(\"\") == \"\", \"Wrong answer for input\"\nassert solution(\"\") == \"\", \"Wrong answer for input\"\n\n#stress testing solution\nfor _ in range(10000):\n    solution(\"\") == \"\"\n\n# Time complexity:\n# Space complexity:\n\nassert True, \"All tests pass\"", "solution('''\n2\n2 2\n1 2\n3 4\n4 4\n1 2 5 7\n4 1 1 4\n4 2 1 3\n1 3 5 8\n''') == '3\\n4\\n'", "solution(\"\"\"\n2\n2 2\n1 2\n3 4\n2 3\n2 3 1\n1 5 4\n3 1 6\n\"\"\") == \"\"\"\n3\n3\n\"\"\""], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-31.0025626432, -77.76946497470003, -51.73001509428997, -53.130854646788, -10.2373086564, -141.82772137664998, -23.645315485199998, -100.15767711617009, -36.16076832089999, -86.46915087738603, -86.1250152114, -104.0555471788519, -14.741549059736995, -36.57310543269999, -36.23324627059998, -20.407121003020002, -15.7417007061, -39.377514207138994, -24.8442007134, -47.578232087309, -10.022883637799998, -99.75650557371499, -9.29461837933, -78.33246688146811, -28.249798095899987, -85.49514774276649, -22.818518562700003, -135.83374616226214, -23.2026378263, -60.217006346299996, -125.79550719776401, -14.083316471499998, -32.64165176848701, -15.859519474999999, -11.40872969054, -48.04643106679, -100.40417984180205, -145.81629990855592, -176.67108640502602, -28.871754769400006, -163.48240641860002, -36.1460630825, -23.446862442500006, -25.631287149500004, -17.965244944559995, -103.6319475167799, -25.229976147399988, -81.06860235654, -45.5280544095, -28.929276413000004], "mean_logprob": [-0.4697357976242424, -0.9042961043569767, -0.304294206437, -0.34058240158197434, -0.4874908884, -0.4727590712555, -0.3529151564955224, -0.3338589237205667, -0.5927994806704918, -0.28823050292462, -0.8361651962271844, -0.4931542520324739, -0.04913849686579, -1.07567957155, -0.5844071979129032, -0.3779096482040741, -0.4142552817394737, -0.2874271110010146, -0.41407001189, -0.2782352753643801, -0.26376009573157894, -0.3325216852457167, -0.7149706445638462, -0.26110822293822733, -0.6420408658159091, -0.28498382580922166, -0.5704629640675, -0.5411703034353068, -0.38037111190655737, -0.8481268499478873, -0.41931835732588, -0.3520829117875, -0.3231846709751188, -1.0573012983333334, -0.3802909896846667, -0.5459821712135228, -0.3346805994726733, -0.48605433302852, -0.5889036213500867, -0.44418084260615387, -1.1352944890180556, -0.361460630825, -0.3552554915530303, -0.5960764453372093, -0.6909709594061538, -0.34543982505593335, -0.681891247227027, -0.8026594292726733, -0.8927069492058823, -0.7055921076341464]}
{"prompt": "'''\nDmitry has an array of n non-negative integers a_1, a_2, ..., a_n.\n\nIn one operation, Dmitry can choose any index j (1 \u2264 j \u2264 n) and increase the value of the element a_j by 1. He can choose the same index j multiple times.\n\nFor each i from 0 to n, determine whether Dmitry can make the MEX of the array equal to exactly i. If it is possible, then determine the minimum number of operations to do it.\n\nThe MEX of the array is equal to the minimum non-negative integer that is not in the array. For example, the MEX of the array [3, 1, 0] is equal to 2, and the array [3, 3, 1, 4] is equal to 0.\n\nInput\n\nThe first line of input data contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input. \n\nThe descriptions of the test cases follow.\n\nThe first line of the description of each test case contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line of the description of each test case contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 n) \u2014 elements of the array a.\n\nIt is guaranteed that the sum of the values n over all test cases in the test does not exceed 2\u22c510^5.\n\nOutput\n\nFor each test case, output n + 1 integer \u2014 i-th number is equal to the minimum number of operations for which you can make the array MEX equal to i (0 \u2264 i \u2264 n), or -1 if this cannot be done.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n-1 -1 1 -1\n\"\"\"\n\nassert solution(\"\"\"\n1\n6\n1 3 3 5 6 7\n\"\"\") == \"\"\"\n-1 3 3 -1 1 -1\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n1 1 1\n\"\"\") == \"\"\"\n-1 1 -1\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n1 0 0\n\"\"\") == \"\"\"\n-1 1 1\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n1 2 3\n\"\"\") == \"\"\"\n-1 -1 -1\n\"\"\"\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\n-1\n\"\"\"\n\nassert solution(\"\"\"\n2\n2\n1 2\n3\n1 2 3\n\"\"\") == \"\"\"\n-1 1 -1\n-1 -1 -1\n\"\"\"\n\nassert solution(\"\"\"\n1\n5\n1 2 2 3 4\n\"\"\") == \"\"\"\n-1 -1 -1 -1 -1\n\"\"\"\n\nassert solution(\"\"\"\n2\n4\n1 1 1 1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n-1 1 1 -1\n-1 -1 -1 -1\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n1 1 2\n\"\"\") ==", "solution('''4\n4\n3 1 0 2\n5\n3 3 1 4 0\n5\n3 3 3 3 3\n5\n2 0 3 1 0''') == '''1 2 3 3 3\n-1 -1 2 3 3\n-1 -1 -1 -1 -1\n-1 1 -1 2 -1'''", "solution('''3\n3\n3 1 0\n4\n3 3 1 4\n6\n1 0 1 2 0 3''') == '''-1 0 1 -1 -1 1\n-1 0 2 -1 1 1\n-1 0 1 -1 2 1'''", "solution(test_str) == test_output", "solution(\"\") == \"\", \"Your result is not correct\"\nprint(\"Your solution is correct\")", "solution('''\n1\n3\n0 0 1\n''') == '''\n-1 -1 -1 -1\n'''\n\n'''\nDmitry has a string s of length n consisting of lowercase English letters. He wants to choose two non-empty segments of the string and reverse them (in the sense of the classical string reversal).\n\nFor example, if Dmitry chooses segments s[l..r] and s[l\u2019..r\u2019], then their reversal can be performed as follows:\n\nReplace the substring s[l..r] with the substring s[r..l].\nReplace the substring s[l\u2019..r\u2019] with the substring s[r\u2019..l\u2019].\nYour task is to find the lexicographically smallest string obtained after at most k such operations.\n\nInput\n\nThe first line of input data contains three integers n, k, and m (1 \u2264 n \u2264 2 \u22c5 10^5, 0 \u2264 k \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 2 \u22c5 10^9) \u2014 the length of the string s, the number of allowed operations, and the number of the test group.\n\nThe second line of input data contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of the values n over all test cases", "solution('''\n1\n3\n0 0 0\n''') == '''\n-1 0 0 -1\n'''\n\nprint(solution('''\n1\n3\n0 0 0\n'''))", "solution(\"\") == \"\"", "solution(input_sample) == output_sample\n\n# get input from stdin\nfor _ in range(int(input())):\n    input_data = input()\n    print(solution(input_data))", "solution(r'''\n1\n3\n1 2 3\n''') == r'''\n-1 -1 1 -1\n'''\n\n# print solution to stdout\nwith open('/dev/stdin', 'r') as f:\n    print(solution(f.read()))", "solution('''\n2\n2\n1 1\n2\n0 2\n''') == '''\n0 0 -1\n-1 -1 0\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 1 1\n3\n1 0 2\n2\n0 0\n''') == '''\n1 0 -1 -1\n-1 0 -1 -1\n-1 -1 0 0\n'''\n\n# read data for input file\nwith open('input.txt', 'r') as file:\n    input_data = file.read()\n\n# write data for output file\nwith open('output.txt', 'w') as file:\n    file.write(solution(input_data))", "solution('''\n3\n3\n1 0 2\n3\n0 0 0\n3\n1 1 2\n''') == '''\n-1 0 1 1 -1\n0 0 0 -1\n1 1 -1\n'''", "solution(\"3\\n3\\n3 1 0\\n2\\n2 2\\n1\\n1\") == '-1 2 0\\n-1\\n-1', 'test 1'\nassert solution(\"1\\n4\\n0 0 0 0\") == '4 4 4 4\\n', 'test 2'\nassert solution(\"1\\n6\\n3 3 1 4 4 4\") == '-1 -1 -1 -1 -1 -1\\n', 'test 3'\nassert solution(\"3\\n3\\n3 1 0\\n2\\n2 2\\n1\\n1\") == '-1 2 0\\n-1\\n-1', 'test 4'\nassert solution(\"2\\n1\\n1\\n1\\n0\") == '-1\\n1\\n', 'test 5'\nassert solution(\"1\\n5\\n0 0 0 0 0\") == '5 5 5 5 5\\n', 'test 6'\nassert solution(\"1\\n3\\n3 3 3\") == '-1 -1 -1\\n', 'test 7'\nassert solution(\"1\\n4\\n0 0 1 0\") == '4 4 4 4\\n', 'test 8'\nassert solution(\"1\\n4\\n0 0 0 0\") == '4 4 4 4\\n', '", "solution('''\n2\n2\n0 0\n2\n1 1\n''') == '''\n-1 -1 -1\n0 1 2\n'''\n\nassert solution('''\n2\n3\n0 0 1\n3\n0 1 2\n''') == '''\n0 1 -1\n-1 0 -1\n'''\n\nassert solution('''\n2\n4\n1 0 0 2\n6\n0 0 0 1 1 0\n''') == '''\n1 -1 -1 1 -1\n-1 0 0 -1 -1 -1\n'''\n\nassert solution('''\n2\n4\n1 0 0 2\n3\n0 0 0\n''') == '''\n1 -1 -1 -1\n-1 0 0 -1\n'''\n\nassert solution('''\n2\n5\n1 0 0 2 0\n5\n0 0 0 1 1\n''') == '''\n1 -1 -1 -1 -1 -1\n-1 0 0 -1 -1 -1\n'''\n\nassert solution('''\n2\n5\n1 0 0 2 0\n5\n0 0 0 1 1\n''') == '''\n1 -1 -1 -1 -1 -1\n-1 0 0 -1 -1 -1\n'''\n\nassert solution('''\n2", "solution('''\n2\n2\n1 1\n5\n0 0 1 0 4\n''') == '''\n-1 -1\n-1 0 -1 1 -1 -1\n'''\n\n# get input and run solution\ninput = sys.stdin.read()\nprint(solution(input))", "solution('''\n''') == '''\n'''", "solution(TEST_CASES[0]) == '''4\n-1\n1\n2\n-1\n'''\nassert solution(TEST_CASES[1]) == '''-1\n-1\n-1\n-1\n-1\n'''\nassert solution(TEST_CASES[2]) == '''-1\n-1\n-1\n-1\n-1\n'''\nassert solution(TEST_CASES[3]) == '''3\n3\n3\n3\n3\n'''\nassert solution(TEST_CASES[4]) == '''-1\n-1\n-1\n-1\n-1\n'''\n\n# load tests from input file\nwith open('/tmp/tests', 'r') as f:\n    lines = f.readlines()\n    test_cases = [ lines[i:i+2] for i in range(0, len(lines), 2) ]\n\n# run all tests\nfor test_case in test_cases:\n    result = solution(test_case)\n    if result != '-1':\n        print(result)", "solution('''\n\n''') == '''\n\n'''", "solution(\"\") == \"\", \"check your solution\"\n\n# input case\nfrom fileinput import input\nfrom random import randint\nfrom sys import stderr\nfrom time import time\nwhile True:\n    t, n = randint(1, 10000), randint(1, 100000)\n    print(t, file=stderr)\n    print(t)\n    for _ in range(t):\n        print(n)\n        print(*[randint(0, n) for _ in range(n)])\n    start = time()\n    for line in input():\n        assert line == str(solution(line))\n    print(time() - start, file=stderr)", "solution(\"1\\n4\\n2 3 2 3\") == \"0 0 -1 0 -1\", \"error\"\nassert solution(\"1\\n5\\n1 0 1 2 3\") == \"0 0 1 1 -1\", \"error\"\nassert solution(\"1\\n1\\n0\") == \"0 -1\", \"error\"\nassert solution(\"1\\n3\\n0 1 2\") == \"0 -1 -1\", \"error\"\nassert solution(\"1\\n3\\n1 2 3\") == \"0 0 0\", \"error\"\nassert solution(\"1\\n3\\n3 2 1\") == \"0 0 0\", \"error\"\nassert solution(\"1\\n3\\n3 2 0\") == \"0 1 -1\", \"error\"\nassert solution(\"1\\n3\\n2 3 3\") == \"0 -1 -1\", \"error\"\nassert solution(\"1\\n3\\n2 3 1\") == \"0 -1 -1\", \"error\"\nassert solution(\"1\\n3\\n1 3 3\") == \"0 0 -1\", \"error\"\nassert solution(\"1\\n3\\n1 3 1\") == \"0 0 -1\", \"error\"\nassert solution(\"1\\n3\\n1 1 1\") == \"0 0 0\", \"error\"\nassert solution(\"1\\n3\\", "solution(r'''\n''') == r'''\n'''\n# stress testing solution \nimport random, string, itertools, math, collections\nfrom collections import defaultdict\n\ndef stress(N: int) -> dict:\n    pass\n\n# stress testing\ndef stresstest(L: list) -> None:\n    assert all(\n        solution(stdin=stdin) == stdout\n        for stdin, stdout in L\n    ), 'your solution is incorrect'\n\nif __name__ == '__main__':\n    stresstest([\n        (\n'''\n''',\n'''\n'''\n        ),\n        (\n'''\n''',\n'''\n'''\n        ),\n        (\n'''\n''',\n'''\n'''\n        ),\n        (\n'''\n''',\n'''\n'''\n        ),\n        (\n'''\n''',\n'''\n'''\n        ),\n        (\n'''\n''',\n'''\n'''\n        ),\n        (\n'''\n''',\n'''\n'''\n        ),\n        (\n'''\n''',\n'''\n'''\n        ),\n        (\n'''\n''',\n'''\n'''\n        ),\n        (\n'''\n''", "solution('''\n2\n4\n2 1 1 2\n4\n1 1 1 0\n''') == '''\n-1 0 -1 0 -1 1 -1 -1 2 -1\n-1 -1 -1 -1 1 -1 -1 -1 3 -1\n'''", "solution('''\n4\n4\n1 1 0 2\n5\n0 0 0 0 0\n5\n0 0 0 1 0\n5\n0 1 0 0 1\n''') == '''\n-1 1 0 1 -1\n-1 -1 -1 -1 -1\n-1 -1 -1 1 -1\n-1 1 -1 -1 2\n'''", "solution(test_test_test) == 'test'", "solution(\"\") == \"\"\n\n# print results and save to text file\ntext_file = open(\"Results.txt\", \"w\")\nprint(\"Output:\\n\", solution(\"\"), \"\\n\", file=text_file)\ntext_file.close()", "solution('''\n1\n3\n3 1 0\n''') == '''\n-1 -1 0 -1\n'''\n\nassert solution('''\n1\n3\n3 3 1 4\n''') == '''\n-1 0 -1 -1 0\n'''\n\nassert solution('''\n2\n2\n1 1\n5\n2 3 4 5 6\n''') == '''\n-1 -1\n-1 1 -1 2 -1\n'''", "solution(r'''\n1\n3\n1 0 2\n''') == r'''\n-1 -1 1 -1 -1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n2\n4\n2 1 3 2\n6\n0 1 0 0 1 0\n''') == r'''\n-1 -1 1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 0 -1 -1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n3\n0 1 1\n2\n0 0\n3\n1 1 1\n''') == r'''\n-1 -1 2 -1 -1\n-1 -1 -1 -1 -1\n-1 -1 -1 -1 -1\n'''", "solution('''\n3\n3\n1 2 3\n3\n3 3 1 4\n4\n4 4 4 4\n''') == '''\n1 -1 -1 -1 -1\n2 2 3 3 -1\n-1\n'''", "solution('''\n''') == '''\n'''", "solution('''\n1\n4\n1 2 4 0\n''') == '''\n-1 1 0 0 2\n'''\nassert solution('''\n2\n2\n0 1\n2\n1 0\n''') == '''\n-1 1\n-1 -1\n'''\n\n# get input and run the solution\nrun_solution(solution)", "solution('''\n1\n6\n1 2 0 3 4 0\n''') == '''\n-1 0 0 1 1 1\n'''\n\nassert solution('''\n1\n4\n1 1 1 1\n''') == '''\n4 4 4 4 4\n'''\n\nassert solution('''\n1\n3\n3 1 0\n''') == '''\n-1 0 1 2\n'''\n\nassert solution('''\n2\n5\n2 2 0 3 3\n5\n1 2 3 4 5\n''') == '''\n-1 0 1 2 2 2\n-1 1 2 3 4 5\n'''\n\n# execute in codeforces\n#solution(stdin)", "solution('''\n1\n7\n0 1 2 0 1 0 2\n''') == '''\n-1 0 -1 1 -1 2 3\n'''\n\n# check performance\n# time: 0.00 s, memory: 0.00 MB\n\n'''\n    assert func(...) == ret\n\n'''", "solution('''\n2\n2\n0 0\n2\n0 1\n''') == '''\n-1 1\n0 -1\n'''\n\nassert solution('''\n1\n4\n0 0 2 0\n''') == '''\n0 -1 2 -1\n'''\n\nprint('Test passed!')", "solution('''\n1\n7\n1 2 3 3 1 3 4\n''') == '''\n-1 -1 -1 2 2 -1 2\n'''\n\n# get input from stdin\nt = int(input())\nstdin = []\nfor _ in range(t):\n    n = int(input())\n    numbers = [int(x) for x in input().split()]\n    assert n == len(numbers)\n    stdin.append(str(n) + '\\n' + ' '.join(map(str, numbers)))\n    \n# run the solution\noutput = map(solution, stdin)\n\n# output the result\nprint(*output, sep='\\n')", "solution('''\n1\n3\n3 0 1\n''') == '''\n-1 -1 0 -1\n'''\n\nassert solution('''\n1\n6\n3 0 1 0 2 2\n''') == '''\n-1 -1 0 -1 0 -1 -1\n'''\n\nassert solution('''\n1\n6\n2 1 1 0 2 2\n''') == '''\n-1 -1 0 -1 -1 -1 -1\n'''\n\nassert solution('''\n1\n2\n2 0\n''') == '''\n-1 -1 0\n'''\n\nassert solution('''\n1\n2\n1 0\n''') == '''\n-1 -1 0\n'''\n\nassert solution('''\n1\n2\n0 0\n''') == '''\n-1 -1 0\n'''\n\nassert solution('''\n1\n2\n0 1\n''') == '''\n-1 -1 0\n'''\n\nassert solution('''\n1\n3\n0 0 0\n''') == '''\n-1 -1 0 0\n'''\n\nassert solution('''\n1\n3\n1 0 0\n''') == '''\n-1 -1 0 -1\n'''\n\nassert solution('''\n1\n3", "solution(\n'''\n2\n3\n1 2 3\n4\n1 0 0 2\n'''\n) == '''\n-1 0 1 1 2\n-1 1 -1 -1 2\n'''\n\n# check the correctness of solution\nassert solution(\n'''\n1\n5\n1 0 1 2 0\n'''\n) == '''\n-1 0 -1 1 1 2\n'''\n\n# add the new testcase here", "solution(\"\"\"2\n5\n1 3 2 4 5\n5\n1 1 1 0 4\"\"\") == \"\"\"0 -1 -1 -1 0 -1\n-1 -1 -1 -1 -1\"\"\"\n\nprint(solution(input()))", "(solution('''\n1\n5\n1 1 2 0 2\n''') == '''\n-1 -1 1 -1 -1 -1\n''')\n\n# check the correctness of solution\nassert (solution('''\n2\n3\n0 0 0\n4\n0 1 0 0\n''') == '''\n1 -1 -1\n-1 1 -1 -1\n''')\n\n# check the correctness of solution\nassert (solution('''\n2\n2\n2 2\n2\n2 0\n''') == '''\n-1 -1\n-1 -1\n''')\n\n# check the correctness of solution\nassert (solution('''\n1\n4\n2 3 2 3\n''') == '''\n-1 -1 1 -1 -1\n''')\n\n# check the correctness of solution\nassert (solution('''\n1\n4\n1 2 3 4\n''') == '''\n-1 -1 -1 -1 -1\n''')\n\n# check the correctness of solution\nassert (solution('''\n1\n4\n0 0 0 0\n''') == '''\n-1 -1 -1 -1 -1\n''')\n\n# check the correctness of solution\nassert (solution('''\n1\n4\n1 1 1 1\n''')", "solution(\"\"\"\n5\n5\n0 0 0 1 2\n5\n1 1 1 1 1\n5\n0 0 0 1 2\n5\n0 0 1 1 2\n5\n0 1 2 3 4\n\"\"\") == \"\"\"\n0 -1 0 -1 -1 -1 \n-1 -1 -1 -1 -1 -1 \n0 -1 0 -1 -1 -1 \n0 -1 -1 -1 -1 -1 \n0 -1 -1 -1 -1 -1 \n\"\"\"", "solution(\"\"\"\\\n2\n2\n1 2\n2\n2 2\n\"\"\") == \"\"\"\\\n-1 0\n-1 -1\n\"\"\"\n# test the performance of solution\nimport timeit\nassert timeit.timeit(lambda: solution(\"\"\"\\\n2\n2\n1 2\n2\n2 2\n\"\"\"), number=1) < 0.1", "solution('''\n1\n5\n0 0 0 1 1\n''') == '''\n0 1 2 -1 -1 -1\n'''\nassert solution('''\n2\n1\n0\n1\n1\n''') == '''\n0 -1\n-1 0\n'''\nassert solution('''\n3\n3\n1 2 3\n3\n0 0 0\n3\n1 0 0\n''') == '''\n-1 1 -1\n-1 0 -1\n-1 1 -1\n'''\n\nassert solution('''\n4\n4\n0 0 0 1\n4\n0 0 0 0\n4\n1 1 1 1\n4\n1 1 1 2\n''') == '''\n-1 -1 1 -1\n-1 -1 0 -1\n-1 -1 -1 -1\n-1 -1 -1 1\n'''\n\nassert solution('''\n5\n5\n0 0 0 1 1\n5\n0 0 0 0 0\n5\n1 1 1 1 1\n5\n1 1 1 1 2\n5\n0 1 2 3 4\n''') == '''\n-1 -1 1 -1 -1\n-1 -1 0 -1 -1\n-1 -1 -1 -1 -1\n-1 -1 -1 1 -1\n0 1 2 3 4", "solution(r'''\n2\n2\n0 0\n2\n0 1\n''') == r'''\n0 -1\n1 0\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n3\n0 0 0\n2\n1 0\n2\n0 1\n''') == r'''\n1 -1 -1\n-1 0\n-1 0\n'''\n\n# submit this code to the judge system\nif __name__ == '__main__':\n    import sys\n    n = int(sys.stdin.readline())\n    if n == 0:\n        print('')\n    else:\n        print(solution(sys.stdin.read()))", "solution(\"12\\n0 1 2 3 4 5 6 7 8 9 10 11\\n1 1 1 1 1 1 1 1 1 1 1 1\\n2 2 2 2 2 2 2 2 2 2 2 2\\n1 2 3 4 5 6 7 8 9 10 11 12\\n1 2 3 4 5 6 7 8 9 0 11 12\\n1 2 3 4 5 6 7 8 9 10 11 0\\n0 2 3 4 5 6 7 8 9 10 11 12\\n1 0 3 4 5 6 7 8 9 10 11 12\\n1 2 0 4 5 6 7 8 9 10 11 12\\n1 2 3 0 5 6 7 8 9 10 11 12\\n1 2 3 4 0 6 7 8 9 10 11 12\\n1 2 3 4 5 0 7 8 9 10 11 12\\n1 2 3 4 5 6 0 8 9 10 11 12\\n1 2 3 4 5 6 7 0 9 10 11 12\\n1 2 3 4 5 6 7 8 0 10 11 12\\n1 2 3 4 5 6 7 8 9 0 11 12\\n1 2 3 4 5 6 7 8 9 10 0 12\\n1 2 3 4 5 6 7 8 9 10 11 0\\n0 1 2 3 4 5 6 7 8 9 10 11\\n1 0 2 3 4 5 6 7 8 9 10 11\\n1 2 0 3 4 5 6 7 8 9 10 11\\n1", "solution('''3\n3\n1 2 0\n3\n3 3 1 4\n1\n1\n''') == '''0 -1 -1\n2 1 -1\n-1'''", "solution('''\n''') == '''\n'''", "solution(\"\"\"1\n3\n0 1 0\"\"\") == \"\"\"-1 -1 -1 0 -1\"\"\", \"failed case 1\"\n\nassert solution(\"\"\"2\n2\n2 1\n3\n1 2 3\"\"\") == \"\"\"-1 -1 0 -1\n-1 -1 -1 0\"\"\", \"failed case 2\"\n\nassert solution(\"\"\"4\n4\n1 0 3 0\n2\n0 1\n1\n2\n5\n2 1 1 1 1\"\"\") == \"\"\"-1 -1 -1 0 -1\n-1 0 -1\n-1 -1\n-1 -1 -1 -1 -1\"\"\", \"failed case 3\"", "solution('''2\n3\n1 0 0\n2\n1 1''') == '''0 -1 -1 -1 -1\n-1 0 -1 -1 -1'''\n\nassert solution('''2\n4\n1 1 2 2\n4\n1 2 3 4''') == '''0 -1 -1 -1 -1\n0 0 0 0 -1'''\n\nassert solution('''3\n1\n0\n2\n2 2\n3\n0 1 2''') == '''0 -1 -1 -1 -1\n-1 -1 0 -1 -1\n0 0 0 0 -1'''\n\n# --- Use the template below to add new test cases ---\nimport random, string\n\ndef gen_test_line(max_len: int, max_val: int) -> str:\n    n = random.randint(1, max_len)\n    s = [str(random.randint(0, max_val)) for _ in range(n)]\n    return ' '.join(s)\n\ndef gen_test_case(max_len: int, max_val: int) -> str:\n    t = random.randint(1, 10)\n    return '\\n'.join([str(t)] + [gen_test_line(max_len, max_val", "solution('''\n2\n3\n3 1 0\n4\n3 3 1 4\n''') == '''\n-1 0 0 -1\n0 -1 0 0\n'''\nassert solution('''\n5\n5\n5 3 3 3 5\n5\n5 3 3 3 5\n5\n5 3 3 3 5\n5\n5 3 3 3 5\n5\n5 3 3 3 5\n''') == '''\n-1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1\n'''\nassert solution('''\n1\n1\n0\n''') == '''\n0 -1\n'''\nassert solution('''\n1\n1\n1\n''') == '''\n-1 -1\n'''\nassert solution('''\n5\n2\n1 3\n2\n0 1\n2\n1 2\n2\n1 1\n3\n0 0 2\n''') == '''\n-1 -1\n-1 -1\n-1 -1\n0 -1\n0 0 -1\n'''\nassert solution('''\n1\n2\n0 1\n''') == '''", "solution(\"\"\"\n5\n5\n2 1 0 0 3\n5\n0 0 0 0 0\n5\n0 0 0 1 0\n5\n2 2 2 2 2\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\n-1 0 -1 0 -1\n-1 0 -1 0 -1\n-1 0 1 1 -1\n-1 0 -1 -1 -1\n-1 0 -1 -1 -1\n\"\"\"\n\n# check the performance of solution\nimport timeit\nimport random\ninput = str(random.randint(1, 10000))\nfor i in range(10000):\n    input += f\"\\n{random.randint(1, 200000)}\\n\"\n    for _ in range(random.randint(1, 200000)):\n        input += f\"{random.randint(0, 200000)} \"\n    input += \"\\n\"\ntimeit.timeit(lambda: solution(input), number=1)\n\n# contest submission\n# t = int(input())\n# for i in range(t):\n#     n = int(input())\n#     arr = list(map(int, input().split()))\n#     s = set(arr)\n#     for i in range(n+1):\n#         if i not in s:\n#             print(0", "solution('''\n3\n3\n3 1 0\n4\n3 3 1 4\n4\n1 1 2 2\n''') == '''\n-1 -1 2 3\n-1 0 1 4\n-1 0 2 -1\n'''"], "finish_reason": ["length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "stop"], "sum_logprob": [-109.70809330153803, -55.51879405663199, -40.67871740613599, -12.356591140799999, -23.061872394999998, -171.57160509542916, -21.99111400971, -5.50499293, -30.93205006625001, -30.323886700800003, -73.71954184541998, -32.78006114093, -102.39996529640896, -108.93401111422997, -39.68102668338001, -6.365467677000001, -100.85812678601602, -7.3535451912, -92.45522930830693, -108.53824306259611, -92.55369976395087, -44.81313411743, -43.212959996900004, -21.218637475, -46.43100342422501, -48.66509925461998, -76.64388324131494, -36.03312683213998, -6.365468489, -47.21911555503, -94.75112030268998, -88.67906561823999, -44.034737342609986, -82.74493659395, -83.69277269718903, -71.4724366348, -42.060463725100014, -87.01535807254899, -49.16573314643, -44.45732825574001, -99.33682698924513, -73.92668545179704, -51.638797545213045, -30.69459497976001, -6.374903235000001, -84.41770964240007, -134.96128942957895, -99.51659872430282, -123.7852911504681, -35.37466272616], "mean_logprob": [-0.36569364433846, -0.7210232994367792, -0.6561083452602581, -1.1233264673454546, -1.0482669270454545, -0.5719053503180966, -0.4398222801942, -0.9174988216666666, -0.631266327882653, -0.44593951030588236, -0.4388067966989286, -0.6184917196401887, -0.34133321765469665, -0.3631133703807667, -0.5588876997659155, -0.45467626264285715, -0.3909229720388217, -0.45959657445, -0.5814794296119937, -0.3617941435419867, -0.3085123325465027, -0.6789868805671212, -0.5083877646694118, -1.6322028826923076, -0.829125061146875, -0.44646880050110094, -0.4055231917529894, -0.6434486934310715, -0.4546763206428571, -0.5621323280360714, -0.5885162751719876, -1.2147817207978082, -0.5950640181433784, -0.5107712135429012, -0.27897590899063, -0.7007101630862745, -0.7379028723701755, -0.29005119357516335, -0.42021994142247865, -0.5421625397041464, -0.33112275663081664, -0.4535379475570368, -0.17212932515071, -0.6976044313581818, -0.4553502310714286, -0.5703899300162162, -0.44987096476526334, -0.331721995747676, -0.4126176371682267, -0.6316904058242857]}
{"prompt": "'''\nThe Hat is a game of speedy explanation/guessing words (similar to Alias). It's fun. Try it! In this problem, we are talking about a variant of the game when the players are sitting at the table and everyone plays individually (i.e. not teams, but individual gamers play).\n\nn people gathered in a room with m tables (n \u2265 2m). They want to play the Hat k times. Thus, k games will be played at each table. Each player will play in k games.\n\nTo do this, they are distributed among the tables for each game. During each game, one player plays at exactly one table. A player can play at different tables.\n\nPlayers want to have the most \"fair\" schedule of games. For this reason, they are looking for a schedule (table distribution for each game) such that:\n\n  * At any table in each game there are either \u230an/m\u230b people or \u2308n/m\u2309 people (that is, either n/m rounded down, or n/m rounded up). Different numbers of people can play different games at the same table.\n  * Let's calculate for each player the value b_i \u2014 the number of times the i-th player played at a table with \u2308n/m\u2309 persons (n/m rounded up). Any two values of b_imust differ by no more than 1. In other words, for any two players i and j, it must be true |b_i - b_j| \u2264 1. \n\n\n\nFor example, if n=5, m=2 and k=2, then at the request of the first item either two players or three players should play at each table. Consider the following schedules:\n\n  * First game: 1, 2, 3 are played at the first table, and 4, 5 at the second one. The second game: at the first table they play 5, 1, and at the second \u2014 2, 3, 4. This schedule is not \"fair\" since b_2=2 (the second player played twice at a big table) and b_5=0 (the fifth player did not play at a big table).\n  * First game: 1, 2, 3 are played at the first table, and 4, 5 at the second one. The second game: at the first table they play 4, 5, 2, and at the second one \u2014 1, 3. This schedule is \"fair\": b=[1,2,1,1,1] (any two values of b_i differ by no more than 1). \n\n\n\nFind any \"fair\" game schedule for n people if they play on the m tables of k games.\n\nInput\n\nThe first line of the input contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the test.\n\nEach test case consists of one line that contains three integers n, m and k (2 \u2264 n \u2264 2\u22c510^5, 1 \u2264 m \u2264 \u230an/2\u230b, 1 \u2264 k \u2264 10^5) \u2014 the number of people, tables and games, respectively.\n\nIt is guaranteed that the sum of nk (n multiplied by k) over all test cases does not exceed 2\u22c510^5.\n\nOutput\n\nFor each test case print a required schedule \u2014 a sequence of k blocks of m lines. Each block corresponds to one game, a line in a block corresponds to one table. In each line print the number of players at the table and the indices of the players (numbers from 1 to n) who should play at this table.\n\nIf there are several required schedules, then output any of them. We can show that a valid solution always exists.\n\nYou can output additional blank lines to separate responses to different sets of inputs.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(open('tests/21.in').read()) == open('tests/21.out').read()", "solution(\"\"\"2\n4 2 1\n4 2 2\"\"\") == \"\"\"4 1 2 3 4\n4 1 2 3 4\"\"\"\nassert solution(\"\"\"1\n6 3 2\"\"\") == \"\"\"3 1 3 5\n3 2 4 6\n3 2 4 6\"\"\"\nassert solution(\"\"\"2\n5 2 2\n5 2 3\"\"\") == \"\"\"3 1 2 5\n2 3 4\n3 1 2 5\n2 3 4\n3 1 2 5\"\"\"\nassert solution(\"\"\"1\n7 2 3\"\"\") == \"\"\"4 1 2 3 4\n3 5 6 7\n4 1 3 5 7\n3 2 4 6\"\"\"\nassert solution(\"\"\"1\n8 2 2\"\"\") == \"\"\"4 1 2 3 4\n4 5 6 7 8\"\"\"\nassert solution(\"\"\"1\n7 2 2\"\"\") == \"\"\"4 1 2 3 4\n3 5 6 7\"\"\"\nassert solution(\"\"\"1\n10 3 3\"\"\") == \"\"\"4 1 2 3 4\n3 5 6 7\n3 8 9 10\n4 1 2 7 10\n3 3 4 5\n3 5 6 8\n4 1 4 5 8\n3 2 3 6\n3 6 7 9\n4 2 3 7 9\"\"\"\nassert solution(\"\"\"1\n10 3 2\"\"\") == \"\"\"5 1 2 3 4 5\n5 6 7 8 9 10\"\"\"\nassert solution(\"\"\"1\n8 3 2\"\"\") == \"\"\"3 1 2 3\n", "solution(\"\"\"1\n5 2 2\"\"\") == \"\"\"2 1 2\n2 4 5\n2 5 1\n2 2 3 4\"\"\", \"Case #1: Wrong Answer\"\n\n# assert solution(\"\"\"1\n# 5 2 2\"\"\") == \"\"\"2 1 2\n# 2 4 5\n# 2 5 1\n# 2 2 3 4\"\"\", \"Case #1: Wrong Answer\"\n\n# assert solution(\"\"\"1\n# 5 2 2\"\"\") == \"\"\"2 1 2\n# 2 4 5\n# 2 5 1\n# 2 2 3 4\"\"\", \"Case #1: Wrong Answer\"", "solution(\"\"\"4\n3 1 3\n3 2 3\n3 2 2\n3 2 1\"\"\") == \"\"\"1 1\n1 2\n1 3\n2 1 2\n2 3\n3 1 2 3\"\"\", \"test 1\"\nassert solution(\"\"\"1\n2 2 2\"\"\") == \"\"\"1 1\n1 2\n2 1 2\"\"\", \"test 2\"\n\nassert solution(\"\"\"1\n5 2 2\"\"\") == \"\"\"2 1 2 3\n2 4 5\n2 1 4\n2 2 5\n2 3\"\"\", \"test 3\"\n\nassert solution(\"\"\"1\n5 2 1\"\"\") == \"\"\"3 1 2 3 4\n2 5\"\"\", \"test 4\"\n\n# tests for the task\nprint(\"The local tests are done.\")\n\n# run the tests\ntry:\n    from tests import test_solution\n    test_solution(\"\"\"4\n3 1 3\n3 2 3\n3 2 2\n3 2 1\"\"\", solution)\nexcept:\n    print(\"The online tests are not available.\")", "solution('''\n1\n5 2 2\n''') == '''\n2 1 2\n2 4 5\n2 5 1\n3 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 3 2\n''') == '''\n2 1 2\n3 3 4 5\n2 4 5\n3 2 3 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 2 2\n''') == '''\n2 1 2\n2 3 4\n2 3 4\n2 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n8 4 2\n''') == '''\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n2 5 6\n2 3 4\n2 7 8\n2 1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 1 4\n''') == '''\n1 1\n1 2\n1 1\n1 2\n1 1\n1 2\n1 1\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n8 4 3\n''') == '''\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n2 5 6\n2 3 4\n2 7 8\n2 1 2", "solution('''1\n5 2 2''') == '''1 2 3\n1 4 5\n\n1 2 5\n1 3 4'''\n\n# check the correctness of solution\nassert solution('''2\n10 3 4\n15 3 5''') == '''1 2 3\n1 4 5\n1 6 7\n1 8 9 10\n\n1 2 3\n1 4 5\n1 6 7\n1 8 9 10\n\n1 3 4\n1 5 6\n1 7 8\n1 9 10\n\n1 2 3\n1 4 5\n1 6 7\n1 8 9 10\n\n1 2 3\n1 4 5\n1 6 7\n1 8 9 10\n\n1 3 4\n1 5 6\n1 7 8\n1 9 10\n\n1 2 3\n1 4 5\n1 6 7\n1 8 9 10\n\n1 2 3\n1 4 5\n1 6 7\n1 8 9 10\n\n1 3 4\n1 5 6\n1 7 8\n1 9 10\n\n1 2 3\n1 4 5\n1 6 7\n1 8 9 10\n\n1 2 3\n1 4 5\n1 6 7\n1 8 9 10\n\n1 3 4\n1 5 6\n1 7 8\n1 9 10\n\n1 2 3\n1 4 5\n1 6 7\n1 8 9 10\n\n1 2 3\n1 4 5\n1 6", "solution('''\n2\n5 2 2\n10 3 5\n''') == '''\n2 3 1\n2 4 5\n3 5 1 2\n3 4 2 5\n3 1 4\n3 2 5\n3 1 5\n3 2 4\n3 1 2\n3 4 5\n'''", "solution('''\n3\n3 2 2\n3 2 3\n3 2 1\n''') == '''\n3 1 2 3\n3 1 2 3\n\n3 1 2 3\n3 1 2 3\n3 1 2 3\n\n3 1 2 3\n'''", "solution('''\n2\n5 2 2\n9 3 3\n''') == '''\n3 1 2 3\n2 4 5\n3 1 5 4\n2 2 3\n3 4 2 5\n3 1 3\n3 4 1\n3 5 2\n'''", "solution('''\n1\n5 2 2\n''') == '''\n3 1 2 3\n2 4 5\n3 1 5\n2 2 4\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 1 2\n5 2 2\n6 2 2\n''') == '''\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 3 4\n2 3 4\n2 3 4\n2 3 4\n2 5 6\n2 5 6\n2 5 6\n2 5 6\n'''", "solution('''\n2\n5 2 2\n5 2 3\n''') == '''\n3 1 2 3\n2 4 5\n\n2 1 2 3\n2 4 5\n2 1 3\n2 2 4\n2 1 5\n'''", "str(solution('1\\n5 2 2')) == '''\n3 1 2 3\n2 4 5\n3 5 2 4\n2 1 3\n'''", "solution(\"\"\"3\n3 1 2\n3 2 1\n3 2 2\"\"\") == \"\"\"2 1 2\n1 3\n2 1 2\n1 3\n1 1\n2 2 3\n2 1 3\n1 2\"\"\", \"Please, check the correctness of your solution manually\"\n\n# check performance of solution\nassert solution(\"\"\"5\n5 2 2\n5 2 1\n5 2 4\n5 2 3\n5 2 5\"\"\") == \"\"\"2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3 3 4 5\n2 1 2\n3", "solution(\"\") == \"\", \"not verified\"", "solution(\"\"\"\n4\n4 1 2\n5 2 2\n5 2 3\n4 2 3\n\"\"\") == \"\"\"\n4 1 2 3\n4 1 2 3\n4 1 2 3\n\"\"\"\n\n# run test\nsolution(\"\"\"\n4\n4 1 2\n5 2 2\n5 2 3\n4 2 3\n\"\"\")", "solution(\"\"\"2\n3 2 1\n3 2 2\"\"\") == \"\"\"3 1 2 3\n3 1 2 3\n\n3 1 2\n3 1 3\n3 2 3\"\"\", \"WA1\"\n\nassert solution(\"\"\"1\n5 2 2\"\"\") == \"\"\"3 1 2 3\n2 4 5\n2 1 5\n3 2 3 4\"\"\", \"WA2\"", "solution(\"0\") == \"0\", \"TEST 0 FAILED\"\nassert solution(\"1 2 3\") == \"1 2 3\", \"TEST 1 FAILED\"\nassert solution(\"12 3 4\") == \"1 2 3\\n\\n4 5 6\\n\\n7 8 9\\n\\n10 11 12\", \"TEST 2 FAILED\"\n\nfor test in range(3, 10):\n    assert solution(f\"{test}\") == f\"{test}\", f\"TEST {test} FAILED\"\n\ntest = 10\nassert solution(f\"{test}\") == f\"{test}\", f\"TEST {test} FAILED\"\n\n# test the performance of solution\nfrom random import randint\nfrom time import time\n\ntest_string = \"\"\n\nfor i in range(1000000):\n    test_string += f\"{randint(1,1000)} {randint(1,1000)} {randint(1,1000)}\\n\"\n\nstart = time()\nsolution(test_string)\nend = time()\nprint(f\"performance: {end - start}\")\n\n# test the performance with python solution\nfrom random import randint\nfrom time import time\n\ntest_string = \"\"\n\nfor i in range(1000000):\n    test_string +=", "solution(get_default_input()) == get_default_output()\n\n# get the input and print output\n# stdin = get_default_input()\nstdin = get_large_input()\nprint(solution(stdin))", "solution(r'''\n2\n2 1 2\n5 2 2\n''') == r'''\n1 1\n1 2\n2 1 2\n3 2 3 4\n5 1 2\n5 3 4 5\n'''\n\n# check the speed of solution\nimport timeit\n\ninput = f'''\n{'\\n'.join(map(str, range(1, 2 * (10 ** 5) + 1)))}\n'''\nsolution_time = timeit.timeit(\n    lambda: solution(input),\n    number=1,\n    setup='from __main__ import solution',\n)\nprint(f'{solution_time:.3f} s')", "(solution('''\n2\n6 2 2\n6 2 3\n''') == '''\n3 1 2\n3 3 4\n3 5 6\n3 1 2\n3 4 5\n3 3 6\n3 1 2\n3 4 5\n3 3 6\n''')\nassert (solution('''\n3\n3 1 2\n3 1 3\n3 1 4\n''') == '''\n3 1 2 3\n3 1 2 3\n3 1 2 3\n3 1 2 3\n''')\nassert (solution('''\n1\n4 2 1\n''') == '''\n2 1 2\n2 3 4\n''')\n\n# fast IO\nimport os\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\nfd = open('input.txt', 'r')\nstdin = fd.readlines()\nfd.close()\nfd = open('output.txt', 'w')\nfd.write(solution(stdin))\nfd.close()", "solution(\"\"\"1\n5 2 2\"\"\") == \"\"\"2 1 2\n3 3 4 5\n2 1 2\n3 4 5 3\"\"\"\n\nassert solution(\"\"\"4\n1 1 1\n2 1 2\n2 2 1\n5 2 2\"\"\") == \"\"\"1 1\n1 1\n1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n1 1\n1 1\n1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\"\"\"", "solution(\"\") == '', 'The result is incorrect'", "solution(solution_example.__doc__) == solution_example.__doc__\n\n# get the input\ninput = ''\nfor line in sys.stdin:\n    input += line\n\n# print the result\nprint(solution(input))", "solution('''\n10\n2 1 3\n3 1 3\n3 2 3\n3 3 3\n2 2 3\n3 1 2\n3 2 2\n3 3 2\n3 1 1\n3 2 1\n''') == '''\n2 1 2\n2 1 2\n2 1 2\n\n3 1 2 3\n3 1 2 3\n3 1 2 3\n\n3 1 2\n3 3 4\n\n3 1 2\n3 3 4\n3 3 4\n\n2 1 2\n2 1 2\n2 1 2\n\n3 1 2 3\n3 1 2 3\n\n3 1 2\n3 3 4\n\n3 1 2\n3 3 4\n\n3 1 2 3\n\n3 1 2\n3 3 4\n'''", "solution(\"6\\n20 10 1\\n4 2 2\\n4 2 3\\n4 2 4\\n2 1 3\\n2 1 2\\n2 1 1\") == '''20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n\n2\n1 2\n3 4\n\n2\n1 2\n3 4\n\n2\n1 2\n3 4\n\n2\n1 2\n\n2\n1 2\n\n2\n1 2'''", "solution(r'''\n10\n5 2 2\n10 4 3\n16 3 4\n''') == r'''\n2 1 2\n3 3 4 5\n3 1 4 5\n3 2 3 6\n2 2 7\n1 8\n\n3 1 2 3\n3 4 5 6 7\n3 8 9 10 4\n1 10\n2 5 9\n2 6 8\n\n4 1 2 3 4\n4 5 6 7 8\n4 9 10 11 12\n4 13 14 15 16\n'''", "solution('''\n4\n4 2 2\n4 2 1\n4 2 3\n8 2 2\n''') == '''\n2 1 2\n2 3 4\n2 1 2\n2 3 4\n\n2 1 2\n2 3 4\n\n2 1 2\n2 3 4\n2 1 2\n2 3 4\n\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n'''", "solution(\"\"\"\n2\n5 2 2\n5 2 3\n\"\"\") == \"\"\"\n2 1 2\n3 3 4 5\n\n2 3 4\n2 1 2\n2 5 1\n\"\"\"\n\n# check the speed of solution\nfrom utils import measure_time\nprint(measure_time(solution, stdin=\"\"\"\n10\n10 5 2\n10 5 3\n10 5 4\n10 5 5\n10 5 10\n10 10 2\n10 10 3\n10 10 4\n10 10 5\n10 10 10\n\"\"\"))", "solution(\"\"\"1\n5 2 2\"\"\") == \"\"\"2 1 2\n2 4 5\n2 5 1\n3 1 3 4\"\"\"\n\nassert solution(\"\"\"2\n5 2 2\n2 1 2\"\"\") == \"\"\"2 1 2\n2 4 5\n2 5 1\n3 1 3 4\n\n1 1\n1 2\"\"\"\n\nassert solution(\"\"\"1\n5 2 4\"\"\") == \"\"\"2 1 2\n2 4 5\n2 4 5\n2 1 2\n2 5 1\n2 1 2\n2 4 5\n2 5 1\"\"\"\n\nassert solution(\"\"\"1\n10 3 4\"\"\") == \"\"\"3 1 2 3\n3 4 5 6\n3 7 8 9\n3 10 1 4\n3 7 10 3\n3 1 8 5\n3 4 9 6\n3 2 7 10\"\"\"\n\n# to run the tests locally, use the following command:\n# python -m pytest -v tests.py", "solution('''\n3\n5 2 2\n5 2 1\n5 2 3\n''') == '''\n3 1 2 3\n2 4 5\n3 1 5 2\n4 3 4\n2 1 5\n3 2 3 4\n2 1 4\n1 2\n1 5\n1 4\n1 3\n'''", "'''3\n3 1 1\n1\n2\n3\n1 2 2\n1\n2\n2\n3\n4\n3 2 2\n2\n1 3\n2 4\n2\n5 1\n4''' == solution('''3\n5 2 2\n5 2 1''')", "solution(\"\") == \"\", \"Test #1\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #2\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #3\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #4\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #5\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #6\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #7\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #8\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #9\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #10\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #11\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #12\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #13\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Test #14\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\",", "solution(case1) == expected1, 'case 1'\nassert solution(case2) == expected2, 'case 2'\n\n# init the input for program\ninput = sys.stdin.readline\n\n# run the solution for given input\nsolution(input())", "solution('''\n2\n5 2 2\n1 1 5\n''') == '''\n2 1 2\n3 4 5\n\n1 1\n'''", "solution('''\n1\n5 2 2\n''') == '''\n3 1 2 3\n2 4 5\n2 5 4\n3 1 3 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 2 3\n''') == '''\n3 1 2 3\n2 4 5\n3 1 2 3\n2 4 5\n3 1 2 3\n2 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 2 1\n''') == '''\n3 1 2 3\n2 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6 3 2\n''') == '''\n2 1 2\n2 3 4\n2 5 6\n2 1 3\n2 4 5\n2 2 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6 3 3\n''') == '''\n2 1 2\n2 3 4\n2 5 6\n2 1 3\n2 4 5\n2 2 6\n2 1 2\n2 3 4\n2 5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n8 2 3\n''') == '''\n4 1 2 3 4\n4 5 6 7 8\n4 1 3 5 7\n4 2 4 6 8\n", "solution('''\n1\n6 4 2\n''') == '''\n2 1 4\n2 2 5\n2 3 6\n2 1 5\n2 2 4\n2 3 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 2 2\n''') == '''\n3 1 2 3\n2 4 5\n3 4 5 1\n2 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n9 3 1\n''') == '''\n3 1 2 3\n3 4 5 6\n3 7 8 9\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 2 3\n''') == '''\n2 1 2\n3 3 4 5\n2 1 3\n2 2 4\n3 1 4 5\n2 2 3\n2 1 4\n3 2 3 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 2 1\n''') == '''\n2 1 2\n2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 3 1\n''') == '''\n2 1 2\n2 3 4\n2 5 -1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6 3 2\n''')", "solution('''\n1\n5 2 2\n''') == '''\n3 1 2 3\n2 4 5\n2 5 1\n3 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 2 2\n''') == '''\n2 1 2\n2 3 4\n2 1 3\n2 2 4\n'''\n\n# no tests were provided in the problem text\n# check the correctness of solution\nassert solution('''\n3\n6 3 2\n6 3 3\n6 3 4\n''') == '''\n2 1 2\n2 3 4\n2 5 6\n2 1 3\n2 4 6\n2 2 5\n2 1 2\n2 3 4\n2 5 6\n2 1 3\n2 4 6\n2 2 5\n2 1 2\n2 3 4\n2 5 6\n2 1 3\n2 4 6\n2 2 5\n'''", "solution('''\n2\n8 4 2\n5 3 2\n''') == '''\n4 4 3 8\n4 5 1 7\n4 1 5 8\n4 2 6 7\n4 2 4 6\n4 3 1 5\n'''", "solution('''\n2\n5 2 2\n8 3 2\n''') == '''\n3 1 2 3\n2 4 5\n\n3 1 2 3\n3 4 5 6\n3 7 8\n'''\n\nassert solution('''\n1\n7 3 3\n''') == '''\n3 1 2 3\n3 4 5 6\n3 7\n\n3 1 2 3\n3 4 5 7\n2 6\n\n3 1 2 4\n3 3 5 6\n2 7\n\n3 1 2 4\n3 3 5 7\n2 6\n\n3 1 3 4\n3 2 5 6\n2 7\n\n3 1 3 4\n3 2 5 7\n2 6\n'''\n\nassert solution('''\n1\n6 3 2\n''') == '''\n2 1 2\n2 3 4\n2 5 6\n\n2 1 3\n2 2 4\n2 5 6\n\n2 1 4\n2 2 3\n2 5 6\n\n2 1 5\n2 2 3\n2 4 6\n\n2 1 6\n2 2 3\n2 4 5\n'''\n\n# submit at codeforces\nimport requests\nimport os.path\n\nfilename = os.path.basename(__file__)\n\nurl = 'https://codeforces.com/problemset/problem/1231/D'\nr = requests.", "solution('''\n\n''') == '''\n\n'''\n# stress testing\nimport os\nimport random\nimport string\nimport time\n\nwhile True:\n    rnd_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(10**5))\n    print(rnd_string)\n    print(solution(rnd_string))\n    time.sleep(0.1)", "solution('''\n1\n5 2 2\n''') == '''\n2 1 2 3\n3 4 5 1\n'''\n\nassert solution('''\n1\n4 2 2\n''') == '''\n2 1 2\n2 3 4\n'''\n\nassert solution('''\n1\n4 3 2\n''') == '''\n1 1\n1 2\n1 3\n1 4\n'''\n\nassert solution('''\n1\n3 2 2\n''') == '''\n2 1 2\n1 3\n'''\n\nassert solution('''\n1\n3 3 1\n''') == '''\n1 1\n1 2\n1 3\n'''\n\nassert solution('''\n1\n1 1 1\n''') == '''\n1 1\n'''\n\nassert solution('''\n1\n2 1 1\n''') == '''\n2 1 2\n'''\n\nassert solution('''\n1\n2 2 1\n''') == '''\n1 1\n1 2\n'''\n\nassert solution('''\n1\n2 2 2\n''') == '''\n1 1\n1 2\n2 1 2\n'''\n\nassert solution('''\n1\n10 2 2\n''') == '''\n5 1 2 3 4 5\n5 6 7 8 9 10\n'''", "solution('''3\n3 1 3\n3 2 3\n3 2 2''') == '''\n3 1 2 3\n3 1 2 3\n3 1 2 3\n\n2 1 2 3\n2 1 2 3\n2 1 2 3\n1 3\n1 3\n\n2 1 2 3\n2 1 2 3\n1 3\n1 3'''\n\nprint(solution('''3\n3 1 3\n3 2 3\n3 2 2'''))", "solution('''\n4\n4 2 1\n5 2 2\n3 1 2\n5 3 2\n''') == '''\n2 1 2\n2 3 4\n2 1 3\n1 2\n1 5\n2 4 5\n3 1 2 3\n1 4\n1 5\n'''", "solution(\"1\\n5 2 2\") == \"\"\"2 1 2\\n3 4 5\\n3 5 4\\n2 1 3\"\"\"\nassert solution(\"1\\n5 2 3\") == \"\"\"2 1 2\\n3 4 5\\n3 5 4\\n2 1 3\\n2 3 1\\n3 4 5\"\"\"\nassert solution(\"2\\n5 2 3\\n10 3 5\") == \"\"\"2 1 2\\n3 4 5\\n3 5 4\\n2 1 3\\n2 3 1\\n3 4 5\\n3 1 3\\n2 5 4\\n2 3 2\\n2 2 5\\n2 4 1\\n2 1 4\\n2 5 2\\n2 2 3\\n2 4 5\\n2 5 1\\n2 3 4\\n2 1 2\\n2 2 1\\n2 4 3\\n2 5 5\\n2 3 1\\n2 1 5\\n2 5 3\\n2 3 2\\n2 2 4\\n2 4 5\\n2 5 1\\n2 3 4\\n2 1 2\\n2 2 1\\n2 4 3\\n2 5 5\\n2 3 1\\n2 1 5\\n2 5 3\\n2 3 2\\n2 2 4\\n2 4 5\\n2 5 1\\n2 3 4\\n2 1 2\\n", "solution(\"\"\"4\n5 2 2\n5 2 1\n5 2 3\n5 2 5\"\"\") == '''2 3 5\n3 1 4\n2 3 5\n3 1 4\n\n2 5\n3 1 4\n\n2 5\n3 1 4\n2 5\n3 1 4\n2 5\n3 1 4\n\n2 5\n3 1 4\n2 5\n3 1 4\n2 5\n3 1 4\n2 5\n3 1 4\n2 5\n3 1 4'''\n\n# check performance\nimport timeit\nprint(timeit.timeit(\"\"\"solution(\"\"\"\\\n    \"\"\"4\n5 2 2\n5 2 1\n5 2 3\n5 2 5\"\"\")\"\"\", number=100, globals=globals()))", "solution(stdin='2\\n5 2 2\\n6 3 2') == '''3 1 2 3\n2 4 5\n3 4 2 5\n2 1 3\n3 1 3 5\n2 2 4'''\n\n# check the correctness of solution\nassert solution(stdin='2\\n5 2 3\\n10 5 5') == '''3 1 2 3\n2 4 5\n3 1 4 5\n2 2 3\n3 1 2 4\n2 3 5\n3 1 2 3\n2 4 5\n3 1 3 5\n2 2 4\n2 1 2\n2 3 4\n2 1 3\n2 2 4\n2 1 2\n2 3 4\n2 1 2\n2 3 4\n3 1 2 3\n2 4 5\n3 1 3 5\n2 2 4\n3 1 2 3\n2 4 5\n3 1 3 5\n2 2 4\n3 1 2 3\n2 4 5\n3 1 3 5\n2 2 4\n3 1 2 3\n2 4 5\n3 1 3 5\n2 2 4\n3 1 2 3\n2 4 5\n3 1 3 5\n2 2 4\n3 1 2 3\n2 4 5\n3 1 3 5\n2 2 4\n3 1 2 3\n2 4 5\n3 1 3 5\n2 2 4\n3 1 2 3\n2 4 5\n3 1 3 5\n2 2 4\n3", "solution(r'''\n6\n3 1 1\n3 1 2\n3 2 1\n3 2 2\n3 3 1\n3 3 2\n''') == r'''\n3 1 2 3\n\n3 1 2 3\n3 1 2 3\n\n2 1 2\n1 3\n\n2 1 2\n1 3\n2 1 2\n1 3\n\n1 1\n1 2\n1 3\n\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n'''", "solution(r'''\n3\n5 2 2\n5 2 1\n5 2 3\n''') == r'''\n3 1 2 3\n2 4 5\n2 1 4\n3 2 5 3\n2 1 4\n3 2 5 1\n'''", "solution('''\n5\n5 2 2\n5 3 2\n5 4 1\n5 5 1\n5 4 2\n''') == '''\n2 3 4\n1 5\n3 1 2\n4 5\n3 1 2\n4 5\n3 1 2\n4 5\n4 2 4\n1 3 5\n4 2 4\n1 3 5\n4 2 4\n1 3 5\n4 2 4\n1 3 5\n2 3 4\n1 5\n2 3 4\n1 5\n'''", "(solution(\"\"\"2\n2 1 1\n2 2 1\"\"\") == \"\"\"1 1 2\n1 1 2\n\"\"\")"], "finish_reason": ["stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-15.563547188430004, -100.81790956840901, -36.11716521125604, -114.94803261967004, -59.90863586793499, -52.07883949501007, -34.88010060266, -24.139960912499994, -26.771655792999994, -35.75124207982999, -21.659438159749996, -17.840833202150005, -79.19136772216987, -15.259176294000001, -39.74303284189998, -38.90163509315001, -125.64074050310003, -44.699284897510005, -81.82585272491998, -78.90251190264696, -43.97399088701997, -18.761178863999998, -32.360197746859996, -50.77831181126997, -55.96095948877499, -63.7121382175, -29.706203263100004, -57.950053498085026, -91.24656812489499, -38.10630385964999, -52.59601672265001, -19.094864358608014, -56.64219070558998, -19.693418569400002, -48.16044124917322, -74.76464254723199, -66.47643463251997, -40.4017145422, -93.908255082292, -51.25958152730202, -55.332187795749014, -42.240586493529996, -34.96228710573, -87.46954081595882, -67.32943742285599, -80.06449341559002, -30.586249523270002, -30.258907477429997, -61.05002429086, -20.8659162527], "mean_logprob": [-0.64848113285125, -0.3360596985613633, -0.27570355123096185, -0.5086196133613717, -0.19969545289311666, -0.17359613165003332, -0.5284863727675757, -0.402332681875, -0.4537568778474576, -0.29304296786745904, -0.3938079665409091, -0.48218468113918916, -0.2639712257405667, -1.387197844909091, -0.5299071045586666, -0.4686943987126506, -0.4188024683436667, -0.8127142708638182, -0.5279087272575483, -0.34156931559587445, -0.37908612833637934, -1.4431676049230768, -0.5579344439113794, -0.31152338534521473, -0.49965142400691964, -0.5792012565227272, -0.3264417941, -0.4869752394797059, -0.4539630254969901, -0.536708505065493, -0.8218127612914062, -0.06364954786202666, -0.9135837210579032, -0.5470394047055556, -0.16053480416391067, -0.24921547515744, -0.3290912605570297, -0.7481798989296297, -0.3130275169409733, -0.5075206091812079, -0.18444062598583, -0.40615948551471154, -0.5378813400881538, -0.291565136053196, -0.3983990380050651, -0.26688164471863335, -0.2780568138479091, -0.5308580259198246, -0.555000220826, -0.7452112947392857]}
{"prompt": "'''\nPolycarp is very fond of playing the game Minesweeper. Recently he found a similar game and there are such rules.\n\nThere are mines on the field, for each the coordinates of its location are known (x_i, y_i). Each mine has a lifetime in seconds, after which it will explode. After the explosion, the mine also detonates all mines vertically and horizontally at a distance of k (two perpendicular lines). As a result, we get an explosion on the field in the form of a \"plus\" symbol ('+'). Thus, one explosion can cause new explosions, and so on.\n\nAlso, Polycarp can detonate anyone mine every second, starting from zero seconds. After that, a chain reaction of explosions also takes place. Mines explode instantly and also instantly detonate other mines according to the rules described above.\n\nPolycarp wants to set a new record and asks you to help him calculate in what minimum number of seconds all mines can be detonated.\n\nInput\n\nThe first line of the input contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the test.\n\nAn empty line is written in front of each test suite.\n\nNext comes a line that contains integers n and k (1 \u2264 n \u2264 2 \u22c5 10^5, 0 \u2264 k \u2264 10^9) \u2014 the number of mines and the distance that hit by mines during the explosion, respectively.\n\nThen n lines follow, the i-th of which describes the x and y coordinates of the i-th mine and the time until its explosion (-10^9 \u2264 x, y \u2264 10^9, 0 \u2264 timer \u2264 10^9). It is guaranteed that all mines have different coordinates.\n\nIt is guaranteed that the sum of the values n over all test cases in the test does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t lines, each of the lines must contain the answer to the corresponding set of input data \u2014 the minimum number of seconds it takes to explode all the mines.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(stdin) == stdout", "(solution(\"\"\"\n1\n4 2\n0 0 1\n1 1 2\n2 2 3\n0 3 1\n\"\"\")) == \"\"\"\n3\n\"\"\", \"Solution is incorrect\"", "solution(\"\"\"\n1\n\n1 2\n0 0 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1\n\n1 5\n0 0 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1\n\n1 5\n0 0 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1\n\n1 5\n0 0 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n\n3 3\n0 0 2\n1 1 2\n2 0 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n\n3 3\n0 0 3\n1 1 3\n2 0 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1\n\n3 4\n0 0 3\n1 1 3\n2 0 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1\n\n3 4\n0 0 2\n1 1 2\n2 0 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1\n\n3 4\n0 0 1\n1 1 1\n2 0 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n\n4 4\n0 0 4\n1 1 4\n2 0 4\n2 2 4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1\n\n4 4\n0 0 3\n1 1 3\n", "solution('''\n''') == '''\n'''\n\n# check the performance of solution\nfrom timeit import timeit\nassert timeit(lambda: solution('''\n'''), number=10) < 1", "solution(get_fixture('test/test_1')) == '2\\n1\\n'\n\n'''\nDescription\n\nThe field has the shape of an n \u00d7 m grid (1 \u2264 n, m \u2264 100). Two cells are neighboring if they have a common side.\n\nA cell may be empty (if its coordinates are 0 and 0) or it may contain an artifact (if its coordinates are x and y, where 0 < x \u2264 n, 0 < y \u2264 m).\n\nAn artifact is a number greater than zero. No two artifacts have the same coordinates.\n\nThere may be several artifacts on one cell. Each artifact has its own value, but does not have its own coordinates.\n\nEach artifact can multiply itself an unlimited number of times. You can find the values of all artifacts in each cell using only the total number of artifacts on this cell.\n\nFor example, if there are three artifacts on the cell, their values will be 1, 2 and 3 (in any order).\n\nYou are given the coordinates of the cell where the search starts. You can collect artifacts only from neighboring cells.\n\nYou can only move to neighboring cells that contain at least one artifact, but you can't move to a cell that you've already visited.\n\nYou must get to the final cell and collect all artifacts located on it.\n\nYour task is to find the maximum sum of values of the artifacts", "solution('''\n2\n\n2 3\n2 2 3\n4 2 4\n\n3 4\n-3 -3 0\n1 1 1\n-1 -1 1\n''') == '''\n4\n3\n'''", "solution('''\n1\n3 1\n1 1 1\n-1 -1 2\n0 0 3\n''') == '''\n2\n'''\n\nassert solution('''\n2\n3 1\n1 1 1\n-1 -1 2\n0 0 3\n3 1\n1 1 1\n-1 -1 2\n0 0 4\n''') == '''\n2\n3\n'''\n\nassert solution('''\n2\n3 2\n1 1 2\n-1 -1 2\n0 0 3\n3 2\n1 1 2\n-1 -1 2\n0 0 4\n''') == '''\n2\n3\n'''\n\nassert solution('''\n2\n5 1\n1 1 1\n1 2 2\n-1 -1 2\n0 0 3\n-1 -2 4\n5 1\n1 1 1\n1 2 2\n-1 -1 2\n0 0 3\n-1 -2 4\n''') == '''\n3\n3\n'''\n\nassert solution('''\n2\n5 1\n1 1 1\n1 2 2\n-1 -1 2\n0 0 3\n-1 -2 4\n5 1\n1 1 1\n1 2 2\n-1 -1 2\n0 0 3\n-1 -2 5\n''') == '''\n3\n4\n'''\n\n", "solution('''\n2\n\n2 0\n1 1 3\n-1 -1 4\n\n1 1\n0 0 0\n''') == '''\n4\n1\n'''", "solution('''\n1\n\n3 3\n2 1 1\n-2 1 1\n-2 -1 2\n''') == '''\n3\n'''\n\n# get input\nT = int(input())\n\n# get and solve the test cases\nsol = [solution(input()) for _ in range(T)]\n\n# print output\nprint('\\n'.join(sol))", "solution('''\n2\n\n4 1\n1 1 0\n1 0 1\n0 1 1\n0 0 1\n\n4 1\n0 0 0\n0 1 0\n1 0 0\n1 1 0\n''') == '''\n2\n1\n'''", "solution(\"\"\"\n2\n\n3 1\n-2 0 3\n2 0 3\n0 0 3\n\n4 1\n-2 0 3\n2 0 3\n0 0 3\n0 -2 2\n\"\"\") == \"\"\"\n5\n5\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n2\n\n2 1\n1 0 2\n-1 0 3\n\n2 1\n1 0 3\n-1 0 3\n\"\"\") == \"\"\"\n5\n5\n\"\"\", \"Example 2\"\n\n# upload solution\nimport requests\nfrom requests import exceptions\n\nurl = 'https://api.bitbucket.org/2.0/repositories/{}/{}/src'.format(os.environ['BITBUCKET_USERNAME'], os.environ['BITBUCKET_REPO_SLUG'])\n\ndef upload_solution(solution_file: str, filename: str) -> str:\n    path = os.path.join(solution_file, filename)\n    with open(path, 'rb') as f:\n        response = requests.put(\n            url + '/' + filename,\n            auth=(os.environ['BITBUCKET_USERNAME'], os.environ['BITBUCKET_PASSWORD']),\n            data=f\n        )\n   ", "solution(\"\"\"\n3\n\n5 1\n0 0 0\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n\n4 2\n0 0 0\n1 1 1\n2 2 2\n3 3 3\n\n2 3\n0 0 0\n1 1 1\n\"\"\") == \"\"\"\n4\n3\n0\n\"\"\"", "solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\n# print solution\nprint(solution('''\n'''))", "solution('''\n2\n\n5 5\n1 1 10\n1 2 5\n3 1 4\n3 3 5\n3 4 8\n\n3 2\n1 0 0\n0 1 0\n0 0 0\n''') == '''\n12\n0\n'''", "solution('''\n1\n\n1 0\n1 1 5\n''') == '''\n5\n'''\n\nassert solution('''\n2\n\n2 2\n-2 0 1\n1 0 1\n\n2 1\n-1 0 1\n1 0 1\n''') == '''\n2\n3\n'''", "solution(\"\"\"\n3\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n2 2\n1 1 2\n2 2 2\n\"\"\") == \"\"\"\n5\n5\n2\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n2 2\n1 1 2\n2 2 2\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\"\"\") == \"\"\"\n5\n5\n2\n5\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n2 2\n1 1 2\n2 2 2\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n3 2\n1 1 2\n1 2 2\n1 3 2\n\n3 2\n1 1 2\n", "solution(test_test_1) == \"\"\"3\n3\n1\"\"\"\nassert solution(test_test_2) == \"\"\"2\n2\n2\n1\"\"\"\nassert solution(test_test_3) == \"\"\"2\n1\n1\n1\"\"\"", "solution('''3\n\n2 1\n1 1 1\n2 2 2\n\n4 2\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n\n4 1\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n''') == '''1\n4\n4\n'''", "solution('''\n1\n\n5 2\n0 0 10\n0 10 10\n10 0 5\n10 10 10\n3 3 5\n''') == '15'\nassert solution('''\n2\n\n2 0\n0 0 1\n1 1 1\n\n1 0\n0 0 1\n''') == '2\\n1'\nassert solution('''\n1\n\n3 0\n0 0 10\n10 0 15\n1 10 20\n''') == '20'\nassert solution('''\n1\n\n4 0\n0 0 10\n1 0 15\n2 0 20\n3 0 30\n''') == '35'\nassert solution('''\n1\n\n2 0\n0 0 3\n10 0 4\n''') == '8'\nassert solution('''\n1\n\n2 1\n0 0 5\n1 0 5\n''') == '15'\nassert solution('''\n1\n\n3 1\n0 0 3\n0 1 3\n0 2 3\n''') == '9'\nassert solution('''\n1\n\n1 0\n0 0 1\n''') == '1'\nassert solution('''\n1\n\n1 0\n0 0 2\n''') == '2'\nassert solution('''\n1\n\n1 0\n0 0 10\n''') == '10'\nassert solution(''", "solution(\"\") == \"expected_answer\"\n\ndef parse_input(raw_input: str) -> dict:\n    lines = raw_input.split(\"\\n\")\n    return {\n        \"n\": int(lines[0]),\n        \"k\": int(lines[1]),\n        \"mine\": [lines[i] for i in range(2, len(lines))]\n    }\n\ndef solve(input_data: dict) -> int:\n    coords = []\n    time = []\n    for row in input_data[\"mine\"]:\n        print(row)\n        coord, t = row.split(\" \")\n        coord_x, coord_y = coord.split(\",\")\n        coords.append((int(coord_x), int(coord_y)))\n        time.append(int(t))\n    print(coords)\n    print(time)\n    return 1\n\ndef main():\n    # STRICT INPUT FORMAT\n    # number of test cases\n    test_case_number = int(input())\n    for _ in range(test_case_number):\n        input_data = parse_input(input())\n        result = solve(input_data)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()", "solution('''\n1\n\n2 1\n1 1 1\n1 2 2\n''') == '''\n3\n'''\n\n# get input\nstdin = ''\nwhile True:\n    try:\n        line = input()\n    except EOFError:\n        break\n    stdin += line + '\\n'\n\n# output answer\nsys.stdout.write(solution(stdin))", "solution('''\n2\n\n2 2\n1 1 2\n-1 -1 1\n\n3 1\n1 1 0\n-1 -1 1\n0 0 2\n''') == '''\n1\n2\n'''", "solution('''\n1\n\n2 2\n0 0 2\n2 0 2\n''') == '3'\n\n# check the performance of solution\nfrom utils import measure_time\nassert measure_time(solution, '''\n1\n\n10 3\n1 3 3\n2 3 2\n4 1 0\n1 0 4\n4 0 2\n0 4 4\n0 1 1\n1 4 4\n4 4 1\n0 2 1\n''') < 10\n\n# check the correctness of solution\nassert solution('''\n1\n\n2 2\n0 0 2\n2 0 2\n''') == '3'\n\n# check the performance of solution\nfrom utils import measure_time\nassert measure_time(solution, '''\n1\n\n10 3\n1 3 3\n2 3 2\n4 1 0\n1 0 4\n4 0 2\n0 4 4\n0 1 1\n1 4 4\n4 4 1\n0 2 1\n''') < 10", "solution('''\n2\n\n2 1\n0 0 0\n0 0 1\n\n1 0\n1 1 1\n''') == '''\n1\n2\n'''\n\n#\nassert solution('''\n1\n\n1 0\n1 1 1\n''') == '''\n2\n'''\n\n#\nassert solution('''\n1\n\n1 1\n1 1 1\n''') == '''\n1\n'''\n\n#\nassert solution('''\n2\n\n2 1\n0 0 1\n0 0 0\n\n3 1\n1 0 0\n0 1 0\n0 0 1\n''') == '''\n1\n2\n'''\n\n#\nassert solution('''\n1\n\n4 3\n0 0 3\n2 2 3\n1 1 1\n-1 -1 1\n''') == '''\n3\n'''\n\n#\nassert solution('''\n1\n\n5 0\n1 0 0\n0 1 0\n0 0 1\n0 -1 0\n-1 0 0\n''') == '''\n2\n'''\n\n#\nassert solution('''\n1\n\n5 0\n1 0 0\n0 1 0\n0 0 1\n0 -1 0\n-1 0 1\n''') == '''\n1\n'''\n\n#\nassert solution('''", "solution('''\n2\n\n3 1\n-1 0 3\n1 1 1\n1 -1 1\n\n4 2\n0 0 1\n1 0 1\n0 1 1\n1 1 1\n''') == '''\n3\n1\n'''", "solution(\"\"\"\n3\n1\n2 3 4\n2 2\n3 1 2\n3 3 2\n0 0 2\n\"\"\") == \"\"\"\n5\n1\n5\n\"\"\"", "solution(\"\"\"\n1\n\n3 0\n-1 0 2\n0 1 3\n1 0 2\n\"\"\") == \"\"\"\n2\n\"\"\", \"solution doesn't work for example 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n6 0\n1 0 1\n2 0 2\n3 0 3\n4 0 4\n5 0 5\n6 0 6\n\"\"\") == \"\"\"\n6\n\"\"\", \"solution doesn't work for example 2\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n5 1\n-1 -1 3\n-1 1 3\n1 -1 3\n1 1 3\n0 0 5\n\"\"\") == \"\"\"\n5\n\"\"\", \"solution doesn't work for example 3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n2 3\n0 0 1\n1 1 4\n\"\"\") == \"\"\"\n4\n\"\"\", \"solution doesn't work for example 4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n4 3\n-1 0 0\n0 1 3\n0 -1 2\n0 0 5\n\"\"\") == \"\"\"\n4\n\"\"\", \"solution doesn't work for example 5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n3 2\n-1 0 0\n0 1 1", "solution(\"\"\"\n1\n\n5 3\n0 0 3\n2 2 4\n2 0 3\n2 1 1\n-1 0 7\n\"\"\") == \"\"\"1\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n\n2 0\n0 0 5\n1 1 8\n\n1 1\n0 0 100\n\"\"\") == \"\"\"0\n100\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n5 5\n0 0 3\n2 2 4\n2 0 3\n2 1 1\n-1 0 7\n\"\"\") == \"\"\"2\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n3 0\n0 0 2\n0 1 2\n0 2 2\n\"\"\") == \"\"\"2\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n4 5\n0 0 3\n2 2 4\n2 0 3\n2 1 1\n\"\"\") == \"\"\"2\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n4 0\n0 0 1\n2 2 3\n2 0 3\n2 1 1\n\"\"\") == \"\"\"2\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n\n3 1\n0 0 5\n1 1 8\n-1 0 1\n\"\"\") == \"\"\"1\"\"\"\n\n# check the correctness of solution\nassert solution", "solution(\"\"\"\n2\n\n2 2\n0 0 2\n-2 2 2\n\n1 1\n0 0 0\n\"\"\") == \"\"\"\n2\n0\n\"\"\"", "solution(\"\"\"\n1\n\n3 1\n1 1 5\n2 2 4\n3 3 5\n\"\"\") == \"\"\"\n9\n\"\"\", \"start on the third second\"\n\nassert solution(\"\"\"\n2\n\n3 0\n1 1 5\n2 2 4\n3 3 5\n\n3 1\n1 1 5\n2 2 4\n3 3 5\n\"\"\") == \"\"\"\n8\n9\n\"\"\", \"start on the second second\"\n\nassert solution(\"\"\"\n1\n\n1 1\n0 0 5\n\"\"\") == \"\"\"\n5\n\"\"\", \"start on the first second\"", "solution(r'''1\n2 1\n-1 0 2\n1 0 2\n''') == r'''3\n'''\n\n# check the correctness of solution\nassert solution(r'''2\n1 2\n0 0 2\n\n3 2\n0 0 2\n3 0 2\n-3 0 2\n''') == r'''2\n2\n'''\n\n# check the correctness of solution\nassert solution(r'''1\n2 0\n-1 0 2\n1 0 2\n''') == r'''2\n'''\n\n# check the correctness of solution\nassert solution(r'''1\n3 2\n0 0 2\n-1 0 1\n1 0 3\n''') == r'''3\n'''\n\n# check the correctness of solution\nassert solution(r'''1\n2 1\n-1 0 2\n1 0 2\n''') == r'''3\n'''\n\n# input\nprint(solution(r'''1\n3 2\n0 0 2\n-1 0 1\n1 0 3\n'''))\n\n# \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0432\u0430\u0448 \u043a\u043e\u0434 \u0437\u0434\u0435\u0441\u044c\n'''\n1\n3 2\n0 0 2\n-1 0 1\n1 0 3\n'''", "solution('''\n3\n3 1\n1 1 0\n2 1 0\n2 2 0\n\n2 2\n-5 -5 0\n5 5 1\n\n5 0\n0 0 0\n-1 0 0\n1 0 0\n0 -1 0\n0 1 0\n''') == '''\n3\n3\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5 1\n0 0 0\n1 0 0\n2 0 0\n0 1 0\n0 2 0\n\n1 1\n1 1 1\n\n5 2\n0 0 0\n1 0 0\n2 0 0\n0 1 0\n0 2 0\n\n3 1\n0 0 0\n1 0 0\n2 0 0\n\n3 2\n0 0 0\n1 0 0\n2 0 0\n''') == '''\n1\n1\n1\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10 0\n1 1 0\n2 1 0\n3 1 0\n4 1 0\n5 1 0\n6 1 0\n7 1 0\n8 1 0\n9 1 0\n10 1 0\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1\n1 1 0\n2 2 0\n\n2 1\n", "solution('''\n2\n\n3 0\n1 0 0\n0 1 0\n0 0 1\n\n3 1\n1 0 0\n0 1 0\n0 0 1\n''') == '''\n1\n3\n'''", "solution('''\n2\n\n6 3\n0 0 1\n1 0 1\n1 1 1\n1 2 1\n-1 -1 1\n2 2 1\n\n4 0\n-1 -1 1\n-1 0 1\n-1 1 1\n0 0 1\n''') == '''\n2\n4\n'''", "solution(sample_input) == '''\n1\n\n12\n0\n0 0 3\n2 0 1\n2 1 6\n0 1 4\n-1 1 5\n-1 0 2\n0 -1 1\n-2 -1 5\n-2 0 2\n-2 1 3\n-1 2 4\n-1 3 2\n'''", "solution(\"\"\"\n1\n\n4 1\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n\"\"\") == \"\"\"5\n\"\"\", \"Test 1 failed\"\n\nassert solution(\"\"\"\n2\n\n3 0\n0 0 1\n0 1 2\n1 0 3\n\n3 0\n0 0 1\n0 1 2\n1 0 3\n\"\"\") == \"\"\"1\n1\n\"\"\", \"Test 2 failed\"\n\nassert solution(\"\"\"\n2\n\n3 1\n0 0 1\n0 1 2\n1 0 3\n\n3 1\n0 0 1\n0 1 2\n1 0 3\n\"\"\") == \"\"\"3\n3\n\"\"\", \"Test 3 failed\"\n\nassert solution(\"\"\"\n2\n\n3 1\n0 0 3\n0 1 2\n1 0 3\n\n4 1\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n\"\"\") == \"\"\"4\n5\n\"\"\", \"Test 4 failed\"\n\nassert solution(\"\"\"\n4\n\n4 1\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n\n3 1\n0 0 3\n0 1 2\n1 0 3\n\n3 1\n0 0 1\n0 1 2\n1 0 3\n\n4 1\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n\"\"\") == \"\"\"5\n4\n", "solution('''\n\n''') == '''\n'''\n\nassert solution('''\n\n''') == '''\n'''\n\nassert solution('''\n\n''') == '''\n'''\n\n# test the performance of solution\nfrom timeit import timeit\nimport random\n\nfor i in range(50):\n    p, q = random.randint(1, 10**4), random.randint(1, 10**4)\n    test = f'\\n' + f'{p}\\n' + '\\n'.join([f'{random.randint(-10**9, 10**9)} {random.randint(-10**9, 10**9)} {random.randint(0, 10**9)}' for i in range(q)]) + '\\n'\n    print(f'Test {i + 1}:\\n{test}')\n    t = timeit(lambda: solution(test), number=1)\n    print(f'Time: {t} seconds')\n    print()", "solution('''\n2\n\n5 3\n0 0 4\n2 0 3\n2 4 1\n4 4 2\n-4 0 2\n\n1 0\n0 0 1\n''') == '''\n8\n1\n'''", "solution(\n'''1\n2 2\n0 0 5\n4 0 3\n''') == '6'\nassert solution(\n'''2\n2 2\n0 0 5\n4 0 3\n\n3 2\n0 0 5\n4 0 3\n2 0 7\n''') == '6\\n9'", "solution('''\n3\n\n4 1\n1 2 0\n1 0 0\n-1 -2 0\n-1 0 0\n\n4 2\n1 2 0\n1 0 0\n-1 -2 0\n-1 0 0\n\n1 0\n0 0 1\n''') == '''\n2\n2\n1\n'''", "solution(\"\"\"\n1\n\n3 1\n2 3 3\n-1 -1 2\n1 1 2\n\"\"\") == \"\"\"3\"\"\", \"Example\"\n\nassert solution(\"\"\"\n4\n\n4 0\n1 1 1\n1 2 1\n2 1 1\n2 2 1\n\n4 1\n1 1 1\n1 2 1\n2 1 1\n2 2 1\n\n4 1\n1 1 1\n1 2 1\n2 1 1\n2 2 3\n\n4 1\n0 1 3\n1 0 3\n1 1 1\n1 2 1\n\"\"\") == \"\"\"3\n4\n4\n3\"\"\", \"Some tests\"", "solution(\"\"\"\n3\n\n3 1\n1 1 0\n1 2 1\n2 1 3\n\n3 1\n1 1 0\n1 2 1\n2 1 3\n\n2 0\n1 1 1\n2 2 1\n\"\"\") == \"\"\"\n1\n3\n0\n\"\"\"", "solution('''\n2\n\n5 2\n1 0 1\n-1 0 2\n0 1 2\n1 1 2\n-1 1 3\n\n3 0\n0 0 1\n0 2 2\n0 4 4\n''') == '''\n4\n4\n'''", "solution(stdin_data) == stdout_data", "solution(\"\"\"\n2\n\n2 2\n1 1 3\n2 2 2\n\n3 1\n0 0 10\n0 10 20\n10 0 30\n\"\"\") == \"\"\"\n3\n20\n\"\"\"", "solution(\"\"\"2\n3 1\n0 0 0\n1 1 0\n-1 -1 0\n3 2\n0 0 0\n1 1 0\n-1 -1 0\n\"\"\") == \"\"\"2\n1\n\"\"\"\n\n# upload to judge\nfile = open('input.txt', 'r')\nsolution(file.read())", "solution('''\n1\n\n1 1\n0 0 0\n''') == '''\n0\n'''\n\nassert solution('''\n2\n\n2 1\n0 0 0\n1 0 0\n\n3 2\n0 0 0\n2 0 0\n0 1 0\n''') == '''\n1\n1\n'''", "solution('''\n2\n\n2 0\n1 1 0\n2 2 1\n\n4 1\n1 1 0\n2 2 1\n2 3 2\n3 3 3\n''') == '''\n1\n3\n'''", "solution('''4\n1 0\n1 1 1\n3 1\n1 1 1\n2 2 1\n3 3 1\n1 2\n3 3 2\n3 1\n0 0 1\n0 1 2\n0 2 3\n2 3\n1 0 0\n2 3 1\n''') == '''0\n2\n2\n2\n'''", "solution(r'''\n2\n\n2 2\n1 1 2\n1 2 1\n\n2 2\n1 1 2\n1 2 2\n''') == r'''\n3\n1\n'''\n\n# check the correctness of solution\nassert solution(r'''\n3\n\n3 2\n1 1 2\n1 2 2\n1 3 1\n\n2 2\n1 1 2\n1 2 1\n\n3 2\n1 1 2\n1 2 1\n1 3 2\n''') == r'''\n4\n2\n3\n'''\n\n# check the correctness of solution\nassert solution(r'''\n4\n\n4 2\n1 1 2\n1 2 2\n1 3 2\n1 4 1\n\n2 2\n1 1 2\n1 2 1\n\n3 2\n1 1 2\n1 2 1\n1 3 2\n\n4 2\n1 1 1\n1 2 2\n1 3 2\n1 4 1\n''') == r'''\n6\n2\n3\n3\n'''"], "finish_reason": ["stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-5.94635431, -35.989480696639994, -81.55159143387104, -21.596430150900005, -393.79405787005305, -45.661800152500014, -73.18993615975599, -24.894442526299997, -60.78260193853998, -26.770435645, -137.26306554235524, -32.36600186989999, -17.635464783119996, -49.326567693100024, -39.71707726567999, -51.20205844779202, -44.63587339010001, -30.308364535839992, -141.55574520733683, -141.4015293009599, -38.75119230047399, -27.18042262330001, -105.22724146240897, -103.61362829449804, -30.8174476045, -49.08650018360001, -123.9898698774099, -132.3962769669551, -27.28844070660001, -72.51890195030995, -115.65107214994498, -113.90101681864499, -20.060699133929997, -46.70738856150001, -70.98702875349998, -72.70031876207801, -89.86156154798604, -44.41984856880002, -44.4857155248, -37.11893204528999, -82.90513717172996, -37.07583527134999, -43.71053284239999, -10.039352873999999, -32.4934075759, -48.339735148, -31.210324675135013, -24.583250906700002, -65.5606131486, -74.41858535653411], "mean_logprob": [-0.6607060344444444, -0.8777922121131707, -0.2718386381129033, -0.44074347246734696, -1.3126468595668432, -0.8781115413942308, -0.24396645386585333, -0.5927248220547618, -0.6829505835791011, -0.44617392741666667, -0.45754355180785067, -0.43154669159866665, -0.37522265496, -0.8221094615516666, -0.536717260347027, -0.17067352815930667, -0.7830854980719298, -0.4209495074422222, -0.4718524840244567, -0.4760994252557576, -0.41224672660078726, -0.5227004350634615, -0.4849181634212396, -0.34537876098166, -0.5313353035258621, -1.22716250459, -0.4132995662580333, -0.44132092322318334, -0.7181168607, -0.5535794042008397, -0.3974263647764433, -0.37967005606215, -0.3857826756525, -0.6311809265067567, -0.9219094643311688, -0.24233439587359334, -0.38076932859316104, -0.8381103503547169, -0.6355102217828571, -0.48840700059592107, -0.5879796962534043, -0.5885053217674603, -0.705008594232258, -0.7722579133846154, -0.7220757239088889, -0.6445298019733333, -0.4106621667780921, -0.47275482512884615, -0.8514365343974026, -0.32928577591386726]}
{"prompt": "'''\nYou are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times. \n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(example_input) == example_output", "solution(stdin) == stdout", "solution('''\n3 1\n1 2 3\n2 1 3\n''') == '3'\n\nassert solution('''\n3 4\n1 2 3\n1 1 2\n2 1 2\n1 1 2\n2 1 2\n''') == '''\n2\n1\n'''\n\n#\n#\n#\n\n# ------------------------\n#   submit part\n# ------------------------\n\ndef main():\n    with open('tests/tests', 'r') as f:\n        lines = f.readlines()\n        lines = [line.rstrip() for line in lines]\n        test_case = [lines[i:i+3] for i in range(len(lines)) if not (i % 3)]\n        for test in test_case:\n            print(solution(test[0]))\n\nif __name__ == '__main__':\n    main()", "solution(stdin_str1) == stdout_str1\nassert solution(stdin_str2) == stdout_str2", "solution('''\n5 5\n1 2 3 4 5\n2 4 3\n1 3 5\n2 3 3\n1 1 5\n2 2 1\n''') == '''\n4\n3\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n1 2 3 4 5\n2 1 2\n1 3 2\n2 3 2\n''') == '''\n1\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2 3 4 5\n2 1 2\n1 1 2\n2 3 2\n2 4 3\n''') == '''\n1\n5\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n2 3 1 5 4\n2 3 3\n1 2 5\n2 2 1\n''') == '''\n3\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n5 3\n5 4 3 2 1\n2 3 3\n1 2 5\n2 2 1\n''') == '''\n1\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n5 4 3 2 1\n2 3 3\n1 2 5\n2 4 3\n2 2 1\n''') == '''\n1\n5\n4\n'''", "solution('''\n4 3\n1 2 3 4\n2 1 1\n1 1 2\n2 1 1\n''') == '''\n1\n2\n'''\n\nassert solution('''\n3 3\n2 1 3\n2 2 1\n1 1 2\n2 2 1\n''') == '''\n3\n1\n'''\n\nassert solution('''\n5 2\n1 2 3 4 5\n1 1 2\n2 5 1\n''') == '''\n2\n'''\n\nassert solution('''\n10 3\n5 4 7 9 3 6 1 8 2 10\n2 10 1\n1 5 6\n2 1 1\n''') == '''\n8\n6\n'''\n\nassert solution('''\n6 4\n6 5 4 2 3 1\n2 3 1\n1 3 4\n2 1 1\n2 4 1\n''') == '''\n2\n1\n4\n'''\n\nassert solution('''\n10 4\n5 4 7 9 3 6 1 8 2 10\n2 6 1\n1 5 6\n2 1 1\n2 6 1\n''') == '''\n3\n8\n3\n'''\n\nassert solution('''\n10 5\n2 3 8 10 9 7 1 5 6 4\n2 1 1\n1 9 7\n2 1 1\n2 3 1\n2 4 1\n''", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution(\"\"\"\n1 1\n1 2\n1 2 2\n2 1 1\n\"\"\") == \"\"\"\n1\n\"\"\", \"Input: 1 1\\n1 2\\n1 2 2\\n2 1 1\"\n\nassert solution(\"\"\"\n5 7\n3 1 2 5 4\n1 3 4\n2 3 1\n1 3 4\n2 3 2\n1 4 2\n2 3 2\n2 2 2\n\"\"\") == \"\"\"\n5\n1\n1\n\"\"\", \"Input: 5 7\\n3 1 2 5 4\\n1 3 4\\n2 3 1\\n1 3 4\\n2 3 2\\n1 4 2\\n2 3 2\\n2 2 2\"\n\nassert solution(\"\"\"\n4 5\n4 3 2 1\n1 1 2\n2 1 1\n1 1 4\n2 4 1\n2 1 1\n\"\"\") == \"\"\"\n2\n4\n\"\"\", \"Input: 4 5\\n4 3 2 1\\n1 1 2\\n2 1 1\\n1 1 4\\n2 4 1\\n2 1 1\"\n\nif __name__ == \"__main__\":\n    print(solution(input()))", "solution(stdin) == stdout", "solution('''\n5 4\n1 2 3 4 5\n2 2 1\n1 2 5\n2 2 1\n2 2 1\n''') == '''\n1\n3\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2 3 4 5\n2 2 1\n1 2 5\n2 2 1\n2 2 1\n''') == '''\n1\n3\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2 3 4 5\n2 2 1\n1 2 5\n2 2 1\n2 2 1\n''') == '''\n1\n3\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2 3 4 5\n2 2 1\n1 2 5\n2 2 1\n2 2 1\n''') == '''\n1\n3\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2 3 4 5\n2 2 1\n1 2 5\n2 2 1\n2 2 1\n''') == '''\n1\n3\n3\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2 3 4 5\n2 2 1\n1 2", "solution('''\n1 5\n''') == '''\n'''", "solution('''\n3 1\n1 2 3\n2 1 1\n''') == '2'\n\nassert solution('''\n2 3\n1 2\n1 1 2\n2 1 1\n1 2 1\n2 1 1\n''') == '1'\n\nassert solution('''\n2 2\n1 2\n2 1 1\n1 2 1\n2 1 1\n''') == '2'\n\nassert solution('''\n2 3\n1 2\n2 1 1\n1 2 1\n2 1 1\n''') == '1'\n\nassert solution('''\n2 2\n1 2\n2 1 1\n1 2 1\n2 1 1\n''') == '2'\n\nassert solution('''\n2 2\n1 2\n2 1 1\n1 2 1\n2 1 1\n''') == '2'\n\nassert solution('''\n2 2\n1 2\n2 1 1\n1 2 1\n2 1 1\n''') == '2'\n\nassert solution('''\n3 2\n1 2 3\n2 1 1\n2 2 1\n''') == '3'\n\nassert solution('''\n2 3\n1 2\n2 1 1\n1 2 1\n2 1 1\n''') == '1'\n\nassert solution('''\n3 1\n1 2 3\n2 1 1\n''')", "(solution(stdin) == stdout)", "solution('''\\\n3 4\n2 1 3\n2 1 2\n1 1 2\n2 1 2\n''') == '''\\\n2\n1\n'''\n\n# print the solution.\nprint(solution('''\\\n'''))", "solution('''\n3 4\n2 1 3\n2 2 1\n1 2 3\n2 2 1\n''') == '''\n1\n3\n1\n'''\n\nassert solution('''\n4 3\n4 3 2 1\n2 3 1\n2 4 2\n2 1 1\n''') == '''\n4\n2\n1\n'''\n\nassert solution('''\n2 3\n1 2\n2 1 1\n2 2 1\n1 1 2\n''') == '''\n2\n1\n2\n'''\n\nassert solution('''\n3 2\n1 2 3\n2 2 1\n2 3 1\n''') == '''\n1\n3\n'''\n\nassert solution('''\n3 2\n3 1 2\n2 1 1\n2 3 1\n''') == '''\n3\n2\n'''\n\nassert solution('''\n10 3\n2 4 1 6 3 7 9 10 5 8\n2 5 10\n2 10 10\n2 5 2\n''') == '''\n9\n6\n8\n'''\n\nassert solution('''\n10 2\n1 2 3 4 5 6 7 8 9 10\n2 5 2\n2 3 2\n''') == '''\n2\n4\n'''\n\nassert solution('''\n10 3\n5 8 6 7 9 1 4 2 3", "solution(solve_test()) == solve_test().replace(\".\\n\", \".\\n\\n\")", "solution('''\n5 5\n1 2 3 4 5\n2 1 1\n1 1 2\n2 1 1\n2 3 1\n2 5 1\n''') == '''\n2\n2\n3\n5\n'''\n\n# get input\nn, q = map(int, input().split())\np = list(map(int, input().split()))\n\n# perform queries\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        p[query[1] - 1], p[query[2] - 1] = p[query[2] - 1], p[query[1] - 1]\n    else:\n        x = query[1] - 1\n        for _ in range(query[2]):\n            x = p[x] - 1\n        print(x + 1)", "solution('''\n3 5\n1 2 3\n2 1 1\n1 1 2\n2 1 1\n2 1 1\n''') == '''\n2\n1\n2\n'''\n\nassert solution('''\n3 7\n1 2 3\n2 1 1\n1 1 2\n2 1 1\n2 1 1\n1 1 2\n2 1 1\n''') == '''\n2\n1\n2\n1\n'''\n\nassert solution('''\n3 8\n3 2 1\n2 1 1\n1 1 2\n2 1 1\n2 1 1\n1 1 2\n2 1 1\n2 1 1\n''') == '''\n1\n2\n1\n2\n1\n'''\n\nassert solution('''\n3 6\n1 2 3\n2 1 1\n1 1 2\n2 1 1\n2 1 1\n2 1 1\n''') == '''\n2\n1\n2\n1\n'''\n\nassert solution('''\n3 7\n1 2 3\n2 1 1\n1 1 2\n2 1 1\n2 1 1\n1 1 2\n2 1 1\n''') == '''\n2\n1\n2\n1\n'''\n\nassert solution('''\n3 8\n1 2 3\n2 1 1\n1 1 2\n2 1 1\n2 1 1\n1 1 2\n2", "solution('''\n5 6\n2 4 5 1 3\n2 2 2\n1 1 2\n2 2 1\n2 2 2\n1 1 2\n2 2 2\n''') == '''\n4\n2\n4\n'''\n\nassert solution('''\n5 6\n5 4 3 2 1\n2 1 1\n1 1 2\n2 1 1\n2 1 1\n1 1 2\n2 1 1\n''') == '''\n3\n1\n3\n'''", "solution('''\\\n5 3\n1 2 3 4 5\n2 2 5\n1 1 2\n2 1 5\n''') == '''\\\n5\n1\n'''\n\n# get input\nN, Q = map(int, input().split())\np = list(map(int, input().split()))\n\n# create index list (indices of permutation)\nidx = [i for i in range(N)]\n\n# perform queries\nfor _ in range(Q):\n    t, i, k = map(int, input().split())\n    if t == 1:\n        i -= 1\n        k -= 1\n        # swap i-th and k-th elements of permutation and indices\n        idx[p[i] - 1], idx[p[k] - 1] = idx[p[k] - 1], idx[p[i] - 1]\n        p[i], p[k] = p[k], p[i]\n    elif t == 2:\n        i -= 1\n        # print answer to query 2\n        print(p[idx[i]])", "solution(\n    r'''\n'''\n) == r'''\n'''", "solution('''\n2 3\n1 2\n2 1 1\n1 1 2\n2 1 1\n''') == '''\n2\n1\n'''\nassert solution('''\n2 3\n1 2\n2 1 1\n1 1 2\n2 1 1\n''') == '''\n2\n2\n'''\nassert solution('''\n4 7\n2 1 4 3\n1 1 4\n2 2 1\n1 2 4\n2 2 1\n1 2 3\n2 1 1\n2 2 1\n''') == '''\n3\n3\n4\n3\n'''\nassert solution('''\n10 1\n10 5 7 3 1 6 2 8 4 9\n2 8 3\n''') == '''\n7\n'''\nassert solution('''\n4 5\n4 1 2 3\n1 1 2\n2 1 1\n1 2 3\n2 1 1\n2 1 1\n''') == '''\n2\n2\n'''\nassert solution('''\n10 4\n2 9 1 3 6 5 8 10 4 7\n2 4 2\n1 2 9\n2 2 4\n2 1 1\n''') == '''\n9\n2\n9\n'''\nassert solution('''\n10 4\n10 5 6 2 8 1 4 7 3 9\n2 1 1\n1 9 8\n2 8 3\n2 1 1", "solution(stdin=example) == stdout\n\n```\n\n## Contact\n\nIf you have any questions or you've spotted a bug, please don't hesitate to contact me.\n\n* [Email](mailto:kowal.piotr@protonmail.com)\n* [LinkedIn](https://www.linkedin.com/in/piotr-kowal/)\n* [GitHub](https://github.com/KowalPiotr)", "solution(\n'''\n5 5\n3 2 1 5 4\n2 1 1\n1 2 3\n2 2 1\n2 2 2\n2 1 2\n'''\n) == '''\n3\n2\n1\n4\n'''", "solution('''\n4 4\n1 2 3 4\n2 1 4\n1 1 2\n2 1 4\n2 1 4\n''') == '''\n4\n2\n4\n'''", "solution('''\n3 5\n2 1 3\n2 2 5\n1 2 3\n2 2 5\n2 1 5\n''') == '''\n3\n1\n3\n'''\nassert solution('''\n2 3\n1 2\n2 1 1\n1 1 2\n2 1 2\n''') == '''\n2\n1\n'''\n\n# print(solution('''\n# 3 5\n# 2 1 3\n# 2 2 5\n# 1 2 3\n# 2 2 5\n# 2 1 5\n# '''))\n\n# print(solution('''\n# 2 3\n# 1 2\n# 2 1 1\n# 1 1 2\n# 2 1 2\n# '''))", "solution(r'''\n5 7\n3 1 4 2 5\n2 1 3\n1 1 5\n2 5 1\n2 4 1\n2 1 1\n1 4 5\n2 1 1\n''') == '''\n1\n2\n3\n'''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# ''') == '''\n# '''\n\n# assert solution(r'''\n# '", "solution(\"\"\"\n5 5\n1 2 3 4 5\n2 1 1\n1 2 3\n2 3 3\n2 3 2\n2 3 1\n\"\"\") == \"\"\"\n1\n5\n5\n3\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n2 1 1\n1 2 3\n2 3 3\n2 3 2\n2 3 1\n\"\"\") == \"\"\"\n1\n5\n5\n3\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n2 1 1\n1 2 3\n2 3 3\n2 3 2\n2 3 1\n\"\"\") == \"\"\"\n1\n5\n5\n3\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n2 1 1\n1 2 3\n2 3 3\n2 3 2\n2 3 1\n\"\"\") == \"\"\"\n1\n5\n5\n3\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n2 1 1\n1 2 3\n2 3 3\n2 3 2\n2 3 1\n\"\"\") == \"\"\"\n1\n5\n5\n3\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5", "solution('./input_data/input_1.txt') == ''.join(open('./output_data/output_1.txt').readlines())\nassert solution('./input_data/input_2.txt') == ''.join(open('./output_data/output_2.txt').readlines())\nassert solution('./input_data/input_3.txt') == ''.join(open('./output_data/output_3.txt').readlines())\nassert solution('./input_data/input_4.txt') == ''.join(open('./output_data/output_4.txt').readlines())\nassert solution('./input_data/input_5.txt') == ''.join(open('./output_data/output_5.txt').readlines())\nassert solution('./input_data/input_6.txt') == ''.join(open('./output_data/output_6.txt').readlines())\nassert solution('./input_data/input_7.txt') == ''.join(open('./output_data/output_7.txt').readlines())\nassert solution('./input_data/input_8.txt') == ''.join(open('./output_data/output_8.txt').read", "solution(get_problem_input(__file__)) == get_problem_output(__file__)", "solution(\"\"\"\n6 1\n2 3 4 1 6 5\n2 1 1\n\"\"\") == \"\"\"\n4\n\"\"\"\n\nassert solution(\"\"\"\n4 2\n4 3 2 1\n1 3 2\n2 2 2\n\"\"\") == \"\"\"\n2\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 2\n5 1 2 3 4\n2 5 4\n1 1 2\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n1\n2 1 1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2 3\n2 1\n1 1 2\n2 1 1\n\"\"\") == \"\"\"\n1\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n3 2 5 4 1\n2 5 2\n1 3 2\n2 1 2\n\"\"\") == \"\"\"\n2\n1\n3\n\"\"\"\n\n# stubs\n\ndef stubs(stdin: str) -> str:\n    lines = stdin.splitlines()\n    stdin = iter(lines)\n    next(stdin)\n    p = list(map(int, next(stdin).split()))\n    for _ in range(len(lines)-2):\n        t, *args = map(int, next(stdin).split())\n        if t == 1:\n            x, y = args\n            p[x-", "solution('''\n3 5\n1 2 3\n2 2 2\n1 1 2\n2 2 1\n2 2 2\n''') == '''\n3\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 10\n5 1 2 3 4\n2 1 1\n1 2 4\n2 2 1\n2 1 1\n2 2 1\n2 2 1\n2 1 1\n2 2 1\n2 2 1\n''') == '''\n2\n3\n3\n3\n3\n3\n'''", "solution(\"\"\"10 5\n1 2 3 4 5 6 7 8 9 10\n2 4 1\n1 9 7\n2 4 1\n2 9 1\n2 9 1\"\"\") == \"\"\"4\n1\n7\n10\n9\"\"\", \"Example 1\"\n\n# another test\nassert solution(\"\"\"10 5\n1 2 3 4 5 6 7 8 9 10\n2 4 1\n1 9 7\n2 4 1\n2 9 1\n2 9 1\"\"\") == \"\"\"4\n1\n7\n10\n9\"\"\", \"Example 2\"\n\n# another test\nassert solution(\"\"\"10 5\n1 2 3 4 5 6 7 8 9 10\n2 4 1\n1 9 7\n2 4 1\n2 9 1\n2 9 1\"\"\") == \"\"\"4\n1\n7\n10\n9\"\"\", \"Example 3\"\n\nassert solution(\"\"\"10 5\n1 2 3 4 5 6 7 8 9 10\n2 4 1\n1 9 7\n2 4 1\n2 9 1\n2 9 1\"\"\") == \"\"\"4\n1\n7\n10\n9\"\"\", \"Example 4\"\n\nassert solution(\"\"\"10 5\n1 2 3 4 5 6 7 8 9 10\n2 4 1\n1 9 7\n2 4 1\n2 9 1\n2 9 1\"\"\") == \"\"\"4\n1\n7\n10\n9\"\"\", \"Example 5\"\n\nassert solution(\"", "solution(r'''\n3 6\n1 2 3\n2 1 1\n1 2 3\n2 1 1\n2 2 1\n1 3 2\n2 2 1\n''') == '''\n1\n3\n3\n'''", "solution(\"\"\"\n3 5\n1 2 3\n2 1 1\n1 1 2\n2 1 2\n2 1 3\n\"\"\") == \"\"\"\n1\n3\n2\n\"\"\"\n\nassert solution(\"\"\"\n3 3\n2 1 3\n2 1 1\n2 2 1\n\"\"\") == \"\"\"\n2\n1\n1\n\"\"\"\n\n# print solution\nwith open('tests/005_hard/input.txt', 'r') as f:\n    stdin = f.read()\nprint(solution(stdin))", "solution(\"\"\"\n5 5\n1 2 3 4 5\n2 2 3\n1 2 3\n2 2 3\n2 2 3\n2 2 3\n\"\"\") == \"\"\"\n4\n5\n1\n2\n\"\"\"\n\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n2 2 3\n1 2 3\n2 2 3\n2 2 3\n2 2 3\n\"\"\") == \"\"\"\n4\n5\n1\n2\n\"\"\"\n\nassert solution(\"\"\"\n3 5\n1 2 3\n2 1 5\n1 1 2\n2 1 5\n2 1 5\n\"\"\") == \"\"\"\n2\n1\n2\n1\n\"\"\"\n\nassert solution(\"\"\"\n4 5\n4 1 2 3\n2 2 2\n1 2 3\n2 2 2\n2 2 2\n2 2 2\n\"\"\") == \"\"\"\n1\n3\n1\n3\n\"\"\"\n\nassert solution(\"\"\"\n7 3\n2 3 5 1 4 6 7\n2 2 1\n2 2 2\n2 2 3\n\"\"\") == \"\"\"\n5\n7\n6\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n2 3 4 1 5\n2 2 3\n2 2 3\n2 2 3\n\"\"\") == \"\"\"\n5\n3\n4\n\"\"\"\n\nassert solution(\"\"\"\n3 4\n3 1 2\n2 2 1\n2 2 2\n2 2 3\n\"\"\")", "solution('''\n2 2\n1 2\n2 1 1\n2 1 1\n''') == '''\n1\n2\n'''\nassert solution('''\n4 4\n1 2 3 4\n1 1 2\n2 2 1\n1 3 4\n2 3 3\n''') == '''\n3\n2\n'''\n\n# submit solution\nprint(solution(stdin))", "solution(\"\"\"1\n1 2 3 4 5\n2 1 5\n1 1 2\n2 1 5\n1 2 3\n2 2 5\n1 3 4\n2 3 5\n1 4 5\n2 4 5\n1 3 4\n2 4 5\n1 2 3\n2 2 5\n1 1 2\n2 1 5\n1 4 5\n2 4 5\n1 3 4\n2 3 5\n1 2 3\n2 2 5\n1 1 2\n2 1 5\n1 3 4\n2 3 5\n1 4 5\n2 4 5\n1 2 3\n2 2 5\n1 1 2\n2 1 5\n1 3 4\n2 3 5\n1 4 5\n2 4 5\n1 2 3\n2 2 5\n1 1 2\n2 1 5\n1 4 5\n2 4 5\n1 3 4\n2 3 5\n1 2 3\n2 2 5\n1 1 2\n2 1 5\n1 3 4\n2 3 5\n1 4 5\n2 4 5\n1 2 3\n2 2 5\n1 1 2\n2 1 5\n1 4 5\n2 4 5\n1 3 4\n2 3 5\n1 2 3\n2 2 5\n1 1 2\n2 1 5\n1 3 4\n2 3 5\n1 4 5\n2 4 5\n1 2 3\n2 2 5\n1 1 2\n2 1 5\n1 4 5\n2", "solution('''\n5 5\n1 2 3 4 5\n2 3 3\n1 1 3\n2 3 3\n2 3 3\n2 3 3\n''') == '''\n1\n4\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n5 4\n1 2 3 4 5\n2 3 3\n1 1 3\n2 3 3\n2 3 3\n''') == '''\n1\n4\n1\n'''", "solution('''\n5 5\n3 2 1 5 4\n2 1 2\n1 1 2\n2 1 2\n2 1 2\n2 1 3\n''') == '2\\n1\\n2\\n5\\n4\\n'", "solution(\"2 3\\n1 2\\n2 1 1\\n1 1 2\\n2 1 1\") == \"2\\n1\"\nassert solution(\"1 1\\n1\\n2 1 1\") == \"1\"\nassert solution(\"3 5\\n1 2 3\\n2 1 1\\n1 2 3\\n2 1 1\\n2 2 1\\n2 3 1\") == \"1\\n2\\n3\\n1\"\nassert solution(\"5 5\\n5 3 4 1 2\\n2 3 5\\n1 4 3\\n2 1 2\\n1 2 3\\n2 3 3\") == \"2\\n5\\n3\\n1\"\nassert solution(\"5 5\\n5 3 4 1 2\\n2 1 1\\n1 4 3\\n2 1 2\\n1 2 3\\n2 3 3\") == \"3\\n2\\n1\\n5\"\nassert solution(\"5 5\\n5 3 4 1 2\\n2 1 1\\n1 4 3\\n2 1 2\\n1 2 3\\n2 2 3\") == \"4\\n3\\n2\\n1\"\nassert solution(\"5 5\\n5 3 4 1 2\\n2 1 1\\n1 4 3\\n2 1 2\\n1 2 3\\n2 1 3\") == \"5\\n", "solution(TEST_CASES[0]) == OUTPUTS[0]\nassert solution(TEST_CASES[1]) == OUTPUTS[1]\nassert solution(TEST_CASES[2]) == OUTPUTS[2]\nassert solution(TEST_CASES[3]) == OUTPUTS[3]\nassert solution(TEST_CASES[4]) == OUTPUTS[4]\nassert solution(TEST_CASES[5]) == OUTPUTS[5]\nassert solution(TEST_CASES[6]) == OUTPUTS[6]\nassert solution(TEST_CASES[7]) == OUTPUTS[7]\nassert solution(TEST_CASES[8]) == OUTPUTS[8]\nassert solution(TEST_CASES[9]) == OUTPUTS[9]\nassert solution(TEST_CASES[10]) == OUTPUTS[10]\nassert solution(TEST_CASES[11]) == OUTPUTS[11]\nassert solution(TEST_CASES[12]) == OUTPUTS[12]\nassert solution(TEST_CASES[13]) == OUTPUTS[13]\nassert solution(TEST_CASES[14]) == OUTPUTS[14]\nassert", "solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n'''\n# ---\nassert solution('''\n''') == '''\n''", "solution('''\n5 5\n3 1 4 2 5\n2 1 2\n1 1 2\n2 3 2\n2 1 2\n2 3 2\n''') == '''\n3\n4\n2\n3\n'''", "solution('''\n5 5\n1 2 3 4 5\n2 3 3\n1 3 4\n2 3 3\n2 3 3\n2 3 3\n''') == '3\\n5\\n3\\n5\\n3\\n'\nassert solution('''\n5 5\n3 1 2 4 5\n2 3 3\n1 3 4\n2 3 3\n2 3 3\n2 3 3\n''') == '4\\n2\\n4\\n2\\n4\\n'\nassert solution('''\n5 5\n3 1 2 4 5\n2 3 3\n1 1 4\n2 3 3\n2 3 3\n2 3 3\n''') == '4\\n4\\n4\\n4\\n4\\n'\nassert solution('''\n5 3\n3 1 2 4 5\n2 3 1\n1 3 4\n2 3 1\n''') == '5\\n3\\n5\\n'\nassert solution('''\n5 3\n3 1 2 4 5\n2 3 1\n1 4 5\n2 3 1\n''') == '5\\n2\\n5\\n'\nassert solution('''\n5 3\n3 1 2 4 5\n2 5 1\n1 2 4\n2 5 1\n''') == '1\\n5\\n1\\n'\nassert solution('''\n5", "solution(\"./tests/1.in\") == \"./tests/1.out\"\nassert solution(\"./tests/2.in\") == \"./tests/2.out\"\nassert solution(\"./tests/3.in\") == \"./tests/3.out\"\nassert solution(\"./tests/4.in\") == \"./tests/4.out\"\nassert solution(\"./tests/5.in\") == \"./tests/5.out\"\nassert solution(\"./tests/6.in\") == \"./tests/6.out\"\nassert solution(\"./tests/7.in\") == \"./tests/7.out\"\nassert solution(\"./tests/8.in\") == \"./tests/8.out\"\nassert solution(\"./tests/9.in\") == \"./tests/9.out\"\nassert solution(\"./tests/10.in\") == \"./tests/10.out\"\nassert solution(\"./tests/11.in\") == \"./tests/11.out\"\nassert solution(\"./tests/12.in\") == \"./tests/12.out\"\nassert solution(\"./tests/13.in\") == \"./tests/13.out\"\nassert solution(\"./tests/14.in\") == \"./tests/14.out\"\nassert solution(\"./tests/", "solution('''\n5 5\n1 2 3 4 5\n2 3 2\n1 1 2\n2 1 2\n2 4 1\n2 5 2\n''') == '''\n1\n2\n5\n'''", "solution(__sample_input_1) == __sample_output_1\n\n# test solution 1\n\n# test solution 2\n\n# test solution 3\n\n# benchmark\nimport time\n\n__t = time.time()\n\n# invoke solution with sample input\nprint(solution(__sample_input_1))\n\nprint(time.time() - __t)", "solution('''\n4 2\n2 3 4 1\n2 3 1\n1 2 4\n''') == '''\n2\n1\n'''\n\nassert solution('''\n1 2\n1\n2 1 1\n1 1 1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n3 1\n3 1 2\n2 1 1\n''') == '''\n3\n'''\n\n# check the performance of solution\nimport timeit\nimport random\n\ndef gen_random_permutation(length: int) -> list:\n    while True:\n        permutation = list(range(1, length + 1))\n        random.shuffle(permutation)\n        if all(permutation[i] != permutation[i + 1] for i in range(length - 1)):\n            return permutation\n\ndef get_random_query(length: int) -> str:\n    query_type = random.randint(1, 2)\n    if query_type == 1:\n        x = random.randint(1, length)\n        y = random.randint(1, length)\n        while x == y:\n            y = random.randint(1, length)\n        return f'1 {x} {y}'\n    else:\n        i = random.rand", "solution('''1\n1 2\n1 2 3\n''') == '''1\n2\n3\n'''\n\nassert solution('''3\n1 2 3\n1 1 2\n2 1 1\n2 1 2\n''') == '''2\n1\n'''\n\n# load the file into \"stdin\" and call the solution,\n# - please remove the first two lines (they are only examples), and\n# - please keep the \"if __name__ == '__main__':\" line at the bottom\n#\n# INPUT SAMPLE:\n# file.txt\n\n# OUTPUT SAMPLE:\n# file.txt\n\n# SOLUTION:\nif __name__ == '__main__':\n    with open('file.txt', 'r') as file:\n        stdin = file.read()\n        print(solution(stdin))"], "finish_reason": ["stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "length", "length", "stop", "stop", "length", "stop"], "sum_logprob": [-6.475455119499999, -5.529969711, -121.85945898922395, -15.158846969729996, -115.54985192038315, -157.5309899239899, -12.663297135152787, -99.33059997126612, -5.522737253, -34.08450322360499, -14.318752016, -65.40700107292, -8.349499575, -34.5646229149, -146.34901650492628, -33.20745188800001, -52.22013657951005, -61.51152258567524, -50.536109942780016, -110.42796295590098, -13.422277183700002, -178.5049527180144, -85.96752952072902, -33.60112737829999, -22.487101203200005, -45.902123648275996, -53.737930900516986, -38.04524815541101, -27.570179191144987, -13.166993934850002, -145.81696774628017, -60.69207464455901, -64.945668398266, -26.3179493616, -65.39612685495999, -126.86486386213399, -41.15091208178001, -53.07742597307005, -35.94913481921301, -32.35100573752, -104.54767423056005, -17.149883339779375, -20.51418235378402, -31.121272993499993, -91.43568019468198, -18.570391425733984, -27.5952183897, -57.94948445684, -92.82180137062396, -141.55765254738998], "mean_logprob": [-0.5886777381363636, -0.614441079, -0.6123590903981105, -0.4889950635396774, -0.385166173067944, -0.5251032997466333, -0.042210990450509335, -0.3850023254700233, -0.6136374725555556, -0.11361501074535, -0.8422795303529412, -0.21802333690973333, -0.7590454159090909, -0.5858410663542373, -0.487830055016421, -1.32829807552, -0.2559810616642647, -0.20503840861891734, -0.46792694391462963, -0.42968078971167706, -0.671113859185, -0.595016509060048, -0.7959956437104537, -0.6222430995981482, -0.5110704818909091, -0.28334644227330863, -0.17912643633505668, -0.12681749385137, -0.09190059730381667, -0.5486247472854167, -0.48605655915426665, -0.49343150117527645, -0.21648556132755334, -0.5061144108, -0.5589412551705983, -0.4228828795404467, -0.4623697986716854, -0.17692475324356666, -0.3423727125639333, -0.5882001043185454, -0.3484922474352, -0.05716627779926447, -0.06838060784594667, -0.6102210390882353, -0.30478560064894, -0.061901304752446665, -0.5631677222387755, -0.689874814962381, -0.3094060045687467, -0.7259366797302051]}
{"prompt": "'''\nA rectangle with its opposite corners in (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\n\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n1\n10 10\n4 0 5 10 6\n4 0 5 10 6\n4 0 5 10 6\n4 0 5 10 6\n''') == '50'\n\nassert solution('''\n2\n3 3\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n5 5\n4 1 2 4 5\n4 1 2 4 5\n4 1 2 4 5\n4 1 2 4 5\n''') == '''\n2\n21\n'''\n\n# print the solution to stdout\nprint(solution('''\n2\n3 3\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n5 5\n4 1 2 4 5\n4 1 2 4 5\n4 1 2 4 5\n4 1 2 4 5\n'''))", "solution(\"\"\"\n4\n4 4\n4 1 1 2 3 4\n4 1 1 2 3 4\n4 2 2 4\n4 4\n4 2 1 2 3 4\n4 2 1 2 3 4\n4 3 1 3\n5 5\n5 4 1 2 3 4 5\n5 4 1 2 3 4 5\n5 3 1 2 5\n5 2 2 4\n5 5\n5 2 1 2 3 4 5\n5 2 1 2 3 4 5\n5 3 1 3 5\n5 4 1 2 3 5\n\"\"\") == \"\"\"\n24\n16\n36\n25\n\"\"\"", "solution(\"\") == \"\", \"empty input\"\nassert solution(\"1\\n\") == \"\", \"no args\"\nassert solution(\"2 3\\n\") == \"\", \"not enough args\"\nassert solution(\"-1 -1 1 1\") == \"\", \"negative numbers\"\nassert solution(\"1\\n0 1 2\\n1 2 3\\n1 2 3\\n1 2 3\") == \"2\", \"all on the same side\"\nassert solution(\"2\\n0 1 2\\n1 2 3\\n1 2 3\\n1 2 3\") == \"4\", \"all on the same side\"\nassert solution(\"4\\n0 1 2 3\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\") == \"12\", \"all on the same side\"\nassert solution(\"3\\n0 1 2\\n1 2 3\\n1 2 3\\n4 5 6\") == \"4\", \"one on every side\"\nassert solution(\"4\\n0 1 2 3\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\") == \"12\", \"one on every side\"\nassert solution(\"3\\n0 1 2\\n1 2 3\\n1 2 3\\n1 2 3\") == \"2\", \"one on every side\"\nassert solution(\"5\\n0 1 2 3 4\\", "solution('''\n1\n3 5\n5\n0 1 2 3 4\n5\n0 1 2 3 4\n5\n0 1 2 3 4\n5\n0 1 2 3 4\n''') == '3'", "solution('''\n4\n4 3\n4 1 2\n4 3 4\n4 1 2\n4 3 4\n4 5\n4 1 2\n4 5 4\n4 1 2\n4 5 4\n9 1\n2 3 5 6 7 8 9\n2 0\n2 3 5 6 7 8 9\n2 0\n''') == '12\\n16\\n3\\n3\\n'", "solution('''\n2\n3 3\n3 0 0 1\n3 0 0 2\n3 3\n3 0 0 1\n3 0 0 2\n''') == '\\n0\\n2'", "solution(\"testcase1\") == \"testcase1\"\nassert solution(\"testcase2\") == \"testcase2\"\n\n# verbose mode\n# print the input and output of testcases\nstdin = \"\"\n\nfrom io import StringIO\nfrom unittest.mock import patch\nimport sys\n\ndef get_input(prompt: str) -> str:\n    print(prompt, end=\"\")\n    sys.stdout.flush()\n    return input()\n\ndef print_output(output: str) -> None:\n    print(output)\n\nuser_input = []\n\nwith patch(\"builtins.input\", side_effect=get_input):\n    with patch(\"sys.stdout\", new=StringIO()) as mock_stdout:\n        try:\n            while True:\n                line = input()\n                user_input.append(line)\n                if line == \"\":\n                    break\n            user_output = solution(\"\\n\".join(user_input))\n            print_output(user_output)\n        except EOFError:\n            pass\n\nsys.stdin = StringIO(stdin)\n\nif __name__ == \"__main__\":\n    # verbose mode\n    # read the input from stdin and output the result to stdout\n    # remember to remove the newlines", "solution(\n'''1\n4 4\n4\n0 1 2 3\n4\n0 1 2 3\n4\n0 1 2 3\n4\n0 1 2 3\n''') == '''12'''\n\nassert solution(\n'''1\n2 3\n2\n0 1\n2\n0 1\n3\n0 1 2\n3\n0 1 2\n''') == '''6'''\n\nassert solution(\n'''1\n10 10\n2\n0 1\n2\n0 1\n2\n0 1\n2\n0 1\n''') == '''10'''\n\nassert solution(\n'''1\n3 4\n3\n0 1 2\n3\n0 1 2\n4\n0 1 2 3\n4\n0 1 2 3\n''') == '''8'''\n\n# submit the solution to DMOJ\n# judge.dmoj.ca/problems/TDPUZZLE\n\n# submit the solution to Codeforces\n# codeforces.com/contest/1228/problem/B\n\n# submit the solution to CSES Problem Set\n# https://cses.fi/problemset/task/1091", "solution('''\n\n''') == '''\n\n'''", "solution('''\n\n''') == '''\n\n'''", "solution('''\n2\n4 2\n4\n1 2 3\n4\n1 2 3\n4\n4 2\n4\n2 3\n4\n3\n4\n3\n''') == '''\n10\n3\n'''", "solution(\"\"\"\n3\n3 3\n5\n0 1 2 3\n4\n0 1 2 3\n4\n1\n0\n4\n0 1 2 3\n1\n3\n3 3\n4\n0 1 2 3\n4\n0 1 2 3\n4\n1\n0\n4\n0 1 2 3\n1\n3\n4 4\n5\n0 1 2 3 4\n5\n0 1 2 3 4\n5\n0 1 2 3 4\n5\n0 1 2 3 4\n1\n4\n4 4\n4\n0 1 2 3\n4\n0 1 2 3\n4\n0 1 2 3\n4\n0 1 2 3\n1\n4\n\"\"\"\n                  ) == \"\"\"\n21\n21\n88\n88\n\"\"\"", "solution('''\n1\n4 4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n1 2 3 4\n''') == '8'\nassert solution('''\n3\n3 6\n3\n1 2 3\n3\n1 2 3\n6\n1 2 3 4 5 6\n6\n1 2 3 4 5 6\n8 4\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n8\n1 2 3 4 5 6 7 8\n8\n1 2 3 4 5 6 7 8\n5 5\n3\n1 2 3\n3\n1 2 3\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n''') == '''\n8\n56\n0\n'''\n# stress testing\nimport random\nfrom string import ascii_letters\nrandom.seed(42)\nwhile True:\n    t = random.randint(1, 10**4)\n    print(t)\n    for _ in range(t):\n        w = random.randint(3, 10**6)\n        h = random.randint(3, 10**6)\n        print(w, h)\n        for _ in range(2):\n            k = random.randint(2, 2*10**5)\n            print(k)\n", "solution(\"\"\"\n1\n3 2\n4 2 3\n2 1\n4 1 2 3\n4 2 3\"\"\") == '4'\n\n# check performance of solution\nassert solution(\"\"\"\n\"\"\"\") == ''", "solution(\"\"\"\n1\n4 2\n4 0 2\n4 1 2\n4 2 2\n4 0 2\n\"\"\") == \"\"\"\n8\n\"\"\"", "solution(input_example) == output_example\n\ndef solution2(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution2(input_example) == output_example\n\n# some simple tests\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        stdin = '''\n        5\n        2 2\n        2 1 1\n        2 1 1\n        2 1 1\n        2 1 1\n        2 2\n        2 1 1\n        2 1 1\n        2 1 1\n        2 1 1\n        2 2\n        2 1 1\n        2 1 1\n        2 1 1\n        2 1 1\n        2 2\n        2 1 1\n        2 1 1\n        2 1 1\n        2 1 1\n        2 2\n        2 1 1\n        2 1 1\n        2 1 1\n        2 1 1\n        '''\n        stdout = '''\n        0\n        0\n        0\n        0\n        0\n        '''\n        self.assertEqual(solution(stdin), stdout)\n\n    def test_2(self):\n        stdin = '''\n        '''\n        stdout = '''\n        '''\n        self.assertEqual(solution(std", "solution(\"hello\") == \"olleh\"", "(solution(stdin=\"\"\"3\n5 5\n3 1 3\n3 2 3\n2 2\n3 4\n3 4\n12 9\n2 2 3 3 5 5 6 7 8 9\n2 2 3 4 7 8 9\n3 5 5 9\n3 4 5 6 8 9 9\n\"\"\")) == \"\"\"\n10\n16\n144\n\"\"\"", "solution('''\n1\n6 5\n4\n0 2 4\n3\n0 2 4\n3\n0 2 4\n3\n0 2 4\n''') == '24'\n\nassert solution('''\n2\n10 10\n6\n1 3 5 7 9\n6\n0 2 4 6 8 10\n6\n1 3 5 7 9\n6\n0 2 4 6 8 10\n3\n3 4 6\n3\n3 4 6\n3\n3 4 6\n''') == '59\\n36'\n\n# show solution\nimport subprocess\n\nfilename = input('File:')\nproc = subprocess.Popen(['cat', filename], stdout=subprocess.PIPE)\ntry:\n    stdout, stderr = proc.communicate(timeout=2)\nexcept subprocess.TimeoutExpired:\n    proc.kill()\n    stdout, stderr = proc.communicate()\nstdout = stdout.decode('utf-8')\n\nlines = stdout.split('\\n')\nif lines[-1] == '':\n    lines = lines[:-1]\n\ntestcases = int(lines[0])\n\nlines = lines[1:]\ni = 0\nwhile i < testcases:\n    wh = lines[i].split(' ')\n    i += 1\n   ", "solution('''1\n\n4 4\n4\n1 2 3 4\n4\n0 1 2 3\n4\n2 4 6 8\n4\n0 2 4 6\n''') == '32'", "solution(\"example\") == \"answer\"", "solution(r'''\n1\n10 10\n10 0 0\n10 0 5 10\n10 10 0\n''') == r'''\n50\n'''\n\n# display a solution\nprint(solution(r'''\n1\n10 10\n10 0 0\n10 0 5 10\n10 10 0\n'''))", "solution(get_input()) == get_output()", "solution('''\n2\n2 1\n1\n1\n1\n1\n1\n2\n''') == '1'\n\nassert solution('''\n1\n1 1\n1\n1\n1\n1\n1\n1\n''') == '0'\n\nassert solution('''\n1\n4 5\n4\n1\n2\n3\n3\n1\n2\n3\n4\n''') == '8'", "solution('''1\n5 6\n5\n0 2 4\n5\n0 1 3\n5\n0 2 4\n5\n0 1 3\n''') == '12'\nassert solution('''2\n3 6\n4\n0 2\n4\n0 2\n4\n0 2\n4\n0 2\n6 4\n4\n0 2\n4\n0 2\n4\n0 2\n4\n0 2\n''') == '12\\n8'\nassert solution('''1\n10 10\n4\n1 2 8 9\n4\n1 2 8 9\n4\n1 2 8 9\n4\n1 2 8 9\n''') == '36'\nassert solution('''1\n10 10\n5\n1 2 8 9 10\n5\n1 2 8 9 10\n5\n1 2 8 9 10\n5\n1 2 8 9 10\n''') == '50'\nassert solution('''1\n10 10\n5\n0 1 2 3 4\n5\n0 1 2 3 4\n5\n0 1 2 3 4\n5\n0 1 2 3 4\n''') == '24'\nassert solution('''1\n10 10\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n''') == '64'\nassert solution('''", "solution('''\n1\n3 2\n6\n0 1 2 2 2 3\n3\n0 1 2\n3\n0 1 2\n3\n0 1 2\n''') == '''\n12\n'''\nassert solution('''\n3\n4 4\n4\n0 1 2 3\n4\n0 1 2 3\n4\n0 1 2 3\n4\n0 1 2 3\n''') == '''\n24\n16\n8\n'''\n\n# Upload to UVA\nimport os\nimport sys\n\nfrom uva.main import main\n\nif __name__ == \"__main__\":\n    with open('input.txt', 'r') as infile:\n        with open('output.txt', 'w') as outfile:\n            main(infile, outfile)\n    if os.path.exists('upload.py'):\n        with open('input.txt', 'r') as infile:\n            with open('output.txt', 'r') as outfile:\n                sys.exit(os.system('upload.py {} {}'.format(infile.name, outfile.name)))", "solution(\"\"\"\n1\n5 4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n1 2 3 4\n\"\"\") == \"\"\"\n20\n\"\"\"\n\n# output for a large number of testcases\nprint(solution(get_input()))", "solution('''\n''') == '''\n'''\n\nassert solution('''\n''') == '''\n'''\n\n# check performance of solution\nprint('Performance:', measure_func_performance(solution, stdin='\\n'.join([str(x) for x in range(100)])))", "solution(test_data_1) == '54', 'Invalid result'", "solution('''\n1\n4 5\n2\n1 2\n4\n0 2\n4\n0 4 5\n4\n1 3\n2\n2 3\n''') == '''\n10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 5\n2\n1 2\n4\n0 2\n4\n0 4 5\n4\n1 3\n2\n2 3\n''') == '''\n10\n'''\n\nprint(solution(stdin))", "solution(r'''\n\n''') == r'''\n\n'''", "solution('''\n2\n3 3\n4 0 2\n4 3 0 1\n4 3 1 2 3\n4 0 2\n4 3 0 1\n4 3 1 2 3\n''') == '36'\nassert solution('''\n1\n5 5\n4 0 2 3\n5 4 1 3 2\n5 5 1 2 3 4\n4 1 3 4\n''') == '50'\nassert solution('''\n1\n10 10\n5 0 2 4 6\n5 10 1 3 5\n5 0 1 2 3\n5 10 4 5 6\n''') == '100'\nassert solution('''\n1\n10 6\n8 0 2 4 6 8\n5 6 1 3 5\n5 0 1 2 3\n5 6 4 5 6\n''') == '60'\nassert solution('''\n1\n10 5\n4 0 2 4\n4 5 0 2\n4 1 3 5\n4 0 2 4\n''') == '20'\nassert solution('''\n1\n10 10\n4 0 2 4\n4 10 1 3\n4 0 2 4\n4 10 1 3\n''') == '0'\nassert solution('''\n1\n10 10\n4 0 2 4\n4 10 1 3\n4 0 2 4\n4 10 1 3\n''') == '0'\nassert solution('''\n2\n3 3\n4 0", "solution('''\n1\n4 3\n4\n1 3\n4\n1 2\n4\n1 2\n''') == '12'\n\n# check the correctness of solution\nassert solution('''\n1\n4 3\n4\n1 3\n4\n1 2\n4\n1 2\n''') == '12'\n\n# # check the correctness of solution\nassert solution('''\n1\n4 3\n4\n1 3\n4\n1 2\n4\n1 2\n''') == '12'\n\n# # check the correctness of solution\nassert solution('''\n1\n4 3\n4\n1 3\n4\n1 2\n4\n1 2\n''') == '12'\n\n# # check the correctness of solution\nassert solution('''\n1\n4 3\n4\n1 3\n4\n1 2\n4\n1 2\n''') == '12'\n\n# # check the correctness of solution\nassert solution('''\n1\n4 3\n4\n1 3\n4\n1 2\n4\n1 2\n''') == '12'\n\n# # check the correctness of solution\nassert solution('''\n1\n4 3\n4\n1 3\n4\n1 2\n4\n1 2\n''') == '12'\n\n# # check the correctness of solution\nassert solution('''\n1\n", "solution(\"\"\"1\n3 3\n2\n0 1\n2\n0 1\n2\n0 1\n2\n0 1\n\"\"\") == \"\"\"3\"\"\"\nassert solution(\"\"\"1\n3 3\n3\n0 1 2\n3\n0 1 2\n3\n0 1 2\n3\n0 1 2\n\"\"\") == \"\"\"12\"\"\"\nassert solution(\"\"\"1\n3 3\n3\n0 1 2\n3\n0 1 2\n2\n0 1\n2\n0 1\n\"\"\") == \"\"\"9\"\"\"\nassert solution(\"\"\"1\n3 3\n2\n0 1\n2\n0 1\n3\n0 1 2\n3\n0 1 2\n\"\"\") == \"\"\"9\"\"\"\nassert solution(\"\"\"1\n5 7\n3\n1 3 4\n3\n2 4 6\n2\n2 3\n2\n4 5\n\"\"\") == \"\"\"30\"\"\"\nassert solution(\"\"\"1\n5 7\n4\n0 2 3 4\n4\n0 2 3 4\n2\n1 2\n2\n5 6\n\"\"\") == \"\"\"24\"\"\"\nassert solution(\"\"\"1\n5 7\n4\n0 2 3 4\n4\n0 2 3 4\n3\n1 2 3\n3\n4 5 6\n\"\"\") == \"\"\"27\"\"\"\nassert solution(\"\"\"1\n5 7\n4\n0 2 3 4\n4\n0 2 3 4\n3\n1 2 4\n", "solution(r'''\n2\n3 3\n5\n1 3\n2\n0 3\n5\n1 3\n2\n1 2\n''') == r'''\n12\n8\n'''", "solution(sample1) == '6'\nassert solution(sample2) == '6'\nassert solution(sample3) == '0'\nassert solution(sample4) == '25'\nassert solution(sample5) == '0'\nassert solution(sample6) == '6'\nassert solution(sample7) == '0'\nassert solution(sample8) == '0'\nassert solution(sample9) == '8'\nassert solution(sample10) == '10'\nassert solution(sample11) == '2'\nassert solution(sample12) == '4'\nassert solution(sample13) == '4'\nassert solution(sample14) == '0'\nassert solution(sample15) == '2'\nassert solution(sample16) == '2'\nassert solution(sample17) == '2'\nassert solution(sample18) == '6'\nassert solution(sample19) == '0'\nassert solution(sample20) == '4'\nassert solution(sample21) == '8'\nassert solution(sample22) == '2'\nassert solution(sample23) == '0'\nassert solution(sample24) == '4'\nassert solution(sample25) == '2'\nassert solution(sample26) == '4'\nassert solution(sample27) == '4'\nassert solution(sample", "solution(example) == example_output\n \n# get input for stdin, see https://www.interviewcake.com/concept/python/stdin-stdout\nimport fileinput\ndef read_input():\n    lines = []\n    for line in fileinput.input():\n        lines.append(line.strip())\n    text = \"\\n\".join(lines)\n    return text\n\n# open the file in local for stdin, see https://www.interviewcake.com/concept/python/stdin-stdout\nimport os\nimport sys\nfrom contextlib import contextmanager\n@contextmanager\ndef stdin(file):\n    oldstdin = sys.stdin\n    sys.stdin = open(os.path.dirname(__file__) + '/' + file)\n    yield\n    sys.stdin = oldstdin\n\n# read input for stdin, then call the solution and print the result to stdout\nwith stdin('tests/input.txt'):\n    text = read_input()\n    print(solution(text))", "solution('''2\n4 3\n4 2 1\n3 2 1\n4 2 1\n3 2 1\n4 4\n4 3 2 1\n4 3 2 1\n4 3 2 1\n4 3 2 1''') == '''6\n16'''", "solution(stdin=\"\"\"\n1\n3 2\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\n\"\"\") == \"\"\"\n6\n\"\"\"\nassert solution(stdin=\"\"\"\n1\n3 3\n3\n2 3 5\n3\n1 2 3\n3\n1 2 3\n3\n1 2 3\n\"\"\") == \"\"\"\n6\n\"\"\"\nassert solution(stdin=\"\"\"\n1\n5 5\n6\n1 2 3 4 5 6\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n6\n1 2 3 4 5 6\n\"\"\") == \"\"\"\n20\n\"\"\"\nassert solution(stdin=\"\"\"\n1\n5 5\n6\n1 2 3 4 5 6\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n6\n1 2 3 4 5 6\n\"\"\") == \"\"\"\n20\n\"\"\"\nassert solution(stdin=\"\"\"\n1\n5 5\n6\n1 2 3 4 5 6\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n6\n1 2 3 4 5 6\n\"\"\") == \"\"\"\n20\n\"\"\"\nassert solution(stdin=\"\"\"\n1\n5 5\n6\n1 2 3 4 5 6\n5\n1 2 3 4 5\n5\n1 2 3 4 5\n6\n1", "solution('''\n1\n4 5\n4\n0 1 2 3\n4\n0 1 2 3\n4\n0 1 2 3\n4\n0 1 2 3\n''') == '''\n6\n'''\n\nassert solution('''\n2\n2 3\n2\n0 1\n2\n0 1\n2\n0 1\n2\n0 1\n5 7\n3\n0 2 4\n3\n0 2 4\n3\n0 2 4\n3\n0 2 4\n''') == '''\n3\n10\n'''", "solution('''\n3\n3 3\n2 1 3\n2 3 2\n2 1 2\n2 1 2\n1 2 2\n3 1 2\n3 3\n3 1 2\n3 2 1\n3 1 2\n3 2 1\n''') == '''\n2\n2\n2\n'''", "solution(r'''\n1\n5 5\n2\n1 2\n2\n2 3\n2\n2 4\n2\n1 3\n''') == '1'\n\nassert solution(r'''\n3\n3 3\n3\n1 2 3\n3\n1 2 3\n2\n1 2\n2\n1 2\n8 8\n4\n2 3 5 6\n4\n2 3 5 6\n4\n2 3 5 6\n4\n2 3 5 6\n5 6\n2\n1 2\n2\n1 2\n2\n1 5\n2\n1 4\n''') == '''\n0\n2\n0\n'''\n\nprint('All tests have been passed!')", "solution('''\n''') == ''", "solution('''\n10\n10 10\n8\n0 2 4 6 8 10\n8\n0 2 4 6 8 10\n10\n0 3 6 8 10\n10\n0 3 6 8 10\n9\n9\n0 3 6 8\n9\n0 3 6 8\n4\n4\n0 2\n4\n0 2\n4\n4\n0 2\n4\n0 2\n4\n4\n0 2\n4\n0 2\n''') == '''\n400\n400\n600\n0\n0\n0\n0\n0\n'''", "solution(\"\"\"input text\"\"\") == \"correct\"", "solution('''\n2\n2 2\n2 1 2\n2 1 2\n2 1 2\n3 2\n3 1 2 3\n3 1 2 3\n3 1 2 3\n''') == '''\n6\n18\n'''", "solution('''\n''') == '''\n'''\n\n# run unit tests\n#import unittest\n#class Test(unittest.TestCase):\n#    def test_1(self):\n#        self.assertEqual(solution('''\n#'''), '''\n#''')\n#unittest.main()\n\nimport sys\nif len(sys.argv) == 2:\n    with open(sys.argv[1]) as f:\n        print(solution(f.read()))\nelse:\n    print(solution(sys.stdin.read()))", "solution('''\n1\n4 4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n1 2 3 4\n''') == '''\n12\n'''\n\nprint(solution('''\n1\n4 4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n1 2 3 4\n'''))", "str(solution('tests/20_points_in_rectangle.in')) == 'tests/20_points_in_rectangle.out'", "solution('''\n\n''') == '''\n\n'''"], "finish_reason": ["stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-59.68178661475503, -74.46383750339999, -126.4541083116361, -21.592164099699996, -69.06632405535002, -29.895529825280008, -126.42054510798613, -120.60803903478508, -7.528667248700001, -7.5286680747, -39.73719574250002, -75.67174257373999, -93.482974538172, -44.987261416500004, -28.523988613000004, -80.40915258893504, -12.229586570499999, -104.29527016890002, -127.03705541132496, -31.540988900000013, -10.653970426, -46.84467126737999, -8.6408972914, -53.552044406426, -100.009324562423, -122.40939215793, -45.85326692610001, -43.12649845608, -29.158258049999997, -58.409684885649945, -8.258486643999998, -141.73026186348244, -39.018728826525006, -93.27061606277005, -33.238357773699995, -79.9549367019921, -101.45007271625798, -31.46764405439999, -60.54103044593603, -45.085998983410974, -54.28216220680002, -86.12233248671, -7.2356688160000004, -78.63427469164998, -20.596377543999996, -25.4893757277, -46.47721030511298, -20.40986792614, -31.7274933324, -7.527462395], "mean_logprob": [-0.33529093603794946, -0.5863294291606299, -0.42151369437212, -0.4406564101979592, -0.7848445915380682, -0.6643451072284444, -0.42140181702662, -0.46033602685032443, -0.47054170304375004, -0.47054175466875, -0.7497584102358491, -0.4586166216590303, -0.31160991512724, -0.93723461284375, -0.8389408415588235, -0.26803050862978334, -1.1117805973181818, -1.3544840281675325, -0.42345685137108335, -0.7009108644444444, -1.1837744917777777, -0.641707825580548, -0.7200747742833333, -0.5520829320250104, -0.3333644152080767, -0.4838315895570356, -0.6743127489132353, -0.5989791452233333, -1.71519165, -0.5168998662446903, -0.4588048135555555, -0.472434206211608, -0.13006242942175, -0.31090205354256667, -0.7386301727488889, -0.2665164556733067, -0.4174900111780165, -0.5425455871448276, -0.20180343481978666, -0.3726115618463719, -0.7982670912764706, -0.5628910620046406, -0.7235668816, -0.6498700387739669, -1.7163647953333334, -0.48093161750377356, -0.3296256050008014, -0.214840715012, -0.9331615686, -0.4704663996875]}
{"prompt": "'''\nYou had n positive integers a_1, a_2, ..., a_n arranged in a circle. For each pair of neighboring numbers (a_1 and a_2, a_2 and a_3, ..., a_{n - 1} and a_n, and a_n and a_1), you wrote down: are the numbers in the pair equal or not.\n\nUnfortunately, you've lost a piece of paper with the array a. Moreover, you are afraid that even information about equality of neighboring elements may be inconsistent. So, you are wondering: is there any array a which is consistent with information you have about equality or non-equality of corresponding pairs?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Next t cases follow.\n\nThe first and only line of each test case contains a non-empty string s consisting of characters E and/or N. The length of s is equal to the size of array n and 2 \u2264 n \u2264 50. For each i from 1 to n: \n\n  * if s_i = E then a_i is equal to a_{i + 1} (a_n = a_1 for i = n); \n  * if s_i = N then a_i is not equal to a_{i + 1} (a_n \u2260 a_1 for i = n). \n\nOutput\n\nFor each test case, print YES if it's possible to choose array a that are consistent with information from s you know. Otherwise, print NO.\n\nIt can be proved, that if there exists some array a, then there exists an array a of positive integers with values less or equal to 10^9.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n1\nEE\n\"\"\") == \"\"\"\nYES\n\"\"\", \"Example #1\"\n\nassert solution(\"\"\"\n2\nEE\nEN\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\", \"Example #2\"\n\nassert solution(\"\"\"\n3\nNN\nNE\nEN\n\"\"\") == \"\"\"\nNO\nYES\nYES\n\"\"\", \"Example #3\"\n\nassert solution(\"\"\"\n3\nNNE\nEEN\nNEN\n\"\"\") == \"\"\"\nYES\nYES\nYES\n\"\"\", \"Example #4\"\n\n# test empty inputs\nassert solution(\"\"\"\n0\n\"\"\") == \"\"\"\n\"\"\", \"Empty input #1\"\n\nassert solution(\"\"\"\n1\n\"\"\") == \"\"\"\n\"\"\", \"Empty input #2\"\n\n# stress test\nimport random\n\ndef stress(size: int) -> None:\n    def is_valid(s: str) -> bool:\n        char = s[0]\n        for i in range(1, len(s)):\n            if char != s[i]:\n                return False\n        return True\n\n    def is_invalid(s: str) -> bool:\n        char = s[0]\n        for i in range(1, len(s)):\n            if char == s[i]:\n                return False\n        return True\n\n    for _", "solution(stdin_sample) == stdout_sample\n\n# get input for running in command line\ndef get_input():\n    from os import sys, path\n    if len(sys.argv) > 1:\n        fn = sys.argv[1]\n        if path.exists(fn):\n            with open(fn) as f:\n                return f.read().strip()\n    raise Exception(\"No input\")\n\n# runs solution with input from command line\ndef run():\n    input = get_input()\n    print(solution(input))\n\nif __name__ == \"__main__\":\n    run()", "solution('''\n6\nEEN\nEEEN\nNEENE\nNEENEN\nEEENE\nENEEEN\n''') == '''\nYES\nYES\nYES\nNO\nYES\nNO\n'''\n\n# then, check the efficiency of solution\n# TODO:", "solution('''\n3\nENE\nENEENE\nNNEENEENNN\n''') == '''\nYES\nYES\nNO\n'''", "solution('''\n''') == '''\n'''", "solution('''\n3\nEEN\nENN\nNE\n''') == '''\nYES\nYES\nNO\n'''", "solution('''\n1\nNENEN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENENE\n''') == '''\nNO\n'''\n\nassert solution('''\n2\nE\nN\n''') == '''\nYES\nYES\n'''\n\nassert solution('''\n2\nNN\nEE\n''') == '''\nYES\nYES\n'''\n\nassert solution('''\n2\nEN\nNE\n''') == '''\nNO\nNO\n'''\n\nassert solution('''\n3\nENE\nEEN\nENE\n''') == '''\nYES\nYES\nYES\n'''\n\nassert solution('''\n3\nENN\nENN\nENN\n''') == '''\nYES\nYES\nYES\n'''\n\nassert solution('''\n3\nENE\nENE\nENE\n''') == '''\nNO\nNO\nNO\n'''\n\nassert solution('''\n4\nENEE\nENEN\nENNE\nENEE\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\nassert solution('''\n4\nENNN\nNNNN\nNNNN\nNNNN\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\nassert solution('''\n4\nEN", "solution(\"5\\nEEN\\nEENEN\\nENE\\nENEEN\\nENNNN\") == \\\n\"\"\"YES\nYES\nYES\nNO\nNO\"\"\"\nassert solution(\"5\\nENNNN\\nNNNNN\\nNNNNN\\nNNNNN\\nNNNNN\") == \\\n\"\"\"NO\nNO\nNO\nNO\nNO\"\"\"\nassert solution(\"5\\nNNNNN\\nENNNN\\nNNNNN\\nNNNNN\\nNNNNN\") == \\\n\"\"\"YES\nYES\nYES\nYES\nYES\"\"\"\nassert solution(\"6\\nENNENN\\nENNNNN\\nNNENNN\\nNNNNNN\\nNNNNNN\\nNNNNNN\") == \\\n\"\"\"YES\nYES\nYES\nYES\nYES\nYES\"\"\"\nassert solution(\"6\\nENNENN\\nENNNNN\\nNNENNN\\nNNNNNN\\nNNNNNN\\nNNNNNE\") == \\\n\"\"\"YES\nYES\nYES\nYES\nYES\nNO\"\"\"\nassert solution(\"7\\nNNNNNNN\\nNNNNNNN\\nNNNNNNN\\nNNNNNNN\\nNNNNNNN\\nNNNNNNN\\nNNNNNNN\") == \\\n\"\"\"NO\nNO\nNO\nNO\nNO\nNO\nNO\"\"\"\nassert solution", "solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\", \"Example test failed\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\",", "solution(\"\"\"\n4\nNNEE\nEENEN\nENNNN\nEEEN\n\"\"\") == \"\"\"\nYES\nYES\nNO\nNO\n\"\"\"", "solution('''\n2\nEE\nEN\n''') == '''\nYES\nNO\n'''\n\nassert solution('''\n1\nEN\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nE\n''') == '''\nYES\n'''\n\nassert solution('''\n3\nNN\nNNN\nNNNN\n''') == '''\nYES\nYES\nYES\n'''\n\nassert solution('''\n1\nNNNNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNNEE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNEE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEEE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEEN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNEN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNEE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENE\n''') == '''", "solution('''\n1\nEEENNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEENNNN\n''') == '''\nNO\n'''\n\nassert solution('''\n3\nEEN\nNEN\nNEN\n''') == '''\nYES\nYES\nNO\n'''\n\nassert solution('''\n4\nENNN\nENNN\nNNNN\nNNNN\n''') == '''\nYES\nYES\nNO\nNO\n'''\n\nassert solution('''\n2\nEENNN\nENNNN\n''') == '''\nYES\nNO\n'''\n\nassert solution('''\n1\nEENNNNNNNNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENNNNNNNNNNN\n''') == '''\nNO\n'''\n\nassert solution('''\n2\nEENN\nENNN\n''') == '''\nYES\nNO\n'''\n\nassert solution('''\n1\nNNEENN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNENNN\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nEENNNNE\n''') == '''\nYES", "solution('''1\nNENE''') == 'YES'\nassert solution('''2\nNNNN\nEEEN''') == 'NO\\nYES'\nassert solution('''1\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE''') == 'YES'\nassert solution('''1\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN''') == 'NO'\nassert solution('''1\nNENENENENENENENENENENENENENENENENENENENENENENENENENENE''') == 'YES'\nassert solution('''1\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN''') == 'NO'\nassert solution('''2\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN''') == 'NO\\nNO'\nassert solution('''1\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN''') == 'NO'", "solution('''\n5\nEEENNN\nENNE\nENE\nENEENN\nENEENE\n''') == '''\nYES\nYES\nNO\nYES\nNO\n'''", "solution('''\n1\nE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNNNNNNNNN\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nNNNEN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNNNNENNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENNNNNNNNNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNNNNNNNNNNNNN\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nNNNENNNNENNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNNNNNNNNENNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNNNNNNNNNNNNNNN\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "solution('''\n4\nEEEN\nENNN\nEEEN\nENNN\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution(\"\"\"1\nEN\"\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"1\nNN\"\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"1\nEE\"\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"2\nNN\nNN\"\"\"\") == \"\"\"NO\nNO\"\"\"\nassert solution(\"\"\"4\nN\nE\nN\nE\"\"\"\") == \"\"\"YES\nYES\nYES\nYES\"\"\"\nassert solution(\"\"\"4\nN\nE\nN\nN\"\"\"\") == \"\"\"YES\nYES\nNO\nNO\"\"\"\nassert solution(\"\"\"3\nEE\nEN\nEE\"\"\"\") == \"\"\"YES\nYES\nYES\"\"\"\nassert solution(\"\"\"3\nEN\nEN\nEE\"\"\"\") == \"\"\"YES\nYES\nYES\"\"\"\nassert solution(\"\"\"3\nN\nN\nN\"\"\"\") == \"\"\"NO\nNO\nNO\"\"\"\nassert solution(\"\"\"3\nN\nE\nN\"\"\"\") == \"\"\"YES\nYES\nYES\"\"\"\nassert solution(\"\"\"3\nE\nN\nE\"\"\"\") == \"\"\"YES\nYES\nYES\"\"\"\nassert solution(\"\"\"3\nE\nE\nN\"\"\"\") == \"\"\"YES\nYES\nYES\"\"\"\nassert solution(\"\"\"3\nN\nE\nE\"\"\"\") == \"\"\"YES\nYES\nYES\"\"\"\nassert solution(\"\"\"3\nE\nN\nN\"\"\"\") == \"\"\"YES\nYES\nYES\"\"\"\nassert solution(\"\"\"3\nN\nN\nE\"\"\"\")", "solution('''\n3\nEEN\nEEN\nNEN\n''') == '''\nYES\nYES\nNO\n'''", "solution('''\n3\nEE\nEN\nNN\n''') == '''\nYES\nYES\nNO\n'''\n\n# check time complexity\ndef test(stdin: str, times: int = 10**5) -> None:\n    import time\n    from io import StringIO\n    from random import randint\n    from string import ascii_uppercase\n    from timeit import timeit\n\n    start = time.time()\n    for i in range(times):\n        n = randint(10**5, 10**6)\n        s = ''.join(choice(ascii_uppercase) for _ in range(n))\n        stdin = StringIO(s)\n        solution(stdin)\n    print(f'Time complexity: {(time.time() - start) / times} sec')\n\ntest('''\n  \n''')", "solution('''3\nENEN\nENN\nENNEN''') == '''YES\nYES\nNO'''", "solution('''2\nEN\nEE''') == '''YES\nNO'''\nassert solution('''4\nEN\nNE\nEE\nEN''') == '''YES\nYES\nNO\nYES'''\nassert solution('''2\nNN\nNN''') == '''NO\nNO'''\nassert solution('''2\nEE\nEE''') == '''YES\nYES'''\nassert solution('''3\nEN\nEN\nNN''') == '''YES\nYES\nNO'''\nassert solution('''2\nEE\nEN''') == '''YES\nYES'''\nassert solution('''3\nEE\nEN\nEN''') == '''YES\nYES\nYES'''\nassert solution('''2\nEN\nNN''') == '''YES\nNO'''\nassert solution('''2\nEN\nEN''') == '''YES\nYES'''\nassert solution('''3\nNN\nNN\nNN''') == '''NO\nNO\nNO'''\nassert solution('''2\nNN\nEN''') == '''NO\nYES'''\nassert solution('''3\nNN\nNN\nNN''') == '''NO\nNO\nNO'''\nassert solution('''2\nEN\nEE''') == '''YES\nNO'''\nassert solution(''", "solution('''\n1\nENNNEEENNE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENEENEENNN\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nEENENENENEN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNEENNNENNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEENEN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEEENNNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENNNNNEE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNNNNNNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEEEEEEEE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNNNNNNNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEENNNENNNNE\n''') == '''\nYES\n'''", "solution(\"\"\"\n2\nEE\nNN\n\"\"\") == \"\"\"\nYES\nNO\n\"\"\"", "solution('''\n1\nEE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEN\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nNE\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEEN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNEN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n2\nEN\nNN\n''') == '''\nNO\nYES\n'''\n\nassert solution('''\n1\nEEEN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEENE\n''') == '''\nYES\n'''\n\nassert solution('''", "solution(test_input) == test_output\n\n# get the input and run the solution\nt = int(input())\ninputs = [input() for _ in range(t)]\n\nfor i in inputs:\n    print(solution(i))", "solution('''2\nEEEN\nEENNN\n''') == '''YES\nNO\n'''", "solution(\"2\\nEEENNNN\\nENN\") == \"YES\\nNO\"\nassert solution(\"3\\nEEN\\nEEENNN\\nNNN\") == \"YES\\nYES\\nNO\"\n\n# get input for testing\n# t = int(input())\n# for i in range(t):\n#     string = input()\n#     print(solution(string))", "solution(\"1\\nEEEN\") == \"YES\"\nassert solution(\"1\\nNENE\") == \"YES\"\nassert solution(\"1\\nENNN\") == \"NO\"\nassert solution(\"1\\nNENN\") == \"NO\"\nassert solution(\"1\\nNNNN\") == \"NO\"\nassert solution(\"1\\nEENNNNNN\") == \"YES\"\nassert solution(\"1\\nEEENNNNNN\") == \"YES\"\nassert solution(\"1\\nEEEEENNNNNN\") == \"YES\"\nassert solution(\"1\\nNNENNEENNNN\") == \"YES\"\nassert solution(\"1\\nNNNENNEENNNN\") == \"YES\"\nassert solution(\"1\\nNNNNENNEENNNN\") == \"YES\"\nassert solution(\"1\\nNNNNNENNEENNNN\") == \"YES\"\nassert solution(\"1\\nNNNNNNENNEENNNN\") == \"YES\"\nassert solution(\"1\\nNNNNNNNENNEENNNN\") == \"YES\"\nassert solution(\"1\\nNNNNNNNNENNEENNNN\") == \"YES\"\nassert solution(\"1\\nNNNNNNNNNENNEENNNN\") == \"YES\"\nassert solution(\"1\\nNNNNNNNNNNENNEENNNN\") == \"YES", "solution('''\n2\nEE\nNN\n''') == '''\nYES\nNO\n'''\nassert solution('''\n5\nNEEN\nNNEN\nENNN\nNNNN\nEEEN\n''') == '''\nYES\nYES\nYES\nNO\nYES\n'''\n\nimport iostream\nstdin = iostream.get_input()\ncout = iostream.get_output()\n\n# read from stdin\nn = int(stdin.readline())\nfor i in range(n):\n    s = stdin.readline()\n    cout.write(f'{solution(s)}')", "solution('''\n1\nEENNE\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nEENNN\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nENNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENNNNEEENNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENNNNEEENNNNEEENNNN\n''') == '''\nNO\n'''\n\nassert solution('''\n1\nENNNNEEENNNNEEENNNNEEENNNN\n''') == '''\nYES\n'''\n\nassert solution('''\n1\nENNNNEEENNNNEEENNNNEEENNNNEEENNNN\n''') == '''\nNO\n'''\n\nassert solution('''\n3\nNEN\nENN\nNNN\n''') == '''\nYES\nYES\nNO\n'''\n\nassert solution('''\n4\nEENNN\nNNNE\nEEENNE\nNEEN\n''') == '''\nYES\nYES\nYES\nYES\n'''\n\nassert solution('''\n5\nENENNNE\nNENEENNN\nNEENEN", "solution(\"4\\nEENNE\\nEN\\nNE\\nNN\") == \"YES\\nYES\\nNO\\nNO\", \"Oops!\"\nassert solution(\"8\\nEEENNNEN\\nNNEENNNE\\nEENNNNNE\\nENNNNNEE\\nNNNNNNEE\\nNNNNNNEN\\nNNENNNNN\\nNNNNNNNN\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nNO\\nNO\", \"Oops!\"\n\n# check performance of solution\nfrom random import choice\nfrom time import time\n\ndef performance_test(N: int) -> None:\n    s = ''.join([choice(('E', 'N')) for _ in range(N)])\n    t = time()\n    solution(s)\n    print(f\"Size: {N}, Time: {time() - t} seconds\")\n\nfor N in [10, 20, 30, 40, 50]:\n    performance_test(N)", "solution('''\n''') == ''", "solution('''\n5\nENNE\nEENEEN\nENEENE\nNENENENE\nENNNEN\n''') == '''\nYES\nYES\nYES\nNO\nNO\n'''\n\nassert solution('''\n3\nN\nE\nNE\n''') == '''\nYES\nYES\nNO\n'''", "solution(\"\"\"1\nEEENNNN\n\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"1\nENNNEEE\n\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"1\nNNNNNNN\n\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"1\nNNNNNNNEN\n\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"1\nEEENNNNE\n\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"1\nENNNENNNNEEN\n\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"1\nENNNENNNNEENN\n\"\"\") == \"\"\"NO\"\"\"\nassert solution(\"\"\"1\nENNNNEENNENNN\n\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"1\nEEENNEEEENNEE\n\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"1\nENNNNEEEENNEE\n\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"1\nEEENNEEEENNNN\n\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"1\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "solution('''\n4\nEEEN\nNEEN\nENNE\nEENE\n''') == '''\nYES\nYES\nNO\nNO\n'''\n# test for performance\nimport random\nrandom.seed(0)\nstr_int = ''.join(str(random.randint(0, 9)) for _ in range(25))\nstr_pattern = ''.join('E' if i & 1 else 'N' for i in range(25))\nassert solution(str_pattern) == 'YES'", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution", "solution('''\n2\nENNE\nNN\n''') == '''\nYES\nNO\n'''", "solution(stdin=\"\"\"\n3\nEEEN\nNENNN\nEEEN\n\"\"\") == \"\"\"\nYES\nNO\nYES\n\"\"\"", "solution('''\n\n''') == '', 'test 1'\n\nassert solution('''\n\n''') == '', 'test 2'", "solution('''1\nEEENNN''') == '''YES'''\nassert solution('''1\nEENNNN''') == '''NO'''\nassert solution('''1\nEENNNNN''') == '''YES'''\nassert solution('''1\nNEENNNNN''') == '''YES'''\nassert solution('''1\nNNEENNNN''') == '''YES'''\nassert solution('''1\nNNNNEENN''') == '''YES'''\nassert solution('''1\nNNNNNNEN''') == '''YES'''\nassert solution('''1\nNNNNNNNN''') == '''YES'''\nassert solution('''1\nNEEENNNN''') == '''NO'''\nassert solution('''1\nNNNEEENN''') == '''NO'''\nassert solution('''1\nNNNNNEE''') == '''NO'''\nassert solution('''1\nNNNNNNN''') == '''NO'''\nassert solution('''1\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "solution('''1\nEENNNEE''') == 'YES'\nassert solution('''1\nEENNNEEN''') == 'NO'\nassert solution('''1\nEENNNNEE''') == 'YES'\nassert solution('''1\nEENNNNEEEN''') == 'YES'\nassert solution('''1\nEENNNNEEEEN''') == 'YES'\nassert solution('''1\nNEEENNEEEN''') == 'YES'\nassert solution('''1\nNEENNNEEEN''') == 'YES'\nassert solution('''1\nNEENNNEEEEN''') == 'YES'\nassert solution('''1\nNEENNNNNEEEEN''') == 'YES'\nassert solution('''1\nNEENNNNNEEEENN''') == 'YES'\nassert solution('''1\nEENNNNNEEEENN''') == 'YES'\nassert solution('''1\nEENNNNNEEEENNN''') == 'YES'\nassert solution('''1\nNEENNNNNEEEENNN''') == 'YES'\nassert solution('''1\nNNNEEEENNNEEN''') == 'YES'\nassert solution('''1\nEENNNNNEEEENNNN''') == 'NO'\nassert solution(", "solution(r'''\n5\nENNN\nENE\nENEENE\nENEEENE\nENNEENNE\n''') == r'''\nYES\nYES\nYES\nNO\nNO\n'''", "solution('''\n2\nEEN\nEN\n''') == '''\nYES\nNO\n'''\n\n# test the performance of solution\nfrom random import randint, choice\nfrom time import time\n\nN = 10**5\n\nbig_string = ''.join(choice(['E', 'N']) for _ in range(N))\n\nprint(big_string)\nt0 = time()\nsolution(big_string)\nt1 = time()\nprint(f'{t1 - t0:.2f} seconds')", "solution(stdin1) == sol1\nassert solution(stdin2) == sol2\nassert solution(stdin3) == sol3\nassert solution(stdin4) == sol4\nassert solution(stdin5) == sol5\nassert solution(stdin6) == sol6\nassert solution(stdin7) == sol7\nassert solution(stdin8) == sol8\nassert solution(stdin9) == sol9\nassert solution(stdin10) == sol10\nassert solution(stdin11) == sol11\nassert solution(stdin12) == sol12\nassert solution(stdin13) == sol13\nassert solution(stdin14) == sol14\nassert solution(stdin15) == sol15\nassert solution(stdin16) == sol16\nassert solution(stdin17) == sol17\nassert solution(stdin18) == sol18\nassert solution(stdin19) == sol19\nassert solution(stdin20) == sol20\nassert solution(stdin21) == sol21\nassert solution(stdin22) == sol22\nassert solution(stdin23) == sol23\nassert solution(stdin24) == sol24\nassert solution(stdin25) == sol25\nassert solution(stdin26) == sol26\nassert solution(stdin27) == sol27\nassert solution(std", "solution('''\n2\nEE\nNN\n''') == '''\nYES\nNO\n'''\n\n# show execution time\nprint(\"Time : %.3f sec\" % timeit.timeit(solution, setup=\"from __main__ import solution\", number=1))", "solution('''1\nENEE''') == 'YES'\nassert solution('''2\nEENE\nNNNN''') == 'YES\\nNO'\nassert solution('''3\nEENNN\nNNEEN\nNNNEE''') == 'YES\\nYES\\nNO'\n\nstdin = sys.stdin.read()\nprint(solution(stdin))", "solution(\"\") == \"\", \"Empty test case. Please verify input.\"\nassert solution(\"\") == \"\", \"Empty test case. Please verify input.\"\nassert solution(\"\") == \"\", \"Empty test case. Please verify input.\"\nassert solution(\"\") == \"\", \"Empty test case. Please verify input.\"\nassert solution(\"\") == \"\", \"Empty test case. Please verify input.\"\nassert solution(\"\") == \"\", \"Empty test case. Please verify input.\"\n\n# test inputs\ninput_1 = \"\"\"\n\n\"\"\"\n\n# expected outputs\nexpected_1 = \"\"\"\n\n\"\"\"\n\n# execute and compare\nactual_1 = solution(input_1)\nassert actual_1 == expected_1, \"Error for test case: '{}'\".format(input_1)\n\nprint(\"PASSED!!!\")", "solution('''\n2\nEE\nEE\n''') == '''\nYES\nYES\n'''\n\n# test 1\nassert solution('''\n6\nNEEN\nNEEN\nEENE\nEENE\nNENE\nNENE\n''') == '''\nYES\nYES\nYES\nYES\nNO\nNO\n'''\n\n# test 2\nassert solution('''\n3\nENE\nENE\nENE\n''') == '''\nYES\nYES\nYES\n'''\n\n# test 3\nassert solution('''\n2\nNNN\nNEN\n''') == '''\nNO\nYES\n'''\n\n# test 4\nassert solution('''\n1\nENE\n''') == '''\nYES\n'''\n\n# test 5\nassert solution('''\n1\nENE\n''') == '''\nYES\n'''\n\n# test 6\nassert solution('''\n1\nNNN\n''') == '''\nNO\n'''\n\n# test 7\nassert solution('''\n1\nNEN\n''') == '''\nYES\n'''\n\n# test 8\nassert solution('''\n1\nNNN\n''') == '''\nNO\n'''\n\n# test 9\nassert solution('''\n1\nNEN\n''') == '''\nYES\n''", "solution('''\n4\nNNNNNN\nNNNNNN\nNNNNNN\nNNNNNN\n''') == '''\nNO\nNO\nNO\nNO\n'''\n\nassert solution('''\n4\nEEEEEE\nEENNNN\nNNNNNN\nNNNNNN\n''') == '''\nYES\nYES\nNO\nNO\n'''\n\nassert solution('''\n4\nENENNN\nENENNN\nNNNNNN\nNNNNNN\n''') == '''\nYES\nYES\nNO\nNO\n'''\n\nassert solution('''\n4\nEENENN\nENNNNN\nNNNNNN\nNNNNNN\n''') == '''\nYES\nYES\nNO\nNO\n'''\n\nassert solution('''\n4\nEENENN\nENNNNN\nNNNNNN\nNNNNNN\n''') == '''\nYES\nYES\nNO\nNO\n'''\n\nassert solution('''\n4\nENNNEN\nNNNNNN\nNNNNNN\nNNNNNN\n''') == '''\nYES\nNO\nNO\nNO\n'''\n\nassert solution('''\n4\nEEENNEN\nNNNNNNN\nNNNNNNN\nNNNNNNN\n''') == '''\nYES\nNO\nNO\nNO\n'''\n\nassert solution(''", "solution('''\n5\nENNNN\nEEEEE\nNNNEN\nNNENNN\nNNNNNN\n''') == '''\nYES\nYES\nYES\nNO\nNO\n'''"], "finish_reason": ["length", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "length", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "length", "stop"], "sum_logprob": [-112.772563910441, -54.20196351621999, -59.39031758542001, -20.1438690574, -6.7177945349999995, -13.043054471429999, -74.53636096679158, -87.51791339346201, -25.684273755600014, -26.827070790449994, -69.03856799784997, -91.27326200453253, -64.57143973972006, -29.356999714300002, -70.83172579440208, -19.126565002699994, -81.99135182509995, -17.598934186299996, -93.17596126973399, -17.135733053699997, -77.97504116582705, -97.48739690125774, -9.987327064000002, -37.726667175999005, -20.447014005549995, -15.222662325799998, -49.695081140739994, -61.957720732374035, -76.32370921470002, -103.468559942857, -138.05158309714992, -7.234611927000001, -50.28553640650001, -95.74519322946004, -83.33387849972, -13.767933965751002, -13.954966448000002, -24.4322609846, -13.920452594999999, -66.55001462308101, -90.67313429619199, -36.036497746310005, -67.13200560893998, -17.42163233100601, -37.0525715393, -43.36259695376, -71.64119006128998, -78.18136230619234, -70.88238409984696, -28.751364797229996], "mean_logprob": [-0.37590854636813664, -0.37380664493944826, -0.9427034537368254, -0.6104202744666667, -0.4798424667857143, -0.44976049901482756, -0.24845453655597166, -0.29172637797820666, -0.085614245852, -0.76648773687, -0.23012855999283333, -0.304244206681775, -0.21523813246573334, -0.7160243832756098, -0.23610575264800665, -0.5312934722972222, -0.2733045060836667, -0.5677075543967742, -0.46587980634867, -0.6590666559115385, -0.25991680388609, -0.324957989670859, -0.4755870030476191, -0.12575555725333, -0.3525347242336207, -0.608906493032, -0.5460997927553846, -0.20652573577458, -0.519208906222449, -0.3448951998095233, -0.5899640303297009, -0.7234611927, -0.6704738187533333, -0.3191506440982, -0.7183955043079311, -0.04589311321917, -0.55819865792, -0.76350815576875, -0.4094250763235294, -0.22183338207693667, -0.30224378098730664, -0.8008110610291111, -0.53705604487152, -0.05807210777002, -0.5789464303015625, -0.48722019049168536, -0.39363291242467036, -0.26060454102064134, -0.23627461366615665, -0.6389192177162222]}
{"prompt": "'''\nYou are given an integer k and a string s that consists only of characters 'a' (a lowercase Latin letter) and '*' (an asterisk).\n\nEach asterisk should be replaced with several (from 0 to k inclusive) lowercase Latin letters 'b'. Different asterisk can be replaced with different counts of letter 'b'.\n\nThe result of the replacement is called a BA-string.\n\nTwo strings a and b are different if they either have different lengths or there exists such a position i that a_i \u2260 b_i.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds: \n\n  * a is a prefix of b, but a \u2260 b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\n\n\nNow consider all different BA-strings and find the x-th lexicographically smallest of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 2000) \u2014 the number of testcases.\n\nThe first line of each testcase contains three integers n, k and x (1 \u2264 n \u2264 2000; 0 \u2264 k \u2264 2000; 1 \u2264 x \u2264 10^{18}). n is the length of string s.\n\nThe second line of each testcase is a string s. It consists of n characters, each of them is either 'a' (a lowercase Latin letter) or '*' (an asterisk).\n\nThe sum of n over all testcases doesn't exceed 2000. For each testcase x doesn't exceed the total number of different BA-strings. String s contains at least one character 'a'.\n\nOutput\n\nFor each testcase, print a single string, consisting only of characters 'b' and 'a' (lowercase Latin letters) \u2014 the x-th lexicographically smallest BA-string.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"3\\n5 0 1\\na****\\n4 4 1\\n*aaa\\n4 1 1\\n*aa*\") == \"aaaaa\\naaaa\\naaaa\"\n\nprint(\"passed\")", "solution(\"\"\"\n2\n3 0 2\na**\n3 3 5\n***\n\"\"\") == \"\"\"\naa\nbbb\n\"\"\", \"Test 1 failed\"\n\nassert solution(\"\"\"\n1\n3 1 1\na**\n\"\"\") == \"\"\"\naaa\n\"\"\", \"Test 2 failed\"\n\nassert solution(\"\"\"\n1\n3 2 6\n***\n\"\"\") == \"\"\"\nbbb\n\"\"\", \"Test 3 failed\"\n\nassert solution(\"\"\"\n1\n3 4 10\n***\n\"\"\") == \"\"\"\nbba\n\"\"\", \"Test 4 failed\"\n\nassert solution(\"\"\"\n1\n5 1 1\na***a\n\"\"\") == \"\"\"\naaaaa\n\"\"\", \"Test 5 failed\"\n\nassert solution(\"\"\"\n1\n5 3 2\na***a\n\"\"\") == \"\"\"\naaaab\n\"\"\", \"Test 6 failed\"\n\nassert solution(\"\"\"\n1\n5 4 7\na***a\n\"\"\") == \"\"\"\naabaa\n\"\"\", \"Test 7 failed\"\n\nassert solution(\"\"\"\n1\n5 5 22\na***a\n\"\"\") == \"\"\"\nabbaa\n\"\"\", \"Test 8 failed\"\n\nassert solution(\"\"\"\n1\n5 6 32\na***a\n\"\"\") == \"\"\"\nababa\n\"\"\", \"Test 9 failed\"\n\nassert solution(\"\"\"\n1\n5 7 50\n", "solution(\"\"\"\n2\n4 1 1\n**aa\n4 1 2\n**aa\n\"\"\") == \"\"\"\nbaaa\nbaab\n\"\"\"\n\n# input\nnum_testcases = int(input())\nfor i in range(num_testcases):\n    pass", "solution(stdin1) == \"ababbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb", "solution('''\n3\n3 2 8\na**\n3 1 0\n**a\n3 0 5\n*a*\n''') == '''\nbba\naaa\nbaa\n'''", "solution(\"\"\"1\n8 2 1\na**a*aa*\n\"\"\") == \"abababab\"\nassert solution(\"\"\"1\n6 0 1\n*a*b*\n\"\"\") == \"aaaaaa\"\nassert solution(\"\"\"2\n6 0 1\n*a*b*\n6 1 1\n*a*b*\n\"\"\") == \"aaaaaa\"\nassert solution(\"\"\"1\n3 0 2\n***\n\"\"\") == \"bbb\"\nassert solution(\"\"\"2\n3 0 2\n***\n1 0 2\n*\n\"\"\") == \"bbb\"\nassert solution(\"\"\"2\n4 1 2\nab**\n4 1 2\n**ab\n\"\"\") == \"abbb\"\nassert solution(\"\"\"1\n6 0 2\n*a*b*\n\"\"\") == \"aaaaab\"\nassert solution(\"\"\"2\n6 0 2\n*a*b*\n6 1 2\n*a*b*\n\"\"\") == \"aaaaab\"\nassert solution(\"\"\"1\n3 0 3\n***\n\"\"\") == \"bba\"\nassert solution(\"\"\"2\n3 0 3\n***\n1 0 3\n*\n\"\"\") == \"bba\"\nassert solution(\"\"\"2\n4 1 3\nab**\n4 1 3\n**ab\n\"\"\") == \"abbb\"\nassert solution(\"\"\"1\n6 0 3\n", "solution('''\n3\n3 0 1\naaa\n3 1 1\naaa\n3 2 1\naaa\n''') == '''\naaa\naba\nabb\n'''\n\n# check time limit\nimport timeit\nimport random\nimport string\n\ndef generate_testcase():\n    n = random.randint(1, 2000)\n    k = random.randint(0, 2000)\n    x = random.randint(1, 1000000000000000000)\n    s = ''.join(random.choice(string.ascii_lowercase + '*') for _ in range(n))\n    return '\\n'.join([str(n), str(k), str(x), s]) + '\\n'\n\nassert timeit.timeit(lambda: solution(generate_testcase()), number=1) < 1.0", "solution(\"in\") == \"out\"\nassert solution(\"in\") == \"out\"", "solution('''1\n1 1 1\n*''') == 'a'\nassert solution('''1\n2 1 2\n*a''') == 'aa'\nassert solution('''1\n3 1 5\n**a''') == 'aaa'\nassert solution('''1\n3 1 6\n**a''') == 'baa'\nassert solution('''1\n3 2 5\n**a''') == 'aaa'\nassert solution('''1\n3 2 6\n**a''') == 'baa'\nassert solution('''1\n3 2 8\n**a''') == 'bba'\nassert solution('''1\n3 3 8\n**a''') == 'bbb'\nassert solution('''1\n3 3 9\n**a''') == 'bbba'\nassert solution('''1\n3 3 13\n**a''') == 'bbbba'\nassert solution('''1\n1 2 10\n*''') == 'bb'\nassert solution('''1\n2 3 10\n*a''') == 'bba'\nassert solution('''1\n3 4 10\n*aa''') == 'baaa'\nassert solution('''1\n3 5 10\n*aa''') == 'baab'\nassert solution('''1\n3 6 10\n*aa", "solution(\"test\") == \"test\", \"test 1 failed\"\nassert solution(\"test2\") == \"test2\", \"test 2 failed\"\n\n# get the input from stdin\nif __name__ == \"__main__\":\n    T = int(input())\n    for t in range(T):\n        # N, K, X = [int(x) for x in input().split()]\n        # S = input()\n        print(solution())", "solution('''\n2\n5 1 7\n*aa*a\n7 1 9\n*a*a*a\n''') == '''\naabbaa\naabbaaa\n'''", "solution(\"\"\"\n1\n4 1 2\n*aaa\n\"\"\") == \"baaa\"\n\nassert solution(\"\"\"\n1\n3 1 2\n*aa\n\"\"\") == \"baa\"\n\nassert solution(\"\"\"\n1\n1 0 1\na\n\"\"\") == \"a\"\n\nassert solution(\"\"\"\n1\n2 0 1\naa\n\"\"\") == \"aa\"\n\nassert solution(\"\"\"\n1\n5 0 1\naaaaa\n\"\"\") == \"aaaaa\"\n\nassert solution(\"\"\"\n2\n2 1 3\n*a\n4 2 5\n*a*a\n\"\"\") == \"baaa\"\n\nassert solution(\"\"\"\n3\n3 1 1\n*aa\n3 1 1\n*a*\n3 1 1\n*a*\n\"\"\") == \"baa\"\n\nassert solution(\"\"\"\n1\n5 2 5\n*aa*a\n\"\"\") == \"baaab\"\n\nassert solution(\"\"\"\n1\n5 2 4\n*aa*a\n\"\"\") == \"baaab\"\n\nassert solution(\"\"\"\n1\n5 2 3\n*aa*a\n\"\"\") == \"baaab\"\n\nassert solution(\"\"\"\n2\n6 1 1\n*aa*a\n6 1 1\n*aa*a\n\"\"\") == \"baaab\"\n\nassert solution(\"\"\"\n1", "solution(stdin=\"\"\"\n5\n5 2 5\na****\n1 0 2\n*\n3 1 2\n**a\n3 0 7\n*a*\n4 5 1000000000000000000\n*a**\n\"\"\") == \"\"\"\nabaaa\na\nbba\nab\nbbbab\n\"\"\", solution(stdin=\"\"\"\n5\n5 2 5\na****\n1 0 2\n*\n3 1 2\n**a\n3 0 7\n*a*\n4 5 1000000000000000000\n*a**\n\"\"\")\n\nassert solution(stdin=\"\"\"\n1\n2 0 1\na*\n\"\"\") == \"\"\"\nab\n\"\"\", solution(stdin=\"\"\"\n1\n2 0 1\na*\n\"\"\")\n\n#-----------------------------------------------\n\n#code here", "solution(\"\"\"\n2\n2 1 2\n*a\n2 1 2\na*\n\"\"\") == \"\"\"\nba\nab\n\"\"\"", "solution(\"\"\"2\n6 3 6\na**aaa\n6 3 2\na**aaa\"\"\") == \"\"\"aabaaa\nabaaaa\"\"\"\n# check the correctness of solution\nassert solution(\"\"\"1\n6 2 2\na**aaa\"\"\") == \"\"\"aaabaa\"\"\"\n# check the correctness of solution\nassert solution(\"\"\"2\n2 1 3\n**\n2 1 1\n**\"\"\") == \"\"\"ba\naa\"\"\"\n# check the correctness of solution\nassert solution(\"\"\"3\n3 0 1\naa*\n3 1 1\naa*\n3 0 2\naa*\"\"\") == \"\"\"aaa\naba\naaa\"\"\"\n# check the correctness of solution\nassert solution(\"\"\"2\n2 1 4\n**\n2 1 2\n**\"\"\") == \"\"\"bb\nab\"\"\"\n# check the correctness of solution\nassert solution(\"\"\"2\n2 1 4\n**\n2 2 3\n**\"\"\") == \"\"\"bb\nabb\"\"\"\n# check the correctness of solution\nassert solution(\"\"\"2\n2 2 4\n**\n2 2 3\n**\"\"\") == \"\"\"bba\nbab\"\"\"\n# check the correctness of solution\nassert solution(\"\"\"3\n3 0 2\na**\n3 0 1\na**\n3 0 1\n**a\"\"\") == \"\"\"aaa\naba\nbaa\"\"\"\n# check the correctness of solution\nassert solution(\"\"\"2\n2 1 4", "solution(stdin='''\n1\n4 0 1\na*aa\n''') == 'aaaa'\n\nassert solution(stdin='''\n1\n3 2 4\na**\n''') == 'abb'\n\nassert solution(stdin='''\n1\n10 12 100\na**b***bb*\n''') == 'abbbbbbbabb'", "solution('''\n10\n5 1 18\naaa**\n4 1 7\naa**\n4 0 5\na***\n8 2 200\na*a****\n5 0 5\n*****\n4 2 5\n****\n4 0 15\na***\n2 0 3\n**\n2 0 2\n**\n20 4 536227623\na***a***a***a***a***\n''') == '''\naaabaa\naaab\nab\naba*a*a*a*\na*b*a*b*a*b*a*b*\nbbab\nbbbab\nab\nbb\na*b*a*b*a*b*a*b*a*b*a*b*a*b*a*b*a*b*a*b*a*b*a*b*a*b*\n'''", "solution('''3\n3 2 3\na**\n3 2 2\n*aa\n3 2 7\na*a''') == '''aba\naba\nbba'''\n\n# import random for generating random test case\nimport random\n\n# generate random test case\ndef tester(n: int, k: int, x: int) -> str:\n    s = 'a'\n    for _ in range(n - 1):\n        s += random.choice(['a', '*'])\n    return f'{n} {k} {x}\\n{s}'\n\n# check the performance of solution\nimport time\nfrom functools import partial\ntests = []\ntime_limit = 0.5 # in seconds\nfor _ in range(1, 2000):\n    n = random.randint(1, 2000)\n    k = random.randint(0, 2000)\n    x = random.randint(1, 10 ** 18)\n    test = tester(n, k, x)\n    tests.append(test)\n    if time.time() - start > time_limit:\n        break\nprint(len(tests))\nprint(tests[:3])\n\n# import subprocess for checking the correctness of solution\nimport subprocess\nprint(subprocess.run(['diff', '-d',", "solution('''\n1\n5 2 5\na*a*a\n''') == 'aaaaa'\n\n# check the correctness of solution\nassert solution('''\n2\n2 0 1\na*\n2 0 2\n**\n''') == 'aa'\n\n# run\nstdin = open('input.txt', 'r')\nprint(solution(stdin.read()))", "solution('''\n2\n3 1 3\naaa\n3 0 2\n***\n''') == '''\nbba\naaa\n'''\nassert solution('''\n3\n3 1 3\naaa\n3 0 2\n***\n3 1 3\n*aa\n''') == '''\nbba\naaa\nbaa\n'''\nassert solution('''\n3\n3 1 6\naaa\n3 1 6\n*aa\n3 1 6\naaa\n''') == '''\nbca\nbaa\nbca\n'''\n\n# stress test\nfrom random import randint\nfrom time import time\nfrom collections import defaultdict\n\n\ndef check_solution(stdin: str) -> bool:\n    results = []\n    lines = stdin.split('\\n')[1:]\n    for i in range(0, len(lines), 2):\n        n, k, x = map(int, lines[i].split())\n        s = lines[i + 1]\n        results.append(solution(f'{n} {k} {x}\\n{s}'))\n\n    output = '\\n'.join(results)\n    lines = output.split('\\n')\n    res_index = 0\n    while lines[res_index] == '':\n        res_index += 1\n    results", "solution(\"\"\"\n4\n3 2 2\naaa\n3 2 3\na*a\n3 1 4\n*aa\n1 0 9\n*\n\"\"\") == \"\"\"\naab\naba\nbaa\na\n\"\"\", \"1st example\"\nassert solution(\"\"\"\n1\n1 1 100\n*\n\"\"\") == \"\"\"\nb\n\"\"\", \"2nd example\"\nassert solution(\"\"\"\n1\n2 0 7\na*\n\"\"\") == \"\"\"\naa\n\"\"\", \"3rd example\"\nassert solution(\"\"\"\n1\n1 1 6\n*\n\"\"\") == \"\"\"\nb\n\"\"\", \"4th example\"\nassert solution(\"\"\"\n1\n4 1 9\n****\n\"\"\") == \"\"\"\nbbbb\n\"\"\", \"5th example\"\nassert solution(\"\"\"\n1\n2 0 6\na*\n\"\"\") == \"\"\"\naa\n\"\"\", \"6th example\"\nassert solution(\"\"\"\n1\n4 0 9\naaaa\n\"\"\") == \"\"\"\naaaa\n\"\"\", \"7th example\"\nassert solution(\"\"\"\n1\n2 1 6\n*a\n\"\"\") == \"\"\"\nba\n\"\"\", \"8th example\"\nassert solution(\"\"\"\n1\n5 1 6\na****\n\"\"\") == \"\"\"\nabbbb\n\"\"\", \"9th example\"\nassert solution(\"\"\"\n1\n2 0 7\na*\n", "solution('''\n1\n3 2 1\na**\n''') == 'abb'\n\nassert solution('''\n1\n3 2 2\na**\n''') == 'bab'\n\nassert solution('''\n1\n3 2 3\na**\n''') == 'bba'\n\nassert solution('''\n1\n3 2 4\na**\n''') == 'baa'\n\nassert solution('''\n1\n3 2 5\na**\n''') == 'aab'\n\nassert solution('''\n1\n3 2 6\na**\n''') == 'aba'\n\nassert solution('''\n1\n3 2 7\na**\n''') == 'aaab'\n\nassert solution('''\n1\n3 2 8\na**\n''') == 'aaba'\n\nassert solution('''\n1\n3 2 9\na**\n''') == 'abab'\n\nassert solution('''\n1\n3 2 10\na**\n''') == 'aaabb'\n\nassert solution('''\n1\n3 2 11\na**\n''') == 'aabab'\n\nassert solution('''\n1\n3 2 12\na**\n''') == 'ababb'\n\nassert solution('''\n1\n3 2 13\na**", "solution('''4\n4 3 3\na*ba\n3 2 0\na**\n3 2 6\na**\n1 0 1\n*''') == '''aba\naaa\nbaa\nb'''", "solution(\"\"\"1\n1 2 1\n*\n\"\"\") == \"a\", \"example case #1\"\nassert solution(\"\"\"1\n3 3 6\n***\n\"\"\") == \"aba\", \"example case #2\"\nassert solution(\"\"\"1\n1 0 1\na\n\"\"\") == \"a\", \"example case #3\"\nassert solution(\"\"\"1\n1 1 2\n*\n\"\"\") == \"b\", \"example case #4\"\nassert solution(\"\"\"1\n1 2 3\n*\n\"\"\") == \"ba\", \"example case #5\"\nassert solution(\"\"\"1\n2 0 1\n**\n\"\"\") == \"aa\", \"example case #6\"\nassert solution(\"\"\"1\n2 0 2\n**\n\"\"\") == \"ab\", \"example case #7\"\nassert solution(\"\"\"1\n1 0 2\na\n\"\"\") == \"a\", \"example case #8\"\nassert solution(\"\"\"1\n2 1 3\n**\n\"\"\") == \"bb\", \"example case #9\"\nassert solution(\"\"\"1\n2 1 4\n**\n\"\"\") == \"ba\", \"example case #10\"\nassert solution(\"\"\"1\n2 1 5\n**\n\"\"\") == \"bbb\", \"example case #11\"\nassert solution(\"\"\"1\n2 1 6\n**\n\"\"\") == \"bba\", \"example case #12\"", "solution('''5\n5 1 6\n*****\n5 2 1\na****\n3 3 2\n**a*\n3 3 3\n**a*\n3 3 4\n**a*''') == '''baaaa\naaaba\nbaaab\nbbaaa\nabaaa'''", "solution('''1\n5 2 10\na**a*''') == 'abbab'\n\n# check the correctness of solution\nassert solution('''1\n5 2 2\na**a*''') == 'aabaa'\n\nassert solution('''1\n5 2 24\na**a*''') == 'abbba'\n\nassert solution('''1\n4 2 24\na**a''') == 'abbb'\n\nassert solution('''1\n5 2 20\na*a**''') == 'aaaab'", "solution(stdin=\"\"\"\n3\n6 1 2\na*a*a\n3 3 7\n*aa\n2 2 3\n**\n\"\"\") == \"\"\"\naaabbb\nbbaa\nb\n\"\"\"\n\n# print solution\nprint(solution(stdin=\"\"\"\n3\n6 1 2\na*a*a\n3 3 7\n*aa\n2 2 3\n**\n\"\"\"))", "solution('''\n3\n3 0 1\naa*\n3 0 1\n*aa\n1 2 2\n*\n''') == '''\naaa\nbba\nba\n'''\n\n# Testcase:\nprint(solution('''\n1\n3 0 1\naa*\n'''))\n\n# 2000 testcases + 1 testcase\nwhile True:\n    try:\n        print(solution('''\n4\n4 0 1\naa*a\n4 1 1\naaa*\n4 0 1\na*aa\n4 1 1\n*aaa\n'''))\n    except EOFError:\n        break", "solution(\"\"\"\n2\n5 0 4\na*a*a\n2 2 1\n**\n\"\"\") == \"\"\"\naaaab\nbb\n\"\"\"\n\n# get the response\nresponse = requests.get(ENDPOINT, headers=HEADERS)\n\n# print the response\nprint(solution(response.text))", "solution('''3\n4 0 1\na*a*\n4 1 1\na*a*\n4 2 1\na*a*''') == 'aaaa'\nassert solution('''3\n4 0 1\na*a*\n4 1 1\na*a*\n4 2 1\na*a*''') == 'aaaab'\nassert solution('''3\n4 0 1\na*a*\n4 1 1\na*a*\n4 2 1\na*a*''') == 'aaaba'\nassert solution('''3\n4 0 1\na*a*\n4 1 1\na*a*\n4 2 1\na*a*''') == 'aaabb'\nassert solution('''3\n4 0 1\na*a*\n4 1 1\na*a*\n4 2 1\na*a*''') == 'aabaa'\nassert solution('''3\n4 0 1\na*a*\n4 1 1\na*a*\n4 2 1\na*a*''') == 'aabab'\nassert solution('''3\n4 0 1\na*a*\n4 1 1\na*a*\n4 2 1\na*a*''') == 'aabba'\nassert solution('''3\n4 0 1\na*", "solution('''\n1\n1 0 1\na\n''') == 'a'\n\nassert solution('''\n1\n1 1 1\n*\n''') == 'b'\n\nassert solution('''\n1\n1 1 2\n*\n''') == 'a'\n\nassert solution('''\n1\n2 0 1\naa\n''') == 'aa'\n\nassert solution('''\n1\n2 0 2\naa\n''') == 'ab'\n\nassert solution('''\n1\n2 0 3\naa\n''') == 'ba'\n\nassert solution('''\n1\n2 1 1\n**\n''') == 'bb'\n\nassert solution('''\n1\n2 1 2\n**\n''') == 'ab'\n\nassert solution('''\n1\n2 1 3\n**\n''') == 'ba'\n\nassert solution('''\n1\n2 1 4\n**\n''') == 'aa'\n\nassert solution('''\n1\n2 1 5\n**\n''') == 'bbb'\n\nassert solution('''\n1\n2 1 6\n**\n''') == 'abb'\n\nassert solution('''\n1\n2 1 7\n**\n''') == 'bab'\n\nassert solution('''\n1\n2 1 8\n**", "solution(\"\"\"\n2\n2 3 5\naa\n2 2 1\n**\n\"\"\") == \"\"\"\nbaa\nba\n\"\"\"\n\n# print(solution(\"\"\"\n# 5\n# \"\"\")[:-1])", "solution('''\n1\n3 1 4\na**\n''') == 'aba'\nassert solution('''\n1\n3 2 5\na**\n''') == 'baa'\nassert solution('''\n1\n1 0 1\na\n''') == 'a'\nassert solution('''\n1\n1 1 1\n*\n''') == 'b'\nassert solution('''\n1\n1 1 2\n*\n''') == 'a'\nassert solution('''\n1\n1 1 3\n*\n''') == 'a'\nassert solution('''\n1\n1 1 4\n*\n''') == 'a'\nassert solution('''\n1\n3 1 4\n**a\n''') == 'abb'\nassert solution('''\n1\n3 1 5\n**a\n''') == 'aba'\nassert solution('''\n1\n3 2 6\n**a\n''') == 'baa'\nassert solution('''\n1\n3 2 7\n**a\n''') == 'bab'\nassert solution('''\n1\n3 2 8\n**a\n''') == 'bba'\nassert solution('''\n1\n5 4 21\n*a***\n''') == 'bbbaa'\nassert solution('''\n1\n5 4 12\n*", "solution(example_input) == example_output", "solution('''\n3\n3 0 1\na**\n3 0 2\na**\n3 1 2\na**\n''') == '''\naaa\naab\naba\n'''\n\n# test solution\ntest()", "solution(\"\"\"2\n2 0 1\na*\n2 2 1\n*a\"\"\") == \"ab\"", "solution(\"\"\"\n1\n3 1 1\na**\n\"\"\") == \"aaa\"\n\nassert solution(\"\"\"\n2\n3 1 2\na**\n3 2 4\na**\n\"\"\") == \"aab\"\n\nassert solution(\"\"\"\n3\n3 1 2\na**\n3 2 4\na**\n3 0 1\na**\n\"\"\") == \"aa*\"\n\nassert solution(\"\"\"\n2\n2 1 3\n**\n2 0 1\n**\n\"\"\") == \"bb\"\n\nassert solution(\"\"\"\n1\n1 0 1\n*\n\"\"\") == \"*\"\n\nassert solution(\"\"\"\n1\n1 0 2\n*\n\"\"\") == \"**\"\n\nassert solution(\"\"\"\n1\n1 0 4\n*\n\"\"\") == \"****\"\n\n# the strings with asterisk at the end is invalid, so the answer is:\nassert solution(\"\"\"\n1\n1 0 5\n*\n\"\"\") == \"*****\"\n\nassert solution(\"\"\"\n1\n10 5 1\n*a*a*a*a*\n\"\"\") == \"bababababa\"\n\nassert solution(\"\"\"\n1\n10 5 2\n*a*a*a*a*\n\"\"\") == \"bababababb\"\n\nassert solution(\"\"\"\n1\n10 5 4\n*a*a*a", "solution(\"\"\"1\n3 4 5\n**a\"\"\") == \"baba\"\nassert solution(\"\"\"1\n5 0 3\naaaaa\"\"\") == \"aaaaa\"\nassert solution(\"\"\"1\n5 3 3\naaa*a\"\"\") == \"aaaaa\"\nassert solution(\"\"\"1\n6 1 2\n**aa*a\"\"\") == \"baaaba\"\nassert solution(\"\"\"1\n8 0 8\naaaaaaaa\"\"\") == \"aaaaaaaa\"\nassert solution(\"\"\"1\n3 4 5\n***\"\"\") == \"babab\"\nassert solution(\"\"\"1\n3 4 5\n*a*\"\"\") == \"babab\"\nassert solution(\"\"\"1\n3 4 5\n*aa\"\"\") == \"babab\"\nassert solution(\"\"\"1\n3 4 5\n*a*\"\"\") == \"babab\"\nassert solution(\"\"\"1\n2 3 3\n**\"\"\") == \"bab\"\nassert solution(\"\"\"1\n4 2 2\n*a**\"\"\") == \"baaba\"\nassert solution(\"\"\"1\n4 2 2\n*a**\"\"\") == \"baaba\"\nassert solution(\"\"\"1\n4 2 2\na*a*\"\"\") == \"baaba\"\nassert solution(\"\"\"1\n2 2 2\na*\"\"\") == \"ba\"\nassert solution(\"\"\"1\n3 2 2\n", "solution('''\n3\n3 2 1\na**\n3 2 2\na**\n3 2 5\n*aa\n''') == '''\naba\nabb\nbaa\n'''", "solution('''\n2\n4 2 15\na*a*\n4 2 16\na*a*\n''') == '''\nbbab\nbbaba\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 0 10\n***\n3 1 10\n***\n''') == '''\n***\nbba\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 1 10\n*a\n2 2 10\n*a\n''') == '''\nba\nbb\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 2 10\n*aa\n3 3 10\n*aa\n''') == '''\nbba\nbbba\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n4 0 10\naaaa\n4 1 10\naaaa\n''') == '''\naaaa\naaba\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n4 2 10\na*aa\n4 3 10\na*aa\n''') == '''\nbbba\nbbbba\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 2 10\na*a*\n''') == '''\nbbab\n'''\n\n# check", "solution(stdin=\"\"\"\n3\n1 0 1\na\n1 1 3\n*\n3 1 10\n*a*\n\"\"\") == \"\"\"\na\nabb\nabbbabb\n\"\"\", \"Example\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n3\n1 1 1\n*\n2 2 3\na*\n2 2 4\n*a\n\"\"\") == \"\"\"\na\nab\nab\n\"\"\", \"a is smaller than ab\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n3\n3 1 1\n***\n3 1 2\n***\n3 1 3\n***\n\"\"\") == \"\"\"\naaa\naab\naba\n\"\"\", \"a*a\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n3\n3 1 10\n***\n3 1 11\n***\n3 1 12\n***\n\"\"\") == \"\"\"\nabb\nabbb\nabbbb\n\"\"\", \"aba is smaller than abb\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n3\n3 1 13\n***\n3 1 14\n***\n3 1 15\n***\n\"\"\") == \"\"\"\nabba\nabbab\nabbb\n\"\"\", \"Order matters\"\n\n# check the correctness of solution\nassert solution(stdin=\"\"\"\n1\n12 1 1", "solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert solution(\" \") == \" \", \"solution is incorrect.\"\nassert", "solution('''\n2\n5 2 6\na*b*a\n1 0 1\n*\n''') == '''\nababa\na\n'''", "solution('''\n3\n3 1 2\naaa\n3 1 5\n*aa\n3 2 6\n*aa\n''') == '''\naba\nbaa\nbba\n'''\n# check the correctness of solution\nassert solution('''\n3\n3 1 2\naaa\n3 1 5\n*aa\n3 2 6\n*aa\n''') == '''\naba\nbaa\nbba\n'''\n# check the correctness of solution\nassert solution('''\n3\n3 1 2\naaa\n3 1 5\n*aa\n3 2 6\n*aa\n''') == '''\naba\nbaa\nbba\n'''\n# check the correctness of solution\nassert solution('''\n3\n3 1 2\naaa\n3 1 5\n*aa\n3 2 6\n*aa\n''') == '''\naba\nbaa\nbba\n'''\n# check the correctness of solution\nassert solution('''\n3\n3 1 2\naaa\n3 1 5\n*aa\n3 2 6\n*aa\n''') == '''\naba\nbaa\nbba\n'''\n# check the correctness of solution\nassert solution('''\n3\n3 1 2\naaa\n3 1 5\n*aa\n3 2 6\n*aa\n''') == '''\naba\nbaa\nbba", "solution('''\n1\n5 2 6\na*a*a\n''') == 'bbabb'\nassert solution('''\n1\n5 1 6\na*a*a\n''') == 'bbbbb'\nassert solution('''\n1\n3 0 6\na*a\n''') == 'aaa'\nassert solution('''\n1\n3 1 2\na*a\n''') == 'aba'\nassert solution('''\n1\n3 1 5\na*a\n''') == 'abb'\nassert solution('''\n1\n4 1 3\na*a*\n''') == 'abbb'\nassert solution('''\n1\n4 1 5\na*a*\n''') == 'abab'\nassert solution('''\n1\n6 0 30\na*a*a\n''') == 'aaaaaa'\nassert solution('''\n1\n6 1 30\na*a*a\n''') == 'aabaaa'\nassert solution('''\n1\n6 2 30\na*a*a\n''') == 'aabbaa'\nassert solution('''\n1\n6 3 30\na*a*a\n''') == 'aabbba'\nassert solution('''\n1\n6 4 30\na*a*a\n''') == '", "solution('''\n3\n3 0 2\na**\n4 0 2\n*aa*\n10 1 1\n*a*b*c*d*\n''') == '''\naa\nbaa\nbaaababaab\n'''\nassert solution('''\n2\n2 0 3\n*a\n1 2 2\n*\n''') == '''\nba\naa\n'''\nassert solution('''\n3\n3 0 2\n*a*\n4 0 2\n*a*a\n10 1 1\n*a*b*c*d*\n''') == '''\nbab\nbaba\nbaaababaab\n'''\nassert solution('''\n2\n1 1 1\n*\n1 1 2\n*\n''') == '''\na\nb\n'''\nassert solution('''\n2\n2 2 6\n*a*\n2 2 1\n*a*\n''') == '''\nbbab\naabb\n'''\nassert solution('''\n3\n4 0 2\n*aa*\n3 0 2\na**\n10 1 1\n*a*b*c*d*\n''') == '''\nbaa\naaa\nbaaababaab\n'''\nassert solution('''\n2\n1 2 2\n*\n1 2 1\n*\n''", "solution('''1\n6 2 2\na*abaa\n''') == 'abbaba'\nassert solution('''1\n4 3 9\na*aa\n''') == 'aaab'\nassert solution('''1\n4 1 20\naa*a\n''') == 'bbaa'\nassert solution('''1\n4 1 10\naa*a\n''') == 'aaaa'\nassert solution('''1\n4 2 12\naa*a\n''') == 'aaba'\nassert solution('''1\n4 1 18\na*aa\n''') == 'baaa'\nassert solution('''1\n4 3 3\na*aa\n''') == 'aaab'\nassert solution('''1\n4 2 13\na*aa\n''') == 'abba'\nassert solution('''1\n4 3 3\na*aa\n''') == 'aaab'\nassert solution('''1\n4 1 16\na*aa\n''') == 'abaa'\nassert solution('''1\n4 2 12\na*aa\n''') == 'aaba'\nassert solution('''1\n5 2 2\na*aab\n''') == 'abbab'\nassert solution('''1\n5 1 19\na*aab\n''') == 'bbaab'", "solution('''\n2\n3 1 1\na**\n3 1 1\n**a\n''') == '''\naba\nbaa\n'''\n\n# get stdin and call solution\nif __name__ == '__main__':\n    stdin = open('./Solutions/testdata/input.txt', 'r')\n    print(solution(stdin.read()))", "(solution('\\n'.join([\n    '1',\n    '7 2 57',\n    '****aaa'\n])) == 'bbbaaaa')\n\n# check the correctness of solution\nassert (solution('\\n'.join([\n    '1',\n    '5 3 24',\n    '****a'\n])) == 'bbbba')\n\n# check the correctness of solution\nassert (solution('\\n'.join([\n    '1',\n    '8 5 1060',\n    '****a***'\n])) == 'bbbbbaaa')\n\n# check the correctness of solution\nassert (solution('\\n'.join([\n    '1',\n    '4 1 144',\n    'a*a*'\n])) == 'baba')\n\n# check the correctness of solution\nassert (solution('\\n'.join([\n    '1',\n    '2 3 100',\n    '*a'\n])) == 'ba')\n\n# check the correctness of solution\nassert (solution('\\n'.join([\n    '1',\n    '5 6 187',\n    '**a**'\n])) == 'bbaba')\n\n# check the correctness of solution\nassert (solution('\\n'.join([\n    '1',\n    '5 2 94',\n", "solution('''\n1\n3 1 1\n*a*\n''') == 'aba'\n\nassert solution('''\n1\n3 3 3\n*a*\n''') == 'baa'\n\nassert solution('''\n1\n3 3 4\n*a*\n''') == 'bab'\n\nassert solution('''\n1\n3 3 5\n*a*\n''') == 'bba'\n\nassert solution('''\n1\n3 3 6\n*a*\n''') == 'bba'\n\nassert solution('''\n1\n4 4 5\n*a*a\n''') == 'abbb'\n\nassert solution('''\n1\n4 4 6\n*a*a\n''') == 'bbab'\n\nassert solution('''\n1\n4 4 7\n*a*a\n''') == 'bbba'\n\nassert solution('''\n1\n4 4 8\n*a*a\n''') == 'bbbb'\n\nassert solution('''\n1\n1 0 1\na\n''') == 'a'\n\nassert solution('''\n1\n2 0 1\na*\n''') == 'aa'\n\nassert solution('''\n1\n2 0 2\na*\n''') == 'ab'\n\nassert solution('''"], "finish_reason": ["stop", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "stop", "length", "length", "length", "length", "stop", "length", "length"], "sum_logprob": [-44.5346426685, -96.61843049632003, -41.323765636844996, -22.2978187695, -35.50686629250001, -102.35599222373497, -60.085169543762035, -13.978303413999999, -91.35064589311497, -40.86848364551301, -34.63949687769999, -111.06057935671001, -112.39670151994504, -17.8555955935, -135.21003235648, -54.78881000348999, -185.31136297894992, -183.14999862662296, -47.14480381612999, -136.91952255379206, -124.91133221816999, -32.288927626575024, -44.44095222209999, -77.361538540297, -55.2346132404, -69.38067775110004, -56.574940352405996, -117.12287810305001, -55.32397986182, -30.85307392480299, -30.060133097745005, -45.63177563949998, -86.60166083062101, -7.311927388099999, -35.3194968373, -22.248128048999998, -144.1749442965161, -132.338296422413, -24.330123239499997, -99.15984381069092, -146.3238331149064, -26.821468574392025, -23.736911216600006, -39.84276879086506, -83.06329247304798, -133.58818458168003, -134.3651680745352, -60.262605726309985, -137.918534834824, -59.88827159088401], "mean_logprob": [-0.89069285337, -0.3220614349877333, -0.6774387809318853, -0.074326062565, -0.7718883976630435, -0.3411866407457833, -0.3145820394961361, -0.7357001796842105, -0.30450215297705, -0.39296618889916346, -0.787261292675, -0.37020193118903333, -0.6534691948834012, -0.5759869546290323, -0.45070010785493336, -0.6445742353351764, -0.9503146819433334, -0.6104999954220767, -0.5238311535125556, -0.45639840851264, -0.4163711073939, -0.10762975875525001, -0.9069582086142857, -0.25787179513432334, -0.8368880794, -0.5550454220088, -0.6149450038305, -0.8190411056157343, -0.7578627378331507, -0.10284357974934333, -0.10020044365915, -0.91263551279, -0.2886722027687367, -0.6647206716454546, -0.679221093025, -0.88992512196, -0.48058314765505333, -0.44112765474137666, -0.5529573463522727, -0.33053281270230334, -0.487746110383021, -0.08940489524797333, -0.6415381409891892, -0.13280922930288333, -0.27687764157682665, -0.4452939486056, -0.4478838935817833, -0.6695845080701112, -0.4597284494494133, -0.19962757196961334]}
{"prompt": "'''\nOne day, early in the morning, you decided to buy yourself a bag of chips in the nearby store. The store has chips of n different flavors. A bag of the i-th flavor costs a_i burles.\n\nThe store may run out of some flavors, so you'll decide which one to buy after arriving there. But there are two major flaws in this plan: \n\n  1. you have only coins of 1, 2 and 3 burles; \n  2. since it's morning, the store will ask you to pay in exact change, i. e. if you choose the i-th flavor, you'll have to pay exactly a_i burles. \n\n\n\nCoins are heavy, so you'd like to take the least possible number of coins in total. That's why you are wondering: what is the minimum total number of coins you should take with you, so you can buy a bag of chips of any flavor in exact change?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains the single integer n (1 \u2264 n \u2264 100) \u2014 the number of flavors in the store.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the cost of one bag of each flavor.\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum number of coins you need to buy one bag of any flavor you'll choose in exact change.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''3\n3\n1 2 3\n4\n4 1 1 2\n4\n4 1 1 3''') == '''1\n2\n2'''", "solution(\"\") == \"\", \"error1\"\nassert solution(\"\") == \"\", \"error2\"\nassert solution(\"\") == \"\", \"error3\"\nassert solution(\"\") == \"\", \"error4\"\nassert solution(\"\") == \"\", \"error5\"\nassert solution(\"\") == \"\", \"error6\"\nassert solution(\"\") == \"\", \"error7\"\nassert solution(\"\") == \"\", \"error8\"\nassert solution(\"\") == \"\", \"error9\"\nassert solution(\"\") == \"\", \"error10\"\nassert solution(\"\") == \"\", \"error11\"\nassert solution(\"\") == \"\", \"error12\"\nassert solution(\"\") == \"\", \"error13\"\nassert solution(\"\") == \"\", \"error14\"\nassert solution(\"\") == \"\", \"error15\"\nassert solution(\"\") == \"\", \"error16\"\nassert solution(\"\") == \"\", \"error17\"\nassert solution(\"\") == \"\", \"error18\"\nassert solution(\"\") == \"\", \"error19\"\nassert solution(\"\") == \"\", \"error20\"\nassert solution(\"\") == \"\", \"error21\"\nassert solution(\"\") == \"\", \"error22\"\nassert solution(\"\") == \"\", \"error23\"\nassert solution(\"\") == \"\", \"error24\"\nassert solution(\"\") == \"\", \"error25\"\nassert", "solution('''\n2\n3\n1 2 3\n3\n1 1 1\n''') == '''\n3\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 1 1\n3\n1 2 3\n1\n1000000000\n''') == '''\n1\n3\n1000000000\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1\n1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 1 1\n3\n1 2 3\n1\n1000000000\n''') == '''\n1\n3\n1000000000\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2\n2 3\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 3 3\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 2 4\n''') == '''\n3\n'''\n\n#", "solution('''  ''') == '''  ''', \"Example\"\nassert solution('''  ''') == '''  ''', \"Example\"\nassert solution('''  ''') == '''  ''', \"Example\"\nassert solution('''  ''') == '''  ''', \"Example\"\nassert solution('''  ''') == '''  ''', \"Example\"\nassert solution('''  ''') == '''  ''', \"Example\"\nassert solution('''  ''') == '''  ''', \"Example\"\nassert solution('''  ''') == '''  ''', \"Example\"\nassert solution('''  ''') == '''  ''', \"Example\"\nassert solution('''  ''') == '''  ''', \"Example\"\n\nprint(\"All tests successfull\")", "solution('''\n2\n2\n1 3\n2\n2 2\n''') == '''\n2\n1\n'''\n\nassert solution('''\n3\n3\n1 2 3\n3\n1 2 2\n5\n1 2 3 4 5\n''') == '''\n2\n2\n2\n'''", "solution('''\n3\n2\n2 3\n2\n1 3\n2\n2 3\n''') == '''\n3\n2\n3\n'''\n\n#\nprint(solution('''\n2\n2\n2 3\n2\n1 3\n'''))", "solution(sample_input) == '2'\nassert solution(sample_input2) == '1'\nassert solution(sample_input3) == '0'\nassert solution(sample_input4) == '4'\nassert solution(sample_input5) == '6'\nassert solution(sample_input6) == '9'\n\nassert solution(sample_input) == '2'\nassert solution(sample_input2) == '1'\nassert solution(sample_input3) == '0'\nassert solution(sample_input4) == '4'\nassert solution(sample_input5) == '6'\nassert solution(sample_input6) == '9'", "solution('''\n4\n4\n1 2 3 4\n6\n1 10 100 1000 1 10\n10\n13 11 12 12 12 12 12 12 12 12\n3\n1 2 5\n''') == '''\n1\n3\n6\n4\n'''", "solution(\"\"\"\n1\n3\n1 2 3\n\"\"\") == \"\"\"\n5\n\"\"\", \"Sample 1\"\n\nassert solution(\"\"\"\n1\n2\n2 2\n\"\"\") == \"\"\"\n4\n\"\"\", \"Sample 2\"\n\nassert solution(\"\"\"\n1\n4\n1 5 7 9\n\"\"\") == \"\"\"\n12\n\"\"\", \"Sample 3\"\n\nassert solution(\"\"\"\n1\n2\n2 3\n\"\"\") == \"\"\"\n3\n\"\"\", \"Sample 4\"\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\n1\n\"\"\", \"Sample 5\"\n\n\nassert solution(\"\"\"\n1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n7\n\"\"\", \"Sample 6\"\n\nassert solution(\"\"\"\n1\n5\n1 5 7 9 3\n\"\"\") == \"\"\"\n13\n\"\"\", \"Sample 7\"\n\nassert solution(\"\"\"\n1\n5\n2 3 4 5 6\n\"\"\") == \"\"\"\n10\n\"\"\", \"Sample 8\"\n\nassert solution(\"\"\"\n1\n5\n6 5 4 3 2\n\"\"\") == \"\"\"\n10\n\"\"\", \"Sample 9\"\n\nassert solution(\"\"\"\n1\n5\n1 1 1 1 1\n\"\"\") == \"\"\"\n5\n\"\"\", \"Sample 10\"\n\nassert solution(\"\"\"\n1\n5\n2 3 3 3 3\n", "solution(\"\"\"1\n4\n1 2 3 4\"\"\") == \"\"\"4\"\"\", \"example 1\"\nassert solution(\"\"\"2\n2\n1 5\n3\n1 2 3\"\"\") == \"\"\"2\n6\"\"\", \"example 2\"", "('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output'''))\nassert ('''sample input''' == solution('''sample output''", "solution(\"\"\"1\n3\n1 2 3\"\"\") == \"3\"\nassert solution(\"\"\"3\n3\n1 2 3\n4\n4 3 2 1\n2\n1 1\"\"\") == \"\"\"3\n7\n2\"\"\".strip()\n\n# check if solution could handle a huge number of test cases\nimport os\nwith open(os.path.abspath('') + \"/test_data.txt\", \"w\") as f:\n    f.write(\"\"\"1000\n3\n1 2 3\n\"\"\")\n\nwith open(os.path.abspath('') + \"/test_data.txt\", \"r\") as f:\n    stdin = f.read()\n    stdin = [stdin] * int(1e5)\n    print(solution(\"\".join(stdin)))", "solution(\"1\\n3\\n1 2 5\") == \"4\"\nassert solution(\"2\\n1\\n1000\\n1\\n1000000000\") == \"1000\"\n\n# get the input\nimport fileinput\nraw_input = [line.rstrip() for line in fileinput.input()]\n\n# run solution and get output\noutput = [solution(line) for line in raw_input]\n\n# print output to stdout\nfor line in output:\n    print(line)", "(solution(sample_input) == expected_output)", "solution('''\n2\n2\n1 5\n4\n4 1 2 5\n''') == '''\n2\n4\n'''\n\nassert solution('''\n2\n4\n4 2 6 1\n4\n4 1 2 5\n''') == '''\n3\n3\n'''", "solution(\"\"\"\n1\n4\n1 2 3 4\n\"\"\") == \"\"\"\n4\n\"\"\", \"Example 1\"\n\nassert solution(\"\"\"\n1\n2\n2 3\n\"\"\") == \"\"\"\n2\n\"\"\", \"Example 2\"\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\n1\n\"\"\", \"Example 3\"\n\nassert solution(\"\"\"\n1\n3\n1 3 5\n\"\"\") == \"\"\"\n2\n\"\"\", \"Example 4\"\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\n1\n\"\"\", \"Example 5\"\n\nassert solution(\"\"\"\n3\n3\n2 3 5\n3\n1 3 5\n3\n3 4 4\n\"\"\") == \"\"\"\n2\n2\n3\n\"\"\", \"Example 6\"\n\nassert solution(\"\"\"\n4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n1 2 3 4\n4\n1 2 3 4\n\"\"\") == \"\"\"\n4\n4\n4\n4\n\"\"\", \"Example 7\"\n\n# assert solution(\"\"\"\n# \"\"\") == \"\"\"\n# \"\"\", \"Example 8\"\n\n# assert solution(\"\"\"\n# \"\"\") == \"\"\"\n# \"\"\", \"Example 9\"\n\n# assert solution(\"\"\"\n# \"\"\") == \"\"\"\n# \"\"\", \"Example 10\"\n\n# assert", "solution('''\n3\n3\n1 3 1\n3\n2 2 4\n3\n3 3 3\n''') == '''\n3\n3\n1\n'''", "solution('''\n2\n2\n2 4\n2\n1 2\n''') == '''\n5\n1\n'''\n\n# this part is for local testing, please don't remove\nif __name__ == '__main__':\n    test_cases = [\n        '''\n        2\n        2\n        2 4\n        2\n        1 2\n        ''',\n        '''\n        1\n        1\n        1\n        ''',\n        '''\n        1\n        1\n        2\n        ''',\n        '''\n        1\n        1\n        3\n        ''',\n        '''\n        2\n        1\n        3\n        1\n        2\n        ''',\n        '''\n        2\n        1\n        3\n        2\n        2\n        ''',\n        '''\n        2\n        1\n        2\n        1\n        3\n        ''',\n        '''\n        3\n        2\n        4\n        6\n        4\n        4\n        ''',\n        '''\n        3\n        4\n        6\n        2\n        4\n        4\n        ''',\n        '''\n        3\n        4\n        6\n        4\n        2\n        4\n        ''',\n        '''\n        3\n        4\n        6\n        4", "solution(\"\"\"5\n5\n5 2 7 5 5\n5\n5 2 7 5 5\n3\n1 2 1\n3\n1 2 1\n3\n2 2 2\n\"\"\") == \"\"\"4\n4\n2\n2\n1\n\"\"\"", "solution('''\n1\n1\n1\n''') == '1', 'test 1'\n\nassert solution('''\n1\n2\n1 2\n''') == '1', 'test 2'\n\nassert solution('''\n1\n3\n1 2 3\n''') == '1', 'test 3'\n\nassert solution('''\n2\n2\n2 3\n1\n1\n''') == '1', 'test 4'\n\nassert solution('''\n2\n2\n2 3\n2\n1 2\n''') == '1', 'test 5'\n\nassert solution('''\n2\n2\n2 3\n3\n1 2 3\n''') == '1', 'test 6'\n\nassert solution('''\n2\n2\n2 3\n3\n1 3 5\n''') == '2', 'test 7'\n\nassert solution('''\n1\n3\n1 2 4\n''') == '2', 'test 8'\n\nassert solution('''\n2\n2\n2 3\n3\n1 2 5\n''') == '2', 'test 9'\n\nassert solution('''\n1\n3\n1 3 5\n''') == '2', 'test 10'\n\nassert solution('''\n1\n3\n1 4 5\n''') == '2', 'test", "solution('''3\n4\n1 2 3 4\n4\n4 2 4 4\n4\n4 4 1 2''') == '''4\n2\n3'''", "solution(r'''\n1\n3\n3 2 2\n''') == r'''\n3\n'''\nassert solution(r'''\n1\n3\n1 2 2\n''') == r'''\n2\n'''\nassert solution(r'''\n1\n3\n1 4 1\n''') == r'''\n2\n'''\nassert solution(r'''\n1\n3\n1 2 4\n''') == r'''\n3\n'''\nassert solution(r'''\n1\n4\n1 2 3 1\n''') == r'''\n2\n'''\nassert solution(r'''\n1\n4\n1 2 4 1\n''') == r'''\n3\n'''\nassert solution(r'''\n1\n4\n1 2 4 2\n''') == r'''\n4\n'''\nassert solution(r'''\n1\n4\n1 3 3 2\n''') == r'''\n3\n'''\nassert solution(r'''\n1\n4\n1 3 3 2\n''') == r'''\n3\n'''\nassert solution(r'''\n1\n4\n1 3 3 2\n''') == r'''\n3\n'''\nassert solution(r'''\n1\n4\n1 3 3 2\n''') == r'''\n3\n", "solution('''\n2\n2\n2 2\n2\n1 3\n''') == '''\n2\n1\n'''\n\n# run solution on input\nwith open('input.txt', 'r') as f:\n    print(solution(f.read()))", "solution('''3\n3\n3 2 4\n3\n3 4 5\n2\n2 2\n''') == '''5\n5\n5\n'''\n# test the execution time\nimport timeit\n\ntest_cases = ['''3\n3\n3 2 4\n3\n3 4 5\n2\n2 2\n'''] * 5\n\nfor test_case in test_cases:\n    print(timeit.timeit(lambda: solution(test_case), number=1))", "solution('''\n2\n2\n2 3\n2\n1 1\n''') == '''\n3\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n5\n5\n1 2 3 4 5\n4\n4 3 2 1\n4\n7 7 7 7\n4\n7 8 9 10\n2\n1000000000 1000000000\n''') == '''\n5\n4\n4\n9\n10\n'''", "(solution(\"\"\"2\n2\n2 4\n3\n1 3 5\"\"\") == \"\"\"3\n3\"\"\")", "solution('''\n3\n3\n1 2 3\n4\n4 2 6 8\n6\n3 5 6 10 13 15\n''') == '''\n3\n5\n5\n'''", "solution(\"\"\"\n10\n3\n1 2 5\n4\n1 2 5 10\n5\n1 2 5 10 20\n6\n1 2 5 10 20 50\n7\n1 2 5 10 20 50 100\n8\n1 2 5 10 20 50 100 200\n9\n1 2 5 10 20 50 100 200 500\n10\n1 2 5 10 20 50 100 200 500 1000\n11\n1 2 5 10 20 50 100 200 500 1000 2000\n\n\"\"\") == \"\"\"\n2\n2\n2\n2\n2\n2\n2\n2\n2\n3\n3\n\"\"\", \"Expected: 2\\\\n2\\\\n2\\\\n2\\\\n2\\\\n2\\\\n2\\\\n2\\\\n2\\\\n3\\\\n3\"\n\n# submit the solution\ndef submit_solution() -> None:\n    with open(\"path/to/input.txt\", \"r\") as input_file:\n        input_data = input_file.read()\n    with open(\"path/to/output.txt\", \"w\") as output_file:\n        output_file.write(solution(input_data))\n\nsubmit_solution()", "solution('''2\n2\n2 3\n3\n1 2 1''') == '''2\n1'''", "solution(\"\"\"\n3\n3\n1 2 3\n4\n1 3 1 3\n2\n2 2\n\"\"\") == \"\"\"\n1\n3\n0\n\"\"\", \"Example 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\n1\n\"\"\", \"Example 2\"", "solution('''2\n2\n2 3\n3\n1 2 3''') == '''1\n1'''\nassert solution('''1\n4\n4 5 6 7''') == '''1'''\nassert solution('''1\n4\n1 2 3 4''') == '''3'''\nassert solution('''2\n3\n3 4 5\n3\n3 4 5''') == '''1\n1'''\nassert solution('''1\n5\n5 5 10 11 12''') == '''2'''\nassert solution('''1\n7\n1 2 3 4 5 6 7''') == '''3'''\nassert solution('''1\n8\n1 1 1 1 1 1 1 1''') == '''1'''\nassert solution('''2\n2\n2 3\n2\n3 2''') == '''1\n1'''\nassert solution('''1\n1\n1''') == '''1'''\nassert solution('''1\n10\n1 1 1 1 1 1 1 1 1 1''') == '''1'''\nassert solution('''2\n3\n4 5 6\n3\n4 5 6''') == '''1\n1'''\nassert solution('''1\n4\n2 3 4 5''') == '''2'''\nassert", "solution(\"\"\"1\n6\n1 7 9 5 5 3\"\"\") == \"8\"\nassert solution(\"\"\"1\n4\n1 2 3 4\"\"\") == \"5\"\nassert solution(\"\"\"1\n3\n1 2 4\"\"\") == \"5\"\nassert solution(\"\"\"1\n7\n1 2 4 8 16 32 64\"\"\") == \"21\"\nassert solution(\"\"\"1\n6\n10 10 10 10 10 10\"\"\") == \"20\"\nassert solution(\"\"\"1\n1\n10\"\"\") == \"20\"\nassert solution(\"\"\"1\n2\n2 3\"\"\") == \"3\"\nassert solution(\"\"\"1\n3\n1 2 4\"\"\") == \"5\"\nassert solution(\"\"\"1\n3\n1 4 7\"\"\") == \"7\"\nassert solution(\"\"\"1\n4\n3 5 1 3\"\"\") == \"6\"\nassert solution(\"\"\"1\n4\n1 1 1 1\"\"\") == \"2\"\nassert solution(\"\"\"1\n4\n1 4 7 10\"\"\") == \"9\"\nassert solution(\"\"\"1\n4\n6 8 5 4\"\"\") == \"8\"\nassert solution(\"\"\"1\n4\n4 7 9 1\"\"\") == \"9\"\nassert solution(\"\"\"1\n4\n7 6 5 4\"\"\") == \"10\"\nassert solution(\"\"\"1\n5\n5 5 5 1 1\"\"\") == \"", "solution(r'''\n1\n3\n1 3 5\n''') == r'''\n3\n'''\n\n# test the performance of solution\nfrom datetime import datetime\nstart = datetime.now()\nfor i in range(100):\n    assert solution(r'''\n1\n3\n1 3 5\n''') == r'''\n3\n'''\n\nprint(datetime.now() - start)", "solution(exampleInput) == exampleOutput", "solution('''1\n3\n1 2 3''') == '3'\nassert solution('''3\n3\n2 2 3\n2\n2 1\n1\n1''') == '''3\n2\n1'''", "solution(example_input) == example_output\nprint('all tests passed')", "solution('''\n5\n5\n5 5 5 5 5\n5\n5 5 5 5 6\n5\n5 5 5 6 6\n5\n5 5 6 6 6\n5\n5 6 6 6 6\n''') == '''\n0\n1\n1\n2\n2\n'''\nprint('ok')", "solution(\"\"\"\n2\n2\n2 3\n2\n2 2\n\"\"\") == \"\"\"\n3\n2\n\"\"\"\n\nassert solution(\"\"\"\n3\n3\n1 2 3\n3\n3 2 1\n3\n2 3 4\n\"\"\") == \"\"\"\n3\n3\n4\n\"\"\"\n\nprint(\"passed all tests\")\n\n'''\nGotchas\n\nYou can't use coins of value 4 or greater, even if they are in your pockets.\n\nInput\n\nthe first line contains the number of tests\nthe second line contains the number of flavors\nthe third line contains the cost of one bag of each flavor\n\nOutput\n\nthe minimum number of coins you need to buy one bag of any flavor you'll choose in exact change\n\nExample\n\nInput:\n2\n2\n2 3\n2\n2 2\n\nOutput:\n3\n2\n'''", "solution('''\n3\n3\n1 2 3\n4\n6 4 2 5\n4\n7 6 5 5\n''') == '''\n4\n4\n3\n'''", "solution('''\n1\n3\n1 2 3\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n2\n4\n1 3 4 7\n6\n1 3 4 7 2 3\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n3\n3\n1 5 6\n3\n1 5 10\n3\n1 10 100\n''') == '4'", "solution('''2\n2\n1 2\n2\n2 3''') == '''2\n3'''", "solution(stdin) == stdout", "solution(example_input) == example_output", "solution(\"\"\"3\n3\n1 2 3\n3\n2 3 5\n2\n2 3\"\"\") == \"\"\"2\n3\n2\"\"\"\n\n# get the input\nT = int(input())\nassert 1 <= T <= 1000\nfor t in range(T):\n    N = int(input())\n    assert 1 <= N <= 100\n    A = list(map(int, input().split()))\n    assert len(A) == N\n    assert 1 <= min(A) <= 10**9\n\n# get the result\nresult = solution(\"\"\"{T}\n{N}\n{A}\"\"\".format(T=T, N=N, A=\" \".join(map(str, A))))\n\n# check the correctness of result\nassert result == \"\"\"2\n3\n2\"\"\"", "solution('''\n5\n5\n1 2 3 4 5\n2\n2 3\n2\n2 4\n6\n1 1 1 1 1 1\n6\n1 2 3 4 5 6\n''') == '''\n6\n4\n4\n1\n6\n'''", "solution(test1) == test1_output, \"test1 failed\"\nassert solution(test2) == test2_output, \"test2 failed\"\nassert solution(test3) == test3_output, \"test3 failed\"\nassert solution(test4) == test4_output, \"test4 failed\"\nassert solution(test5) == test5_output, \"test5 failed\"\nassert solution(test6) == test6_output, \"test6 failed\"\nassert solution(test7) == test7_output, \"test7 failed\"\nassert solution(test8) == test8_output, \"test8 failed\"\nassert solution(test9) == test9_output, \"test9 failed\"\nassert solution(test10) == test10_output, \"test10 failed\"\n\n# submit the solution\nsubmit_solution(solution, problem_number, problem_type)", "solution('''\n2\n5\n2 3 5 7 11\n3\n3 5 7\n''') == '''\n5\n5\n'''", "'2' == solution('''4\n1 2 3 4''')\nassert '3' == solution('''1\n1''')\nassert '1' == solution('''6\n1 2 4 8 16 32''')\nassert '31' == solution('''6\n1 2 4 8 16 32''')", "solution('''\n2\n3\n2 3 5\n2\n1 1\n''') == '4\\n2'\n\n# test for long input\nimport random\nn = 100\nprint(n)\nfor _ in range(n):\n    print(random.randint(1, 1e9), end=' ')\n\n# test for large input\nlarge = '''\n2000\n'''\nfor _ in range(2000):\n    large += str(random.randint(1, 1e9)) + ' '\nprint(large)", "solution('''\n1\n3\n1 2 3\n''') == '4'\nassert solution('''\n1\n4\n2 3 3 3\n''') == '4'\nassert solution('''\n1\n5\n1 2 3 4 5\n''') == '5'\nassert solution('''\n1\n7\n1 2 2 3 3 3 4\n''') == '6'\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '5'\nassert solution('''\n1\n9\n1 1 1 1 1 1 1 1 2\n''') == '8'\nassert solution('''\n1\n5\n5 4 3 2 1\n''') == '5'\nassert solution('''\n1\n3\n3 2 1\n''') == '3'\nassert solution('''\n1\n3\n1 2 3\n''') == '4'\nassert solution('''\n1\n6\n1 1 1 1 1 1\n''') == '5'\nassert solution('''\n1\n4\n1 1 1 1\n''') == '4'\nassert solution('''\n1\n4\n1 1 1 2\n''') == '4'\nassert solution('''\n1\n3\n3 3 3\n''') == '3'\nassert solution('''\n"], "finish_reason": ["stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-29.070054214699994, -19.737736851863, -73.38970112934304, -32.613972074261994, -35.839697970189995, -35.762400835200005, -43.675051839333, -64.81662855009999, -100.00077761002997, -30.4918750692, -26.043740205761033, -116.92496074911294, -62.11966168733399, -12.2611927982, -46.54909248836, -88.90752759257009, -26.1916328161, -97.29814285141808, -51.12955816190001, -67.42663187251729, -31.549028802899997, -71.5131859025767, -33.07881295620001, -63.79037031925, -62.49460308866399, -19.686753465599992, -39.0742127228, -87.47637731739992, -17.633590055600003, -40.28512181564001, -115.99800452769638, -174.31256336861398, -35.30639298195, -9.726504992999999, -29.201362218999993, -15.9846881907, -38.08141609292, -125.15305898819001, -36.944278282, -61.20725702771002, -15.4510037943, -5.5890221350000004, -6.71928965015, -74.22219557753004, -38.911196821469986, -37.91282446219099, -22.7600763116, -42.80682886324, -75.12093067256001, -96.9635681545331], "mean_logprob": [-0.7650014267026316, -0.06579245617287667, -0.24463233709781002, -0.1647170306780909, -0.4843202428404054, -0.55878751305, -0.28360423272294155, -1.098586924577966, -0.33333592536676665, -0.5753183975320755, -0.08681246735253667, -0.6389342117437868, -0.5401709711942086, -0.9431686767846154, -0.68454547777, -0.29635842530856665, -0.6547908204025, -0.32432714283806, -0.9296283302163636, -0.22475543957505767, -0.8089494564846154, -0.23837728634192232, -0.5250605231142857, -0.5695568778504464, -0.6126921871437647, -0.7571828256, -0.8880502891545454, -0.3430446169309804, -0.6530959279851852, -0.5371349575418667, -0.386660015092321, -0.58104187789538, -0.36398343280360823, -1.080722777, -0.5615646580576923, -0.8880382328166667, -0.5363579731397183, -0.6451188607638659, -0.8796256733809524, -0.6120725702770999, -0.5942693767038462, -0.6210024594444444, -0.61084451365, -0.4169786268400562, -0.6275999487333871, -0.18768724981282672, -0.6694140091647058, -0.6029130825808451, -0.6058139570367742, -0.32321189384844334]}
{"prompt": "'''\nYou have an array of integers (initially empty).\n\nYou have to perform q queries. Each query is of one of two types: \n\n  * \"1 x\" \u2014 add the element x to the end of the array; \n  * \"2 x y\" \u2014 replace all occurrences of x in the array with y. \n\n\n\nFind the resulting array after performing all the queries.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"1 1\n1 2\n1 3\n2 2 5\n1 4\n1 5\n2 3 7\n1 6\n1 7\n2 5 3\n1 8\n1 9\n2 7 1\n1 10\n1 11\n2 6 2\n1 12\n1 13\n2 3 1\n1 14\n1 15\n2 2 2\n1 16\n1 17\n2 1 3\n1 18\n1 19\n2 13 2\n1 20\n1 21\n2 7 1\n1 22\n1 23\n2 8 2\n1 24\n1 25\n2 10 3\n1 26\n1 27\n2 25 2\n1 28\n1 29\n2 12 3\n1 30\n1 31\n2 27 2\n1 32\n1 33\n2 15 3\n1 34\n1 35\n2 32 2\n1 36\n1 37\n2 9 3\n1 38\n1 39\n2 14 2\n1 40\n1 41\n2 4 3\n1 42\n1 43\n2 5 2\n1 44\n1 45\n2 35 3\n1 46\n1 47\n2 40 2\n1 48\n1 49\n2 47 3\n1 50\n1 51\n2 51 2\n1 52\n1 53\n2 53 3\n1 54\n1 55\n2 19 2\n1 56\n1 57\n2 45 3\n1 58\n1 59\n2 16 2\n1 60\n1", "solution(\"\"\"\n6\n1 5\n1 2\n1 3\n2 5 3\n1 6\n\"\"\") == \"2 3 6\"\n\n# check if solution handles extreme cases\nassert solution(\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\nassert solution(\"\"\"\n\n\"\"\") == \"\"\n", "solution('''\n4\n1 1\n1 2\n2 1 2\n1 3\n''') == '2 3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n1 3\n2 2 3\n''') == '3 3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n1 3\n2 2 3\n''') == '3 3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n1 3\n2 2 3\n''') == '3 3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n1 3\n2 2 3\n''') == '3 3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n1 3\n2 2 3\n''') == '3 3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n1 3\n2 2 3\n''') == '3 3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n", "solution(stdin=r'''\n5\n1 4\n1 9\n2 4 5\n1 6\n2 9 5\n''') == '5 9 5 6 5', 'Wrong answer'", "solution(stdin) == stdout\n\n\n# ========================================\n# Solution\n# ========================================\ndef solution(stdin: str) -> str:\n    queries = stdin.split('\\n')[1:]\n    result = []\n    for query in queries:\n        type_query, *args = query.split()\n        if type_query == '1':\n            result.append(int(args[0]))\n        else:\n            x, y = map(int, args)\n            result = [y if number == x else number for number in result]\n    return ' '.join(map(str, result))", "solution(\"5\\n1 7\\n1 6\\n1 7\\n2 7 2\\n1 9\") == \"7 6 2 9\"\nassert solution(\"5\\n1 7\\n1 6\\n1 7\\n2 7 2\\n1 9\\n1 8\\n2 9 8\\n1 4\\n2 4 5\\n1 3\\n2 5 3\\n1 4\\n2 3 6\\n1 9\\n2 6 9\\n1 4\\n2 4 8\\n1 5\\n2 8 7\\n1 6\\n2 7 9\\n1 8\\n2 9 6\\n1 7\\n2 6 5\\n1 8\\n2 5 3\\n1 9\\n2 3 2\\n1 4\\n2 2 4\\n1 5\\n2 4 9\\n1 6\\n2 9 3\\n1 7\\n2 3 7\\n1 8\\n2 7 8\\n1 9\\n2 8 6\\n1 4\\n2 6 4\\n1 5\\n2 4 5\\n1 6\\n2 5 3\\n1 7\\n2 3 1\\n1 8\\n2 1 2\\n1 9\\n2 2 9\\n1 4\\n2 9 5\\n1 5\\n2 5 4\\n1 6\\n2 4", "solution(\"4\\n1 5\\n1 1\\n2 5 7\\n1 4\") == \"5 1 7 4\"\nassert solution(\"8\\n1 1\\n1 3\\n1 5\\n1 7\\n1 9\\n2 3 6\\n2 5 5\\n2 1 4\") == \"1 3 5 7 9 6 5 4\"\nassert solution(\"3\\n1 9\\n2 1 2\\n1 1\") == \"9 2 1\"\n\n# test solutions on example tests\nwith open('input.txt', 'r') as f:\n    data = f.read()\n    print(solution(data))", "solution('''\n5\n1 1\n1 2\n1 3\n2 1 3\n1 3\n''') == '2 3 3'", "solution(\n'''\n5\n1 1\n1 2\n1 3\n2 1 3\n1 4\n'''\n) == '2 3 4'\n\nassert solution(\n'''\n6\n1 5\n1 2\n1 6\n2 5 2\n1 7\n2 5 6\n'''\n) == '2 6 7'\n\n# test with multiple occurrences of number to replace\nassert solution(\n'''\n5\n1 2\n1 3\n1 4\n2 3 1\n1 5\n'''\n) == '2 1 1 5'\n\n# test with same numbers in input and output\nassert solution(\n'''\n4\n1 2\n1 2\n1 2\n1 2\n'''\n) == '2 2 2 2'\n\n# test with same numbers in input and output\nassert solution(\n'''\n4\n1 2\n1 2\n1 2\n2 2 3\n'''\n) == '3 3 3 3'\n\n# test only with one type of query\nassert solution(\n'''\n1\n1 1\n'''\n) == '1'\n\nassert solution(\n'''\n2\n1 3\n1 5\n'''\n) == '3 5'\n\nassert solution(\n'''\n10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7", "solution('''\n4\n1 1\n1 2\n2 1 3\n1 3\n''') == '2 3'\n\n# check the correctness of solution\nassert solution('''\n4\n1 1\n1 2\n2 1 1\n1 3\n''') == '1 2 3'\n\n# check the correctness of solution\nassert solution('''\n4\n1 1\n1 2\n2 2 2\n1 3\n''') == '2 2 3'\n\n# check the correctness of solution\nassert solution('''\n4\n1 1\n1 2\n2 1 2\n1 3\n''') == '2 3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n1 3\n2 2 1\n''') == '2 1 3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n1 3\n2 1 2\n''') == '2 2 2'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n1 3\n2 1 3\n''') == '2 3 3'\n\n# check the correctness of solution\nassert solution('''\n5\n1 1\n1 2\n2 1 2\n1 3\n2 2 2\n", "solution('''\n3\n1 1\n1 2\n1 3\n''') == '1 2 3'\n\nassert solution('''\n2\n1 1\n2 1 2\n''') == '2'\n\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1 1\n2 2 3\n2 3 4\n''') == '1 3 4'\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n2 1 2\n2 2 1\n''') == '1 1 3'\n\nassert solution('''\n4\n1 100000\n2 50000 100000\n2 49999 1\n2 1 99998\n''') == '100000 1 1'\n\nassert solution('''\n4\n1 1\n1 2\n1 3\n2 1 2\n''') == '1 2 3'\n\nassert solution('''\n2\n1 1\n2 1 2\n''') == '2'\n\nassert solution('''\n3\n1 1\n1 2\n1 3\n''') == '1 2 3'\n\nassert solution('''\n8\n1 1\n1 2\n1 3\n2 1 2\n2 2 1\n2 3 3\n2 1 2\n2 2 1\n''') == '1 1 3'\n\nassert solution('''\n5\n1 1", "solution(input()) == ''", "(solution('''\n''') == \"\")\n\n# check the correctness of solution\nassert (solution('''\n''') == \"\")", "solution(\"5\\n1 1\\n1 2\\n1 2\\n2 1 2\\n1 3\") == \"1 2 2 3\"\nassert solution(\"6\\n1 1\\n1 2\\n1 2\\n2 1 2\\n1 3\\n2 2 2\") == \"1 2 2 2 2\"\n\n# get input\ndef get_input() -> str:\n    return \"3\\n1 1\\n1 2\\n1 2\"\n\n# run solution\nsolution(get_input())", "solution('''\n4\n1 1\n1 2\n2 1 3\n1 3\n''') == '1 3 3'\nassert solution('''\n5\n1 1\n1 1\n1 2\n2 1 2\n1 3\n''') == '1 1 3'\nassert solution('''\n4\n1 1\n1 2\n2 1 3\n1 3\n''') == '1 3 3'\nassert solution('''\n3\n1 1\n1 2\n2 1 3\n''') == '1 3'\nassert solution('''\n7\n1 1\n1 2\n2 1 3\n1 3\n1 2\n2 2 4\n1 1\n''') == '1 3 4 1'\nassert solution('''\n8\n1 1\n1 2\n2 1 3\n1 3\n1 2\n2 2 4\n1 1\n2 4 5\n''') == '1 3 5 1'\nassert solution('''\n8\n1 1\n1 2\n2 1 3\n1 3\n1 2\n2 2 4\n1 1\n2 1 5\n''') == '1 3 5 1'\nassert solution('''\n4\n1 1\n1 2\n2 1 3\n1 4\n''') == '1 3 4'\nassert solution('''\n4\n1 1\n1 2\n2 1 3\n1 4\n", "solution('''\n5\n1 2\n1 3\n2 3 4\n1 5\n1 3\n''') == '''\n2 4 5 3\n'''\n\nassert solution('''\n5\n1 2\n1 3\n2 3 4\n1 5\n1 3\n''') == '''\n2 4 5 3\n'''\n\nassert solution('''\n5\n1 2\n1 3\n2 3 4\n1 5\n1 3\n''') == '''\n2 4 5 3\n'''", "solution('''\n4\n1 4\n1 5\n2 4 5\n1 6\n''') == '5 5 6'\n\nassert solution('''\n5\n1 1\n1 2\n1 1\n2 1 2\n1 3\n''') == '2 3'\n\n# check the performance of solution\n\nimport timeit\n\nTESTS = ['''\n5\n1 1\n1 2\n1 1\n2 1 2\n1 3\n''', '''\n100000\n1 99998\n1 99999\n1 99997\n2 99998 99999\n1 1\n''', '''\n100000\n1 1\n1 2\n1 1\n2 1 2\n1 3\n''', '''\n100000\n1 99998\n1 99999\n1 99997\n2 99998 99999\n1 99996\n''', '''\n100000\n1 1\n1 2\n1 1\n2 1 2\n1 99998\n''', '''\n200000\n1 1\n1 2\n1 1\n2 1 2\n1 3\n''', '''\n200000\n1 99998\n1 99999\n1 99997\n2 99998 99999\n1 1\n''', '''\n200000\n1 1\n1 2\n1 1\n2 1 2\n1 99998\n''', '''\n200000\n1 99998\n1 99999\n", "solution('''\n6\n1 1\n1 2\n1 3\n2 1 2\n1 4\n1 5\n''') == '1 2 3 2 4 5'\n\n# check the correctness of solution\nassert solution('''\n7\n1 1\n1 2\n1 3\n2 1 2\n1 4\n1 5\n2 2 2\n''') == '1 2 3 2 4 5 2'\n\n# check the correctness of solution\nassert solution('''\n8\n1 1\n1 2\n1 3\n2 1 2\n1 4\n1 5\n2 2 2\n2 3 3\n''') == '1 2 3 2 4 5 2 3'\n\n# check the correctness of solution\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1 2\n1 4\n1 5\n''') == '1 2 3 2 4 5'\n\n# check the correctness of solution\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1 2\n1 4\n1 5\n''') == '1 2 3 2 4 5'\n\n# check the correctness of solution\nassert solution('''\n7\n1 1\n1 2\n1 3\n2 1 2\n1 4\n1 5\n2 2 2\n''') == '1 2 3 2 4 5 2'\n\n# check the correctness of solution", "solution('''3\n1 7\n1 8\n2 8 1''') == '7 1'\nassert solution('''5\n1 7\n1 8\n2 8 1\n1 2\n2 1 1''') == '7 1 2'\nassert solution('''5\n1 7\n1 8\n2 8 1\n1 2\n2 1 2''') == '7 2 2'\nassert solution('''5\n1 7\n1 8\n2 8 1\n1 2\n2 1 3''') == '7 3 3'\nassert solution('''5\n1 7\n1 8\n2 8 1\n1 2\n2 3 4''') == '7 1 2'\nassert solution('''5\n1 7\n1 8\n2 8 1\n1 2\n2 4 5''') == '7 1 2'\nassert solution('''6\n1 7\n1 8\n2 8 1\n1 2\n2 1 5\n1 3''') == '7 5 3'\nassert solution('''6\n1 7\n1 8\n2 8 1\n1 2\n2 1 5\n1 3''') == '7 5 3'\nassert solution('''6\n1 7\n1 8\n2 8 1\n1 2\n2 3 5\n1 3''') == '7 3 3'\nassert solution('''7\n1 7\n1 8", "solution(\"\"\"\n6\n1 4\n1 5\n1 6\n2 4 5\n1 4\n2 5 7\n\"\"\") == \"4 5 6 5 4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 1\n1 2\n1 3\n2 2 1\n1 2\n\"\"\") == \"1 1 3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 0\n1 1\n1 2\n2 0 1\n1 0\n\"\"\") == \"0 1 2\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 0\n1 1\n1 2\n2 0 1\n1 0\n\"\"\") == \"0 1 2\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n1 9\n1 9\n1 9\n2 9 9\n1 9\n2 9 9\n\"\"\") == \"9 9 9 9 9\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 5\n1 3\n1 8\n2 5 7\n1 6\n\"\"\") == \"5 3 8 6\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n6\n1 5\n1 3\n1 8\n2 5 7\n1 6\n2 5 7\n\"\"\") == \"5 3 8 7 7\"\n\n# check the correctness of solution\nassert solution", "solution(\"\"\"\n2\n1 1\n1 2\n\"\"\") == \"1 2\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\n1 1\n1 2\n2 1 3\n1 4\n\"\"\") == \"3 4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n5\n1 1\n1 2\n2 1 3\n1 4\n2 2 5\n\"\"\") == \"3 5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n1 1\n1 2\n2 1 3\n1 4\n2 2 5\n1 6\n1 7\n2 1 8\n1 9\n2 5 10\n\"\"\") == \"3 8 9 10\"", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution('''\n\n''') == '''\n\n'''", "(solution(\"\"\"1 1\n1 3\n1 2\n2 3 2\n1 2\n1 3\n1 4\n2 2 1\n1 1\n1 2\n1 3\n1 4\n1 5\n2 4 2\n1 4\n1 5\n1 6\n1 7\n1 8\n2 3 3\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 6 2\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 7 3\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n2 12 2\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n2 14 1\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n2 15 3\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n2 20 2\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n2 22 1\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n2 23 3\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 30\n2", "solution('''\n\n''') == '''\n\n'''", "solution(example) == '3 4 4 2'\nassert solution(example_1) == '1 2 3 3 2'\nassert solution(example_2) == '3 2'", "solution('''\n3\n1 0\n1 1\n2 0 1\n''') == '1 1'\n\n# check the speed of solution\nimport timeit\n\ninput = '''\n5\n1 5\n1 2\n1 3\n2 5 1\n1 1\n'''\n\ntime = timeit.timeit(lambda: solution(input), number=10)\nprint(f'Solution of task runs in {time:.4f} seconds.')", "solution(\n'''\n4\n1 2\n1 3\n2 2 4\n1 5\n'''\n) == '4 5'\n\nassert solution(\n'''\n7\n1 2\n1 3\n2 2 4\n1 5\n1 6\n2 4 5\n1 7\n'''\n) == '5 6 7'\n\nassert solution(\n'''\n6\n1 2\n1 3\n2 2 4\n1 5\n1 6\n2 4 5\n'''\n) == '5 6'\n\nassert solution(\n'''\n8\n1 2\n1 3\n2 2 4\n1 5\n1 6\n2 4 5\n1 7\n2 7 8\n'''\n) == '5 6 8'\n\nassert solution(\n'''\n8\n1 2\n1 3\n2 2 4\n1 5\n1 6\n2 4 5\n1 7\n2 7 9\n'''\n) == '5 6 9'", "solution('''\n7\n1 -100\n1 100\n1 0\n2 0 100\n1 1\n2 0 1\n2 1 1\n''') == '100 100 0 100 1 1 1'", "solution('''\n4\n1 1\n1 2\n2 1 3\n1 4\n''') == '4 2 3', 'test 1'\n\nassert solution('''\n10\n1 1\n1 2\n1 3\n1 4\n1 5\n2 1 2\n2 3 4\n2 4 5\n2 4 1\n1 6\n''') == '6 2 1 1 1', 'test 2'\n\nassert solution('''\n3\n1 1\n2 1 2\n1 2\n''') == '2', 'test 3'\n\nassert solution('''\n10\n1 1\n1 2\n1 3\n1 4\n1 5\n2 1 2\n2 3 4\n2 4 5\n2 4 1\n1 6\n''') == '6 2 1 1 1', 'test 4'\n\nassert solution('''\n1\n1 2\n''') == '2', 'test 5'\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '1 2 3 4 5', 'test 6'\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == '1 2 3 4 5', 'test 7'\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n1 4", "solution(\"\"\"\n5\n1 1\n1 2\n1 3\n2 1 2\n1 4\n\"\"\") == \"1 2 2 4\"\n\nassert solution(\"\"\"\n6\n1 1\n1 2\n1 3\n2 1 2\n1 4\n2 2 3\n\"\"\") == \"1 2 3 3\"\n\nassert solution(\"\"\"\n7\n1 1\n1 2\n1 3\n2 1 2\n1 4\n2 2 3\n2 3 4\n\"\"\") == \"1 2 3 4\"", "solution(\"\"\"5\n1 3\n1 3\n1 2\n2 3 2\n1 4\"\"\") == \"3 2 4\"", "solution('''4\n1 5\n1 7\n2 5 7\n1 9''') == '5 7 9'\n\n# get input from stdin\nif __name__ == '__main__':\n    from sys import stdin\n    input_data = stdin.read()\n    solution(input_data)", "solution('''\n3\n1 2\n1 1\n2 1 2\n''') == '2 2'\n\n# print(solution('''\n# 3\n# 1 2\n# 1 1\n# 2 1 2\n# '''))", "(solution('''1 1\n1 2\n1 3\n1 4\n1 5\n2 3 3\n2 4 4\n2 5 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 3 3\n2 4 4\n2 5 5\n1 11\n1 12\n1 13\n1 14\n1 15\n2 3 3\n2 4 4\n2 5 5\n1 16\n1 17\n1 18\n1 19\n1 20\n2 3 3\n2 4 4\n2 5 5\n1 21\n1 22\n1 23\n1 24\n1 25\n2 3 3\n2 4 4\n2 5 5\n1 26\n1 27\n1 28\n1 29\n1 30\n2 3 3\n2 4 4\n2 5 5\n1 31\n1 32\n1 33\n1 34\n1 35\n2 3 3\n2 4 4\n2 5 5\n1 36\n1 37\n1 38\n1 39\n1 40\n2 3 3\n2 4 4\n2 5 5\n1 41\n1 42\n1 43\n1 44\n1 45\n2 3 3\n2 4 4\n2 5 5\n1 46\n1 47\n1 48\n1 49\n1 50\n2 3 3\n2 4 4\n2 5 5\n1 51\n1 52\n1 53\n1 54\n1 55\n2 3 3\n2 4 4\n2", "solution('''\n6\n1 1\n1 2\n1 3\n2 1 3\n1 1\n1 2\n''') == '3 3 3 1 1 2'\n\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1 1\n1 1\n1 2\n''') == '3 3 3 1 1 2'\n\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 2 1\n1 1\n1 2\n''') == '1 2 1 1 1 2'\n\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 3 1\n1 1\n1 2\n''') == '1 2 1 1 1 2'\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n2 3 3\n1 1\n''') == '1 2 3 1'\n\nassert solution('''\n5\n1 1\n1 2\n1 3\n2 1 1\n1 1\n''') == '3 3 3 1'\n\n# no input, just test the solution\nassert solution('') == '', 'input is empty'\n\n'''\nYou have a sequence of strings.\n\nA permutation of the strings is a sequence of strings equal to the initial sequence, but with the strings written in some order.\n\nFor example, sequences [\"a\",", "solution('''5\n1 1\n1 2\n1 3\n2 2 3\n1 2''') == '3 3 2'\nassert solution('''2\n1 1\n2 1 1''') == '1'\nassert solution('''7\n1 1\n1 1\n1 1\n2 1 2\n1 2\n2 1 2\n1 2''') == '2 2 2'\n\nprint('OK')", "solution('''\n4\n1 1\n1 2\n2 1 2\n1 1\n''') == '2 2 1', 'failed test 1'\n\nassert solution('''\n4\n1 1\n1 2\n2 1 2\n1 1\n''') == '2 2 1', 'failed test 2'\n\nassert solution('''\n4\n1 1\n1 2\n2 1 2\n1 1\n''') == '2 2 1', 'failed test 3'\n\n# print the solution\nprint(solution(sys.stdin.read()))", "solution(\"\"\"5\n1 1\n1 2\n1 3\n2 1 4\n1 5\"\"\") == \"4 2 3 5\"", "solution('''\n3\n1 2\n1 5\n2 2 5\n''') == '5 5', 'test 1'\n\nassert solution('''\n4\n1 10\n1 10\n1 10\n2 10 9\n''') == '10 10 10', 'test 2'\n\nassert solution('''\n4\n1 9\n1 8\n1 7\n2 8 5\n''') == '9 5 7', 'test 3'\n\nassert solution('''\n3\n1 10\n1 15\n2 10 5\n''') == '15 5', 'test 4'\n\nassert solution('''\n6\n1 5\n1 8\n1 9\n1 10\n2 5 6\n2 8 7\n''') == '6 6 7 10', 'test 5'\n\nassert solution('''\n2\n1 10\n2 10 5\n''') == '5', 'test 6'\n\nassert solution('''\n6\n1 10\n1 11\n1 12\n1 13\n2 12 7\n2 11 8\n''') == '10 8 7 13', 'test 7'\n\nassert solution('''\n5\n1 3\n1 4\n1 5\n2 3 1\n2 4 2\n''') == '1 2 5', 'test 8'\n\nassert solution('''\n4\n1 10\n1 11\n1 12\n", "solution(solution_input) == solution_output, \"Check the correctness of your solution\"\n\n# check the performance of solution\nassert solution(solution_input) == solution_output, \"Check the performance of your solution\"\n\n# check the correctness of solution\nassert solution(solution_input2) == solution_output2, \"Check the correctness of your solution\"\n\n# check the performance of solution\nassert solution(solution_input2) == solution_output2, \"Check the performance of your solution\"\n\n# check the correctness of solution\nassert solution(solution_input3) == solution_output3, \"Check the correctness of your solution\"\n\n# check the performance of solution\nassert solution(solution_input3) == solution_output3, \"Check the performance of your solution\"", "solution('''\n\n''') == '''\n\n'''", "solution(r'''3\n1 2\n1 3\n2 3 5''') == '2 5'\n\n# check the correctness of solution\nassert solution(r'''6\n1 1\n1 2\n1 3\n2 1 5\n1 1\n2 2 5''') == '1 2 5'\n\n# check the correctness of solution\nassert solution(r'''6\n1 1\n1 2\n1 3\n2 1 5\n1 1\n2 1 5''') == '5'\n\n# check the correctness of solution\nassert solution(r'''6\n1 1\n1 2\n1 3\n2 1 5\n1 1\n2 5 1''') == '5 2'\n\n# check the correctness of solution\nassert solution(r'''5\n1 1\n1 2\n1 3\n2 1 5\n1 1''') == '1'\n\n# check the correctness of solution\nassert solution(r'''5\n1 1\n1 2\n1 3\n2 1 5\n1 1''') == '1'\n\n# check the correctness of solution\nassert solution(r'''2\n1 1\n2 1 2''') == '2'\n\n# check the correctness of solution\nassert solution(r'''5\n1 1\n1 2\n1 3\n2 1 5\n1 1''') == '1'\n\n# check the", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution", "solution('''\n1 1\n1 2\n2 1 2\n''') == '2 2'\n\nassert solution('''\n1 1\n1 2\n1 3\n2 1 2\n2 3 2\n''') == '2 2 2'\n\nassert solution('''\n1 1\n1 2\n1 3\n2 1 1\n2 2 2\n2 3 3\n''') == '1 1 1'\n\n# display solution\nprint(solution(input()))", "solution(sample_stdin) == '''\n'''\n\n# get the input and run the solution\nstdin = input()\nprint(solution(stdin))", "'''1 \n2 \n3''' == solution('''4\n1 1\n1 2\n1 3\n2 1 3''')\nassert '''0''' == solution('''2\n1 0\n2 0 5''')\nassert '''5 5 0''' == solution('''6\n1 5\n1 5\n1 0\n2 0 5\n2 1 5\n2 5 5''')", "solution('''\n3\n1 2\n1 5\n2 2 4\n''') == '2 4'\n\nassert solution('''\n5\n1 5\n1 6\n1 2\n2 5 2\n1 4\n''') == '2 2 4'\n\nassert solution('''\n8\n1 2\n1 7\n1 5\n1 6\n2 6 1\n2 2 7\n1 1\n2 1 2\n''') == '2 7 1 1'\n\nassert solution('''\n1\n1 1\n''') == '1'\n\nprint('Test passed!')", "solution('''\n6\n1 3\n1 2\n2 3 1\n1 10\n2 1 11\n1 4\n''') == '''\n2 11 10\n'''", "solution(example) == example_out\n\n# list of string to test\ntest_inputs = []\n\n# list of tuples of input, output\ntest_data = []\nfor test_input, test_output in test_data:\n    # check if input is a string, if so convert to list of strings\n    if isinstance(test_input, str):\n        test_input = [test_input]\n    \n    # format list of strings to string \n    test_input = '\\n'.join(test_input)\n    \n    # check the correctness of solution\n    assert solution(test_input) == test_output"], "finish_reason": ["length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-140.84989542158, -50.51129260416797, -28.121448577753032, -37.460648639800006, -54.18743739427398, -124.6645512981776, -98.56566946136704, -13.6045346084, -130.74666549737054, -58.665742806899964, -96.44488241035393, -10.614813430000002, -14.536498205310004, -51.803060802675994, -75.95143086008403, -30.89553635903002, -97.57350256126392, -49.252006636060024, -77.58467801251003, -100.61547457350106, -39.901770435309984, -14.292168014849986, -6.6031901107, -74.32735662965003, -6.603190090699999, -39.9166645803, -75.57471070427997, -55.121885204134834, -37.56979025439999, -72.00827578260296, -30.742824251229994, -21.3163696877, -39.00997547983001, -20.97989382321, -34.458224032323976, -142.28653688542005, -44.509693022570005, -36.16113618632401, -17.654052955799997, -122.092094167743, -32.597949384257994, -6.6031909637, -74.23360446809998, -13.025426712638989, -44.06433406246001, -25.35942206979001, -57.87466623193, -81.11560402751397, -33.716668647999995, -103.08109209041008], "mean_logprob": [-0.46949965140526667, -0.16837097534722667, -0.09373816192584333, -0.8513783781772727, -0.37630164857134724, -0.4155485043272583, -0.6797632376646, -0.4251417065125, -0.4358222183245683, -0.195552476023, -0.32148294136784666, -1.5164019185714286, -0.4275440648620588, -0.4390089898531864, -0.25317143620028, -0.2686568379046087, -0.3252450085375467, -0.16417335545353334, -0.2586155933750333, -0.33538491524500336, -0.257430777002, -0.0476405600495, -0.41269938191875, -0.24775785543216666, -0.41269938066875, -0.9735771848853658, -0.7266799106180769, -0.2612411621049043, -0.8348842278755556, -0.24002758594201, -0.274489502243125, -0.7350472306103448, -0.5418052149976389, -0.37464096112875, -0.11486074677441334, -0.4742884562847333, -0.47350737258053194, -0.2869931443359048, -0.58846843186, -0.40697364722581, -0.18211144907406704, -0.41269943523125, -0.247445348227, -0.04341808904213, -0.41181620619121495, -0.6502415915330769, -0.6290724590427174, -0.6145121517235909, -0.8429167162, -0.7060348773315753]}
{"prompt": "'''\nYou are given a permutation p consisting of n integers 1, 2, ..., n (a permutation is an array where each element from 1 to n occurs exactly once).\n\nLet's call an array a bipartite if the following undirected graph is bipartite:\n\n  * the graph consists of n vertices; \n  * two vertices i and j are connected by an edge if i < j and a_i > a_j. \n\n\n\nYour task is to find a bipartite array of integers a of size n, such that a_i = p_i or a_i = -p_i, or report that no such array exists. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 2 \u22c5 10^5) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^6) \u2014 the size of the permutation.\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nThe sum of n over all test cases doesn't exceed 10^6.\n\nOutput\n\nFor each test case, print the answer in the following format. If such an array a does not exist, print \"NO\" in a single line. Otherwise, print \"YES\" in the first line and n integers \u2014 array a in the second line.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"2\n2\n2 1\n3\n1 2 3\"\"\") == \"\"\"YES\n1 2\nNO\"\"\"", "solution(\"\"\"3\n3\n1 2 3\n3\n3 2 1\n3\n1 2 3\n\"\"\") == \"\"\"YES\n-1 -2 -3\nYES\n3 2 1\nNO\n\"\"\"\n\nassert solution(\"\"\"2\n2\n1 2\n2\n2 1\n\"\"\") == \"\"\"YES\n1 -2\nYES\n2 -1\n\"\"\"", "solution('''4\n2\n2 1\n2\n1 2\n3\n1 2 3\n2\n1 2''') == '''YES\n-2 1\nNO\nYES\n-3 -2 1\nNO'''", "solution('''\n2\n3\n2 1 3\n2\n1 2\n''') == '''\nYES\n-2 1 -3\nNO\n'''", "solution(\"\") == \"\", \"expected empty\"", "solution('''\n2\n3\n1 2 3\n3\n3 2 1\n''') == '''\nYES\n1 -2 3\nYES\n-3 2 1\n'''\n\n# check the performance of solution\nassert solution('''\n1\n10\n7 2 4 1 5 10 9 8 3 6\n''') == '''\nYES\n-7 2 -4 1 -5 10 -9 8 -3 6\n'''", "solution(\"input text\") == \"correct answer\"", "solution(input1) == output1\nassert solution(input2) == output2\nassert solution(input3) == output3\nassert solution(input4) == output4\nassert solution(input5) == output5\nassert solution(input6) == output6\nassert solution(input7) == output7\nassert solution(input8) == output8\nassert solution(input9) == output9\nassert solution(input10) == output10\n\nprint('All tests passed successfully')", "solution('''\n2\n3\n2 1 3\n3\n3 2 1\n''') == '''\nYES\n-3 -2 -1\nNO\n'''\n\n# compare the performance of solution\n# import timeit\n# from random import randint\n# from collections import deque\n# from itertools import permutations\n#\n# def generate_input(n, m):\n#     return '\\n'.join([\n#         f'{n}',\n#         ' '.join([f'{i}' for i in range(1, n + 1)])\n#     ])\n#\n# print(timeit.timeit(\n#     stmt='solution(stdin)',\n#     setup='from __main__ import solution, stdin',\n#     number=1,\n#     globals=globals()\n# ))", "solution('''\n3\n4\n4 2 3 1\n4\n2 3 4 1\n4\n2 3 1 4\n''') == '''\nYES\n-4 -2 3 1\nYES\n-2 -3 4 1\nNO\n'''", "solution(\n    \"\"\"\n    1\n    5\n    2 1 5 4 3\n    \"\"\"\n) == \"\"\"\nYES\n1 2 -5 -4 -3\n\"\"\"\nassert solution(\n    \"\"\"\n    3\n    3\n    3 2 1\n    5\n    2 1 5 4 3\n    4\n    4 1 3 2\n    \"\"\"\n) == \"\"\"\nNO\nYES\n1 2 -5 -4 -3\nNO\n\"\"\"\nassert solution(\n    \"\"\"\n    5\n    6\n    3 2 1 6 5 4\n    1\n    1\n    4\n    4 1 3 2\n    8\n    8 5 7 2 3 6 1 4\n    10\n    10 8 1 3 5 7 6 9 4 2\n    \"\"\"\n) == \"\"\"\nYES\n-3 -2 -1 6 5 4\nYES\n1\nNO\n-8 -5 7 -2 3 -6 1 -4\nYES\n-10 8 -1 3 -5 7 -6 9 -4 -2\n\"\"\"\nprint(\"Correct!\")\n\n# submit\nimport requests\nimport json\n\nURL = \"https://raw.githubusercontent.com/Nikita-Boyarskikh/2co/master/src/round2/challenge/challenge1.in\"\nresponse = requests.get(URL)\nif response.status_code == 200:\n", "solution('''\n6\n3\n2 1 3\n3\n3 2 1\n3\n3 1 2\n4\n2 1 4 3\n4\n4 3 2 1\n4\n4 1 3 2\n''') == '''\nYES\n1 -2 3\nYES\n3 -2 1\nNO\nYES\n-2 1 4 3\nYES\n4 -3 2 -1\nYES\n4 -1 3 -2\n'''", "solution('''\n    5\n    3\n    2 1 3\n    3\n    1 2 3\n    3\n    3 2 1\n    4\n    4 1 2 3\n    4\n    1 2 3 4\n''') == '''\n    YES\n    -2 1 -3\n    YES\n    1 2 3\n    YES\n    3 2 1\n    YES\n    -4 1 -2 3\n    NO\n'''", "solution(\"\"\"\n2\n2\n2 1\n2\n1 2\n\"\"\") == \"\"\"\nYES\n-2 1\nNO\n\"\"\"", "solution('''\n''') == '''\n'''", "solution('''5\n5\n5 1 4 2 3\n5\n3 1 4 2 5\n2\n2 1\n2\n1 2\n5\n5 4 3 2 1''') == '''YES\n-5 -1 -4 -2 -3\nYES\n-3 -1 -4 -2 -5\nNO\nYES\n1 2\nNO'''", "solution(\"2\\n3\\n2 1 3\\n3\\n1 2 3\") == \"YES\\n3 -1 2\\nNO\"\nassert solution(\"3\\n3\\n2 1 3\\n3\\n1 2 3\\n2\\n2 1\") == \"YES\\n3 -1 2\\nNO\\nYES\\n-2 1\"\nassert solution(\"5\\n6\\n5 1 6 2 4 3\\n5\\n3 4 2 1 5\\n5\\n3 4 2 5 1\\n7\\n4 5 6 7 3 2 1\\n2\\n1 2\") == \"YES\\n5 -1 6 -2 4 -3\\nYES\\n3 -4 2 -1 5\\nYES\\n3 -4 2 5 -1\\nYES\\n4 -5 6 -7 3 -2 1\\nYES\\n-1 2\"\n\n# stress testing\n# import random\n# while True:\n#     sample = []\n#     for i in range(random.randint(1, 100000)):\n#         n = random.randint(1, 1000000)\n#         sample.append(str(n))\n#         print(n)\n#     sample.append(\"0\")\n#     print(\"0\")\n#     result = solution(\"\".join(sample", "solution(\"2\\n3\\n2 1 3\\n3\\n1 2 3\") == \"YES\\n1 2 3\\nNO\"\n\n# print the result\nprint(solution(input()))", "solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"", "solution('''\n2\n5\n5 1 2 4 3\n5\n5 1 2 3 4\n''') == '''\nYES\n5 -1 -2 -4 -3\nNO\n'''\nassert solution('''\n3\n3\n3 1 2\n4\n4 1 2 3\n4\n1 2 3 4\n''') == '''\nYES\n3 -1 -2\nYES\n4 -1 -2 -3\nNO\n'''\n\n# check if solution is faster than the naive one\n# input is random\n\nimport random\n\ndef benchmark_solution(solution: callable, amount: int = 100, max_n: int = 10**4, max_m: int = 10**4) -> float:\n    '''\n    measure the average time of solution()\n    '''\n    times = []\n    for _ in range(amount):\n        n = random.randint(1, max_n)\n        m = random.randint(1, max_m)\n        data = str(n) + '\\n' + ' '.join(str(random.randint(1, m)) for _ in range(n))\n        time = timeit.timeit(lambda: solution(data), number=1)\n        times.append(time)\n    return sum(times) / len", "solution(input()) == output()", "solution('''\n3\n3\n1 2 3\n3\n3 2 1\n3\n1 3 2\n''') == '''\nYES\n-1 -2 -3\nYES\n-3 -2 -1\nNO\n'''", "solution('''1\n5\n5 4 3 2 1''') == '''YES\n5 -4 3 -2 1'''\nassert solution('''1\n4\n1 2 3 4''') == '''NO'''\nassert solution('''1\n4\n4 3 2 1''') == '''YES\n4 -3 2 -1'''\nassert solution('''2\n5\n5 4 3 2 1\n4\n1 2 3 4''') == '''YES\n5 -4 3 -2 1\nNO'''\nassert solution('''3\n5\n5 4 3 2 1\n4\n1 2 3 4\n4\n4 3 2 1''') == '''YES\n5 -4 3 -2 1\nNO\nYES\n4 -3 2 -1'''\nassert solution('''1\n10\n8 9 7 5 3 6 4 2 1 10''') == '''YES\n8 -9 7 -5 3 -6 4 -2 1 -10'''\n\n# print(solution('''2\n# 4\n# 1 2 3 4\n# 4\n# 4 3 2 1'''))", "solution('''3\n3\n1 2 3\n3\n3 2 1\n3\n2 1 3''') == '''NO\nYES\n1 2 3\nYES\n-3 -2 -1'''", "solution(stdin) == stdout", "solution('''\n1\n6\n3 1 4 2 5 6\n''') == '''\nYES\n2 1 3 -4 5 -6\n'''\n\nassert solution('''\n1\n5\n2 3 4 5 1\n''') == '''\nNO\n'''\n\n# test speed\nfrom timeit import timeit\nprog = '''\nfrom copy import deepcopy\nfrom bisect import bisect_left\nfrom random import randint, shuffle\nfrom collections import defaultdict\n\ndef solution(stdin: str) -> str:\n    T = int(stdin.split('\\\\n')[0])\n    results = []\n    for _ in range(T):\n        n = int(stdin.split('\\\\n')[2*_+1])\n        perm = list(map(int, stdin.split('\\\\n')[2*_+2].split()))\n        mult = [1, -1]\n        a = [0] * n\n        b = [0] * n\n        to_sort = [1] * n\n        for i in range(n):\n            a[i] = mult[perm[i] % 2] * perm[i]\n            b[i] = mult[(perm[i]+1) % 2] * perm[i]\n            to_", "solution(\"\"\"\n2\n3\n2 1 3\n2\n2 1\n\"\"\") == \"\"\"\nYES\n1 -2 3\nNO\n\"\"\", \"Solution has incorrect behavior\"\n\n# --- Output check ---\ndef _print(output: str) -> None:\n    print(output, end=\"\")\n\ndef _input() -> str:\n    from sys import stdin\n    return stdin.read()\n\n_print(solution(_input()))", "solution(INPUT) == OUTPUT\nassert solution(INPUT2) == OUTPUT2\nassert solution(INPUT3) == OUTPUT3\nassert solution(INPUT4) == OUTPUT4\nassert solution(INPUT5) == OUTPUT5\nassert solution(INPUT6) == OUTPUT6\nassert solution(INPUT7) == OUTPUT7\nassert solution(INPUT8) == OUTPUT8\nassert solution(INPUT9) == OUTPUT9\nassert solution(INPUT10) == OUTPUT10\nassert solution(INPUT11) == OUTPUT11\nassert solution(INPUT12) == OUTPUT12\nassert solution(INPUT13) == OUTPUT13\nassert solution(INPUT14) == OUTPUT14\nassert solution(INPUT15) == OUTPUT15\nassert solution(INPUT16) == OUTPUT16\nassert solution(INPUT17) == OUTPUT17\nassert solution(INPUT18) == OUTPUT18\nassert solution(INPUT19) == OUTPUT19\nassert solution(INPUT20) == OUTPUT20\nassert solution(INPUT21) == OUTPUT21\nassert solution(INPUT22) == OUTPUT22\nassert solution(INPUT23) == OUTPUT23\nassert solution(INPUT24) == OUTPUT24\nassert solution(INPUT25) == OUTPUT25\nassert solution(", "solution(test_sample) == test_result", "solution(\"\"\"\n1\n2\n2 1\n\"\"\") == \"\"\"\nYES\n-2 1\n\"\"\"\n\nassert solution(\"\"\"\n2\n2\n2 1\n3\n1 2 3\n\"\"\") == \"\"\"\nYES\n-2 1\nNO\n\"\"\"\n\nassert solution(\"\"\"\n3\n3\n3 2 1\n3\n2 3 1\n5\n5 4 3 2 1\n\"\"\") == \"\"\"\nYES\n-3 -2 1\nYES\n-2 -3 1\nYES\n-5 -4 -3 -2 1\n\"\"\"", "solution(r'''\n5\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n5\n1 4 2 5 3\n5\n5 3 1 4 2\n5\n2 3 4 5 1\n''') == '''\nYES\n-5 -4 -3 -2 -1\nYES\n1 2 3 4 5\nYES\n1 -4 2 -5 3\nYES\n5 3 1 4 2\nYES\n2 3 4 5 1\n'''", "solution('''3\n3\n1 2 3\n3\n3 2 1\n3\n1 2 1''') == '''YES\n-1 -2 -3\nYES\n-3 -2 -1\nNO'''", "solution('''\n2\n3\n1 2 3\n2\n2 1\n''') == '''\nYES\n-1 2 -3\nNO\n'''\n\n'''\nA sequence of non-negative integers a_1, a_2, ..., a_n is called an arithmetic progression if a_2 - a_1 = a_3 - a_2 = ... = a_n - a_n-1 (at least one of the integers a_i is non-zero).\n\nGiven a sequence of integers a_1, a_2, ..., a_n, find the maximum number of arithmetic progressions that can be created from this sequence.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the sequence.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^5) \u2014 the sequence.\n\nThe sum of n over all test cases doesn't exceed 5\u22c510^5.\n\nOutput\n\nFor each test case, print a single integer \u2014 the maximum number of arithmetic progressions that can be created from the given sequence.\n\n''", "solution(\"\"\"\n2\n4\n2 4 1 3\n2\n2 1\n\"\"\") == \"\"\"\nYES\n-2 -4 1 -3\nNO\n\"\"\", \"Initial\"\n\nassert solution(\"\"\"\n0\n\"\"\") == \"\"\"\n\"\"\", \"Zero\"\n\nassert solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"\"\"\nYES\n1 2 3 4 5\n\"\"\", \"Simple\"\n\nassert solution(\"\"\"\n1\n7\n7 1 5 3 2 4 6\n\"\"\") == \"\"\"\nYES\n7 -1 5 -3 2 -4 6\n\"\"\", \"Not Simple\"\n\nassert solution(\"\"\"\n1\n8\n1 2 3 4 5 6 7 8\n\"\"\") == \"\"\"\nNO\n\"\"\", \"Not Found\"\n\nassert solution(\"\"\"\n1\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"\"\"\nYES\n1 2 3 4 5 6 7 8 9 10\n\"\"\", \"Big\"\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\nYES\n1\n\"\"\", \"One\"\n\nassert solution(\"\"\"\n1\n100000\n100000 99999 99998 99997 99996 99995 99994 99993 99992 99991 99990 99989 99988 99987 99986 99985 99984 99983 99982 99981 99980 99979 99978", "solution('''\n5\n5\n5 4 3 2 1\n5\n4 2 3 5 1\n5\n5 2 3 4 1\n5\n5 2 1 3 4\n5\n5 2 1 4 3\n''') == '''\nYES\n-5 -4 -3 -2 -1\nYES\n-4 2 -3 5 -1\nYES\n5 -2 3 -4 1\nYES\n5 -2 -1 3 -4\nYES\n5 -2 -1 -4 3\n'''", "solution(\"\"\"1\n3\n1 2 3\n\"\"\") == \"\"\"YES\n3 2 1\n\"\"\"", "solution(stdin='''\n1\n4\n4 3 2 1\n''') == '''\nYES\n4 -3 -2 -1\n'''\n\n# test cases\nassert solution(stdin='''\n2\n2\n2 1\n2\n1 2\n''') == '''\nNO\nYES\n-1 2\n'''\n\n# print the test results\nfrom functools import reduce\nall_results = [\n    solution(stdin=stdin)\n    for stdin in ['''\n3\n3\n3 2 1\n2\n2 1\n4\n4 3 2 1\n''', '''\n1\n1\n1\n''', '''\n4\n4\n4 3 2 1\n2\n2 1\n4\n4 3 2 1\n4\n4 3 2 1\n''', '''\n4\n4\n4 3 2 1\n2\n2 1\n4\n4 3 2 1\n4\n4 3 2 1\n''', '''\n2\n2\n2 1\n2\n1 2\n''', '''\n2\n2\n2 1\n2\n1 2\n''', '''\n5\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n''', '''", "solution('''\n2\n3\n2 1 3\n3\n3 2 1\n''') == '''\nYES\n-3 -2 -1\nNO\n'''", "solution('''2\n6\n1 2 3 6 5 4\n4\n4 2 3 1''') == '''YES\n1 -2 3 -6 5 -4\nNO'''", "solution('''\n''') == '''\n'''\n\n# check the performance of solution\nimport random\nimport time\n\ns = '''\n'''\n\nprint(time.time())\nassert solution(s) == '''\n'''\nprint(time.time())", "\"\"\"\nNO\n\"\"\" == solution(\"\"\"\n3\n3\n2 1 3\n4\n1 2 4 3\n3\n3 2 1\n\"\"\")", "solution('''1\n4\n1 2 3 4''') == '''YES\n-1 -2 3 4'''\n\nassert solution('''2\n4\n4 3 2 1\n3\n3 2 1''') == '''NO\nYES\n3 -2 1'''\n\nassert solution('''3\n3\n3 2 1\n3\n1 2 3\n1\n1''') == '''YES\n3 -2 -1\nYES\n-1 -2 3\nYES\n-1'''\n\nassert solution('''4\n5\n5 4 2 3 1\n5\n1 2 3 4 5\n1\n1\n5\n5 1 2 3 4''') == '''YES\n5 -4 2 -3 -1\nYES\n-1 -2 -3 -4 -5\nYES\n-1\nYES\n5 -1 2 -3 -4'''\n\nassert solution('''4\n1\n1\n2\n1 2\n2\n2 1\n2\n2 1''') == '''YES\n-1\nYES\n1 2\nYES\n-2 -1\nYES\n-2 -1'''\n\nassert solution('''5\n2\n2 1\n2\n1 2\n3\n3 2 1\n3\n1 2 3\n3\n1 3 2''') == '''YES\n-2 -1", "solution('''1\n5\n5 1 2 4 3''') == '''YES\n5 1 -2 -4 -3'''\n\n# check the performance of solution\nimport timeit\n\nprint(timeit.timeit(stmt=solution, number=100000))", "solution(open(\"tests/task_5_input.txt\").read()) == open(\"tests/task_5_output.txt\").read()", "solution('''\n3\n3\n1 2 3\n3\n1 3 2\n2\n2 1\n''') == '''\nYES\n-1 -2 -3\nYES\n-1 3 -2\nNO\n'''\n\n# check if the given solution is valid\ndef check_solution(stdin_lines, stdout_lines):\n    # check if the output contains an answer\n    assert len(stdout_lines) == 2\n\n    # check if the answer is correct\n    if stdout_lines[0] == 'NO':\n        return True\n\n    # convert all the elements to ints\n    array = [int(num) for num in stdout_lines[1].split()]\n\n    # checks if the size of the array is correct\n    assert len(array) == int(stdin_lines[1])\n\n    # checks if the elements of the array are correct\n    assert all(1 <= num <= len(array) for num in array)\n\n    # checks if the array is bipartite\n    assert all(array[i] < array[j] or array[i] == -array[j] for i in range(len(array)) for j in range(i + 1, len(array)))\n\n    return True\n\n# check the correctness of solution for random permutations\nfrom random import randint\n\n", "solution(\"input\") == \"output\"", "solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness of solution\nassert solution(stdin) == stdout\n \n# check the correctness", "solution(\"\"\"\n\"\"\"\n) == \"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n\"\"\"\n) == \"\"", "solution(\"1\\n1\\n1\") == \"YES\\n1\", \"test 1 failed\"\nassert solution(\"3\\n3 1 2\\n\") == \"YES\\n-3 -1 2\", \"test 2 failed\"\nassert solution(\"2\\n2 1\\n\") == \"NO\", \"test 3 failed\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"YES\\n-1 -2 -3 -4 -5\", \"test 4 failed\"\nassert solution(\"5\\n5 4 3 2 1\\n\") == \"YES\\n5 4 3 2 1\", \"test 5 failed\"\n\nprint(\"All tests passed successfully\")", "solution('''\n3\n3\n1 2 3\n3\n3 2 1\n3\n1 2 3\n''') == '''\nYES\n-1 -2 -3\nYES\n3 2 1\nNO\n'''"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop"], "sum_logprob": [-14.444752357999999, -31.72749993484, -25.660449577500003, -13.464406746700005, -15.155278885000001, -43.31998880065001, -16.718204454000002, -21.899176139019993, -90.09272222160003, -24.477362217500005, -182.9871662364951, -40.230806859359994, -36.48539917861003, -12.399547217000002, -6.387441148, -36.201331813340005, -125.16631900238701, -25.782481254849994, -11.205797500699997, -157.15146734842403, -8.77697064, -15.635140784269998, -72.80323290686898, -19.0123362001, -5.408214481, -142.41404407861685, -80.45463124400005, -19.702192556549978, -12.258697347, -38.75071430413999, -40.071165977849994, -18.76506863916, -101.375475462964, -107.27149329101994, -43.211222843569985, -13.126479630999999, -116.45935727909004, -14.454498772399997, -23.52330962296, -32.5646703205, -21.7700616928, -94.52373138439302, -39.34470088598, -18.371585613180006, -153.10481208368975, -7.921987479999999, -17.672808064034008, -14.419116563800003, -46.42954214706601, -16.801051878929997], "mean_logprob": [-0.534990828074074, -0.3916975300597531, -0.5031460701470588, -0.3639028850459459, -1.3777526259090909, -0.442040702047449, -1.5198367685454546, -0.20277014943537036, -0.45965674602857143, -0.4294274073245614, -0.6099572207883167, -0.4147505861789691, -0.36853938564252525, -0.3999853940967742, -0.45624579628571427, -0.4469300223869136, -0.41722106334129, -0.5371350261427084, -0.3112721527972222, -0.5238382244947467, -1.09712133, -0.28953964415314815, -0.2877598138611423, -0.40451779149148936, -0.6009127201111111, -0.4747134802620567, -0.7811129246990292, -0.0656739751885, -1.1144270315454545, -0.3202538372242975, -0.3852996728639423, -0.37530137278319997, -0.3379182515432133, -0.3575716443034, -0.38581448967473214, -0.5707165056956521, -0.3881978575969667, -0.37062817365128203, -0.5600788005466667, -0.5088229737578125, -0.6596988391757576, -0.31507910461464333, -0.6147609513434374, -0.574112050411875, -0.5103493736123, -0.880220831111111, -0.058909360213446664, -0.49721091599310346, -0.31160766541655033, -0.32943238978294115]}
{"prompt": "'''\nFor a sequence of strings [t_1, t_2, ..., t_m], let's define the function f([t_1, t_2, ..., t_m]) as the number of different strings (including the empty string) that are subsequences of at least one string t_i. f([]) = 0 (i. e. the number of such strings for an empty sequence is 0).\n\nYou are given a sequence of strings [s_1, s_2, ..., s_n]. Every string in this sequence consists of lowercase Latin letters and is sorted (i. e., each string begins with several (maybe zero) characters a, then several (maybe zero) characters b, ..., ends with several (maybe zero) characters z).\n\nFor each of 2^n subsequences of [s_1, s_2, ..., s_n], calculate the value of the function f modulo 998244353.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 23) \u2014 the number of strings.\n\nThen n lines follow. The i-th line contains the string s_i (1 \u2264 |s_i| \u2264 2 \u22c5 10^4), consisting of lowercase Latin letters. Each string s_i is sorted.\n\nOutput\n\nSince printing up to 2^{23} integers would be really slow, you should do the following:\n\nFor each of the 2^n subsequences (which we denote as [s_{i_1}, s_{i_2}, ..., s_{i_k}]), calculate f([s_{i_1}, s_{i_2}, ..., s_{i_k}]), take it modulo 998244353, then multiply it by k \u22c5 (i_1 + i_2 + ... + i_k). Print the XOR of all 2^n integers you get.\n\nThe indices i_1, i_2, ..., i_k in the description of each subsequences are 1-indexed (i. e. are from 1 to n).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n2\na\naa\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\naa\naaa\nbb\n\"\"\") == \"12\"\nassert solution(\"\"\"\n3\na\nb\nc\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1\nab\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\naa\naaa\naaaa\naaab\n\"\"\") == \"36\"\nassert solution(\"\"\"\n3\nab\nabcd\nc\n\"\"\") == \"20\"\nassert solution(\"\"\"\n3\nab\nabc\nabcd\n\"\"\") == \"30\"\nassert solution(\"\"\"\n3\na\nab\nabc\n\"\"\") == \"6\"\nassert solution(\"\"\"\n6\na\nab\nabc\nabcd\nabcde\nabcdef\n\"\"\") == \"330\"\nassert solution(\"\"\"\n6\nab\nabc\nabcd\nabcde\nabcdef\nabcdefg\n\"\"\") == \"540\"\nassert solution(\"\"\"\n5\nab\nabc\nabcd\nabcde\nabcdef\n\"\"\") == \"210\"\nassert solution(\"\"\"\n4\nab\nabc\nabcd\nabcde\n\"\"\") == \"90\"\nassert solution(\"\"\"\n3\nab\nabc\nabcd\n\"\"\") == \"30\"\nassert solution(\"\"\"\n2\nab\nabc", "solution('''\n2\nab\ncd\n''') == '''\n7\n'''\n\n# get input from stdin\nlines = [line.strip() for line in stdin]\n\n# get the value of n\nn = int(lines[0])\n\n# get the values of s_i\ns = lines[1:]\n\n# find all subsequences\nsubsequences = [[]]\nfor i in range(1, n + 1):\n    for j in range(len(subsequences)):\n        new_subsequence = list(subsequences[j])\n        new_subsequence.append(i)\n        subsequences.append(new_subsequence)\n\n# calculate all values of f\ntotal = 0\nfor subsequence in subsequences:\n    if len(subsequence) == 0:\n        continue\n    values = []\n    for i in subsequence:\n        value = 0\n        if len(values) == 0:\n            value = 1\n        else:\n            for j in range(len(values) - 1, -1, -1):\n                if values[j] == s[i - 1][0]:\n                    value = j + 2\n                    break\n        values.append(value)\n    value = sum(values)\n    for i in range(1, len(sub", "solution('''\n3\nabc\na\na\n''') == '4'\n\n# check for solution speed\n\nimport time\nfrom random import randint, choice\nfrom string import ascii_lowercase\n\nn = 10\nstdin = str(n) + '\\n'\n\nfor i in range(n):\n    s = ''\n    x = randint(1, n)\n    while x > 0:\n        s += choice(ascii_lowercase)\n        x -= 1\n    stdin += s + '\\n'\n\nstart = time.time()\nsolution(stdin)\nend = time.time()\n\nassert (end - start) < 5, 'You are too slow. You need to work a little more'", "solution('''\n1\nx\n''') == '0'\nassert solution('''\n4\na\nab\nbc\nc\n''') == '45'\nassert solution('''\n3\na\nb\nab\n''') == '13'\nassert solution('''\n3\na\nab\nb\n''') == '13'\nassert solution('''\n2\na\nab\n''') == '1'\nassert solution('''\n5\na\nb\nc\nd\ne\n''') == '0'\nassert solution('''\n5\na\nab\nac\nad\nae\n''') == '21'\nassert solution('''\n3\na\nb\nba\n''') == '15'\nassert solution('''\n3\na\nb\nac\n''') == '15'\nassert solution('''\n3\na\nab\nac\n''') == '9'\nassert solution('''\n4\na\nb\nab\nabc\n''') == '45'\nassert solution('''\n4\na\nb\nab\nabc\nabcd\n''') == '93'\nassert solution('''\n6\na\nb\nc\nab\nac\nbc\n''') == '141'\nassert solution('''\n7\na\nb", "solution(\"\"\"2\na\nb\n\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"5\na\nab\nab\nabd\nabc\n\"\"\") == \"\"\"1\"\"\"\nassert solution(\"\"\"4\na\nab\nabc\nabc\n\"\"\") == \"\"\"6\"\"\"\nassert solution(\"\"\"1\naaaa\n\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"4\na\nab\nabc\nabd\n\"\"\") == \"\"\"7\"\"\"\nassert solution(\"\"\"4\na\nb\nc\nd\n\"\"\") == \"\"\"15\"\"\"\nassert solution(\"\"\"4\na\naa\naaa\naaaa\n\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"4\na\nab\nba\nba\n\"\"\") == \"\"\"10\"\"\"\nassert solution(\"\"\"10\na\naa\nab\nab\nac\nac\nac\nac\nac\nac\n\"\"\") == \"\"\"10\"\"\"\nassert solution(\"\"\"10\na\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\n\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"10\na\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\n\"\"\") == \"\"\"0\"\"\"\nassert solution(\"\"\"10\na\nab\nac\nac\nac\nac\nac\nac\nac\nac\nac\n\"\"\") == \"\"\"16\"\"\"\nassert", "solution(\"\"\"3\nabc\ncde\nxyz\"\"\") == '6'\nassert solution(\"\"\"2\nab\nba\"\"\") == '6'\nassert solution(\"\"\"3\nab\nba\nab\"\"\") == '0'\nassert solution(\"\"\"4\ncaa\naab\naba\nbab\"\"\") == '10'\nassert solution(\"\"\"2\nac\nac\"\"\") == '2'\nassert solution(\"\"\"1\nabc\"\"\") == '1'\nassert solution(\"\"\"5\nab\nbc\nac\nbd\nbe\"\"\") == '80'\nassert solution(\"\"\"5\nabcd\nabc\nefgh\nab\nbd\"\"\") == '280'\nassert solution(\"\"\"6\nxyz\nab\nab\nab\nab\nab\"\"\") == '0'\nassert solution(\"\"\"7\na\na\na\na\na\na\na\"\"\") == '0'\nassert solution(\"\"\"23\nabcdefghijklmnopqrst\nabcdefghijklmnopqrst\nabcdefghijklmnopqrst\nabcdefghijklmnopqrst\nabcdefghijklmnopqrst\nabcdefghijklmnopqrst\nabcdefghijklmnopqrst\nabcdefghijklmnopqrst\nabcdefgh", "solution('''\n5\nacb\nad\nbca\nbcd\nd\n''') == '''\n0\n'''\nassert solution('''\n5\nacb\nad\nbca\nbcd\nd\n''') == '''\n0\n'''\nassert solution('''\n5\nacb\nad\nbca\nbcd\nd\n''') == '''\n0\n'''\nassert solution('''\n5\nacb\nad\nbca\nbcd\nd\n''') == '''\n0\n'''\nassert solution('''\n5\nacb\nad\nbca\nbcd\nd\n''') == '''\n0\n'''\nassert solution('''\n5\nacb\nad\nbca\nbcd\nd\n''') == '''\n0\n'''\nassert solution('''\n5\nacb\nad\nbca\nbcd\nd\n''') == '''\n0\n'''\nassert solution('''\n5\nacb\nad\nbca\nbcd\nd\n''') == '''\n0\n'''\nassert solution('''\n5\nacb\nad\nbca\nbcd\nd\n''') == '''\n0\n'''\nassert solution('''\n5\nacb\nad\n", "solution('''\n3\naba\nbac\ncab\n''') == '17'\nassert solution('''\n1\na\n''') == '0'\nassert solution('''\n2\naa\nab\n''') == '0'\nassert solution('''\n6\na\na\na\na\na\na\n''') == '131072'\nassert solution('''\n4\naz\nax\nay\naa\n''') == '0'\nassert solution('''\n1\nabcdefghijklmnopqrstuvwxyz\n''') == '0'\nassert solution('''\n4\na\na\na\naa\n''') == '0'\nassert solution('''\n8\na\na\nb\nb\nc\nc\nd\nd\n''') == '2621440'\nassert solution('''\n8\na\nb\nc\nd\ne\nf\ng\nh\n''') == '2621440'\nassert solution('''\n5\na\na\naa\naa\naaa\n''') == '0'\nassert solution('''\n23\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\n", "solution(\"\"\"\n\"\"\"\n) == \"\"\"\n\"\"\"", "solution('''\n2\nab\nabc\n''') == '4'\n\nassert solution('''\n3\nabc\nabc\nabc\n''') == '20'\n\nassert solution('''\n1\na\n''') == '0'\n\nassert solution('''\n1\nab\n''') == '2'\n\nassert solution('''\n1\nabc\n''') == '6'\n\nassert solution('''\n2\nab\nac\n''') == '6'\n\nassert solution('''\n2\nab\nacd\n''') == '8'\n\nassert solution('''\n3\nab\nac\nacd\n''') == '14'\n\nassert solution('''\n3\nabc\nabcd\nabcde\n''') == '44'\n\nassert solution('''\n3\nabce\nabcd\nabcde\n''') == '60'\n\nassert solution('''\n3\nabce\nabcd\nabd\n''') == '32'\n\nassert solution('''\n4\nabce\nabcd\nabd\nab\n''') == '36'\n\nassert solution('''\n4\nabce\nabcd\nabde\nabe\n''') == '68'\n\nassert solution('''\n4\nabce\nabcd", "solution(problem) == correct_answer", "solution(\"\"\"\n2\naabb\nbbaa\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n2\naabb\nabab\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3\naabb\nabab\nabba\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n1\na\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\nab\nba\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\nab\nba\nab\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n3\na\na\na\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\naa\naa\naa\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6\nxhczmjs\nxjhezm\nzmjhe\nmhjez\nmhjezx\nzmjhe\n\"\"\") == \"35\"\n\nassert solution(\"\"\"\n1\naaa\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\nab\nab\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\naba\nbab\nbaa\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n5\nb\na\na\nb\nb\n\"\"\") == \"5\"\n\nassert solution(\"\"\"", "solution(r'''\n2\nabc\naxz\n''') == r'''\n13\n'''\n\nassert solution(r'''\n3\na\naa\naab\n''') == r'''\n15\n'''\n\nassert solution(r'''\n5\na\nba\nbda\nce\ndfe\n''') == r'''\n20\n'''\n\nassert solution(r'''\n9\naa\nabb\nbab\nbbb\nbcc\nccc\ncdd\nddd\nddf\n''') == r'''\n232\n'''\n\nassert solution(r'''\n2\na\nb\n''') == r'''\n4\n'''\n\nassert solution(r'''\n3\na\nb\nc\n''') == r'''\n14\n'''\n\nassert solution(r'''\n4\na\nb\nc\nd\n''') == r'''\n44\n'''\n\nassert solution(r'''\n5\na\nb\nc\nd\ne\n''') == r'''\n134\n'''\n\nassert solution(r'''\n6\na\nb\nc\nd\ne\nf\n''') == r'''\n404\n'''\n\nassert solution(r'''\n7\na\nb\nc\n", "solution('''\n3\nabab\nabac\nac\n''') == '12'\n\nassert solution('''\n3\nabc\nabc\nabc\n''') == '1'\n\nassert solution('''\n5\naaa\naa\na\nb\nc\n''') == '125'\n\nassert solution('''\n4\nabac\nac\nacd\nace\n''') == '35'\n\nassert solution('''\n4\nabac\nac\nacd\nace\n''') == '35'\n\nassert solution('''\n3\na\nb\nc\n''') == '3'\n\nassert solution('''\n3\naaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaa\n''') == '0'\n\nassert solution('''\n1\naaaaaaaaaaaaaaaaaaaa\n''') == '0'\n\nassert solution('''\n1\na\n''') == '0'\n\n# Stress testing for testing modulo 998244353\n# for _ in range(10**4):\n#     n = randint(1, 100)\n#     print(n)\n#     for _ in range(n):\n#         print(''.join(choice(ascii_lowercase) for _ in range(randint(1, 50))))\n", "solution('''\n1\na\n''') == '0'\nassert solution('''\n2\na\nb\n''') == '3'\nassert solution('''\n3\na\nb\nc\n''') == '12'\nassert solution('''\n5\na\nb\nc\nd\ne\n''') == '225'\nassert solution('''\n3\nab\nbc\nca\n''') == '111'\nassert solution('''\n4\nab\nbc\nca\nac\n''') == '148'\nassert solution('''\n4\nab\nbc\nca\nacb\n''') == '228'\nassert solution('''\n5\nab\nbc\nca\nac\nacb\n''') == '334'\nassert solution('''\n2\nabab\nabcd\n''') == '60'\nassert solution('''\n3\nabab\nabcd\ndcba\n''') == '139'\nassert solution('''\n4\nabab\nabcd\ndcba\nadcba\n''') == '228'\nassert solution('''\n3\nabc\nabc\nabc\n''') == '111'\nassert solution('''\n3\nabc\nab\nab\n''') == '81'\nassert solution('''\n3\na\n", "solution(\"\"\"\n3\na\naa\naaa\n\"\"\") == \"33554432\"\n\nassert solution(\"\"\"\n1\nz\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2\na\nb\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n2\nab\nab\n\"\"\") == \"18\"\n\nassert solution(\"\"\"\n2\nab\nabc\n\"\"\") == \"9\"\n\nassert solution(\"\"\"\n5\na\nb\nc\nab\nac\n\"\"\") == \"14\"\n\nassert solution(\"\"\"\n3\na\nb\nc\n\"\"\") == \"13\"\n\nassert solution(\"\"\"\n3\na\nab\nabc\n\"\"\") == \"20\"\n\nassert solution(\"\"\"\n3\na\nab\ncab\n\"\"\") == \"27\"\n\nassert solution(\"\"\"\n3\na\nab\nc\n\"\"\") == \"13\"\n\nassert solution(\"\"\"\n3\nabc\nabc\nabc\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n4\na\nb\nc\nd\n\"\"\") == \"19\"\n\nassert solution(\"\"\"\n4\na\nab\nac\nabc\n\"\"\") == \"32\"\n\nassert solution(\"\"\"\n4\na\nab\nac\nba\n\"\"\") == \"27\"\n\nassert solution(\"", "solution(\"\"\"\n3\na\nbc\ncde\n\"\"\") == \"237\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\naaaa\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\na\nb\nc\nd\n\"\"\") == \"4374\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\naaa\nabc\nabc\nabc\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n4\na\na\na\na\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\nabc\nabc\nabc\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\nab\nab\nab\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\nab\nba\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\nab\nab\nab\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\nbc\nbc\nbc\n\"\"\") == \"0\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\nbc\nbc\nbc\n\"\"\") == \"0\"", "solution(\"\"\"3\na\nab\nabc\"\"\") == \"\"\"1\n1\n3\n3\n3\n3\n7\n7\n7\n15\n15\n15\n15\n15\n31\n31\n31\n31\n31\n31\n63\n63\n63\n63\n63\n63\n63\n127\n127\n127\n127\n127\n127\n127\n127\n255\n255\n255\n255\n255\n255\n255\n255\n255\n511\n511\n511\n511\n511\n511\n511\n511\n511\n511\n1023\n1023\n1023\n1023\n1023\n1023\n1023\n1023\n1023\n1023\n1023\n2047\n2047\n2047\n2047\n2047\n2047\n2047\n2047\n2047\n2047\n2047\n2047\n4095\n4095\n4095\n4095\n4095\n4095\n4095\n4095\n4095\n4095\n4095\n4095\n8191\n8191\n8191\n8191\n8191\n8191\n8191\n8191\n8191\n8191\n8191\n8191\n8191\n16383\n16383\n16383\n16383\n16383\n16383\n16383\n16383\n16383\n16383\n16383\n16", "(solution('''\\\n0\n''') == '')\nassert (solution('''\\\n1\nabc\n''') == '')\nassert (solution('''\\\n2\nabacaba\nz\n''') == '')\nassert (solution('''\\\n3\nabacaba\nabacab\nabac\n''') == '')\nassert (solution('''\\\n5\nbaa\nbba\nbab\nba\nabaaab\n''') == '')\n\n# get the input data\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n    with open('output.txt', 'w') as f:\n        f.write(solution(stdin))", "solution(\"\"\"\\\n1\naaaaa\n\"\"\") == '10'\nassert solution(\"\"\"\\\n4\nab\nab\nab\nab\n\"\"\") == '38'\nassert solution(\"\"\"\\\n4\nab\nbc\ncd\nde\n\"\"\") == '76'\nassert solution(\"\"\"\\\n4\naa\nbb\ncc\ndd\n\"\"\") == '44'\nassert solution(\"\"\"\\\n4\nbc\nbc\nbc\nbc\n\"\"\") == '38'\nassert solution(\"\"\"\\\n4\naaaa\nbbbb\ncccc\ndddd\n\"\"\") == '166'\nassert solution(\"\"\"\\\n4\nabcd\nbcde\ncdef\ndefg\n\"\"\") == '178'\nassert solution(\"\"\"\\\n5\naaaaa\nbbbbb\nccccc\nddddd\neeeee\n\"\"\") == '486'\nassert solution(\"\"\"\\\n6\naaaaaa\nbbbbbb\ncccccc\ndddddd\neeeeee\nffffff\n\"\"\") == '1022'\nassert solution(\"\"\"\\\n7\naaaaaaa\nbbbbbbb\nccccccc\nddddddd\neeeeeee\nfffffff\nggggggg\n\"\"\") == '2054'\nassert solution(\"\"\"\\\n8\naaaaaaaa\nbbbbbbbb\ncccccccc\ndd", "solution(example) == output\n\ndef to_list(stdin: str) -> [str]:\n    '''Parse the input string'''\n    return [i for i in stdin.split('\\n') if i != '']\n\n# check to_list\nassert to_list(example) == ['1', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\ndef to_numbers(stdin: [str]) -> [int]:\n    '''Return the first number of the input'''\n    return int(stdin[0])\n\n# check to_numbers\nassert to_numbers(to_list(example)) == 1\n\ndef to_substrings(stdin: [str]) -> [str]:\n    '''Return the substrings of the input'''\n    return stdin[1:]\n\n# check to_substrings\nassert to_substrings(to_list(example)) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',", "solution('''\n2\nab\nac\n''') == '1'\n\nassert solution('''\n3\nab\nac\nbc\n''') == '4'\n\nassert solution('''\n4\nab\nac\nbc\ncd\n''') == '12'\n\nassert solution('''\n5\nab\nac\nbc\ncd\nce\n''') == '18'\n\nassert solution('''\n5\nab\nac\nbc\ncd\nde\n''') == '22'\n\nassert solution('''\n6\nab\nac\nbc\ncd\nde\nef\n''') == '36'\n\nassert solution('''\n7\nab\nac\nbc\ncd\nde\nef\nfg\n''') == '62'\n\nassert solution('''\n8\nab\nac\nbc\ncd\nde\nef\nfg\ngh\n''') == '105'\n\nassert solution('''\n9\nab\nac\nbc\ncd\nde\nef\nfg\ngh\nhi\n''') == '176'\n\nassert solution('''\n10\nab\nac\nbc\ncd\nde\nef\nfg\ngh\nhi\nij\n''') == '294'\n\nassert solution('''\n11\nab\nac\nbc\ncd\nde\nef\nfg\ngh", "solution('''3\na\nb\nc''') == '1'\nassert solution('''1\na''') == '1'\nassert solution('''2\na\nb''') == '2'\nassert solution('''5\na\nab\nabc\nabcd\nabcde''') == '9'\nassert solution('''5\naaaa\naaab\naaac\naaad\naaae''') == '7'\nassert solution('''5\naaaa\nbaaa\ncaaa\ndaaa\neaaa''') == '1'\nassert solution('''5\naaaa\nbaaa\ncaaa\ndaaa\neaaa''') == '1'\nassert solution('''23\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv''') == '244102659'\nassert solution('''4\nsstt\nsstt\nsstt\nsstt''') == '18440'\nassert solution('''4\naaaa\nbbbb\ncccc\ndddd''') == '0'\nassert solution('''4\naaaa\nbbbb\ncccc\ndddd''') == '0'\nassert solution('''4", "solution('''\n5\na\nb\nc\nac\nacb\n''') == '''\n1315394965\n'''\nassert solution('''\n5\na\nab\nabcd\nad\naf\n''') == '''\n1896629704\n'''\nassert solution('''\n3\nabb\nabcd\nb\n''') == '''\n1870621398\n'''\nassert solution('''\n2\nabc\nabc\n''') == '''\n0\n'''\nassert solution('''\n1\nabc\n''') == '''\n3\n'''\nassert solution('''\n4\na\nb\nc\nd\n''') == '''\n104342389\n'''\nassert solution('''\n5\na\nb\nc\nd\ne\n''') == '''\n1257193073\n'''\nassert solution('''\n2\naa\na\n''') == '''\n3\n'''\nassert solution('''\n1\na\n''') == '''\n1\n'''\nassert solution('''\n2\nabc\nbcd\n''') == '''\n16\n'''\nassert solution('''\n2\na\nb\n''') == '''\n3\n'''\nassert solution('''\n", "solution('''\n4\nabc\nabd\nba\nbab\n''') == '''\n14\n'''\n\nassert solution('''\n1\na\n''') == '''\n1\n'''\n\nassert solution('''\n3\na\naa\na\n''') == '''\n5\n'''\n\nassert solution('''\n2\nab\nac\n''') == '''\n5\n'''\n\nassert solution('''\n23\na\nb\nc\nd\naa\nab\nac\nad\nba\nbb\nbc\nbd\nca\ncb\ncc\ncd\nda\ndb\ndc\ndd\naaaa\n''') == '''\n32637\n'''\n\nassert solution('''\n3\nab\nb\nab\n''') == '''\n4\n'''\n\nassert solution('''\n4\na\nb\nc\nd\n''') == '''\n4\n'''\n\nassert solution('''\n4\nab\nbc\ncd\nde\n''') == '''\n20\n'''\n\nassert solution('''\n4\na\na\na\na\n''') == '''\n3\n'''\n\nassert solution('''\n3\nab\nbc\nac\n''') == '''\n5\n'''\n\n", "(solution('2\\ns\\nt') == '6')\nassert (solution('2\\nab\\nba') == '0')\nassert (solution('3\\na\\nb\\nc') == '19')\nassert (solution('6\\nabcdef\\nabcdf\\nabcde\\nabc\\nab\\na') == '48')\nassert (solution('5\\na\\nb\\nc\\nd\\ne') == '20')\nassert (solution('23\\na\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk\\nl\\nm\\nn\\no\\np\\nq\\nr\\ns\\nt\\nu\\nv\\nw\\nx') == '20')", "solution('''2\nabcd\nabce''') == '23'\nassert solution('''5\na\nabc\nabcde\nabcdeg\nabcdefgh''') == '33554432'\nassert solution('''2\na\naa''') == '2'\nassert solution('''3\nab\nabc\nabcd''') == '13'\nassert solution('''3\nacbc\nabacbc\nbcacbac''') == '52224'\nassert solution('''4\nh\nhl\nhls\nhlsg''') == '31'\nassert solution('''5\na\nab\nabc\nabcd\nabcde''') == '589824'\nassert solution('''5\nb\nbc\nbcd\nbcde\nbcdef''') == '589824'\nassert solution('''5\nc\ncd\ncde\ncdef\ncdefg''') == '589824'\nassert solution('''5\nd\nde\ndef\ndefg\ndefgh''') == '589824'\nassert solution('''5\ne\nef\nefg\nefgh\nefghi''') == '589824'\nassert solution('''5\nf\nfg\nfgh\nfghi\nfghij''') ==", "solution(test_stdin) == test_answer\n\n# check for large number of strings\n\n# check for large string length\n\n# check for large number of symbols in a string", "solution('''\n2\nabc\ndef\n''') == '12'\n\n# get the input data\ninput_data = open('input.txt', 'r')\n\n# process the data\noutput_data = solution(input_data.read())\n\n# open the output file\nout_file = open('output.txt', 'w')\n\n# write the data to output file\nout_file.write(output_data)\n\n# close files\nout_file.close()\ninput_data.close()", "solution(\"\"\"3\nab\nad\ncd\n\"\"\") == \"\"\n\nassert solution(\"\"\"3\na\na\naa\n\"\"\") == \"\"\n\nassert solution(\"\"\"3\naaaa\naaaa\naaaa\n\"\"\") == \"\"\n\nassert solution(\"\"\"3\nab\nabc\nabcd\n\"\"\") == \"\"\n\nassert solution(\"\"\"1\nabcdefghijklmnopqrstuvwxyz\n\"\"\") == \"\"\n\n# print solution\ns = \"\"\"3\nab\nad\ncd\n\"\"\"\n\nsolution(s)", "solution(\"\"\"2\nab\nb\"\"\") == \"1\"\nassert solution(\"\"\"2\nab\na\"\"\") == \"3\"\nassert solution(\"\"\"3\na\nab\nabcd\"\"\") == \"26\"\nassert solution(\"\"\"5\na\nb\nc\nd\ne\"\"\") == \"254\"\nassert solution(\"\"\"6\nabcd\nabc\nabd\nabdc\nbc\nbcde\"\"\") == \"1327\"\nassert solution(\"\"\"8\nab\nba\nbc\ncb\ncd\ndc\nda\nac\"\"\") == \"67\"\nassert solution(\"\"\"23\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\"\"\") == \"96299987\"\n\n# read the input from file\nwith open(\"stdin.txt\", \"r\") as f:\n    stdin = f.read()\n    print(solution(stdin))", "solution(sample1) == str(sample_out1)\nassert solution(sample2) == str(sample_out2)\n\n# read the input\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\n# solve the problem\nout = solution(stdin)\n\n# output\nwith open('output.txt', 'w') as f:\n    f.write(out)", "solution(\"2\\ncat\\nmouse\") == \"4\", \"test #1 failed\"\nassert solution(\"3\\ncat\\ncatastrophe\\ncattleship\") == \"19\", \"test #2 failed\"\nassert solution(\"3\\ndesert\\npop\\ntop\") == \"16\", \"test #3 failed\"\nassert solution(\"3\\nabc\\nab\\nabcdefghijklmnopqrstuvwxyz\") == \"77\", \"test #4 failed\"\nassert solution(\"23\\nkwdkogcgyrrtljnapwiuyz\\nsyfsvcytzfyrmpmykz\\ntxsyicbsxvuvgdxoay\\nqhdhjwdfkhvzjbnqjq\\ntxtljyjiqix\\nkzeqxqapjaf\\nqasifwvhcx\\njtwtppkzt\\ncsgvxkxnsnynmjnckaw\\nkvbvztltaihqldh\\nuxbxkqizvqxqxzllok\\njalwzuvvjfzkscrjhg\\nvkjtjqiijezvxzukl\\ncljwzawhjsfb", "solution('''\n3\na\nab\nabc\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n5\nb\ncd\ncef\nd\nef\n''') == '0'\n\n# submit the code to the judge system\nimport sys\nif len(sys.argv) == 2:\n    filename = sys.argv[1].strip()\n    with open(filename+'.in', 'r') as infile:\n        lines = infile.readlines()\n    stdin = ''.join(lines).strip()\n    with open(filename+'.out', 'w') as outfile:\n        outfile.write(solution(stdin))\n    print('done')\nelse:\n    print('expecting 1 command line arguments')", "solution('''\n3\na\nb\nc\n''') == '14'\n\n# check the correctness of solution\nassert solution('''\n4\na\nb\nc\nd\n''') == '36'\n\n# check the correctness of solution\nassert solution('''\n7\naaa\naab\nbbc\nbac\nacb\ncac\ncbc\n''') == '2628'\n\n# check the correctness of solution\nassert solution('''\n9\naaa\naab\nbbc\nbac\nacb\ncac\ncbc\nbcc\ncca\n''') == '3948'\n\n# check the correctness of solution\nassert solution('''\n1\na\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n2\na\nb\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n4\naab\nab\nbb\nb\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n5\nab\nab\nab\nab\nab\n''') == '12'\n\n# check the correctness of solution\nassert solution('''\n7\nab\nab\nab\nab\nab\nab\nab\n''') == '14'\n\n#", "solution(\"\"\"\n3\naa\nab\nabac\n\"\"\") == \"\"\"\n775131552\n\"\"\"\n\nassert solution(\"\"\"\n2\na\nb\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n3\nabb\nabb\nabb\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n3\nbab\nabc\nbac\n\"\"\") == \"\"\"\n14348907\n\"\"\"\n\nassert solution(\"\"\"\n3\nbab\nabc\nbac\n\"\"\") == \"\"\"\n14348907\n\"\"\"\n\nassert solution(\"\"\"\n3\nbab\nabc\nbac\n\"\"\") == \"\"\"\n14348907\n\"\"\"\n\n# test for speed:\nimport timeit\n\nprint(\n    timeit.timeit(\n        # here goes the solution function call\n        # setup parameter: the input string\n        setup=f\"\"\"\nfrom __main__ import solution\nstdin = '''\n{stdin}\n'''\n\"\"\"\n    )\n)", "str(solution('''2\na\na\n''')) == '3'\nassert str(solution('''2\nab\nb\n''')) == '4'\nassert str(solution('''5\nab\nabc\na\nc\na\n''')) == '145'\nassert str(solution('''2\na\nab\n''')) == '8'\nassert str(solution('''3\na\nab\nc\n''')) == '44'\nassert str(solution('''3\na\nb\nc\n''')) == '8'\nassert str(solution('''1\nab\n''')) == '5'\nassert str(solution('''1\na\n''')) == '2'\nassert str(solution('''1\nb\n''')) == '2'\nassert str(solution('''1\nc\n''')) == '2'\nassert str(solution('''1\nz\n''')) == '2'\nassert str(solution('''1\nza\n''')) == '3'\nassert str(solution('''1\naz\n''')) == '3'\nassert str(solution('''1\nazb\n''')) == '4", "solution(\"\") == \"\", \"empty input\"\nassert solution(\"1\\na\") == \"0\", \"sample 1\"\nassert solution(\"2\\na\\nb\") == \"2\", \"sample 2\"\nassert solution(\"4\\na\\nb\\nc\\nd\") == \"14\", \"sample 3\"\nassert solution(\"5\\na\\nb\\nc\\nd\\ne\") == \"50\", \"sample 4\"\nassert solution(\"10\\na\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\") == \"2834\", \"sample 5\"\nassert solution(\"23\\na\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk\\nl\\nm\\nn\\no\\np\\nq\\nr\\ns\\nt\\nu\\nv\\nw\\nx\\ny\\nz\") == \"1301032086\", \"sample 6\"", "solution('''\n1\nab\n''') == '0'\n\nassert solution('''\n2\nab\nxy\n''') == '4'\n\nassert solution('''\n4\nca\ncb\ncc\ncd\n''') == '10'\n\nassert solution('''\n4\nca\ncb\ncc\ncde\n''') == '10'\n\nassert solution('''\n7\nca\ncb\ncc\ncd\nce\ncf\ncg\n''') == '10'\n\nassert solution('''\n23\nca\ncb\ncc\ncd\nce\ncf\ncg\nch\nci\ncj\nck\ncl\ncm\ncn\nco\ncp\ncq\ncr\ncs\nct\ncu\ncv\ncw\n''') == '10'\n\n# print the solution\n# print(solution())\n\n'''\n# solution 1\n\ndef solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    res = 0\n    for i in range(1, n + 1):\n        comb = list(itertools.combinations(words, i))\n        for tup in comb:\n            temp = set()\n            for word in tup:\n               ", "solution(\"\") == \"\", \"testcase 0 failed\"\nassert solution(\"\") == \"\", \"testcase 1 failed\"\nassert solution(\"\") == \"\", \"testcase 2 failed\"\nassert solution(\"\") == \"\", \"testcase 3 failed\"\nassert solution(\"\") == \"\", \"testcase 4 failed\"\nassert solution(\"\") == \"\", \"testcase 5 failed\"\nassert solution(\"\") == \"\", \"testcase 6 failed\"\nassert solution(\"\") == \"\", \"testcase 7 failed\"\nassert solution(\"\") == \"\", \"testcase 8 failed\"\nassert solution(\"\") == \"\", \"testcase 9 failed\"\nassert solution(\"\") == \"\", \"testcase 10 failed\"\nassert solution(\"\") == \"\", \"testcase 11 failed\"\nassert solution(\"\") == \"\", \"testcase 12 failed\"\nassert solution(\"\") == \"\", \"testcase 13 failed\"\nassert solution(\"\") == \"\", \"testcase 14 failed\"\nassert solution(\"\") == \"\", \"testcase 15 failed\"\nassert solution(\"\") == \"\", \"testcase 16 failed\"\nassert solution(\"\") == \"\", \"testcase 17 failed\"\nassert solution(\"\") == \"\", \"testcase 18 failed\"\nassert solution(\"\") == \"\", \"testcase 19 failed\"\nassert solution(\"\") == \"\", \"testcase 20 failed\"\nassert solution(\"\") == \"\",", "solution(test_string) == 'test'\n\n# get input\nstdin = ''\nwith open('input.txt', 'r') as file:\n    stdin = file.read()\n\n# output the result\nwith open('output.txt', 'w') as file:\n    file.write(solution(stdin))", "solution('''\n2\nab\ncd\n''') == '6'\n\nassert solution('''\n4\nb\na\nc\nd\n''') == '64'\n\nassert solution('''\n4\nb\nb\nc\nd\n''') == '126'\n\n# get the input from user and run the solution\ndef main():\n    from sys import stdin\n    print(solution(stdin.read()))\n\nif __name__ == '__main__':\n    main()", "solution(\"\"\"\n3\nabc\nbcd\nbdf\n\"\"\") == \"\"\"\n60\n\"\"\"", "solution('''\n3\na\nb\nc\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n3\nab\nabc\nab\n''') == '30'\n\n# check the correctness of solution\nassert solution('''\n2\nab\nab\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n4\nab\nabc\nabcd\nabc\n''') == '49'\n\n# check the correctness of solution\nassert solution('''\n3\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n''') == '285909843'\n\n# check the correctness of solution\nassert solution('''\n3\nan\nani\nanimesh\n''') == '1668686'\n\n# check the correctness of solution\nassert solution('''\n3\na\na\na\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n2\naa\naa\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n2\nb\na\n''') == '3'\n\n# check the", "solution(\"\"\"3\na\nb\nab\n\"\"\") == \"\"\"\"\"\"", "solution('''\n1\na\n''') == '0'\nassert solution('''\n2\nab\nbc\n''') == '6'\nassert solution('''\n3\naca\nbcd\nbc\n''') == '19073'\nassert solution('''\n3\naaa\nbbb\nccc\n''') == '90'\nassert solution('''\n2\nabc\ndef\n''') == '6'\nassert solution('''\n3\nabc\ndef\nghi\n''') == '0'\nassert solution('''\n3\nabc\ndef\nabc\n''') == '90'\nassert solution('''\n3\nabc\ndef\nabcdef\n''') == '90'\nassert solution('''\n3\nabc\nabcd\nabcde\n''') == '90'\nassert solution('''\n3\naaa\naa\na\n''') == '90'\nassert solution('''\n3\nabc\nabc\nabc\n''') == '90'\nassert solution('''\n23\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\n''') == '90'\nassert solution('''\n23\n", "solution('''\n2\nab\nabc\n''') == '0'\n\nassert solution('''\n3\na\naa\naaa\n''') == '0'\n\nassert solution('''\n2\nabac\nacb\n''') == '6'\n\nassert solution('''\n2\nab\nca\n''') == '6'\n\nassert solution('''\n3\na\naa\naaa\n''') == '0'\n\nassert solution('''\n2\nabab\nab\n''') == '12'\n\nassert solution('''\n2\nabc\nabc\n''') == '18'\n\nassert solution('''\n3\nab\naba\ncba\n''') == '6'\n\nassert solution('''\n2\naaab\nab\n''') == '12'\n\nassert solution('''\n2\nabbbbbbbbbbbbbbbbb\nbbbbbbbbbbbbbbbbb\n''') == '18'\n\nassert solution('''\n2\nab\nab\n''') == '12'\n\nassert solution('''\n3\naaa\naaaaa\naaa\n''') == '0'\n\nassert solution('''\n2\na\nb\n''') == '0'\n\nassert solution('''\n3\nabbb\n", "solution('''2\nab\ncd''') == '4'\nassert solution('''3\nabc\ndef\ngh''') == '160'\nassert solution('''4\nabcd\nefgh\nijkl\nmnop''') == '0'\nassert solution('''23\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv''') == '0'", "solution('''\n1\nasdf\n''') == '6'\n\nassert solution('''\n3\nabc\nab\nabc\n''') == '58'\n\nassert solution('''\n2\naa\nbb\n''') == '36'\n\nassert solution('''\n4\na\nb\nc\nd\n''') == '256'\n\nassert solution('''\n7\nab\nab\nab\nab\nab\nab\nab\n''') == '495'\n\nassert solution('''\n2\naa\na\n''') == '7'\n\nassert solution('''\n10\na\na\na\na\na\na\na\na\na\na\n''') == '96798'\n\nassert solution('''\n10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\n''') == '62414'\n\nassert solution('''\n8\nab\nab\nab\nab\nab\nab\nab\nab\n''') == '2857'\n\nassert solution('''\n7\nab\nab\nab\nab\nab\nab\nab\n''') == '2857'\n\nassert solution('''\n8\nabc\nabc\nabc\nabc\nabc\nabc\nabc\nabc\n''')", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution"], "finish_reason": ["length", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "length"], "sum_logprob": [-127.57600105697995, -131.75966762400594, -102.98776790003498, -129.44829824659902, -136.34684505328693, -162.3694854374899, -41.45952125755501, -122.19061864973001, -9.90020367, -107.33816065312418, -12.199770489999999, -183.83383903550998, -119.151531317094, -165.16116388550608, -143.0321431508501, -142.14599631851698, -109.00896316959388, -35.59267354584095, -93.49774824385607, -112.717624825126, -101.71794809396799, -65.49285827244805, -132.67465091769301, -223.80197202173872, -133.7415626499505, -81.358906127498, -150.35079704705788, -49.158950237799985, -57.559541550244994, -74.83213273461001, -158.29615366958393, -40.59067413114999, -845.3190691458899, -67.18507792799737, -133.20808136862743, -148.514683403174, -109.99079789029699, -76.70417160714001, -136.93448914241398, -17.024210420458015, -34.83528442937999, -66.24480869761996, -24.4597720534, -142.58313349549098, -15.583660625000002, -127.15631761877253, -146.96401438791702, -42.73957631763999, -159.3933147865039, -13.66019990274102], "mean_logprob": [-0.4252533368566, -0.43919889208002, -0.5885015308573429, -0.43149432748866334, -0.4544894835109567, -0.5412316181249667, -0.13819840419185, -0.40730206216576664, -0.8250169725, -0.35779386884374664, -1.3555300544444444, -0.6127794634517, -0.39717177105698, -0.5505372129516867, -0.47677381050283335, -0.47381998772839, -0.36336321056531334, -0.11864224515280333, -0.5373433807118161, -0.3757254160837533, -0.33905982697989334, -0.21830952757482666, -0.44224883639231, -0.7460065734057953, -0.4458052088331683, -0.47858180074998824, -0.5011693234901934, -1.1989987862878049, -0.48779272500207627, -0.6083913230456097, -0.6882441463894956, -0.41419055235867347, -2.8177302304863, -0.36914877982416155, -0.444026937895425, -0.6513801903647982, -0.36663599296765664, -0.3741666907665366, -0.45644829714138, -0.05674736806819333, -0.45835900564973686, -0.5613966838781356, -1.0634683501478261, -0.47527711165163666, -0.8657589236111111, -0.423854392062575, -0.48988004795972334, -0.36529552408239313, -0.5313110492883467, -0.045533999675803336]}
{"prompt": "'''\nThere are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n3 4 5\n2 3 4\n''') == 'YES\\nNO'\n\n# check the performance of solution\nsolution('''\n3\n3 4 5\n2 3 4\n1234567890 9876543210 123456789\n''')", "(solution('''\n4\n10 10 10\n10 10 9\n10 10 8\n10 10 7\n''')) == '''\nYES\nYES\nNO\nNO\n'''", "solution(\"\"\"4\n2 1 3\n2 3 1\n1 1 1\n4 1 1\"\"\") == \\\n\"\"\"YES\nYES\nNO\nNO\"\"\"", "solution('''\n2\n2 3 2\n5 4 1\n''') == '''\nYES\nNO\n'''", "solution('''\n3\n1 2 3\n3 2 1\n1 1 1\n''') == '''\nYES\nYES\nNO\n'''\n\n# load the data\ninput = open('input.txt').read()\n\n# run the solution\nprint(solution(input))", "solution('''\n3\n1 1 1\n2 3 6\n2 4 5\n''') == '''\nYES\nNO\nYES\n'''", "solution(\"\") == \"\", \"Test 1\"\nassert solution(\"\") == \"\", \"Test 2\"\nassert solution(\"\") == \"\", \"Test 3\"\nassert solution(\"\") == \"\", \"Test 4\"\nassert solution(\"\") == \"\", \"Test 5\"\nassert solution(\"\") == \"\", \"Test 6\"\nassert solution(\"\") == \"\", \"Test 7\"\nassert solution(\"\") == \"\", \"Test 8\"\nassert solution(\"\") == \"\", \"Test 9\"\nassert solution(\"\") == \"\", \"Test 10\"\nassert solution(\"\") == \"\", \"Test 11\"\nassert solution(\"\") == \"\", \"Test 12\"\nassert solution(\"\") == \"\", \"Test 13\"\nassert solution(\"\") == \"\", \"Test 14\"\nassert solution(\"\") == \"\", \"Test 15\"\nassert solution(\"\") == \"\", \"Test 16\"\nassert solution(\"\") == \"\", \"Test 17\"\nassert solution(\"\") == \"\", \"Test 18\"\nassert solution(\"\") == \"\", \"Test 19\"\nassert solution(\"\") == \"\", \"Test 20\"\nassert solution(\"\") == \"\", \"Test 21\"\nassert solution(\"\") == \"\", \"Test 22\"\nassert solution(\"\") == \"\", \"Test 23\"\nassert solution(\"\") == \"\", \"Test 24\"\nassert solution(\"\") == \"\", \"Test 25\"\nassert", "solution('''\n''') == ''\nassert solution('''\n''') == ''\nassert solution('''\n''') == ''", "solution('''\n1\n1 2 3\n''') == 'YES'\n\n# submit for real\nstdin = sys.stdin.read()\nprint(solution(stdin))", "solution('''\n1\n1 1 1\n''') == 'YES'\n\n# test speed\nimport timeit\nprint(timeit.timeit(lambda: solution('''\n1\n1 1 1\n'''), number=10))", "solution(\"\") == \"\", \"empty input\"\nassert solution(\"abcde\") == \"bcdea\", \"1st example\"\nassert solution(\"fghij\") == \"fghij\", \"2nd example\"\nassert solution(\"fghijklmnopqrstuvwxyz\") == \"nopqrstuvwxyzabcdefghijklm\", \"3rd example\"\nassert solution(\"fghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"NOANSWER\", \"4th example\"\nassert solution(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"NOANSWER\", \"5th example\"\nassert solution(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgh", "solution('''\n\n''') == ''", "solution('''\n4\n6 6 9\n1 1 1\n6 3 3\n2 2 6\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution(\"\") == \"\"\n\n# check the performance of solution\nassert solution(\"\") == \"\"", "solution(r'''3\n1 2 3\n3 1 2\n3 2 1''') == r'''YES\nYES\nYES'''", "solution(\"\") == \"YES\"\nassert solution(\"\") == \"NO\"\nassert solution(\"\") == \"YES\"\nassert solution(\"\") == \"NO\"\n\n# upload to test\ntest(solution, ['tests/test.txt'])", "solution(\"1\\n3 3 3\") == \"YES\"\nassert solution(\"1\\n2 4 8\") == \"NO\"\nassert solution(\"2\\n1 2 3\\n7 7 7\") == \"YES\\nYES\"\nassert solution(\"1\\n100000000 100000000 100000000\") == \"YES\"\nassert solution(\"1\\n2 3 3\") == \"YES\"\nassert solution(\"1\\n2 2 2\") == \"YES\"\nassert solution(\"1\\n3 2 2\") == \"YES\"\nassert solution(\"1\\n2 3 2\") == \"YES\"\nassert solution(\"1\\n2 2 3\") == \"YES\"\nassert solution(\"1\\n3 2 4\") == \"NO\"\nassert solution(\"1\\n4 2 3\") == \"NO\"\nassert solution(\"1\\n2 4 3\") == \"NO\"\nassert solution(\"1\\n2 3 4\") == \"NO\"\nassert solution(\"1\\n5 5 5\") == \"YES\"\nassert solution(\"1\\n6 6 5\") == \"YES\"\nassert solution(\"1\\n5 6 6\") == \"YES\"\nassert solution(\"1\\n7 7 7\") == \"YES\"\nassert solution(\"1\\n1 2 3\") == \"NO\"\nassert solution(\"1\\n1 3 2\") == \"NO\"\nassert solution(\"1\\", "solution(\"3\\n1 1 1\\n1 2 1\\n1 1 2\") == \"YES\\nYES\\nNO\"", "solution(\"Yes\") in [\"Yes\", \"YES\", \"yes\", \"yEs\"]", "solution(\"1\\n1 2 3\") == \"NO\"\nassert solution(\"1\\n4 3 2\") == \"YES\"\nassert solution(\"1\\n5 5 1\") == \"YES\"\nassert solution(\"1\\n1000000000 1000000000 1000000000\") == \"YES\"\nassert solution(\"1\\n999999999 999999999 999999999\") == \"NO\"\nassert solution(\"1\\n1 1 1\") == \"NO\"\nassert solution(\"1\\n1000000001 1000000001 1000000001\") == \"NO\"\nassert solution(\"1\\n1000000001 1000000002 1000000003\") == \"YES\"\nassert solution(\"1\\n1000000003 1000000003 1000000003\") == \"YES\"\nassert solution(\"1\\n1000000003 1000000004 1000000004\") == \"YES\"\nassert solution(\"1\\n1000000002 1000000002 1000000002\") == \"NO\"\nassert solution(\"1\\n1000000002 1000000003 1000000004\") == \"YES\"\nassert solution(\"1\\n1000000004 1000000004 1000000004\") == \"YES\"\nassert solution(\"1\\n1000000004 1000000005 1000000005\") == \"YES\"\nassert solution(\"1\\n1000000001 1000000002 1000000003\") == \"YES\"\nassert solution(\"1\\n1000000002 1000000003", "solution(\"3\\n1 2 3\\n1 1 1\\n2 3 3\") == \"YES\\nNO\\nYES\"", "solution('''\n5\n5 2 4\n5 2 5\n5 2 3\n5 2 1\n5 2 0\n''') == '''\nYES\nNO\nYES\nNO\nNO\n'''\nassert solution('''\n3\n3 1 2\n3 2 1\n3 1 1\n''') == '''\nYES\nYES\nNO\n'''\nassert solution('''\n2\n7 1 3\n7 3 1\n''') == '''\nYES\nYES\n'''\n\n# stress testing\nfrom random import randint, shuffle\nfrom time import time\n\nwhile True:\n    t = randint(1, 1 * 10 ** 3)\n    l1 = randint(1, 10 ** 8)\n    l2 = randint(1, 10 ** 8)\n    l3 = randint(1, 10 ** 8)\n    L = [l1, l2, l3]\n    shuffle(L)\n    s = '{}\\n{} {} {}\\n'.format(t, L[0], L[1], L[2])\n    print(s)\n    t1 = time()\n    print(solution(s))\n    t2 = time()\n    print('solution took', t2 - t1, 'seconds')\n    print()", "solution('''\n4\n1 2 3\n1 1 1\n1 1 2\n1 3 3\n''') == '''\nYES\nNO\nYES\nNO\n'''\n\n# check the performance of solution\nimport timeit\n\nprint(timeit.timeit('solution(''\\'\\n4\\n1 2 3\\n1 1 1\\n1 1 2\\n1 3 3\\n\\'\\'\\')', number=100, globals=globals()))", "solution('''\n1\n1 2 3\n''') == 'YES', 'test case 1'\n\nassert solution('''\n3\n1 1 1\n1 2 3\n1 2 4\n''') == '''\nYES\nYES\nNO\n''', 'test case 2'\n\n# get input for testing\n\nT = int(input())\nfor _ in range(T):\n    sticks = list(map(int, input().split()))\n    print(solution(sticks))", "solution('''\n4\n1 2 3\n1 4 1\n2 1 4\n2 3 3\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution('''\n4\n1 2 3\n1 4 5\n2 2 2\n2 1 3\n''') == '''\nYES\nNO\nYES\nNO\n'''", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution('''\n3\n1 2 3\n1 1 1\n1 1 2\n''') == '''\nYES\nNO\nYES\n'''\n# one of the testcases below will fail (use `-s` argument to see)\n# assert solution('''\n# 3\n# 1 2 3\n# 1 1 1\n# 1 1 2\n# ''') == '''\n# YES\n# NO\n# YES\n# '''", "solution('''4\n4 2 4\n4 2 3\n4 2 5\n4 2 8''') == '''YES\nNO\nYES\nNO'''", "solution(\"\"\"1\n1 1 2\"\"\") == \"\"\"YES\"\"\"\nassert solution(\"\"\"2\n1 2 2\n1 2 3\"\"\") == \"\"\"YES\nNO\"\"\"\n\nif __name__ == \"__main__\":\n    testcases = int(input())\n    for _ in range(testcases):\n        print(solution(input()))", "solution('''\n4\n2 1 3\n3 3 3\n4 5 6\n4 3 2\n''') == '''\nYES\nYES\nNO\nYES\n'''", "\"YES\" == solution(\"5\\n1 1 1\\n1 1 2\\n2 3 3\\n2 3 4\\n1 2 3\")\n\nassert \"YES\" == solution(\"2\\n1 2 3\\n2 2 1\")\n\nassert \"NO\" == solution(\"1\\n1 2 3\")", "solution('''\n4\n1 1 1\n2 2 3\n2 3 3\n2 3 4\n''') == '''\nYES\nYES\nNO\nYES\n'''", "solution('''\n4\n1 2 3\n4 4 4\n4 5 6\n10 9 11\n''') == '''\nYES\nYES\nYES\nNO\n'''", "solution('''\n3\n1 2 3\n1 2 1\n3 2 1\n''') == '''\nYES\nNO\nYES\n'''", "solution('''\n4\n1 2 3\n1 1 1\n1 2 4\n3 4 5\n''') == '''\nYES\nNO\nYES\nNO\n'''\n\n# test performance\nimport timeit\nimport random\n\nn = 1000\nsticks = [random.randint(1, 10**8) for _ in range(n)]\n\nprint(f'{n} random sticks (1 \u2264 l_i \u2264 10^8)')\nprint(timeit.timeit(lambda: solution(f'{n}\\n{sticks}'), number=1))", "solution('''2\n2 2 2\n1 2 3''') == '''YES\nNO'''", "solution('''\n1\n1 2 3\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 1\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 4\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 5\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n2 3 7\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n7 2 3\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution(''", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n\n# check the performance of solution\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution('''\n1\n1 2 3\n''') == 'NO'\n\nassert solution('''\n3\n3 3 4\n3 4 5\n3 4 6\n''') == 'YES\\nYES\\nNO'", "solution('''\n3\n1 2 3\n1 1 1\n5 5 3\n''') == '''\nYES\nNO\nYES\n'''", "solution('''\n1\n1 3 3\n''') == 'YES'\n\nassert solution('''\n1\n1 1 1\n''') == 'NO'\n\nassert solution('''\n1\n1 3 1\n''') == 'NO'\n\nassert solution('''\n3\n3 6 1\n4 4 4\n1 3 3\n''') == 'YES\\nNO\\nYES'", "solution('''\n1\n1 1 2\n''') == 'YES'\n\n# stress testing\nfrom random import randint\nfrom time import time\n\nwhile True:\n    x = randint(1, 10**4)\n    length = randint(1, 10**8)\n    print(f\"{x}\")\n    test = \"1 \" * x + f\"{length}\"\n    print(test)\n    begin = time()\n    res = solution(test)\n    end = time()\n    print(res)\n    print(f\"{end - begin}\")", "solution(\"\"\"\n3\n8 12 12\n8 10 12\n12 12 12\n\"\"\") == \"\"\"\nYES\nNO\nYES\n\"\"\"", "solution('''\n3\n1 2 3\n2 2 2\n2 3 3\n''') == '''\nYES\nYES\nNO\n'''\n\n# show the input-output relations for debugging\nimport random\nprint('Input')\nprint('''\n2\n1 2 3\n''')\nprint('Output')\nprint('''\nYES\n''')\n\n# submit the code to the judge system\nimport subprocess\nprocess = subprocess.Popen(['/usr/bin/python3', 'solution.py'],\n                           stdin=subprocess.PIPE,\n                           stdout=subprocess.PIPE,\n                           )\nstdin = '''\n3\n1 2 3\n2 2 2\n2 3 3\n'''\nstdout, stderr = process.communicate(stdin.encode())\nprint(stdout.decode())", "solution(\"1\\n1 2 3\") == \"NO\"\nassert solution(\"1\\n1 1 2\") == \"YES\"\nassert solution(\"2\\n2 3 5\\n1 2 3\") == \"YES\\nNO\"\n \n```", "solution(\"\") == \"\", \"testcase 00\"\nassert solution(\"\") == \"\", \"testcase 01\"\nassert solution(\"\") == \"\", \"testcase 02\"\nassert solution(\"\") == \"\", \"testcase 03\"\nassert solution(\"\") == \"\", \"testcase 04\"\nassert solution(\"\") == \"\", \"testcase 05\"\nassert solution(\"\") == \"\", \"testcase 06\"\nassert solution(\"\") == \"\", \"testcase 07\"\nassert solution(\"\") == \"\", \"testcase 08\"\nassert solution(\"\") == \"\", \"testcase 09\"\nassert solution(\"\") == \"\", \"testcase 10\"\nassert solution(\"\") == \"\", \"testcase 11\"\nassert solution(\"\") == \"\", \"testcase 12\"\nassert solution(\"\") == \"\", \"testcase 13\"\nassert solution(\"\") == \"\", \"testcase 14\"\nassert solution(\"\") == \"\", \"testcase 15\"\nassert solution(\"\") == \"\", \"testcase 16\"\nassert solution(\"\") == \"\", \"testcase 17\"\nassert solution(\"\") == \"\", \"testcase 18\"\nassert solution(\"\") == \"\", \"testcase 19\"\nassert solution(\"\") == \"\", \"testcase 20\"\nassert solution(\"\") == \"\", \"testcase 21\"\nassert solution(\"\") == \"\", \"testcase 22\"\nassert solution", "solution('''\n1\n1 2 3\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n1 1 2\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n2 3 5\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n1 2 1\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n5 10 5\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n5 5 5\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n10 10 20\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n15 20 25\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n10 10 1\n''') == 'YES'\n\n# check the correctness of solution\nassert solution('''\n1\n5 10 15\n''') == 'NO'\n\n# check the correctness of solution\nassert solution('''\n1\n30 35 5\n''') == 'YES'\n\n# check the correctness of solution\nassert solution(''", "solution(r'''\n1\n1 1 1\n''') == 'YES'\n\nassert solution(r'''\n2\n1 2 3\n1 1 1\n''') == 'NO\\nYES'\n\nassert solution(r'''\n1\n8 8 8\n''') == 'YES'\n\nassert solution(r'''\n3\n1 2 4\n4 6 4\n4 6 8\n''') == 'NO\\nYES\\nYES'\n\nassert solution(r'''\n2\n100 100 100\n100 100 99\n''') == 'YES\\nNO'\n\nassert solution(r'''\n3\n1 2 3\n10 10 1\n10 1 10\n''') == 'NO\\nYES\\nYES'\n\n# test speed of solution\nfrom random import randint\nfrom time import time\nfrom typing import List, Tuple\n\ndef gen_test(N: int) -> Tuple[List[int], List[str]]:\n    test_list = []\n    ans_list = []\n    for _ in range(N):\n        l1 = randint(1, 100000000)\n        l2 = randint(1, 100000000)\n        l3 = randint(1, 100000000)\n        test_list.append(f'{l1} {l2} {l3}')", "solution(\"\") == \"\", \"empty line\"\n\n# check performance\nimport timeit\n\nprint(timeit.timeit(\n    \"print(solution('''\\n'''))\", \n    setup=r'''\nfrom __main__ import solution\n    ''', \n    number=10**2\n))"], "finish_reason": ["stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop"], "sum_logprob": [-44.22089815759999, -21.879112708300006, -28.5559659816, -18.629116559400003, -36.5703008585, -18.778662367899997, -16.228413088006985, -11.330209011940001, -25.182804816469996, -25.350820699070002, -66.69077376621998, -8.241302535, -29.331721809789993, -9.814691191000001, -19.172474779000005, -46.36687048260001, -89.72456805835401, -13.608019698840002, -17.011383371999997, -81.09402524572592, -16.86911392355, -131.45305507575202, -37.4163526535694, -51.66676456535998, -25.084477480249998, -22.020082593759998, -10.812721270190002, -68.64305844152497, -26.039729140599995, -32.31071619202, -25.29298697863, -46.29401010935401, -18.923783270299992, -23.501792053960006, -16.5785359694, -68.36042161897997, -12.714599141999999, -49.067568938008954, -15.698530379040003, -26.540344790015, -17.237857666399997, -44.769415316431406, -80.72039788278, -28.057887935799997, -70.57750707824998, -31.517700285289997, -19.451350402272006, -81.851017928479, -128.924466863769, -53.68132919052999], "mean_logprob": [-0.6700136084484849, -0.5209312549595239, -0.8158847423314286, -0.6653255914071429, -0.5626200132076923, -0.5523135990558824, -0.05409471029335666, -0.354069031623125, -0.572336473101591, -0.46092401271036365, -0.22230257922073332, -0.7492093213636364, -0.73329304524475, -0.4673662471904762, -0.59913983684375, -0.8430340087745455, -0.2990818935278467, -0.453600656628, -0.8953359669473684, -0.2703134174857533, -0.5623037974516667, -0.45172871160052236, -0.34326929039971926, -0.46546634743567566, -0.62711193700625, -0.550502064844, -0.15670610536507246, -0.68643058441525, -0.7233258094611111, -0.4142399511797436, -0.63232467446575, -0.6613430015622, -0.4730945817575, -0.587544801349, -0.4876039991, -0.5299257489843411, -0.52977496425, -0.16355856312669667, -0.10679272366693877, -0.510391245961827, -0.506995813717647, -0.4866240795264283, -0.6023910289759702, -0.9050931592193548, -0.3493935993972772, -0.5529421102682456, -0.06483783467424001, -0.27283672642826334, -0.42974822287923, -0.7157510558737333]}
{"prompt": "'''\nBerland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\n\n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(sample_input_str) == '''2\n2\n2 1\n1\n2\n1 2\n01\n'''\n# run my own test\n# create your own input\n# solve the problem\n# submit a solution", "solution(\"\"\"3\n3\n2 1 3\n010\n3\n1 2 3\n000\n3\n1 2 3\n110\"\"\") == \"\"\"2 1 3\n1 2 3\n1 3 2\"\"\", \"Example 1\"\nassert solution(\"\"\"1\n2\n1 2\n10\"\"\") == \"\"\"2 1\"\"\", \"Example 2\"\nassert solution(\"\"\"4\n4\n4 1 2 3\n0010\n4\n4 1 2 3\n0101\n3\n3 1 2\n101\n3\n3 1 2\n000\"\"\") == \"\"\"4 1 2 3\n4 1 2 3\n3 1 2\n3 1 2\"\"\", \"Example 3\"\n\n# input() is provided by HackerRank\nstdin = input()\nprint(solution(stdin))", "solution('''\n...\n''') == '''\n...\n'''\n\n# import python io library\nimport io\n\n# import current directory and parent directory to support more local imports\nimport os, sys\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n# import file input and output\nfrom utils.file_io import FileIO\nfile_io = FileIO()\n\n# read input file name\nfile_in = 'input.txt'\n\n# read output file name\nfile_out = 'output.txt'\n\n# open file to write output\nfout = open(file_out, 'w')\n\n# open file to read input\nfin = open(file_in, 'r')\n\n# read testcases\ntestcases = int(fin.readline())\n\n# read each testcase and solve it\nfor i in range(testcases):\n    # read input testcase\n    testcase = fin.readline()\n\n    # solve testcase\n    solution_ = solution(testcase)\n\n    # save output to file\n    file_io.write_file(fout, 'Case #{}: {}'.format(i+1, solution_))\n\n# close all files\nfin.close()\nfout", "solution(\"\"\"\n\"\"\") == \"\"\n\n# test #1\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #2\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #3\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #4\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #5\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #6\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #7\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #8\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #9\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #10\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #11\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #12\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #13\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #14\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #15\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #16\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #17\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test #18\nassert solution(\"\"\"\n\"\"\") == \"\"\n\n# test", "solution(\"\"\"\n3\n3\n1 2 3\n101\n5\n1 3 2 5 4\n00110\n6\n2 3 1 4 5 6\n110000\n\"\"\") == \"\"\"\nCase #1: 2 1 3\nCase #2: 2 3 1 5 4\nCase #3: 3 2 1 5 4 6\n\"\"\"\n\n# run tests\npytest .\n\n# check solution with cpp\n# g++ -o <name> <name>.cpp && ./<name>\n\n# compile with cpp\n# g++ -o <name> <name>.cpp\n\n# run solution\n# ./<name>", "solution('''3\n3\n1 2 3\n011\n3\n3 2 1\n011\n5\n1 2 3 4 5\n10000\n''') == '''3 1 2\n3 1 2\n1 2 3 4 5'''", "solution('''\n2\n3\n1 2 3\n001\n3\n3 2 1\n001\n''') == '''\n1 2 3\n3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2\n1 2\n11\n2\n2 1\n11\n''') == '''\n2 1\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n3\n1 2 3\n001\n3\n3 2 1\n001\n2\n1 2\n11\n2\n2 1\n11\n''') == '''\n1 2 3\n3 2 1\n2 1\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2 3 4 5\n11111\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n1 2 3 4 5\n11000\n''') == '''\n1 2 3 5 4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n5\n5 3 4 1 2\n11001\n5\n5 3 4 1 2\n01111\n''') == '''\n2 3 4 5 1\n2 3 4 5 1\n'''\n\n# check", "solution('''\n2\n4\n4 1 2 3\n0101\n3\n1 2 3\n100\n''') == '''\n1 2 3 4\n1 2 3\n'''\n\nassert solution('''\n2\n2\n1 2\n10\n2\n2 1\n01\n''') == '''\n2 1\n1 2\n'''", "solution('''\n1\n4\n1 2 3 4\n0101\n''') == '3 4 1 2'\n\n# check for large input\nassert solution('''\n1\n4\n1 2 3 4\n0001\n''') == '4 1 2 3'", "solution(\n    '''\n    1\n    4\n    1 2 3 4\n    1101\n    '''\n) == '''\n1 2 4 3\n'''\n\nassert solution(\n    '''\n    1\n    4\n    1 2 3 4\n    1111\n    '''\n) == '''\n1 2 3 4\n'''\n\nassert solution(\n    '''\n    1\n    4\n    1 2 3 4\n    0100\n    '''\n) == '''\n4 3 2 1\n'''\n\nassert solution(\n    '''\n    1\n    5\n    1 2 3 4 5\n    00101\n    '''\n) == '''\n4 3 5 2 1\n'''\n\nassert solution(\n    '''\n    1\n    6\n    2 3 4 5 6 1\n    011010\n    '''\n) == '''\n3 4 5 6 1 2\n'''\n\nassert solution(\n    '''\n    1\n    2\n    1 2\n    00\n    '''\n) == '''\n2 1\n'''\n\n# test passed\nprint('passed')", "solution('''\n    2\n    5\n    3 1 2 5 4\n    01010\n    5\n    2 1 3 5 4\n    01110\n''') == '''\n    2 1 4 3 5\n    2 1 4 5 3\n'''\n\n# check the performance of solution\nassert solution('''\n''') == '''\n'''\n\n'''\nThe run time for the above testcase is O(n)\n'''", "solution('''\n1\n4\n1 2 3 4\n1100\n''') == '''\n1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 3 2 1\n1100\n''') == '''\n4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n1 2 3 4\n0001\n''') == '''\n4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 1 2 3 4\n11010\n''') == '''\n5 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 1 2 3 4\n01111\n''') == '''\n1 2 3 4 5\n'''\n\n# put your tests here\nassert solution('''\n1\n6\n1 2 3 4 5 6\n111000\n''') == '''\n1 2 3 4 5 6\n'''\n\nassert solution('''\n1\n4\n4 3 2 1\n1110\n''') == '''\n4 3 2 1\n'''\n\nassert solution('''\n2\n4\n4 3 2 1\n1110\n4\n4 3 2 1\n1110\n''') ==", "solution(\"\") == \"\"", "(solution('''\n3\n3\n2 1 3\n110\n4\n1 2 3 4\n1100\n2\n1 2\n11\n''')) == '''\n1 2 3\n4 1 2 3\n1 2\n'''", "'1 2 3 4 5' == solution('''\n1\n5\n3 1 2 5 4\n11100\n''')\n\nassert '5 4 3 2 1' == solution('''\n1\n5\n1 2 3 4 5\n00000\n''')\n\nassert '10 9 8 7 6' == solution('''\n1\n5\n5 4 3 2 1\n01111\n''')\n\nassert '4 2 1 3 5' == solution('''\n1\n5\n1 3 2 4 5\n00110\n''')\n\nassert '2 5 4 3 1' == solution('''\n1\n5\n1 2 3 4 5\n00010\n''')\n\nassert '''5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1\n5 4 3 2 1''' == solution('''\n10\n5\n5 4 3 2 1\n01111\n5\n5 4 3 2 1\n00111\n5\n5 4 3 2 1\n00011\n5\n5 4 3 2 1\n00001\n5\n5 4 3 2 1\n00000\n5\n5 4 3 2 1\n11111\n5\n5 4 3 2 1\n11110", "solution('''\n4\n4\n4 1 2 3\n0001\n4\n1 2 3 4\n0000\n6\n2 4 6 1 3 5\n000011\n6\n1 6 2 5 3 4\n110000\n''') == '''\n3 1 2 4\n1 2 3 4\n6 1 2 3 4 5\n1 2 3 4 5 6\n'''", "(solution(r'''\n2\n3\n1 2 3\n101\n4\n4 3 2 1\n1010\n''')) == r'''\n2 1 3\n4 3 2 1\n'''", "\"expected outcome\" == solution(\"input\")\n\n# let's submit the solution\n#sh = submission.Submission('filename')\n#sh.submit_solution(solution, 'token')", "solution(\"\"\"\n1\n5\n5 1 2 4 3\n00110\n\"\"\") == \"\"\"\n2 3 1 5 4\n\"\"\", \"The solution is incorrect!\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5\n5 1 2 4 3\n01010\n\"\"\") == \"\"\"\n3 2 4 1 5\n\"\"\", \"The solution is incorrect!\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5\n3 2 4 1 5\n00000\n\"\"\") == \"\"\"\n5 4 3 2 1\n\"\"\", \"The solution is incorrect!\"\n\nprint(\"Congratulations! All tests have passed!\")", "solution('''\n1\n3\n2 1 3\n101\n''') == '''\n3 1 2\n'''\n\n# test cases:\n# 1\n# 2\n# 1 2\n# 01\n# 3\n# 2 1 3\n# 101\n# 4\n# 2 1 4 3\n# 1100\n# 5\n# 2 1 5 4 3\n# 00010\n# 5\n# 2 1 5 4 3\n# 00110\n# 5\n# 2 1 5 4 3\n# 10100\n# 5\n# 2 1 5 4 3\n# 10110\n# 5\n# 2 1 5 4 3\n# 11000\n# 5\n# 2 1 5 4 3\n# 11010\n# 5\n# 2 1 5 4 3\n# 11100\n# 5\n# 2 1 5 4 3\n# 11110\n# 6\n# 2 1 6 5 4 3\n# 000000\n# 6\n# 2 1 6 5 4 3\n# 000010\n# 6\n# 2 1 6 5 4 3\n# 000100\n# 6\n# 2 1 6 5 4 3\n# 000110\n# 6\n# 2 1 6 5 4 3\n# 001000\n# 6\n# 2 1 6 5 4 3\n# 001010\n# 6\n# 2 1 6 5 4 3\n# 001100\n# 6\n# 2 1 6 5 4 3\n#", "\"0\" == solution(\"\"\"1\n3\n1 2 3\n111\"\"\")\n\n# check the correctness of solution\nassert \"0\" == solution(\"\"\"1\n2\n1 2\n01\"\"\")\n\n# check the correctness of solution\nassert \"0\" == solution(\"\"\"1\n5\n1 3 2 5 4\n11100\"\"\")\n\n# check the correctness of solution\nassert \"0\" == solution(\"\"\"1\n4\n4 3 2 1\n0000\"\"\")\n\n# check the correctness of solution\nassert \"0\" == solution(\"\"\"1\n3\n3 2 1\n001\"\"\")\n\nassert \"0\" == solution(\"\"\"1\n3\n1 2 3\n101\"\"\")", "solution(\"\"\"3\n3\n1 2 3\n111\n3\n3 2 1\n000\n7\n2 4 3 1 5 7 6\n1111111\"\"\") == \"\"\"1 2 3\n1 2 3\n7 6 1 2 3 4 5\"\"\"", "solution('''1\n2\n2 1\n10''') == '2 1'\n\nassert solution('''1\n3\n1 2 3\n101''') == '3 1 2'\n\nassert solution('''1\n3\n3 2 1\n101''') == '3 1 2'\n\nassert solution('''1\n4\n1 2 3 4\n1101''') == '4 2 1 3'\n\nassert solution('''1\n4\n4 3 2 1\n1101''') == '4 1 2 3'\n\nassert solution('''1\n4\n1 3 2 4\n1101''') == '4 1 2 3'\n\nassert solution('''1\n5\n1 3 5 2 4\n10110''') == '5 3 1 2 4'\n\nassert solution('''1\n5\n5 3 1 2 4\n10110''') == '5 1 2 3 4'\n\nassert solution('''1\n10\n6 9 2 7 1 5 4 8 3 10\n0101110001''') == '10 7 5 3 1 2 4 6 8 9'\n\nassert solution('''1\n10\n10 1 9 2 8 3 7 4 6 5\n0101110001''') == '10 8 5 3 1 2 4 6 7 9'\n\nassert solution('''1\n10\n10", "solution('''\n3\n3\n1 2 3\n101\n2\n1 2\n11\n2\n2 1\n01\n''') == '''\n1 2 3\n2 1\n1 2\n'''", "solution('''\n1\n3\n1 2 3\n101\n''') == '''\n3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3\n3 2 1\n100\n3\n1 2 3\n010\n3\n1 2 3\n010\n''') == '''\n3 2 1\n1 2 3\n1 2 3\n'''", "solution('''\n2\n4\n4 1 2 3\n0001\n4\n4 1 2 3\n1100\n''') == '''\n1 2 3 4\n4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n2 4 6 8 10 1 3 5 7 9\n1011111100\n''') == '''\n1 2 3 4 5 6 7 8 9 10\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 3 1 2 4\n10001\n''') == '''\n2 3 4 5 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n3 1 2\n111\n''') == '''\n1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 3 2 1\n1100\n''') == '''\n4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 3 2 1\n1111\n''') == '''\n4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n4\n4 3 2 1\n1100\n3\n1 2 3\n111\n''') == '''\n4 3 2 1\n1 2", "solution(\"\"\"\n4\n4\n4 1 2 3\n0110\n4\n4 1 2 3\n1100\n4\n2 3 4 1\n1111\n5\n5 3 2 4 1\n11010\n\"\"\") == \"\"\"\n1 2 3 4\n1 2 3 4\n1 2 3 4\n3 4 5 1 2\n\"\"\"", "solution('''\n1\n4\n1 2 3 4\n0101\n''') == '''\n2 1 4 3\n'''\n\n# test with large inputs\nimport random\n\nn = 200000\ns = ''.join(random.choice('01') for _ in range(n))\np = [i for i in range(1, n+1)]\nrandom.shuffle(p)\nstdin = '''\n1\n{n}\n{p}\n{s}\n'''.format(n=n, p=' '.join(map(str, p)), s=s)\n\nsolution(stdin)", "solution(\"\") == \"\"", "solution(\"\"\"\n1\n5\n5 4 3 2 1\n01011\n\"\"\") == \"3 4 5 2 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3\n1 2 3\n010\n\"\"\") == \"2 1 3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1\n1\n1\n\"\"\") == \"1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n4\n4 3 2 1\n0001\n\"\"\") == \"1 2 3 4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5\n5 4 3 2 1\n10101\n\"\"\") == \"1 2 3 4 5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n3\n3\n1 2 3\n010\n2\n1 2\n11\n1\n1\n1\n\"\"\") == \"\"\"\n2 1 3\n1 2\n1\n\"\"\"", "solution('''5\n5\n5 3 2 4 1\n10101\n3\n3 2 1\n111\n3\n3 2 1\n110\n3\n3 2 1\n001\n3\n3 2 1\n101\n''') == '''5 4 3 2 1\n1 2 3\n1 3 2\n1 2 3\n2 3 1\n'''\n\n# test if input format is correct\ntry:\n    from collections import namedtuple\n    from unittest.mock import patch\n    \n    input_format = namedtuple('input_format', 'T q')\n    output_format = namedtuple('output_format', 'output')\n    \n    with patch('builtins.input', lambda: input_format(T=int(input()), q=input())):\n        assert solution('''5\n5\n5 3 2 4 1\n10101\n3\n3 2 1\n111\n3\n3 2 1\n110\n3\n3 2 1\n001\n3\n3 2 1\n101\n''') == '''5 4 3 2 1\n1 2 3\n1 3 2\n1 2 3\n2 3 1\n'''\nexcept AssertionError:\n    pass\nexcept Exception as e:\n    print(e)\n    print(\"Wrong input format! Follow instructions to provide input.\")", "solution('''\n2\n5\n5 4 3 2 1\n11010\n10\n1 2 3 4 5 6 7 8 9 10\n0010010001\n''') == '''\n2 3 4 5 1\n1 2 3 4 5 7 6 8 9 10\n'''", "solution('''\n1\n4\n1 3 2 4\n0110\n''') == '''\n2 1 4 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n7\n3 1 4 5 7 2 6\n0111111\n''') == '''\n1 2 3 4 5 6 7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 6 3 2 4 5\n000011\n''') == '''\n2 1 3 4 5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n1 6 3 2 4 5\n101010\n''') == '''\n6 1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n2 4 6 5 3 1\n110101\n''') == '''\n5 4 3 2 1 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n2 4 6 5 3 1\n011010\n''') == '''\n2 3 1 5 4 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n6\n2 4 6 5 3 1\n111111\n''') == '''\n1 2 3 4 5 6\n'''\n", "solution(\"\"\"1\n3\n1 2 3\n101\"\"\") == \"\"\"111\"\"\", \"testcase 1 failed\"\n\nassert solution(\"\"\"1\n2\n2 1\n10\"\"\") == \"\"\"11\"\"\", \"testcase 2 failed\"\n\nassert solution(\"\"\"1\n2\n1 2\n01\"\"\") == \"\"\"00\"\"\", \"testcase 3 failed\"\n\nassert solution(\"\"\"1\n3\n1 2 3\n011\"\"\") == \"\"\"111\"\"\", \"testcase 4 failed\"\n\nassert solution(\"\"\"1\n3\n1 2 3\n000\"\"\") == \"\"\"000\"\"\", \"testcase 5 failed\"\n\nassert solution(\"\"\"1\n4\n2 3 1 4\n1100\"\"\") == \"\"\"1001\"\"\", \"testcase 6 failed\"\n\nassert solution(\"\"\"1\n3\n3 1 2\n101\"\"\") == \"\"\"101\"\"\", \"testcase 7 failed\"\n\nassert solution(\"\"\"1\n2\n1 2\n10\"\"\") == \"\"\"11\"\"\", \"testcase 8 failed\"\n\nassert solution(\"\"\"1\n4\n4 3 2 1\n1100\"\"\") == \"\"\"1110\"\"\", \"testcase 9 failed\"\n\nassert solution(\"\"\"1\n2\n1 2\n01\"\"\") == \"\"\"00\"\"\", \"testcase 10 failed\"\n\nassert solution(\"\"\"1\n3\n3 1 2\n101\"\"\") == \"\"\"101\"\"\", \"test", "solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\", \"Solution is not correct\"\nassert solution(\"\") == \"\",", "solution(\"\"\"1\n5\n1 2 3 4 5\n01000\"\"\") == \"2 3 1 5 4\"\nassert solution(\"\"\"2\n3\n3 1 2\n110\n4\n1 2 3 4\n0101\"\"\") == \"3 1 2 4\\n2 3 1 4\"\nassert solution(\"\"\"1\n5\n1 2 3 4 5\n01010\"\"\") == \"2 3 1 5 4\"\nassert solution(\"\"\"2\n2\n1 2\n01\n5\n1 2 3 4 5\n11011\"\"\") == \"2 1\\n1 2 3 4 5\"\nassert solution(\"\"\"3\n3\n3 1 2\n000\n2\n1 2\n01\n1\n1\n1\"\"\") == \"1 2 3\\n1 2\\n1\"\nassert solution(\"\"\"1\n10\n1 2 3 4 5 6 7 8 9 10\n1111011101\"\"\") == \"2 3 1 5 4 7 6 8 10 9\"\nassert solution(\"\"\"1\n10\n1 2 3 4 5 6 7 8 9 10\n1101011101\"\"\") == \"2 3 1 5 4 7 6 8 10 9\"\nassert solution(\"\"\"2\n2\n1 2\n00\n5\n5 4 3 2 1\n00100\"\"\") == \"1 2\\n5 4 3 2 1\"\nassert solution(\"\"\"1\n5\n1 2 3", "solution('''\n1\n5\n1 3 2 5 4\n10101\n''') == '5 4 3 2 1'\n\nassert solution('''\n1\n6\n1 3 2 5 4 6\n101101\n''') == '6 5 4 3 2 1'\n\nassert solution('''\n1\n5\n5 4 3 2 1\n00100\n''') == '1 2 3 4 5'\n\nassert solution('''\n1\n6\n2 3 4 5 6 1\n000111\n''') == '1 2 3 4 5 6'\n\n# print to console the solution\nwith open('io/input.txt', 'r') as f:\n    t = int(f.readline())\n    for i in range(t):\n        n = int(f.readline())\n        p = list(map(int, f.readline().split()))\n        s = f.readline()\n        q = solution(n, p, s)\n        print(\"Case #{}: {}\".format(i+1, q))", "solution('''\n4\n4\n1 2 3 4\n0011\n3\n1 2 3\n110\n3\n3 2 1\n110\n4\n4 3 2 1\n0001\n''') == '''\n1 3 2 4\n2 1 3\n2 1 3\n4 1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 2 3\n111\n''') == '''\n1 2 3\n'''", "solution('''\n2\n4\n1 2 3 4\n1101\n4\n4 3 2 1\n0101\n''') == '''\n4 3 2 1\n1 2 3 4\n'''\n\n# get the input\nwith open('input.txt', 'r') as f:\n    # read the input\n    stdin = f.read()\n\n# run the solution with the input\nsolution(stdin)", "solution(__doc__) == '''\n6\n3\n2 1 3\n100\n1\n1\n1\n2\n2 1\n10\n2\n2 1\n11\n2\n2 1\n10\n5\n5 4 1 3 2\n10101\n1\n1\n1\n1\n1\n100000\n5\n5 4 1 3 2\n10001\n2\n2 3\n2 3\n2 3\n2\n\n'''.strip()", "solution('''5\n5\n5 4 3 2 1\n01100\n3\n3 2 1\n100\n3\n3 2 1\n010\n3\n3 2 1\n101\n3\n3 2 1\n001''') == '''4 5 3 2 1\n1 2 3\n1 3 2\n2 3 1\n3 2 1'''", "solution(\"\"\"1\n5\n1 2 3 4 5\n01010\"\"\") == \"1 3 2 5 4\"\n\n# check the correctness of solution\nassert solution(\"\"\"2\n4\n4 3 2 1\n0000\n4\n1 2 3 4\n1111\"\"\") == \"4 3 2 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"3\n4\n4 3 2 1\n0101\n5\n5 4 3 2 1\n11111\n3\n3 2 1\n101\"\"\") == \"3 2 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n6\n1 2 3 4 5 6\n111111\"\"\") == \"1 2 3 4 5 6\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n10\n10 9 8 7 6 5 4 3 2 1\n0101010101\"\"\") == \"1 3 2 5 4 7 6 9 8 10\"\n\n# check the correctness of solution\nassert solution(\"\"\"2\n4\n4 3 2 1\n0101\n4\n1 2 3 4\n1111\"\"\") == \"4 3 2 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"2\n4\n4 3 2 1\n0101\n4\n1 2 3 4\n1111\"\"\") == \"4 3 2 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"1", "solution('''\n2\n4\n4 1 2 3\n1100\n4\n4 1 2 3\n1110\n''') == '''\n3 1 2 4\n3 1 4 2\n'''\n\n# check if the given input is valid\nassert (__import__('sys').stdin.read() + '\\n').strip() == '''\n4\n4 1 2 3\n1100\n4\n4 1 2 3\n1110\n'''\n\n# check the value of n\nassert (__import__('sys').stdin.read() + '\\n').strip() == '''\n1\n1\n1\n1\n'''\n\n# check the permutation of p\nassert (__import__('sys').stdin.read() + '\\n').strip() == '''\n1\n3\n1 2 3\n111\n'''\n\n# check the correctness of s\nassert (__import__('sys').stdin.read() + '\\n').strip() == '''\n1\n4\n4 1 2 3\n1010\n'''\n\n# check the length of p and s\nassert (__import__('sys').stdin.read() + '\\n').strip() == '''\n1\n4\n4 1 2 3\n11\n'''\n\n# check the range of p\nassert (__import__('sys", "solution('''\\\n3\n4\n4 3 2 1\n0000\n4\n4 3 2 1\n0001\n4\n4 3 2 1\n1100\n''') == '''\\\n1 2 3 4\n1 2 3 4\n4 3 2 1\n'''\n\n# get input\nn = int(input())\nfor i in range(n):\n    input()\n    p = list(map(int, input().split()))\n    s = input()\n    print(solution('''\\\n{}\n{}\n{}\n'''.format(len(p), ' '.join(map(str, p)), s)))", "solution('''1\n3\n1 2 3\n010''') == '2 1 3'\n\nassert solution('''1\n5\n5 4 3 2 1\n10101''') == '5 4 3 2 1'\n\nassert solution('''2\n5\n5 4 3 2 1\n10101\n5\n1 2 3 4 5\n10101''') == '5 4 3 2 1'\n\nprint(\"passed all tests\")", "solution('''1\n2\n1 2\n10''') == '''2 1'''\n\n# test the runtime of solution\nimport timeit\nprint(timeit.timeit('solution(stdin)', setup='from __main__ import solution, stdin', number=1))\n\nfrom unittest import TestCase\nclass Test(TestCase):\n    def test1(self):\n        self.assertEqual(solution('''1\n2\n1 2\n10'''), '''2 1''')\n\n    def test2(self):\n        self.assertEqual(solution('''1\n2\n2 1\n10'''), '''1 2''')", "solution(\"\"\"\n2\n3\n1 2 3\n001\n3\n1 2 3\n100\n\"\"\") == \"\"\"\n2 1 3\n3 1 2\n\"\"\", \"Wrong!\"\n\nassert solution(\"\"\"\n1\n3\n1 2 3\n111\n\"\"\") == \"\"\"\n1 2 3\n\"\"\", \"Wrong!\"\n\nassert solution(\"\"\"\n1\n3\n3 2 1\n111\n\"\"\") == \"\"\"\n3 2 1\n\"\"\", \"Wrong!\"\n\n# read from stdin\nn = int(input())\nfor _ in range(n):\n    input()\n    p = list(map(int, input().split()))\n    s = input()\n    print(solution(f'{n}\\n{p}\\n{s}'))", "solution('''\n1\n5\n1 2 3 4 5\n01010\n''') == '''\n3 2 1 4 5\n'''\nassert solution('''\n1\n5\n1 2 3 4 5\n00000\n''') == '''\n1 2 3 4 5\n'''\nassert solution('''\n1\n5\n1 2 3 4 5\n11111\n''') == '''\n5 4 3 2 1\n'''\nassert solution('''\n1\n5\n1 2 3 4 5\n11000\n''') == '''\n4 3 2 1 5\n'''\nassert solution('''\n1\n5\n1 2 3 4 5\n01001\n''') == '''\n3 2 1 5 4\n'''\nassert solution('''\n2\n3\n1 2 3\n111\n4\n4 1 2 3\n0101\n''') == '''\n3 2 1\n1 2 3 4\n'''\nassert solution('''\n1\n4\n4 1 2 3\n0110\n''') == '''\n2 1 3 4\n'''\nassert solution('''\n1\n4\n1 2 3 4\n0110\n''') == '''\n3 2 1 4\n'''\nassert solution('''\n1\n4\n2 3 4 1\n0110\n''') == '''\n", "solution('''1\n4\n4 1 2 3\n0110''') == '''1 2 3 4'''\nassert solution('''1\n4\n1 4 2 3\n0110''') == '''1 3 2 4'''\nassert solution('''1\n8\n8 4 7 2 1 5 3 6\n10110100''') == '''1 2 3 4 5 6 7 8'''\nassert solution('''1\n8\n8 2 1 5 4 7 3 6\n11000001''') == '''1 2 3 4 5 6 7 8'''\nassert solution('''1\n8\n2 3 1 4 5 6 7 8\n00000000''') == '''1 2 3 4 5 6 7 8'''\nassert solution('''1\n8\n1 2 3 4 5 6 7 8\n11111111''') == '''1 2 3 4 5 6 7 8'''\nassert solution('''1\n8\n8 7 6 5 4 3 2 1\n11111111''') == '''1 2 3 4 5 6 7 8'''\nassert solution('''1\n8\n3 1 5 2 4 6 7 8\n01010101''') == '''1 2 3 4 5 6 7 8'''\nassert solution('''1\n8\n1 2 3 4 5 6 7 8\n11111110''') == '''", "solution('''\n3\n3\n1 2 3\n11\n3\n3 2 1\n10\n3\n1 2 3\n11\n''') == '''\n2 1 3\n1 2 3\n2 1 3\n'''"], "finish_reason": ["stop", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "length", "length", "stop"], "sum_logprob": [-73.794693818, -90.37725490794001, -161.96839071161696, -26.12817673995598, -105.74774320562999, -27.621347023699997, -78.668246710929, -33.681676176139995, -34.0650183226, -84.72491568713644, -78.61076119080002, -84.56800351320359, -6.14245833, -30.3039570415, -90.79139987440603, -48.64107357089999, -27.330910448500006, -48.46680068215001, -64.70557328019004, -69.16809676179817, -61.20600986347997, -39.4447266693, -110.94431290422204, -19.493416677299997, -36.030565392469995, -94.380591898219, -43.23066703539, -51.82772216853, -6.14245828, -64.72128221174, -135.58099523339905, -36.5067608405, -101.48792560759418, -89.33641569723494, -19.008461076829988, -127.14407081210499, -99.39360772502401, -49.30004563576001, -45.82158204293, -79.07118129170003, -41.97003920262, -89.41925647664402, -113.34349833224881, -48.925058483479944, -43.42757378491402, -56.46701127681499, -59.97500649923327, -83.17366983248002, -109.48105690275793, -25.115513854800003], "mean_logprob": [-1.4191287272692308, -0.5379598506425, -0.53989463570539, -0.08709392246652, -0.7607751309757554, -0.5211574910132075, -0.26222748903643, -0.4158231626683951, -0.5584429233213115, -0.322147968392154, -0.7632112736970874, -0.281893345044012, -1.023743055, -0.5611843896574075, -0.30263799958135335, -0.5931838240353658, -0.5815087329468085, -1.1271348995848838, -0.46218266628707144, -0.23056032253932734, -0.3974416224901299, -0.7304579012833333, -0.36981437634740666, -0.40611284744375, -0.4048378133985393, -0.31460197299406334, -0.5922009182930137, -0.3624316235561538, -1.0237430466666666, -0.3067359346527962, -0.45959659401152203, -0.588818723233871, -0.3382930853586473, -0.29778805232411665, -0.06336153692276666, -0.4238135693736833, -0.4176202005253109, -0.4650947701486792, -0.4723874437415464, -0.7828829830861386, -0.5450654441898701, -0.29806418825548, -0.37781166110749564, -0.3374141964377931, -0.43427573784914, -0.36196802100522435, -0.3427143228527617, -0.2772455661082667, -0.36493685634252665, -0.48299065105384614]}
{"prompt": "'''\nYou are given an integer array a_1, a_2, ..., a_n and integer k.\n\nIn one step you can \n\n  * either choose some index i and decrease a_i by one (make a_i = a_i - 1); \n  * or choose two indices i and j and set a_i equal to a_j (make a_i = a_j). \n\n\n\nWhat is the minimum number of steps you need to make the sum of array \u2211_{i=1}^{n}{a_i} \u2264 k? (You are allowed to make values of array negative).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 2 \u22c5 10^5; 1 \u2264 k \u2264 10^{15}) \u2014 the size of array a and upper bound on its sum.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the array itself.\n\nIt's guaranteed that the sum of n over all test cases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum number of steps to make \u2211_{i=1}^{n}{a_i} \u2264 k.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n2\n2 10\n1 2\n2 11\n2 3\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 10\n1 2 3 4 5\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 100000000000000000\n100000000000000000 100000000000000000 100000000000000000\n''') == '''\n0\n'''\n\nimport os\nfrom collections import namedtuple\nimport random\nimport subprocess\nimport string\nimport sys\nimport time\nimport datetime\nimport traceback\nimport pprint\nimport io\n\nif __name__ == '__main__':\n    if len(sys.argv) != 2:\n        print('Expected 1 argument: <problem>')\n        sys.exit(1)\n\n    # problem = 'solution'\n    problem = sys.argv[1]\n\n    # initialize random generators\n    random.seed(42)\n\n    def randomString(n: int) -> str:\n        return ''.join(random.choice(string.ascii_lowercase) for _ in range(n))\n\n    T = 10**4\n    N = 10**5\n    K = 10**15\n    MAXA = 10**", "solution('''\n1\n2 3\n2 3\n''') == '1'\n\nassert solution('''\n2\n2 3\n2 2\n2 3\n1 1\n''') == '1\\n0'\n\n# input\nN = int(input())\nfor _ in range(N):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    result = 0\n    for i in range(n):\n        if a[i] > k:\n            if a[i] > (a[i - 1] + 1):\n                result += a[i] - (a[i - 1] + 1)\n                a[i] = a[i - 1] + 1\n            else:\n                result += a[i] - k\n                a[i] = k\n    print(result)", "solution(\"\"\"1\n5 5\n1 1 1 1 1\n\"\"\") == \"\"\"0\n\"\"\"\n\nassert solution(\"\"\"2\n5 5\n1 1 1 1 1\n5 5\n2 2 2 2 2\n\"\"\") == \"\"\"1\n0\n\"\"\"\n\nassert solution(\"\"\"1\n5 7\n2 2 2 2 2\n\"\"\") == \"\"\"0\n\"\"\"\n\nassert solution(\"\"\"1\n4 10\n4 1 1 2\n\"\"\") == \"\"\"2\n\"\"\"\n\nassert solution(\"\"\"2\n2 2\n2 2\n2 2\n1 1\n\"\"\") == \"\"\"0\n0\n\"\"\"\n\nassert solution(\"\"\"1\n4 1\n1 2 3 4\n\"\"\") == \"\"\"4\n\"\"\"\n\nassert solution(\"\"\"1\n4 2\n2 3 2 3\n\"\"\") == \"\"\"3\n\"\"\"\n\nassert solution(\"\"\"1\n6 7\n1 1 1 1 1 1\n\"\"\") == \"\"\"1\n\"\"\"\n\nassert solution(\"\"\"1\n5 5\n1 1 1 1 1\n\"\"\") == \"\"\"0\n\"\"\"\n\nassert solution(\"\"\"1\n1 10\n10\n\"\"\") == \"\"\"1\n\"\"\"\n\nassert solution(\"\"\"2\n2 2\n2 2\n2 2\n1 1\n\"\"\") == \"\"\"0\n0\n\"\"\"\n\nassert solution(\"\"\"1\n5 5\n1 1 1 1 1\n\"\"\") == \"\"\"0\n\"\"\"", "solution(stdin) == \"0\\n1\\n2\\n\"", "solution('''\n''') == '''\n'''", "solution('''\n4\n4 100\n4 3 2 1\n4 3\n1 2 3 4\n4 1\n4 4 4 4\n4 1\n4 4 4 4\n''') == '''\n1\n0\n2\n2\n'''", "solution(stdin) == stdout", "solution('''\n3\n3 7\n5 1 2\n3 7\n1 5 2\n3 7\n1 3 1\n''') == '''\n3\n3\n3\n'''\n\nassert solution('''\n1\n1 1\n1\n''') == '''\n0\n'''\n\n# use text file\nlines = []\nwith open('input.txt', 'r') as file:\n    lines = file.readlines()\n\ni = 0\nwhile i < len(lines):\n    # remove whitespace\n    lines[i] = lines[i].strip()\n    i += 1\n    \ni = 0\nwhile i < len(lines):\n    input = lines[i]\n    i += 1\n    \n    output = solution(input)\n    print(output)\n    print('')", "solution(\"\"\"\n3\n3 10\n3 3 3\n3 100\n90 90 9\n3 1\n1 2 3\n\"\"\") == \"\"\"\n0\n1\n3\n\"\"\", \"sample 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2 0\n1 1\n2 -1\n2 2\n\"\"\") == \"\"\"\n2\n1\n\"\"\", \"sample 2\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 15\n1 2 3 4 5\n\"\"\") == \"\"\"\n3\n\"\"\", \"sample 3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 5\n1 2 3\n\"\"\") == \"\"\"\n1\n\"\"\", \"sample 4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 1\n5 5 5\n\"\"\") == \"\"\"\n2\n\"\"\", \"sample 5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 5\n2 3\n\"\"\") == \"\"\"\n1\n\"\"\", \"sample 6\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 7\n3 3 3\n\"\"\") == \"\"\"\n0\n\"\"\", \"sample 7\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n2 6\n1 2\n2 7\n1 2\n\"\"\") ==", "solution(\"\"\"1\n1 1000000000000000000\n1000000000000000000\"\"\") == '0'\nassert solution(\"\"\"1\n3 4\n1 2 1\"\"\") == '1'\nassert solution(\"\"\"1\n3 4\n2 3 3\"\"\") == '2'\nassert solution(\"\"\"1\n1 2\n1\"\"\") == '1'\nassert solution(\"\"\"1\n5 5\n1 1 1 1 1\"\"\") == '0'\nassert solution(\"\"\"1\n3 1\n1000000000 1000000000 1000000000\"\"\") == '3'\nassert solution(\"\"\"1\n3 1\n4 3 3\"\"\") == '2'\nassert solution(\"\"\"1\n3 2\n4 3 3\"\"\") == '2'\nassert solution(\"\"\"1\n3 3\n4 3 3\"\"\") == '2'\nassert solution(\"\"\"1\n3 4\n4 3 3\"\"\") == '2'\nassert solution(\"\"\"1\n3 5\n4 3 3\"\"\") == '1'\nassert solution(\"\"\"1\n3 4\n4 3 3\"\"\") == '2'\nassert solution(\"\"\"1\n3 4\n4 5 3\"\"\") == '1'\nassert solution(\"\"\"1\n3 5\n4 5 3\"\"\") == '1'\nassert solution(\"\"\"1\n3 6\n4 5 3\"\"\") == '0'\nassert solution(\"\"\"1\n5 5\n1 2", "solution(\"\"\"2\n3 3\n1 2 3\n5 7\n1 1 1 1 1\"\"\") == \"\"\"2\n2\"\"\", \"Something went wrong.\"\n\n# check the performance of solution\nimport timeit\nprint(timeit.timeit(solution, number=10, setup='from __main__ import solution'))\n\n# submit solution\nimport submit\nsubmit.submit_solution(solution, __file__)", "solution(\"1\\n5 10\\n5 5 5 5 5\") == \"1\", \"Error 1\"\nassert solution(\"1\\n10 10\\n1 1 1 1 1 1 1 1 1 1\") == \"5\", \"Error 2\"\nassert solution(\"1\\n2 1\\n1 1\") == \"0\", \"Error 3\"\nassert solution(\"1\\n5 0\\n5 5 5 5 5\") == \"5\", \"Error 4\"\nassert solution(\"1\\n3 1000000000000\\n1 1 1\") == \"1000000000\", \"Error 5\"\n\n# stress testing\nassert solution(\"1\\n1 1\\n1\") == \"0\", \"Error 6\"\nassert solution(\"1\\n3 3\\n2 1 2\") == \"1\", \"Error 7\"\nassert solution(\"1\\n4 4\\n1 1 1 1\") == \"2\", \"Error 8\"\nassert solution(\"1\\n4 2\\n1 1 1 1\") == \"3\", \"Error 9\"\nassert solution(\"1\\n4 2\\n1 2 3 4\") == \"0\", \"Error 10\"\nassert solution(\"1\\n1 2\\n1\") == \"0\", \"Error 11\"\nassert solution(\"1\\n1 3\\n1\") == \"0\", \"Error 12\"\nassert solution(\"1\\n2 6\\", "solution(sample_input) == sample_output", "solution(SAMPLE_INPUT_1) == SAMPLE_OUTPUT_1\n\n# Run the tests\nfrom tester import run_tests\n\nrun_tests(solution, [\n    (SAMPLE_INPUT_1, SAMPLE_OUTPUT_1),\n    (SAMPLE_INPUT_2, SAMPLE_OUTPUT_2),\n    (SAMPLE_INPUT_3, SAMPLE_OUTPUT_3),\n    (SAMPLE_INPUT_4, SAMPLE_OUTPUT_4),\n])\nfrom collections import deque\nfrom random import randint\nfrom tester import make_large_tests, run_tests\nfrom time import time\n\nMAX_N = 2*10**5\nMAX_K = 10**15\nMAX_A_I = 10**9\nTESTS_COUNT = 10**4\n\ndef solution(a: list, k: int) -> int:\n    a_copy = deque(a)\n    steps = 0\n    while sum(a_copy) > k:\n        # print(f'\\n{steps}', f'{a_copy}')\n        # raise Exception\n        min_i = min(range(len(a_copy)), key=lambda i: a_copy[i])\n        a_copy[min", "solution('''\n1\n5 2\n1 2 2 1 1\n''') == '''\n0\n'''\n\n# submit solution\nsolution_number = int(os.environ['solution'])\nwith open(f'solution{solution_number}.out', 'w') as fout:\n    fout.write(solution(stdin))", "solution('''2\n3 5\n2 3 3\n2 3\n2 2\n''') == '''1\n0\n'''\nassert solution('''1\n5 5\n1 2 1 1 1\n''') == '''4\n'''\nassert solution('''2\n5 6\n1 1 1 1 1\n3 7\n5 5 5\n''') == '''4\n2\n'''\nassert solution('''1\n4 10\n5 5 5 5\n''') == '''3\n'''\n\nif __name__ == '__main__':\n    solution(stdin)", "solution('''\n1\n5 6\n1 2 3 4 5\n''') == '0'\n\nassert solution('''\n1\n6 4\n1 1 1 1 1 1\n''') == '2'\n\nassert solution('''\n1\n1 1\n1\n''') == '0'\n\nassert solution('''\n1\n5 1\n10 10 10 10 10\n''') == '4'\n\nassert solution('''\n1\n3 3\n3 3 3\n''') == '0'\n\nassert solution('''\n1\n1 10\n11\n''') == '1'\n\nassert solution('''\n1\n1 9\n10\n''') == '1'\n\nassert solution('''\n1\n1 8\n9\n''') == '1'\n\nassert solution('''\n1\n5 2\n1 2 3 4 5\n''') == '1'\n\nassert solution('''\n1\n4 3\n3 1 1 2\n''') == '1'\n\nassert solution('''\n1\n1 1\n1\n''') == '0'\n\nassert solution('''\n1\n1 2\n1\n''') == '0'\n\nassert solution('''\n1\n1 3\n1\n''') == '0'\n\nassert solution('''\n", "solution(r'''\n2\n1 1\n1\n2 3\n2 2\n''') == r'''\n0\n1\n'''\n\n# test the running time\nfrom utils import run_time_test, random_ints\nfrom typing import Sequence\n\n# random test 1\nn = 200000\nk = 10**15\na = random_ints(n, max_integer=10**9)\n\nrun_time_test(solution, f'''\n1\n{n} {k}\n{' '.join(map(str, a))}\n''')\n\n# random test 2\nn = 200000\nk = 10**15\na = random_ints(n, max_integer=10**9)\n\nrun_time_test(solution, f'''\n1\n{n} {k}\n{' '.join(map(str, a))}\n''')\n\n# random test 3\nn = 200000\nk = 10**15\na = random_ints(n, max_integer=10**9)\n\nrun_time_test(solution, f'''\n1\n{n} {k}\n{' '.join(map(str, a))}\n''')\n\n# random test 4\nn = 200000\nk = 10**15\na = random_ints", "solution('''\n1\n5 10\n2 3 2 3 2\n''') == '''\n2\n'''\n\nprint('ok')", "solution(\n'''\n4\n2 3\n2 3\n2 6\n1 2\n2 5\n1 1\n1 1\n1 6\n1''') == '''\n0\n1\n1\n3'''", "solution('''\n2\n5 10\n1 2 2 1 5\n3 10\n1 2 5\n''') == '''\n3\n1\n'''\n\nprint(solution('''\n2\n5 10\n1 2 2 1 5\n3 10\n1 2 5\n'''))", "solution(\"\"\"\n3\n4 4\n4 2 2 1\n3 1\n3 2 1\n4 6\n1 1 1 1\n\"\"\") == \"\"\"\n2\n2\n2\n\"\"\"", "solution(stdin='''1\n5 10\n3 1 4 2 2''') == '1'\nassert solution(stdin='''2\n4 8\n2 3 1 2\n4 6\n1 1 1 2''') == '0'\nassert solution(stdin='''1\n6 7\n1 1 1 1 1 1''') == '2'", "solution(\"\"\"\n2\n5 15\n1 2 3 4 5\n5 10\n1 2 1 1 1\n\"\"\") == \"\"\"\n2\n4\n\"\"\"\n\nassert solution(\"\"\"\n1\n5 10\n1 2 1 1 1\n\"\"\") == \"\"\"\n4\n\"\"\"", "solution('''\n    4\n    5 10\n    1 2 3 4 5\n    3 3\n    1 2 3\n    3 3\n    5 4 3\n    1 1\n    1000000000\n''') == '''\n    2\n    0\n    2\n    0\n'''", "solution('''\n1\n1 5\n1\n''') == '''\n2\n'''\n\n# get the input\ninput = sys.stdin.read()\n\n# print the output\nprint(solution(input))", "solution(r'''\n1\n3 10\n2 3 3\n''') == r'''\n2\n'''\nassert solution(r'''\n2\n2 1\n10 10\n1 1\n1\n''') == r'''\n1\n0\n'''\nassert solution(r'''\n3\n2 1\n10 10\n1 1\n1\n2 2\n10 10\n1 1\n2\n''') == r'''\n1\n0\n0\n'''\n\n# get the input and run the solution\n_, _input = helpers.get_input_and_stdin(__file__)\nprint(solution(_input))", "solution('''\n1\n5 7\n1 2 3 3 3\n''') == '2'\n\nassert solution('''\n2\n2 3\n1 1\n2 3\n2 1\n''') == '0\\n0'", "solution('''\n1\n1 1\n1\n''') == '''\n1\n'''\n\nassert solution('''\n2\n3 8\n1 2 3\n3 10\n9 9 9\n''') == '''\n0\n0\n'''\n\nassert solution('''\n1\n3 10\n10 10 10\n''') == '''\n3\n'''\n\nassert solution('''\n1\n4 6\n5 4 3 2\n''') == '''\n0\n'''\n\nassert solution('''\n1\n5 10\n1 1 1 1 1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n4 5\n5 4 3 2\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1 2\n2\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1 4\n1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1 4\n4\n''') == '''\n1\n'''\n\nassert solution('''\n1\n3 4\n3 3 3\n''') == '''\n1\n'''\n\nassert solution('''\n1\n3 8\n5 5 5\n''') == '''\n1\n'''\n", "solution(TEST_CASES[0]) == ANSWERS[0]\nassert solution(TEST_CASES[1]) == ANSWERS[1]\nassert solution(TEST_CASES[2]) == ANSWERS[2]\nassert solution(TEST_CASES[3]) == ANSWERS[3]\n\n#\n#\n#\n\n\n#\n#\n#", "solution(test_case_example) == test_case_example_output\n\n# upload this solution to Judge\n# submit(solution, 'solution for {} - {}'.format(problem_name, problem_id))", "solution('''\n1\n5 15\n1 3 3 3 3\n''') == '4'\n\nassert solution('''\n1\n2 5\n2 2\n''') == '0'\n\nassert solution('''\n1\n3 6\n1 2 3\n''') == '3'\n\nassert solution('''\n1\n3 6\n2 3 3\n''') == '2'\n\nassert solution('''\n1\n1 1\n2\n''') == '1'\n\nassert solution('''\n1\n3 8\n1 1 1\n''') == '2'\n\nassert solution('''\n1\n2 3\n2 2\n''') == '0'\n\nassert solution('''\n1\n5 6\n1 5 1 1 1\n''') == '4'\n\nassert solution('''\n1\n3 6\n1 2 3\n''') == '3'\n\nassert solution('''\n1\n5 6\n3 1 2 1 1\n''') == '3'\n\nassert solution('''\n1\n3 5\n1 2 3\n''') == '2'\n\nassert solution('''\n1\n5 6\n1 5 1 1 1\n''') == '4'\n\nassert solution('''\n1\n3 5\n1 2 3\n''') == '2'", "solution(example_input) == example_output\n\n# check the correctness of solution in multiple testcases\nmultiple_testcases_input = '''\n4\n4 12\n1 1 1 4\n4 4\n4 4 4 4\n6 10\n1 1 1 1 1 1\n5 10\n3 3 3 3 3\n'''\n\nmultiple_testcases_output = '''\n1\n2\n2\n2\n'''\n\nassert solution(multiple_testcases_input) == multiple_testcases_output\n\ndef test_solution():\n    import sys\n\n    sample_input = '''\n2\n4 7\n5 5 2 2\n4 7\n3 5 2 2\n    '''\n\n    expected_output = '''\n1\n0\n    '''\n\n    with open(sys.argv[1]) as f:\n        lines = f.readlines()\n\n    n = int(lines[0])\n    input = '\\n'.join(lines[1:])\n    assert solution(input) == expected_output\n\n\nif __name__ == '__main__':\n    test_solution()", "(solution(sample_input1) == sample_output1)\nassert (solution(sample_input2) == sample_output2)", "solution(stdin) == stdout\nassert solution(stdin2) == stdout2", "solution('''\n4\n4 5\n4 2 3 1\n4 10\n4 2 3 1\n4 8\n4 2 3 1\n10 10\n1 1 1 1 1 1 1 1 1 1\n''') == '''\n1\n2\n3\n0\n'''", "solution(__file__) == 'some_static_result'", "solution(\"\"\"\n5\n3 6\n3 4 5\n3 6\n1 2 3\n2 3\n2 3\n2 3\n2 3\n\"\"\") == \"\"\"\n2\n1\n0\n0\n0\n\"\"\"", "solution('''\n1\n2 1\n2 3\n''') == '1'\nassert solution('''\n3\n3 2\n1 1 1\n3 0\n1 1 1\n1 1\n1\n''') == '2\\n0\\n0'\n#print(solution('''\n#'''))", "solution(stdin) == stdout", "solution(get_input_file('1.in')) == get_output_file('1.out')\n# run the solution with timings\n%timeit solution(get_input_file('1.in'))\n \ndef solution(stdin: str) -> str:\n    # return the answer\n \n# check the correctness of solution\nassert solution(get_input_file('2.in')) == get_output_file('2.out')\n# run the solution with timings\n%timeit solution(get_input_file('2.in'))\n \ndef solution(stdin: str) -> str:\n    # return the answer\n \n# check the correctness of solution\nassert solution(get_input_file('3.in')) == get_output_file('3.out')\n# run the solution with timings\n%timeit solution(get_input_file('3.in'))\n \ndef solution(stdin: str) -> str:\n    # return the answer\n \n# check the correctness of solution\nassert solution(get_input_file('4.in')) == get_output_file('4.out')\n# run the solution with timings\n%timeit solution(get_input_file('4.in'))\n \ndef solution(stdin: str)", "solution('''2\n2 5\n2 3\n2 4\n1 2''') == '''1\n1'''", "solution('''\\\n2\n3 1\n2 3 4\n5 10\n2 3 4 5 6\\\n''') == '''\\\n3\n0\\\n'''", "solution(test_input_1) == expected_result_1\n\n# run it with the test files\ndef run_with_test_file(name: str) -> None:\n    print(f\"\\n# {name}\")\n    with open(name) as f:\n        lines = f.readlines()\n        n = int(lines[0])\n        start = time.time()\n        for i in range(n):\n            print(f\"## Case {i+1}\")\n            result = solution(lines[2*i+1])\n            print(f\"### Result\")\n            print(result)\n            expected = lines[2*i+2].strip()\n            print(f\"### Expected\")\n            print(expected)\n            print(f\"### Correct\")\n            print(result == expected)\n        print(f\"### Time (s)\")\n        print(time.time() - start)\n\n# run with the test files\nfor i in range(1,4):\n    run_with_test_file(f\"test_input_{i}.txt\")", "solution(INPUT_TEST_CASES[0]) == \"1 2 4\"\nassert solution(INPUT_TEST_CASES[1]) == \"2 -2 2 3\"\nassert solution(INPUT_TEST_CASES[2]) == \"2 -2 2 3\"\nassert solution(INPUT_TEST_CASES[3]) == \"5 -5 5 6\"\nassert solution(INPUT_TEST_CASES[4]) == \"5 -5 5 6\"\nassert solution(INPUT_TEST_CASES[5]) == \"3 -3 5 6\"\nassert solution(INPUT_TEST_CASES[6]) == \"3 -3 5 6\"\nassert solution(INPUT_TEST_CASES[7]) == \"1 -1 5 6\"\nassert solution(INPUT_TEST_CASES[8]) == \"1 -1 5 6\"\nassert solution(INPUT_TEST_CASES[9]) == \"1 -1 5 6\"\nassert solution(INPUT_TEST_CASES[10]) == \"1 -1 5 6\"\nassert solution(INPUT_TEST_CASES[11]) == \"3 -3 5 6\"\nassert solution(INPUT_TEST_CASES[12])", "solution('''\n1\n4 6\n1 2 3 4\n''') == '''\n2\n'''\n\nassert solution('''\n1\n2 2\n2 2\n''') == '''\n0\n'''\n\nassert solution('''\n1\n1 1\n1\n''') == '''\n0\n'''\n\nassert solution('''\n1\n4 0\n4 4 4 4\n''') == '''\n4\n'''\n\nassert solution('''\n1\n2 5\n1 4\n''') == '''\n1\n'''\n\nassert solution('''\n1\n1 1\n1\n''') == '''\n0\n'''\n\n# test acceptor\ntry:\n    from pprint import pprint\n    while True:\n        inp = input()\n        if not inp:\n            break\n        pprint(inp)\n        inp = input()\n        pprint(inp)\n        print(solution(inp))\nexcept (EOFError, KeyboardInterrupt):\n    pass", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution", "solution(\"\"\"\\\n1\n4 6\n2 3 1 1\n\"\"\") == \"\"\"\\\n3\n\"\"\"", "solution('''\n''') == '''\n'''", "solution('''\n4\n4 1\n2 3 5 3\n2 2\n1000000000 1\n4 10\n2 3 5 3\n2 2\n1000000000 1000000000\n''') == '''\n1\n0\n0\n1\n'''\n\ndef solution_gen(stdin: str) -> str:\n    '''\n    Generate all the possible ways, then count the steps from the back of solution list.\n    '''\n    from typing import List, Tuple, Dict\n    import itertools\n\n    test_cases: int = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')[1:]\n    output: List[str] = []\n\n    for i in range(test_cases):\n        n, k = stdin[2*i].split(' ')\n        numbers = stdin[2*i+1].split(' ')\n        n, k = int(n), int(k)\n        numbers = [int(number) for number in numbers]\n\n        def count_steps(solutions: List[Tuple[int, ...]]) -> int:\n            if len(solutions) == 0:\n                return 0\n            steps: int = 1\n            for j in range(len(solutions[0])-1, -"], "finish_reason": ["length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "length"], "sum_logprob": [-175.20823689546953, -77.44934481123003, -124.66855283788797, -16.691171140100003, -6.644403118, -45.12974712490001, -5.738410864999999, -122.31759019271998, -132.82666682095004, -115.31409680103499, -63.16327252075, -120.95008367800403, -6.75014027572, -158.07305481995212, -52.45417487748001, -82.21531795992, -100.53855548956507, -92.37511684829518, -25.254584167, -48.03270398269998, -32.551855202100015, -37.669517619500006, -64.12630477583997, -34.770859658739994, -40.526167128, -31.249296949599998, -74.15694289437299, -35.06883371539999, -111.13779840061697, -33.366581034638, -61.11445655710001, -121.578298034598, -154.46755972041802, -12.652388202790004, -11.8622580995, -38.5263811705, -21.334812894000002, -37.518469268, -48.73485876412999, -5.7342431355, -59.85978791408884, -21.953737439, -29.486421931060008, -129.71422901966497, -84.85232845880395, -109.97749236567097, -13.856322835318394, -21.9498907117, -6.522268734000001, -191.78964465096087], "mean_logprob": [-0.584027456318231, -0.3815238660651724, -0.41556184279296, -0.9272872855611112, -0.4746002227142857, -0.8058883415160715, -0.6376012072222222, -0.654104760388877, -0.44275555606983336, -0.3843803226701167, -0.6579507554244791, -0.40316694559334665, -0.6136491159745454, -0.5269101827331734, -0.6244544628271429, -0.6045243967641176, -0.33512851829855, -0.30791705616098336, -0.7652904293030303, -0.9802592649530613, -0.4858485851059701, -0.8968932766547619, -0.782028107022439, -0.5700140927662295, -0.6140328352727272, -0.5896093764075472, -0.504468999281449, -0.6494228465814815, -0.37045932800205666, -0.35878044123266667, -1.2222891311419999, -0.40526099344866, -0.6154086044638167, -0.3953871313371875, -0.5648694333095238, -0.6213932446854838, -1.4223208596, -0.7656830462857143, -0.6585791724882433, -0.6371381261666667, -0.19953262638029623, -0.7840620513928571, -0.7371605482765, -0.5167897570504582, -0.28284109486268, -0.4544524477920289, -0.046187742784394664, -0.8779956284680001, -0.4658763381428571, -0.6392988155032033]}
{"prompt": "'''\nYou are given a binary string (i. e. a string consisting of characters 0 and/or 1) s of length n. You can perform the following operation with the string s at most once: choose a substring (a contiguous subsequence) of s having exactly k characters 1 in it, and shuffle it (reorder the characters in the substring as you wish).\n\nCalculate the number of different strings which can be obtained from s by performing this operation at most once.\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 5000; 0 \u2264 k \u2264 n).\n\nThe second line contains the string s of length n, consisting of characters 0 and/or 1.\n\nOutput\n\nPrint one integer \u2014 the number of different strings which can be obtained from s by performing the described operation at most once. Since the answer can be large, output it modulo 998244353.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''\n5 2\n01010\n''') == '''\n5\n'''\n\n# check the correctness of solution\nassert solution('''\n10 1\n0101101010\n''') == '''\n23\n'''\n\n# check the correctness of solution\nassert solution('''\n10 1\n0101110101\n''') == '''\n21\n'''\n\n# check the correctness of solution\nassert solution('''\n10 1\n0101010101\n''') == '''\n10\n'''\n\nassert solution('''\n5 1\n10001\n''') == '''\n5\n'''\n\nassert solution('''\n5 0\n10001\n''') == '''\n1\n'''\n\nassert solution('''\n5 0\n11011\n''') == '''\n1\n'''\n\nassert solution('''\n5 1\n11011\n''') == '''\n5\n'''", "solution(\"3 1\\n011\") == \"4\"\nassert solution(\"4 2\\n0101\") == \"12\"\nassert solution(\"1 0\\n0\") == \"1\"\nassert solution(\"2 0\\n00\") == \"1\"\nassert solution(\"4 3\\n1001\") == \"0\"\nassert solution(\"4 3\\n1100\") == \"2\"\nassert solution(\"4 4\\n1000\") == \"1\"\nassert solution(\"4 3\\n1110\") == \"4\"\nassert solution(\"4 4\\n1111\") == \"24\"\nassert solution(\"4 2\\n1010\") == \"12\"\nassert solution(\"5 1\\n01110\") == \"32\"\nassert solution(\"5 3\\n01010\") == \"12\"\nassert solution(\"5 4\\n01010\") == \"9\"\nassert solution(\"5 5\\n01010\") == \"6\"\nassert solution(\"5 5\\n10101\") == \"9\"\nassert solution(\"5 4\\n10101\") == \"18\"\nassert solution(\"5 3\\n10101\") == \"36\"\nassert solution(\"5 2\\n10101\") == \"72\"\nassert solution(\"5 1\\n10101\") == \"144\"\nassert solution(\"5 1\\n11111\") == \"256\"\nassert solution(\"5 2\\n11", "solution(\"\"\"\ninput \n\"\"\") == \"\"\"\noutput\n\"\"\"\n\n# get the input and run the solution against the input\nprint(solution(input()))", "solution('''\n5 2\n01110\n''') == '''\n4\n'''\n\nassert solution('''\n4 2\n0001\n''') == '''\n2\n'''\n\nassert solution('''\n4 2\n0111\n''') == '''\n4\n'''\n\nassert solution('''\n4 1\n0111\n''') == '''\n3\n'''\n\nassert solution('''\n5 2\n01011\n''') == '''\n3\n'''\n\nassert solution('''\n5 2\n01101\n''') == '''\n5\n'''\n\nassert solution('''\n5 2\n10101\n''') == '''\n5\n'''\n\nassert solution('''\n5 2\n10001\n''') == '''\n3\n'''\n\nassert solution('''\n5 2\n11000\n''') == '''\n3\n'''\n\nassert solution('''\n6 3\n011110\n''') == '''\n4\n'''\n\nassert solution('''\n6 3\n011010\n''') == '''\n8\n'''\n\nassert solution('''\n6 3\n101010\n''') == '''\n6\n'''\n\nassert solution('''\n6 3\n110110", "solution(\"\"\"\n5 3\n11011\n\"\"\") == \"\"\"\n9\n\"\"\"\n\nassert solution(\"\"\"\n7 1\n0110100\n\"\"\") == \"\"\"\n3\n\"\"\"\n\nassert solution(\"\"\"\n1 0\n0\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n10 9\n1111111111\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n20 15\n011001001001001001000\n\"\"\") == \"\"\"\n37330\n\"\"\"\n\nassert solution(\"\"\"\n50 40\n1010101010101010101010101010101010101010101010101\n\"\"\") == \"\"\"\n51047\n\"\"\"\n\nassert solution(\"\"\"\n5000 5000\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n5000 0\n0\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1 0\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n1 0\n0\n\"\"\") == \"\"\"\n1\n\"\"\"", "solution('''\n8 3\n01110110\n''') == '17'\n\n# check the correctness of solution\nassert solution('''\n4 0\n0101\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4 2\n0111\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1111\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n5 3\n01010\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n1 0\n0\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1 1\n1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n5 4\n11111\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n5 3\n11111\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n5 2\n11111\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n5 1\n11111\n''') == '1'\n\n# check the correctness of solution\nassert solution('''", "solution('''5 1\n00010''') == '''6'''\nassert solution('''7 2\n1110001''') == '''2'''\nassert solution('''3 1\n111''') == '''1'''\nassert solution('''4 2\n0101''') == '''4'''\nassert solution('''3 1\n010''') == '''3'''\nassert solution('''12 5\n110100101000''') == '''8'''\nassert solution('''5 1\n00010''') == '''6'''\nassert solution('''10 5\n1011101000''') == '''8'''\nassert solution('''4 1\n0110''') == '''4'''\nassert solution('''4 1\n0110''') == '''4'''\nassert solution('''14 3\n011001001000110''') == '''28'''\nassert solution('''11 1\n10101010101''') == '''1'''\nassert solution('''5 3\n00111''') == '''6'''\nassert solution('''6 4\n000111''') == '''2'''\nassert solution('''20 19\n00000000000000000000''') == '''1'''\nassert solution('''", "solution('''5 2\n00111''') == '6'\nassert solution('''6 3\n111111''') == '2'\nassert solution('''6 2\n100100''') == '2'\nassert solution('''8 5\n00010000''') == '10'\nassert solution('''8 7\n00000011''') == '41'\nassert solution('''3 0\n111''') == '1'\nassert solution('''3 1\n111''') == '3'\nassert solution('''3 2\n111''') == '3'\nassert solution('''3 3\n111''') == '1'\nassert solution('''4 0\n1111''') == '1'\nassert solution('''4 1\n1111''') == '4'\nassert solution('''4 2\n1111''') == '6'\nassert solution('''4 3\n1111''') == '4'\nassert solution('''4 4\n1111''') == '1'\nassert solution('''5 0\n11111''') == '1'\nassert solution('''5 1\n11111''') == '5'\nassert solution('''5 2\n11111''') == '10'\nassert solution('''5 3\n11111''') == '10'\nassert solution(''", "solution(stdin) == expected\n# assert solution(stdin2) == expected2", "solution(r'''6 2\n010110''') == '15'\nassert solution(r'''3 0\n000''') == '8'\nassert solution(r'''3 1\n110''') == '3'\nassert solution(r'''9 1\n011001110''') == '27'\nassert solution(r'''5000 2\nsolution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution(\"5 2\\n10101\") == \"4\"\nassert solution(\"4 2\\n1010\") == \"3\"\nassert solution(\"5 2\\n11111\") == \"1\"\nassert solution(\"6 3\\n111111\") == \"3\"\nassert solution(\"7 4\\n1111111\") == \"6\"\nassert solution(\"7 4\\n1110001\") == \"8\"\nassert solution(\"7 4\\n1000111\") == \"8\"\nassert solution(\"7 4\\n0110011\") == \"8\"\nassert solution(\"7 4\\n1110011\") == \"8\"\nassert solution(\"7 4\\n0111011\") == \"8\"\nassert solution(\"7 4\\n0111111\") == \"8\"\nassert solution(\"7 4\\n0111101\") == \"8\"\nassert solution(\"7 4\\n0111001\") == \"8\"\nassert solution(\"7 4\\n0110111\") == \"8\"\nassert solution(\"7 4\\n0110101\") == \"8\"\nassert solution(\"7 4\\n0110001\") == \"8\"\nassert solution(\"7 4\\n0101111\") == \"8\"\nassert solution(\"7 4\\n0101101\") == \"8\"\nassert solution(\"7 4\\n0101011\") == \"8\"\nassert solution", "solution('''\n13 2\n0101111010101\n''') == '''\n\n'''", "solution('''\n5 1\n11111\n''') == '1'\nassert solution('''\n5 2\n01011\n''') == '6'\nassert solution('''\n5 3\n00000\n''') == '0'\nassert solution('''\n5 4\n00000\n''') == '30'\nassert solution('''\n5 4\n00100\n''') == '1'\nassert solution('''\n5 5\n10101\n''') == '0'\nassert solution('''\n5 5\n11011\n''') == '2'\nassert solution('''\n5 4\n10011\n''') == '1'\nassert solution('''\n5 4\n01110\n''') == '1'\nassert solution('''\n5 3\n00100\n''') == '0'\nassert solution('''\n5 3\n00010\n''') == '0'\nassert solution('''\n5 3\n01111\n''') == '0'\nassert solution('''\n5 3\n01101\n''') == '0'\nassert solution('''\n5 3\n10111\n''') == '0'\nassert solution('''\n5 3\n11110\n''') == '0'\nassert solution('''\n5 3\n10011\n''') == '0'", "solution(\"\") == \"\", \"An empty string\"\nassert solution(\"1 2 3\") == \"1 2 3\", \"Example\"\nassert solution(\"2 3 4\") == \"2 4 3\", \"Example\"\nassert solution(\"5 2 7\") == \"5 7 2\", \"Example\"\nassert solution(\"4 3 1\") == \"4 1 3\", \"Example\"\n\nprint('Congratulations! All tests have been successfully passed.')", "(solution('Input\\n3 0\\n000\\nOutput\\n1\\nExplanation\\nThe only string which can be obtained from \"000\" by performing at most one operation is \"000\".\\n')) == '1'\nassert (solution('Input\\n4 0\\n0100\\nOutput\\n4\\nExplanation\\nThe 4 strings which can be obtained from \"0100\" by performing at most one operation are \"0100\", \"0010\", \"0001\", \"0000\".\\n')) == '4'\nassert (solution('Input\\n4 1\\n1010\\nOutput\\n4\\nExplanation\\nThe 4 strings which can be obtained from \"1010\" by performing at most one operation are \"1010\", \"0101\", \"1110\", \"1111\".\\n')) == '4'\nassert (solution('Input\\n3 2\\n111\\nOutput\\n3\\nExplanation\\nThe 3 strings which can be obtained from \"111\" by performing at most one operation are \"111\", \"101\", \"011\".\\n')) == '3'\nassert (solution('Input\\n5 3\\n10001\\nOutput\\n2\\nExplanation\\nThe 2 strings which can be obtained from \"10001\" by performing at most one operation are \"100", "solution('''\n4 2\n1100\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n4 3\n1010\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1001\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n3 1\n101\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1111\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n5 1\n10101\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n3 0\n000\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n5 3\n10001\n''') == '15'\n\n# check the correctness of solution\nassert solution('''\n5 2\n10001\n''') == '9'\n\n# check the correctness of solution\nassert solution('''\n5 3\n00010\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n5 2\n01110\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n5 3\n", "solution('''\n4 2\n0110\n''') == '3'\n\nassert solution('''\n3 1\n101\n''') == '2'\n\nassert solution('''\n2 0\n00\n''') == '1'\n\nassert solution('''\n20 5\n00010001000100010001\n''') == '201'\n\nassert solution('''\n20 5\n11100111100111100111\n''') == '935'\n\nassert solution('''\n3 2\n111\n''') == '1'\n\nassert solution('''\n10 3\n1110101110\n''') == '171'\n\n# test for large input\nimport random\n\ndef generate_n_k(n_min: int, n_max: int, k_min: int, k_max: int) -> str:\n    n = random.randint(n_min, n_max)\n    k = random.randint(k_min, k_max)\n    s = ''\n    for i in range(n):\n        s += str(random.randint(0, 1))\n    return '\\n'.join([str(n), str(k), s])\n\ndef generate_s(n: int, k: int) -> str:\n    s = ''\n    for i", "solution('''\n4 0\n1111\n''') == '1'\nassert solution('''\n4 1\n1111\n''') == '3'\nassert solution('''\n5 0\n10011\n''') == '2'\nassert solution('''\n5 2\n10011\n''') == '6'\nassert solution('''\n5 1\n10011\n''') == '4'\nassert solution('''\n15 3\n110010111110000\n''') == '32768'\nassert solution('''\n15 1\n110010111110000\n''') == '36'\nassert solution('''\n15 0\n110010111110000\n''') == '16'\nassert solution('''\n5 0\n10011\n''') == '2'\nassert solution('''\n5 2\n10011\n''') == '6'\nassert solution('''\n5 1\n10011\n''') == '4'\nassert solution('''\n15 3\n110010111110000\n''') == '32768'\nassert solution('''\n15 1\n110010111110000\n''') == '36'\nassert solution('''\n15 0\n110010111110000\n''') == '16'\nassert solution('''\n5000 0\n1\n''') == '1'", "solution(\"\"\"\n5 2\n01100\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n10 1\n1010101010\n\"\"\") == \"27\"\n\nassert solution(\"\"\"\n2 1\n11\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 3\n1101\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 3\n0000\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 2\n0101\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4 2\n0000\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 2\n1111\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 3\n1101\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 4\n11010\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 4\n01111\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n6 5\n111111\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n6 5\n000000\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 3\n01111\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n6 5\n000000\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n6 5\n111111\n\"\"\") == \"1\"\n\nassert", "solution(example_input) == example_output\n\n# get input from stdin\nstdin_lines = []\nfor line in sys.stdin:\n    stdin_lines.append(line.rstrip('\\n'))\n\nprint(solution(stdin_lines))", "solution('''\n4 2\n1001\n''') == '''\n4\n'''\n\nassert solution('''\n4 3\n0100\n''') == '''\n2\n'''\n\nassert solution('''\n4 1\n1010\n''') == '''\n4\n'''\n\nassert solution('''\n3 0\n100\n''') == '''\n1\n'''\n\nassert solution('''\n3 1\n010\n''') == '''\n3\n'''\n\nassert solution('''\n5 1\n11011\n''') == '''\n7\n'''\n\nassert solution('''\n2 0\n11\n''') == '''\n1\n'''\n\nassert solution('''\n5 3\n10111\n''') == '''\n4\n'''\n\nassert solution('''\n5 3\n11011\n''') == '''\n7\n'''\n\nassert solution('''\n10 4\n1100101010\n''') == '''\n16\n'''\n\nassert solution('''\n5 2\n01010\n''') == '''\n5\n'''\n\nassert solution('''\n5 2\n01101\n''') == '''\n5\n'''\n\nassert solution('''\n5 2\n11111\n''') == '", "solution('''3 1\n101''') == '4'\nassert solution('''4 2\n0010''') == '4'\nassert solution('''4 1\n0010''') == '7'\nassert solution('''4 0\n0010''') == '7'\nassert solution('''4 3\n0010''') == '7'\nassert solution('''5 3\n10101''') == '9'\nassert solution('''3 2\n101''') == '1'\nassert solution('''3 2\n111''') == '3'\nassert solution('''3 2\n001''') == '1'\nassert solution('''3 2\n000''') == '1'\nassert solution('''1 1\n1''') == '1'\nassert solution('''1 0\n1''') == '2'\nassert solution('''1 1\n0''') == '2'\nassert solution('''1 0\n0''') == '2'\nassert solution('''10 8\n1111111111''') == '1'\nassert solution('''10 8\n0000000000''') == '2'\nassert solution('''10 4\n1111111111''') == '1'\nassert solution('''10 4\n0000000000''') == '3'\nassert solution('''10", "solution('''\n2 0\n00\n''') == '3'\nassert solution('''\n3 1\n101\n''') == '3'\nassert solution('''\n3 2\n001\n''') == '2'\nassert solution('''\n3 3\n111\n''') == '1'\nassert solution('''\n2 0\n10\n''') == '4'\nassert solution('''\n4 1\n1000\n''') == '6'\nassert solution('''\n4 2\n0110\n''') == '10'\nassert solution('''\n3 1\n101\n''') == '3'\nassert solution('''\n3 2\n001\n''') == '2'\nassert solution('''\n3 3\n111\n''') == '1'\nassert solution('''\n2 0\n10\n''') == '4'\nassert solution('''\n4 1\n1000\n''') == '6'\nassert solution('''\n4 2\n0110\n''') == '10'\nassert solution('''\n3 1\n101\n''') == '3'\nassert solution('''\n3 2\n001\n''') == '2'\nassert solution('''\n3 3\n111\n''') == '1'\nassert solution('''\n2 0\n10\n", "solution(\"\"\"\n3 1\n100\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 2\n1100\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4 2\n0101\n\"\"\") == \"6\"\nassert solution(\"\"\"\n8 0\n00000000\n\"\"\") == \"1\"\nassert solution(\"\"\"\n8 3\n01100100\n\"\"\") == \"28\"\nassert solution(\"\"\"\n1 0\n0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 2\n01011\n\"\"\") == \"11\"\nassert solution(\"\"\"\n5 1\n10100\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5 2\n11001\n\"\"\") == \"11\"\nassert solution(\"\"\"\n5 1\n11110\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3 1\n001\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 2\n01111\n\"\"\") == \"13\"\nassert solution(\"\"\"\n5 2\n11100\n\"\"\") == \"11\"\nassert solution(\"\"\"\n5 2\n10011\n\"\"\") == \"12\"\nassert solution(\"\"\"\n5 1\n00010\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5 2\n01101\n\"\"\") == \"12\"\nassert solution(\"\"\"\n5 2\n00101\n\"\"\") == \"11\"", "solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''", "solution(\"2 1\\n01\") == \"2\"\nassert solution(\"4 2\\n0010\") == \"4\"\nassert solution(\"4 3\\n1101\") == \"4\"\nassert solution(\"4 4\\n0000\") == \"1\"\nassert solution(\"5000 3\\nsolution(\"\"\"\n5 2\n01010\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n6 3\n000111\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 0\n0\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 4\n11111\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 4\n11110\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 5\n11111\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 2\n11111\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6 3\n111111\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6 3\n111100\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 3\n1110\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 3\n1010\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 3\n1001\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 3\n0101\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 3\n0001\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 2\n11110\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 2\n11101\n\"\"\") == \"0\"\n\n", "solution(stdin1) == expected1, 'test1'\nassert solution(stdin2) == expected2, 'test2'\nassert solution(stdin3) == expected3, 'test3'\nassert solution(stdin4) == expected4, 'test4'\nassert solution(stdin5) == expected5, 'test5'\nassert solution(stdin6) == expected6, 'test6'\n\nprint('All tests is passed!!!')", "solution('''\n5 2\n01010\n''') == '''\n4\n'''\n\nassert solution('''\n4 2\n0101\n''') == '''\n3\n'''\n\nassert solution('''\n5 1\n00010\n''') == '''\n2\n'''\n\nassert solution('''\n4 0\n0000\n''') == '''\n1\n'''\n\nassert solution('''\n2 0\n01\n''') == '''\n2\n'''\n\nassert solution('''\n2 1\n01\n''') == '''\n3\n'''\n\nassert solution('''\n3 0\n001\n''') == '''\n2\n'''\n\nassert solution('''\n3 1\n001\n''') == '''\n3\n'''\n\nassert solution('''\n5 0\n00010\n''') == '''\n2\n'''\n\nassert solution('''\n5 1\n00010\n''') == '''\n2\n'''\n\nassert solution('''\n5 2\n00010\n''') == '''\n2\n'''\n\nassert solution('''\n5 3\n00010\n''') == '''\n1\n'''\n\nassert solution('''\n5 4\n00010\n''') == '''\n", "solution('''\n5 2\n01011\n''') == '''\n15\n'''\n\n# test solution\nsolution('''\n20 2\n01101100111001011000\n''')", "solution('''\n4 2\n1111\n''') == '12'\n\nassert solution('''\n4 2\n0111\n''') == '4'\n\nassert solution('''\n4 2\n1110\n''') == '8'\n\nassert solution('''\n4 2\n0101\n''') == '1'\n\nassert solution('''\n4 2\n0000\n''') == '1'\n\nassert solution('''\n4 3\n1111\n''') == '4'\n\nassert solution('''\n4 3\n0111\n''') == '1'\n\nassert solution('''\n4 3\n1110\n''') == '1'\n\nassert solution('''\n4 3\n0101\n''') == '0'\n\nassert solution('''\n4 3\n0000\n''') == '0'\n\nassert solution('''\n7 2\n1111110\n''') == '72'\n\nassert solution('''\n7 2\n0111110\n''') == '16'\n\nassert solution('''\n7 2\n1111100\n''') == '48'\n\nassert solution('''\n7 2\n1111101\n''') == '48'\n\nassert solution('''\n7 2\n1111011\n''') == '48'\n\nassert solution(''", "solution(\"3 0\\n000\") == '1'\nassert solution(\"6 1\\n011001\") == '5'\nassert solution(\"7 2\\n1010101\") == '11'\nassert solution(\"12 0\\n000000000000\") == '1'\nassert solution(\"16 2\\n1111101010111111\") == '86'\nassert solution(\"50 3\\n011111111111111111111111111111111111111111111111\") == '2809'\nassert solution(\"5000 10\\nsolution(\"\"\"\n0\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n1\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n2\n1\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n3\n2\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n4\n2\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n4\n3\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n4\n4\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n10\n5\n\"\"\") == \"\"\"\n0\n\"\"\"\nassert solution(\"\"\"\n10\n6\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n11\n5\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n12\n5\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n13\n5\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n14\n5\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n15\n5\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n16\n5\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n17\n5\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n18\n5\n\"\"\") == \"\"\"\n3\n\"\"\"", "solution('''3 1\n000\n''') == '7'\nassert solution('''7 2\n1111111\n''') == '8'\nassert solution('''11 3\n10010001110\n''') == '196'\nassert solution('''13 0\n0000111111111\n''') == '1'\nassert solution('''10 5\n1110001111\n''') == '31'\nassert solution('''9 8\n111000000\n''') == '8'\nassert solution('''3 1\n111\n''') == '1'\nassert solution('''1 0\n0\n''') == '2'\nassert solution('''10 0\n0101010101\n''') == '20'\nassert solution('''8 6\n01110001\n''') == '11'\nassert solution('''7 2\n0101101\n''') == '23'\nassert solution('''1 1\n1\n''') == '2'\nassert solution('''6 4\n110111\n''') == '7'\nassert solution('''7 4\n1101111\n''') == '9'\nassert solution('''10 5\n1111111111\n''') == '1'\nassert solution('''8 7\n01111111\n''') == '1'\nassert solution", "solution(SAMPLE) == ''\nassert solution(SAMPLE2) == ''\nassert solution(INPUT) == ''\nassert solution(SAMPLE3) == ''\nassert solution(SAMPLE4) == ''\n\n# check the performance of solution\nassert solution(INPUT2) == ''\nassert solution(INPUT3) == ''\nassert solution(INPUT4) == ''\nassert solution(INPUT5) == ''\nassert solution(INPUT6) == ''\nassert solution(INPUT7) == ''\nassert solution(INPUT8) == ''\nassert solution(INPUT9) == ''\nassert solution(INPUT10) == ''\nassert solution(INPUT11) == ''\nassert solution(INPUT12) == ''\nassert solution(INPUT13) == ''\nassert solution(INPUT14) == ''\nassert solution(INPUT15) == ''\nassert solution(INPUT16) == ''\nassert solution(INPUT17) == ''\nassert solution(INPUT18) == ''\nassert solution(INPUT19) == ''\nassert solution(INPUT20) == ''\nassert solution(INPUT21) == ''\nassert solution(INPUT22) == ''\nassert solution(INPUT23) == ''\nassert solution(INPUT24) == ''\nassert solution(INPUT25) == ''\nassert solution(INPUT", "solution('''\n6 2\n010010\n''') == '''\n6\n'''\nassert solution('''\n3 1\n100\n''') == '''\n3\n'''\nassert solution('''\n2 0\n01\n''') == '''\n3\n'''\nassert solution('''\n4 0\n1010\n''') == '''\n4\n'''\nassert solution('''\n4 1\n1010\n''') == '''\n8\n'''\nassert solution('''\n4 2\n1010\n''') == '''\n16\n'''\nassert solution('''\n3 2\n001\n''') == '''\n1\n'''\nassert solution('''\n3 2\n111\n''') == '''\n3\n'''\nassert solution('''\n3 2\n000\n''') == '''\n1\n'''\nassert solution('''\n5 1\n10011\n''') == '''\n5\n'''\nassert solution('''\n4 2\n0001\n''') == '''\n4\n'''\nassert solution('''\n4 1\n1111\n''') == '''\n8\n'''\nassert solution('''\n4 2\n1111\n''') == '''\n16\n'''\nassert solution('''\n6 3\n11", "solution('''\n3 2\n110\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n4 2\n1100\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4 2\n0110\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4 3\n1110\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n4 1\n0101\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n4 1\n1010\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n5 3\n00111\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n5 3\n01011\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n5 3\n11000\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n5 3\n11001\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n5 3\n11010\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n", "solution('''\n2 0\n01\n''') == '1'\nassert solution('''\n2 1\n10\n''') == '2'\nassert solution('''\n3 2\n111\n''') == '3'\nassert solution('''\n3 1\n101\n''') == '3'\nassert solution('''\n3 0\n000\n''') == '1'\nassert solution('''\n3 2\n000\n''') == '0'\nassert solution('''\n3 2\n001\n''') == '2'\nassert solution('''\n3 2\n010\n''') == '2'\nassert solution('''\n3 2\n100\n''') == '2'\nassert solution('''\n3 2\n011\n''') == '2'\nassert solution('''\n3 2\n110\n''') == '2'\nassert solution('''\n3 2\n101\n''') == '3'\nassert solution('''\n3 2\n111\n''') == '3'\nassert solution('''\n4 2\n0111\n''') == '4'\nassert solution('''\n4 2\n1011\n''') == '5'\nassert solution('''\n4 2\n1101\n''') == '5'\nassert solution('''\n4 2\n11", "solution(\"\"\"4 3\n1001\n\"\"\") == \"\"\"4\n\"\"\"\nassert solution(\"\"\"4 2\n0101\n\"\"\") == \"\"\"4\n\"\"\"\nassert solution(\"\"\"4 0\n0101\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"3 2\n111\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"5 2\n10101\n\"\"\") == \"\"\"8\n\"\"\"\nassert solution(\"\"\"5 0\n10101\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"5 4\n10101\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"5 3\n10101\n\"\"\") == \"\"\"2\n\"\"\"\nassert solution(\"\"\"5 1\n10101\n\"\"\") == \"\"\"2\n\"\"\"\nassert solution(\"\"\"5 4\n11111\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"2 0\n11\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"3 1\n000\n\"\"\") == \"\"\"0\n\"\"\"\nassert solution(\"\"\"5 1\n00000\n\"\"\") == \"\"\"0\n\"\"\"\nassert solution(\"\"\"4 3\n0001\n\"\"\") == \"\"\"0\n\"\"\"\nassert solution(\"\"\"4 1\n1111\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"5 1\n11111\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution(\"\"\"5 3\n11111\n\"\"\") == \"\"\"1\n\"\"\"\nassert solution", "solution('''4 1\n0010''') == '3'\nassert solution('''5 3\n00101''') == '9'\nassert solution('''10 5\n1101010100''') == '333'", "solution('''\n6 3\n101010\n''') == '''\n3\n'''\n\nassert solution('''\n6 4\n101010\n''') == '''\n7\n'''\n\nassert solution('''\n6 5\n101010\n''') == '''\n7\n'''\n\nassert solution('''\n6 1\n100100\n''') == '''\n7\n'''\n\nassert solution('''\n1 0\n0\n''') == '''\n1\n'''\n\nassert solution('''\n5 1\n11111\n''') == '''\n1\n'''\n\nassert solution('''\n5 0\n00000\n''') == '''\n1\n'''\n\nassert solution('''\n5 2\n11111\n''') == '''\n3\n'''\n\nassert solution('''\n5 3\n11111\n''') == '''\n5\n'''\n\nassert solution('''\n5 4\n11111\n''') == '''\n1\n'''\n\nassert solution('''\n4 3\n1111\n''') == '''\n1\n'''\n\nassert solution('''\n4 2\n0101\n''') == '''\n3\n'''\n\nassert solution('''\n4 2\n0110\n''') == '", "solution(\"\") == \"\", \"case 1 failed\"\nassert solution(\"\") == \"\", \"case 2 failed\"\nassert solution(\"\") == \"\", \"case 3 failed\"\n\n# submit the solution to codeforces\nsubprocess.run([\"python\", \"submission.py\"])", "solution('''\n4 2\n0101\n''') == '''\n4\n'''\nassert solution('''\n4 1\n1101\n''') == '''\n1\n'''\nassert solution('''\n1 0\n0\n''') == '''\n1\n'''\nassert solution('''\n5 2\n01111\n''') == '''\n5\n'''\nassert solution('''\n6 0\n101010\n''') == '''\n1\n'''\nassert solution('''\n10 4\n1011001001\n''') == '''\n8\n'''\nassert solution('''\n5 5\n11111\n''') == '''\n1\n'''\nassert solution('''\n2 1\n10\n''') == '''\n2\n'''\nassert solution('''\n4 4\n1111\n''') == '''\n2\n'''\nassert solution('''\n5 1\n10011\n''') == '''\n2\n'''\nassert solution('''\n10 6\n1111111000\n''') == '''\n30\n'''\nassert solution('''\n6 4\n010111\n''') == '''\n2\n'''\nassert solution('''\n6 4\n110101\n''') == '''\n2\n'''\nassert", "solution(\"\"\"\n5 1\n11001\n\"\"\") == \"\"\"\n7\n\"\"\"\nassert solution(\"\"\"\n2 1\n01\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n5 1\n11111\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n5 1\n00000\n\"\"\") == \"\"\"\n5\n\"\"\"\nassert solution(\"\"\"\n5 2\n11001\n\"\"\") == \"\"\"\n13\n\"\"\"\nassert solution(\"\"\"\n5 2\n11111\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n5 2\n00000\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n5 3\n11001\n\"\"\") == \"\"\"\n19\n\"\"\"\nassert solution(\"\"\"\n5 3\n11111\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n5 3\n00000\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2 0\n01\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n2 0\n00\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n2 0\n11\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n3 0\n010\n\"\"\") == \"\"\"\n2\n\"\"\"\nassert solution(\"\"\"\n3 0\n001\n\"\"\") == \"\"\"\n3\n\"\"\"\nassert solution(\"\"\"\n3 0\n100\n", "solution('''\n4 0\n0110\n''') == '4'\nassert solution('''\n4 1\n0110\n''') == '2'\nassert solution('''\n2 1\n01\n''') == '1'\nassert solution('''\n3 1\n001\n''') == '0'\nassert solution('''\n4 2\n0110\n''') == '1'\nassert solution('''\n4 3\n0110\n''') == '0'\nassert solution('''\n10 4\n1111111111\n''') == '1'\nassert solution('''\n10 5\n1111111111\n''') == '0'\nassert solution('''\n10000 1\n1\n''') == '1'\nassert solution('''\n10000 1\n0\n''') == '0'\nassert solution('''\n10000 5\n000000000000000000000000000011101010100000000000001000010100010100001110101111010010110100011111010111101101110100101101000111011011110101010000101010100001101010110101011010011011010011110110110101011110101111010011111101000001011110101110100101101000111110101111011011101001011010001110110111", "solution(r'''\n6 3\n101100\n''') == r'''\n1\n'''\n\nassert solution(r'''\n6 4\n101100\n''') == r'''\n3\n'''\n\nassert solution(r'''\n5 2\n10100\n''') == r'''\n2\n'''\n\nassert solution(r'''\n5 1\n00000\n''') == r'''\n1\n'''\n\nassert solution(r'''\n4 2\n1111\n''') == r'''\n1\n'''\n\nassert solution(r'''\n3 2\n110\n''') == r'''\n1\n'''\n\nassert solution(r'''\n3 1\n110\n''') == r'''\n3\n'''\n\nassert solution(r'''\n4 3\n1111\n''') == r'''\n1\n'''\n\nassert solution(r'''\n5 1\n01010\n''') == r'''\n1\n'''\n\nassert solution(r'''\n5 3\n10010\n''') == r'''\n3\n'''\n\nassert solution(r'''\n5 2\n01000\n''') == r'''\n2\n'''\n\nassert solution(r'''\n3 3\n111\n''') == r'''\n1", "solution(\"\"\"4 2\n0011\"\"\") == \"5\"\nassert solution(\"\"\"7 3\n1101010\"\"\") == \"17\"\nassert solution(\"\"\"4 0\n0101\"\"\") == \"1\"\nassert solution(\"\"\"1 0\n0\"\"\") == \"1\"\nassert solution(\"\"\"10 0\n1010101010\"\"\") == \"1\"\nassert solution(\"\"\"10 2\n1111111111\"\"\") == \"1\"\nassert solution(\"\"\"3 0\n000\"\"\") == \"1\"\nassert solution(\"\"\"3 1\n111\"\"\") == \"1\"\nassert solution(\"\"\"2 0\n00\"\"\") == \"1\"\nassert solution(\"\"\"2 1\n11\"\"\") == \"1\"\nassert solution(\"\"\"2 1\n10\"\"\") == \"2\"\nassert solution(\"\"\"2 2\n11\"\"\") == \"1\"\nassert solution(\"\"\"3 2\n011\"\"\") == \"3\"\nassert solution(\"\"\"3 2\n111\"\"\") == \"3\"\nassert solution(\"\"\"3 3\n111\"\"\") == \"1\"\nassert solution(\"\"\"5 2\n01001\"\"\") == \"8\"\nassert solution(\"\"\"5 2\n01011\"\"\") == \"10\"\nassert solution(\"\"\"5 2\n10100\"\"\") == \"6\"\nassert solution(\"\"\"5 2\n10101\"\"\") == \"8\"\nassert solution(\"", "solution('''5 3\n11011''') == '''13'''\nassert solution('''2 1\n01''') == '''2'''\nassert solution('''3 2\n111''') == '''1'''\nassert solution('''3 1\n110''') == '''3'''\nassert solution('''3 0\n100''') == '''1'''\nassert solution('''4 2\n0101''') == '''4'''\nassert solution('''6 3\n001011''') == '''7'''\nassert solution('''7 3\n1001101''') == '''13'''\nassert solution('''4 3\n1110''') == '''2'''\nassert solution('''7 4\n1110110''') == '''4'''\nassert solution('''5 5\n11111''') == '''1'''\nassert solution('''4 2\n0111''') == '''5'''\nassert solution('''4 3\n1001''') == '''4'''\nassert solution('''4 4\n0111''') == '''2'''\nassert solution('''3 2\n010''') == '''3'''\nassert solution('''3 3\n001''') == '''2'''\nassert solution", "solution('''\n2 1\n01\n''') == '2'\n\nassert solution('''\n3 2\n001\n''') == '2'\n\nassert solution('''\n3 1\n100\n''') == '1'\n\nassert solution('''\n3 1\n001\n''') == '3'\n\nassert solution('''\n3 2\n010\n''') == '4'\n\nassert solution('''\n4 2\n1001\n''') == '4'\n\nassert solution('''\n4 3\n0011\n''') == '4'\n\nassert solution('''\n4 1\n0001\n''') == '4'\n\nassert solution('''\n4 1\n0100\n''') == '3'\n\nassert solution('''\n4 1\n0110\n''') == '5'\n\nassert solution('''\n5 2\n01001\n''') == '5'\n\nassert solution('''\n5 1\n01011\n''') == '5'\n\nassert solution('''\n5 2\n01011\n''') == '10'\n\nassert solution('''\n5 2\n01110\n''') == '10'\n\nassert solution('''\n5 2\n01000\n''') == '6'\n\nassert solution('''\n5 2\n"], "finish_reason": ["stop", "length", "stop", "length", "stop", "length", "length", "length", "stop", "length", "stop", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "stop", "length", "length", "length", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "length", "length", "length", "length", "length"], "sum_logprob": [-80.44742501330343, -129.37648915147204, -29.2131740114, -88.99431867141101, -117.73383818025098, -70.04173224564596, -161.01047597191797, -85.0492343711864, -17.065694468300002, -64.81712295592001, -7.391658030710001, -90.85154878658899, -25.498363608, -107.39382042283403, -71.00970771739996, -86.49350524712003, -88.56828992903239, -137.64414298536312, -91.84323761304498, -110.84124847406987, -23.80829176707999, -108.91781206861796, -103.78046223487307, -64.993150880521, -132.5921630324539, -12.699492989400001, -45.78191760578996, -97.98180051318408, -32.37811767391999, -63.578481796566, -45.7901044409, -71.79036480136006, -106.28431723865, -68.16353570098502, -193.63541850770486, -40.87685826094437, -101.27634681320038, -74.42841120221101, -57.879960243085996, -107.05268687036293, -39.85687928259001, -85.34766669835498, -30.507130491119995, -120.297686067169, -76.2799320899521, -230.20315489594492, -92.03841016495204, -118.83816852739, -132.83680300638102, -103.32173525296803], "mean_logprob": [-0.3673398402433945, -0.43125496383824, -0.7687677371421052, -0.2966477289047033, -0.4635190479537441, -0.23347244081882, -0.53670158657306, -0.28349744790395465, -0.853284723415, -0.21605707651973333, -0.461978626919375, -0.30283849595529666, -1.01993454432, -0.3579794014094467, -0.7554224225255319, -0.28831168415706665, -0.2952276330967747, -0.45881380995121, -0.3061441253768167, -0.3694708282469, -0.36628141180123075, -0.36305937356206003, -0.34593487411624335, -0.21664383626840333, -0.4419738767748467, -0.3097437314487805, -0.1526063920193, -0.3266060017106133, -0.30836302546590477, -0.21192827265522, -0.9742575412957447, -0.23930121600453333, -0.35428105746216665, -0.22721178566995, -0.6454513950256834, -0.13625619420314766, -0.3375878227106677, -0.24809470400737, -0.19293320081028667, -0.35684228956787667, -0.7815074369135294, -0.28449222232785, -0.46934046909415383, -0.4009922868905633, -0.25426644029984, -0.76734384965315, -0.30679470054984, -0.3961272284246333, -0.44278934335460335, -0.34440578417656]}
{"prompt": "'''\nPetya is a math teacher. n of his students has written a test consisting of m questions. For each student, it is known which questions he has answered correctly and which he has not.\n\nIf the student answers the j-th question correctly, he gets p_j points (otherwise, he gets 0 points). Moreover, the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n1\n4 4\n1 2 3 4\n0001\n1010\n1001\n1100\n\"\"\") == \"\"\"\n1 2 3 4\n\"\"\", \"WA1\"\n\nassert solution(\"\"\"\n1\n5 5\n1 2 3 4 5\n01010\n01010\n01010\n01010\n01010\n\"\"\") == \"\"\"\n1 2 3 4 5\n\"\"\", \"WA2\"\n\nassert solution(\"\"\"\n2\n2 3\n3 2\n100\n001\n3 1\n1 1 1\n1\n1\n1\n\"\"\") == \"\"\"\n3 2 1\n1\n\"\"\", \"WA3\"\n\nassert solution(\"\"\"\n4\n4 3\n0 2 0\n110\n111\n010\n001\n5 5\n1 1 1 1 1\n11111\n11111\n11111\n11111\n11111\n2 3\n1 2\n110\n001\n1 4\n5\n1111\n\"\"\") == \"\"\"\n3 2 1\n1 2 3 4 5\n3 2 1\n5\n\"\"\", \"WA4\"\n\nassert solution(\"\"\"\n4\n4 3\n2 2 2\n110\n001\n111\n101\n2 1\n2 1\n1\n1\n3 1\n0 1 1\n1\n1\n1\n\"\"\") == \"\"\"\n1 2 3\n1\n1 2 3\n\"\"\", \"WA5\"\n\n", "solution('''3\n3 7\n0 0 0\n1110000\n0000000\n0000011\n3 7\n0 0 0\n1100000\n0000000\n0000011\n3 7\n0 0 0\n1100000\n0001000\n0000011''') == '''1 3 2 4 5 6 7\n1 3 2 4 5 6 7\n1 3 2 4 5 6 7'''", "solution('''\n2\n2 2\n0 1\n01\n01\n1 5\n0\n0\n''') == '''\n1 1\n1 2 3 4 5'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 3\n0 0\n011\n101\n''') == '''\n1 2 3'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 5\n0 0\n01100\n01100\n''') == '''\n1 1 2 3 4 5'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n0 0\n110\n110\n1 4\n0\n1110\n''') == '''\n1 1 2 3\n1 2 3 4'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 4\n1\n1111\n''') == '''\n1 2 3 4'''\n\n# put your own test here\n\n\nimport os\n\n# Used for local testing only\nif __name__ == '__main__':\n    file_input = open('input.txt', 'r')\n    print(solution(file_input.read()))\n    file_input.close()\n    os.remove('input.txt')", "solution('''\n2\n3 4\n2 3 3\n1010\n1100\n1001\n3 4\n1 2 3\n1000\n1000\n0000\n''') == '''\n4 1 2 3\n4 3 2 1\n'''", "solution('''\n1\n3 5\n8 8 8\n11110\n00011\n01010\n''') == '''\n5 4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n5 3\n110\n010\n3 4\n5 5 5\n0101\n0101\n1110\n''') == '''\n1 2 3\n4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n5 3\n110\n010\n3 4\n5 5 5\n1110\n0101\n0101\n''') == '''\n1 2 3\n4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n5 3\n110\n010\n3 4\n5 5 5\n0101\n0101\n0101\n''') == '''\n1 2 3\n3 2 1 4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n5 3\n110\n010\n3 4\n5 5 5\n1001\n0101\n0101\n''') == '''\n1 2 3\n4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n5 3\n110", "solution(\"\"\"3\n3 5\n5 4 3\n10011\n10010\n10001\n1 3\n10\n101\n3 6\n6 6 6\n010001\n010110\n010101\"\"\") == \"\"\"1 2 3 4 5 6\n5\n5 6 5 4 1 2\"\"\"", "'''0\n0\n1\n2\n3\n4\n0\n0\n0\n0\n1\n1\n1\n0\n1\n1\n1\n1\n0\n0\n0\n0\n1\n1\n1\n1\n1\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n0\n0\n", "solution(\"\"\"\n1\n3 10\n10 10 10\n1110001100\n1001001000\n1001001000\n\"\"\") == \"\"\"\n6 10 1 9 7 5 3 8 4 2\n\"\"\", \"Example #1\"\n\nassert solution(\"\"\"\n1\n5 10\n10 10 10 10 10\n0110110101\n1111111111\n0001110000\n1011101101\n0111011101\n\"\"\") == \"\"\"\n1 2 3 4 5 6 7 8 9 10\n\"\"\", \"Example #2\"\n\nassert solution(\"\"\"\n1\n3 10\n10 10 10\n1110001100\n1001001000\n1001001000\n\"\"\") == \"\"\"\n6 10 1 9 7 5 3 8 4 2\n\"\"\", \"Example #3\"\n\nassert solution(\"\"\"\n1\n4 5\n4 4 4 4\n11110\n01000\n10111\n11101\n\"\"\") == \"\"\"\n5 1 2 3 4\n\"\"\", \"Example #4\"\n\nassert solution(\"\"\"\n1\n1 10\n0\n0000000000\n\"\"\") == \"\"\"\n1 2 3 4 5 6 7 8 9 10\n\"\"\", \"Example #5\"\n\nassert solution(\"\"\"\n1\n2 10\n0 0\n0000000000\n0000000000\n\"\"\") == \"\"\"\n1 2 3 4 5 6 7 8 9 10\n\"\"\", \"Example #6\"\n\nassert", "solution('''\n2\n2 4\n4 3\n1010\n0101\n1 1\n1\n1\n''') == '''\n3 1 2 4\n1\n'''\n\nassert solution('''\n1\n3 3\n1 2 3\n100\n001\n010\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n1\n4 5\n4 3 4 5\n01100\n10001\n11001\n10001\n''') == '''\n1 2 4 5 3\n'''\n\nassert solution('''\n1\n5 10\n1 1 1 1 1\n1111111111\n1111111111\n1111111111\n1111111111\n1111111111\n''') == '''\n1 2 3 4 5 6 7 8 9 10\n'''\n\n# submit\nimport os\nimport time\nfrom datetime import datetime\n\ndate_format = '%Y-%m-%d_%H:%M:%S'\nnow = datetime.now().strftime(date_format)\n\nfiles = []\n\nif os.path.exists('tests'):\n    files += [\n        ('tests/%s.in' % i, 'tests/%s.out' % i)\n        for i in range(10 ** 6)\n        if os.path.", "solution('''\n1\n2 3\n1 2\n011\n001\n''') == '''\n3 2 1\n'''\n\nassert solution('''\n1\n3 5\n1 2 3\n00100\n01110\n00100\n''') == '''\n2 5 3 1 4\n'''\n\nassert solution('''\n1\n4 10\n1 2 3 4\n0010001010\n1101101000\n0111111110\n1101000100\n''') == '''\n5 7 4 8 2 1 3 6 9 10\n'''\n\nassert solution('''\n1\n2 7\n2 3\n1101000\n0011100\n''') == '''\n4 2 1 5 3 6 7\n'''\n\nassert solution('''\n1\n3 8\n3 4 3\n01011000\n10101000\n01011100\n''') == '''\n5 7 3 8 2 1 4 6\n'''\n\nassert solution('''\n1\n1 5\n1\n01111\n''') == '''\n1 2 3 4 5\n'''\n\nassert solution('''\n1\n1 5\n1\n11111\n''') == '''\n5 4 3 2 1\n'''\n\nassert solution('''\n1\n1 5\n1\n00000\n''') == '''\n5", "solution(r'''\n3\n2 3\n2 2\n01\n11\n3 3\n3 3 3\n111\n000\n111\n3 3\n1 1 2\n101\n000\n001\n''') == r'''\n3 1 2\n1 2 3\n1 2 3\n'''\n\n# get input from stdin\ntext = ''\nfor line in sys.stdin:\n    text += line\n\n# print solution to stdout\nprint(solution(text))", "solution(\"1\\n2 3\\n2 3\\n101\\n110\\n001\") == \"1 2 3\"\nassert solution(\"1\\n3 4\\n1 2 2\\n1010\\n1000\\n0100\") == \"1 1 2 3\"\nassert solution(\"1\\n3 5\\n2 3 2\\n11010\\n11000\\n00010\") == \"1 1 2 4 5\"\nassert solution(\"1\\n1 2\\n1\\n10\") == \"1 2\"\nassert solution(\"1\\n2 4\\n3 3\\n1000\\n0100\") == \"1 2 3 4\"\nassert solution(\"1\\n3 7\\n3 2 1\\n1100000\\n0100000\\n0010000\") == \"1 2 3 4 5 6 7\"\nassert solution(\"1\\n2 3\\n2 3\\n111\\n111\") == \"1 2 3\"\nassert solution(\"1\\n1 3\\n1\\n010\") == \"1 1 3\"\nassert solution(\"1\\n2 4\\n3 2\\n1010\\n1010\") == \"1 2 3 4\"\nassert solution(\"1\\n3 5\\n3 3 3\\n11100\\n11100\\n11100\") == \"1 2 3 4 5\"\nassert solution(\"1\\n2 4", "solution(stdin=read_file('input.txt')) == read_file('output.txt')", "solution(r'''\n3\n3 4\n0 1 2\n0111\n1010\n1010\n3 4\n2 3 3\n1111\n1000\n1010\n3 4\n2 2 3\n1111\n1000\n1010\n''') == r'''\n4 1 2 3\n4 1 2 3\n4 1 2 3\n'''", "solution(\"\"\"3\n3 5\n10 15 10\n11011\n01100\n11011\n3 4\n7 7 7\n1110\n1100\n1111\n3 5\n5 5 5\n11000\n11000\n11000\"\"\") == \"\"\"5 4 3 2 1\n1 2 3 4\n5 4 3 2 1\"\"\"\n\n# run solution\nif __name__ == \"__main__\":\n    import sys\n    print(solution(sys.stdin.read()))", "solution(r'''\n1\n3 5\n5 2 3\n00110\n01011\n11110\n''') == r'''\n2 3 5 4 1\n'''\n\n#\n# def main():\n#     T = int(input())\n#     for case in range(T):\n#         N, M = map(int, input().split())\n#         X = list(map(int, input().split()))\n#         S = [list(map(int, input())) for _ in range(N)]\n#         cur = [0] * M\n#         for i in range(N):\n#             for j in range(M):\n#                 if S[i][j]:\n#                     cur[j] += 1\n#         for i in range(N):\n#             for j in range(M):\n#                 X[i] -= cur[j] * S[i][j]\n#         X = sorted(X)\n#         Mx = X[-1]\n#         assert Mx % N == 0\n#         base = Mx // N\n#         X = [x - base for x in X]\n#         per = list(range(1, M + 1))\n#         for i in range(N):\n#             per[i] += X[i]\n#        ", "solution('''1\n3 6\n4\n110011\n010010\n110101\n''') == '''5 6 4 1 3 2'''\nassert solution('''1\n5 5\n2 2 3 3 3\n11010\n01010\n00101\n01110\n11000\n''') == '''1 2 3 4 5'''\nassert solution('''1\n1 4\n0\n0000\n''') == '''1 2 3 4'''\nassert solution('''1\n1 3\n1\n101\n''') == '''1 2 3'''\nassert solution('''1\n1 5\n1\n10101\n''') == '''1 2 3 4 5'''\nassert solution('''1\n1 5\n2\n11111\n''') == '''1 2 3 4 5'''\nassert solution('''1\n3 5\n2 3 3\n01110\n11111\n00000\n''') == '''2 3 1 4 5'''\nassert solution('''1\n3 5\n1 2 3\n11111\n00000\n00000\n''') == '''5 4 3 2 1'''\nassert solution('''1\n3 5\n1 1 2\n11111\n00000\n00000\n''') == '''5 4 3 2 1'''\nassert solution('''1\n3 5\n1", "solution('''\n1\n1 3\n1\n010\n''') == '''\n1 3 2\n'''\nassert solution('''\n1\n2 3\n2 3\n010\n101\n''') == '''\n3 1 2\n'''\nassert solution('''\n1\n2 3\n1 2\n001\n010\n''') == '''\n3 1 2\n'''\nassert solution('''\n1\n2 3\n2 2\n001\n010\n''') == '''\n2 1 3\n'''\nassert solution('''\n1\n4 10\n4 4 4 4\n1001001000\n1001000101\n0001110000\n1001001010\n''') == '''\n4 7 9 8 5 6 1 2 3 10\n'''\nassert solution('''\n2\n2 3\n1 2\n001\n010\n2 3\n2 2\n001\n010\n''') == '''\n3 1 2\n2 1 3\n'''\nassert solution('''\n2\n1 4\n1\n0001\n1 4\n2\n0101\n''') == '''\n1 2 3 4\n2 1 3 4\n'''\nassert solution('''\n2\n1 5\n3\n11000\n1 5\n2\n00101\n''') == '''\n5 3 4 1 2\n5 1 2", "solution('''\n1\n3 4\n1 2 3\n1100\n0101\n0011\n''') == '''\n2 4 1 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 4\n1 2 3\n0000\n0000\n0000\n''') == '''\n1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 4\n1 2 3\n1111\n1111\n1111\n''') == '''\n4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 4\n4 5 5 4\n1111\n0111\n1111\n0111\n''') == '''\n3 1 4 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 4\n4 5 5 4\n1111\n0111\n1111\n0111\n''') == '''\n3 1 4 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 4\n1 2 3\n1110\n0101\n1010\n''') == '''\n2 4 1 3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 4\n1 2 3\n1010\n0101\n1110\n''') == '", "solution('''1\n3 4\n5\n1010\n1010\n1110\n''') == '''1 2 3 4\n'''\n\nassert solution('''2\n3 2\n2 3\n11\n01\n2 3\n11\n01\n''') == '''1 2\n1 2\n'''\n\nassert solution('''3\n3 2\n2 2\n11\n01\n3 4\n3 3 4\n1000\n0001\n1000\n3 2\n2 3\n11\n01\n''') == '''1 2\n1 2 3 4\n1 2\n'''\n\nassert solution('''4\n1 1\n1\n1\n1 1\n1\n1\n1 1\n1\n1\n1 1\n1\n1\n''') == '''1\n1\n1\n1\n'''\n\nassert solution('''5\n1 2\n2\n10\n1 2\n2\n10\n1 2\n2\n10\n1 2\n2\n10\n1 2\n2\n10\n''') == '''1 2\n1 2\n1 2\n1 2\n1 2\n'''\n\nassert solution('''6\n2 3\n2 3\n011\n011\n2 3\n2 3\n011\n011\n2 3\n2 3\n011\n011\n2 3\n2 3\n011\n011\n2 3", "solution('''\n1\n3 5\n10 15 14\n01010\n11001\n10001\n''') == '''\n5 3 4 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n3 4\n5 10 15\n1001\n1010\n1010\n1 1\n1\n1\n''') == '''\n4 3 2 1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 1\n1\n1\n''') == '''\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n1 10\n1\n1\n1 1\n1\n1\n''') == '''\n10 9 8 7 6 5 4 3 2 1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3\n4 8\n101\n100\n1 2\n2\n10\n''') == '''\n3 2 1\n2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 2\n2 3\n10\n01\n2 2\n2 3\n01\n10\n''') == '''\n2 1\n1 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 4\n3 6 9", "solution('''4\n2 5\n4 2\n10110\n10101\n1 4\n2\n1\n1 1\n1\n2\n0\n2 3\n0 0\n010\n010\n2 3\n1 0\n010\n010\n1 2\n1\n1\n11\n''') == '''4 3 2 1 5\n1 2 3 4\n1 2 3\n1 2 3\n''', 'test 1'\nassert solution('''2\n2 5\n2 3\n10110\n10101\n2 3\n2 1\n010\n010\n''') == '''1 2 4 3 5\n1 2 3\n''', 'test 2'\nassert solution('''2\n2 3\n2 1\n111\n010\n1 4\n1\n1\n1\n''') == '''3 2 1\n1 2 3 4\n''', 'test 3'\nassert solution('''2\n2 3\n1 1\n111\n010\n2 3\n2 1\n001\n010\n''') == '''1 2 3\n1 2 3\n''', 'test 4'\nassert solution('''1\n2 3\n1 1\n111\n010\n''') == '''3 2 1\n''', 'test 5'\nassert solution('''1\n1 4\n1\n1\n1\n''') == '''1 2 3 4\n''',", "solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n# assert solution(\"\") == \"\"\n\n# stress testing\nimport random\n\ndef generate_input(N: int) -> str:\n    return \"\"\n\ndef stress_solution(stdin: str) -> str:\n    return \"\"\n\nwhile True:\n    num_tests = random.randint(1, 3)\n    input = generate_input(num_tests)\n    assert solution(input) == stress_solution(input)", "solution('''\n1\n3 4\n5 5 5\n0101\n0101\n1111\n''') == '1 2 3 4'\nassert solution('''\n1\n3 4\n5 5 5\n1110\n0111\n1111\n''') == '1 2 3 4'\nassert solution('''\n1\n3 4\n2 3 3\n1111\n1111\n1010\n''') == '1 2 4 3'\nassert solution('''\n1\n3 4\n3 4 4\n1111\n1010\n1111\n''') == '2 1 4 3'\nassert solution('''\n1\n4 4\n4 5 5 6\n0101\n1100\n0101\n1001\n''') == '1 2 3 4'\nassert solution('''\n1\n3 6\n2 3 3\n111111\n111111\n101010\n''') == '1 2 4 3 6 5'\nassert solution('''\n1\n3 6\n3 4 4\n111111\n101010\n111111\n''') == '2 1 4 3 6 5'\nassert solution('''\n1\n4 6\n4 5 5 6\n010101\n110001\n010101\n100010\n''') == '1 2 3 4 6 5'\nassert solution('''\n1\n4 6\n4 5 5 6\n010101\n11", "solution('''\n1\n3 5\n3 7 11\n11011\n01111\n10101\n''') == '''\n5 4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 5\n2\n11111\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 5\n3 7 11\n11011\n01111\n10101\n''') == '''\n5 4 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 7\n4 5 6\n1001001\n1010100\n0001100\n''') == '''\n5 6 4 7 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 7\n4 5 6\n1001001\n1101100\n0001100\n''') == '''\n7 6 4 5 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 7\n4 5 6\n1001001\n1101100\n0001110\n''') == '''\n7 6 4 5 3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 10\n4 7 9 11\n1101100", "solution('''2\n2 3\n3 4\n001\n101\n3 4\n3 2 1\n1010\n0101\n1001''') == '''2 3 1\n1 2 3\n3 1 2'''", "solution(SAMPLE1) == SAMPLE1_SOLUTION\nassert solution(SAMPLE2) == SAMPLE2_SOLUTION\nassert solution(SAMPLE3) == SAMPLE3_SOLUTION\nassert solution(SAMPLE4) == SAMPLE4_SOLUTION\nassert solution(SAMPLE5) == SAMPLE5_SOLUTION", "solution(\"\") == \"\"", "solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\nassert solution(sample_input_4) == sample_output_4\nassert solution(sample_input_5) == sample_output_5\n\n# sample_input_1 = '''\n# 3\n# 2 4\n# 2 2\n# 0110\n# 0100\n# 2 3\n# 2 1\n# 110\n# 010\n# 2 2\n# 1 2\n# 01\n# 01\n# '''\n# sample_output_1 = '''\n# 3 1 2 4\n# 3 2 1\n# 2 1\n# '''\n\n# sample_input_2 = '''\n# 3\n# 2 5\n# 2 4\n# 00000\n# 11100\n# 2 5\n# 3 1\n# 00000\n# 01110\n# 2 5\n# 3 1\n# 00000\n# 01111\n# '''\n# sample_output_2 = '''\n# 1 2 5 3 4\n# 1 2 5 3 4\n# 1 2 5 3 4\n# '''\n\n# sample_input_3 = '''\n# 3\n# 4 4\n# 1 4 1 3\n# 0011\n", "solution('''\n1\n3 10\n25 30 45\n0111111101\n0001111000\n0000000000\n''') == '''\n1 2 3 4 5 6 7 8 9 10\n'''\nassert solution('''\n1\n3 10\n25 30 45\n0001111000\n0111111101\n0000000000\n''') == '''\n1 2 3 4 5 6 7 8 9 10\n'''\nassert solution('''\n1\n3 10\n25 30 45\n0001111000\n0111111101\n0000000001\n''') == '''\n10 1 2 3 4 5 6 7 8 9\n'''\nassert solution('''\n1\n3 10\n25 30 45\n0000000001\n0111111101\n0001111000\n''') == '''\n10 1 2 3 4 5 6 7 8 9\n'''\nassert solution('''\n1\n4 5\n10 15 20 25\n10000\n10000\n10000\n10000\n''') == '''\n1 2 3 4 5\n'''\nassert solution('''\n1\n4 5\n10 15 20 25\n11111\n11111\n11111\n11111\n''') == '''\n1 2 3 4 5\n'''\nassert solution('''\n1\n4 5\n10 15 20 25\n11111\n11101\n11011\n10111\n''') ==", "solution('''\n1\n3 4\n1 2 4\n0100\n0010\n1000\n''') == '''\n2 1 4 3\n'''\n\nassert solution('''\n1\n2 3\n2 3\n110\n001\n''') == '''\n1 2 3\n'''\n\nassert solution('''\n1\n3 4\n1 2 4\n0100\n1000\n1000\n''') == '''\n1 2 4 3\n'''\n\nassert solution('''\n1\n3 4\n1 2 4\n0101\n1001\n1110\n''') == '''\n3 2 1 4\n'''\n\nassert solution('''\n2\n2 3\n2 3\n110\n001\n3 4\n1 2 4\n0101\n1001\n1110\n''') == '''\n1 2 3\n3 2 1 4\n'''\n\nassert solution('''\n1\n2 3\n2 3\n000\n000\n''') == '''\n3 2 1\n'''\n\nassert solution('''\n1\n2 2\n1 2\n00\n00\n''') == '''\n1 2\n'''\n\nassert solution('''\n1\n1 3\n2\n001\n''') == '''\n2 1 3\n'''\n\nassert solution('''\n1\n1 2\n1\n01\n", "solution('''\n1\n3 6\n9 8 7\n100100\n100100\n100100\n''') == '''\n3 2 1 6 5 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 5\n1 1 1\n10001\n10001\n10001\n''') == '''\n2 1 3 5 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 6\n9 8 7\n100100\n100100\n100100\n''') == '''\n3 2 1 6 5 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 6\n3\n111111\n''') == '''\n3 2 1 4 5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n1 4\n2\n1001\n''') == '''\n1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 6\n9 8 7\n100100\n100100\n100100\n''') == '''\n3 2 1 6 5 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 6\n7 6\n010000\n100000\n''') == '''\n6 5 4 3 2 1\n", "solution('''\n1\n2 3\n2 3\n101\n011\n''') == '''\n3 2 1\n'''\n\nprint('All tests passed')", "solution('''\n1\n4 6\n0 1 2 3\n101000\n110100\n101110\n111010\n''') == '''\n6 5 1 2 3 4\n'''\n\nassert solution('''\n2\n3 3\n0 1 2\n101\n110\n101\n3 3\n0 1 2\n101\n110\n101\n''') == '''\n3 2 1\n1 2 3\n'''\n\n# test case 43%\nassert solution('''\n2\n5 10\n0 1 2 3 4\n0010101010\n0101010010\n1101100100\n1001001100\n1001001110\n5 10\n0 1 2 3 4\n0010101010\n0101010010\n1101100100\n1001001100\n1001001110\n''') == '''\n6 7 9 5 1 2 4 3 8 10\n10 9 8 6 7 5 4 3 2 1\n'''\n\nassert solution('''\n2\n4 10\n0 1 2 3\n1010101010\n0101010010\n0101010101\n1001001100\n4 10\n0 1 2 3\n1010101010\n0101010010\n0101010101\n1001001100\n''') == '''\n5 4 2 1 3 7 9 6 8 10\n1 2 4 3 5 6 7 8 9 10", "solution(r'''\n''') == r'''\n'''\nassert solution(r'''\n''') == r'''\n'''\nassert solution(r'''\n''') == r'''\n'''\nassert solution(r'''\n''') == r'''\n'''\n\n# check the performance of solution\nassert solution(r'''\n''') == r'''\n'''\nassert solution(r'''\n''') == r'''\n'''\nassert solution(r'''\n''') == r'''\n'''\nassert solution(r'''\n''') == r'''\n'''", "solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert solution('''\n\n''') == '''\n\n'''\n\n# check the correctness of solution\nassert", "solution('''\n2\n2 3\n2 1\n001\n011\n2 3\n2 1\n001\n011\n''') == '''\n3 2 1\n3 2 1\n'''\n\n# test large dataset\n# assert solution('''\n# ''') == '''\n# '''", "solution(example1) == expected1\nassert solution(example2) == expected2\nassert solution(example3) == expected3\nassert solution(example4) == expected4\nassert solution(example5) == expected5\nassert solution(example6) == expected6\nassert solution(example7) == expected7\nassert solution(example8) == expected8\nassert solution(example9) == expected9\nassert solution(example10) == expected10\nassert solution(example11) == expected11\nassert solution(example12) == expected12\nassert solution(example13) == expected13\nassert solution(example14) == expected14\nassert solution(example15) == expected15\nassert solution(example16) == expected16\nassert solution(example17) == expected17\nassert solution(example18) == expected18\nassert solution(example19) == expected19\nassert solution(example20) == expected20\n\nprint(\"All tests pass!\")", "solution(\"3\\n3 3\\n1 2 3\\n101\\n001\\n001\\n3 3\\n1 2 3\\n101\\n001\\n111\\n3 3\\n2 3 3\\n101\\n001\\n001\") == \"1 3 2\\n1 3 2\\n3 2 1\"", "solution(\n'''\n6\n4 7\n3 5 8 11\n1010000\n1100000\n0110110\n0110010\n2 10\n9 10\n1001000111\n1000111000\n2 10\n9 10\n1110101110\n1101101000\n3 8\n0 1 2\n11000000\n00110000\n00001100\n1 2\n1\n10\n5 1\n0\n0\n0\n0\n0\n'''\n) == '''\n2 3 5 4 6 7 1\n2 10 1 3 4 5 6 7 8 9\n10 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n1 2\n'''", "solution(\"\"\"2\n3 4\n6 6 6\n0111\n0101\n0001\n1 5\n5\n1\"\"\"\n\n) == \"\"\"1 2 4 3\n5 4 3 2 1\"\"\"", "solution('''\n2\n2 5\n0 2\n01000\n11000\n2 5\n0 2\n01000\n11000\n''') == '''\n1 4 2 3 5\n1 4 2 3 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 7\n0 1 2\n0100000\n1100000\n1010000\n''') == '''\n4 7 1 2 3 5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 8\n0 1 2\n01000000\n11000000\n10100000\n''') == '''\n5 7 1 2 3 4 6 8\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 10\n0 1 2 3 4\n0111000001\n1111000001\n1110110001\n1110011101\n1110011011\n''') == '''\n5 6 7 8 10 9 1 2 3 4\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 5\n0 2\n01000\n11000\n3 5\n0 1 2\n01000\n11000\n11000\n''') == '''\n1 4 2 3 5\n1 4 2 3 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1", "solution('''5\n5 5\n0 5 7 9 6\n01011\n01111\n01011\n01111\n01011\n5 5\n0 5 7 9 6\n01011\n11111\n01011\n01111\n01011\n2 5\n1 4\n11011\n01001\n2 5\n1 4\n11011\n01101\n3 5\n1 4 4\n11101\n11100\n10001\n4 5\n1 2 3 4\n11111\n11111\n11111\n11111\n''') == '''5 4 2 3 1\n5 4 2 3 1\n5 1 2 3 4\n5 4 2 3 1\n5 4 3 2 1\n'''", "solution(\"\"\"4\n2 3\n2 3\n011\n001\n2 3\n0 1\n001\n001\n3 4\n1 0 2 0\n0100\n0101\n0000\n4 4\n4 4 4 4\n0111\n0111\n1111\n0111\"\"\") == '''6\n1\n6\n1\n1\n1\n2\n3\n4\n'''\n\n# test_data = r\"\"\"\n# 4\n# 2 3\n# 2 3\n# 011\n# 001\n# 2 3\n# 0 1\n# 001\n# 001\n# 3 4\n# 1 0 2 0\n# 0100\n# 0101\n# 0000\n# 4 4\n# 4 4 4 4\n# 0111\n# 0111\n# 1111\n# 0111\n# \"\"\"\n#\n# print(solution(test_data))", "solution('''\n2\n2 3\n2 4\n011\n101\n2 3\n0 2\n101\n110\n''') == '''\n1 2 3\n3 2 1\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 5\n2 4 6\n11000\n01110\n00111\n''') == '''\n1 3 2 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 5\n1 4 8\n10001\n10001\n10001\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 5\n1 1 1\n00000\n00000\n00000\n''') == '''\n1 2 3 4 5\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n3 6\n1 1 1\n000001\n000001\n000001\n''') == '''\n1 2 3 4 5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 6\n5 3\n111111\n000011\n''') == '''\n4 2 1 3 5 6\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n2 6\n1 0\n000001\n1111", "solution(\"test case\") == \"expected output\"", "solution('''\n4\n4 4\n8 7 8 5\n0111\n0101\n1100\n1001\n4 4\n8 7 8 5\n0111\n0101\n1100\n1001\n4 4\n8 7 8 5\n0111\n0101\n1100\n1001\n4 4\n8 7 8 5\n0111\n0101\n1100\n1001\n''') == '''\n4 3 2 1\n4 3 2 1\n4 3 2 1\n4 3 2 1\n'''", "solution(\"\"\"\n1\n2 2\n1 1\n11\n10\n\"\"\") == \"2 1\"", "solution('''\n2\n3 6\n5 4 5\n101010\n110100\n010001\n3 4\n3 1 2\n1100\n0110\n1100\n''') == '''\n1 2 1 2 1 2\n3 1 1 2\n'''", "solution(\"\"\"\n1\n3 5\n5 7 10\n11010\n10011\n00100\n\"\"\") == \"\"\"\n3 2 1 5 4\n\"\"\", \"Example 1\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 2\n10 5 10\n01\n01\n01\n\"\"\") == \"\"\"\n2 1\n\"\"\", \"Example 2\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 5\n5 10\n10000\n01111\n\"\"\") == \"\"\"\n1 5 2 4 3\n\"\"\", \"Example 3\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n3 5\n5 7 10\n11010\n10011\n00100\n\"\"\") == \"\"\"\n3 2 1 5 4\n\"\"\", \"Example 4\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n2 4\n5 5\n0101\n1110\n\"\"\") == \"\"\"\n4 1 2 3\n\"\"\", \"Example 5\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n4 3\n1 2 3 4\n110\n011\n111\n000\n3 5\n5 7 10\n11010\n10011\n00100\n\"\"\") == \"\"\"\n1 2 3\n3 2 1 5 4\n\"\"\", \"Example 6\"\n\n# check the correctness of solution\nassert solution(\""], "finish_reason": ["length", "stop", "stop", "stop", "length", "stop", "length", "length", "length", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "length", "length", "length", "length", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-158.76850743788398, -47.15676298024001, -140.632345013328, -37.352478383039994, -88.86068972058351, -69.3026430532, -44.29424994194301, -141.30473042434997, -133.68152340069113, -166.86876035913602, -64.123964471359, -132.1876591114929, -14.494675072229999, -54.2778028314, -74.92063223668, -139.00835539035404, -148.0333344072921, -140.2121777659592, -84.97644195389596, -109.71101543407492, -117.71360674136365, -153.9196745304399, -64.48693781082999, -121.14023885881402, -118.498538455925, -43.5221166164, -15.096988807641, -5.97947663, -114.1810862697629, -88.81923121959744, -104.26019963740302, -99.622272701161, -24.599408071000003, -182.45876046918985, -19.938074917824984, -14.491756517645978, -39.63978764685, -27.666067724304984, -43.00586721453799, -143.18156322708998, -41.319820136000004, -117.69165003617499, -113.85862885364503, -104.73980589928897, -124.31335458382492, -13.870528933999998, -41.187765648524, -15.528955459000004, -55.35274362947002, -120.80171729835999], "mean_logprob": [-0.52922835812628, -0.5750824753687804, -0.4883067535185, -0.7047637430762265, -0.2962022990686117, -1.050040046260606, -0.14764749980647668, -0.4710157680811667, -0.4456050780023033, -0.55622920119712, -0.5937404117718426, -0.4406255303716433, -0.60394479467625, -0.704906530277922, -0.7001928246418692, -0.4633611846345133, -0.49344444802430665, -0.46737392588653065, -0.2832548065129867, -0.36570338478025, -0.39237868913787866, -0.5130655817681333, -0.5607559809637391, -0.40380079619604664, -0.3949951281864167, -0.8882064615591837, -0.19110112414735442, -0.9965794383333333, -0.38060362089921, -0.296064104065325, -0.34753399879134333, -0.33207424233720334, -0.6473528439736842, -0.6081958682306333, -0.13942709732744754, -0.04830585505882, -0.5744896760413043, -0.13300994098223556, -0.5734115628605067, -0.9297504105655194, -0.9390868212727272, -0.39230550012058335, -0.7490699266687171, -0.5483759471166963, -0.41437784861275, -1.260957175818182, -0.3813682004492963, -0.6470398107916666, -0.9543576487839656, -0.40267239099453334]}
{"prompt": "'''\nLet's call a set of positive integers a_1, a_2, ..., a_k quadratic if the product of the factorials of its elements is a square of an integer, i. e. \u220f_{i=1}^{k} a_i! = m^2, for some integer m.\n\nYou are given a positive integer n.\n\nYour task is to find a quadratic subset of a set 1, 2, ..., n of maximum size. If there are multiple answers, print any of them.\n\nInput\n\nA single line contains a single integer n (1 \u2264 n \u2264 10^6).\n\nOutput\n\nIn the first line, print a single integer \u2014 the size of the maximum subset. In the second line, print the subset itself in an arbitrary order.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"3\") == '1\\n1', \"expected: 1\\n1\"\nassert solution(\"4\") == '2\\n1 2', \"expected: 2\\n1 2\"\nassert solution(\"20\") == '8\\n1 2 3 4 6 8 10 12', \"expected: 8\\n1 2 3 4 6 8 10 12\"", "solution('''0''') == '''0'''\n\n# check the correctness of solution\nassert solution('''1''') == '''1\n1'''\n\n# check the correctness of solution\nassert solution('''1''') == '''1\n1'''\n\n# check the correctness of solution\nassert solution('''2''') == '''2\n1 2'''\n\n# check the correctness of solution\nassert solution('''4''') == '''4\n1 2 3 4'''\n\n# check the correctness of solution\nassert solution('''16''') == '''7\n2 3 5 6 7 11 13'''\n\n# check the correctness of solution\nassert solution('''10''') == '''4\n2 3 5 6'''\n\n# check the correctness of solution\nassert solution('''50''') == '''9\n2 3 5 6 7 11 13 19 23'''\n\n# check the correctness of solution\nassert solution('''5''') == '''3\n1 2 3'''\n\n# check the correctness of solution\nassert solution('''10''') == '''4\n2 3 5 6'''\n\n# check the correctness of solution\nassert solution('''25''') == '''5\n2 3 5 6 7'''\n\n# check the correctness of", "solution('''\n1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n5\n''') == '''\n4\n1 2 3 5\n'''\n\nassert solution('''\n10\n''') == '''\n5\n1 2 3 4 6\n'''\n\nassert solution('''\n20\n''') == '''\n5\n1 2 3 4 10\n'''\n\nassert solution('''\n100\n''') == '''\n6\n1 2 3 4 5 9\n'''\n\nassert solution('''\n999999\n''') == '''\n9\n1 2 3 4 5 6 7 11 99\n'''\n\nassert solution('''\n1000000\n''') == '''\n9\n1 2 3 4 5 6 7 11 99\n'''\n\nprint('all tests has passed')", "solution(problem_input) == problem_output\n \nprint(\"Input:\\n\\t{}\\nOutput:\\n\\t{}\".format(problem_input, solution(problem_input)))\n\n# run `python main.py <path-to-input-file>`\n# stdin is redirected to input file\nif __name__ == \"__main__\":\n    with open(sys.argv[1], 'r') as file:\n        stdin = file.read()\n        print(solution(stdin))", "solution('''\n''') == '''\n'''\n\n# get the input\nN = int(input())\n\n# get the max prime factor\nmax_pf = 1\nwhile N > 1:\n    pf = 2\n    while N % pf != 0:\n        pf += 1\n    max_pf = max(max_pf, pf)\n    N //= pf\n\nprint(max_pf)", "solution('''\n5\n''') == '''\n3\n1 4 5\n'''\n\nassert solution('''\n10\n''') == '''\n5\n1 2 3 5 6\n'''\n\nassert solution('''\n100\n''') == '''\n8\n1 2 4 5 8 10 16 20\n'''\n\nassert solution('''\n10**6\n''') == '''\n8\n1 2 4 5 8 10 16 20\n'''", "solution('''1\\n''') == '''1\\n1\\n'''\nassert solution('''5\\n''') == '''3\\n3 4 5\\n'''\nassert solution('''8\\n''') == '''5\\n2 3 4 6 8\\n'''\nassert solution('''17\\n''') == '''10\\n2 3 4 5 6 7 8 9 11 12 13\\n'''\nassert solution('''60\\n''') == '''15\\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\\n'''\nassert solution('''100\\n''') == '''21\\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\\n'''", "(solution(\"3\") == \"2\\n1 2\\n\")\nassert (solution(\"5\") == \"2\\n2 3\\n\")\nassert (solution(\"2\") == \"1\\n2\\n\")\nassert (solution(\"1\") == \"1\\n1\\n\")\nassert (solution(\"6\") == \"3\\n1 2 3\\n\")\nassert (solution(\"8\") == \"3\\n2 3 4\\n\")\nassert (solution(\"9\") == \"3\\n1 2 6\\n\")\nassert (solution(\"10\") == \"4\\n1 2 3 4\\n\")\nassert (solution(\"11\") == \"4\\n1 2 3 5\\n\")\nassert (solution(\"12\") == \"4\\n1 2 3 6\\n\")\nassert (solution(\"13\") == \"4\\n1 2 3 7\\n\")\nassert (solution(\"14\") == \"4\\n1 2 3 8\\n\")\nassert (solution(\"15\") == \"4\\n1 2 3 9\\n\")\nassert (solution(\"16\") == \"4\\n1 2 3 10\\n\")\nassert (solution(\"17\") == \"4\\n1 2 3 11\\n\")\nassert (solution(\"18\") == \"4\\n1 2", "solution('''10''') == '''4\n1 4 6 10'''\n\n# get the input\nn = int(input())\n\n# get the list of numbers\nnumbers = [i for i in range(1, n+1)]\n\n# initialize the list of prime numbers\nprimes = []\n\n# check for prime numbers\nfor i in numbers:\n    is_prime = True\n    for j in range(2, int(i**0.5)+1):\n        if i % j == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(i)\n\n# create dict with key = prime number, value = max number of dividers\ndividers = {}\nfor i in primes:\n    dividers[i] = 0\n\n# initialize dict with key = number, value = number of dividers\ndiv_count = {}\nfor i in numbers:\n    div_count[i] = 1\n\n# count the number of dividers for each number\nfor i in range(2, n+1):\n    for j in primes:\n        if i % j == 0:\n            div_count[i] *= div_count[j] + 1\n\n# count the maximum number of dividers for each prime number\nfor i in range", "solution('''\n1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n2\n''') == '''\n1\n1\n'''\n\nassert solution('''\n3\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n4\n''') == '''\n2\n1 3\n'''\n\nassert solution('''\n5\n''') == '''\n2\n1 4\n'''\n\nassert solution('''\n6\n''') == '''\n3\n1 2 3\n'''\n\nassert solution('''\n7\n''') == '''\n2\n1 6\n'''\n\nassert solution('''\n8\n''') == '''\n2\n1 7\n'''\n\nassert solution('''\n9\n''') == '''\n3\n1 2 6\n'''\n\nassert solution('''\n10\n''') == '''\n2\n1 9\n'''\n\nassert solution('''\n11\n''') == '''\n3\n1 2 8\n'''\n\nassert solution('''\n12\n''') == '''\n3\n1 2 9\n'''\n\nassert solution('''\n13\n''') == '''\n3\n1 2 12\n'''\n", "solution(\"\") == \"\";\nassert solution(\"\") == \"\";\nassert solution(\"\") == \"\";\nassert solution(\"\") == \"\";\nassert solution(\"\") == \"\";\n\n# check the performance of solution\nassert solution(\"\") == \"\";\nassert solution(\"\") == \"\";\nassert solution(\"\") == \"\";\nassert solution(\"\") == \"\";\nassert solution(\"\") == \"\";", "solution('''\n5\n''') == '''\n5\n1 2 3 4 5\n'''\n\nassert solution('''\n3\n''') == '''\n3\n1 2 3\n'''\n\nassert solution('''\n4\n''') == '''\n2\n1 3\n'''\n\nassert solution('''\n1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n6\n''') == '''\n6\n1 2 3 4 5 6\n'''\n\nassert solution('''\n7\n''') == '''\n6\n1 2 3 4 5 6\n'''\n\nassert solution('''\n9\n''') == '''\n6\n1 2 3 4 5 6\n'''\n\nassert solution('''\n10\n''') == '''\n3\n1 3 5\n'''\n\nassert solution('''\n1000\n''') == '''\n4\n1 3 5 7\n'''\n\nassert solution('''\n2000\n''') == '''\n5\n1 3 5 7 11\n'''\n\nassert solution('''\n1000000\n''') == '''\n14\n1 3 5 7 11 13 17 19 23 29 31 37 41 43\n'''", "solution(\"4\") == \"2\\n3 4\", \"error\"\nassert solution(\"6\") == \"3\\n3 4 5\", \"error\"\nassert solution(\"7\") == \"2\\n6 7\", \"error\"\nassert solution(\"8\") == \"3\\n3 4 7\", \"error\"\nassert solution(\"9\") == \"3\\n3 4 8\", \"error\"\nassert solution(\"10\") == \"3\\n3 4 9\", \"error\"\nassert solution(\"11\") == \"4\\n3 4 7 9\", \"error\"\nassert solution(\"12\") == \"4\\n3 4 7 10\", \"error\"\nassert solution(\"13\") == \"4\\n3 4 7 11\", \"error\"\nassert solution(\"14\") == \"4\\n3 4 7 12\", \"error\"\nassert solution(\"15\") == \"4\\n3 4 7 13\", \"error\"\nassert solution(\"16\") == \"4\\n3 4 7 14\", \"error\"\nassert solution(\"17\") == \"4\\n3 4 7 15\", \"error\"\nassert solution(\"18\") == \"4\\n3 4 7 16\", \"error\"\nassert solution(\"19\") == \"4\\n3 4 7 17\", \"error\"\nassert solution(\"20\") == \"4\\n3 4 7 18\", \"error\"\nassert solution(\"21\")", "solution(stdin='''\\\n10\n''') == '''\\\n2\n7 4\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\\\n5\n''') == '''\\\n1\n5\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\\\n7\n''') == '''\\\n2\n3 5\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\\\n15\n''') == '''\\\n3\n5 6 7\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\\\n100\n''') == '''\\\n4\n15 20 25 30\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\\\n29\n''') == '''\\\n2\n4 8\n'''\n\n# check the correctness of solution\nassert solution(stdin='''\\\n1000000\n''') == '''\\\n10\n945 720 615 540 495 468 465 440 408 405\n'''", "solution('''5''') == '''1\n5'''\nassert solution('''1''') == '''1\n1'''\nassert solution('''10''') == '''3\n2 3 5'''\nassert solution('''13''') == '''4\n1 2 3 7'''\nassert solution('''100000''') == '''9\n2 3 5 7 11 13 17 19 23'''\nprint('CORRECT')", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n", "solution(\"\") == \"\", \"Case 1\"\nassert solution(\"\") == \"\", \"Case 2\"\nassert solution(\"\") == \"\", \"Case 3\"\nassert solution(\"\") == \"\", \"Case 4\"\nassert solution(\"\") == \"\", \"Case 5\"\nassert solution(\"\") == \"\", \"Case 6\"\nassert solution(\"\") == \"\", \"Case 7\"\nassert solution(\"\") == \"\", \"Case 8\"\nassert solution(\"\") == \"\", \"Case 9\"\nassert solution(\"\") == \"\", \"Case 10\"\n\n# submit solution\nprint(solution(sys.stdin.read()))", "solution('''\n4\n''') == '''\n2\n2 3\n'''\n\nprint(solution('''\n4\n'''))", "solution('''\n6\n''') == '''\n3\n1 2 3\n'''\n\nassert solution('''\n4\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n10\n''') == '''\n4\n1 2 3 4\n'''\n\nassert solution('''\n100\n''') == '''\n12\n1 2 3 4 5 6 7 8 9 10 11 12\n'''\n\n# read input from standard input\nn = int(input())\nprint(solution(n))", "solution('''\n5\n''') == '''\n3\n1 2 3\n'''\n\nassert solution('''\n10\n''') == '''\n5\n1 2 3 4 5\n'''\n\nassert solution('''\n1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n2\n''') == '''\n1\n1\n'''\n\nassert solution('''\n3\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n4\n''') == '''\n2\n1 2\n'''\n\nassert solution('''\n6\n''') == '''\n3\n1 2 3\n'''\n\nassert solution('''\n7\n''') == '''\n4\n1 2 3 4\n'''\n\nassert solution('''\n8\n''') == '''\n4\n1 2 3 4\n'''\n\nassert solution('''\n9\n''') == '''\n4\n1 2 3 4\n'''\n\nassert solution('''\n11\n''') == '''\n5\n1 2 3 4 5\n'''\n\nassert solution('''\n12\n''') == '''\n5\n1 2 3 4 5\n'''\n\nassert solution('''\n13\n''')", "solution('''\n1\n''') == '''\n1\n1\n'''\n\n# submit solution\n# TLE\n\n# benchmark\n# larger than 100000 can cause the memory limit exceed\n# 1000000 TLE\n# 100000 TLE\n# 10000 TLE\n# 1000 TLE\n# 100 TLE\n# 10 TLE\n\n# test cases\n# small input\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# 11\n# 12\n# 13\n# 14\n# 15\n# 16\n# 17\n# 18\n# 19\n# 20\n# 21\n# 22\n# 23\n# 24\n# 25\n# large input\n# 100\n# 200\n# 300\n# 400\n# 500\n# 600\n# 700\n# 800\n# 900\n# 1000\n# 2000\n# 3000\n# 4000\n# 5000\n# 6000\n# 7000\n# 8000\n# 9000\n# 10000\n# 100000\n# 1000000", "solution('''0\n''') == '''8\n1 2 3 4 5 6 7 8\n'''\nassert solution('''0\n''') == '''9\n1 2 3 4 5 6 7 8 9\n'''\nassert solution('''0\n''') == '''7\n1 2 3 4 5 6 7\n'''\nassert solution('''0\n''') == '''5\n1 2 3 4 5\n'''\nassert solution('''0\n''') == '''7\n1 2 3 4 5 6 7\n'''\nassert solution('''0\n''') == '''6\n1 2 3 4 5 6\n'''\nassert solution('''0\n''') == '''6\n1 2 3 4 5 6\n'''\nassert solution('''0\n''') == '''6\n1 2 3 4 5 6\n'''\nassert solution('''0\n''') == '''6\n1 2 3 4 5 6\n'''\nassert solution('''0\n''') == '''6\n1 2 3 4 5 6\n'''\nassert solution('''0\n''') == '''6\n1 2 3 4 5 6\n'''\nassert solution('''0\n''') == '''6\n1 2 3 4 5 6\n'''\nassert solution('''0\n", "solution(\"8\") == '''2\n2 3'''\nassert solution(\"1\") == '''1\n1'''\nassert solution(\"3\") == '''1\n3'''\nassert solution(\"16\") == '''4\n4 8 10 12'''\nassert solution(\"2\") == '''1\n2'''\nassert solution(\"5\") == '''1\n5'''\nassert solution(\"7\") == '''1\n7'''\nassert solution(\"6\") == '''2\n2 3'''\nassert solution(\"13\") == '''2\n2 13'''\nassert solution(\"11\") == '''1\n11'''\nassert solution(\"4\") == '''1\n4'''\nassert solution(\"15\") == '''3\n3 5 15'''\nassert solution(\"9\") == '''1\n9'''\nassert solution(\"12\") == '''3\n4 6 12'''\nassert solution(\"10\") == '''2\n2 5'''\nassert solution(\"14\") == '''2\n2 7'''\n\n# test for performance\nimport cProfile\ncProfile.run('''solution(\"8\")''')\ncProfile.run('''solution(\"1\")''')\ncProfile.run('''solution(\"3\")''')\ncProfile.run('''solution(\"", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''", "solution('''\n2\n''') == '''\n1\n2\n'''\n\nassert solution('''\n3\n''') == '''\n1\n3\n'''\n\nassert solution('''\n4\n''') == '''\n1\n4\n'''\n\nassert solution('''\n5\n''') == '''\n2\n3\n4\n'''\n\nassert solution('''\n6\n''') == '''\n2\n4\n5\n'''\n\nassert solution('''\n7\n''') == '''\n3\n3\n4\n'''\n\nassert solution('''\n8\n''') == '''\n3\n3\n4\n'''\n\nassert solution('''\n9\n''') == '''\n3\n3\n4\n'''\n\nassert solution('''\n10\n''') == '''\n3\n3\n4\n'''\n\nassert solution('''\n11\n''') == '''\n3\n3\n4\n'''\n\nassert solution('''\n12\n''') == '''\n3\n3\n4\n'''\n\nassert solution('''\n13\n''') == '''\n3\n3\n4\n'''\n\nassert solution('''\n14\n''') == '''\n3\n3\n4", "(solution('''12\n''') == '''3\n2 8 12\n''')\n\n# This problem is not yet solved", "(solution(\"5\") == \"2\\n1 4\")\nassert (solution(\"8\") == \"2\\n1 8\")\nassert (solution(\"11\") == \"3\\n1 2 4\")\nassert (solution(\"1000000\") == \"4\\n1 2 3 6\")", "solution(\"\") == \"\", \"Empty input\"\nassert solution(\"1\") == \"1\\n1\", \"1\"\nassert solution(\"2\") == \"1\\n2\", \"2\"\nassert solution(\"3\") == \"2\\n1 3\", \"3\"\nassert solution(\"4\") == \"2\\n1 3\", \"4\"\nassert solution(\"5\") == \"2\\n1 3\", \"5\"\nassert solution(\"6\") == \"2\\n1 5\", \"6\"\nassert solution(\"7\") == \"2\\n1 6\", \"7\"\nassert solution(\"8\") == \"2\\n1 7\", \"8\"\nassert solution(\"9\") == \"2\\n1 8\", \"9\"\nassert solution(\"10\") == \"2\\n1 9\", \"10\"\nassert solution(\"11\") == \"2\\n1 10\", \"11\"\nassert solution(\"12\") == \"2\\n1 11\", \"12\"\nassert solution(\"13\") == \"2\\n1 12\", \"13\"\nassert solution(\"14\") == \"2\\n1 13\", \"14\"\nassert solution(\"15\") == \"2\\n1 14\", \"15\"\nassert solution(\"16\") == \"2\\n1 15\", \"16\"\nassert solution(\"17\") == \"2\\n1 16\", \"17\"\nassert solution", "solution('''\n3\n''') == '''\n2\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n''') == '''\n2\n2 4\n'''\n\n# check the correctness of solution\nassert solution('''\n10\n''') == '''\n4\n2 3 4 10\n'''\n\n# check the correctness of solution\nassert solution('''\n1000000\n''') == '''\n3\n2 3 6\n'''\n\n# check the correctness of solution\nassert solution('''\n0\n''') == '''\n0\n'''", "solution(\"1\") == \"1\\n1\", \"Example 1\"\nassert solution(\"2\") == \"1\\n2\", \"Example 2\"\nassert solution(\"3\") == \"1\\n3\", \"Example 3\"\nassert solution(\"4\") == \"1\\n4\", \"Example 4\"\nassert solution(\"5\") == \"2\\n1 3\", \"Example 5\"\nassert solution(\"6\") == \"2\\n1 5\", \"Example 6\"\nassert solution(\"7\") == \"2\\n1 6\", \"Example 7\"\nassert solution(\"8\") == \"2\\n1 7\", \"Example 8\"\nassert solution(\"9\") == \"3\\n1 2 6\", \"Example 9\"\nassert solution(\"10\") == \"3\\n1 2 7\", \"Example 10\"\nassert solution(\"11\") == \"3\\n1 2 8\", \"Example 11\"\nassert solution(\"12\") == \"3\\n1 2 9\", \"Example 12\"\nassert solution(\"13\") == \"3\\n1 3 9\", \"Example 13\"\nassert solution(\"14\") == \"3\\n1 3 10\", \"Example 14\"\nassert solution(\"15\") == \"3\\n1 3 11\", \"Example 15\"\nassert solution(\"16\") == \"3\\n1 3 12\", \"Example 16\"\nassert solution(\"17\") == \"3\\", "solution(\"10\") == \"4\\n1 2 4 10\", \"TEST #1 failed\"\nassert solution(\"1\") == \"1\\n1\", \"TEST #2 failed\"\nassert solution(\"5\") == \"2\\n1 5\", \"TEST #3 failed\"\nassert solution(\"100\") == \"10\\n1 2 3 4 5 6 7 8 9 10\", \"TEST #4 failed\"\nassert solution(\"87\") == \"6\\n1 2 3 4 5 6\", \"TEST #5 failed\"\nassert solution(\"50000\") == \"50\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\", \"TEST #6 failed\"\nassert solution(\"10000\") == \"28\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\", \"TEST #7 failed\"\nassert solution(\"1000000\") == \"110\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55", "solution('''\n3\n''') == '''\n3\n1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n''') == '''\n2\n1 2\n'''\n\n# test submitter\ndef submit(func):\n    inp = open('in.txt').readlines()\n    assert func(inp[0]) == open('out.txt').read()\n    return 'All tests passed!\\n'\n\nprint(submit(solution))", "solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\", \"Expected something different\"\nassert solution(\"\") == \"\",", "solution('''\n5\n''') == '''\n2\n2 3\n'''\nassert solution('''\n7\n''') == '''\n3\n2 4 6\n'''\nassert solution('''\n10\n''') == '''\n3\n2 3 8\n'''\nassert solution('''\n20\n''') == '''\n4\n2 3 6 8\n'''\nassert solution('''\n45\n''') == '''\n6\n2 3 4 6 8 12\n'''\nassert solution('''\n100\n''') == '''\n7\n2 3 4 6 8 12 15\n'''\nassert solution('''\n1000\n''') == '''\n12\n2 3 4 6 8 12 15 18 20 24 30 40\n'''\nassert solution('''\n100000\n''') == '''\n21\n2 3 4 6 8 12 15 18 20 24 30 40 45 60 90 180 360\n'''\nassert solution('''\n1000000\n''') == '''\n26\n2 3 4 6 8 12 15 18 20 24 30 40 45 60 90 180 360 540 720\n'''\nprint('all tests have passed')", "'1\\n1' == solution('1')\nassert '2\\n1 2' == solution('2')\nassert '3\\n1 2 3' == solution('3')\nassert '2\\n2 3' == solution('4')\nassert '4\\n1 2 3 4' == solution('5')\nassert '5\\n1 2 3 4 5' == solution('6')\nassert '3\\n1 2 4' == solution('7')\nassert '3\\n1 2 5' == solution('10')\nassert '6\\n1 2 3 4 5 6' == solution('12')\nassert '7\\n1 2 3 4 5 6 8' == solution('13')\nassert '5\\n1 2 3 5 6' == solution('19')\nassert '4\\n1 2 3 5' == solution('20')\nassert '4\\n1 2 3 5' == solution('21')\nassert '3\\n1 2 5' == solution('25')\nassert '3\\n1 2 5' == solution('30')\nassert '3\\n1 2 3' == solution('120')\nassert '2\\n1 2' == solution('121')\nassert '3\\n1 2 4' == solution('343')\nassert '2\\n1 3' == solution('512')\nassert '3\\n1 2 5", "solution('''\n2\n''') == '''\n1\n2\n'''\n\nassert solution('''\n3\n''') == '''\n2\n2 3\n'''\n\nassert solution('''\n4\n''') == '''\n2\n2 4\n'''\n\nassert solution('''\n5\n''') == '''\n2\n2 4\n'''\n\nassert solution('''\n6\n''') == '''\n3\n2 3 4\n'''\n\nassert solution('''\n7\n''') == '''\n3\n2 3 4\n'''\n\nassert solution('''\n8\n''') == '''\n3\n2 3 4\n'''\n\nassert solution('''\n9\n''') == '''\n3\n2 3 4\n'''\n\nassert solution('''\n10\n''') == '''\n3\n2 3 4\n'''\n\nassert solution('''\n11\n''') == '''\n3\n2 3 4\n'''\n\nassert solution('''\n12\n''') == '''\n3\n2 3 4\n'''\n\nassert solution('''\n13\n''') == '''\n3\n2 3 4\n'''\n\nassert solution('''\n14\n''') == '''\n3\n2 3", "solution(\"2\") == '''\n2\n1 2\n''', \"Wrong answer\"\n\nprint(solution(stdin))", "solution(stdin) == stdout\n \n# check the performance of solution\nassert stdin in test_cases\nassert test_cases[stdin] == test_outputs[stdin]", "solution('''\n3\n''') == '''\n3\n2 1 3\n'''\nassert solution('''\n6\n''') == '''\n6\n6 5 4 3 2 1\n'''\nassert solution('''\n4\n''') == '''\n2\n2 1\n'''\n\n# check the performance of solution\nimport random\nimport timeit\nimport time\n\nM = 10**6\ndef generate_testcase():\n    print(random.randint(1, M))\n\ndef solve_testcase():\n    stdin = ''\n    for line in sys.stdin:\n        stdin += line\n\n    solution(stdin)\n\nif __name__ == '__main__':\n    print(timeit.timeit(solve_testcase, number=1))\n    # generate_testcase()", "solution('''\n''') == '''\n'''\n\n# get the input\nn = int(input())\n\n# solution\nif n < 6:\n    print(0)\n    print()\n    exit()\n\nprime_map = {2:2, 3:2, 5:2, 7:2, 11:2, 13:2, 17:2, 19:2, 23:2, 29:2, 31:2, 37:2, 41:2, 43:2, 47:2, 53:2, 59:2, 61:2, 67:2, 71:2, 73:2, 79:2, 83:2, 89:2, 97:2, 101:2, 103:2, 107:2, 109:2, 113:2, 127:2, 131:2, 137:2, 139:2, 149:2, 151:2, 157:2, 163:2, 167:2, 173:2, 179:2, 181:2, 191:2, 193:2, 197:2, 199:2, 211:2, 223:2, 227:2, 229:2, 233:2, 239:2, 241:2, 251:2, 257:2, 263:2, 269:2, 271:2, 277:2, 281:2, 283:2", "solution(open('tests/00', 'r').read()) == open('tests/00.a', 'r').read()\nassert solution(open('tests/01', 'r').read()) == open('tests/01.a', 'r').read()\nassert solution(open('tests/02', 'r').read()) == open('tests/02.a', 'r').read()\nassert solution(open('tests/03', 'r').read()) == open('tests/03.a', 'r').read()\nassert solution(open('tests/04', 'r').read()) == open('tests/04.a', 'r').read()\nassert solution(open('tests/05', 'r').read()) == open('tests/05.a', 'r').read()\nassert solution(open('tests/06', 'r').read()) == open('tests/06.a', 'r').read()\nassert solution(open('tests/07', 'r').read()) == open('tests/07.a', 'r').read()\nassert solution(open('tests/08', 'r').read()) == open('tests/08.a', 'r').read()\nassert solution(open('tests/09', 'r').read()) == open('tests/09.a', 'r').read()\nassert solution(open('tests/10', 'r", "str(solution('2')) == '2\\n1 2'\nassert str(solution('3')) == '2\\n1 3'\nassert str(solution('8')) == '2\\n2 3'\nassert str(solution('12')) == '3\\n1 2 3'\nassert str(solution('100')) == '3\\n1 2 3'\nassert str(solution('500')) == '3\\n1 2 3'\nassert str(solution('1000')) == '4\\n1 2 3 4'\nassert str(solution('10000')) == '4\\n1 2 3 4'\nassert str(solution('100000')) == '4\\n1 2 3 4'\nassert str(solution('1000000')) == '5\\n1 2 3 4 5'\n\n# read from file\nif __name__ == '__main__':\n    if len(sys.argv) == 2:\n        with open(sys.argv[1]) as f:\n            data = f.readlines()\n            for line in data:\n                print(solution(line))\n    else:\n        print('Error: wrong number of parameters.')", "solution('''3''') == '''\n3\n1 2 3\n'''\n\n# check the correctness of solution\nassert solution('''5''') == '''\n2\n2 3\n'''\n\n# check the correctness of solution\nassert solution('''9''') == '''\n3\n1 2 4\n'''\n\n# check the correctness of solution\nassert solution('''14''') == '''\n3\n1 2 7\n'''\n\n# check the correctness of solution\nassert solution('''19''') == '''\n3\n1 2 16\n'''\n\n# check the correctness of solution\nassert solution('''30''') == '''\n3\n1 2 29\n'''\n\n# check the correctness of solution\nassert solution('''1000''') == '''\n4\n1 2 5 7\n'''\n\n# check the correctness of solution\nassert solution('''9999''') == '''\n4\n1 2 5 97\n'''\n\n# check the correctness of solution\nassert solution('''99998''') == '''\n4\n1 2 5 6\n'''\n\n# check the correctness of solution\nassert solution('''99999''') == '''\n5\n1 2 5 7 6\n'''\n\n# check the correctness of solution\nassert solution('''", "solution('''\n1\n''') == '''\n1\n1\n'''\n\nassert solution('''\n2\n''') == '''\n1\n1\n'''\n\nassert solution('''\n6\n''') == '''\n4\n1 2 4 6\n'''\n\nassert solution('''\n4\n''') == '''\n2\n1 3\n'''\n\nassert solution('''\n8\n''') == '''\n3\n1 2 4\n'''\n\nassert solution('''\n11\n''') == '''\n4\n1 2 3 6\n'''\n\nassert solution('''\n16\n''') == '''\n4\n1 2 4 8\n'''\n\nassert solution('''\n10\n''') == '''\n2\n1 3\n'''\n\nassert solution('''\n8\n''') == '''\n3\n1 2 4\n'''\n\nassert solution('''\n300000\n''') == '''\n14\n1 2 3 4 5 6 8 10 12 15 16 20 24 25\n'''\n\nassert solution('''\n1000000\n''') == '''\n18\n1 2 3 4 5 6 8 10 12 15 16 20 24 25 30 32 40 48\n'''\n\nassert solution('''\n50000\n''') ==", "(solution(\"1\") == \"1\\n1\"), \"input 1\"\nassert (solution(\"2\") == \"1\\n2\"), \"input 2\"\nassert (solution(\"3\") == \"2\\n1 2\"), \"input 3\"\nassert (solution(\"4\") == \"2\\n1 3\"), \"input 4\"\nassert (solution(\"5\") == \"2\\n1 4\"), \"input 5\"\nassert (solution(\"6\") == \"2\\n1 5\"), \"input 6\"\nassert (solution(\"7\") == \"2\\n1 6\"), \"input 7\"\nassert (solution(\"8\") == \"2\\n1 7\"), \"input 8\"\nassert (solution(\"9\") == \"3\\n1 2 6\"), \"input 9\"\nassert (solution(\"10\") == \"3\\n1 2 7\"), \"input 10\"\nassert (solution(\"11\") == \"3\\n1 2 8\"), \"input 11\"\nassert (solution(\"12\") == \"3\\n1 2 9\"), \"input 12\"\nassert (solution(\"13\") == \"3\\n1 2 10\"), \"input 13\"\nassert (solution(\"14\") == \"3\\n1 2 11\"), \"input 14\"\nassert (solution(\"15\") == \"3\\n1 2 12\"), \"", "solution('''\n1\n''') == '''\n1\n1\n'''\nassert solution('''\n2\n''') == '''\n1\n1\n'''\nassert solution('''\n3\n''') == '''\n2\n1 2\n'''\nassert solution('''\n4\n''') == '''\n2\n1 3\n'''\nassert solution('''\n5\n''') == '''\n2\n1 4\n'''\nassert solution('''\n6\n''') == '''\n2\n1 5\n'''\nassert solution('''\n7\n''') == '''\n3\n1 3 6\n'''\nassert solution('''\n8\n''') == '''\n3\n1 3 6\n'''\nassert solution('''\n9\n''') == '''\n3\n1 3 6\n'''\nassert solution('''\n10\n''') == '''\n3\n1 3 6\n'''\nassert solution('''\n11\n''') == '''\n4\n1 3 4 10\n'''\nassert solution('''\n12\n''') == '''\n4\n1 3 4 10\n'''\nassert solution('''\n13\n''') == '''\n4\n1 3 4 10\n'''\nassert solution('''\n14", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''", "solution('''\n''') == '''\n'''", "solution('''\n4\n''') == '''\n2\n1 2\n'''\n\n# get input for testing\nfrom lib import input_as_string\n\n# run the solution with input from task\nsolution(input_as_string())", "(solution(\"4\") == \"2\\n1 2\")\nassert (solution(\"7\") == \"3\\n1 2 4\")\nassert (solution(\"10\") == \"2\\n2 8\")\nassert (solution(\"11\") == \"4\\n1 2 3 5\")\nassert (solution(\"100000\") == \"2\\n269985 90000\")"], "finish_reason": ["stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "stop", "length", "stop", "length", "length", "stop", "length", "stop", "length", "length", "stop", "stop", "stop", "length", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-37.10717817175001, -80.02491956783997, -65.11080100465497, -72.85384808706898, -45.49407451568598, -42.213996767916015, -58.119705074426, -48.18500527051005, -135.94072538731606, -25.297382408920978, -19.24649952706, -65.57398164760195, -50.77846049270099, -112.20876517972694, -52.27602511847601, -13.764183825269999, -21.225568490429993, -15.317568663850002, -47.28024850108002, -32.29421733132341, -117.96682768416002, -46.952152396187, -92.69385414619092, -10.12419447091, -34.919477194438, -36.865081965099996, -35.207280539210004, -30.64429632971297, -39.685108390611006, -28.83307701272601, -77.84453057761007, -79.62062785475001, -21.056320913045003, -92.40045476851202, -104.587494055907, -27.025978585978994, -24.398957221889997, -34.21029603644, -89.72525394113596, -55.057805029049945, -18.049514236759997, -94.48078794907302, -91.01858187110803, -88.43654008387007, -30.194074029462033, -30.675538497413005, -11.171142270800008, -6.208691340999999, -41.596533281170004, -51.23232066153001], "mean_logprob": [-0.4757330534839744, -0.2667497318928, -0.3339015436136154, -0.607115400725575, -0.44169004384161165, -0.3908703404436667, -0.3211033429526298, -0.16061668423503334, -0.4531357512910533, -0.08432460802973667, -0.22122413249494252, -0.23008414613193684, -0.16926153497567, -0.447046873226004, -0.5026540876776538, -0.0458806127509, -0.15380846732195652, -0.4254880184402778, -0.3752400674688889, -0.10764739110441134, -0.5128992508006956, -0.15650717465395667, -0.30897951382063665, -0.27362687759216214, -0.11639825731479334, -1.2288360655033332, -0.5334436445334848, -0.10214765443237667, -0.2794725943000775, -0.09611025670908667, -0.2594817685920333, -0.680518186792735, -0.07018773637681666, -0.35267349148287025, -0.3486249801863567, -0.09008659528659667, -0.78706313619, -0.7775067281009092, -0.46731903094341665, -0.1835260167635, -0.06016504745586667, -0.3398589494570971, -0.30339527290369334, -0.29478846694623334, -0.10064691343154, -0.10225179499137667, -0.13459207555180722, -0.44347795292857145, -0.7297637417749123, -0.6027331842532941]}
{"prompt": "'''\nA robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"\n3\n4 4 4 4 4 4\n4 4 1 1 4 4\n4 4 4 4 1 1\n\"\"\") == '0\\n4\\n4'", "solution(stdin1) == stdout1\nassert solution(stdin2) == stdout2\nassert solution(stdin3) == stdout3\nassert solution(stdin4) == stdout4\nassert solution(stdin5) == stdout5\nassert solution(stdin6) == stdout6\nassert solution(stdin7) == stdout7\nassert solution(stdin8) == stdout8\nassert solution(stdin9) == stdout9\nassert solution(stdin10) == stdout10\nassert solution(stdin11) == stdout11\nassert solution(stdin12) == stdout12\nassert solution(stdin13) == stdout13\nassert solution(stdin14) == stdout14\nassert solution(stdin15) == stdout15\nassert solution(stdin16) == stdout16\nassert solution(stdin17) == stdout17\nassert solution(stdin18) == stdout18\nassert solution(stdin19) == stdout19\nassert solution(stdin20) == stdout20\nassert solution(stdin21) == stdout21\nassert solution(stdin22) == stdout22\nassert solution(stdin23) == stdout23\nassert solution(stdin24) == stdout24\nassert solution(stdin25) == stdout25\nassert", "solution(test1) == '1'\nassert solution(test2) == '2'\nassert solution(test3) == '3'\nassert solution(test4) == '5'\nassert solution(test5) == '6'\nassert solution(test6) == '6'\nassert solution(test7) == '7'\nassert solution(test8) == '8'\nassert solution(test9) == '9'\nassert solution(test10) == '10'\nassert solution(test11) == '11'\nassert solution(test12) == '11'\nassert solution(test13) == '12'\nassert solution(test14) == '13'\nassert solution(test15) == '13'\nassert solution(test16) == '14'\nassert solution(test17) == '15'\nassert solution(test18) == '15'\nassert solution(test19) == '16'\nassert solution(test20) == '17'\nassert solution(test21) == '17'\nassert solution(test22) == '18'\nassert solution(test23) == '19'\nassert solution(test24) == '19'\nassert solution(test25) == '20'\nassert solution(test26) == '21'\nassert solution(test27) == '21'\nassert solution(test", "solution(\"1\\n3 4 1 1 3 3\") == \"6\"\nassert solution(\"1\\n3 4 1 1 1 1\") == \"4\"\nassert solution(\"2\\n1 100 1 1 1 1\\n100 1 1 1 100 1\") == \"1\\n1\"\n\n# get input\nT = int(input())\nstdin = []\nfor i in range(T):\n    stdin.append(input())\n\n# output the result\nfor i in range(T):\n    res = solution(stdin[i])\n    print(res)", "solution('''\n2\n2 2 1 1 2 2\n3 3 2 2 2 2\n''') == '''\n1\n1\n'''\n# check the correctness of solution\nassert solution('''\n4\n2 2 1 1 2 2\n3 3 2 2 2 2\n2 3 1 2 2 2\n2 3 2 1 2 2\n''') == '''\n1\n1\n3\n3\n'''\n# check the correctness of solution\nassert solution('''\n1\n3 3 1 1 3 3\n''') == '''\n3\n'''\n# check the correctness of solution\nassert solution('''\n1\n2 3 1 1 2 3\n''') == '''\n3\n'''\n# check the correctness of solution\nassert solution('''\n1\n2 3 1 1 3 2\n''') == '''\n3\n'''\n# check the correctness of solution\nassert solution('''\n1\n1 1 1 1 1 1\n''') == '''\n0\n'''\n# check the correctness of solution\nassert solution('''\n3\n3 2 1 1 2 1\n3 2 2 1 1 2\n3 2 1 2 2 1\n''') == '''\n4\n4\n4\n'''\n# check the correctness of solution\nassert solution('''\n2\n2 2 1 1 1 1\n2", "solution('''\n5\n5 5 3 3 2 2\n5 5 2 2 2 2\n5 5 1 1 1 1\n5 5 3 3 3 3\n5 5 1 1 2 2\n''') == '''\n5\n5\n5\n9\n7\n'''", "solution('''\n1\n1 1 1 1 1 1\n''') == '0'\n\n# check the correctness of solution\nassert solution('''\n1\n4 4 2 2 3 3\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n2\n3 3 1 1 2 2\n3 3 1 1 3 2\n''') == '6\\n5'\n\n# check the correctness of solution\nassert solution('''\n2\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '0\\n0'\n\n# check the correctness of solution\nassert solution('''\n2\n1 2 1 1 1 2\n1 2 1 1 1 2\n''') == '1\\n1'\n\n# check the correctness of solution\nassert solution('''\n2\n5 1 1 1 1 2\n3 3 2 1 1 2\n''') == '4\\n4'\n\n# check the correctness of solution\nassert solution('''\n2\n5 2 1 1 1 2\n3 3 2 1 1 2\n''') == '6\\n5'\n\n# check the correctness of solution\nassert solution('''\n2\n10 100 5 50 5 51\n10 100 5 50 5 51\n''') == '1\\n1'\n\n# check the correctness of solution\nassert", "solution(\"A\") == \"B\"\nassert solution(\"AAAAAAA\") == \"BBBBBBB\"\nassert solution(\"BBABABABABABABABAA\") == \"ABABABABABABABABAB\"\nassert solution(\"CBBB\") == \"BCCC\"\n\n# check the performance of solution\nassert solution(\"A\" * 100000) == \"B\" * 100000", "solution('''\n''') == '''\n'''", "solution('''1\n3 3 1 1 3 3''') == '2'\nassert solution('''3\n3 3 1 1 3 3\n3 3 1 1 1 1\n3 3 3 3 1 1''') == '''2\n1\n0'''\n\nprint('passed')", "solution('''\n1\n1 1 1 1 1 1\n''') == '1'\n\nassert solution('''\n1\n1 1 1 1 1 2\n''') == '2'\n\nassert solution('''\n1\n1 2 1 1 1 2\n''') == '3'\n\nassert solution('''\n1\n2 1 1 1 2 1\n''') == '3'\n\nassert solution('''\n1\n1 2 1 1 2 1\n''') == '2'\n\nassert solution('''\n1\n2 2 1 1 2 2\n''') == '4'\n\nassert solution('''\n1\n5 5 3 2 2 4\n''') == '17'\n\nassert solution('''\n1\n1 1 1 1 1 1\n''') == '1'\n\nassert solution('''\n2\n2 2 1 1 2 2\n1 1 1 1 1 1\n''') == '''\n4\n1\n'''\n\nassert solution('''\n2\n2 2 1 1 2 2\n1 1 1 1 1 2\n''') == '''\n4\n2\n'''\n\nassert solution('''\n2\n1 2 1 1 2 1\n1 1 1 1 1 1\n''') == '''\n2\n1\n'''\n\nassert solution('''\n2\n2", "solution(\"1\\n3 3 2 2 3 3\") == \"3\"\nassert solution(\"1\\n3 3 2 2 2 2\") == \"2\"\nassert solution(\"2\\n5 5 3 3 3 3\\n5 5 3 3 4 4\") == \"4\\n4\"\nassert solution(\"1\\n4 4 2 2 3 3\") == \"4\"\nassert solution(\"1\\n4 4 2 2 4 4\") == \"4\"\nassert solution(\"3\\n3 2 1 1 2 2\\n3 2 1 1 2 2\\n3 2 1 1 2 2\") == \"2\\n2\\n2\"\nassert solution(\"2\\n3 3 2 2 3 3\\n3 3 2 2 3 3\") == \"3\\n3\"\nassert solution(\"1\\n3 3 2 2 2 2\") == \"2\"\nassert solution(\"2\\n2 3 2 1 2 3\\n2 3 2 1 2 3\") == \"2\\n2\"\nassert solution(\"3\\n3 3 1 2 2 2\\n3 3 1 2 2 2\\n3 3 1 2 2 2\") == \"2\\n2\\n2\"\nassert solution(\"1\\n5 5 1 2 5 3\") == \"4\"\nassert solution(\"1\\n5 5 1 2 1 2\") == \"4\"\nassert solution(\"3\\n3 3", "solution(None) == None", "solution('''\n2\n3 3 1 1 2 2\n3 2 2 1 1 2\n''') == '''\n8\n5\n'''", "solution(sample_in) == sample_out\nassert solution(problem_in) == problem_out", "solution('''3\n3 3 1 1 3 3\n3 3 1 1 3 2\n2 3 1 1 2 3''') == '''3\n-1\n3'''", "solution('''\n3\n3 3 1 1 1 1\n3 3 1 1 1 2\n3 3 1 1 1 3\n''') == '''\n2\n2\n1\n'''", "solution('''\n3\n3 4 2 3 2 2\n5 5 3 3 3 3\n1 1 1 1 1 1\n''') == '''\n5\n7\n0\n'''", "solution(\"\"\"\n1\n5 4 2 2 3 3\n\"\"\") == \"\"\"\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n1 1 1 1 1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n1\n5 4 3 3 3 3\n\"\"\") == \"\"\"\n1\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n5 4 2 2 3 3\n1 1 1 1 1 1\n\"\"\") == \"\"\"\n3\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n5 4 3 3 3 3\n5 4 2 2 3 3\n\"\"\") == \"\"\"\n1\n3\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n2\n10 5 1 1 10 5\n10 10 10 10 10 10\n\"\"\") == \"\"\"\n5\n0\n\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10\n4 5 1 1 4 5\n4 5 1 1 4 5\n4 5 1 1 4 5\n4 5 1 1 4 5\n4 5 1 1 4 5\n4 5 1 1 4 5\n4 5 1 1 4 5\n4 5 1 1 4 5\n4 5 1 1 4 5\n4 5 1 1 4 5\n\"\"\") == \"\"\"\n4\n4\n4\n", "solution('''\n1\n2 3 1 1 2 3\n''') == '4'\nassert solution('''\n2\n2 3 1 1 2 3\n1 1 1 1 1 1\n''') == '''\n4\n0\n'''\nassert solution('''\n3\n1 3 1 1 1 3\n3 3 3 3 1 1\n100 100 100 100 99 99\n''') == '''\n4\n4\n4\n'''\nassert solution('''\n4\n100 100 100 100 99 99\n100 100 100 100 100 100\n100 100 100 100 101 100\n100 100 100 100 100 100\n''') == '''\n4\n0\n-1\n0\n'''\n\n# check performance\nimport random\nimport time\n\nfor t in range(1, 1001):\n    n = random.randint(1, 101)\n    m = random.randint(1, 101)\n    r_b = random.randint(1, n)\n    c_b = random.randint(1, m)\n    r_d = random.randint(1, n)\n    c_d = random.randint(1, m)\n    stdin = f'{t}\\n' + '\\n'.join([f'{n} {m} {r_b} {c_b} {", "solution(\"\"\"\n0\n\"\"\") == \"\"\n\nassert solution(\"\"\"\n1\n3 4 1 1 3 2\n\"\"\") == \"\"\"\n8\n\"\"\"\n\nassert solution(\"\"\"\n2\n3 4 1 1 3 2\n3 4 1 1 3 3\n\"\"\") == \"\"\"\n8\n9\n\"\"\"\n\nassert solution(\"\"\"\n3\n3 4 1 1 3 3\n3 4 1 1 3 3\n3 4 1 1 3 3\n\"\"\") == \"\"\"\n9\n9\n9\n\"\"\"\n\nassert solution(\"\"\"\n4\n3 4 1 1 3 3\n3 4 1 1 3 3\n3 4 1 1 3 3\n3 4 1 1 3 3\n\"\"\") == \"\"\"\n9\n9\n9\n9\n\"\"\"\n\nassert solution(\"\"\"\n5\n3 4 1 1 3 3\n3 4 1 1 3 3\n3 4 1 1 3 3\n3 4 1 1 3 3\n3 4 1 1 3 3\n\"\"\") == \"\"\"\n9\n9\n9\n9\n9\n\"\"\"\n\nassert solution(\"\"\"\n6\n3 4 1 1 3 3\n3 4 1 1 3 3\n3 4 1 1 3 3\n3 4 1 1 3 3\n3 4 1 1 3 3\n3 4 1 1 3 3\n\"\"\") == \"\"\"\n9\n9\n9\n9\n9\n9\n\"\"\"\n\nassert solution(\"\"\"\n7\n3 4", "solution('''\n4\n5 5 2 2 4 4\n5 5 1 1 4 4\n5 5 1 1 1 1\n1 1 1 1 1 1\n''') == '3\\n3\\n0\\n0'", "solution(test_data) == test_solution", "solution(\"\"\"4\n4 4 1 1 4 4\n4 4 1 1 4 1\n4 4 4 4 1 1\n4 4 4 4 4 4\"\"\") == \"\"\"6\n4\n6\n0\"\"\"", "solution(stdin_1) == stdout_1\nassert solution(stdin_2) == stdout_2\nassert solution(stdin_3) == stdout_3\nassert solution(stdin_4) == stdout_4\nassert solution(stdin_5) == stdout_5\n\n# let's check the execution time of the solution\nimport time\n\nbegin = time.time()\nassert solution(stdin_large) == stdout_large\nprint(f'Total time: {time.time() - begin}s')", "solution('''\n3\n3 3 2 2 1 1\n1 1 1 1 1 1\n3 3 2 2 3 3\n''') == '''\n0\n1\n8\n'''", "solution(in1) == out1\nassert solution(in2) == out2\nassert solution(in3) == out3\nassert solution(in4) == out4\nassert solution(in5) == out5\nassert solution(in6) == out6\nassert solution(in7) == out7\nassert solution(in8) == out8\nassert solution(in9) == out9\nassert solution(in10) == out10\nassert solution(in11) == out11\nassert solution(in12) == out12\nassert solution(in13) == out13\nassert solution(in14) == out14\nassert solution(in15) == out15\nassert solution(in16) == out16\nassert solution(in17) == out17\nassert solution(in18) == out18\nassert solution(in19) == out19\nassert solution(in20) == out20\nassert solution(in21) == out21\nassert solution(in22) == out22\nassert solution(in23) == out23\nassert solution(in24) == out24\nassert solution(in25) == out25\nassert solution(in26) == out26\nassert solution(in27) == out27\nassert solution(in28) == out28\nassert solution(in29) == out29\nassert solution(in30) == out30\nassert", "solution('''\n8\n1 2 1 1 1 2\n1 2 1 1 1 1\n1 2 1 1 2 1\n2 2 1 1 1 1\n2 2 1 1 2 2\n2 2 1 1 2 1\n2 2 1 1 1 2\n3 2 1 1 2 2\n''') == '''\n1\n2\n1\n2\n2\n4\n3\n4\n'''", "solution('''\n1\n5 5 1 1 2 2\n''') == '''\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 5 3 3 3 3\n''') == '''\n0\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 5 1 1 4 4\n''') == '''\n4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n4 4 2 2 3 3\n''') == '''\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n5 5 5 5 1 1\n''') == '''\n1\n'''\n\n# # check the correctness of solution\n# assert solution('''\n# ''') == '''\n# '''\n\n# # check the correctness of solution\n# assert solution('''\n# ''') == '''\n# '''\n\n# # check the correctness of solution\n# assert solution('''\n# ''') == '''\n# '''\n\n# # check the correctness of solution\n# assert solution('''\n# ''') == '''\n# '''\n\n# # check the correctness of solution\n# assert solution('''\n# ''') == '''\n# '''", "solution(SAMPLE_1) == EXPECTED_1\nassert solution(SAMPLE_2) == EXPECTED_2", "solution('''\n1\n3 4 2 2 2 2\n''') == '''\n4\n'''\n\nassert solution('''\n1\n4 4 1 3 3 1\n''') == '''\n4\n'''\n\nassert solution('''\n1\n4 4 3 3 2 2\n''') == '''\n4\n'''\n\nassert solution('''\n1\n4 4 3 3 3 2\n''') == '''\n3\n'''\n\nassert solution('''\n1\n4 4 2 2 3 3\n''') == '''\n5\n'''\n\nassert solution('''\n1\n5 5 5 5 1 1\n''') == '''\n9\n'''\n\nassert solution('''\n1\n5 5 5 5 2 2\n''') == '''\n8\n'''\n\nassert solution('''\n1\n5 5 5 5 3 3\n''') == '''\n7\n'''\n\nassert solution('''\n1\n5 5 5 5 4 4\n''') == '''\n6\n'''\n\nassert solution('''\n1\n5 5 5 5 5 5\n''') == '''\n5\n'''\n\nassert solution('''\n1\n10 10 2 2 4 5\n''') == '''\n13\n'''\n\nassert solution(''", "solution('''\n5\n5 5 3 3 2 3\n2 2 1 1 1 1\n5 4 2 1 2 2\n5 5 2 2 5 5\n5 5 2 2 1 5\n''') == '''\n4\n1\n4\n4\n4\n'''", "solution(\"\"\"\n1\n5 5 5 5 1 1\n\"\"\") == \"\"\"\n5\n\"\"\"\n\nassert solution(\"\"\"\n1\n5 5 5 5 5 5\n\"\"\") == \"\"\"\n1\n\"\"\"\n\nassert solution(\"\"\"\n2\n5 5 5 5 3 2\n1 1 1 1 1 1\n\"\"\") == \"\"\"\n2\n0\n\"\"\"\n\nassert solution(\"\"\"\n1\n1 1 1 1 1 1\n\"\"\") == \"\"\"\n0\n\"\"\"\n\nassert solution(\"\"\"\n2\n2 2 1 1 2 1\n1 2 1 1 1 1\n\"\"\") == \"\"\"\n1\n2\n\"\"\"\n\nassert solution(\"\"\"\n1\n10 10 5 5 6 6\n\"\"\") == \"\"\"\n8\n\"\"\"\n\nassert solution(\"\"\"\n3\n100 100 1 1 100 1\n100 100 100 100 50 51\n100 100 100 100 50 50\n\"\"\") == \"\"\"\n2\n1\n0\n\"\"\"", "solution('''\n1\n6 6 1 1 3 3\n''') == '4'\n\n# print the solution input\nprint(solution('''\n5\n5 4 1 1 5 4\n6 6 1 1 3 3\n2 2 1 1 2 2\n10 10 1 1 10 10\n20 20 1 1 1 1\n'''))", "solution('''\n1\n3 3 2 2 2 2\n''') == '1'\nassert solution('''\n1\n3 3 2 2 2 3\n''') == '3'\nassert solution('''\n1\n3 3 2 2 3 2\n''') == '2'\nassert solution('''\n1\n3 3 2 2 3 3\n''') == '5'\nassert solution('''\n1\n3 3 2 2 1 2\n''') == '2'\nassert solution('''\n1\n3 3 2 2 1 3\n''') == '4'\nassert solution('''\n1\n3 3 2 2 1 1\n''') == '2'\nassert solution('''\n1\n3 3 1 2 2 2\n''') == '2'\nassert solution('''\n1\n3 3 1 2 2 3\n''') == '4'\nassert solution('''\n1\n3 3 1 2 3 2\n''') == '3'\nassert solution('''\n1\n3 3 1 2 3 3\n''') == '5'\nassert solution('''\n1\n3 3 1 2 1 2\n''') == '1'\nassert solution('''\n1\n3 3 1 2 1 3\n''') == '3'\nassert solution('''\n1\n3 3 1 2 1 1\n", "solution(open(\"tests/tests/000.test\").read()) == open(\"tests/tests/000.solution\").read()\n\n# get user inputs\nprint(solution(sys.stdin.read()))", "solution(\"example1.in\") == \"example1.out\"\nassert solution(\"example2.in\") == \"example2.out\"\nassert solution(\"example3.in\") == \"example3.out\"\n\n# # submit to kattis\n# from sys import stdin\n# from os import path\n#\n# # if on local machine then get submissions file path\n# if path.exists(\"/home/david/Desktop/Kattis/kattis.properties\"):\n#     with open(\"/home/david/Desktop/Kattis/kattis.properties\") as f:\n#         for line in f:\n#             if line.startswith(\"kattis.submit\"):\n#                 submit_command = line.split(\"=\")[1]\n#                 break\n#\n# # if on server then get submissions file path\n# elif path.exists(\"/home/david/kattis/kattis.properties\"):\n#     with open(\"/home/david/kattis/kattis.properties\") as f:\n#         for line in f:\n#             if line.startswith(\"kattis.submit\"):\n#                 submit_command = line.split(\"=\")[1]\n#                 break\n#\n# # get the submission name\n# submission", "solution(\"\"\"3\n3 3 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 2\"\"\") == \"\"\"0\n0\n-1\"\"\", \"sample\"\n\n# check the correctness of solution\nassert solution(\"\"\"5\n5 5 3 2 1 3\n2 3 1 1 1 2\n1 10 1 1 1 5\n10 3 1 1 3 1\n10 10 10 10 1 1\"\"\") == \"\"\"14\n4\n-1\n9\n0\"\"\", \"simple\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n30 25 1 2 4 4\"\"\") == \"\"\"39\"\"\", \"hard\"\n\n# check the correctness of solution\nassert solution(\"\"\"10\n100 100 1 1 50 51\n100 100 1 1 50 50\n100 100 1 1 50 49\n100 100 1 1 100 100\n100 100 1 1 100 99\n100 100 50 50 1 1\n100 100 50 50 1 2\n100 100 50 50 2 1\n100 100 50 50 2 2\n100 100 100 100 100 100\"\"\") == \"\"\"199\n198\n197\n0\n-1\n199\n198\n197\n196\n0\"\"\", \"samples\"\n\n# check the correctness of solution\nassert solution(\"\"\"1000\n50 50 25 25 25 25\n50 50 25 25 25 26\n50 50 25 25 26 25\n50 50 25 25 26 26\n50 50 25 26", "solution(\"\"\"\\\n2\n2 3 1 1 1 1\n3 4 1 1 1 1\n\"\"\") == \"\"\"\\\n3\n4\n\"\"\"\nassert solution(\"\"\"\\\n1\n1 2 1 1 1 1\n\"\"\") == \"\"\"\\\n1\n\"\"\"\nassert solution(\"\"\"\\\n2\n2 3 1 1 2 1\n2 3 1 1 2 2\n\"\"\") == \"\"\"\\\n-1\n1\n\"\"\"\n\nprint(\"OK\")", "solution(\"\"\"\n<input>\n\"\"\") == '''\n<output>\n'''", "solution('''\n1\n100 100 99 99 99 99\n''') == '1'\n\nassert solution('''\n1\n100 100 99 99 100 99\n''') == '2'\n\nassert solution('''\n1\n100 100 99 99 100 100\n''') == '3'\n\nassert solution('''\n1\n3 3 1 1 2 2\n''') == '2'\n\nassert solution('''\n1\n3 3 1 1 3 3\n''') == '5'\n\nassert solution('''\n1\n3 3 1 1 1 1\n''') == '4'\n\nassert solution('''\n1\n3 3 1 1 3 1\n''') == '4'\n\nassert solution('''\n1\n3 3 1 1 1 3\n''') == '4'\n\nassert solution('''\n1\n3 3 1 1 2 1\n''') == '3'\n\nassert solution('''\n1\n3 3 1 1 2 3\n''') == '3'\n\nassert solution('''\n1\n3 3 1 1 1 2\n''') == '3'\n\nassert solution('''\n1\n3 3 1 1 3 2\n''') == '3'\n\nassert solution('''\n1\n3 3 1 1 2 2\n''') == '2'\n\nassert solution", "solution('''\n4\n2 2 1 1 2 2\n2 2 1 1 1 2\n3 4 1 1 3 4\n3 4 1 2 3 4\n''') == '''\n0\n2\n4\n2\n'''", "solution(\"\"\"2\n2 3 1 1 1 2\n2 3 1 1 1 1\"\"\") == \"\"\"1\n0\"\"\"\n\n# get input from stdin (standard input)\n'''\nget from stdin\n'''\nstdin = sys.stdin.read()\n\n# call the solution function\nout = solution(stdin)\n\n# print to stdout (standard output)\n'''\nprint to stdout\n'''\nprint(out)", "solution(stdin) == stdout", "solution(\"\") == \"\", \"solution is wrong\"\nassert solution(\"\") == \"\", \"solution is wrong\"\nassert solution(\"\") == \"\", \"solution is wrong\"\n\n# check the performance of solution\nassert solution(\"\") == \"\", \"solution is wrong\"\nassert solution(\"\") == \"\", \"solution is wrong\"\nassert solution(\"\") == \"\", \"solution is wrong\"", "solution(\"\"\"4\n4 3 2 1 3 3\n4 3 2 1 3 2\n4 3 2 1 3 1\n4 3 2 1 3 4\"\"\") == \"\"\"0\n1\n2\n3\"\"\"\nassert solution(\"\"\"3\n1 1 1 1 1 1\n1 1 1 1 1 2\n1 1 1 1 1 1\"\"\") == \"\"\"0\n1\n2\"\"\"\nassert solution(\"\"\"2\n2 2 1 1 2 2\n2 2 1 1 1 1\"\"\") == \"\"\"0\n1\"\"\"\n\n# Generate random inputs and check the correctness of solution\nimport random\nfrom string import ascii_lowercase, ascii_uppercase\n\nfor _ in range(100):\n    n = random.randint(1, 100)\n    m = random.randint(1, 100)\n    r_b = random.randint(1, n)\n    c_b = random.randint(1, m)\n    r_d = random.randint(1, n)\n    c_d = random.randint(1, m)\n    input = \"\\n\".join([str(n), str(m), str(r_b), str(c_b), str(r_d), str(c_d)])\n    print(input)\n    assert solution(input) == \"0\"\n    \n", "solution('''\n6\n2 2 1 1 1 1\n2 2 1 1 2 1\n3 4 2 2 1 1\n3 4 2 2 1 2\n3 4 2 2 2 1\n3 4 2 2 2 2\n''') == '''\n1\n2\n2\n3\n3\n4\n'''", "solution(test_case) == \"\", \"Fail\"\nassert solution(test_case2) == \"\", \"Fail\"\nassert solution(test_case3) == \"\", \"Fail\"\n\nprint(\"Pass all tests\")", "solution(\"\"\"2\n2 3 1 1 1 1\n5 7 3 2 4 6\"\"\") == \"\"\"3\n18\"\"\"\n\n# check the correctness of solution\nassert solution(\"\"\"1\n6 8 2 4 4 5\"\"\") == \"\"\"14\"\"\"", "'100\\n100' == solution('''\n2\n100 100 50 50 50 50\n100 100 99 99 99 99\n''')\n\nprint('All tests passed!')"], "finish_reason": ["stop", "length", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "length", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop"], "sum_logprob": [-25.320175548499996, -12.83851571413911, -39.327055631028045, -61.83468760756001, -100.00601741840433, -39.732006116700006, -105.66135169785089, -71.88646004090002, -5.630529251, -35.07208631144999, -76.27146431162703, -126.45001316929894, -7.3862358744000005, -22.975289874, -14.17354842295, -27.595292755100004, -18.884928415500003, -27.748873973700007, -83.02218061068903, -105.54434346777003, -45.614317124094015, -32.597725663039995, -10.535996500900001, -28.5719621119, -48.9316962913, -23.773055487900002, -15.362324604727371, -45.68588128088, -59.64001811263147, -12.063551971839997, -84.12813498243307, -50.55468428273999, -103.31993813628401, -59.845395678199985, -42.297723262582984, -41.33795813287001, -142.32037724141804, -180.69477786880807, -58.15919655787402, -12.320271647100004, -63.12557315131595, -28.046329237500004, -70.86085998723703, -5.596663195, -19.234919519456007, -111.17066416698664, -32.62189498838, -34.81493254355, -50.907203790000025, -37.002229791], "mean_logprob": [-0.6330043887125, -0.04279505238046367, -0.13109018543676, -0.4793386636244961, -0.33335339139468134, -0.6513443625688524, -0.35220450565950334, -0.8077130341674158, -0.4021806607857143, -0.5313952471431819, -0.25423821437209, -0.4215000438976633, -1.0551765534857143, -0.6757438198235294, -0.6162412357804348, -0.6898823188775, -0.4391843817558139, -0.6453226505511628, -0.27674060203563, -0.3518144782259, -0.15204772374698, -0.6391710914321569, -0.8779997084083333, -0.6349324913755555, -0.39461045396209676, -0.5528617555325581, -0.051207748682424566, -0.5191577418281819, -0.19880006037543835, -0.4159845507531035, -0.28042711660811, -0.8287653161104918, -0.5114848422588317, -0.7772129308857143, -0.14099241087527667, -0.84363179863, -0.47440125747139333, -0.60231592622936, -0.5874666318977172, -0.5866796022428571, -0.21041857717105333, -0.5393524853365385, -0.6879695144391942, -0.6218514661111111, -0.21137274197204395, -0.3705688805566217, -0.4660270712625714, -0.6826457361480393, -0.9427259961111111, -0.9487751228461538]}
{"prompt": "'''\nAlice and Bob play the following game. Alice has a set S of disjoint ranges of integers, initially containing only one range [1, n]. In one turn, Alice picks a range [l, r] from the set S and asks Bob to pick a number in the range. Bob chooses a number d (l \u2264 d \u2264 r). Then Alice removes [l, r] from S and puts into the set S the range [l, d - 1] (if l \u2264 d - 1) and the range [d + 1, r] (if d + 1 \u2264 r). The game ends when the set S is empty. We can show that the number of turns in each game is exactly n.\n\nAfter playing the game, Alice remembers all the ranges [l, r] she picked from the set S, but Bob does not remember any of the numbers that he picked. But Bob is smart, and he knows he can find out his numbers d from Alice's ranges, and so he asks you for help with your programming skill.\n\nGiven the list of ranges that Alice has picked ([l, r]), for each range, help Bob find the number d that Bob has picked.\n\nWe can show that there is always a unique way for Bob to choose his number for a list of valid ranges picked by Alice.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 1000).\n\nEach of the next n lines contains two integers l and r (1 \u2264 l \u2264 r \u2264 n), denoting the range [l, r] that Alice picked at some point.\n\nNote that the ranges are given in no particular order.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 1000, and the ranges for each test case are from a valid game.\n\nOutput\n\nFor each test case print n lines. Each line should contain three integers l, r, and d, denoting that for Alice's range [l, r] Bob picked the number d.\n\nYou can print the lines in any order. We can show that the answer is unique.\n\nIt is not required to print a new line after each test case. The new lines in the output of the example are for readability only. \n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\"\"3\n3\n1 3\n2 3\n1 2\n3\n1 3\n2 3\n1 2\n4\n1 4\n2 4\n3 4\n1 3\n\"\"\") == \"\"\"1 3 2\n2 3 1\n1 2 3\n1 3 2\n2 3 1\n1 2 3\n1 4 3\n2 4 1\n3 4 2\n1 3 4\n\"\"\"", "solution('''\n3\n3\n1 2\n1 3\n2 3\n3\n1 3\n2 3\n1 2\n2\n2 3\n1 2\n''') == '''\n1 2 2\n1 3 3\n2 3 1\n1 3 1\n2 3 2\n1 2 2\n2 3 2\n1 2 1\n'''\n\n# check the speed of solution\nassert solution('''\n10\n100\n22 55\n39 72\n30 79\n90 96\n10 93\n8 66\n4 83\n4 89\n4 87\n4 76\n36 63\n68 86\n19 76\n49 99\n7 99\n77 98\n25 83\n19 98\n1 61\n1 47\n1 71\n1 74\n1 94\n1 70\n1 85\n1 92\n1 64\n1 63\n1 73\n1 54\n1 66\n1 52\n1 93\n1 83\n1 67\n1 60\n1 62\n1 59\n1 77\n1 52\n1 81\n1 66\n1 59\n1 90\n1 94\n1 54\n1 91\n1 67\n1 63\n1 58\n1 72\n1 80\n1 70\n1 89\n1 60\n1 78\n1 82\n1 87\n1 66\n1 69\n1 81\n1 54\n1 90\n1 83\n1 66\n1 54\n1 89\n1 63\n", "solution(\"\"\"2\n1\n1 1\n1\n1 1\n\"\"\") == \"\"\"1 1 1\n1 1 1\n\"\"\"\n\n# get input\n# stdin = \"\"\nstdin = sys.stdin.read()\n\n# write out the solution\nsys.stdout.write(solution(stdin))", "solution(\"\"\"\n2\n4\n1 4\n2 3\n1 2\n1 2\n4\n1 4\n2 3\n1 2\n3 4\n\"\"\") == \"\"\"\n1 4 2\n2 3 2\n1 2 1\n1 2 2\n1 4 3\n2 3 3\n1 2 1\n3 4 4\n\"\"\"", "solution('''\n3\n3\n1 2\n1 3\n2 3\n3\n1 2\n1 3\n2 3\n2\n2 2\n2 2\n''') == '''\n1 2 2\n1 3 3\n2 3 3\n1 2 1\n1 3 3\n2 3 2\n2 2 2\n2 2 2\n'''\n\nprint(solution('''\n3\n3\n1 2\n1 3\n2 3\n3\n1 2\n1 3\n2 3\n2\n2 2\n2 2\n'''))", "solution(\"3\\n3\\n1 3\\n3 1\\n2 2\\n5\\n1 5\\n1 2\\n2 3\\n3 4\\n4 5\\n10\\n1 3\\n4 6\\n4 5\\n4 7\\n6 8\\n7 9\\n9 10\\n9 8\\n10 9\\n3 4\") == \"1 3 2\\n3 1 2\\n2 2 2\\n1 5 2\\n1 2 3\\n2 3 2\\n3 4 3\\n4 5 4\\n1 3 2\\n4 6 5\\n4 5 4\\n4 7 5\\n6 8 7\\n7 9 8\\n9 10 9\\n9 8 7\\n10 9 8\\n3 4 2\\n\"\nassert solution(\"1\\n10\\n5 6\\n6 7\\n6 8\\n6 9\\n6 5\\n6 4\\n6 3\\n6 2\\n6 1\\n6 10\") == \"5 6 6\\n6 7 7\\n6 8 8\\n6 9 9\\n6 5 6\\n6 4 5\\n6 3 4\\n6 2 3\\n6 1 2\\n6 10 9\\n\"\n\nif __name__ == \"__main__\":\n    print(solution(sys", "solution(stdin_sample) == stdout_sample", "solution('''\n2\n3\n2 3\n2 3\n2 3\n1\n1 1\n''') == '''\n2 3 1\n1 1 1\n'''", "solution(stdin) == output", "solution(\"\"\"\n3\n6\n1 6\n1 4\n1 2\n3 6\n3 4\n3 2\n5\n1 5\n1 3\n1 2\n2 5\n2 3\n2\n1 2\n1 2\n\"\"\") == \"\"\"\n1 6 3\n1 4 2\n1 2 1\n3 6 3\n3 4 2\n3 2 1\n1 5 3\n1 3 2\n1 2 1\n2 5 3\n2 3 2\n1 2 1\n\"\"\"", "solution(example1) == expected1\n\n# Get the inputs\ninputs = stdin_to_input(sys.stdin.read())\n\n# Solve each problem\n\nfor i, input in enumerate(inputs):\n    result = solution(input)\n    print('Case #{}: {}'.format(i + 1, result))", "solution(test1) == '''\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n'''\nassert solution(test2) == '''\n1 1 1\n1 1 2\n1 1 3\n2 2 2\n3 3 3\n3 3 4\n3 3 5\n'''\nassert solution(test3) == '''\n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n2 2 2\n2 2 3\n2 2 4\n2 2 5\n3 3 3\n3 3 4\n3 3 5\n4 4 4\n4 4 5\n5 5 5\n'''\nassert solution(test4) == '''\n1 1 1\n1 1 3\n2 2 2\n2 2 3\n3 3 3\n3 3 5\n4 4 4\n4 4 5\n5 5 5\n'''\nassert solution(test5) == '''\n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n2 2 2\n2 2 3\n2 2 4\n2 2 5\n3 3 3\n3 3 4\n3 3 5\n4 4 4\n4 4 5\n5 5 5\n'''\nassert solution(test6) == '''\n1 1 1\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n2 2", "solution(\"\"\"3\n3\n1 2\n2 3\n3 1\n3\n1 2\n2 3\n3 1\n4\n1 4\n4 2\n2 3\n3 1\"\"\") == \"\"\"1 2 2\n2 3 3\n3 1 1\n1 2 2\n2 3 3\n3 1 1\n1 4 4\n4 2 2\n2 3 3\n3 1 1\"\"\", \"Wrong answer\"\n\nprint(\"Success\")", "solution(sample_input) == sample_output", "solution(stdin) == expected_output", "solution(\"\"\"\n4\n4\n1 4\n4 4\n4 1\n2 3\n5\n5 5\n5 5\n5 5\n5 5\n5 5\n7\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n3\n3 3\n3 3\n3 3\n\"\"\") == \"\"\"\n1 4 2\n4 4 4\n4 1 1\n2 3 3\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n1 4 1\n1 4 1\n1 4 1\n1 4 1\n1 4 1\n1 4 1\n1 4 1\n3 3 3\n3 3 3\n3 3 3\n\"\"\"", "solution('''\n2\n5\n1 5\n1 4\n1 3\n1 2\n1 1\n6\n1 6\n1 5\n1 4\n1 3\n1 2\n1 1\n''') == '''\n1 5 3\n1 4 2\n1 3 1\n1 2 2\n1 1 1\n1 6 4\n1 5 3\n1 4 2\n1 3 1\n1 2 2\n1 1 1\n'''", "solution('''\n1\n3\n1 2\n2 3\n1 3\n''') == '''\n1 2 1\n2 3 2\n1 3 1\n'''\nassert solution('''\n1\n6\n1 2\n2 3\n3 4\n4 5\n1 5\n1 6\n''') == '''\n1 2 1\n2 3 2\n3 4 3\n4 5 4\n1 5 3\n1 6 3\n'''\nassert solution('''\n1\n4\n1 2\n1 3\n1 4\n1 4\n''') == '''\n1 2 1\n1 3 2\n1 4 3\n1 4 4\n'''\nassert solution('''\n2\n3\n1 2\n2 3\n1 3\n4\n1 2\n1 3\n1 4\n1 4\n''') == '''\n1 2 1\n2 3 2\n1 3 1\n1 2 1\n1 3 2\n1 4 3\n1 4 4\n'''\nassert solution('''\n1\n6\n1 2\n1 3\n1 4\n1 5\n1 6\n1 6\n''') == '''\n1 2 1\n1 3 2\n1 4 3\n1 5 4\n1 6 5\n1 6 6\n'''\nassert solution('''\n1\n8\n1 2\n1 3\n1 4\n1 5\n", "solution('''\n4\n4\n1 4\n4 4\n4 1\n4 4\n4\n1 4\n4 4\n4 4\n4 4\n4\n1 4\n4 4\n4 4\n4 1\n4\n1 4\n4 4\n4 4\n4 4\n''') == '''\n1 4 1\n4 4 4\n4 1 4\n4 4 4\n1 4 1\n4 4 4\n4 4 4\n4 4 4\n1 4 1\n4 4 4\n4 4 4\n4 1 4\n1 4 1\n4 4 4\n4 4 4\n4 4 4\n'''", "solution(r'''\n''') == r'''\n'''\n\n# get the input\nstdin = open('p1.in', 'r')\ninput = stdin.read()\nstdin.close()\n\n# solve the problem\nsolution = solution(input)\n\n# print the result\nprint(solution)\n\n# save the result\nstdout = open('p1.out', 'w')\nstdout.write(solution)\nstdout.close()", "solution(\"\"\"\n3\n3\n1 3\n2 3\n1 2\n2\n1 2\n2 2\n3\n1 2\n2 3\n3 3\n\"\"\") == \"\"\"\n1 3 1\n2 3 2\n1 2 2\n1 2 1\n2 3 2\n3 3 3\n\"\"\", \"Check the solution\"", "solution(test_data) == true_result\n\n# run the solution online, check the result\n# https://www.sololearn.com/Play/Python#", "solution(\"1\\n\"\n                \"6\\n\"\n                \"2 5\\n\"\n                \"1 3\\n\"\n                \"6 6\\n\"\n                \"5 5\\n\"\n                \"3 4\\n\"\n                \"1 2\\n\") == (\"2 5 4\\n\"\n                            \"1 3 2\\n\"\n                            \"6 6 6\\n\"\n                            \"5 5 5\\n\"\n                            \"3 4 3\\n\"\n                            \"1 2 1\\n\")", "solution('''\n3\n3\n1 2\n3 3\n3 2\n3\n1 3\n2 3\n1 2\n2\n2 3\n1 2\n''') == '''\n1 2 1\n3 3 3\n3 2 2\n1 3 1\n2 3 2\n1 2 1\n2 3 1\n1 2 2\n'''", "solution(sys.stdin) == sys.stdout.read()", "solution(\n'''2\n3\n1 3\n3 2\n3 1\n3\n3 1\n1 3\n2 2\n''') == '''1 3 1\n3 2 2\n3 1 3\n3 1 1\n1 3 3\n2 2 2\n'''", "solution(\"\"\"3\n3\n1 2\n1 3\n1 3\n4\n1 3\n2 3\n3 4\n4 4\n5\n1 2\n1 2\n2 3\n2 3\n3 4\n\"\"\") == \"\"\"1 2 2\n1 3 1\n1 3 3\n2 3 2\n3 4 3\n4 4 4\n1 2 1\n1 2 2\n2 3 2\n2 3 3\n3 4 4\n\"\"\"", "\"10\" == solution(\"10\")\n\n# run with file redirection\nimport sys\nif __name__ == \"__main__\":\n    try:\n        with open(sys.argv[1], \"r\") as f:\n            result = solution(f.read())\n            print(result)\n    except FileNotFoundError:\n        print(\"Test case file is missing.\")", "solution(\"3\\n3\\n1 3\\n2 3\\n3 3\\n2\\n1 2\\n2 2\\n3\\n1 3\\n2 3\\n3 3\") == \"\"\"1 3 1\n2 3 2\n3 3 3\n1 2 1\n2 2 2\n1 3 1\n2 3 2\n3 3 3\"\"\", 'Wrong answer!'\n\n# check the correctness of solution\nassert solution(\"1\\n1\\n1 1\") == \"\"\"1 1 1\"\"\", 'Wrong answer!'", "solution(\"\"\"1\n10\n1 10\n5 8\n7 9\n6 10\n2 10\n2 6\n2 5\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 6\n5 7\n5 8\n5 9\n5 10\n6 7\n6 8\n6 9\n6 10\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n\"\"\") == \"\"\"1 10 1\n2 10 1\n3 10 1\n4 10 1\n5 10 1\n6 10 1\n7 10 1\n8 10 1\n9 10 1\n10 10 1\n2 10 2\n3 10 2\n4 10 2\n5 10 2\n6 10 2\n7 10 2\n8 10 2\n9 10 2\n10 10 2\n3 10 3\n4 10 3\n5 10 3\n6 10 3\n7 10 3\n8 10 3\n9 10 3\n10 10 3\n4 10 4\n5 10 4\n6 10 4\n7 10 4\n8 10 4\n9 10 4\n10 10 4\n5 10 5\n6 10 5\n7 10 5\n8 10 5\n9 10 5\n10 10 5\n", "solution('''\n3\n3\n1 2\n3 4\n3 5\n5\n1 2\n3 4\n5 6\n7 8\n9 10\n4\n1 2\n2 3\n4 5\n5 6\n''') == '''\n1 2 2\n3 4 4\n3 5 5\n1 2 2\n3 4 4\n5 6 6\n7 8 8\n9 10 10\n1 2 1\n2 3 3\n4 5 5\n5 6 6\n'''", "solution('''\n2\n2\n1 2\n2 1\n4\n1 4\n4 1\n1 2\n2 1\n''') == '''\n1 2 1\n2 1 2\n1 4 1\n4 1 4\n1 2 1\n2 1 2\n'''", "solution('''\n5\n1\n1 1\n2\n1 1\n1 1\n4\n1 1\n2 2\n3 3\n4 4\n6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n6\n1 4\n2 4\n3 4\n1 5\n2 5\n3 5\n''') == '''\n1 1 1\n1 1 1\n1 2 1\n2 2 2\n3 3 3\n4 4 4\n1 1 1\n2 1 2\n3 1 3\n1 2 1\n2 2 2\n3 2 3\n'''", "solution(test_input) == test_output\n\n# get the input\nstdin = sys.stdin.read()\n\n# run the solution and get the output\noutput = solution(stdin)\n\n# print the output\nprint(output)", "solution(\"\") == \"\", \"empty input should return empty string\"\nassert solution(\"1 2 3\\n1\") == \"1\\n\", \"one input should return an integer\"\nassert solution(\"1\\n1 2 3\\n1\\n1 2\\n3\\n3 4\\n2\\n2 4\\n3\\n2 3\\n2\\n3 4\\n4\\n1 4\\n2\\n1 3\\n3\\n1 4\\n4\\n\") == \"1 2 1\\n1 2 3\\n1 3 2\\n1 3 3\\n1 4 2\\n1 4 4\\n2 3 3\\n2 4 2\\n2 4 4\\n3 4 3\\n3 4 4\\n\", \"check the correctness of solution\"", "solution(\n'''3\n3\n1 3\n2 3\n1 2\n3\n1 3\n2 3\n1 2\n1\n1 1\n''') == '''1 3 2\n2 3 1\n1 2 3\n1 3 2\n2 3 1\n1 2 3\n1 1 1'''", "solution(stdin) == stdout\n\n# check the correctness of test.py\n# python3 -m unittest -v", "solution(\"\"\"\n6\n1\n1 1\n2\n1 2\n2 1\n3\n1 3\n2 3\n2 2\n4\n1 4\n2 3\n2 2\n3 2\n5\n1 4\n1 2\n1 1\n2 3\n2 1\n2 2\n3 1\n3 2\n3 3\n4 2\n4 4\n5 5\n6\n1 6\n2 5\n2 3\n2 2\n3 1\n3 4\n3 5\n3 6\n4 3\n4 4\n4 5\n4 6\n5 1\n5 2\n5 4\n5 5\n5 6\n6 1\n6 2\n6 4\n6 5\n6 6\n\"\"\") == \"\"\"\n1 1 1\n1 2 2\n2 1 1\n1 3 3\n2 3 1\n2 2 1\n1 4 4\n2 3 3\n2 2 2\n3 2 2\n1 5 5\n1 2 4\n1 1 1\n2 3 3\n2 1 2\n2 2 1\n3 1 3\n3 2 2\n3 3 1\n4 2 4\n4 4 2\n5 5 1\n1 6 6\n2 5 5\n2 3 3\n2 2 2\n3 1 3\n3 4 4\n3 5 5\n3 6 6\n4 3 3\n4 4 4\n4 5 5\n4 6 6\n5 1 5\n5 2 4\n5", "solution('''\n3\n3\n1 3\n2 3\n1 2\n4\n1 4\n3 4\n1 3\n2 4\n5\n1 5\n3 5\n2 4\n1 3\n2 3\n''') == '''\n1 3 2\n2 3 3\n1 2 1\n1 4 3\n3 4 4\n1 3 2\n2 4 4\n1 5 4\n3 5 5\n2 4 3\n1 3 2\n2 3 3\n'''\n\nassert solution('''\n5\n5\n1 5\n3 5\n2 4\n1 3\n2 3\n3\n1 3\n2 3\n1 2\n2\n1 2\n2 1\n3\n1 3\n2 3\n3 1\n''') == '''\n1 5 4\n3 5 5\n2 4 3\n1 3 2\n2 3 3\n1 3 2\n2 3 3\n1 2 1\n1 2 1\n2 1 2\n1 3 3\n2 3 2\n3 1 1\n'''\n\n# test for one test case with incorrect answer\n# assert solution('''\n# 1\n# 3\n# 1 3\n# 2 3\n# 1 2\n# ''') == '''\n# 1 3 2\n# 2 3 3\n# 1 2 1\n# '''\n\n# test for invalid test data\n# assert solution('''", "solution(\"\"\"\n2\n3\n1 3\n3 2\n3 1\n3\n1 2\n1 2\n1 2\n\"\"\") == \"\"\"\n1 3 2\n3 2 1\n3 1 3\n1 2 1\n1 2 1\n1 2 1\n\"\"\"", "solution(\"\"\"2\n2\n1 2\n2 2\n3\n1 2\n1 2\n1 2\n\"\"\") == \"\"\"1 2 2\n2 2 2\n1 2 1\n1 2 2\n1 2 1\n\"\"\"\n# run the function with input\nsolution(input())", "solution('''\n1\n1\n1 1\n''') == '''\n1 1 1\n'''\n\nprint('All done!')", "solution(\"\"\"4\n4\n1 4\n2 4\n3 4\n4 4\n1\n1 1\n2\n1 2\n2 2\n3\n1 3\n2 3\n3 3\"\"\") == \"\"\"1 4 1\n2 4 2\n3 4 3\n4 4 4\n1 1 1\n1 2 1\n2 2 2\n1 3 1\n2 3 2\n3 3 3\"\"\", \"Example case\"\n\n# test given examples\nassert solution(\"\"\"1\n3\n1 3\n2 3\n3 3\"\"\") == \"\"\"1 3 1\n2 3 2\n3 3 3\"\"\", \"Another example case\"\n\nassert solution(\"\"\"2\n2\n1 2\n2 2\n1\n1 1\"\"\") == \"\"\"1 2 1\n2 2 2\n1 1 1\"\"\", \"Another example case\"\n\nassert solution(\"\"\"1\n2\n1 2\n2 2\"\"\") == \"\"\"1 2 1\n2 2 2\"\"\", \"Another example case\"\n\nassert solution(\"\"\"1\n1\n1 1\"\"\") == \"\"\"1 1 1\"\"\", \"Another example case\"\n\n# stress testing (random number of test cases with random ranges)\nimport random\nimport string\n\ndef rand_int(a, b):\n    return random.randint(a, b)\n\ndef rand_range(a, b):\n    return [rand_int(", "solution('''\n2\n3\n1 3\n2 3\n1 2\n3\n1 3\n2 3\n1 2\n''') == '''\n1 3 2\n2 3 1\n1 2 2\n1 3 2\n2 3 1\n1 2 2\n'''", "solution(\"\"\"\n1\n4\n2 3\n1 3\n4 4\n2 4\n\"\"\") == \"\"\"\n2 3 2\n1 3 1\n4 4 4\n2 4 3\n\"\"\"\n\n# get input from stdin\ndef get_input() -> str:\n    import sys\n    return sys.stdin.read()\n\n# get output from stdout\ndef get_output(solution: str) -> str:\n    import sys\n    old = sys.stdout\n    sys.stdout = open('out.txt', 'w')\n    print(solution)\n    sys.stdout.close()\n    sys.stdout = old\n    return open('out.txt', 'r').read()\n\n# submit with stdin\nif __name__ == '__main__':\n    import subprocess\n    process = subprocess.Popen(['java', '-cp', '.:/usr/share/java/junit4.jar', 'Main'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n    stdout, stderr = process.communicate(get_input().encode())\n    assert get_output(solution(get_input())) == stdout.decode()", "solution(str_sample_input) == str_sample_output", "solution('''\n2\n2\n1 2\n2 2\n3\n1 2\n2 3\n3 3\n''') == '''\n1 2 2\n2 2 2\n1 2 1\n2 3 2\n3 3 2\n'''", "solution('''3\n3\n1 3\n2 3\n1 2\n2\n1 2\n2 2\n1\n1 1\n''') == '''1 3 2\n2 3 1\n1 2 2\n1 2 1\n1 1 1\n'''", "solution(\"\"\"\n1\n4\n1 4\n2 4\n3 4\n4 4\n\"\"\") == \"\"\"\n1 4 1\n2 4 2\n3 4 3\n4 4 4\n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n1 3\n2 3\n3 3\n\"\"\") == \"\"\"\n1 3 1\n2 3 2\n3 3 3\n\"\"\"\n\n# check the performance of solution\n\nimport random\nrandom.seed(42)\n\ndef solution_randomized(n, lines):\n    def split(i):\n        (l, r) = lines[i]\n        assert l <= r\n        m = (l + r) // 2\n        return ((l, m - 1), (m + 1, r))\n\n    def answer(i):\n        (l, r) = lines[i]\n        assert l <= r\n        if (l, r) == (1, n):\n            return l\n        else:\n            for j in range(i):\n                (l2, r2) = lines[j]\n                assert l2 <= r2\n                if l2 <= l and r <= r2:\n                    assert (l2, r2) != (l, r)\n                    d = answer(j)\n                    if l2 <= d - 1 and d - 1 <= r2:\n                        return d", "solution('''\n1\n10\n1 10\n8 10\n9 10\n7 9\n2 4\n2 3\n5 7\n6 8\n1 1\n1 5\n''') == '''\n1 10 10\n8 10 9\n9 10 8\n7 9 7\n2 4 2\n2 3 2\n5 7 6\n6 8 7\n1 1 1\n1 5 4\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n9\n1 9\n1 6\n1 4\n1 2\n1 1\n7 9\n8 9\n4 8\n6 8\n''') == '''\n1 9 9\n1 6 6\n1 4 4\n1 2 2\n1 1 1\n7 9 7\n8 9 8\n4 8 6\n6 8 7\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n10\n1 10\n2 10\n4 10\n5 10\n6 10\n7 10\n8 10\n8 9\n8 8\n8 7\n''') == '''\n1 10 9\n2 10 8\n4 10 7\n5 10 6\n6 10 5\n7 10 4\n8 10 3\n8 9 2\n8 8 1\n8 7 2\n'''\n\n# check the correctness of solution\nassert solution('''\n1\n20\n1 20\n3 20\n6"], "finish_reason": ["stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length", "length"], "sum_logprob": [-23.92886977578001, -400.5586208875126, -38.511874935150004, -25.920848256580012, -32.81807620496001, -112.17278802349108, -7.590570686400001, -18.983860717299994, -8.294792149000001, -33.955390250419995, -58.83491013954, -59.759824342070026, -35.93565249095001, -6.2691820467, -8.669342419, -50.68772960168401, -21.352374186829998, -63.051045717452965, -39.571714130169994, -39.010133890056025, -31.52745719129999, -43.30016305252999, -35.54588503603699, -31.40433561595, -9.066691118500001, -27.5957316272, -38.93417568298002, -61.593957856019976, -40.57722803013499, -60.62535841911298, -35.81876479221001, -19.550994314200015, -43.14872601840998, -21.870263662510002, -105.5462808806399, -21.266617104049985, -31.508807069539998, -105.41540752605403, -99.09699593138605, -24.413157426349986, -39.3735921492, -19.1697670553, -105.79767739909005, -14.501918033249998, -93.79497019976696, -12.048662284759999, -16.199015618099995, -20.024913015299997, -137.65849429218989, -126.61327903087603], "mean_logprob": [-0.27504448018137934, -1.3351954029583766, -0.5348871518770834, -0.35508011310383564, -0.26681362768260164, -0.37390929341163665, -0.5838900528000001, -0.4745965179325, -1.036849018625, -0.3203338702869811, -0.7447456979688608, -0.19919941447356668, -0.3704706442365979, -0.5699256406090909, -0.8669342419, -0.32914110130963636, -0.22012756893639177, -0.21017015239151, -0.29096848625125, -0.3514426476581622, -0.43188297522328767, -1.1394779750665789, -0.29621570863364166, -0.40261968738397436, -0.56666819490625, -0.45238904306885247, -0.4013832544637113, -0.7162088122793023, -0.3409851094969328, -0.20208452806371, -0.3379128753982075, -0.31533861797096774, -0.3293795879267939, -0.383688836184386, -0.5963066716420339, -0.30821184208768115, -1.0502935689846666, -0.35138469175351333, -0.33032331977128665, -0.4137823292601695, -0.6249776531619048, -0.5809020319787879, -0.35265892466363336, -0.23390190376209677, -0.3302639795766444, -0.8032441523173334, -0.2945275566927273, -0.3452571209534483, -0.45886164764063336, -0.42204426343625334]}
{"prompt": "'''\nThere are n heaps of stone. The i-th heap has h_i stones. You want to change the number of stones in the heap by performing the following process once: \n\n  * You go through the heaps from the 3-rd heap to the n-th heap, in this order. \n  * Let i be the number of the current heap. \n  * You can choose a number d (0 \u2264 3 \u22c5 d \u2264 h_i), move d stones from the i-th heap to the (i - 1)-th heap, and 2 \u22c5 d stones from the i-th heap to the (i - 2)-th heap. \n  * So after that h_i is decreased by 3 \u22c5 d, h_{i - 1} is increased by d, and h_{i - 2} is increased by 2 \u22c5 d. \n  * You can choose different or same d for different operations. Some heaps may become empty, but they still count as heaps. \n\n\n\nWhat is the maximum number of stones in the smallest heap after the process?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 2\u22c5 10^5). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (3 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second lines of each test case contains n integers h_1, h_2, h_3, \u2026, h_n (1 \u2264 h_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the maximum number of stones that the smallest heap can contain.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution('''1\n5\n1 2 3 4 5''') == '6'\n\nassert solution('''1\n7\n10 7 5 5 5 5 5''') == '20'\n\nassert solution('''3\n5\n5 4 3 2 1\n5\n5 4 3 2 1\n5\n5 4 3 2 1''') == '''15\n15\n15'''\n\n# stress testing\nfrom random import randint\nwhile True:\n    N = randint(3, 200000)\n    height = [randint(1, 10**9) for _ in range(N)]\n    assert int(solution(f'1\\n{N}\\n{height}')) == expected_solution(height)\n\n# unit testing\ndef expected_solution(height: List[int]) -> int:\n    height = height[:]\n    while len(height) > 2:\n        height[-3] += height[-2]\n        height[-2] += height[-1]\n        height.pop()\n    return min(height)", "solution('''5\n5\n1 2 3 4 5\n7\n5 5 5 5 5 5 5\n10\n2 3 3 3 3 3 3 3 3 3\n5\n5 4 3 2 1\n5\n7 8 9 10 1''') == '''1\n5\n0\n0\n9'''", "solution('''2\n4\n1 2 3 4\n5\n5 5 5 5 5''') == '''1\n5'''", "solution(\n    \"\"\"\n    1\n    3\n    1 2 3\n    \"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"\n    3\n    3\n    2 2 2\n    5\n    2 2 2 2 2\n    4\n    1 1 1 1\n    \"\"\"\n) == \"\"\"\n3\n2\n1\n\"\"\"\n\nassert solution(\n    \"\"\"\n    1\n    7\n    5 3 3 2 2 1 1\n    \"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"\n    1\n    6\n    3 3 3 3 3 3\n    \"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"\n    1\n    4\n    5 5 5 5\n    \"\"\"\n) == \"3\"\n\nassert solution(\n    \"\"\"\n    1\n    1\n    1000000000\n    \"\"\"\n) == \"1000000000\"\n\nassert solution(\n    \"\"\"\n    1\n    1\n    4\n    \"\"\"\n) == \"4\"\n\nassert solution(\n    \"\"\"\n    1\n    1\n    3\n    \"\"\"\n) == \"3\"\n\nassert solution(\n    \"\"\"\n    1\n    3\n    4 4 4\n    \"\"\"\n) == \"3\"\n\nassert solution(\n    \"\"\"\n    1\n    2\n    5 2\n    \"\"\"", "solution('''\n2\n4\n1 2 4 5\n5\n1 2 4 5 8\n''') == '''\n0\n4\n'''", "solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n1\n'''\n\nassert solution('''\n2\n3\n2 2 2\n3\n1 1 1\n''') == '''\n2\n0\n'''", "solution(STANDARD_INPUT) == STANDARD_OUTPUT", "solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\n# check the correctness of solution\nassert solution(\"\") == \"\"\n\nprint(\"passed all test cases\")", "solution(\"\"\"1\n5\n2 2 6 6 4\"\"\") == \"2\"\n\nassert solution(\"\"\"2\n3\n3 3 3\n3\n3 3 2\"\"\") == \"3\\n2\"", "solution('''3\n3\n3 4 5\n3\n3 6 9\n3\n3 7 11''') == '''1\n2\n3'''", "solution('''\n4\n4\n4 4 4 4\n4\n1 4 1 4\n4\n4 1 4 1\n4\n4 1 1 4\n''') == '''\n4\n4\n4\n4\n'''", "solution('''\n''') == '''\n'''", "solution('''\n1\n5\n1 2 3 4 5\n''') == '''\n5\n'''\n\n# get input\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    h = list(map(int, input().split()))\n    print('Case #{}: {}'.format(i, solution(n, h)))", "solution(r'''\n4\n4\n4 2 8 6\n4\n4 2 8 6\n4\n4 2 8 6\n4\n4 2 8 6\n''') == r'''\n2\n8\n8\n8\n'''", "solution('''\n1\n4\n1 1 1 1\n''') == '''\n1\n'''\nassert solution('''\n2\n4\n1 1 1 1\n4\n1 1 1 2\n''') == '''\n1\n2\n'''\n\n# get input for evaluation\n\n# evaluate solution performance\nprint(solution(input()))", "solution(stdin=\"\"\"\n2\n5\n2 3 2 3 2\n7\n1 1 1 2 1 1 1\n\"\"\") == \"\"\"\n2\n1\n\"\"\"\n\nassert solution(stdin=\"\"\"\n3\n3\n1 1 2\n3\n1 2 3\n3\n2 3 2\n\"\"\") == \"\"\"\n1\n1\n2\n\"\"\"\n\nassert solution(stdin=\"\"\"\n5\n5\n5 5 5 5 5\n5\n5 5 5 5 4\n5\n5 5 5 4 4\n5\n5 5 4 4 4\n5\n5 4 4 4 4\n\"\"\") == \"\"\"\n5\n4\n4\n4\n4\n\"\"\"", "solution(\"\") == \"\"", "solution('''\n1\n4\n1 2 3 7\n''') == '''\n1\n'''\n\nassert solution('''\n2\n4\n1 2 3 7\n2\n1 2\n''') == '''\n1\n2\n'''\n\n# print the solution for given input\nprint(solution(input()))", "solution(INPUT_SAMPLE0) == OUTPUT_SAMPLE0", "solution('''2\n5\n1 2 3 4 5\n4\n1 1 1 1''') == '''2\n0'''", "solution('''\n''') == '''\n'''", "solution('''\n2\n3\n2 3 1\n4\n3 3 3 5\n''') == '''\n2\n3\n'''", "solution('''\n1\n4\n1 2 1 2\n''') == '2', 'test 1'\n\nassert solution('''\n2\n4\n1 2 1 2\n4\n1 2 3 4\n''') == '2\\n1', 'test 2'", "solution(get_input_filename(__file__)) == get_output_filename(__file__)", "solution(get_input('in1.txt')) == get_output('out1.txt')\nassert solution(get_input('in2.txt')) == get_output('out2.txt')\nassert solution(get_input('in3.txt')) == get_output('out3.txt')\n\n# check the efficiency of solution\nassert evaluate_performance(solution, get_input('in4.txt')) < 10000\nassert evaluate_performance(solution, get_input('in5.txt')) < 10000\nassert evaluate_performance(solution, get_input('in6.txt')) < 10000\nassert evaluate_performance(solution, get_input('in7.txt')) < 10000\nassert evaluate_performance(solution, get_input('in8.txt')) < 10000\n\n# check the correctness of solution for large input\nassert solution(get_input('in9.txt')) == get_output('out9.txt')\nassert solution(get_input('in10.txt')) == get_output('out10.txt')\nassert solution(get_input('in11.txt')) == get_output('out11.txt')\nassert solution(get_input('in12.txt')) == get_output('out12.txt')\nassert solution(get_input('in13", "solution(sample_input1) == sample_output1\nassert solution(sample_input2) == sample_output2\nassert solution(sample_input3) == sample_output3\n\nprint('Sample Input 1:', sample_input1)\nprint('Sample Output 1:', sample_output1)\nprint('Sample Input 2:', sample_input2)\nprint('Sample Output 2:', sample_output2)\nprint('Sample Input 3:', sample_input3)\nprint('Sample Output 3:', sample_output3)\n\n# submit on hackerrank\nimport sys\n\ndef readInput():\n    lines = []\n    for line in sys.stdin:\n        lines.append(line.rstrip('\\n'))\n    return lines\n\nif __name__ == '__main__':\n    lines = readInput()\n    print(solution(lines))", "solution(\"\") == \"\"", "solution(\"\") == \"\", \"Empty input\"\nassert solution(\" \") == \"\", \"Space input\"\nassert solution(\"    \") == \"\", \"Space input\"\nassert solution(\"\\n\") == \"\", \"Space input\"\nassert solution(\"0\") == \"\", \"0 input\"\nassert solution(\"1\") == \"\", \"1 input\"\nassert solution(\"2\") == \"\", \"2 input\"\nassert solution(\"1 3\") == \"\", \"1 3 input\"\nassert solution(\"1 2 3\") == \"\", \"1 2 3 input\"\nassert solution(\"1 0 3\") == \"\", \"1 0 3 input\"\nassert solution(\"1\\n3\\n0\\n\") == \"\", \"1\\n3\\n0\\n input\"\nassert solution(\"1\\n3\\n0\\n 1\\n\") == \"\", \"1\\n3\\n0\\n 1\\n input\"\nassert solution(\"1\\n3\\n0\\n 1 2\\n\") == \"\", \"1\\n3\\n0\\n 1 2\\n input\"\nassert solution(\"1\\n3\\n0\\n 1 2 3\\n\") == \"\", \"1\\n3\\n0\\n 1 2 3\\n input\"\n\n# The source of random integer\nimport random\n\n# Generate some random integer with bias", "solution('''\n''') == '''\n'''", "solution('''3\n3\n3 3 3\n3\n2 1 1\n5\n6 3 1 7 4''') == '''1\n1\n5'''\n\n# check performance of solution\nprint(f'performance...')\nimport random\nh = [random.randint(1, 10**9) for _ in range(2*10**5)]\n_input = f'1\\n{2*10**5}\\n' + ' '.join(map(str, h))\nprint(f'{solution(_input) == max(h)}')", "solution('''\n2\n4\n2 3 4 5\n5\n1 2 3 4 5\n''') == '''\n3\n3\n'''", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n\n# check the performance of solution\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution(stdin=\"\"\"\\\n2\n3\n1 3 1\n3\n2 3 2\n\"\"\") == \"\"\"\\\n2\n2\n\"\"\"\nassert solution(stdin=\"\"\"\\\n3\n3\n3 2 1\n5\n5 4 3 2 1\n5\n5 5 5 5 5\n\"\"\") == \"\"\"\\\n2\n5\n0\n\"\"\"", "solution('''\n5\n5\n5 2 1 3 1\n5\n5 2 1 1 1\n5\n5 2 1 3 3\n5\n5 2 1 3 4\n5\n5 2 1 4 4\n''') == '''\n4\n4\n4\n4\n4\n'''", "solution('''\n1\n5\n1 2 3 4 5\n''') == '1', 'Example1'\n\nassert solution('''\n2\n4\n2 6 3 4\n3\n3 3 3\n''') == '1\\n3', 'Example2'\n\nprint('done')\n\n# if __name__ == '__main__':\n#     print(solution(stdin))", "solution(stdin) == stdout\n \n# check the performance of solution\nimport timeit\n\nnumber_of_tests = 10\nt = timeit.timeit('solution(stdin)', number=number_of_tests, globals=globals())\naverage_time = t / number_of_tests\n\nassert average_time < 100", "solution(\"\"\"\n3\n4\n2 3 2 3\n3\n2 3 1\n5\n2 2 2 2 2\n\"\"\") == \"\"\"\n2\n1\n2\n\"\"\"", "solution('''1\n5\n1 2 3 4 5''') == '5'\nassert solution('''3\n3\n1 2 3\n3\n3 2 1\n3\n2 3 4''') == '2\n3\n3'\nassert solution('''3\n5\n1 1 1 1 1\n5\n2 2 2 2 2\n5\n3 3 3 3 3''') == '0\n0\n0'\n\n# print solution performance\n# import time\n# print(time.process_time())\n# print(solution('''10000\n# 5\n# 1 2 3 4 5'''))\n# print(time.process_time())\n# assert solution('''1\n# 5\n# 1 2 3 4 5''') == '5'\n# assert solution('''3\n# 3\n# 1 2 3\n# 3\n# 3 2 1\n# 3\n# 2 3 4''') == '2\n# 3\n# 3'\n# assert solution('''3\n# 5\n# 1 1 1 1 1\n# 5\n# 2 2 2 2 2\n# 5\n# 3 3 3 3 3''') == '0\n# 0\n# 0'\n# print(time.process_time())\n# print(solution('''1\n# 5\n# 1 2 3 4 5'''))\n", "solution(\"\"\"\n2\n4\n2 3 1 3\n5\n5 4 3 2 1\n\"\"\") == '\"\"'", "solution('''\n1\n3\n10 10 10\n''') == '10'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1000000000 1000000000 1000000000\n''') == '333333334'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1 1 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n1000000000 1000000000 1\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n3\n7 7 7\n''') == '7'\n\n# check the correctness of solution\nassert solution('''\n1\n4\n4 3 2 1\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 5 5 5 5\n''') == '5'\n\n# check the correctness of solution\nassert solution('''\n1\n5\n5 4 3 2 1\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n7\n4 3 2 1 3 4 5\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n7\n1 2 3 4 5 6 7\n''') == '", "solution(TEST_INPUT) == EXPECTED_OUTPUT", "solution('''1\n5\n1 2 3 4 5''') == '2'\nassert solution('''1\n3\n1 2 3''') == '0'\nassert solution('''1\n5\n5 4 3 2 1''') == '0'\nassert solution('''1\n8\n1 2 3 4 5 6 7 8''') == '3'\nassert solution('''2\n3\n1 2 3\n5\n5 4 3 2 1''') == '0\\n3'\n\nprint('All tests passed successfully!')", "solution('''2\n3\n1 2 3\n4\n10 10 10 100''') == '''6\n90'''", "solution(\"\"\"1\n4\n1 2 3 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"2\n3\n1 1 1\n3\n1 2 3\n\"\"\") == \"1\\n1\"\n\nassert solution(\"\"\"1\n4\n6 6 6 6\n\"\"\") == \"4\"\n\nassert solution(\"\"\"2\n5\n1 2 3 4 5\n5\n5 4 3 2 1\n\"\"\") == \"0\\n0\"\n\nassert solution(\"\"\"1\n4\n1 10 1 10\n\"\"\") == \"8\"\n\nassert solution(\"\"\"2\n3\n3 3 3\n5\n5 4 3 2 1\n\"\"\") == \"2\\n1\"\n\nassert solution(\"\"\"1\n4\n7 7 7 7\n\"\"\") == \"5\"\n\nassert solution(\"\"\"1\n2\n2 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"1\n3\n1 1 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"1\n3\n1 2 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"1\n3\n3 2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"1\n3\n1 2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"1\n3\n2 2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"1", "solution('''\n5\n5\n5 4 3 2 1\n5\n1 2 3 4 5\n3\n3 3 3\n3\n3 2 1\n10\n3 5 7 9 8 6 4 2 1 1\n''') == '''\n1\n1\n3\n1\n3\n'''", "solution('''3\n3\n1 2 3\n3\n3 2 1\n3\n1 1 1''') == '''1\n2\n1'''", "solution('''\n2\n3\n2 1 2\n3\n1 1 1\n''') == '''\n1\n0\n'''\n\nprint(solution('''\n2\n3\n2 1 2\n3\n1 1 1\n'''))", "solution('''\n5\n5\n5 3 3 3 3\n5\n5 1 1 1 1\n5\n5 2 2 2 2\n5\n5 2 2 2 5\n5\n5 2 1 2 5\n''') == '''\n0\n0\n2\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n10\n1 1 1 1 1 1 1 1 1 1\n10\n9 9 9 9 9 9 9 9 9 9\n10\n2 2 3 3 4 4 5 5 6 6\n''') == '''\n0\n9\n0\n'''", "solution(read_file(\"test-heaps.txt\")) == read_file(\"test-heaps-solution.txt\")\nprint(\"accepted\")", "solution('''3\n3\n1 3 3\n4\n10 10 10 10\n8\n7 7 7 4 5 5 8 2''') == '1\\n10\\n4'\n\n# upload the solution to the judge system\nimport urllib.request\nimport urllib.parse\nimport json\n\ndef submit_solution(submission_id: int, task_id: int, stdin: str, stdout: str, stderr: str, compile_output: str,\n                    message: str, status: str, public: int, token: str) -> dict:\n    url = 'https://dmoj.ca/api/submission/%d' % submission_id\n    data = {\n        'task': task_id,\n        'test_case_input': stdin,\n        'test_case_output': stdout,\n        'test_case_status': 'passed',\n        'language': 'python3',\n        'source': '',\n        'is_public': False,\n        'cpu_time': 0,\n        'memory': 0,\n        'submit_token': token,\n    }\n    data = urllib.parse.urlencode(data).encode()\n    req = urllib.request.Request(url, data=data, method='"], "finish_reason": ["stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "length"], "sum_logprob": [-126.41010926073001, -53.79718310264001, -16.553805199999996, -109.41026316028014, -24.945777638199992, -23.59713129091, -10.178895775456, -20.597079520850002, -37.81720444714002, -30.139694971900003, -30.9790775948, -6.073274142000001, -27.341292695430006, -34.0244469887, -46.81180446930999, -70.01297364720999, -5.111850306000001, -41.198396083930014, -10.490257589039999, -16.7080099094, -6.132144186, -21.280649914199998, -30.197111258149995, -16.041655247729995, -57.89205681718103, -47.40410037050398, -5.120437079999999, -142.52440723873303, -6.115264711999998, -87.72091006485, -18.444977435899997, -13.3454387826, -53.050371756330016, -47.122497668680005, -60.090429723220005, -49.974286171793985, -28.276724860200005, -97.77640508566394, -28.758563228199996, -84.03969292466098, -11.917159082100001, -55.72507511687602, -25.4679330455, -121.80006209650807, -47.9098066612, -17.705866977399996, -21.65862191940001, -80.16221171978002, -36.49953274233, -134.591153213372], "mean_logprob": [-0.5202062109495061, -0.779669320328116, -0.5339937161290322, -0.36470087720093336, -0.7127365039485715, -0.39328552151516666, -0.5987585750268235, -0.3376570413254098, -0.8046213712157447, -0.8372137492194445, -0.5957514922076923, -0.4338052958571429, -0.29399239457451615, -0.6300823516425926, -0.570875664259878, -0.4730606327514189, -0.851975051, -0.5350441049861039, -0.6170739758258823, -0.5389680615935484, -0.438010299, -0.6448681792181818, -0.4870501815830645, -0.66840230198875, -0.19297352272393667, -0.23821155965077387, -0.85340618, -0.47508135746244334, -0.43680462228571426, -0.6853196098816406, -0.5269993553114286, -0.38129825093142855, -0.6549428611892593, -0.7139772374042425, -0.6531568448176087, -0.6094425142901707, -0.706918121505, -0.32592135028554664, -1.0270915438642858, -0.28013230974887, -0.7010093577705883, -0.44939576707158063, -0.8782045877758621, -0.40600020698836, -0.7150717412119403, -0.49182963826111115, -0.36709528676949155, -0.5894280273513235, -1.042843792638, -0.44863717737790665]}
{"prompt": "'''\nThe statement of this problem shares a lot with problem A. The differences are that in this problem, the probability is introduced, and the constraint is different.\n\nA robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell. \n\nAfter a lot of testings in problem A, the robot is now broken. It cleans the floor as described above, but at each second the cleaning operation is performed with probability \\frac p {100} only, and not performed with probability 1 - \\frac p {100}. The cleaning or not cleaning outcomes are independent each second.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the expected time for the robot to do its job.\n\nIt can be shown that the answer can be expressed as an irreducible fraction \\frac x y, where x and y are integers and y not \u2261 0 \\pmod{10^9 + 7} . Output the integer equal to x \u22c5 y^{-1} mod (10^9 + 7). In other words, output such an integer a that 0 \u2264 a < 10^9 + 7 and a \u22c5 y \u2261 x \\pmod {10^9 + 7}.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10). Description of the test cases follows.\n\nA test case consists of only one line, containing n, m, r_b, c_b, r_d, c_d, and p (4 \u2264 n \u22c5 m \u2264 10^5, n, m \u2265 2, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m, 1 \u2264 p \u2264 99) \u2014 the sizes of the room, the initial position of the robot, the position of the dirt cell and the probability of cleaning in percentage.\n\nOutput\n\nFor each test case, print a single integer \u2014 the expected time for the robot to clean the dirty cell, modulo 10^9 + 7.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["solution(\"\") == \"\"\n\n# check the correctness of solution using independed code checking tool\n# do not care about this code.\nimport solution_checker as sc\n\ntest_inputs = []\ntest_outputs = []\n\nfor test_input, test_output in zip(test_inputs, test_outputs):\n    assert sc.solution_checker(solution, test_input), \"Wrong answer for the input: {0}\".format(test_input)\n\nprint(\"All tests are passed\")", "solution('''\n1\n4 4 1 1 4 4 99\n''') == '0'\n\nassert solution('''\n1\n4 4 1 1 4 4 51\n''') == '1'\n\nassert solution('''\n1\n4 4 1 1 4 4 50\n''') == '2'\n\nassert solution('''\n1\n4 4 1 1 4 4 1\n''') == '999999999'\n\nassert solution('''\n1\n4 4 1 1 4 4 2\n''') == '500000000'\n\nassert solution('''\n1\n4 4 1 1 4 4 3\n''') == '333333333'\n\nassert solution('''\n1\n4 4 1 1 4 4 4\n''') == '250000000'\n\nassert solution('''\n1\n4 4 1 1 4 4 5\n''') == '200000000'\n\nassert solution('''\n1\n4 4 1 1 4 4 6\n''') == '166666667'\n\nassert solution('''\n1\n4 4 1 1 4 4 7\n''') == '142857143'\n\nassert solution('''\n1\n4 4 1 1 4 4 8\n''') == '125000000'\n\nassert solution('''\n1\n4 4 1 1 4 4 9\n''') == '111111111'", "solution(input) == output\n\nwith open('testcase.input', 'r') as f:\n    testcases = [line.strip() for line in f.readlines()]\n\nfor index, testcase in enumerate(testcases):\n    print(f\"Testcase {index} passed: {solution(testcase) == output}\")", "solution(\"\") == \"\", \"Case 1\"\nassert solution(\"\") == \"\", \"Case 2\"\nassert solution(\"\") == \"\", \"Case 3\"\nassert solution(\"\") == \"\", \"Case 4\"\nassert solution(\"\") == \"\", \"Case 5\"\nassert solution(\"\") == \"\", \"Case 6\"\nassert solution(\"\") == \"\", \"Case 7\"\nassert solution(\"\") == \"\", \"Case 8\"\nassert solution(\"\") == \"\", \"Case 9\"\nassert solution(\"\") == \"\", \"Case 10\"\nassert solution(\"\") == \"\", \"Case 11\"\nassert solution(\"\") == \"\", \"Case 12\"\nassert solution(\"\") == \"\", \"Case 13\"\nassert solution(\"\") == \"\", \"Case 14\"\nassert solution(\"\") == \"\", \"Case 15\"\nassert solution(\"\") == \"\", \"Case 16\"\nassert solution(\"\") == \"\", \"Case 17\"\nassert solution(\"\") == \"\", \"Case 18\"\nassert solution(\"\") == \"\", \"Case 19\"\nassert solution(\"\") == \"\", \"Case 20\"\nassert solution(\"\") == \"\", \"Case 21\"\nassert solution(\"\") == \"\", \"Case 22\"\nassert solution(\"\") == \"\", \"Case 23\"\nassert solution(\"\") == \"\", \"Case 24\"\nassert solution(\"\") == \"\", \"Case 25\"\nassert", "solution('''\n''') == '''\n'''\n\n# check the correctness of solution\nassert solution('''\n''') == '''\n'''\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')", "(solution('''\n1\n4 4 1 1 4 4 95\n''') == '924')\nassert (solution('''\n1\n2 2 1 1 2 2 95\n''') == '12')\nassert (solution('''\n1\n3 3 1 1 2 2 50\n''') == '20')\nassert (solution('''\n1\n10 10 1 1 1 1 95\n''') == '110')\nassert (solution('''\n1\n6 4 1 1 6 4 50\n''') == '22')\nassert (solution('''\n1\n8 8 1 1 8 8 50\n''') == '44')\nassert (solution('''\n1\n3 3 1 1 2 2 99\n''') == '26')\nassert (solution('''\n1\n3 3 1 1 2 2 1\n''') == '102')\nassert (solution('''\n1\n9 5 1 1 9 5 50\n''') == '30')\nassert (solution('''\n1\n4 8 1 1 4 4 50\n''') == '24')\nassert (solution('''\n1\n10 10 1 1 9 9 75\n''') == '67')\nassert (solution('''\n1\n10 10 1 1 9 9 99\n''') == '55')\n", "solution('''5\n5 5 1 1 2 2 20\n5 5 1 1 2 2 50\n5 5 1 1 2 2 80\n8 8 3 3 8 4 100\n100000 100000 2 2 25 25 50''') == '''13\n10\n9\n9\n114999'''", "solution(SAMPLE_DATA) == RESULT\n\nif __name__ == '__main__':\n    # data = stdin\n    data = '''1\n'''\n    stdin = data.splitlines()\n    print(solution(stdin))", "True #\nprint(solution(sys.stdin.read()))", "(solution('''\n2\n3 3 1 1 3 3 25\n3 3 1 1 3 3 75\n''') == '''\n5\n3\n''')", "solution('''\n''') == '''\n'''\n# for local testing\nimport os\nprint(solution(open(os.path.join(os.path.dirname(__file__), 'in.txt'), 'r').read()))", "solution('''\n1\n3 3 2 2 2 2 50\n''') == '3'\n\n# check whether solution gets TLE\nimport timeit\nprint(f'Time used for TLE checking: {timeit.timeit(lambda: solution('''\n1\n3 3 2 2 2 2 50\n'''), number=1)}')", "solution(stdin) == stdout\n\n# test some examples\nassert solution('''\n1\n4 4 2 2 4 2 60\n''') == '''\n4\n'''\n\nassert solution('''\n1\n4 4 2 2 4 2 50\n''') == '''\n6\n'''\n\nassert solution('''\n1\n4 4 2 2 4 2 90\n''') == '''\n1\n'''\n\nassert solution('''\n1\n5 5 5 1 1 5 10\n''') == '''\n25\n'''\n\nassert solution('''\n1\n5 5 5 1 1 5 20\n''') == '''\n50\n'''\n\nassert solution('''\n1\n5 5 5 1 1 5 30\n''') == '''\n87\n'''\n\nassert solution('''\n1\n5 5 5 1 1 5 40\n''') == '''\n127\n'''\n\nassert solution('''\n1\n5 5 5 1 1 5 50\n''') == '''\n174\n'''\n\nassert solution('''\n1\n5 5 5 1 1 5 60\n''') == '''\n224\n'''\n\nassert solution('''\n1\n5 5 5 1 1 5 70\n''') == '''\n281\n'''\n\nassert solution('''", "solution(\"\"\"3\n4 4 3 3 2 3 9\n4 4 3 3 2 3 97\n4 4 3 3 2 3 99\"\"\") == \"\"\"110\n1080\n10800\"\"\"", "solution(SAMPLE_INPUT) == SAMPLE_OUTPUT", "solution(\"\"\"\n\n\"\"\") == \"\"", "solution(data.input) == data.expected\n\n# benchmark the performance of solution\ntimeit.timeit(lambda: solution(data.input), number=100)", "solution('''\n3\n3 3 2 2 1 1 100\n3 3 2 2 1 1 50\n3 3 2 2 1 1 1\n''') == '''\n1\n2\n298\n'''\n\n'''\n\nA. Parallelogram\ntime limit per test1 second\nmemory limit per test256 megabytes\ninputstandard input\noutputstandard output\nYou are given an integer n (1 \u2264 n \u2264 1000). Let A be a set of n points in the coordinate plane. Then we denote the sum of the distances from the point (x,y) to the points of A as \\sum \\limits_{P \\in A} \\sqrt{(x - x_P)^2 + (y - y_P)^2}.\n\nFind the minimum possible value of this sum, if the points of A are located on the vertices of a parallelogram.\n\nInput\n\nThe only line of the input contains the single integer n.\n\nOutput\n\nOutput the minimum possible value of the sum described above, rounded to 6 decimal places.\n\nExamples\n\ninputCopy\n1\noutputCopy\n0.000000\ninputCopy\n2\noutputCopy\n1.414214\ninputCopy\n3\noutputCopy\n3.000000\ninputCopy\n7\noutputCopy\n9.924304\n'''\ndef solution(stdin: str) -> str:", "solution(\"\"\"\n1\n4 4 1 1 1 4 60\n\"\"\") == \"1053\"", "solution('''2\n4 4 2 2 2 2 50\n4 4 2 2 3 3 50''') == '''1\n1'''\n\n# simulate submission\nstdin = sys.stdin.read()\nsys.stdout.write(solution(stdin))", "solution('''\n''') == ''", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n\n# check the performance of solution\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"", "solution(\"\"\"\n\n\"\"\") == \"\"\n\n# show the execution time\nprint(\"time:\", timeit.timeit(\"solution('''\\n{}\\n''')\".format(stdin), globals=globals(), number=1))", "solution('''\n3\n4 4 2 2 1 1 51\n1 5 1 1 1 1 50\n2 3 1 1 2 2 100\n''') == '''\n36836\n1\n32\n'''", "solution(r'''\n4\n4 4 1 1 4 4 10\n4 4 1 1 4 4 99\n4 4 1 1 4 4 50\n4 4 1 1 4 4 1\n''') == r'''\n1\n1\n2\n4\n'''\n\n# check time limit\nimport timeit\n\nassert timeit.timeit(lambda: solution(r'''\n4\n4 4 1 1 4 4 10\n4 4 1 1 4 4 99\n4 4 1 1 4 4 50\n4 4 1 1 4 4 1\n'''), number=1) < 1\n\n# check memory limit\nimport resource\n\nsoft, hard = resource.getrlimit(resource.RLIMIT_AS)\nresource.setrlimit(resource.RLIMIT_AS, (1024 * 1024 * 30, hard))\nassert solution(r'''\n4\n4 4 1 1 4 4 10\n4 4 1 1 4 4 99\n4 4 1 1 4 4 50\n4 4 1 1 4 4 1\n''')\nresource.setrlimit(resource.RLIMIT_AS, (soft, hard))", "solution('''\n5\n4 4 1 1 4 4 50\n4 4 1 1 4 4 99\n4 4 1 1 4 4 1\n4 4 1 1 1 1 1\n5 4 1 3 3 2 50\n''') == '''\n5\n5\n5\n5\n5\n'''", "(True == True)\n\nimport concurrent.futures\n\nMAX_THREADS = 8\n\ndef run_simulation(problem: str) -> Solution:\n    ans = solution(problem)\n    return ans\n\ndef test_submit(problem: str) -> str:\n    with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:\n        future = executor.submit(run_simulation, problem)\n        return future.result()\n\ndef testing(case: str, n: int):\n    test_cases = read_input(case)\n    for i, test in enumerate(test_cases):\n        print(\"Running test case {0}\".format(i + 1))\n        answer = test_submit(test)\n        # expected = read_output(case, i + 1)\n        # check_answer(answer, expected)\n\ntesting('prob-a.in', 3)", "solution(sample) == result, \"Test case failed!\"\n\n# get input for autograding\ntry:\n    with open('input.txt', 'r') as f:\n        input = f.read()\nexcept IOError:\n    print(\"Error reading input file!\")\n    sys.exit(1)\n\n# run solution and print result to output file\nwith open('output.txt', 'w') as f:\n    f.write(solution(input))", "solution('''\n3\n2 2 1 1 2 2 50\n2 2 1 1 2 2 1\n5 7 1 1 5 7 95\n''') == '''\n3\n14\n7\n'''", "solution(\"1\\n3 3 2 2 1 1 99\") == \"33\"\nassert solution(\"2\\n2 3 1 1 2 1 99\\n5 5 1 1 3 3 99\") == \"21\\n175\"\nassert solution(\"2\\n5 5 1 1 5 5 25\\n5 5 1 1 5 5 50\") == \"101\\n91\"\nassert solution(\"2\\n5 5 1 1 5 5 75\\n5 5 1 1 5 5 100\") == \"21\\n11\"\n\n# # submit\n# import os\n# def write_to_file(content: str):\n#     with open(os.path.join(os.path.dirname(__file__), \"output.txt\"), \"w\") as f:\n#         f.write(content)\n# write_to_file(solution(read_from_file(\"input.txt\")))", "solution(\"2\\n3 3 1 1 1 1 75\\n3 3 1 1 1 1 75\") == \"8\\n8\", \"Solution for sample input is incorrect\"\nassert solution(\"0\") == \"0\", \"No test cases exist\"\n\n# get the input for the problem\n__, stdin = get_input()\n\n# call the solution with the input\nprint(solution(stdin))", "solution(test_data) == test_answer\n\n# execute the main program\nfor i in range(1, int(input()) + 1):\n    print('Case #{}: {}'.format(i, solution(input())))", "solution('''\n''') == '''\n'''\n\n# read the input\nstdin = open('input.txt', 'r')\nprint(solution(stdin.read()))\nstdin.close()", "solution('''\n1\n4 4 1 1 4 4 30\n''') == '9'\n\n# check the correctness of solution\nassert solution('''\n1\n4 4 1 1 4 4 99\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n4 4 1 1 4 4 50\n''') == '6'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3 1 1 3 3 50\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n2 2 1 1 2 2 50\n''') == '1'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3 1 2 3 1 50\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3 1 3 3 1 50\n''') == '2'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3 2 1 3 1 50\n''') == '4'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3 2 3 3 1 50\n''') == '3'\n\n# check the correctness of solution\nassert solution('''\n1\n3 3 3 1 3 1 50\n''') == '4'", "solution(r'''\n3\n2 3 1 1 2 1 50\n2 3 1 1 2 1 51\n2 3 1 1 2 1 0\n''') == r'''\n57\n0\n19\n'''", "solution('''\n''') == '''\n'''\n\n# check whether it exceeds the time limit\nimport timeit\nimport os\n\nBASE_DIR = os.path.dirname(os.path.realpath(__file__))\nwith open(os.path.join(BASE_DIR, 'test_solution.py'), 'w') as f:\n    f.write('''\nfrom __main__ import solution\nprint(solution(''' + repr(stdin) + '''))\n''')\ntest_time = timeit.timeit(stmt='!os.system(\"python3 {}\")'.format(os.path.join(BASE_DIR, 'test_solution.py')),\n                         setup='import os', number=1)\nassert test_time < 1, 'Exceeds time limit!'", "solution(\"\"\"\n5\n3 3 2 2 1 1 50\n3 3 2 2 1 1 99\n3 3 2 2 1 1 1\n3 3 2 2 1 1 0\n3 3 1 1 3 3 50\n\"\"\") == \"\"\"\n1\n2\n2\n2\n1\n\"\"\"\n\n# submit solution\nimport requests\nfrom datetime import datetime\n\ndef to_curl(method: str, url: str, headers: dict, json: dict) -> str:\n    ret = \"curl '\" + url + \"'\" + \" -X \" + method\n    for k, v in headers.items():\n        ret += \" -H '\" + k + \": \" + v + \"'\"\n    if json is not None:\n        ret += \" -d '\" + json + \"'\"\n    return ret\n\nurl = \"https://codeforces.com/api/user.solvedProblems?handle=random_chris\"\nr = requests.get(url)\nr_json = r.json()\n\nfor i in range(2, 3):\n    stdin = open(\"tests/test{}.txt\".format(i)).read()\n    start = datetime.now()\n    output = solution(stdin)\n    end = datetime.now()\n    print(\"test:\", i, \"duration:", "(solution('DUMMY_INPUT') == 'DUMMY_OUTPUT')", "solution('''2\n4 4 2 2 3 3 49\n4 4 2 2 3 3 50''') == '''1255\n0'''\n\nprint('Success')", "solution(\"\"\"\n6\n4 4 1 1 2 2 50\n4 4 1 1 2 2 99\n4 4 1 1 2 2 1\n4 4 2 2 1 1 50\n4 4 2 2 1 1 99\n4 4 2 2 1 1 1\n\"\"\") == \"\"\"\n100\n100\n100\n100\n100\n100\n\"\"\"\n\n# load the final input\nwith open('input.txt', 'r') as input_file:\n    file_input = input_file.read()\n    print(solution(file_input))", "solution('''\n2\n2 3 1 1 2 1 90\n2 3 1 1 2 1 80\n''') == '''\n2\n3\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n2 3 1 1 2 1 99\n2 3 1 1 2 1 50\n2 3 1 1 2 1 30\n''') == '''\n1\n13\n28\n'''", "solution(\"\"\"5\n5 6 2 2 1 1 50\n5 6 2 2 5 6 50\n5 6 2 2 5 5 50\n5 6 2 2 5 4 50\n5 6 2 2 5 3 50\"\"\") == \"\"\"16\n41\n72\n105\n160\"\"\"\n\n# print(solution(\"\"\"5\n# 5 6 2 2 1 1 50\n# 5 6 2 2 5 6 50\n# 5 6 2 2 5 5 50\n# 5 6 2 2 5 4 50\n# 5 6 2 2 5 3 50\"\"\"))\n# print(\"\"\"16\n# 41\n# 72\n# 105\n# 160\"\"\")", "solution(\"\"\"\n1\n2 3 1 1 2 3 50\n\"\"\") == \"10\"", "solution(\"\"\"\n1\n2 2 1 1 2 2 50\n\"\"\") == \"\"\"\n5\n\"\"\"\nassert solution(\"\"\"\n1\n2 2 1 1 2 2 99\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n1\n10 10 5 5 10 10 50\n\"\"\") == \"\"\"\n1\n\"\"\"\nassert solution(\"\"\"\n3\n3 2 1 1 2 2 50\n3 2 1 1 2 2 1\n3 2 1 1 2 2 100\n\"\"\") == \"\"\"\n14\n7\n0\n\"\"\"\nassert solution(\"\"\"\n5\n5 5 1 1 5 5 50\n5 5 1 1 5 5 10\n5 5 1 1 5 5 20\n5 5 1 1 5 5 30\n5 5 1 1 5 5 40\n\"\"\") == \"\"\"\n906557\n457628\n727340\n851493\n978186\n\"\"\"\n\nimport pytest\n\n@pytest.mark.timeout(2)\ndef test_benchmark():\n    assert solution(INPUT1) == \"661286\"\n    assert solution(INPUT2) == \"1790\"\n    assert solution(INPUT3) == \"81808\"\n    assert solution(INPUT4) == \"452235\"\n    assert solution(INPUT5) == \"886474\"\n    assert solution(INPUT6) == \"746312\"\n", "solution('''10\n4 4 1 1 4 1 10\n4 4 1 1 4 1 25\n4 4 1 1 4 1 50\n4 4 1 1 4 1 75\n4 4 1 1 4 1 100\n4 4 1 1 1 1 50\n4 4 1 1 2 1 50\n4 4 1 1 3 1 50\n4 4 1 1 4 1 50\n4 4 1 1 5 1 50''') == '''15\n33\n49\n65\n81\n7\n9\n11\n13\n15'''", "solution(solution_input) == solution_output", "solution('''3\n4 4 1 1 4 4 50\n5 5 1 1 3 3 80\n5 5 3 3 3 3 50''') == '''30\n70\n90'''", "solution('''\n2\n2 2 1 1 2 2 50\n2 2 1 1 2 2 99\n''') == '''\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 3 1 1 2 2 50\n5 5 3 3 2 3 49\n5 5 3 3 2 3 50\n''') == '''\n2\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n4\n3 3 1 1 2 2 99\n3 3 1 1 2 2 1\n2 3 1 1 1 3 50\n2 3 1 1 1 3 99\n''') == '''\n1\n2\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n1 4 1 1 1 4 99\n1 4 1 1 1 4 99\n1 4 1 1 1 4 99\n''') == '''\n1\n1\n1\n'''\n\n# check the correctness of solution\nassert solution('''\n2\n2 3 1 1 2 3 1\n2 3 1 1 2 3 1\n''') == '''\n2\n2\n'''\n\n# check the correctness of solution\nassert solution('''\n3\n3 2 1 1 1 2 1\n3 2 1 1 1 2 1\n3 2 1 1 1 2 1\n''') == '", "solution('''\n''') == '''\n'''\n\n# get input and run solution\nwith open('problem.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))", "solution('''3\n3 3 1 1 3 1\n4 2 2 1 4 2\n4 4 2 2 4 2\n''') == '''\n5\n5\n5\n'''\nassert solution('''1\n4 4 1 1 2 2\n''') == '''\n0\n'''\nassert solution('''1\n4 4 1 1 4 4\n''') == '''\n6\n'''\n\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert solution('''3\n3 3 1 1 3 1\n4 2 2 1 4 2\n4 4 2 2 4 2\n''') == '''\n5\n5\n5\n'''\nassert solution('''1\n4 4 1 1 2 2\n''') == '''\n0\n'''\nassert solution('''1\n4 4 1 1 4 4\n''') == '''\n6\n'''"], "finish_reason": ["stop", "length", "stop", "length", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "length", "stop", "stop", "stop", "stop", "stop", "stop", "length", "stop", "stop", "stop", "length", "stop", "stop"], "sum_logprob": [-103.71775852124803, -43.95974595656605, -51.0447947136, -15.288901815885007, -16.783130813319993, -168.444739008377, -85.43270457090004, -49.162869603619995, -20.729570462999998, -24.715745351800003, -26.814814403650004, -62.310836572319985, -95.91756084080527, -43.93637790300001, -7.078875568269998, -8.197058734, -31.816028087700005, -198.61407811685572, -27.622919203000002, -42.422665930899996, -6.691685152, -13.365004896600002, -30.017378889616005, -55.028944293300015, -63.913668119920054, -44.42174870809999, -169.02203165515888, -55.03775151715996, -41.301000905, -122.21332483189404, -89.07830171951596, -35.75019035519999, -22.67667899105, -66.35151302372901, -40.405560035200004, -87.10693032206895, -174.83821144120404, -18.979186679370002, -44.41123550600002, -63.91587127994999, -50.68616142671399, -73.14402117353401, -17.70929989, -263.89757815928607, -57.95340436875001, -8.295120467, -42.400789776, -117.79990924861853, -29.197800105800013, -72.646161702181], "mean_logprob": [-0.857171558026843, -0.14653248652188666, -0.63805993392, -0.05096300605295, -0.2893643243675862, -0.5614824633612566, -1.3143493010907692, -0.8193811600603333, -1.2955981539374999, -0.6679931176162163, -0.4623243862698276, -0.7988568791323077, -0.31972520280268435, -1.098409447575, -0.442429723016875, -0.8197058734, -0.8372638970447368, -0.6620469270561866, -1.2555872365, -0.6842365472725807, -0.6691685152, -0.27275520197142855, -0.5175410153382068, -1.1708286019851064, -0.2619412627865574, -0.6730567986075757, -0.7717900988820046, -0.5096088103440741, -0.8978478457608696, -0.617239014302495, -0.9788824364781978, -0.687503660676923, -0.44464076453039214, -0.22117171007909667, -0.8417825007333334, -0.45133124519206735, -0.5827940381373466, -0.9037707942557143, -1.1387496283589744, -0.5371081620163866, -0.556990784908945, -0.5378236850995147, -0.8432999947619048, -0.8796585938642867, -0.5174411104352679, -0.6912600389166667, -1.0095426137142858, -0.3926663641620617, -0.5308690928327273, -0.3475892904410574]}
{"prompt": "'''\nA binary tree of n nodes is given. Nodes of the tree are numbered from 1 to n and the root is the node 1. Each node can have no child, only one left child, only one right child, or both children. For convenience, let's denote l_u and r_u as the left and the right child of the node u respectively, l_u = 0 if u does not have the left child, and r_u = 0 if the node u does not have the right child.\n\nEach node has a string label, initially is a single character c_u. Let's define the string representation of the binary tree as the concatenation of the labels of the nodes in the in-order. Formally, let f(u) be the string representation of the tree rooted at the node u. f(u) is defined as follows: $$$ f(u) = \\begin{cases} <empty string>, & if u = 0; \\\\\\ f(l_u) + c_u + f(r_u) & otherwise, \\end{cases}  where +$$$ denotes the string concatenation operation.\n\nThis way, the string representation of the tree is f(1).\n\nFor each node, we can duplicate its label at most once, that is, assign c_u with c_u + c_u, but only if u is the root of the tree, or if its parent also has its label duplicated.\n\nYou are given the tree and an integer k. What is the lexicographically smallest string representation of the tree, if we can duplicate labels of at most k nodes?\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds: \n\n  * a is a prefix of b, but a \u2260 b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line contains a string c of n lower-case English letters, where c_i is the initial label of the node i for 1 \u2264 i \u2264 n. Note that the given string c is not the initial string representation of the tree.\n\nThe i-th of the next n lines contains two integers l_i and r_i (0 \u2264 l_i, r_i \u2264 n). If the node i does not have the left child, l_i = 0, and if the node i does not have the right child, r_i = 0.\n\nIt is guaranteed that the given input forms a binary tree, rooted at 1.\n\nOutput\n\nPrint a single line, containing the lexicographically smallest string representation of the tree if at most k nodes have their labels duplicated.\n\n'''\ndef solution(stdin: str) -> str:\n    pass\n\n# check the correctness of solution\nassert ", "samples": ["'abccba' == solution('''\n2 2\nabc\n0 0\n0 0\n''')\n\nassert 'aaaaaaaaa' == solution('''\n1 1\na\n0 0\n''')\n\nassert 'abcbcbacb' == solution('''\n4 3\nabcd\n2 3\n0 0\n0 0\n0 0\n''')\n\nassert 'abcdecddc' == solution('''\n8 4\naabacced\n2 3\n0 0\n0 0\n5 6\n0 0\n0 0\n0 0\n0 0\n''')\n\nassert 'abbbccdce' == solution('''\n8 1\nabcdeabc\n2 3\n0 0\n0 0\n5 6\n0 0\n0 0\n0 0\n0 0\n''')\n\nassert 'bcdcbcbdc' == solution('''\n7 1\naabacced\n2 3\n0 0\n0 0\n5 6\n0 0\n0 0\n0 0\n''')\n\nassert 'bdddeeffg' == solution('''\n7 1\naabacced\n2 3\n0 0\n0 0\n5 6\n0 0\n4 7\n0 0\n''')\n\nassert 'bbcccddde' == solution('''\n7 1\naab", "solution(\"\"\"\n5 1\nabcde\n0 2\n1 0\n0 0\n3 0\n0 0\n\"\"\") == \"cbbade\", \"correct answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 0\nabcdefghij\n0 2\n1 0\n0 0\n3 0\n0 0\n5 6\n7 0\n0 0\n9 0\n0 0\n\"\"\") == \"bcefjihgd\", \"correct answer\"\n\n# # check the correctness of solution\nassert solution(\"\"\"\n10 1\nabcdefghij\n0 2\n1 0\n0 0\n3 0\n0 0\n5 6\n7 0\n0 0\n9 0\n0 0\n\"\"\") == \"bcefjighd\", \"correct answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 3\nabcdefghij\n0 2\n1 0\n0 0\n3 0\n0 0\n5 6\n7 0\n0 0\n9 0\n0 0\n\"\"\") == \"cbbefjigd\", \"correct answer\"\n\n# check the correctness of solution\nassert solution(\"\"\"\n10 10\nabcdefghij\n0 2\n1 0\n0 0\n3 0\n0 0\n5 6\n7 0\n0 0\n9 0\n0 0\n\"\"\") == \"cbbbbbbbb", "solution(TEST_EXAMPLE_INPUT_STR) == TEST_EXAMPLE_OUTPUT_STR\n\n# get input from stdin\nstdin = get_stdin()\n\n# solve the problem\nsolution(stdin)", "solution('''\n2 1\nab\n0 0\n1 0\n''') == 'aba'\n\nassert solution('''\n3 1\naba\n0 0\n1 0\n0 0\n''') == 'ababa'\n\nassert solution('''\n2 1\nac\n0 0\n1 0\n''') == 'acac'\n\nassert solution('''\n4 2\naba\n0 2\n0 0\n1 0\n0 0\n''') == 'ababa'\n\nassert solution('''\n2 2\nab\n0 0\n1 0\n''') == 'abba'\n\nassert solution('''\n2 2\nab\n0 0\n0 1\n''') == 'abab'\n\nassert solution('''\n3 2\naba\n0 0\n1 0\n0 0\n''') == 'ababa'\n\nassert solution('''\n3 3\naba\n0 0\n1 0\n0 0\n''') == 'ababbaa'\n\nassert solution('''\n6 2\nababa\n0 0\n1 2\n0 0\n0 0\n0 0\n''') == 'ababababa'\n\nassert solution('''\n5 4\naaaaa\n0 2\n0 0\n1 4\n0 0\n0 0\n''') == 'aaaaaaaaa'\n\nassert solution(''", "solution(sample1) == 'addaaddabcbc'\nassert solution(sample2) == 'babababababababababa'\nassert solution(sample3) == 'babababababababababa'\nassert solution(sample4) == 'babababababababababa'\nassert solution(sample5) == 'cbbbbcbbbbcbbbbcbbbb'\nassert solution(sample6) == 'cdcddcddcdcddcddcdcd'\nassert solution(sample7) == 'cdcddcddcdcddcddcdcd'\nassert solution(sample8) == 'cdeecdeecdeecdeecdee'\nassert solution(sample9) == 'aaaaaaaaaaaaaaaaaaaa'\nassert solution(sample10) == 'abccbaabccbaabccbaabc'\nassert solution(sample11) == 'bbbbbbbbbbbbbbbbbbbb'\nassert solution(sample12) == 'aaaaaaaaaaaaaaaaaaaa'\nassert solution(sample13) == 'bbbbbbbbbbbbbbbbbbbb'\nassert solution(sample14) == 'bbbbbbbbbbbbbbbbbbbb'\nassert solution(sample15) == 'abccbaabccbaabccbaabc'\nassert solution(sample16) == 'c", "solution('''\n5 2\naabaa\n0 0\n1 2\n3 0\n0 4\n0 0\n''') == 'aaaabaa'\n\nassert solution('''\n7 2\naabaca\n0 0\n1 2\n3 0\n0 4\n0 0\n5 6\n0 0\n''') == 'aaaabaca'\n\nassert solution('''\n4 2\naaab\n0 0\n1 2\n3 0\n0 0\n''') == 'aaaba'\n\nassert solution('''\n3 2\naab\n0 0\n1 2\n0 0\n''') == 'aba'\n\nassert solution('''\n3 1\nabc\n0 0\n1 2\n0 0\n''') == 'abc'\n\nassert solution('''\n4 1\naabaa\n0 0\n1 2\n3 0\n0 0\n''') == 'aabaabaa'\n\nassert solution('''\n1 1\na\n0 0\n''') == 'aa'\n\nassert solution('''\n1 0\na\n0 0\n''') == 'a'\n\nassert solution('''\n2 0\naab\n0 0\n1 0\n''') == 'aba'\n\nassert solution('''\n3 0\naab\n0 0\n1 2\n0 0\n''')", "solution('''\n6 4\np\n0 2\n3 0\n4 0\n5 0\n1 0\n''') == 'pppppp'\n\nassert solution('''\n7 3\nx\n0 1\n2 0\n2 0\n2 0\n2 0\n1 0\n0 0\n''') == 'xxx'\n\nassert solution('''\n7 3\na\n0 1\n2 0\n2 0\n2 0\n2 0\n1 0\n0 0\n''') == 'aaaaaa'\n\nassert solution('''\n5 3\na\n0 1\n2 0\n3 0\n4 0\n1 0\n''') == 'aaaaa'\n\nassert solution('''\n5 3\na\n0 1\n2 0\n3 0\n4 0\n1 0\n''') == 'aaaaa'\n\nassert solution('''\n7 3\na\n0 1\n2 0\n2 0\n2 0\n2 0\n1 0\n0 0\n''') == 'aaaaaa'\n\nassert solution('''\n7 4\na\n0 1\n2 0\n2 0\n2 0\n2 0\n1 0\n0 0\n''') == 'aaaaaa'\n\nassert solution('''\n7 4\nx\n0 1\n2 0\n2 0\n2 0\n2 0\n1 0\n0 0\n", "solution(\"\"\"\n    8 4\n    abcadcba\n    0 1\n    2 3\n    4 5\n    6 7\n    2 0\n    0 0\n    2 0\n    0 0\n\"\"\") == \"aaabcadcba\"\n\n# ----\n# To run tests on the entire input file, do the following\n# ----\n\ndef read_stdin() -> str:\n    return open(\"input.txt\", \"r\").read()\n\ndef main():\n    stdin = read_stdin()\n    print(solution(stdin))\n\nmain()", "solution(\"\") == \"\", \"wrong solution\"", "solution(get_stdin()) == get_stdout()", "solution(\"\") == \"\", \"empty input\"\nassert solution(\"example\") == \"example\", \"example input\"\nassert solution(\"example example\") == \"example input\", \"example input\"\nassert solution(\"example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example example example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example example example example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example example example example example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example example example example example example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example example example example example example example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example example example example example example example example example example\") == \"example input\", \"example input\"\nassert solution(\"example example example example example example example example example example example example example example", "solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n\n# check the performance of solution\nprint(\"\")\nassert solution(\"\") == \"\"\nprint(\"Performance tests passed!\")", "solution(\"\"\"\n4 1\nabcd\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"abcd\", \"Incorrect test case #1\"\n\nassert solution(\"\"\"\n2 1\nab\n0 0\n0 0\n\"\"\") == \"abab\", \"Incorrect test case #2\"\n\nassert solution(\"\"\"\n4 3\nabcd\n2 3\n1 0\n0 0\n0 0\n\"\"\") == \"aabcd\", \"Incorrect test case #3\"\n\nassert solution(\"\"\"\n3 2\nxyz\n0 0\n0 0\n0 0\n\"\"\") == \"xyzxyz\", \"Incorrect test case #4\"\n\n# read the input for your code\nN, K = map(int, input().split())\nc = input()\n\nT = [[] for _ in range(N)]\nfor node in range(N):\n    a, b = map(int, input().split())\n    if a != 0:\n        T[node].append(a-1)\n    if b != 0:\n        T[node].append(b-1)\n\ndef dfs(node: int, parent: int) -> (str, int):\n    if node not in T[parent]:\n        return \"\", 0\n    if T[node] == []:\n        return c", "solution('''\n5 2\na\n1 3\n2 0\n4 0\n5 0\n''') == 'aaabca'\n\n'''\nInput for testing:\n4 1\na\n1 0\n2 3\n3 0\n4 0\n\n3 2\na\n1 2\n2 0\n3 0\n\n2 1\na\n1 0\n2 0\n\n5 3\na\n1 3\n2 0\n4 0\n5 0\n\n4 2\na\n1 0\n2 3\n3 0\n4 0\n\n'''", "solution(\"3 1\\nabc\\n1 2\\n2 0\\n0 0\") == \"aabc\", \"Wrong answer\"\nassert solution(\"4 1\\nreps\\n1 2\\n0 0\\n0 0\\n2 3\\n0 0\") == \"epsreps\", \"Wrong answer\"\nassert solution(\"4 1\\nreps\\n2 1\\n0 0\\n0 0\\n3 4\\n0 0\") == \"repseps\", \"Wrong answer\"\nassert solution(\"1 0\\nabacaba\\n0 0\") == \"abacaba\", \"Wrong answer\"\nassert solution(\"1 1\\nabacaba\\n0 0\") == \"abacabaabacaba\", \"Wrong answer\"\nassert solution(\"1 1\\nbbb\\n0 0\") == \"bbbbb\", \"Wrong answer\"\nassert solution(\"1 1\\naa\\n0 0\") == \"aaaa\", \"Wrong answer\"\nassert solution(\"10 5\\ncqepgjdcm\\n2 3\\n0 1\\n2 0\\n0 5\\n0 0\\n0 0\\n0 0\\n1 6\\n0 0\\n0 0\") == \"cacqacdacdcacdpacdacdcacdacdcacdacdacdc", "solution('''\n3 1\nabc\n0 2\n0 0\n0 0\n''') == 'aabc'\n\n# check the correctness of solution\nassert solution('''\n3 2\nabc\n0 2\n0 0\n0 0\n''') == 'aabc'\n\n# check the correctness of solution\nassert solution('''\n3 1\nabc\n0 2\n0 0\n0 0\n''') == 'aabc'\n\n# check the correctness of solution\nassert solution('''\n3 1\nabc\n2 0\n0 0\n0 0\n''') == 'aabc'\n\n# check the correctness of solution\nassert solution('''\n3 1\nabc\n0 2\n0 0\n0 0\n''') == 'aabc'\n\n# check the correctness of solution\nassert solution('''\n3 2\nabc\n0 2\n0 0\n0 0\n''') == 'aabc'\n\n# check the correctness of solution\nassert solution('''\n3 2\nabc\n2 0\n0 0\n0 0\n''') == 'aabc'\n\n# check the correctness of solution\nassert solution('''\n3 2\nabc\n0 2\n0 0\n0 0\n''') == 'aabc'\n\n# check the correctness of solution\nassert solution('''\n5 3\nabcde\n2", "solution('''\n5 2\nbbaca\n0 1\n0 2\n3 0\n4 0\n''') == 'abbaca'\n\nassert solution('''\n6 3\naaaaaa\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aaaaaaaaaaaaa'\n\nassert solution('''\n6 2\nabcabc\n0 1\n2 3\n4 5\n0 0\n0 0\n''') == 'abcaabcaabca'\n\nassert solution('''\n6 2\nabcdac\n0 1\n2 3\n4 5\n0 0\n0 0\n''') == 'abcdabcdabcd'\n\nassert solution('''\n5 1\nbcabc\n0 1\n2 3\n4 0\n0 0\n''') == 'bcbcabcbcabc'\n\nassert solution('''\n5 1\nababc\n0 1\n2 3\n4 0\n0 0\n''') == 'abababcababc'\n\nassert solution('''\n6 1\nbcabcd\n0 1\n2 3\n4 5\n0 0\n0 0\n''') == 'bcbcabcdabcd'\n\nassert solution('''\n7 1\naabaaa\n0 1\n2 3\n4 5\n6 0\n0 0\n''') == 'aabaabaaa", "solution('''\n3 2\nabc\n1 2\n2 0\n2 0\n''') == 'aabccb'\n\nassert solution('''\n5 1\nababa\n0 0\n1 2\n3 4\n5 0\n5 0\n''') == 'abababa'\n\nassert solution('''\n7 4\nabbabbb\n3 4\n1 2\n1 5\n1 6\n0 0\n0 0\n0 0\n''') == 'aabbbbbb'\n\nassert solution('''\n4 3\nabac\n2 3\n1 0\n4 0\n0 0\n''') == 'abaccab'\n\nassert solution('''\n4 4\nabac\n2 3\n1 0\n4 0\n0 0\n''') == 'abaabacc'\n\n# Read from stdin\nlines = [line.strip() for line in sys.stdin.readlines()]\n\n# Print the solution\nprint(solution(sys.stdin.read()))", "solution('''\n5 2\nabacd\n2 3\n0 4\n0 0\n5 0\n0 0\n''') == 'aabaacdd'\n\nassert solution('''\n5 0\nabcde\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'abcde'\n\nassert solution('''\n6 1\nabcde\n0 3\n0 2\n0 0\n4 0\n0 0\n0 0\n''') == 'aabccde'\n\nassert solution('''\n4 0\nabcd\n0 0\n0 0\n0 0\n0 0\n''') == 'abcd'\n\nassert solution('''\n11 4\nabacabacaba\n2 3\n0 4\n0 0\n5 7\n0 0\n0 0\n8 9\n0 0\n0 0\n0 0\n0 0\n''') == 'aaaabbbbcccccdddddd'\n\nassert solution('''\n5 4\nabacd\n2 3\n0 4\n0 0\n5 0\n0 0\n''') == 'aaaaaacdd'\n\nassert solution('''\n4 1\nabcd\n0 0\n0 0\n0 0\n0 0\n''') == 'aabcd'\n\nassert solution('''\n8 1\nabababab\n2", "solution(\n'''4 3\na\n0 0\n0 0\n0 0\n0 0\n''') == 'aa'\n\nassert solution(\n'''10 2\nanatolevna\n1 2\n2 3\n2 4\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aaaaatolevnatolevna'\n\nassert solution(\n'''6 2\nabcdef\n2 3\n1 4\n1 5\n0 0\n0 0\n0 0\n''') == 'aabcdfabcdfe'\n\nassert solution(\n'''8 4\nabcdefgh\n2 3\n1 4\n1 5\n0 0\n0 0\n0 0\n0 0\n''') == 'aabbccddeefggh'\n\nassert solution(\n'''5 5\nabacb\n1 2\n1 3\n0 0\n0 0\n0 0\n''') == 'aabacbbacb'\n\nassert solution(\n'''20 3\namnoslxzcvpiqyjkuget\n0 0\n0 0\n5 6\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n", "solution('''\n4 1\nabca\n0 2\n0 3\n0 0\n''') == 'acbacbac'\n\nassert solution('''\n4 1\nabca\n0 2\n0 3\n0 0\n''') == 'acbacbac'\n\nassert solution('''\n4 2\nabca\n0 2\n0 3\n0 0\n''') == 'aacbacba'\n\nassert solution('''\n4 0\nabca\n0 2\n0 3\n0 0\n''') == 'acbacbac'\n\nassert solution('''\n7 2\nabacaca\n0 2\n0 3\n0 0\n0 5\n0 6\n0 0\n''') == 'aacabacabacabacabac'\n\nassert solution('''\n5 4\nabacd\n0 2\n0 3\n0 0\n0 5\n0 0\n''') == 'acbadcbacbadcbacbadcbacb'\n\nassert solution('''\n5 3\nabacd\n0 2\n0 3\n0 0\n0 5\n0 0\n''') == 'acbadcbacbadcbacbadcbacb'\n\nassert solution('''\n5 2\nabacd\n0 2\n0 3\n0 0\n0 5\n0 0\n''", "(solution('''\n3 1\nabc\n0 0\n1 0\n2 0\n''') == 'aabbcc')\n\n# print the answer if the file was executed directly\nif __name__ == '__main__':\n    with open('problem.in') as f:\n        print(solution(f.read()))", "solution(\"\"\"10 5\ndcdcddbdcd\n0 1\n1 2\n2 0\n0 1\n0 1\n0 0\n0 0\n1 0\n1 0\n0 0\"\"\") == \"dddcdddcddd\"\n\n# check performance with an example\nimport sys\nsys.setrecursionlimit(10**6)\nimport resource\nresource.setrlimit(resource.RLIMIT_STACK, (2**29, 2**30))\n\nassert solution(\"\"\"10 9\nabcdefghij\n0 1\n1 2\n2 0\n0 1\n0 1\n0 0\n0 0\n1 0\n1 0\n0 0\"\"\") == \"bbbbbbaaaaa\"\n\nassert solution(\"\"\"10 1\naabbbbaaab\n0 1\n1 2\n2 0\n0 1\n0 1\n0 0\n0 0\n1 0\n1 0\n0 0\"\"\") == \"ababbbbbaba\"\n\nassert solution(\"\"\"5 1\nabcde\n0 1\n1 2\n2 0\n0 1\n0 0\"\"\") == \"abcde\"\n\nassert solution(\"\"\"5 4\nabcde\n0 1\n1 2\n2 0\n0 1\n0 0\"\"\") == \"abbbde\"\n\n# check performance against a large input\nimport sys\nsys.setrecursionlimit(10", "solution(\"\"\"\n4 3\nabc\n0 1\n2 3\n0 0\n0 0\n\"\"\") == \"aabbc\", \"Example 1\"\n\nassert solution(\"\"\"\n3 2\naba\n0 1\n2 0\n0 0\n\"\"\") == \"aaabb\", \"Example 2\"\n\nassert solution(\"\"\"\n4 3\nabab\n0 1\n2 3\n0 0\n0 0\n\"\"\") == \"aabbb\", \"Example 3\"\n\nassert solution(\"\"\"\n3 2\naaab\n0 1\n2 0\n0 0\n\"\"\") == \"aaabb\", \"Example 4\"\n\nassert solution(\"\"\"\n2 1\nabc\n0 1\n0 0\n\"\"\") == \"aabbc\", \"Example 5\"\n\nassert solution(\"\"\"\n4 2\nabcd\n0 1\n2 3\n0 0\n0 0\n\"\"\") == \"aabbcd\", \"Example 6\"\n\nassert solution(\"\"\"\n4 1\nabcd\n0 1\n2 3\n0 0\n0 0\n\"\"\") == \"abcd\", \"Example 7\"\n\nassert solution(\"\"\"\n4 3\nabcd\n0 1\n2 3\n0 0\n0 0\n\"\"\") == \"aabbcd\", \"Example 8\"\n\nassert solution(\"\"\"\n5 4\nabccc\n0 1\n2 3\n0 0\n4 0", "solution(\"\"\"\n4 2\nabcd\n0 2\n1 0\n3 0\n0 0\n\"\"\") == \"bbdd\", \"Wrong Answer\"\nassert solution(\"\"\"\n10 2\nareallylon\n8 0\n7 0\n5 0\n0 0\n6 0\n2 0\n9 0\n0 0\n3 0\n0 0\n\"\"\") == \"areeareelylon\", \"Wrong Answer\"\nassert solution(\"\"\"\n6 2\nabacab\n0 2\n0 0\n3 0\n0 0\n0 0\n0 0\n\"\"\") == \"aabacab\", \"Wrong Answer\"\nassert solution(\"\"\"\n4 1\nawyy\n2 3\n1 0\n0 0\n0 0\n\"\"\") == \"aawywy\", \"Wrong Answer\"\nassert solution(\"\"\"\n10 2\nareallylon\n8 0\n7 0\n5 0\n0 0\n6 0\n2 0\n9 0\n0 0\n3 0\n0 0\n\"\"\") == \"areeareelylon\", \"Wrong Answer\"\nassert solution(\"\"\"\n2 2\naa\n0 0\n0 0\n\"\"\") == \"aaaa\", \"Wrong Answer\"\nassert solution(\"\"\"\n7 2\nbbbccca\n6 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"bb", "solution('''\n5 3\nabcde\n1 0\n0 0\n0 0\n0 0\n0 0\n''') == 'cdbbeace'\n\nassert solution('''\n1 1\nz\n0 0\n''') == 'zz'\n\nassert solution('''\n1 0\na\n0 0\n''') == 'a'\n\nassert solution('''\n2 0\nab\n1 0\n0 0\n''') == 'ba'\n\nassert solution('''\n4 1\nabcd\n1 2\n0 0\n0 0\n0 0\n''') == 'bdcac'\n\nassert solution('''\n4 2\nabcd\n1 2\n0 0\n0 0\n0 0\n''') == 'bbcdac'\n\nassert solution('''\n5 2\nabccc\n1 2\n0 0\n0 0\n0 0\n''') == 'bbcccac'\n\nassert solution('''\n5 3\nabccc\n1 2\n0 0\n0 0\n0 0\n''') == 'bbbcccac'\n\nassert solution('''\n7 2\nabcdeef\n1 2\n0 0\n3 4\n0 0\n0 0\n0 0\n''') == 'eebefdcac'\n\nassert solution('''\n8 2\nab", "solution('''\n2 1\nab\n0 0\n0 0\n''') == 'aab'\n\nassert solution('''\n4 1\nabc\n0 0\n0 0\n0 0\n0 0\n''') == 'aabcc'\n\nassert solution('''\n4 2\nabcd\n0 0\n0 0\n0 0\n0 0\n''') == 'aabbccdd'\n\nassert solution('''\n4 2\naaaa\n0 0\n0 0\n0 0\n0 0\n''') == 'aaaaaaaa'\n\nassert solution('''\n1 0\na\n0 0\n''') == 'a'\n\nassert solution('''\n2 1\naa\n0 0\n0 0\n''') == 'aaa'\n\nassert solution('''\n2 2\naa\n0 0\n0 0\n''') == 'aaaa'\n\nassert solution('''\n5 2\nabacd\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aaabbccdd'\n\nassert solution('''\n6 1\nabacde\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aabccddee'\n\nassert solution('''\n6 2\nabacde\n0 0\n0 0\n0 0", "solution(TEST_1) == 'aaddccd'\nassert solution(TEST_2) == 'aaaa'\nassert solution(TEST_3) == 'aaaa'\nassert solution(TEST_4) == 'aaaaaa'\nassert solution(TEST_5) == 'aaac'\nassert solution(TEST_6) == 'aac'\nassert solution(TEST_7) == 'aac'\nassert solution(TEST_8) == 'aaccc'\nassert solution(TEST_9) == 'addccc'\nassert solution(TEST_10) == 'addc'\nassert solution(TEST_11) == 'addc'\nassert solution(TEST_12) == 'addc'\nassert solution(TEST_13) == 'cddd'\nassert solution(TEST_14) == 'cd'\nassert solution(TEST_15) == 'dda'\nassert solution(TEST_16) == 'dda'\nassert solution(TEST_17) == 'dda'\nassert solution(TEST_18) == 'dda'\nassert solution(TEST_19) == 'dbab'\nassert solution(TEST_20) == 'dbb'\nassert solution(TEST_21) == 'dbb'\nassert solution(TEST", "solution(stdin) == stdout", "solution(\"\"\"\n2 1\nab\n0 0\n0 0\n\"\"\") == \"abab\"\n\nassert solution(\"\"\"\n2 1\nba\n0 0\n0 0\n\"\"\") == \"baba\"\n\nassert solution(\"\"\"\n5 3\nabcde\n0 1\n2 3\n0 4\n0 0\n0 0\n\"\"\") == \"adeadebcadebc\"\n\nassert solution(\"\"\"\n5 3\nabcde\n0 1\n2 3\n0 4\n0 0\n0 0\n\"\"\") == \"adeadebcadebc\"\n\nassert solution(\"\"\"\n11 4\nzjvrndwgls\n0 1\n2 3\n4 5\n6 7\n8 9\n10 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"lndjwrgllndjwrgvlndjwrgzsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndwglsjvrndw", "solution(inp) == \"\".join(lines)", "solution(input1) == output1\nassert solution(input2) == output2\nassert solution(input3) == output3\nassert solution(input4) == output4\nassert solution(input5) == output5\nassert solution(input6) == output6\nassert solution(input7) == output7\nassert solution(input8) == output8\nassert solution(input9) == output9\nassert solution(input10) == output10\nassert solution(input11) == output11\nassert solution(input12) == output12\nassert solution(input13) == output13\nassert solution(input14) == output14\nassert solution(input15) == output15\nassert solution(input16) == output16\nassert solution(input17) == output17\nassert solution(input18) == output18\nassert solution(input19) == output19\nassert solution(input20) == output20\nassert solution(input21) == output21\nassert solution(input22) == output22\nassert solution(input23) == output23\nassert solution(input24) == output24\nassert solution(input25) == output25\nassert solution(input26) == output26\nassert solution(input27) == output27\nassert solution(input28) == output28\nassert solution(input29) == output29\nassert solution(input30) == output30\nassert", "solution('''3 2\nabc\n1 2\n0 0\n0 0''') == 'aabc'\nassert solution('''2 1\naab\n1 0\n0 0''') == 'aaab'\nassert solution('''1 1\ny\n0 0''') == 'yy'\nassert solution('''3 2\ncca\n1 2\n0 0\n0 0''') == 'acc'\nassert solution('''2 1\nac\n1 0\n0 0''') == 'aac'\nassert solution('''3 2\nabb\n1 2\n0 0\n0 0''') == 'abb'\nassert solution('''7 4\nrvfsuj\n2 3\n0 0\n1 0\n0 4\n0 0\n0 0\n5 0''') == 'jrrvfsuj'\nassert solution('''4 1\nabcb\n2 3\n0 0\n1 0\n0 0''') == 'abbcb'\nassert solution('''3 1\nggf\n1 2\n0 0\n0 0''') == 'ggf'\nassert solution('''7 1\ncjucab\n2 3\n0 0\n1 0\n0 4\n0 0\n0 0\n5 0''') == 'cjucabcjucab'\nassert solution('''7 1\nevkn", "solution('''\n5 3\nabdab\n0 2\n0 0\n3 0\n0 0\n0 0\n''') == 'ababbabbda'\n\nprint(solution(stdin))", "(solution(input_str1) == output_str1)\nassert (solution(input_str2) == output_str2)\nassert (solution(input_str3) == output_str3)\nassert (solution(input_str4) == output_str4)\nassert (solution(input_str5) == output_str5)\nassert (solution(input_str6) == output_str6)\nassert (solution(input_str7) == output_str7)\nassert (solution(input_str8) == output_str8)\nassert (solution(input_str9) == output_str9)\nassert (solution(input_str10) == output_str10)\nassert (solution(input_str11) == output_str11)\nassert (solution(input_str12) == output_str12)\nassert (solution(input_str13) == output_str13)\nassert (solution(input_str14) == output_str14)\nassert (solution(input_str15) == output_str15)\nassert (solution(input_str16) == output_str16)\nassert (solution(input_str17) == output_str17)\nassert (solution(input_str18) == output", "solution('''\n4 2\nabcdef\n0 0\n0 2\n0 0\n0 0\n''') == 'abcdabf'\n\nassert solution('''\n4 1\nabcdef\n0 0\n0 2\n0 0\n0 0\n''') == 'abcdeff'\n\nassert solution('''\n4 0\nabcdef\n0 0\n0 2\n0 0\n0 0\n''') == 'abcdef'\n\nassert solution('''\n4 1\naaaa\n0 0\n0 2\n0 0\n0 0\n''') == 'aaaaa'\n\nassert solution('''\n2 1\nab\n0 0\n0 0\n''') == 'abb'\n\nassert solution('''\n5 2\nabcdf\n0 0\n0 3\n0 0\n2 0\n0 0\n''') == 'abcdabdf'\n\nassert solution('''\n6 4\nabcdea\n0 0\n1 3\n0 0\n0 0\n0 5\n0 0\n''') == 'aabcdea'\n\nassert solution('''\n7 2\neeeeeee\n0 0\n1 3\n0 0\n0 0\n0 5\n0 0\n''') == 'eeeeeee'\n\nassert solution('''\n8 3\nqwertyui\n0 0\n1 3\n0", "solution('''\n3 1\nabc\n1 2\n0 3\n1 0\n''') == 'aabcc'\n\n# check the correctness of solution\nassert solution('''\n3 2\nabc\n1 2\n0 3\n1 0\n''') == 'aabcc'\n\n# check the correctness of solution\nassert solution('''\n2 1\nab\n1 0\n0 0\n''') == 'aab'\n\n# check the correctness of solution\nassert solution('''\n4 2\nabcd\n1 2\n0 3\n0 4\n2 0\n''') == 'aabcd'\n\n# check the correctness of solution\nassert solution('''\n3 1\nabd\n1 2\n0 3\n2 0\n''') == 'aabdd'\n\n# check the correctness of solution\nassert solution('''\n3 2\naac\n1 2\n0 3\n1 0\n''') == 'aaaccc'\n\n# check the correctness of solution\nassert solution('''\n1 0\na\n0 0\n''') == 'a'\n\n# check the correctness of solution\nassert solution('''\n1 1\na\n0 0\n''') == 'aa'\n\n# check the correctness of solution\nassert solution('''\n1 1\na\n0 0\n''') == 'aa", "solution(\"\"\"\n    3 2\n    bac\n    0 0\n    1 2\n    0 0\n\"\"\") == \"aabbcca\"\n\nprint(solution(input()))", "solution('''\n5 2\naabaab\n0 0\n1 0\n2 3\n4 0\n0 0\n''') == 'aaaabaaab'\n\n# check the correctness of solution\nassert solution('''\n5 2\naabaab\n0 0\n1 0\n2 3\n4 0\n0 0\n''') == 'aaaabaaab'\n\n# check the correctness of solution\nassert solution('''\n3 1\nabc\n0 0\n1 0\n0 0\n''') == 'aabc'\n\n# check the correctness of solution\nassert solution('''\n2 2\nba\n0 0\n1 0\n''') == 'ba'\n\n# check the correctness of solution\nassert solution('''\n6 3\naabba\n0 0\n1 0\n2 3\n4 0\n5 0\n0 0\n''') == 'aaaabba'\n\n# check the correctness of solution\nassert solution('''\n3 1\nabc\n0 0\n1 0\n0 0\n''') == 'aabc'\n\n# check the correctness of solution\nassert solution('''\n2 1\nba\n0 0\n1 0\n''') == 'ba'\n\n# check the correctness of solution\nassert solution('''\n6 1\naabba\n0 0\n1 0\n2 3\n4 0\n5 0\n", "solution('''\n5 2\nabcde\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aaabcdde'\n\nassert solution('''\n5 1\nabcde\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aabcde'\n\nassert solution('''\n5 2\nabcde\n0 0\n0 0\n1 2\n3 4\n5 0\n''') == 'aabcccee'\n\nassert solution('''\n3 0\nabc\n0 0\n0 0\n0 0\n''') == 'abc'\n\nassert solution('''\n6 1\nabcdea\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aaabcde'\n\nassert solution('''\n4 3\nabcd\n0 0\n0 0\n0 0\n0 0\n''') == 'aabbccdd'\n\nassert solution('''\n4 2\nabcd\n0 0\n0 0\n0 0\n0 0\n''') == 'aabccdd'\n\nassert solution('''\n5 2\nabcde\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aaabcdde'\n\nassert solution('''\n5 3\nabc", "solution(\"7 3\\nabcabac\\n1 2\\n3 0\\n4 5\\n0 0\\n0 0\\n6 7\\n0 0\") == \"ababcabcabcabac\"\nassert solution(\"1 1\\nx\\n0 0\") == \"xx\"\nassert solution(\"1 0\\nx\\n0 0\") == \"x\"\nassert solution(\"7 2\\nabcabac\\n1 2\\n3 0\\n4 5\\n0 0\\n0 0\\n6 7\\n0 0\") == \"aababcabcabcabac\"\nassert solution(\"7 1\\nabcabac\\n1 2\\n3 0\\n4 5\\n0 0\\n0 0\\n6 7\\n0 0\") == \"aabcabcabcabac\"\nassert solution(\"7 0\\nabcabac\\n1 2\\n3 0\\n4 5\\n0 0\\n0 0\\n6 7\\n0 0\") == \"abcabcabac\"\nassert solution(\"2 1\\nxy\\n1 0\\n0 0\") == \"xyxy\"\nassert solution(\"2 1\\nxy\\n0 1\\n0 0\") == \"xyxy\"\nassert solution(\"2 0\\nxy\\n1 0\\n0 0\") == \"xy\"\nassert solution", "solution('''\n5 2\nabcde\n0 2\n2 0\n0 0\n0 0\n0 0\n''') == 'abccdebcdde'\n\n'''\n<\ubabb\ud480\uc5c8\uc74c>\n\n\ucc98\uc74c\uc5d0 \uc774\uc9c4\ud2b8\ub9ac\ub77c\uace0 \uc0dd\uac01\ud574\uc11c \uc774\uc9c4\ud2b8\ub9ac \ubb38\uc81c\ub85c \uc811\uadfc\ud588\ub294\ub370 \uc544\ub2c8\ub77c \uacc4\uc18d \ud2c0\ub838\ub2e4. \uc544\ubb34\ub9ac \ubcf4\uba74 \uc774\ub7f0 \ubb38\uc81c\ub294 \uc5c6\uc744 \uac83 \uac19\ub2e4.\n\n<\ud480\uc774\ubc29\ubc95>\n\n1. \uc8fc\uc5b4\uc9c4 \ud2b8\ub9ac\ub97c \ucd5c\uc18c\uac12\uc73c\ub85c \ubcc0\uacbd(\ucd5c\uc18c\uac12 \uc774\uc9c4\ud2b8\ub9ac\ub85c \ub9cc\ub4e4\uae30)\n2.", "solution('''6 3\nyatuv\n0 2\n0 3\n2 0\n2 0\n3 0\n3 0''') == 'yatuuvuuvuu', 'Test 1'\nassert solution('''10 2\nvcqpnkxqkq\n0 2\n2 4\n0 6\n0 0\n2 7\n2 0\n4 0\n4 0\n7 0\n7 0''') == 'vcqpnkxqkq', 'Test 2'\nassert solution('''13 2\nowmjdndouh\n0 2\n2 4\n2 6\n4 0\n4 9\n0 10\n6 0\n6 11\n0 0\n9 0\n9 0\n10 0\n11 0''') == 'owmjdndouhh', 'Test 3'\nassert solution('''4 3\nabc\n0 2\n0 3\n2 0\n3 0''') == 'abcabc', 'Test 4'\nassert solution('''7 4\nriyfch\n0 2\n2 3\n2 4\n0 5\n3 0\n4 0\n5 0''') == 'riyfchfchfch', 'Test 5'\nassert solution('''3 3\nabc\n0 1\n0 2\n1 0\n2 0''') == 'abcaa', 'Test 6'\nassert solution", "(solution('''\n5 1\naabcb\n0 1\n0 0\n2 3\n4 0\n0 0\n''') == 'aaabcb')\nassert (solution('''\n3 1\naab\n0 1\n2 0\n0 0\n''') == 'aaab')\nassert (solution('''\n5 1\nabcde\n0 1\n2 0\n3 0\n4 0\n0 0\n''') == 'abcde')\nassert (solution('''\n10 4\nbcdbbcddbc\n0 1\n0 0\n3 4\n0 0\n5 0\n0 0\n7 8\n0 0\n0 0\n0 0\n''') == 'bccdbbccdbddbc')\nassert (solution('''\n4 0\nabcd\n0 1\n2 0\n3 0\n0 0\n''') == 'abcd')\nassert (solution('''\n6 4\nabcded\n0 1\n2 0\n3 0\n4 0\n5 0\n0 0\n''') == 'abcdded')\nassert (solution('''\n7 2\naaaaaaa\n0 1\n2 0\n3 0\n4 0\n5 0\n6 0\n0 0\n''') == 'aaaaaaaaa')\nassert (solution('''\n8 5\naaaaaaaa\n", "solution('''\n5 2\naabaa\n1 2\n2 0\n0 0\n0 0\n0 0\n''') == 'aaaabaa'\n\nassert solution('''\n5 1\nbbbba\n2 0\n2 0\n0 0\n0 0\n0 0\n''') == 'bbbbabbbb'\n\nassert solution('''\n5 0\ncadbz\n3 0\n2 0\n0 0\n0 0\n0 0\n''') == 'acbdz'\n\nassert solution('''\n5 5\naaaaa\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aaaaa'\n\nprint('ok')", "solution(\"\"\"\nn k\nc\nl_1 r_1\n...\nl_n r_n\n\"\"\") == \"xx\"", "solution(solution.__doc__) == \"stesso\"\n\nprint(solution(solution.__doc__))", "solution('''\n2 1\nac\n0 0\n0 0\n''') == 'aac'\n\nassert solution('''\n2 2\nac\n0 0\n0 0\n''') == 'aac'\n\nassert solution('''\n7 4\nztqpqev\n5 0\n0 6\n0 3\n2 0\n0 0\n0 0\n1 0\n''') == 'aaaappqz'\n\nassert solution('''\n7 4\nztqpqev\n5 0\n0 6\n0 3\n2 0\n0 0\n0 0\n1 0\n''') == 'aaaappqz'\n\nassert solution('''\n14 7\nyanhilbgcvjozn\n11 4\n2 3\n0 13\n0 0\n0 12\n8 0\n0 9\n0 0\n7 0\n0 0\n0 0\n0 0\n0 5\n0 0\n''') == 'aabcccccdbbbboo'", "solution('''\n6 3\nabcabc\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aabccba'\n\nassert solution('''\n1 1\nc\n0 0\n''') == 'cc'\n\nassert solution('''\n2 1\nab\n0 0\n0 0\n''') == 'aabb'\n\nassert solution('''\n8 2\nabcdefgh\n0 2\n0 3\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'abcdfegbcehgf'\n\nassert solution('''\n5 3\nabcde\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == 'aabccde'\n\n# get the input\ndef get_input() -> str:\n    stdin = []\n    while True:\n        try:\n            stdin.append(input())\n        except EOFError:\n            break\n    return '\\n'.join(stdin)\n\n# print the output\nprint(solution(get_input()))", "solution(r'''\n5 2\nabcde\n0 2\n1 0\n0 0\n0 0\n0 0\n''') == 'aabcde'\n\nassert solution(r'''\n5 3\ncdeab\n1 3\n0 2\n4 0\n0 0\n0 0\n''') == 'aabceadb'\n\nassert solution(r'''\n6 4\ndefbac\n1 4\n0 2\n3 0\n5 0\n0 0\n0 0\n''') == 'aaabcddefb'\n\n# submit solution to codeforces\n#solution(sys.stdin.read())"], "finish_reason": ["length", "length", "stop", "length", "length", "length", "length", "stop", "stop", "stop", "length", "stop", "length", "stop", "length", "length", "length", "stop", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "stop", "length", "stop", "length", "length", "stop", "length", "length", "length", "stop", "length", "length", "length", "length", "length", "length", "stop", "stop", "stop", "stop", "stop", "stop"], "sum_logprob": [-180.77941170959807, -108.57626629285802, -35.81806400771, -108.29630872610194, -120.67447871552007, -94.1086856328514, -99.36076899064597, -108.835898720155, -12.51254712, -10.2491152548, -40.77315762428995, -32.214804677000004, -119.08811444767404, -69.60753926380002, -194.16744606148583, -48.23561113009452, -121.05580007342928, -132.393413193121, -125.02096959222001, -196.55496099054912, -99.378822443553, -51.019671381439984, -183.75250027660988, -98.76143937880997, -166.80291861957392, -119.17559945855993, -75.65895133971098, -111.4693567646874, -5.627985463500001, -133.55596657758005, -22.975984575000002, -14.06302038423402, -189.56094008168301, -38.16491815442999, -21.854529849250724, -124.76467147064348, -73.78209612311701, -32.46283447059999, -84.42709928813801, -83.15962772662995, -74.81793483599904, -179.59626805401612, -251.91644725272192, -136.342466388765, -82.92397879312001, -21.921622631959995, -32.45753573064999, -196.0927895943648, -95.00147673463503, -91.13193015551], "mean_logprob": [-0.6025980390319934, -0.36192088764286, -0.6283870878545614, -0.36098769575367334, -0.40224826238506667, -0.31369561877617136, -0.3312025633021533, -0.8183150279710902, -1.1375042836363636, -0.7320796610571428, -0.1359105254143, -0.5965704569814815, -0.39696038149224666, -0.5613511230951613, -0.6472248202049533, -0.16078537043364832, -0.40351933357809766, -0.5858115628014203, -0.4167365653074, -0.65518320330183, -0.33126274147851, -0.6713114655452631, -0.6125083342553667, -0.3292047979293667, -0.5560097287319133, -0.3972519981952, -0.25219650446570335, -0.37156452254895833, -0.6253317181666667, -0.4451865552586, -1.7673834288461538, -0.04687673461411333, -0.6318698002722767, -0.8120195352006383, -0.07284843283083567, -0.4158822382354783, -0.24594032041039, -0.7549496388511627, -0.28142366429379334, -0.2771987590887667, -0.24939311611999668, -0.6006564148963746, -0.8397214908424067, -0.45447488796255, -0.5315639666225641, -0.68505070724875, -1.0819178576883333, -0.8872976904722389, -0.3725548107240588, -0.6372862248637063]}
