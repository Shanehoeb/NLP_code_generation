{"task_id": "MbppEval/2", "prompt": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n\n# check the correctness of similar_elements\nassert ", "entry_point": "similar_elements", "canonical_solution": "  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) \n", "test": "def check(candidate):\n    assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n    assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))\n    assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))\n"}
{"task_id": "MbppEval/3", "prompt": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    pass\n\n# check the correctness of is_not_prime\nassert ", "entry_point": "is_not_prime", "canonical_solution": "    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n", "test": "def check(candidate):\n    assert is_not_prime(2) == False\n    assert is_not_prime(10) == True\n    assert is_not_prime(35) == True\n    assert is_not_prime(37) == False\n"}
{"task_id": "MbppEval/4", "prompt": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n\n# check the correctness of heap_queue_largest\nassert ", "entry_point": "heap_queue_largest", "canonical_solution": "  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n", "test": "def check(candidate):\n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n"}
{"task_id": "MbppEval/6", "prompt": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n\n# check the correctness of is_Power_Of_Two \nassert ", "entry_point": "is_Power_Of_Two ", "canonical_solution": "    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)\n", "test": "def check(candidate):\n    assert differ_At_One_Bit_Pos(13,9) == True\n    assert differ_At_One_Bit_Pos(15,8) == False\n    assert differ_At_One_Bit_Pos(2,4) == False\n    assert differ_At_One_Bit_Pos(2, 3) == True\n    assert differ_At_One_Bit_Pos(5, 1) == True\n    assert differ_At_One_Bit_Pos(1, 5) == True\n"}
{"task_id": "MbppEval/7", "prompt": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n\n# check the correctness of find_char_long\nassert ", "entry_point": "find_char_long", "canonical_solution": "  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n", "test": "def check(candidate):\n    assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n    assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\n    assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])\n"}
{"task_id": "MbppEval/8", "prompt": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    pass\n\n# check the correctness of square_nums\nassert ", "entry_point": "square_nums", "canonical_solution": " square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums\n", "test": "def check(candidate):\n    assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert square_nums([10,20,30])==([100,400,900])\n    assert square_nums([12,15])==([144,225])\n"}
{"task_id": "MbppEval/9", "prompt": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n\n# check the correctness of find_Rotations\nassert ", "entry_point": "find_Rotations", "canonical_solution": "    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n \n", "test": "def check(candidate):\n    assert find_Rotations(\"aaaa\") == 1\n    assert find_Rotations(\"ab\") == 2\n    assert find_Rotations(\"abc\") == 3\n"}
{"task_id": "MbppEval/11", "prompt": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n\n# check the correctness of remove_Occ\nassert ", "entry_point": "remove_Occ", "canonical_solution": "    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s \n", "test": "def check(candidate):\n    assert remove_Occ(\"hello\",\"l\") == \"heo\"\n    assert remove_Occ(\"abcda\",\"a\") == \"bcd\"\n    assert remove_Occ(\"PHP\",\"P\") == \"H\"\n"}
{"task_id": "MbppEval/12", "prompt": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n\n# check the correctness of sort_matrix\nassert ", "entry_point": "sort_matrix", "canonical_solution": "    result = sorted(M, key=sum)\n    return result\n", "test": "def check(candidate):\n    assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n"}
{"task_id": "MbppEval/14", "prompt": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    pass\n\n# check the correctness of find_Volume\nassert ", "entry_point": "find_Volume", "canonical_solution": "    return ((l * b * h) / 2) \n", "test": "def check(candidate):\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(3,2,2) == 6\n    assert find_Volume(1,2,1) == 1\n"}
{"task_id": "MbppEval/16", "prompt": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pass\n\n# check the correctness of text_lowercase_underscore\nassert ", "entry_point": "text_lowercase_underscore", "canonical_solution": "        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n", "test": "def check(candidate):\n    assert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n    assert text_lowercase_underscore(\"aab_Abbbc\")==(False)\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)\n"}
{"task_id": "MbppEval/17", "prompt": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n\n# check the correctness of square_perimeter\nassert ", "entry_point": "square_perimeter", "canonical_solution": "  perimeter=4*a\n  return perimeter\n", "test": "def check(candidate):\n    assert square_perimeter(10)==40\n    assert square_perimeter(5)==20\n    assert square_perimeter(4)==16\n"}
{"task_id": "MbppEval/18", "prompt": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n\n# check the correctness of str_to_list\nassert ", "entry_point": "str_to_list", "canonical_solution": "\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) \n", "test": "def check(candidate):\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n    assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n"}
{"task_id": "MbppEval/19", "prompt": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n\n# check the correctness of test_duplicate\nassert ", "entry_point": "test_duplicate", "canonical_solution": "    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     \n", "test": "def check(candidate):\n    assert test_duplicate(([1,2,3,4,5]))==False\n    assert test_duplicate(([1,2,3,4, 4]))==True\n    assert test_duplicate([1,1,2,2,3,3,4,4,5])==True\n"}
{"task_id": "MbppEval/20", "prompt": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n\n# check the correctness of is_woodall\nassert ", "entry_point": "is_woodall", "canonical_solution": "\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False\n", "test": "def check(candidate):\n    assert is_woodall(383) == True\n    assert is_woodall(254) == False\n    assert is_woodall(200) == False\n"}
{"task_id": "MbppEval/56", "prompt": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    pass\n\n# check the correctness of rev\nassert ", "entry_point": "rev", "canonical_solution": "    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  \n", "test": "def check(candidate):\n    assert check(70) == False\n    assert check(23) == False\n    assert check(73) == True\n"}
{"task_id": "MbppEval/57", "prompt": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n\n# check the correctness of find_Max_Num\nassert ", "entry_point": "find_Max_Num", "canonical_solution": "    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num \n", "test": "def check(candidate):\n    assert find_Max_Num([1,2,3]) == 321\n    assert find_Max_Num([4,5,6,1]) == 6541\n    assert find_Max_Num([1,2,3,9]) == 9321\n"}
{"task_id": "MbppEval/58", "prompt": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    pass\n\n# check the correctness of opposite_Signs\nassert ", "entry_point": "opposite_Signs", "canonical_solution": "    return ((x ^ y) < 0); \n", "test": "def check(candidate):\n    assert opposite_Signs(1,-2) == True\n    assert opposite_Signs(3,2) == False\n    assert opposite_Signs(-10,-10) == False\n    assert opposite_Signs(-2,2) == True\n"}
{"task_id": "MbppEval/59", "prompt": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    pass\n\n# check the correctness of is_octagonal\nassert ", "entry_point": "is_octagonal", "canonical_solution": "\treturn 3 * n * n - 2 * n \n", "test": "def check(candidate):\n    assert is_octagonal(5) == 65\n    assert is_octagonal(10) == 280\n    assert is_octagonal(15) == 645\n"}
{"task_id": "MbppEval/61", "prompt": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n\n# check the correctness of count_Substrings\nassert ", "entry_point": "count_Substrings", "canonical_solution": "    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\n", "test": "def check(candidate):\n    assert count_Substrings('112112') == 6\n    assert count_Substrings('111') == 6\n    assert count_Substrings('1101112') == 12\n"}
{"task_id": "MbppEval/62", "prompt": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n\n# check the correctness of smallest_num\nassert ", "entry_point": "smallest_num", "canonical_solution": "  return min(xs)\n\n", "test": "def check(candidate):\n    assert smallest_num([10, 20, 1, 45, 99]) == 1\n    assert smallest_num([1, 2, 3]) == 1\n    assert smallest_num([45, 46, 50, 60]) == 45\n"}
{"task_id": "MbppEval/63", "prompt": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n\n# check the correctness of max_difference\nassert ", "entry_point": "max_difference", "canonical_solution": "  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) \n", "test": "def check(candidate):\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n"}
{"task_id": "MbppEval/64", "prompt": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n\n# check the correctness of subject_marks\nassert ", "entry_point": "subject_marks", "canonical_solution": "#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n", "test": "def check(candidate):\n    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n"}
{"task_id": "MbppEval/65", "prompt": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n\n# check the correctness of recursive_list_sum\nassert ", "entry_point": "recursive_list_sum", "canonical_solution": "\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n", "test": "def check(candidate):\n    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n    assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\n    assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\n"}
{"task_id": "MbppEval/66", "prompt": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n\n# check the correctness of pos_count\nassert ", "entry_point": "pos_count", "canonical_solution": "  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count \n", "test": "def check(candidate):\n    assert pos_count([1,-2,3,-4]) == 2\n    assert pos_count([3,4,5,-1]) == 3\n    assert pos_count([1,2,3,4]) == 4\n"}
{"task_id": "MbppEval/67", "prompt": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n\n# check the correctness of bell_number\nassert ", "entry_point": "bell_number", "canonical_solution": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n", "test": "def check(candidate):\n    assert bell_number(2)==2\n    assert bell_number(10)==115975\n    assert bell_number(56)==6775685320645824322581483068371419745979053216268760300\n"}
{"task_id": "MbppEval/68", "prompt": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    pass\n\n# check the correctness of is_Monotonic\nassert ", "entry_point": "is_Monotonic", "canonical_solution": "    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n", "test": "def check(candidate):\n    assert is_Monotonic([6, 5, 4, 4]) == True\n    assert is_Monotonic([1, 2, 2, 3]) == True\n    assert is_Monotonic([1, 3, 2]) == False\n"}
{"task_id": "MbppEval/69", "prompt": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    pass\n\n# check the correctness of is_sublist\nassert ", "entry_point": "is_sublist", "canonical_solution": "\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\n", "test": "def check(candidate):\n    assert is_sublist([2,4,3,5,7],[3,7])==False\n    assert is_sublist([2,4,3,5,7],[4,3])==True\n    assert is_sublist([2,4,3,5,7],[1,6])==False\n"}
{"task_id": "MbppEval/70", "prompt": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n\n# check the correctness of find_equal_tuple\nassert ", "entry_point": "find_equal_tuple", "canonical_solution": "  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1\n", "test": "def check(candidate):\n    assert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n    assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\n    assert get_equal([(1, 2), (3, 4)]) == True\n"}
{"task_id": "MbppEval/71", "prompt": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n\n# check the correctness of comb_sort\nassert ", "entry_point": "comb_sort", "canonical_solution": "    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\n", "test": "def check(candidate):\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\n"}
{"task_id": "MbppEval/72", "prompt": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    pass\n\n# check the correctness of dif_Square\nassert ", "entry_point": "dif_Square", "canonical_solution": "    if (n % 4 != 2): \n        return True\n    return False\n", "test": "def check(candidate):\n    assert dif_Square(5) == True\n    assert dif_Square(10) == False\n    assert dif_Square(15) == True\n"}
{"task_id": "MbppEval/74", "prompt": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n\n# check the correctness of is_samepatterns\nassert ", "entry_point": "is_samepatterns", "canonical_solution": "    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True\n", "test": "def check(candidate):\n    assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False\n"}
{"task_id": "MbppEval/75", "prompt": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n\n# check the correctness of find_tuples\nassert ", "entry_point": "find_tuples", "canonical_solution": "  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n", "test": "def check(candidate):\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n"}
{"task_id": "MbppEval/77", "prompt": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n\n# check the correctness of is_Diff\nassert ", "entry_point": "is_Diff", "canonical_solution": "    return (n % 11 == 0) \n", "test": "def check(candidate):\n    assert is_Diff (12345) == False\n    assert is_Diff(1212112) == True\n    assert is_Diff(1212) == False\n"}
{"task_id": "MbppEval/79", "prompt": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    pass\n\n# check the correctness of word_len\nassert ", "entry_point": "word_len", "canonical_solution": "    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False\n", "test": "def check(candidate):\n    assert word_len(\"Hadoop\") == False\n    assert word_len(\"great\") == True\n    assert word_len(\"structure\") == True\n"}
{"task_id": "MbppEval/80", "prompt": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n\n# check the correctness of tetrahedral_number\nassert ", "entry_point": "tetrahedral_number", "canonical_solution": "\treturn (n * (n + 1) * (n + 2)) / 6\n", "test": "def check(candidate):\n    assert tetrahedral_number(5) == 35\n    assert tetrahedral_number(6) == 56\n    assert tetrahedral_number(7) == 84\n"}
{"task_id": "MbppEval/82", "prompt": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n\n# check the correctness of volume_sphere\nassert ", "entry_point": "volume_sphere", "canonical_solution": "  volume=(4/3)*math.pi*r*r*r\n  return volume\n", "test": "def check(candidate):\n    assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n    assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\n    assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)\n"}
{"task_id": "MbppEval/83", "prompt": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n\n# check the correctness of get_Char\nassert ", "entry_point": "get_Char", "canonical_solution": "    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\n", "test": "def check(candidate):\n    assert get_Char(\"abc\") == \"f\"\n    assert get_Char(\"gfg\") == \"t\"\n    assert get_Char(\"ab\") == \"c\"\n"}
{"task_id": "MbppEval/84", "prompt": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n\n# check the correctness of sequence\nassert ", "entry_point": "sequence", "canonical_solution": "\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n", "test": "def check(candidate):\n    assert sequence(10) == 6\n    assert sequence(2) == 1\n    assert sequence(3) == 2\n"}
{"task_id": "MbppEval/85", "prompt": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n\n# check the correctness of surfacearea_sphere\nassert ", "entry_point": "surfacearea_sphere", "canonical_solution": "  surfacearea=4*math.pi*r*r\n  return surfacearea\n", "test": "def check(candidate):\n    assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n    assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\n    assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)\n"}
{"task_id": "MbppEval/86", "prompt": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n\n# check the correctness of centered_hexagonal_number\nassert ", "entry_point": "centered_hexagonal_number", "canonical_solution": "  return 3 * n * (n - 1) + 1\n", "test": "def check(candidate):\n    assert centered_hexagonal_number(10) == 271\n    assert centered_hexagonal_number(2) == 7\n    assert centered_hexagonal_number(9) == 217\n"}
{"task_id": "MbppEval/87", "prompt": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    pass\n\n# check the correctness of merge_dictionaries_three\nassert ", "entry_point": "merge_dictionaries_three", "canonical_solution": "    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\n", "test": "def check(candidate):\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n"}
{"task_id": "MbppEval/88", "prompt": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n\n# check the correctness of freq_count\nassert ", "entry_point": "freq_count", "canonical_solution": "  freq_count= collections.Counter(list1)\n  return freq_count\n", "test": "def check(candidate):\n    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\n    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n"}
{"task_id": "MbppEval/89", "prompt": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n\n# check the correctness of closest_num\nassert ", "entry_point": "closest_num", "canonical_solution": "  return (N - 1)\n", "test": "def check(candidate):\n    assert closest_num(11) == 10\n    assert closest_num(7) == 6\n    assert closest_num(12) == 11\n"}
{"task_id": "MbppEval/90", "prompt": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n\n# check the correctness of len_log\nassert ", "entry_point": "len_log", "canonical_solution": "    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n", "test": "def check(candidate):\n    assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert len_log([\"a\",\"ab\",\"abc\"]) == 3\n    assert len_log([\"small\",\"big\",\"tall\"]) == 5\n"}
{"task_id": "MbppEval/91", "prompt": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass\n\n# check the correctness of find_substring\nassert ", "entry_point": "find_substring", "canonical_solution": "   if any(sub_str in s for s in str1):\n       return True\n   return False\n", "test": "def check(candidate):\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n"}
{"task_id": "MbppEval/92", "prompt": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n\n# check the correctness of is_undulating\nassert ", "entry_point": "is_undulating", "canonical_solution": "\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True\n", "test": "def check(candidate):\n    assert is_undulating(1212121) == True\n    assert is_undulating(1991) == False\n    assert is_undulating(121) == True\n"}
{"task_id": "MbppEval/93", "prompt": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    pass\n\n# check the correctness of power\nassert ", "entry_point": "power", "canonical_solution": "\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)\n", "test": "def check(candidate):\n    assert power(3,4) == 81\n    assert power(2,3) == 8\n    assert power(5,5) == 3125\n"}
{"task_id": "MbppEval/94", "prompt": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    pass\n\n# check the correctness of index_minimum\nassert ", "entry_point": "index_minimum", "canonical_solution": "  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n", "test": "def check(candidate):\n    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n"}
{"task_id": "MbppEval/95", "prompt": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    pass\n\n# check the correctness of Find_Min_Length\nassert ", "entry_point": "Find_Min_Length", "canonical_solution": "    minLength = min(len(x) for x in lst )\n    return minLength \n", "test": "def check(candidate):\n    assert Find_Min_Length([[1],[1,2]]) == 1\n    assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\n"}
{"task_id": "MbppEval/96", "prompt": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\n\n# check the correctness of divisor\nassert ", "entry_point": "divisor", "canonical_solution": "  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x\n", "test": "def check(candidate):\n    assert divisor(15) == 4\n    assert divisor(12) == 6\n    assert divisor(9) == 3\n"}
{"task_id": "MbppEval/97", "prompt": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    pass\n\n# check the correctness of frequency_lists\nassert ", "entry_point": "frequency_lists", "canonical_solution": "    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\n", "test": "def check(candidate):\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n"}
{"task_id": "MbppEval/98", "prompt": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    pass\n\n# check the correctness of multiply_num\nassert ", "entry_point": "multiply_num", "canonical_solution": "    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) \n", "test": "def check(candidate):\n    assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n    assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\n    assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)\n"}
{"task_id": "MbppEval/99", "prompt": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n\n# check the correctness of decimal_to_binary\nassert ", "entry_point": "decimal_to_binary", "canonical_solution": "    return bin(n).replace(\"0b\",\"\") \n", "test": "def check(candidate):\n    assert decimal_to_binary(8) == '1000'\n    assert decimal_to_binary(18) == '10010'\n    assert decimal_to_binary(7) == '111'\n"}
{"task_id": "MbppEval/100", "prompt": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n\n# check the correctness of next_smallest_palindrome\nassert ", "entry_point": "next_smallest_palindrome", "canonical_solution": "    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\n", "test": "def check(candidate):\n    assert next_smallest_palindrome(99)==101\n    assert next_smallest_palindrome(1221)==1331\n    assert next_smallest_palindrome(120)==121\n"}
{"task_id": "MbppEval/101", "prompt": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n\n# check the correctness of kth_element\nassert ", "entry_point": "kth_element", "canonical_solution": "  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]\n", "test": "def check(candidate):\n    assert kth_element([12,3,5,7,19], 2) == 3\n    assert kth_element([17,24,8,23], 3) == 8\n    assert kth_element([16,21,25,36,4], 4) == 36\n"}
{"task_id": "MbppEval/102", "prompt": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    pass\n\n# check the correctness of snake_to_camel\nassert ", "entry_point": "snake_to_camel", "canonical_solution": "        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "test": "def check(candidate):\n    assert snake_to_camel('python_program')=='PythonProgram'\n    assert snake_to_camel('python_language')==('PythonLanguage')\n    assert snake_to_camel('programming_language')==('ProgrammingLanguage')\n"}
{"task_id": "MbppEval/103", "prompt": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    pass\n\n# check the correctness of eulerian_num\nassert ", "entry_point": "eulerian_num", "canonical_solution": "\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\n", "test": "def check(candidate):\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num(4, 1) == 11\n    assert eulerian_num(5, 3) == 26\n"}
{"task_id": "MbppEval/104", "prompt": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n\n# check the correctness of sort_sublists\nassert ", "entry_point": "sort_sublists", "canonical_solution": "    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\n", "test": "def check(candidate):\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n"}
{"task_id": "MbppEval/105", "prompt": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    pass\n\n# check the correctness of count\nassert ", "entry_point": "count", "canonical_solution": "    return sum(lst) \n", "test": "def check(candidate):\n    assert count([True,False,True]) == 2\n    assert count([False,False]) == 0\n    assert count([True,True,True]) == 3\n"}
{"task_id": "MbppEval/106", "prompt": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n\n# check the correctness of add_lists\nassert ", "entry_point": "add_lists", "canonical_solution": "  res = tuple(list(test_tup) + test_list)\n  return (res) \n", "test": "def check(candidate):\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n"}
{"task_id": "MbppEval/108", "prompt": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    pass\n\n# check the correctness of merge_sorted_list\nassert ", "entry_point": "merge_sorted_list", "canonical_solution": "  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)\n", "test": "def check(candidate):\n    assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n"}
{"task_id": "MbppEval/109", "prompt": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    pass\n\n# check the correctness of odd_Equivalent\nassert ", "entry_point": "odd_Equivalent", "canonical_solution": "    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n", "test": "def check(candidate):\n    assert odd_Equivalent(\"011001\",6) == 3\n    assert odd_Equivalent(\"11011\",5) == 4\n    assert odd_Equivalent(\"1010\",4) == 2\n"}
{"task_id": "MbppEval/111", "prompt": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n\n# check the correctness of common_in_nested_lists\nassert ", "entry_point": "common_in_nested_lists", "canonical_solution": "    result = list(set.intersection(*map(set, nestedlist)))\n    return result\n", "test": "def check(candidate):\n    assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n    assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\n    assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n"}
{"task_id": "MbppEval/113", "prompt": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n\n# check the correctness of check_integer\nassert ", "entry_point": "check_integer", "canonical_solution": " text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\n", "test": "def check(candidate):\n    assert check_integer(\"python\")==False\n    assert check_integer(\"1\")==True\n    assert check_integer(\"12345\")==True\n"}
{"task_id": "MbppEval/115", "prompt": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    pass\n\n# check the correctness of empty_dit\nassert ", "entry_point": "empty_dit", "canonical_solution": " empty_dit=all(not d for d in list1)\n return empty_dit\n", "test": "def check(candidate):\n    assert empty_dit([{},{},{}])==True\n    assert empty_dit([{1,2},{},{}])==False\n    assert empty_dit({})==True\n"}
{"task_id": "MbppEval/116", "prompt": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    pass\n\n# check the correctness of tuple_to_int\nassert ", "entry_point": "tuple_to_int", "canonical_solution": "    result = int(''.join(map(str,nums)))\n    return result\n", "test": "def check(candidate):\n    assert tuple_to_int((1,2,3))==123\n    assert tuple_to_int((4,5,6))==456\n    assert tuple_to_int((5,6,7))==567\n"}
{"task_id": "MbppEval/117", "prompt": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n\n# check the correctness of list_to_float\nassert ", "entry_point": "list_to_float", "canonical_solution": "  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res\n", "test": "def check(candidate):\n    assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n    assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n"}
{"task_id": "MbppEval/118", "prompt": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    pass\n\n# check the correctness of string_to_list\nassert ", "entry_point": "string_to_list", "canonical_solution": "    lst = list(string.split(\" \")) \n    return lst\n", "test": "def check(candidate):\n    assert string_to_list(\"python programming\")==['python','programming']\n    assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\n    assert string_to_list(\"write a program\")==['write','a','program']\n"}
{"task_id": "MbppEval/119", "prompt": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n\n# check the correctness of search\nassert ", "entry_point": "search", "canonical_solution": "    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\n", "test": "def check(candidate):\n    assert search([1,1,2,2,3]) == 3\n    assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\n    assert search([1,2,2,3,3,4,4]) == 1\n"}
{"task_id": "MbppEval/120", "prompt": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n\n# check the correctness of max_product_tuple\nassert ", "entry_point": "max_product_tuple", "canonical_solution": "    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\n", "test": "def check(candidate):\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200\n    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484\n"}
{"task_id": "MbppEval/123", "prompt": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n\n# check the correctness of amicable_numbers_sum\nassert ", "entry_point": "amicable_numbers_sum", "canonical_solution": "    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n", "test": "def check(candidate):\n    assert amicable_numbers_sum(999)==504\n    assert amicable_numbers_sum(9999)==31626\n    assert amicable_numbers_sum(99)==0\n"}
{"task_id": "MbppEval/124", "prompt": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    pass\n\n# check the correctness of angle_complex\nassert ", "entry_point": "angle_complex", "canonical_solution": "  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle\n", "test": "def check(candidate):\n    assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n    assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\n    assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)\n"}
{"task_id": "MbppEval/125", "prompt": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n\n# check the correctness of find_length\nassert ", "entry_point": "find_length", "canonical_solution": "\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0\n", "test": "def check(candidate):\n    assert find_length(\"11000010001\") == 6\n    assert find_length(\"10111\") == 1\n    assert find_length(\"11011101100101\") == 2\n"}
{"task_id": "MbppEval/126", "prompt": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    pass\n\n# check the correctness of sum\nassert ", "entry_point": "sum", "canonical_solution": "    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum\n", "test": "def check(candidate):\n    assert sum(10,15) == 6\n    assert sum(100,150) == 93\n    assert sum(4,6) == 3\n"}
{"task_id": "MbppEval/127", "prompt": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n\n# check the correctness of multiply_int\nassert ", "entry_point": "multiply_int", "canonical_solution": "    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n", "test": "def check(candidate):\n    assert multiply_int(10,20)==200\n    assert multiply_int(5,10)==50\n    assert multiply_int(4,8)==32\n"}
{"task_id": "MbppEval/128", "prompt": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n\n# check the correctness of long_words\nassert ", "entry_point": "long_words", "canonical_solution": "    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t\n", "test": "def check(candidate):\n    assert long_words(3,\"python is a programming language\")==['python','programming','language']\n    assert long_words(2,\"writing a program\")==['writing','program']\n    assert long_words(5,\"sorting list\")==['sorting']\n"}
{"task_id": "MbppEval/129", "prompt": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n\n# check the correctness of magic_square_test\nassert ", "entry_point": "magic_square_test", "canonical_solution": "    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\n", "test": "def check(candidate):\n    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n"}
{"task_id": "MbppEval/130", "prompt": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    pass\n\n# check the correctness of max_occurrences\nassert ", "entry_point": "max_occurrences", "canonical_solution": "    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\n", "test": "def check(candidate):\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n    assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\n    assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20\n"}
{"task_id": "MbppEval/131", "prompt": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    pass\n\n# check the correctness of reverse_vowels\nassert ", "entry_point": "reverse_vowels", "canonical_solution": "\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string\n", "test": "def check(candidate):\n    assert reverse_vowels(\"Python\") == \"Python\"\n    assert reverse_vowels(\"USA\") == \"ASU\"\n    assert reverse_vowels(\"ab\") == \"ab\"\n"}
{"task_id": "MbppEval/132", "prompt": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n\n# check the correctness of tup_string\nassert ", "entry_point": "tup_string", "canonical_solution": "  str =  ''.join(tup1)\n  return str\n", "test": "def check(candidate):\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    assert tup_string(('p','y','t','h','o','n'))==(\"python\")\n    assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")\n"}
{"task_id": "MbppEval/133", "prompt": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    pass\n\n# check the correctness of sum_negativenum\nassert ", "entry_point": "sum_negativenum", "canonical_solution": "  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)\n", "test": "def check(candidate):\n    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\n    assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n"}
{"task_id": "MbppEval/135", "prompt": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass\n\n# check the correctness of hexagonal_num\nassert ", "entry_point": "hexagonal_num", "canonical_solution": "\treturn n*(2*n - 1) \n", "test": "def check(candidate):\n    assert hexagonal_num(10) == 190\n    assert hexagonal_num(5) == 45\n    assert hexagonal_num(7) == 91\n"}
{"task_id": "MbppEval/137", "prompt": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    pass\n\n# check the correctness of zero_count\nassert ", "entry_point": "zero_count", "canonical_solution": "    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)\n", "test": "def check(candidate):\n    assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n    assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\n    assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)\n"}
{"task_id": "MbppEval/138", "prompt": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pass\n\n# check the correctness of is_Sum_Of_Powers_Of_Two\nassert ", "entry_point": "is_Sum_Of_Powers_Of_Two", "canonical_solution": "    if (n % 2 == 1): \n        return False\n    else: \n        return True\n", "test": "def check(candidate):\n    assert is_Sum_Of_Powers_Of_Two(10) == True\n    assert is_Sum_Of_Powers_Of_Two(7) == False\n    assert is_Sum_Of_Powers_Of_Two(14) == True\n"}
{"task_id": "MbppEval/139", "prompt": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n\n# check the correctness of circle_circumference\nassert ", "entry_point": "circle_circumference", "canonical_solution": "  perimeter=2*3.1415*r\n  return perimeter\n", "test": "def check(candidate):\n    assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n    assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\n    assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)\n"}
{"task_id": "MbppEval/140", "prompt": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n\n# check the correctness of extract_singly\nassert ", "entry_point": "extract_singly", "canonical_solution": "  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) \n", "test": "def check(candidate):\n    assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n    assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\n    assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])\n"}
{"task_id": "MbppEval/141", "prompt": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n\n# check the correctness of pancake_sort\nassert ", "entry_point": "pancake_sort", "canonical_solution": "    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n", "test": "def check(candidate):\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n"}
{"task_id": "MbppEval/142", "prompt": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    pass\n\n# check the correctness of count_samepair\nassert ", "entry_point": "count_samepair", "canonical_solution": "    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\n", "test": "def check(candidate):\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n"}
{"task_id": "MbppEval/143", "prompt": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n\n# check the correctness of find_lists\nassert ", "entry_point": "find_lists", "canonical_solution": "\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) \n", "test": "def check(candidate):\n    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\n    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\n"}
{"task_id": "MbppEval/145", "prompt": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    pass\n\n# check the correctness of max_Abs_Diff\nassert ", "entry_point": "max_Abs_Diff", "canonical_solution": "    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \n", "test": "def check(candidate):\n    assert max_Abs_Diff((2,1,5,3)) == 4\n    assert max_Abs_Diff((9,3,2,5,1)) == 8\n    assert max_Abs_Diff((3,2,1)) == 2\n"}
{"task_id": "MbppEval/160", "prompt": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n\n# check the correctness of find_solution\nassert ", "entry_point": "find_solution", "canonical_solution": "\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\n", "test": "def check(candidate):\n    assert find_solution(2, 3, 7) == (2, 1)\n    assert find_solution(4, 2, 7) == None\n    assert find_solution(1, 13, 17) == (4, 1)\n"}
{"task_id": "MbppEval/161", "prompt": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n\n# check the correctness of remove_elements\nassert ", "entry_point": "remove_elements", "canonical_solution": "    result = [x for x in list1 if x not in list2]\n    return result\n", "test": "def check(candidate):\n    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\n    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n"}
{"task_id": "MbppEval/162", "prompt": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    pass\n\n# check the correctness of sum_series\nassert ", "entry_point": "sum_series", "canonical_solution": "  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)\n", "test": "def check(candidate):\n    assert sum_series(6) == 12\n    assert sum_series(10) == 30\n    assert sum_series(9) == 25\n"}
{"task_id": "MbppEval/163", "prompt": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pass\n\n# check the correctness of area_polygon\nassert ", "entry_point": "area_polygon", "canonical_solution": "  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area\n", "test": "def check(candidate):\n    assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)\n    assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)\n    assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)\n"}
{"task_id": "MbppEval/164", "prompt": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n\n# check the correctness of div_sum\nassert ", "entry_point": "div_sum", "canonical_solution": "  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); \n", "test": "def check(candidate):\n    assert are_equivalent(36, 57) == False\n    assert are_equivalent(2, 4) == False\n    assert are_equivalent(23, 47) == True\n"}
{"task_id": "MbppEval/165", "prompt": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n\n# check the correctness of count_char_position\nassert ", "entry_point": "count_char_position", "canonical_solution": "    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars \n", "test": "def check(candidate):\n    assert count_char_position(\"xbcefg\") == 2\n    assert count_char_position(\"ABcED\") == 3\n    assert count_char_position(\"AbgdeF\") == 5\n"}
{"task_id": "MbppEval/166", "prompt": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n\n# check the correctness of find_even_pair\nassert ", "entry_point": "find_even_pair", "canonical_solution": "  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count\n", "test": "def check(candidate):\n    assert find_even_pair([5, 4, 7, 2, 1]) == 4\n    assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\n    assert find_even_pair([1, 2, 3]) == 1\n"}
{"task_id": "MbppEval/167", "prompt": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pass\n\n# check the correctness of next_power_of_2\nassert ", "entry_point": "next_power_of_2", "canonical_solution": "  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; \n", "test": "def check(candidate):\n    assert next_power_of_2(0) == 1\n    assert next_power_of_2(5) == 8\n    assert next_power_of_2(17) == 32\n"}
{"task_id": "MbppEval/168", "prompt": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n\n# check the correctness of frequency\nassert ", "entry_point": "frequency", "canonical_solution": "    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count \n", "test": "def check(candidate):\n    assert frequency([1,2,3], 4) == 0\n    assert frequency([1,2,2,3,3,3,4], 3) == 3\n    assert frequency([0,1,2,3,1,2], 1) == 2\n"}
{"task_id": "MbppEval/170", "prompt": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n\n# check the correctness of sum_range_list\nassert ", "entry_point": "sum_range_list", "canonical_solution": "    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   \n", "test": "def check(candidate):\n    assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n    assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\n    assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n"}
{"task_id": "MbppEval/171", "prompt": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    pass\n\n# check the correctness of perimeter_pentagon\nassert ", "entry_point": "perimeter_pentagon", "canonical_solution": "  perimeter=(5*a)\n  return perimeter\n", "test": "def check(candidate):\n    assert perimeter_pentagon(5) == 25\n    assert perimeter_pentagon(10) == 50\n    assert perimeter_pentagon(15) == 75\n"}
{"task_id": "MbppEval/172", "prompt": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n\n# check the correctness of count_occurance\nassert ", "entry_point": "count_occurance", "canonical_solution": "  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count\n", "test": "def check(candidate):\n    assert count_occurance(\"letstdlenstdporstd\") == 3\n    assert count_occurance(\"truststdsolensporsd\") == 1\n    assert count_occurance(\"makestdsostdworthit\") == 2\n    assert count_occurance(\"stds\") == 1\n    assert count_occurance(\"\") == 0\n"}
{"task_id": "MbppEval/222", "prompt": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n\n# check the correctness of check_type\nassert ", "entry_point": "check_type", "canonical_solution": "  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) \n", "test": "def check(candidate):\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True\n    assert check_type((1, 2, \"4\") ) == False\n    assert check_type((3, 2, 1, 4, 5) ) == True\n"}
{"task_id": "MbppEval/223", "prompt": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n\n# check the correctness of is_majority\nassert ", "entry_point": "is_majority", "canonical_solution": "\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1\n", "test": "def check(candidate):\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n    assert is_majority([1, 1, 2, 2], 5, 1) == False\n"}
{"task_id": "MbppEval/224", "prompt": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    pass\n\n# check the correctness of count_Set_Bits\nassert ", "entry_point": "count_Set_Bits", "canonical_solution": "    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n", "test": "def check(candidate):\n    assert count_Set_Bits(2) == 1\n    assert count_Set_Bits(4) == 1\n    assert count_Set_Bits(6) == 2\n"}
{"task_id": "MbppEval/226", "prompt": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n\n# check the correctness of odd_values_string\nassert ", "entry_point": "odd_values_string", "canonical_solution": "  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\n", "test": "def check(candidate):\n    assert odd_values_string('abcdef') == 'ace'\n    assert odd_values_string('python') == 'pto'\n    assert odd_values_string('data') == 'dt'\n    assert odd_values_string('lambs') == 'lms'\n"}
{"task_id": "MbppEval/227", "prompt": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    pass\n\n# check the correctness of min_of_three\nassert ", "entry_point": "min_of_three", "canonical_solution": "      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest \n", "test": "def check(candidate):\n    assert min_of_three(10,20,0)==0\n    assert min_of_three(19,15,18)==15\n    assert min_of_three(-10,-20,-30)==-30\n"}
{"task_id": "MbppEval/228", "prompt": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n\n# check the correctness of all_Bits_Set_In_The_Given_Range\nassert ", "entry_point": "all_Bits_Set_In_The_Given_Range", "canonical_solution": "    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\n", "test": "def check(candidate):\n    assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n    assert all_Bits_Set_In_The_Given_Range(17,2,4) == True\n    assert all_Bits_Set_In_The_Given_Range(39,4,6) == False\n"}
{"task_id": "MbppEval/229", "prompt": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n\n# check the correctness of re_arrange_array\nassert ", "entry_point": "re_arrange_array", "canonical_solution": "  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr\n", "test": "def check(candidate):\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n"}
{"task_id": "MbppEval/230", "prompt": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    pass\n\n# check the correctness of replace_blank\nassert ", "entry_point": "replace_blank", "canonical_solution": " str2 = str1.replace(' ', char)\n return str2\n", "test": "def check(candidate):\n    assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n    assert replace_blank(\"python program language\",'$')==(\"python$program$language\")\n    assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")\n"}
{"task_id": "MbppEval/232", "prompt": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n\n# check the correctness of larg_nnum\nassert ", "entry_point": "larg_nnum", "canonical_solution": " largest=heapq.nlargest(n,list1)\n return largest\n", "test": "def check(candidate):\n    assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n    assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\n    assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])\n"}
{"task_id": "MbppEval/233", "prompt": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n\n# check the correctness of lateralsuface_cylinder\nassert ", "entry_point": "lateralsuface_cylinder", "canonical_solution": "  lateralsurface= 2*3.1415*r*h\n  return lateralsurface\n", "test": "def check(candidate):\n    assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n    assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\n    assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)\n"}
{"task_id": "MbppEval/234", "prompt": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n\n# check the correctness of volume_cube\nassert ", "entry_point": "volume_cube", "canonical_solution": "  volume = l * l * l\n  return volume\n", "test": "def check(candidate):\n    assert volume_cube(3)==27\n    assert volume_cube(2)==8\n    assert volume_cube(5)==125\n"}
{"task_id": "MbppEval/235", "prompt": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n\n# check the correctness of even_bit_set_number\nassert ", "entry_point": "even_bit_set_number", "canonical_solution": "    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) \n", "test": "def check(candidate):\n    assert even_bit_set_number(10) == 10\n    assert even_bit_set_number(20) == 30\n    assert even_bit_set_number(30) == 30\n"}
{"task_id": "MbppEval/237", "prompt": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n\n# check the correctness of check_occurences\nassert ", "entry_point": "check_occurences", "canonical_solution": "  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) \n", "test": "def check(candidate):\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n"}
{"task_id": "MbppEval/238", "prompt": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n\n# check the correctness of number_of_substrings\nassert ", "entry_point": "number_of_substrings", "canonical_solution": "\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); \n", "test": "def check(candidate):\n    assert number_of_substrings(\"abc\") == 6\n    assert number_of_substrings(\"abcd\") == 10\n    assert number_of_substrings(\"abcde\") == 15\n"}
{"task_id": "MbppEval/239", "prompt": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n\n# check the correctness of get_total_number_of_sequences\nassert ", "entry_point": "get_total_number_of_sequences", "canonical_solution": "\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]\n", "test": "def check(candidate):\n    assert get_total_number_of_sequences(10, 4) == 4\n    assert get_total_number_of_sequences(5, 2) == 6\n    assert get_total_number_of_sequences(16, 3) == 84\n"}
{"task_id": "MbppEval/240", "prompt": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    pass\n\n# check the correctness of replace_list\nassert ", "entry_point": "replace_list", "canonical_solution": " list1[-1:] = list2\n replace_list=list1\n return replace_list\n\n", "test": "def check(candidate):\n    assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n"}
{"task_id": "MbppEval/242", "prompt": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n\n# check the correctness of count_charac\nassert ", "entry_point": "count_charac", "canonical_solution": " total = 0\n for i in str1:\n    total = total + 1\n return total\n", "test": "def check(candidate):\n    assert count_charac(\"python programming\")==18\n    assert count_charac(\"language\")==8\n    assert count_charac(\"words\")==5\n"}
{"task_id": "MbppEval/244", "prompt": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    pass\n\n# check the correctness of next_Perfect_Square\nassert ", "entry_point": "next_Perfect_Square", "canonical_solution": "    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n", "test": "def check(candidate):\n    assert next_Perfect_Square(35) == 36\n    assert next_Perfect_Square(6) == 9\n    assert next_Perfect_Square(9) == 16\n"}
{"task_id": "MbppEval/245", "prompt": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n\n# check the correctness of max_sum\nassert ", "entry_point": "max_sum", "canonical_solution": "\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n", "test": "def check(candidate):\n    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n    assert max_sum([80, 60, 30, 40, 20, 10]) == 210\n    assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138\n"}
{"task_id": "MbppEval/246", "prompt": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n\n# check the correctness of babylonian_squareroot\nassert ", "entry_point": "babylonian_squareroot", "canonical_solution": "    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;\n", "test": "def check(candidate):\n    assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\n    assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)\n    assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)\n"}
{"task_id": "MbppEval/247", "prompt": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass\n\n# check the correctness of lps\nassert ", "entry_point": "lps", "canonical_solution": "\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]\n", "test": "def check(candidate):\n    assert lps(\"TENS FOR TENS\") == 5\n    assert lps(\"CARDIO FOR CARDS\") == 7\n    assert lps(\"PART OF THE JOURNEY IS PART\") == 9\n"}
{"task_id": "MbppEval/248", "prompt": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n\n# check the correctness of harmonic_sum\nassert ", "entry_point": "harmonic_sum", "canonical_solution": "  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) \n", "test": "def check(candidate):\n    assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\n    assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)\n    assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)\n"}
{"task_id": "MbppEval/249", "prompt": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n\n# check the correctness of intersection_array\nassert ", "entry_point": "intersection_array", "canonical_solution": " result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result\n", "test": "def check(candidate):\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]\n"}
{"task_id": "MbppEval/250", "prompt": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass\n\n# check the correctness of count_X\nassert ", "entry_point": "count_X", "canonical_solution": "    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count \n", "test": "def check(candidate):\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n"}
{"task_id": "MbppEval/251", "prompt": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n\n# check the correctness of insert_element\nassert ", "entry_point": "insert_element", "canonical_solution": " list = [v for elt in list for v in (element, elt)]\n return list\n", "test": "def check(candidate):\n    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\n    assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n"}
{"task_id": "MbppEval/252", "prompt": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    pass\n\n# check the correctness of convert\nassert ", "entry_point": "convert", "canonical_solution": "  num = cmath.polar(numbers)  \n  return (num) \n", "test": "def check(candidate):\n    assert convert(1) == (1.0, 0.0)\n    assert convert(4) == (4.0,0.0)\n    assert convert(5) == (5.0,0.0)\n"}
{"task_id": "MbppEval/253", "prompt": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    pass\n\n# check the correctness of count_integer\nassert ", "entry_point": "count_integer", "canonical_solution": "    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\n", "test": "def check(candidate):\n    assert count_integer([1,2,'abc',1.2]) == 2\n    assert count_integer([1,2,3]) == 3\n    assert count_integer([1,1.2,4,5.1]) == 2\n"}
{"task_id": "MbppEval/255", "prompt": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    pass\n\n# check the correctness of combinations_colors\nassert ", "entry_point": "combinations_colors", "canonical_solution": "    return list(combinations_with_replacement(l,n))\n\n", "test": "def check(candidate):\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n"}
{"task_id": "MbppEval/256", "prompt": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n\n# check the correctness of count_Primes_nums\nassert ", "entry_point": "count_Primes_nums", "canonical_solution": "    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n", "test": "def check(candidate):\n    assert count_Primes_nums(5) == 2\n    assert count_Primes_nums(10) == 4\n    assert count_Primes_nums(100) == 25\n"}
{"task_id": "MbppEval/257", "prompt": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    pass\n\n# check the correctness of swap_numbers\nassert ", "entry_point": "swap_numbers", "canonical_solution": " temp = a\n a = b\n b = temp\n return (a,b)\n", "test": "def check(candidate):\n    assert swap_numbers(10,20)==(20,10)\n    assert swap_numbers(15,17)==(17,15)\n    assert swap_numbers(100,200)==(200,100)\n"}
{"task_id": "MbppEval/259", "prompt": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n\n# check the correctness of maximize_elements\nassert ", "entry_point": "maximize_elements", "canonical_solution": "  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \n", "test": "def check(candidate):\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n"}
{"task_id": "MbppEval/260", "prompt": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n\n# check the correctness of newman_prime\nassert ", "entry_point": "newman_prime", "canonical_solution": "\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)\n", "test": "def check(candidate):\n    assert newman_prime(3) == 7\n    assert newman_prime(4) == 17\n    assert newman_prime(5) == 41\n"}
{"task_id": "MbppEval/261", "prompt": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n\n# check the correctness of division_elements\nassert ", "entry_point": "division_elements", "canonical_solution": "  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \n", "test": "def check(candidate):\n    assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n"}
{"task_id": "MbppEval/262", "prompt": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n\n# check the correctness of split_two_parts\nassert ", "entry_point": "split_two_parts", "canonical_solution": "    return list1[:L], list1[L:]\n", "test": "def check(candidate):\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n"}
{"task_id": "MbppEval/264", "prompt": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n\n# check the correctness of dog_age\nassert ", "entry_point": "dog_age", "canonical_solution": " if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age\n", "test": "def check(candidate):\n    assert dog_age(12)==61\n    assert dog_age(15)==73\n    assert dog_age(24)==109\n"}
{"task_id": "MbppEval/265", "prompt": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n\n# check the correctness of list_split\nassert ", "entry_point": "list_split", "canonical_solution": "    return [S[i::step] for i in range(step)]\n", "test": "def check(candidate):\n    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\n    assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n"}
{"task_id": "MbppEval/266", "prompt": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n\n# check the correctness of lateralsurface_cube\nassert ", "entry_point": "lateralsurface_cube", "canonical_solution": "  LSA = 4 * (l * l)\n  return LSA\n", "test": "def check(candidate):\n    assert lateralsurface_cube(5)==100\n    assert lateralsurface_cube(9)==324\n    assert lateralsurface_cube(10)==400\n"}
{"task_id": "MbppEval/267", "prompt": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    pass\n\n# check the correctness of square_Sum\nassert ", "entry_point": "square_Sum", "canonical_solution": "    return int(n*(4*n*n-1)/3) \n", "test": "def check(candidate):\n    assert square_Sum(2) == 10\n    assert square_Sum(3) == 35\n    assert square_Sum(4) == 84\n"}
{"task_id": "MbppEval/268", "prompt": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    pass\n\n# check the correctness of find_star_num\nassert ", "entry_point": "find_star_num", "canonical_solution": "\treturn (6 * n * (n - 1) + 1) \n", "test": "def check(candidate):\n    assert find_star_num(3) == 37\n    assert find_star_num(4) == 73\n    assert find_star_num(5) == 121\n"}
{"task_id": "MbppEval/269", "prompt": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    pass\n\n# check the correctness of ascii_value\nassert ", "entry_point": "ascii_value", "canonical_solution": "  ch=k\n  return ord(ch)\n", "test": "def check(candidate):\n    assert ascii_value('A')==65\n    assert ascii_value('R')==82\n    assert ascii_value('S')==83\n"}
{"task_id": "MbppEval/270", "prompt": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    pass\n\n# check the correctness of sum_even_and_even_index\nassert ", "entry_point": "sum_even_and_even_index", "canonical_solution": "    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum\n", "test": "def check(candidate):\n    assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n    assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\n    assert sum_even_and_even_index([5, 6, 12, 1]) == 12\n"}
{"task_id": "MbppEval/271", "prompt": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n\n# check the correctness of even_Power_Sum\nassert ", "entry_point": "even_Power_Sum", "canonical_solution": "    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; \n", "test": "def check(candidate):\n    assert even_Power_Sum(2) == 1056\n    assert even_Power_Sum(3) == 8832\n    assert even_Power_Sum(1) == 32\n"}
{"task_id": "MbppEval/272", "prompt": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    pass\n\n# check the correctness of rear_extract\nassert ", "entry_point": "rear_extract", "canonical_solution": "  res = [lis[-1] for lis in test_list]\n  return (res) \n", "test": "def check(candidate):\n    assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n"}
{"task_id": "MbppEval/273", "prompt": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n\n# check the correctness of substract_elements\nassert ", "entry_point": "substract_elements", "canonical_solution": "  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \n", "test": "def check(candidate):\n    assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n"}
{"task_id": "MbppEval/274", "prompt": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    pass\n\n# check the correctness of even_binomial_Coeff_Sum\nassert ", "entry_point": "even_binomial_Coeff_Sum", "canonical_solution": "    return (1 << (n - 1)) \n", "test": "def check(candidate):\n    assert even_binomial_Coeff_Sum(4) == 8\n    assert even_binomial_Coeff_Sum(6) == 32\n    assert even_binomial_Coeff_Sum(2) == 2\n"}
{"task_id": "MbppEval/276", "prompt": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pass\n\n# check the correctness of volume_cylinder\nassert ", "entry_point": "volume_cylinder", "canonical_solution": "  volume=3.1415*r*r*h\n  return volume\n", "test": "def check(candidate):\n    assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\n    assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)\n"}
{"task_id": "MbppEval/277", "prompt": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    pass\n\n# check the correctness of dict_filter\nassert ", "entry_point": "dict_filter", "canonical_solution": " result = {key:value for (key, value) in dict.items() if value >=n}\n return result\n", "test": "def check(candidate):\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n"}
{"task_id": "MbppEval/278", "prompt": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n\n# check the correctness of count_first_elements\nassert ", "entry_point": "count_first_elements", "canonical_solution": "  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) \n", "test": "def check(candidate):\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n    assert count_first_elements((2, 9, (5, 7), 11) ) == 2\n    assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4\n"}
{"task_id": "MbppEval/279", "prompt": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass\n\n# check the correctness of is_num_decagonal\nassert ", "entry_point": "is_num_decagonal", "canonical_solution": "\treturn 4 * n * n - 3 * n \n", "test": "def check(candidate):\n    assert is_num_decagonal(3) == 27\n    assert is_num_decagonal(7) == 175\n    assert is_num_decagonal(10) == 370\n"}
{"task_id": "MbppEval/280", "prompt": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n\n# check the correctness of sequential_search\nassert ", "entry_point": "sequential_search", "canonical_solution": "    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\n", "test": "def check(candidate):\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n"}
{"task_id": "MbppEval/281", "prompt": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    pass\n\n# check the correctness of all_unique\nassert ", "entry_point": "all_unique", "canonical_solution": "    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n", "test": "def check(candidate):\n    assert all_unique([1,2,3]) == True\n    assert all_unique([1,2,1,2]) == False\n    assert all_unique([1,2,3,4,5]) == True\n"}
{"task_id": "MbppEval/282", "prompt": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n\n# check the correctness of sub_list\nassert ", "entry_point": "sub_list", "canonical_solution": "  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\n", "test": "def check(candidate):\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert sub_list([1,2],[3,4])==[-2,-2]\n    assert sub_list([90,120],[50,70])==[40,50]\n"}
{"task_id": "MbppEval/283", "prompt": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n\n# check the correctness of validate\nassert ", "entry_point": "validate", "canonical_solution": "    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True\n", "test": "def check(candidate):\n    assert validate(1234) == True\n    assert validate(51241) == False\n    assert validate(321) == True\n"}
{"task_id": "MbppEval/284", "prompt": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n\n# check the correctness of check_element\nassert ", "entry_point": "check_element", "canonical_solution": "  check_element=all(v== element for v in list)\n  return check_element\n", "test": "def check(candidate):\n    assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    assert check_element([1,2,3,4],7)==False\n    assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\n"}
{"task_id": "MbppEval/285", "prompt": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pass\n\n# check the correctness of text_match_two_three\nassert ", "entry_point": "text_match_two_three", "canonical_solution": "        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n", "test": "def check(candidate):\n    assert text_match_two_three(\"ac\")==(False)\n    assert text_match_two_three(\"dc\")==(False)\n    assert text_match_two_three(\"abbbba\")==(True)\n"}
{"task_id": "MbppEval/286", "prompt": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n\n# check the correctness of max_sub_array_sum_repeated\nassert ", "entry_point": "max_sub_array_sum_repeated", "canonical_solution": "\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far\n", "test": "def check(candidate):\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n    assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\n    assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1\n"}
{"task_id": "MbppEval/287", "prompt": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    pass\n\n# check the correctness of square_Sum\nassert ", "entry_point": "square_Sum", "canonical_solution": "    return int(2*n*(n+1)*(2*n+1)/3)\n", "test": "def check(candidate):\n    assert square_Sum(2) == 20\n    assert square_Sum(3) == 56\n    assert square_Sum(4) == 120\n"}
{"task_id": "MbppEval/290", "prompt": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    pass\n\n# check the correctness of max_length\nassert ", "entry_point": "max_length", "canonical_solution": "    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\n", "test": "def check(candidate):\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert max_length([[5], [15,20,25]])==(3, [15,20,25])\n"}
{"task_id": "MbppEval/291", "prompt": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass\n\n# check the correctness of count_no_of_ways\nassert ", "entry_point": "count_no_of_ways", "canonical_solution": "\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]\n", "test": "def check(candidate):\n    assert count_no_of_ways(2, 4) == 16\n    assert count_no_of_ways(3, 2) == 6\n    assert count_no_of_ways(4, 4) == 228\n"}
{"task_id": "MbppEval/292", "prompt": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    pass\n\n# check the correctness of find\nassert ", "entry_point": "find", "canonical_solution": "    q = n//m \n    return (q)\n", "test": "def check(candidate):\n    assert find(10,3) == 3\n    assert find(4,2) == 2\n    assert find(20,5) == 4\n"}
{"task_id": "MbppEval/293", "prompt": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    pass\n\n# check the correctness of otherside_rightangle\nassert ", "entry_point": "otherside_rightangle", "canonical_solution": "  s=math.sqrt((w*w)+(h*h))\n  return s\n", "test": "def check(candidate):\n    assert otherside_rightangle(7,8)==10.63014581273465\n    assert otherside_rightangle(3,4)==5\n    assert otherside_rightangle(7,15)==16.55294535724685\n"}
{"task_id": "MbppEval/294", "prompt": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n\n# check the correctness of max_val\nassert ", "entry_point": "max_val", "canonical_solution": "     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\n", "test": "def check(candidate):\n    assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n    assert max_val(['Python', 15, 20, 25])==25\n    assert max_val(['Python', 30, 20, 40, 50, 'version'])==50\n"}
{"task_id": "MbppEval/295", "prompt": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n\n# check the correctness of sum_div\nassert ", "entry_point": "sum_div", "canonical_solution": "    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\n", "test": "def check(candidate):\n    assert sum_div(8)==7\n    assert sum_div(12)==16\n    assert sum_div(7)==1\n"}
{"task_id": "MbppEval/296", "prompt": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n\n# check the correctness of get_Inv_Count\nassert ", "entry_point": "get_Inv_Count", "canonical_solution": "    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n", "test": "def check(candidate):\n    assert get_Inv_Count([1,20,6,4,5]) == 5\n    assert get_Inv_Count([1,2,1]) == 1\n    assert get_Inv_Count([1,2,5,6,1]) == 3\n"}
{"task_id": "MbppEval/297", "prompt": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n\n# check the correctness of flatten_list\nassert ", "entry_point": "flatten_list", "canonical_solution": "    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list \n", "test": "def check(candidate):\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n"}
{"task_id": "MbppEval/299", "prompt": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass\n\n# check the correctness of max_aggregate\nassert ", "entry_point": "max_aggregate", "canonical_solution": "    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n", "test": "def check(candidate):\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n"}
{"task_id": "MbppEval/300", "prompt": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n\n# check the correctness of count_binary_seq\nassert ", "entry_point": "count_binary_seq", "canonical_solution": "\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \n", "test": "def check(candidate):\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n    assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\n    assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)\n"}
{"task_id": "MbppEval/301", "prompt": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n\n# check the correctness of dict_depth\nassert ", "entry_point": "dict_depth", "canonical_solution": "    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n", "test": "def check(candidate):\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert dict_depth({'a':1, 'b': {'c':'python'}})==2\n    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n"}
{"task_id": "MbppEval/304", "prompt": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    pass\n\n# check the correctness of find_Element\nassert ", "entry_point": "find_Element", "canonical_solution": "    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n", "test": "def check(candidate):\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n"}
{"task_id": "MbppEval/305", "prompt": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n\n# check the correctness of start_withp\nassert ", "entry_point": "start_withp", "canonical_solution": " for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n", "test": "def check(candidate):\n    assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n    assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n"}
{"task_id": "MbppEval/306", "prompt": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    pass\n\n# check the correctness of max_sum_increasing_subseq\nassert ", "entry_point": "max_sum_increasing_subseq", "canonical_solution": "\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\n", "test": "def check(candidate):\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n"}
{"task_id": "MbppEval/307", "prompt": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    pass\n\n# check the correctness of colon_tuplex\nassert ", "entry_point": "colon_tuplex", "canonical_solution": "  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\n", "test": "def check(candidate):\n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n"}
{"task_id": "MbppEval/308", "prompt": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n\n# check the correctness of large_product\nassert ", "entry_point": "large_product", "canonical_solution": "    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n", "test": "def check(candidate):\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n"}
{"task_id": "MbppEval/309", "prompt": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    pass\n\n# check the correctness of maximum\nassert ", "entry_point": "maximum", "canonical_solution": "    if a >= b: \n        return a \n    else: \n        return b \n", "test": "def check(candidate):\n    assert maximum(5,10) == 10\n    assert maximum(-1,-2) == -1\n    assert maximum(9,7) == 9\n"}
{"task_id": "MbppEval/310", "prompt": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    pass\n\n# check the correctness of string_to_tuple\nassert ", "entry_point": "string_to_tuple", "canonical_solution": "    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n", "test": "def check(candidate):\n    assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n"}
{"task_id": "MbppEval/311", "prompt": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n\n# check the correctness of set_left_most_unset_bit\nassert ", "entry_point": "set_left_most_unset_bit", "canonical_solution": "    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) \n", "test": "def check(candidate):\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(12) == 14\n    assert set_left_most_unset_bit(15) == 15\n"}
{"task_id": "MbppEval/312", "prompt": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pass\n\n# check the correctness of volume_cone\nassert ", "entry_point": "volume_cone", "canonical_solution": "  volume = (1.0/3) * math.pi * r * r * h\n  return volume\n", "test": "def check(candidate):\n    assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n    assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\n    assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)\n"}
{"task_id": "MbppEval/388", "prompt": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pass\n\n# check the correctness of highest_Power_of_2\nassert ", "entry_point": "highest_Power_of_2", "canonical_solution": "    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res \n", "test": "def check(candidate):\n    assert highest_Power_of_2(10) == 8\n    assert highest_Power_of_2(19) == 16\n    assert highest_Power_of_2(32) == 32\n"}
{"task_id": "MbppEval/389", "prompt": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n\n# check the correctness of find_lucas\nassert ", "entry_point": "find_lucas", "canonical_solution": "\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \n", "test": "def check(candidate):\n    assert find_lucas(9) == 76\n    assert find_lucas(4) == 7\n    assert find_lucas(3) == 4\n"}
{"task_id": "MbppEval/390", "prompt": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n\n# check the correctness of add_string\nassert ", "entry_point": "add_string", "canonical_solution": " add_string=[string.format(i) for i in  list_]\n return add_string\n", "test": "def check(candidate):\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n"}
{"task_id": "MbppEval/391", "prompt": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n\n# check the correctness of convert_list_dictionary\nassert ", "entry_point": "convert_list_dictionary", "canonical_solution": "     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n", "test": "def check(candidate):\n    assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n"}
{"task_id": "MbppEval/392", "prompt": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n\n# check the correctness of get_max_sum \nassert ", "entry_point": "get_max_sum ", "canonical_solution": "\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]\n", "test": "def check(candidate):\n    assert get_max_sum(60) == 106\n    assert get_max_sum(10) == 12\n    assert get_max_sum(2) == 2\n"}
{"task_id": "MbppEval/393", "prompt": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n\n# check the correctness of max_length_list\nassert ", "entry_point": "max_length_list", "canonical_solution": "    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\n", "test": "def check(candidate):\n    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n"}
{"task_id": "MbppEval/394", "prompt": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n\n# check the correctness of check_distinct\nassert ", "entry_point": "check_distinct", "canonical_solution": "  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res \n", "test": "def check(candidate):\n    assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n    assert check_distinct((1, 4, 5, 6)) == True\n    assert check_distinct((2, 3, 4, 5, 6)) == True\n"}
{"task_id": "MbppEval/395", "prompt": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    pass\n\n# check the correctness of first_non_repeating_character\nassert ", "entry_point": "first_non_repeating_character", "canonical_solution": "  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None\n", "test": "def check(candidate):\n    assert first_non_repeating_character(\"abcabc\") == None\n    assert first_non_repeating_character(\"abc\") == \"a\"\n    assert first_non_repeating_character(\"ababc\") == \"c\"\n"}
{"task_id": "MbppEval/396", "prompt": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pass\n\n# check the correctness of check_char\nassert ", "entry_point": "check_char", "canonical_solution": "\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" \n", "test": "def check(candidate):\n    assert check_char(\"abba\") == \"Valid\"\n    assert check_char(\"a\") == \"Valid\"\n    assert check_char(\"abcd\") == \"Invalid\"\n"}
{"task_id": "MbppEval/397", "prompt": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n\n# check the correctness of median_numbers\nassert ", "entry_point": "median_numbers", "canonical_solution": " if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median\n", "test": "def check(candidate):\n    assert median_numbers(25,55,65)==55.0\n    assert median_numbers(20,10,30)==20.0\n    assert median_numbers(15,45,75)==45.0\n"}
{"task_id": "MbppEval/398", "prompt": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n\n# check the correctness of sum_of_digits\nassert ", "entry_point": "sum_of_digits", "canonical_solution": "    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n", "test": "def check(candidate):\n    assert sum_of_digits([10,2,56])==14\n    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\n    assert sum_of_digits([10,20,-4,5,-70])==19\n"}
{"task_id": "MbppEval/399", "prompt": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n\n# check the correctness of bitwise_xor\nassert ", "entry_point": "bitwise_xor", "canonical_solution": "  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \n", "test": "def check(candidate):\n    assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n"}
{"task_id": "MbppEval/400", "prompt": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n\n# check the correctness of extract_freq\nassert ", "entry_point": "extract_freq", "canonical_solution": "  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)\n", "test": "def check(candidate):\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n    assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n"}
{"task_id": "MbppEval/401", "prompt": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n\n# check the correctness of add_nested_tuples\nassert ", "entry_point": "add_nested_tuples", "canonical_solution": "  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \n", "test": "def check(candidate):\n    assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n"}
{"task_id": "MbppEval/404", "prompt": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    pass\n\n# check the correctness of minimum\nassert ", "entry_point": "minimum", "canonical_solution": "    if a <= b: \n        return a \n    else: \n        return b \n", "test": "def check(candidate):\n    assert minimum(1,2) == 1\n    assert minimum(-5,-4) == -5\n    assert minimum(0,0) == 0\n"}
{"task_id": "MbppEval/405", "prompt": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    pass\n\n# check the correctness of check_tuplex\nassert ", "entry_point": "check_tuplex", "canonical_solution": "  if tuple1 in tuplex:\n    return True\n  else:\n     return False\n", "test": "def check(candidate):\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n"}
{"task_id": "MbppEval/406", "prompt": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    pass\n\n# check the correctness of find_Parity\nassert ", "entry_point": "find_Parity", "canonical_solution": "    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\n", "test": "def check(candidate):\n    assert find_Parity(12) == False\n    assert find_Parity(7) == True\n    assert find_Parity(10) == False\n"}
{"task_id": "MbppEval/407", "prompt": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n\n# check the correctness of rearrange_bigger\nassert ", "entry_point": "rearrange_bigger", "canonical_solution": "    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\n", "test": "def check(candidate):\n    assert rearrange_bigger(12)==21\n    assert rearrange_bigger(10)==False\n    assert rearrange_bigger(102)==120\n"}
{"task_id": "MbppEval/408", "prompt": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pass\n\n# check the correctness of k_smallest_pairs\nassert ", "entry_point": "k_smallest_pairs", "canonical_solution": "   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs\n", "test": "def check(candidate):\n    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n"}
{"task_id": "MbppEval/409", "prompt": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pass\n\n# check the correctness of min_product_tuple\nassert ", "entry_point": "min_product_tuple", "canonical_solution": "    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\n", "test": "def check(candidate):\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(10,20), (15,2), (5,10)] )==30\n    assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100\n"}
{"task_id": "MbppEval/410", "prompt": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n\n# check the correctness of min_val\nassert ", "entry_point": "min_val", "canonical_solution": "     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\n", "test": "def check(candidate):\n    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n    assert min_val(['Python', 15, 20, 25])==15\n    assert min_val(['Python', 30, 20, 40, 50, 'version'])==20\n"}
{"task_id": "MbppEval/411", "prompt": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pass\n\n# check the correctness of snake_to_camel\nassert ", "entry_point": "snake_to_camel", "canonical_solution": "  return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "test": "def check(candidate):\n    assert snake_to_camel('android_tv') == 'AndroidTv'\n    assert snake_to_camel('google_pixel') == 'GooglePixel'\n    assert snake_to_camel('apple_watch') == 'AppleWatch'\n"}
{"task_id": "MbppEval/412", "prompt": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    pass\n\n# check the correctness of remove_odd\nassert ", "entry_point": "remove_odd", "canonical_solution": "    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\n", "test": "def check(candidate):\n    assert remove_odd([1,2,3]) == [2]\n    assert remove_odd([2,4,6]) == [2,4,6]\n    assert remove_odd([10,20,3]) == [10,20]\n"}
{"task_id": "MbppEval/413", "prompt": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    pass\n\n# check the correctness of extract_nth_element\nassert ", "entry_point": "extract_nth_element", "canonical_solution": "    result = [x[n] for x in list1]\n    return result\n", "test": "def check(candidate):\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n"}
{"task_id": "MbppEval/414", "prompt": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    pass\n\n# check the correctness of overlapping\nassert ", "entry_point": "overlapping", "canonical_solution": "    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False\n", "test": "def check(candidate):\n    assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n    assert overlapping([1,2,3],[4,5,6]) == False\n    assert overlapping([1,4,5],[1,4,5]) == True\n"}
{"task_id": "MbppEval/415", "prompt": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    pass\n\n# check the correctness of max_Product\nassert ", "entry_point": "max_Product", "canonical_solution": "    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    \n", "test": "def check(candidate):\n    assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n    assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert max_Product([1,2,3]) == (2,3)\n"}
{"task_id": "MbppEval/417", "prompt": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    pass\n\n# check the correctness of group_tuples\nassert ", "entry_point": "group_tuples", "canonical_solution": "\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \n", "test": "def check(candidate):\n    assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n"}
{"task_id": "MbppEval/418", "prompt": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    pass\n\n# check the correctness of Find_Max\nassert ", "entry_point": "Find_Max", "canonical_solution": "    maxList = max((x) for x in lst) \n    return maxList\n", "test": "def check(candidate):\n    assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n"}
{"task_id": "MbppEval/419", "prompt": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    pass\n\n# check the correctness of round_and_sum\nassert ", "entry_point": "round_and_sum", "canonical_solution": "  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum\n", "test": "def check(candidate):\n    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert round_and_sum([5,2,9,24.3,29])==345\n    assert round_and_sum([25.0,56.7,89.2])==513\n"}
{"task_id": "MbppEval/420", "prompt": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    pass\n\n# check the correctness of cube_Sum\nassert ", "entry_point": "cube_Sum", "canonical_solution": "    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n", "test": "def check(candidate):\n    assert cube_Sum(2) == 72\n    assert cube_Sum(3) == 288\n    assert cube_Sum(4) == 800\n"}
{"task_id": "MbppEval/421", "prompt": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n\n# check the correctness of concatenate_tuple\nassert ", "entry_point": "concatenate_tuple", "canonical_solution": "    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n", "test": "def check(candidate):\n    assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n"}
{"task_id": "MbppEval/422", "prompt": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    pass\n\n# check the correctness of find_Average_Of_Cube\nassert ", "entry_point": "find_Average_Of_Cube", "canonical_solution": "    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \n", "test": "def check(candidate):\n    assert find_Average_Of_Cube(2) == 4.5\n    assert find_Average_Of_Cube(3) == 12\n    assert find_Average_Of_Cube(1) == 1\n"}
{"task_id": "MbppEval/424", "prompt": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n\n# check the correctness of extract_rear\nassert ", "entry_point": "extract_rear", "canonical_solution": "  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) \n", "test": "def check(candidate):\n    assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n"}
{"task_id": "MbppEval/425", "prompt": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    pass\n\n# check the correctness of count_element_in_list\nassert ", "entry_point": "count_element_in_list", "canonical_solution": "    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr\n", "test": "def check(candidate):\n    assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n"}
{"task_id": "MbppEval/426", "prompt": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    pass\n\n# check the correctness of filter_oddnumbers\nassert ", "entry_point": "filter_oddnumbers", "canonical_solution": " odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums\n", "test": "def check(candidate):\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\n    assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]\n"}
{"task_id": "MbppEval/427", "prompt": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pass\n\n# check the correctness of change_date_format\nassert ", "entry_point": "change_date_format", "canonical_solution": "        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n", "test": "def check(candidate):\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'\n    assert change_date_format(\"2020-11-13\") == '13-11-2020'\n    assert change_date_format(\"2021-04-26\") == '26-04-2021'\n"}
{"task_id": "MbppEval/428", "prompt": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n\n# check the correctness of shell_sort\nassert ", "entry_point": "shell_sort", "canonical_solution": "    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list\n", "test": "def check(candidate):\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n"}
{"task_id": "MbppEval/429", "prompt": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n\n# check the correctness of and_tuples\nassert ", "entry_point": "and_tuples", "canonical_solution": "  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \n", "test": "def check(candidate):\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n"}
{"task_id": "MbppEval/430", "prompt": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n\n# check the correctness of parabola_directrix\nassert ", "entry_point": "parabola_directrix", "canonical_solution": "  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix\n", "test": "def check(candidate):\n    assert parabola_directrix(5,3,2)==-198\n    assert parabola_directrix(9,8,4)==-2336\n    assert parabola_directrix(2,4,6)==-130\n"}
{"task_id": "MbppEval/431", "prompt": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    pass\n\n# check the correctness of common_element\nassert ", "entry_point": "common_element", "canonical_solution": "     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result\n", "test": "def check(candidate):\n    assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n    assert common_element([1,2,3,4,5], [6,7,8,9])==None\n    assert common_element(['a','b','c'], ['d','b','e'])==True\n"}
{"task_id": "MbppEval/432", "prompt": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\n\n# check the correctness of median_trapezium\nassert ", "entry_point": "median_trapezium", "canonical_solution": " median = 0.5 * (base1+ base2)\n return median\n", "test": "def check(candidate):\n    assert median_trapezium(15,25,35)==20\n    assert median_trapezium(10,20,30)==15\n    assert median_trapezium(6,9,4)==7.5\n"}
{"task_id": "MbppEval/433", "prompt": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    pass\n\n# check the correctness of check_greater\nassert ", "entry_point": "check_greater", "canonical_solution": "  arr.sort()\n  return number > arr[-1]\n", "test": "def check(candidate):\n    assert check_greater([1, 2, 3, 4, 5], 4) == False\n    assert check_greater([2, 3, 4, 5, 6], 8) == True\n    assert check_greater([9, 7, 4, 8, 6, 1], 11) == True\n"}
{"task_id": "MbppEval/434", "prompt": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n\n# check the correctness of text_match_one\nassert ", "entry_point": "text_match_one", "canonical_solution": "        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n\n", "test": "def check(candidate):\n    assert text_match_one(\"ac\")==False\n    assert text_match_one(\"dc\")==False\n    assert text_match_one(\"abba\")==True\n"}
{"task_id": "MbppEval/435", "prompt": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n\n# check the correctness of last_Digit\nassert ", "entry_point": "last_Digit", "canonical_solution": "    return (n % 10) \n", "test": "def check(candidate):\n    assert last_Digit(123) == 3\n    assert last_Digit(25) == 5\n    assert last_Digit(30) == 0\n"}
{"task_id": "MbppEval/436", "prompt": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    pass\n\n# check the correctness of neg_nos\nassert ", "entry_point": "neg_nos", "canonical_solution": "  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out \n", "test": "def check(candidate):\n    assert neg_nos([-1,4,5,-6]) == [-1,-6]\n    assert neg_nos([-1,-2,3,4]) == [-1,-2]\n    assert neg_nos([-7,-6,8,9]) == [-7,-6]\n"}
{"task_id": "MbppEval/437", "prompt": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    pass\n\n# check the correctness of remove_odd\nassert ", "entry_point": "remove_odd", "canonical_solution": " str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2\n", "test": "def check(candidate):\n    assert remove_odd(\"python\")==(\"yhn\")\n    assert remove_odd(\"program\")==(\"rga\")\n    assert remove_odd(\"language\")==(\"agae\")\n"}
{"task_id": "MbppEval/438", "prompt": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n\n# check the correctness of count_bidirectional\nassert ", "entry_point": "count_bidirectional", "canonical_solution": "  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res\n", "test": "def check(candidate):\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n    assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4\n"}
{"task_id": "MbppEval/439", "prompt": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    pass\n\n# check the correctness of multiple_to_single\nassert ", "entry_point": "multiple_to_single", "canonical_solution": "  x = int(\"\".join(map(str, L)))\n  return x\n", "test": "def check(candidate):\n    assert multiple_to_single([11, 33, 50])==113350\n    assert multiple_to_single([-1,2,3,4,5,6])==-123456\n    assert multiple_to_single([10,15,20,25])==10152025\n"}
{"task_id": "MbppEval/440", "prompt": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pass\n\n# check the correctness of find_adverb_position\nassert ", "entry_point": "find_adverb_position", "canonical_solution": " for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))\n", "test": "def check(candidate):\n    assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n"}
{"task_id": "MbppEval/441", "prompt": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    pass\n\n# check the correctness of surfacearea_cube\nassert ", "entry_point": "surfacearea_cube", "canonical_solution": "  surfacearea= 6*l*l\n  return surfacearea\n", "test": "def check(candidate):\n    assert surfacearea_cube(5)==150\n    assert surfacearea_cube(3)==54\n    assert surfacearea_cube(10)==600\n"}
{"task_id": "MbppEval/442", "prompt": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pass\n\n# check the correctness of positive_count\nassert ", "entry_point": "positive_count", "canonical_solution": "    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)\n", "test": "def check(candidate):\n    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n"}
{"task_id": "MbppEval/443", "prompt": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    pass\n\n# check the correctness of largest_neg\nassert ", "entry_point": "largest_neg", "canonical_solution": "    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\n", "test": "def check(candidate):\n    assert largest_neg([1,2,3,-4,-6]) == -6\n    assert largest_neg([1,2,3,-8,-9]) == -9\n    assert largest_neg([1,2,3,4,-1]) == -1\n"}
{"task_id": "MbppEval/444", "prompt": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    pass\n\n# check the correctness of trim_tuple\nassert ", "entry_point": "trim_tuple", "canonical_solution": "  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) \n", "test": "def check(candidate):\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n"}
{"task_id": "MbppEval/445", "prompt": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n\n# check the correctness of index_multiplication\nassert ", "entry_point": "index_multiplication", "canonical_solution": "  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) \n", "test": "def check(candidate):\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n"}
{"task_id": "MbppEval/446", "prompt": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    pass\n\n# check the correctness of count_Occurrence\nassert ", "entry_point": "count_Occurrence", "canonical_solution": "    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  \n", "test": "def check(candidate):\n    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2\n"}
{"task_id": "MbppEval/447", "prompt": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    pass\n\n# check the correctness of cube_nums\nassert ", "entry_point": "cube_nums", "canonical_solution": " cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums\n", "test": "def check(candidate):\n    assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert cube_nums([10,20,30])==([1000, 8000, 27000])\n    assert cube_nums([12,15])==([1728, 3375])\n"}
{"task_id": "MbppEval/448", "prompt": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    pass\n\n# check the correctness of cal_sum\nassert ", "entry_point": "cal_sum", "canonical_solution": "\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum\n", "test": "def check(candidate):\n    assert cal_sum(9) == 49\n    assert cal_sum(10) == 66\n    assert cal_sum(11) == 88\n"}
{"task_id": "MbppEval/450", "prompt": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n\n# check the correctness of extract_string\nassert ", "entry_point": "extract_string", "canonical_solution": "    result = [e for e in str if len(e) == l] \n    return result\n", "test": "def check(candidate):\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n"}
{"task_id": "MbppEval/451", "prompt": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pass\n\n# check the correctness of remove_whitespaces\nassert ", "entry_point": "remove_whitespaces", "canonical_solution": "  return (re.sub(r'\\s+', '',text1))\n", "test": "def check(candidate):\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\n    assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\n"}
{"task_id": "MbppEval/452", "prompt": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    pass\n\n# check the correctness of loss_amount\nassert ", "entry_point": "loss_amount", "canonical_solution": "  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0\n", "test": "def check(candidate):\n    assert loss_amount(1500,1200)==0\n    assert loss_amount(100,200)==100\n    assert loss_amount(2000,5000)==3000\n"}
{"task_id": "MbppEval/453", "prompt": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    pass\n\n# check the correctness of sumofFactors\nassert ", "entry_point": "sumofFactors", "canonical_solution": "    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\n", "test": "def check(candidate):\n    assert sumofFactors(18) == 26\n    assert sumofFactors(30) == 48\n    assert sumofFactors(6) == 8\n"}
{"task_id": "MbppEval/454", "prompt": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pass\n\n# check the correctness of text_match_wordz\nassert ", "entry_point": "text_match_wordz", "canonical_solution": "        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n", "test": "def check(candidate):\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"xyz.\")==True\n    assert text_match_wordz(\"  lang  .\")==False\n"}
{"task_id": "MbppEval/455", "prompt": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    pass\n\n# check the correctness of check_monthnumb_number\nassert ", "entry_point": "check_monthnumb_number", "canonical_solution": "  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False\n", "test": "def check(candidate):\n    assert check_monthnumb_number(5)==True\n    assert check_monthnumb_number(2)==False\n    assert check_monthnumb_number(6)==False\n"}
{"task_id": "MbppEval/456", "prompt": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n\n# check the correctness of reverse_string_list\nassert ", "entry_point": "reverse_string_list", "canonical_solution": "    result = [x[::-1] for x in stringlist]\n    return result\n", "test": "def check(candidate):\n    assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']\n"}
{"task_id": "MbppEval/457", "prompt": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    pass\n\n# check the correctness of Find_Min\nassert ", "entry_point": "Find_Min", "canonical_solution": "    return min(lst, key=len) \n", "test": "def check(candidate):\n    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\n"}
{"task_id": "MbppEval/458", "prompt": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    pass\n\n# check the correctness of rectangle_area\nassert ", "entry_point": "rectangle_area", "canonical_solution": "  area=l*b\n  return area\n", "test": "def check(candidate):\n    assert rectangle_area(10,20)==200\n    assert rectangle_area(10,5)==50\n    assert rectangle_area(4,2)==8\n"}
{"task_id": "MbppEval/459", "prompt": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pass\n\n# check the correctness of remove_uppercase\nassert ", "entry_point": "remove_uppercase", "canonical_solution": "  return re.sub('[A-Z]', '', str1)\n", "test": "def check(candidate):\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n"}
{"task_id": "MbppEval/460", "prompt": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    pass\n\n# check the correctness of Extract\nassert ", "entry_point": "Extract", "canonical_solution": "    return [item[0] for item in lst] \n", "test": "def check(candidate):\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert Extract([[1,2,3],[4, 5]]) == [1,4]\n    assert Extract([[9,8,1],[1,2]]) == [9,1]\n"}
{"task_id": "MbppEval/461", "prompt": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    pass\n\n# check the correctness of upper_ctr\nassert ", "entry_point": "upper_ctr", "canonical_solution": "    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr\n", "test": "def check(candidate):\n    assert upper_ctr('PYthon') == 1\n    assert upper_ctr('BigData') == 1\n    assert upper_ctr('program') == 0\n"}
{"task_id": "MbppEval/462", "prompt": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n\n# check the correctness of combinations_list\nassert ", "entry_point": "combinations_list", "canonical_solution": "    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\n", "test": "def check(candidate):\n    assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n"}
{"task_id": "MbppEval/463", "prompt": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n\n# check the correctness of max_subarray_product\nassert ", "entry_point": "max_subarray_product", "canonical_solution": "\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far\n", "test": "def check(candidate):\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert max_subarray_product([6, -3, -10, 0, 2]) == 180\n    assert max_subarray_product([-2, -40, 0, -2, -3]) == 80\n"}
{"task_id": "MbppEval/464", "prompt": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    pass\n\n# check the correctness of check_value\nassert ", "entry_point": "check_value", "canonical_solution": "    result = all(x == n for x in dict.values()) \n    return result\n", "test": "def check(candidate):\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n"}
{"task_id": "MbppEval/465", "prompt": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    pass\n\n# check the correctness of drop_empty\nassert ", "entry_point": "drop_empty", "canonical_solution": "  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\n", "test": "def check(candidate):\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n"}
{"task_id": "MbppEval/468", "prompt": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    pass\n\n# check the correctness of max_product\nassert ", "entry_point": "max_product", "canonical_solution": "  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)\n", "test": "def check(candidate):\n    assert max_product([3, 100, 4, 5, 150, 6]) == 3000\n    assert max_product([4, 42, 55, 68, 80]) == 50265600\n    assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n"}
{"task_id": "MbppEval/470", "prompt": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n\n# check the correctness of add_pairwise\nassert ", "entry_point": "add_pairwise", "canonical_solution": "  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \n", "test": "def check(candidate):\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n"}
{"task_id": "MbppEval/471", "prompt": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass\n\n# check the correctness of find_remainder\nassert ", "entry_point": "find_remainder", "canonical_solution": "    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \n", "test": "def check(candidate):\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n    assert find_remainder([1,1,1],1) == 0\n    assert find_remainder([1,2,1],2) == 0\n"}
{"task_id": "MbppEval/472", "prompt": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n\n# check the correctness of check_Consecutive\nassert ", "entry_point": "check_Consecutive", "canonical_solution": "    return sorted(l) == list(range(min(l),max(l)+1)) \n", "test": "def check(candidate):\n    assert check_Consecutive([1,2,3,4,5]) == True\n    assert check_Consecutive([1,2,3,5,6]) == False\n    assert check_Consecutive([1,2,1]) == False\n"}
{"task_id": "MbppEval/473", "prompt": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n\n# check the correctness of tuple_intersection\nassert ", "entry_point": "tuple_intersection", "canonical_solution": "  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)\n", "test": "def check(candidate):\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n"}
{"task_id": "MbppEval/474", "prompt": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    pass\n\n# check the correctness of replace_char\nassert ", "entry_point": "replace_char", "canonical_solution": " str2 = str1.replace(ch, newch)\n return str2\n", "test": "def check(candidate):\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"character\",'c','a')==(\"aharaater\")\n    assert replace_char(\"python\",'l','a')==(\"python\")\n"}
{"task_id": "MbppEval/475", "prompt": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n\n# check the correctness of sort_counter\nassert ", "entry_point": "sort_counter", "canonical_solution": " x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter\n", "test": "def check(candidate):\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n"}
{"task_id": "MbppEval/476", "prompt": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n\n# check the correctness of big_sum\nassert ", "entry_point": "big_sum", "canonical_solution": "      sum= max(nums)+min(nums)\n      return sum\n", "test": "def check(candidate):\n    assert big_sum([1,2,3]) == 4\n    assert big_sum([-1,2,3,4]) == 3\n    assert big_sum([2,3,6]) == 8\n"}
{"task_id": "MbppEval/477", "prompt": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n\n# check the correctness of is_lower\nassert ", "entry_point": "is_lower", "canonical_solution": "  return (string.lower())\n", "test": "def check(candidate):\n    assert is_lower(\"InValid\") == \"invalid\"\n    assert is_lower(\"TruE\") == \"true\"\n    assert is_lower(\"SenTenCE\") == \"sentence\"\n"}
{"task_id": "MbppEval/478", "prompt": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pass\n\n# check the correctness of remove_lowercase\nassert ", "entry_point": "remove_lowercase", "canonical_solution": " return re.sub('[a-z]', '', str1)\n", "test": "def check(candidate):\n    assert remove_lowercase(\"PYTHon\")==('PYTH')\n    assert remove_lowercase(\"FInD\")==('FID')\n    assert remove_lowercase(\"STRinG\")==('STRG')\n"}
{"task_id": "MbppEval/479", "prompt": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    pass\n\n# check the correctness of first_Digit\nassert ", "entry_point": "first_Digit", "canonical_solution": "    while n >= 10:  \n        n = n / 10 \n    return int(n) \n", "test": "def check(candidate):\n    assert first_Digit(123) == 1\n    assert first_Digit(456) == 4\n    assert first_Digit(12) == 1\n"}
{"task_id": "MbppEval/554", "prompt": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    pass\n\n# check the correctness of Split\nassert ", "entry_point": "Split", "canonical_solution": "    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li\n", "test": "def check(candidate):\n    assert Split([1,2,3,4,5,6]) == [1,3,5]\n    assert Split([10,11,12,13]) == [11,13]\n    assert Split([7,8,9,1]) == [7,9,1]\n"}
{"task_id": "MbppEval/555", "prompt": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    pass\n\n# check the correctness of difference\nassert ", "entry_point": "difference", "canonical_solution": "    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \n", "test": "def check(candidate):\n    assert difference(3) == 30\n    assert difference(5) == 210\n    assert difference(2) == 6\n"}
{"task_id": "MbppEval/556", "prompt": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pass\n\n# check the correctness of find_Odd_Pair\nassert ", "entry_point": "find_Odd_Pair", "canonical_solution": "    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \n", "test": "def check(candidate):\n    assert find_Odd_Pair([5,4,7,2,1],5) == 6\n    assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\n    assert find_Odd_Pair([1,2,3],3) == 2\n"}
{"task_id": "MbppEval/557", "prompt": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n\n# check the correctness of toggle_string\nassert ", "entry_point": "toggle_string", "canonical_solution": " string1 = string.swapcase()\n return string1\n", "test": "def check(candidate):\n    assert toggle_string(\"Python\")==(\"pYTHON\")\n    assert toggle_string(\"Pangram\")==(\"pANGRAM\")\n    assert toggle_string(\"LIttLE\")==(\"liTTle\")\n"}
{"task_id": "MbppEval/558", "prompt": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n\n# check the correctness of digit_distance_nums\nassert ", "entry_point": "digit_distance_nums", "canonical_solution": "         return sum(map(int,str(abs(n1-n2))))\n", "test": "def check(candidate):\n    assert digit_distance_nums(1,2) == 1\n    assert digit_distance_nums(23,56) == 6\n    assert digit_distance_nums(123,256) == 7\n"}
{"task_id": "MbppEval/559", "prompt": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n\n# check the correctness of max_sub_array_sum\nassert ", "entry_point": "max_sub_array_sum", "canonical_solution": "  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\n", "test": "def check(candidate):\n    assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n"}
{"task_id": "MbppEval/560", "prompt": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n\n# check the correctness of union_elements\nassert ", "entry_point": "union_elements", "canonical_solution": "  res = tuple(set(test_tup1 + test_tup2))\n  return (res) \n", "test": "def check(candidate):\n    assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n    assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\n    assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n"}
{"task_id": "MbppEval/562", "prompt": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n\n# check the correctness of Find_Max_Length\nassert ", "entry_point": "Find_Max_Length", "canonical_solution": "    maxLength = max(len(x) for x in lst )\n    return maxLength \n", "test": "def check(candidate):\n    assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n    assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\n    assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n"}
{"task_id": "MbppEval/563", "prompt": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pass\n\n# check the correctness of extract_values\nassert ", "entry_point": "extract_values", "canonical_solution": " return (re.findall(r'\"(.*?)\"', text))\n", "test": "def check(candidate):\n    assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n    assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\n    assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n"}
{"task_id": "MbppEval/564", "prompt": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pass\n\n# check the correctness of count_Pairs\nassert ", "entry_point": "count_Pairs", "canonical_solution": "    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \n", "test": "def check(candidate):\n    assert count_Pairs([1,2,1],3) == 2\n    assert count_Pairs([1,1,1,1],4) == 0\n    assert count_Pairs([1,2,3,4,5],5) == 10\n"}
{"task_id": "MbppEval/565", "prompt": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    pass\n\n# check the correctness of split\nassert ", "entry_point": "split", "canonical_solution": "    return [char for char in word] \n", "test": "def check(candidate):\n    assert split('python') == ['p','y','t','h','o','n']\n    assert split('Name') == ['N','a','m','e']\n    assert split('program') == ['p','r','o','g','r','a','m']\n"}
{"task_id": "MbppEval/566", "prompt": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    pass\n\n# check the correctness of sum_digits\nassert ", "entry_point": "sum_digits", "canonical_solution": "  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))\n", "test": "def check(candidate):\n    assert sum_digits(345)==12\n    assert sum_digits(12)==3\n    assert sum_digits(97)==16\n"}
{"task_id": "MbppEval/567", "prompt": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    pass\n\n# check the correctness of issort_list\nassert ", "entry_point": "issort_list", "canonical_solution": "    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result\n", "test": "def check(candidate):\n    assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n    assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False\n"}
{"task_id": "MbppEval/568", "prompt": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n\n# check the correctness of empty_list\nassert ", "entry_point": "empty_list", "canonical_solution": " empty_list = [{} for _ in range(length)]\n return empty_list\n", "test": "def check(candidate):\n    assert empty_list(5)==[{},{},{},{},{}]\n    assert empty_list(6)==[{},{},{},{},{},{}]\n    assert empty_list(7)==[{},{},{},{},{},{},{}]\n"}
{"task_id": "MbppEval/569", "prompt": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n\n# check the correctness of sort_sublists\nassert ", "entry_point": "sort_sublists", "canonical_solution": "    result = list(map(sorted,list1)) \n    return result\n", "test": "def check(candidate):\n    assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n"}
{"task_id": "MbppEval/572", "prompt": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n\n# check the correctness of two_unique_nums\nassert ", "entry_point": "two_unique_nums", "canonical_solution": "  return [i for i in nums if nums.count(i)==1]\n", "test": "def check(candidate):\n    assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n    assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\n    assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n"}
{"task_id": "MbppEval/573", "prompt": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    pass\n\n# check the correctness of unique_product\nassert ", "entry_point": "unique_product", "canonical_solution": "    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\n", "test": "def check(candidate):\n    assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n    assert unique_product([1, 2, 3, 1,]) == 6\n    assert unique_product([7, 8, 9, 0, 1, 1]) == 0\n"}
{"task_id": "MbppEval/574", "prompt": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n\n# check the correctness of surfacearea_cylinder\nassert ", "entry_point": "surfacearea_cylinder", "canonical_solution": "  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea\n", "test": "def check(candidate):\n    assert surfacearea_cylinder(10,5)==942.45\n    assert surfacearea_cylinder(4,5)==226.18800000000002\n    assert surfacearea_cylinder(4,10)==351.848\n"}
{"task_id": "MbppEval/576", "prompt": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass\n\n# check the correctness of is_Sub_Array\nassert ", "entry_point": "is_Sub_Array", "canonical_solution": "    n = len(A)\n    m = len(B)\n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; \n", "test": "def check(candidate):\n    assert is_Sub_Array([1,4,3,5],[1,2]) == False\n    assert is_Sub_Array([1,2,1],[1,2,1]) == True\n    assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False\n"}
{"task_id": "MbppEval/577", "prompt": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    pass\n\n# check the correctness of last_Digit_Factorial\nassert ", "entry_point": "last_Digit_Factorial", "canonical_solution": "    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0\n", "test": "def check(candidate):\n    assert last_Digit_Factorial(4) == 4\n    assert last_Digit_Factorial(21) == 0\n    assert last_Digit_Factorial(30) == 0\n"}
{"task_id": "MbppEval/578", "prompt": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n\n# check the correctness of interleave_lists\nassert ", "entry_point": "interleave_lists", "canonical_solution": "    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\n", "test": "def check(candidate):\n    assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n    assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n"}
{"task_id": "MbppEval/579", "prompt": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    pass\n\n# check the correctness of find_dissimilar\nassert ", "entry_point": "find_dissimilar", "canonical_solution": "  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) \n", "test": "def check(candidate):\n    assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n"}
{"task_id": "MbppEval/580", "prompt": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    pass\n\n# check the correctness of even_ele\nassert ", "entry_point": "even_ele", "canonical_solution": "\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele, even_fnc), ) \n\t\telif even_fnc(ele): \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) \n", "test": "def check(candidate):\n    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n"}
{"task_id": "MbppEval/581", "prompt": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n\n# check the correctness of surface_Area\nassert ", "entry_point": "surface_Area", "canonical_solution": "    return 2 * b * s + pow(b,2) \n", "test": "def check(candidate):\n    assert surface_Area(3,4) == 33\n    assert surface_Area(4,5) == 56\n    assert surface_Area(1,2) == 5\n"}
{"task_id": "MbppEval/582", "prompt": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    pass\n\n# check the correctness of my_dict\nassert ", "entry_point": "my_dict", "canonical_solution": "  if bool(dict1):\n     return False\n  else:\n     return True\n", "test": "def check(candidate):\n    assert my_dict({10})==False\n    assert my_dict({11})==False\n    assert my_dict({})==True\n"}
{"task_id": "MbppEval/583", "prompt": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n\n# check the correctness of catalan_number\nassert ", "entry_point": "catalan_number", "canonical_solution": "    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num\n", "test": "def check(candidate):\n    assert catalan_number(10)==16796\n    assert catalan_number(9)==4862\n    assert catalan_number(7)==429\n"}
{"task_id": "MbppEval/584", "prompt": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pass\n\n# check the correctness of find_adverbs\nassert ", "entry_point": "find_adverbs", "canonical_solution": "  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\n", "test": "def check(candidate):\n    assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n    assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\n    assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'\n"}
{"task_id": "MbppEval/585", "prompt": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pass\n\n# check the correctness of expensive_items\nassert ", "entry_point": "expensive_items", "canonical_solution": "  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\n", "test": "def check(candidate):\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n"}
{"task_id": "MbppEval/586", "prompt": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    pass\n\n# check the correctness of split_Arr\nassert ", "entry_point": "split_Arr", "canonical_solution": "  return l[n:] + l[:n]\n", "test": "def check(candidate):\n    assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n    assert split_Arr([1,2,3,4],1) == [2,3,4,1]\n    assert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]\n"}
{"task_id": "MbppEval/587", "prompt": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass\n\n# check the correctness of list_tuple\nassert ", "entry_point": "list_tuple", "canonical_solution": "  tuplex = tuple(listx)\n  return tuplex\n", "test": "def check(candidate):\n    assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n    assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert list_tuple([58,44,56])==(58,44,56)\n"}
{"task_id": "MbppEval/588", "prompt": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n\n# check the correctness of big_diff\nassert ", "entry_point": "big_diff", "canonical_solution": "     diff= max(nums)-min(nums)\n     return diff\n", "test": "def check(candidate):\n    assert big_diff([1,2,3,4]) == 3\n    assert big_diff([4,5,12]) == 8\n    assert big_diff([9,2,3]) == 7\n"}
{"task_id": "MbppEval/589", "prompt": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    pass\n\n# check the correctness of perfect_squares\nassert ", "entry_point": "perfect_squares", "canonical_solution": "    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists\n", "test": "def check(candidate):\n    assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n    assert perfect_squares(50,100)==[64, 81, 100]\n    assert perfect_squares(100,200)==[100, 121, 144, 169, 196]\n"}
{"task_id": "MbppEval/590", "prompt": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\n\n# check the correctness of polar_rect\nassert ", "entry_point": "polar_rect", "canonical_solution": " cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)\n", "test": "def check(candidate):\n    assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n    assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n"}
{"task_id": "MbppEval/591", "prompt": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    pass\n\n# check the correctness of swap_List\nassert ", "entry_point": "swap_List", "canonical_solution": "    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList \n", "test": "def check(candidate):\n    assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert swap_List([1, 2, 3]) == [3, 2, 1]\n    assert swap_List([4, 5, 6]) == [6, 5, 4]\n"}
{"task_id": "MbppEval/592", "prompt": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    pass\n\n# check the correctness of binomial_Coeff\nassert ", "entry_point": "binomial_Coeff", "canonical_solution": "    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n,n - 1); \n", "test": "def check(candidate):\n    assert sum_Of_product(3) == 15\n    assert sum_Of_product(4) == 56\n    assert sum_Of_product(1) == 1\n"}
{"task_id": "MbppEval/593", "prompt": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pass\n\n# check the correctness of removezero_ip\nassert ", "entry_point": "removezero_ip", "canonical_solution": " string = re.sub('\\.[0]*', '.', ip)\n return string\n\n", "test": "def check(candidate):\n    assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n    assert removezero_ip(\"12.01.024\")==('12.1.24')\n    assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')\n"}
{"task_id": "MbppEval/594", "prompt": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    pass\n\n# check the correctness of diff_even_odd\nassert ", "entry_point": "diff_even_odd", "canonical_solution": "    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)\n", "test": "def check(candidate):\n    assert diff_even_odd([1,3,5,7,4,1,6,8])==3\n    assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\n    assert diff_even_odd([1,5,7,9,10])==9\n"}
{"task_id": "MbppEval/595", "prompt": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n\n# check the correctness of min_Swaps\nassert ", "entry_point": "min_Swaps", "canonical_solution": "    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") \n", "test": "def check(candidate):\n    assert min_Swaps(\"1101\",\"1110\") == 1\n    assert min_Swaps(\"111\",\"000\") == \"Not Possible\"\n    assert min_Swaps(\"111\",\"110\") == \"Not Possible\"\n"}
{"task_id": "MbppEval/596", "prompt": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n\n# check the correctness of tuple_size\nassert ", "entry_point": "tuple_size", "canonical_solution": "  return (sys.getsizeof(tuple_list)) \n", "test": "def check(candidate):\n    assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n    assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n    assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n"}
{"task_id": "MbppEval/597", "prompt": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n\n# check the correctness of find_kth\nassert ", "entry_point": "find_kth", "canonical_solution": "\tm = len(arr1)\n\tn = len(arr2)\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]\n", "test": "def check(candidate):\n    assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n    assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\n    assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n"}
{"task_id": "MbppEval/598", "prompt": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    pass\n\n# check the correctness of armstrong_number\nassert ", "entry_point": "armstrong_number", "canonical_solution": " sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False\n", "test": "def check(candidate):\n    assert armstrong_number(153)==True\n    assert armstrong_number(259)==False\n    assert armstrong_number(4458)==False\n"}
{"task_id": "MbppEval/599", "prompt": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    pass\n\n# check the correctness of sum_average\nassert ", "entry_point": "sum_average", "canonical_solution": " total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)\n", "test": "def check(candidate):\n    assert sum_average(10)==(55, 5.5)\n    assert sum_average(15)==(120, 8.0)\n    assert sum_average(20)==(210, 10.5)\n"}
{"task_id": "MbppEval/600", "prompt": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    pass\n\n# check the correctness of is_Even\nassert ", "entry_point": "is_Even", "canonical_solution": "    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; \n", "test": "def check(candidate):\n    assert is_Even(1) == False\n    assert is_Even(2) == True\n    assert is_Even(3) == False\n"}
{"task_id": "MbppEval/602", "prompt": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n\n# check the correctness of first_repeated_char\nassert ", "entry_point": "first_repeated_char", "canonical_solution": "  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\n", "test": "def check(candidate):\n    assert first_repeated_char(\"abcabc\") == \"a\"\n    assert first_repeated_char(\"abc\") == None\n    assert first_repeated_char(\"123123\") == \"1\"\n"}
{"task_id": "MbppEval/603", "prompt": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n\n# check the correctness of get_ludic\nassert ", "entry_point": "get_ludic", "canonical_solution": "\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n", "test": "def check(candidate):\n    assert get_ludic(10) == [1, 2, 3, 5, 7]\n    assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n"}
{"task_id": "MbppEval/604", "prompt": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n\n# check the correctness of reverse_words\nassert ", "entry_point": "reverse_words", "canonical_solution": "        return ' '.join(reversed(s.split()))\n", "test": "def check(candidate):\n    assert reverse_words(\"python program\")==(\"program python\")\n    assert reverse_words(\"java language\")==(\"language java\")\n    assert reverse_words(\"indian man\")==(\"man indian\")\n"}
{"task_id": "MbppEval/605", "prompt": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass\n\n# check the correctness of prime_num\nassert ", "entry_point": "prime_num", "canonical_solution": "  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\n", "test": "def check(candidate):\n    assert prime_num(13)==True\n    assert prime_num(7)==True\n    assert prime_num(-1010)==False\n"}
{"task_id": "MbppEval/606", "prompt": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n\n# check the correctness of radian_degree\nassert ", "entry_point": "radian_degree", "canonical_solution": " radian = degree*(math.pi/180)\n return radian\n", "test": "def check(candidate):\n    assert radian_degree(90)==1.5707963267948966\n    assert radian_degree(60)==1.0471975511965976\n    assert radian_degree(120)==2.0943951023931953\n"}
{"task_id": "MbppEval/607", "prompt": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pass\n\n# check the correctness of find_literals\nassert ", "entry_point": "find_literals", "canonical_solution": "  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n", "test": "def check(candidate):\n    assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n"}
{"task_id": "MbppEval/608", "prompt": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n\n# check the correctness of bell_Number\nassert ", "entry_point": "bell_Number", "canonical_solution": "    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n", "test": "def check(candidate):\n    assert bell_Number(2) == 2\n    assert bell_Number(3) == 5\n    assert bell_Number(4) == 15\n"}
{"task_id": "MbppEval/610", "prompt": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n\n# check the correctness of remove_kth_element\nassert ", "entry_point": "remove_kth_element", "canonical_solution": "    return  list1[:L-1] + list1[L:]\n", "test": "def check(candidate):\n    assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n    assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n"}
{"task_id": "MbppEval/611", "prompt": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    pass\n\n# check the correctness of max_of_nth\nassert ", "entry_point": "max_of_nth", "canonical_solution": "  res = max([sub[N] for sub in test_list])\n  return (res) \n", "test": "def check(candidate):\n    assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n    assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\n    assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n"}
{"task_id": "MbppEval/612", "prompt": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n\n# check the correctness of merge\nassert ", "entry_point": "merge", "canonical_solution": "    return [list(ele) for ele in list(zip(*lst))] \n", "test": "def check(candidate):\n    assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\n"}
{"task_id": "MbppEval/614", "prompt": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n\n# check the correctness of cummulative_sum\nassert ", "entry_point": "cummulative_sum", "canonical_solution": "  res = sum(map(sum, test_list))\n  return (res)\n", "test": "def check(candidate):\n    assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n    assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\n    assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44\n"}
{"task_id": "MbppEval/615", "prompt": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n\n# check the correctness of average_tuple\nassert ", "entry_point": "average_tuple", "canonical_solution": "    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n", "test": "def check(candidate):\n    assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n    assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\n    assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n"}
{"task_id": "MbppEval/616", "prompt": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n\n# check the correctness of tuple_modulo\nassert ", "entry_point": "tuple_modulo", "canonical_solution": "  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \n", "test": "def check(candidate):\n    assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n"}
{"task_id": "MbppEval/617", "prompt": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n\n# check the correctness of min_Jumps\nassert ", "entry_point": "min_Jumps", "canonical_solution": "    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\n", "test": "def check(candidate):\n    assert min_Jumps((3,4),11)==3.5\n    assert min_Jumps((3,4),0)==0\n    assert min_Jumps((11,14),11)==1\n"}
{"task_id": "MbppEval/618", "prompt": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n\n# check the correctness of div_list\nassert ", "entry_point": "div_list", "canonical_solution": "  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n", "test": "def check(candidate):\n    assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n    assert div_list([3,2],[1,4])==[3.0, 0.5]\n    assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]\n"}
{"task_id": "MbppEval/619", "prompt": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    pass\n\n# check the correctness of move_num\nassert ", "entry_point": "move_num", "canonical_solution": "  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) \n", "test": "def check(candidate):\n    assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert move_num('Avengers124Assemble') == 'AvengersAssemble124'\n    assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n"}
{"task_id": "MbppEval/620", "prompt": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n\n# check the correctness of largest_subset\nassert ", "entry_point": "largest_subset", "canonical_solution": "\tn = len(a)\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\n", "test": "def check(candidate):\n    assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n    assert largest_subset([10, 5, 3, 15, 20]) == 3\n    assert largest_subset([18, 1, 3, 6, 13, 17]) == 4\n"}
{"task_id": "MbppEval/622", "prompt": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    pass\n\n# check the correctness of get_median\nassert ", "entry_point": "get_median", "canonical_solution": "  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n", "test": "def check(candidate):\n    assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n"}
{"task_id": "MbppEval/623", "prompt": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pass\n\n# check the correctness of nth_nums\nassert ", "entry_point": "nth_nums", "canonical_solution": " nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n", "test": "def check(candidate):\n    assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert nth_nums([10,20,30],3)==([1000, 8000, 27000])\n    assert nth_nums([12,15],5)==([248832, 759375])\n"}
{"task_id": "MbppEval/624", "prompt": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    pass\n\n# check the correctness of is_upper\nassert ", "entry_point": "is_upper", "canonical_solution": "  return (string.upper())\n", "test": "def check(candidate):\n    assert is_upper(\"person\") ==\"PERSON\"\n    assert is_upper(\"final\") == \"FINAL\"\n    assert is_upper(\"Valid\") == \"VALID\"\n"}
{"task_id": "MbppEval/625", "prompt": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    pass\n\n# check the correctness of swap_List\nassert ", "entry_point": "swap_List", "canonical_solution": "    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \n", "test": "def check(candidate):\n    assert swap_List([1,2,3]) == [3,2,1]\n    assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\n    assert swap_List([4,5,6]) == [6,5,4]\n"}
{"task_id": "MbppEval/626", "prompt": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n\n# check the correctness of triangle_area\nassert ", "entry_point": "triangle_area", "canonical_solution": "    if r < 0 : \n        return None\n    return r * r \n", "test": "def check(candidate):\n    assert triangle_area(-1) == None\n    assert triangle_area(0) == 0\n    assert triangle_area(2) == 4\n"}
{"task_id": "MbppEval/627", "prompt": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    pass\n\n# check the correctness of find_First_Missing\nassert ", "entry_point": "find_First_Missing", "canonical_solution": "    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \n", "test": "def check(candidate):\n    assert find_First_Missing([0,1,2,3]) == 4\n    assert find_First_Missing([0,1,2,6,9]) == 3\n    assert find_First_Missing([2,3,5,8,9]) == 0\n"}
{"task_id": "MbppEval/628", "prompt": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    pass\n\n# check the correctness of replace_spaces\nassert ", "entry_point": "replace_spaces", "canonical_solution": "  return string.replace(\" \", \"%20\")\n", "test": "def check(candidate):\n    assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n    assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\n    assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'\n"}
{"task_id": "MbppEval/629", "prompt": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    pass\n\n# check the correctness of Split\nassert ", "entry_point": "Split", "canonical_solution": "    return [num for num in list if num % 2 == 0]\n", "test": "def check(candidate):\n    assert Split([1,2,3,4,5]) == [2,4]\n    assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\n    assert Split ([8,12,15,19]) == [8,12]\n"}
{"task_id": "MbppEval/630", "prompt": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n\n# check the correctness of adjac\nassert ", "entry_point": "adjac", "canonical_solution": "  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\n", "test": "def check(candidate):\n    assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n"}
{"task_id": "MbppEval/631", "prompt": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    pass\n\n# check the correctness of replace_spaces\nassert ", "entry_point": "replace_spaces", "canonical_solution": "  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\n", "test": "def check(candidate):\n    assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    assert replace_spaces('The_Avengers') == 'The Avengers'\n    assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'\n"}
{"task_id": "MbppEval/632", "prompt": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pass\n\n# check the correctness of move_zero\nassert ", "entry_point": "move_zero", "canonical_solution": "    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    return x + a\n", "test": "def check(candidate):\n    assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n    assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\n    assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]\n"}
{"task_id": "MbppEval/633", "prompt": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pass\n\n# check the correctness of pair_xor_Sum\nassert ", "entry_point": "pair_xor_Sum", "canonical_solution": "    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \n", "test": "def check(candidate):\n    assert pair_xor_Sum([5,9,7,6],4) == 47\n    assert pair_xor_Sum([7,3,5],3) == 12\n    assert pair_xor_Sum([7,3],2) == 4\n"}
{"task_id": "MbppEval/635", "prompt": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    pass\n\n# check the correctness of heap_sort\nassert ", "entry_point": "heap_sort", "canonical_solution": "    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n", "test": "def check(candidate):\n    assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]\n"}
{"task_id": "MbppEval/637", "prompt": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    pass\n\n# check the correctness of noprofit_noloss\nassert ", "entry_point": "noprofit_noloss", "canonical_solution": "  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\n", "test": "def check(candidate):\n    assert noprofit_noloss(1500,1200)==False\n    assert noprofit_noloss(100,100)==True\n    assert noprofit_noloss(2000,5000)==False\n"}
{"task_id": "MbppEval/638", "prompt": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    pass\n\n# check the correctness of wind_chill\nassert ", "entry_point": "wind_chill", "canonical_solution": " windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\n", "test": "def check(candidate):\n    assert wind_chill(120,35)==40\n    assert wind_chill(40,20)==19\n    assert wind_chill(10,8)==6\n"}
{"task_id": "MbppEval/639", "prompt": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n\n# check the correctness of sample_nam\nassert ", "entry_point": "sample_nam", "canonical_solution": "  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n", "test": "def check(candidate):\n    assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n    assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\n    assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n"}
{"task_id": "MbppEval/640", "prompt": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pass\n\n# check the correctness of remove_parenthesis\nassert ", "entry_point": "remove_parenthesis", "canonical_solution": " for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\n", "test": "def check(candidate):\n    assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n    assert remove_parenthesis([\"string(.abc)\"])==(\"string\")\n    assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")\n"}
{"task_id": "MbppEval/641", "prompt": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    pass\n\n# check the correctness of is_nonagonal\nassert ", "entry_point": "is_nonagonal", "canonical_solution": "\treturn int(n * (7 * n - 5) / 2) \n", "test": "def check(candidate):\n    assert is_nonagonal(10) == 325\n    assert is_nonagonal(15) == 750\n    assert is_nonagonal(18) == 1089\n"}
{"task_id": "MbppEval/643", "prompt": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n\n# check the correctness of text_match_wordz_middle\nassert ", "entry_point": "text_match_wordz_middle", "canonical_solution": "        return bool(re.search(r'\\Bz\\B',  text))\n", "test": "def check(candidate):\n    assert text_match_wordz_middle(\"pythonzabc.\")==True\n    assert text_match_wordz_middle(\"zxyabc.\")==False\n    assert text_match_wordz_middle(\"  lang  .\")==False\n"}
{"task_id": "MbppEval/644", "prompt": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\n\n# check the correctness of reverse_Array_Upto_K\nassert ", "entry_point": "reverse_Array_Upto_K", "canonical_solution": "  return (input[k-1::-1] + input[k:]) \n", "test": "def check(candidate):\n    assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n    assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n"}
{"task_id": "MbppEval/720", "prompt": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n\n# check the correctness of add_dict_to_tuple\nassert ", "entry_point": "add_dict_to_tuple", "canonical_solution": "  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) \n", "test": "def check(candidate):\n    assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n    assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n"}
{"task_id": "MbppEval/721", "prompt": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    pass\n\n# check the correctness of maxAverageOfPath\nassert ", "entry_point": "maxAverageOfPath", "canonical_solution": "  N = len(cost)\n  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j],\n                     dp[i][j - 1]) + cost[i][j]\n  return dp[N - 1][N - 1] / (2 * N - 1)\n", "test": "def check(candidate):\n    assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n    assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n    assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n    assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n"}
{"task_id": "MbppEval/722", "prompt": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n\n# check the correctness of filter_data\nassert ", "entry_point": "filter_data", "canonical_solution": "    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    \n", "test": "def check(candidate):\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n"}
{"task_id": "MbppEval/723", "prompt": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n\n# check the correctness of count_same_pair\nassert ", "entry_point": "count_same_pair", "canonical_solution": "    result = sum(map(eq, nums1, nums2))\n    return result\n", "test": "def check(candidate):\n    assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n    assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n    assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\n    assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3\n"}
{"task_id": "MbppEval/724", "prompt": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    pass\n\n# check the correctness of power_base_sum\nassert ", "entry_point": "power_base_sum", "canonical_solution": "    return sum([int(i) for i in str(pow(base, power))])\n", "test": "def check(candidate):\n    assert power_base_sum(2,100)==115\n    assert power_base_sum(8,10)==37\n    assert power_base_sum(8,15)==62\n    assert power_base_sum(3,3)==9\n"}
{"task_id": "MbppEval/725", "prompt": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pass\n\n# check the correctness of extract_quotation\nassert ", "entry_point": "extract_quotation", "canonical_solution": "  return (re.findall(r'\"(.*?)\"', text1))\n", "test": "def check(candidate):\n    assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\n    assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n"}
{"task_id": "MbppEval/726", "prompt": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n\n# check the correctness of multiply_elements\nassert ", "entry_point": "multiply_elements", "canonical_solution": "  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) \n", "test": "def check(candidate):\n    assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n    assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\n    assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\n    assert multiply_elements((12,)) == ()\n"}
{"task_id": "MbppEval/728", "prompt": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    pass\n\n# check the correctness of sum_list\nassert ", "entry_point": "sum_list", "canonical_solution": "  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list\n", "test": "def check(candidate):\n    assert sum_list([10,20,30],[15,25,35])==[25,45,65]\n    assert sum_list([1,2,3],[5,6,7])==[6,8,10]\n    assert sum_list([15,20,30],[15,45,75])==[30,65,105]\n"}
{"task_id": "MbppEval/730", "prompt": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    pass\n\n# check the correctness of consecutive_duplicates\nassert ", "entry_point": "consecutive_duplicates", "canonical_solution": "    return [key for key, group in groupby(nums)] \n", "test": "def check(candidate):\n    assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n    assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']\n"}
{"task_id": "MbppEval/731", "prompt": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pass\n\n# check the correctness of lateralsurface_cone\nassert ", "entry_point": "lateralsurface_cone", "canonical_solution": "  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\n", "test": "def check(candidate):\n    assert lateralsurface_cone(5,12)==204.20352248333654\n    assert lateralsurface_cone(10,15)==566.3586699569488\n    assert lateralsurface_cone(19,17)==1521.8090132193388\n"}
{"task_id": "MbppEval/732", "prompt": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pass\n\n# check the correctness of replace_specialchar\nassert ", "entry_point": "replace_specialchar", "canonical_solution": " return (re.sub(\"[ ,.]\", \":\", text))\n\n", "test": "def check(candidate):\n    assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n    assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\n    assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n"}
{"task_id": "MbppEval/733", "prompt": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pass\n\n# check the correctness of find_first_occurrence\nassert ", "entry_point": "find_first_occurrence", "canonical_solution": "    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n", "test": "def check(candidate):\n    assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n"}
{"task_id": "MbppEval/734", "prompt": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n\n# check the correctness of sum_Of_Subarray_Prod\nassert ", "entry_point": "sum_Of_Subarray_Prod", "canonical_solution": "    ans = 0\n    res = 0\n    i = len(arr) - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\n", "test": "def check(candidate):\n    assert sum_Of_Subarray_Prod([1,2,3]) == 20\n    assert sum_Of_Subarray_Prod([1,2]) == 5\n    assert sum_Of_Subarray_Prod([1,2,3,4]) == 84\n"}
{"task_id": "MbppEval/735", "prompt": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    pass\n\n# check the correctness of set_middle_bits\nassert ", "entry_point": "set_middle_bits", "canonical_solution": "    n |= n >> 1; \n    n |= n >> 2; \n    n |= n >> 4; \n    n |= n >> 8; \n    n |= n >> 16;  \n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n): \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) \n", "test": "def check(candidate):\n    assert toggle_middle_bits(9) == 15\n    assert toggle_middle_bits(10) == 12\n    assert toggle_middle_bits(11) == 13\n    assert toggle_middle_bits(0b1000001) == 0b1111111\n    assert toggle_middle_bits(0b1001101) == 0b1110011\n"}
{"task_id": "MbppEval/736", "prompt": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n\n# check the correctness of left_insertion\nassert ", "entry_point": "left_insertion", "canonical_solution": "    i = bisect.bisect_left(a, x)\n    return i\n", "test": "def check(candidate):\n    assert left_insertion([1,2,4,5],6)==4\n    assert left_insertion([1,2,4,5],3)==2\n    assert left_insertion([1,2,4,5],7)==4\n"}
{"task_id": "MbppEval/737", "prompt": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pass\n\n# check the correctness of check_str\nassert ", "entry_point": "check_str", "canonical_solution": "\treturn re.search(regex, string)\n", "test": "def check(candidate):\n    assert check_str(\"annie\")\n    assert not check_str(\"dawood\")\n    assert check_str(\"Else\")\n"}
{"task_id": "MbppEval/738", "prompt": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    pass\n\n# check the correctness of geometric_sum\nassert ", "entry_point": "geometric_sum", "canonical_solution": "  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\n", "test": "def check(candidate):\n    assert geometric_sum(7) == 1.9921875\n    assert geometric_sum(4) == 1.9375\n    assert geometric_sum(8) == 1.99609375\n"}
{"task_id": "MbppEval/739", "prompt": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n\n# check the correctness of find_Index\nassert ", "entry_point": "find_Index", "canonical_solution": "    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n", "test": "def check(candidate):\n    assert find_Index(2) == 4\n    assert find_Index(3) == 14\n    assert find_Index(4) == 45\n"}
{"task_id": "MbppEval/740", "prompt": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n\n# check the correctness of tuple_to_dict\nassert ", "entry_point": "tuple_to_dict", "canonical_solution": "  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) \n", "test": "def check(candidate):\n    assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\n    assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n"}
{"task_id": "MbppEval/741", "prompt": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass\n\n# check the correctness of all_Characters_Same\nassert ", "entry_point": "all_Characters_Same", "canonical_solution": "    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\n", "test": "def check(candidate):\n    assert all_Characters_Same(\"python\") == False\n    assert all_Characters_Same(\"aaa\") == True\n    assert all_Characters_Same(\"data\") == False\n"}
{"task_id": "MbppEval/742", "prompt": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    pass\n\n# check the correctness of area_tetrahedron\nassert ", "entry_point": "area_tetrahedron", "canonical_solution": "  area = math.sqrt(3)*(side*side)\n  return area\n", "test": "def check(candidate):\n    assert area_tetrahedron(3)==15.588457268119894\n    assert area_tetrahedron(20)==692.8203230275509\n    assert area_tetrahedron(10)==173.20508075688772\n"}
{"task_id": "MbppEval/743", "prompt": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    pass\n\n# check the correctness of rotate_right\nassert ", "entry_point": "rotate_right", "canonical_solution": "  result =  list[-m:] + list[:-m]\n  return result\n", "test": "def check(candidate):\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n"}
{"task_id": "MbppEval/744", "prompt": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    pass\n\n# check the correctness of check_none\nassert ", "entry_point": "check_none", "canonical_solution": "  res = any(map(lambda ele: ele is None, test_tup))\n  return res \n", "test": "def check(candidate):\n    assert check_none((10, 4, 5, 6, None)) == True\n    assert check_none((7, 8, 9, 11, 14)) == False\n    assert check_none((1, 2, 3, 4, None)) == True\n"}
{"task_id": "MbppEval/745", "prompt": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n\n# check the correctness of divisible_by_digits\nassert ", "entry_point": "divisible_by_digits", "canonical_solution": "    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n", "test": "def check(candidate):\n    assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert divisible_by_digits(20,25)==[22, 24]\n"}
{"task_id": "MbppEval/746", "prompt": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n\n# check the correctness of sector_area\nassert ", "entry_point": "sector_area", "canonical_solution": "    if a > 360:\n        return None\n    return (math.pi*r**2) * (a/360)\n", "test": "def check(candidate):\n    assert sector_area(4,45)==6.283185307179586\n    assert sector_area(9,45)==31.808625617596654\n    assert sector_area(9,361)==None\n"}
{"task_id": "MbppEval/747", "prompt": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    pass\n\n# check the correctness of lcs_of_three\nassert ", "entry_point": "lcs_of_three", "canonical_solution": "  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\n", "test": "def check(candidate):\n    assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\n    assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5\n    assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3\n"}
{"task_id": "MbppEval/748", "prompt": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pass\n\n# check the correctness of capital_words_spaces\nassert ", "entry_point": "capital_words_spaces", "canonical_solution": "  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n", "test": "def check(candidate):\n    assert capital_words_spaces(\"Python\") == 'Python'\n    assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\n    assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n"}
{"task_id": "MbppEval/749", "prompt": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n\n# check the correctness of sort_numeric_strings\nassert ", "entry_point": "sort_numeric_strings", "canonical_solution": "    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n", "test": "def check(candidate):\n    assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n"}
{"task_id": "MbppEval/750", "prompt": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n\n# check the correctness of add_tuple\nassert ", "entry_point": "add_tuple", "canonical_solution": "  test_list += test_tup\n  return test_list\n", "test": "def check(candidate):\n    assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n"}
{"task_id": "MbppEval/751", "prompt": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass\n\n# check the correctness of check_min_heap_helper\nassert ", "entry_point": "check_min_heap_helper", "canonical_solution": "    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\n\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\n", "test": "def check(candidate):\n    assert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n    assert check_min_heap([2, 3, 4, 5, 10, 15]) == True\n    assert check_min_heap([2, 10, 4, 5, 3, 15]) == False\n"}
{"task_id": "MbppEval/752", "prompt": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    pass\n\n# check the correctness of jacobsthal_num\nassert ", "entry_point": "jacobsthal_num", "canonical_solution": "\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\n", "test": "def check(candidate):\n    assert jacobsthal_num(5) == 11\n    assert jacobsthal_num(2) == 1\n    assert jacobsthal_num(4) == 5\n    assert jacobsthal_num(13) == 2731\n"}
{"task_id": "MbppEval/753", "prompt": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    pass\n\n# check the correctness of min_k\nassert ", "entry_point": "min_k", "canonical_solution": "  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \n", "test": "def check(candidate):\n    assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n"}
{"task_id": "MbppEval/754", "prompt": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass\n\n# check the correctness of extract_index_list\nassert ", "entry_point": "extract_index_list", "canonical_solution": "    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\n", "test": "def check(candidate):\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\n    assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\n    assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]\n"}
{"task_id": "MbppEval/755", "prompt": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n\n# check the correctness of second_smallest\nassert ", "entry_point": "second_smallest", "canonical_solution": "  unique_numbers = list(set(numbers))\n  unique_numbers.sort()\n  if len(unique_numbers) < 2:\n    return None\n  else:\n    return unique_numbers[1]\n", "test": "def check(candidate):\n    assert second_smallest([1, 2, -8, -2, 0, -2])==-2\n    assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n    assert second_smallest([2,2])==None\n    assert second_smallest([2,2,2])==None\n"}
{"task_id": "MbppEval/756", "prompt": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\n\n# check the correctness of text_match_zero_one\nassert ", "entry_point": "text_match_zero_one", "canonical_solution": "        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n", "test": "def check(candidate):\n    assert text_match_zero_one(\"ac\")==False\n    assert text_match_zero_one(\"dc\")==False\n    assert text_match_zero_one(\"abbbba\")==True\n    assert text_match_zero_one(\"dsabbbba\")==True\n    assert text_match_zero_one(\"asbbbba\")==False\n    assert text_match_zero_one(\"abaaa\")==True\n"}
{"task_id": "MbppEval/757", "prompt": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n\n# check the correctness of count_reverse_pairs\nassert ", "entry_point": "count_reverse_pairs", "canonical_solution": "  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return res\n", "test": "def check(candidate):\n    assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n    assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\n    assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2\n"}
{"task_id": "MbppEval/758", "prompt": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n\n# check the correctness of unique_sublists\nassert ", "entry_point": "unique_sublists", "canonical_solution": "    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\n", "test": "def check(candidate):\n    assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n    assert unique_sublists([['john']])=={('john',): 1}\n"}
{"task_id": "MbppEval/759", "prompt": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n\n# check the correctness of is_decimal\nassert ", "entry_point": "is_decimal", "canonical_solution": "    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n", "test": "def check(candidate):\n    assert is_decimal('123.11')==True\n    assert is_decimal('e666.86')==False\n    assert is_decimal('3.124587')==False\n    assert is_decimal('1.11')==True\n    assert is_decimal('1.1.11')==False\n"}
{"task_id": "MbppEval/760", "prompt": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    pass\n\n# check the correctness of unique_Element\nassert ", "entry_point": "unique_Element", "canonical_solution": "    s = set(arr)\n    return len(s) == 1\n", "test": "def check(candidate):\n    assert unique_Element([1,1,1]) == True\n    assert unique_Element([1,2,1,2]) == False\n    assert unique_Element([1,2,3,4,5]) == False\n"}
{"task_id": "MbppEval/762", "prompt": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    pass\n\n# check the correctness of check_monthnumber_number\nassert ", "entry_point": "check_monthnumber_number", "canonical_solution": "  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n", "test": "def check(candidate):\n    assert check_monthnumber_number(6)==True\n    assert check_monthnumber_number(2)==False\n    assert check_monthnumber_number(12)==False\n"}
{"task_id": "MbppEval/763", "prompt": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    pass\n\n# check the correctness of find_min_diff\nassert ", "entry_point": "find_min_diff", "canonical_solution": "    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \n", "test": "def check(candidate):\n    assert find_min_diff((1,5,3,19,18,25),6) == 1\n    assert find_min_diff((4,3,2,6),4) == 1\n    assert find_min_diff((30,5,20,9),4) == 4\n"}
{"task_id": "MbppEval/764", "prompt": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    pass\n\n# check the correctness of number_ctr\nassert ", "entry_point": "number_ctr", "canonical_solution": "      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr\n", "test": "def check(candidate):\n    assert number_ctr('program2bedone') == 1\n    assert number_ctr('3wonders') == 1\n    assert number_ctr('123') == 3\n    assert number_ctr('3wond-1ers2') == 3\n"}
{"task_id": "MbppEval/765", "prompt": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    pass\n\n# check the correctness of is_polite\nassert ", "entry_point": "is_polite", "canonical_solution": "\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \n", "test": "def check(candidate):\n    assert is_polite(7) == 11\n    assert is_polite(4) == 7\n    assert is_polite(9) == 13\n"}
{"task_id": "MbppEval/766", "prompt": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n\n# check the correctness of pair_wise\nassert ", "entry_point": "pair_wise", "canonical_solution": "    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\n", "test": "def check(candidate):\n    assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\n    assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n"}
{"task_id": "MbppEval/767", "prompt": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pass\n\n# check the correctness of get_pairs_count\nassert ", "entry_point": "get_pairs_count", "canonical_solution": "    count = 0  \n    for i in range(len(arr)):\n        for j in range(i + 1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n", "test": "def check(candidate):\n    assert get_pairs_count([1,1,1,1],2) == 6\n    assert get_pairs_count([1,5,7,-1,5],6) == 3\n    assert get_pairs_count([1,-2,3],1) == 1\n    assert get_pairs_count([-1,-2,3],-3) == 1\n"}
{"task_id": "MbppEval/769", "prompt": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    pass\n\n# check the correctness of Diff\nassert ", "entry_point": "Diff", "canonical_solution": "    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \n", "test": "def check(candidate):\n    assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n    assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\n    assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]\n"}
{"task_id": "MbppEval/770", "prompt": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    pass\n\n# check the correctness of odd_num_sum\nassert ", "entry_point": "odd_num_sum", "canonical_solution": "    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n", "test": "def check(candidate):\n    assert odd_num_sum(2) == 82\n    assert odd_num_sum(3) == 707\n    assert odd_num_sum(4) == 3108\n"}
{"task_id": "MbppEval/771", "prompt": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    pass\n\n# check the correctness of check_expression\nassert ", "entry_point": "check_expression", "canonical_solution": "    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n", "test": "def check(candidate):\n    assert check_expression(\"{()}[{}]\") == True\n    assert check_expression(\"{()}[{]\") == False\n    assert check_expression(\"{()}[{}][]({})\") == True\n"}
{"task_id": "MbppEval/772", "prompt": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n\n# check the correctness of remove_length\nassert ", "entry_point": "remove_length", "canonical_solution": "  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) \n", "test": "def check(candidate):\n    assert remove_length('The person is most value tet', 3) == 'person is most value'\n    assert remove_length('If you told me about this ok', 4) == 'If you me about ok'\n    assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n"}
{"task_id": "MbppEval/773", "prompt": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pass\n\n# check the correctness of occurance_substring\nassert ", "entry_point": "occurance_substring", "canonical_solution": " for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n", "test": "def check(candidate):\n    assert occurance_substring('python programming, python language','python')==('python', 0, 6)\n    assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\n    assert occurance_substring('python programming,programming language','language')==('language', 31, 39)\n    assert occurance_substring('c++ programming, c++ language','python')==None\n"}
{"task_id": "MbppEval/775", "prompt": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n\n# check the correctness of odd_position\nassert ", "entry_point": "odd_position", "canonical_solution": "\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n", "test": "def check(candidate):\n    assert odd_position([2,1,4,3,6,7,6,3]) == True\n    assert odd_position([4,1,2]) == True\n    assert odd_position([1,2,3]) == False\n"}
{"task_id": "MbppEval/776", "prompt": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    pass\n\n# check the correctness of count_vowels\nassert ", "entry_point": "count_vowels", "canonical_solution": "  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) \n", "test": "def check(candidate):\n    assert count_vowels('bestinstareels') == 7\n    assert count_vowels('partofthejourneyistheend') == 12\n    assert count_vowels('amazonprime') == 5\n"}
{"task_id": "MbppEval/777", "prompt": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n\n# check the correctness of find_sum\nassert ", "entry_point": "find_sum", "canonical_solution": "    arr.sort() \n    sum = arr[0] \n    for i in range(len(arr)-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum\n", "test": "def check(candidate):\n    assert find_sum([1,2,3,1,1,4,5,6]) == 21\n    assert find_sum([1,10,9,4,2,10,10,45,4]) == 71\n    assert find_sum([12,10,9,45,2,10,10,45,10]) == 78\n"}
{"task_id": "MbppEval/778", "prompt": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pass\n\n# check the correctness of pack_consecutive_duplicates\nassert ", "entry_point": "pack_consecutive_duplicates", "canonical_solution": "    return [list(group) for key, group in groupby(list1)]\n", "test": "def check(candidate):\n    assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n"}
{"task_id": "MbppEval/779", "prompt": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n\n# check the correctness of unique_sublists\nassert ", "entry_point": "unique_sublists", "canonical_solution": "    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\n", "test": "def check(candidate):\n    assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n"}
{"task_id": "MbppEval/780", "prompt": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n\n# check the correctness of find_combinations\nassert ", "entry_point": "find_combinations", "canonical_solution": "  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) \n", "test": "def check(candidate):\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n"}
{"task_id": "MbppEval/781", "prompt": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n\n# check the correctness of count_divisors\nassert ", "entry_point": "count_divisors", "canonical_solution": "    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0\n", "test": "def check(candidate):\n    assert count_divisors(10)\n    assert not count_divisors(100)\n    assert count_divisors(125)\n"}
{"task_id": "MbppEval/782", "prompt": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n\n# check the correctness of odd_length_sum\nassert ", "entry_point": "odd_length_sum", "canonical_solution": "    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\n", "test": "def check(candidate):\n    assert odd_length_sum([1,2,4]) == 14\n    assert odd_length_sum([1,2,1,2]) == 15\n    assert odd_length_sum([1,7]) == 8\n"}
{"task_id": "MbppEval/783", "prompt": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n\n# check the correctness of rgb_to_hsv\nassert ", "entry_point": "rgb_to_hsv", "canonical_solution": "    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n", "test": "def check(candidate):\n    assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n    assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\n    assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)\n"}
{"task_id": "MbppEval/784", "prompt": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    pass\n\n# check the correctness of mul_even_odd\nassert ", "entry_point": "mul_even_odd", "canonical_solution": "    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n", "test": "def check(candidate):\n    assert mul_even_odd([1,3,5,7,4,1,6,8])==4\n    assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\n    assert mul_even_odd([1,5,7,9,10])==10\n"}
{"task_id": "MbppEval/785", "prompt": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    pass\n\n# check the correctness of tuple_str_int\nassert ", "entry_point": "tuple_str_int", "canonical_solution": "  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) \n", "test": "def check(candidate):\n    assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n    assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\n    assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\n    assert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)\n"}
{"task_id": "MbppEval/786", "prompt": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pass\n\n# check the correctness of right_insertion\nassert ", "entry_point": "right_insertion", "canonical_solution": "    return bisect.bisect_right(a, x)\n", "test": "def check(candidate):\n    assert right_insertion([1,2,4,5],6)==4\n    assert right_insertion([1,2,4,5],3)==2\n    assert right_insertion([1,2,4,5],7)==4\n"}
{"task_id": "MbppEval/787", "prompt": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pass\n\n# check the correctness of text_match_three\nassert ", "entry_point": "text_match_three", "canonical_solution": "        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\n", "test": "def check(candidate):\n    assert not text_match_three(\"ac\")\n    assert not text_match_three(\"dc\")\n    assert text_match_three(\"abbbba\")\n    assert text_match_three(\"caacabbbba\")\n"}
{"task_id": "MbppEval/788", "prompt": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n\n# check the correctness of new_tuple\nassert ", "entry_point": "new_tuple", "canonical_solution": "  return tuple(test_list + [test_str])\n", "test": "def check(candidate):\n    assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n    assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\n    assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n"}
{"task_id": "MbppEval/790", "prompt": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n\n# check the correctness of even_position\nassert ", "entry_point": "even_position", "canonical_solution": "\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n", "test": "def check(candidate):\n    assert even_position([3,2,1]) == False\n    assert even_position([1,2,3]) == False\n    assert even_position([2,1,4]) == True\n"}
{"task_id": "MbppEval/791", "prompt": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n\n# check the correctness of remove_nested\nassert ", "entry_point": "remove_nested", "canonical_solution": "  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) \n", "test": "def check(candidate):\n    assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n    assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)\n"}
{"task_id": "MbppEval/792", "prompt": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    pass\n\n# check the correctness of count_list\nassert ", "entry_point": "count_list", "canonical_solution": "    return len(input_list)\n", "test": "def check(candidate):\n    assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert count_list([[1,2],[2,3],[4,5]]) == 3\n    assert count_list([[1,0],[2,0]]) == 2\n"}
{"task_id": "MbppEval/793", "prompt": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n\n# check the correctness of last\nassert ", "entry_point": "last", "canonical_solution": "    n = len(arr)\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\n", "test": "def check(candidate):\n    assert last([1,2,3],1) == 0\n    assert last([1,1,1,2,3,4],1) == 2\n    assert last([2,3,2,3,6,8,9],3) == 3\n"}
{"task_id": "MbppEval/794", "prompt": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n\n# check the correctness of text_starta_endb\nassert ", "entry_point": "text_starta_endb", "canonical_solution": "        patterns = 'a.*?b$'\n        return re.search(patterns,  text)\n", "test": "def check(candidate):\n    assert text_starta_endb(\"aabbbb\")\n    assert not text_starta_endb(\"aabAbbbc\")\n    assert not text_starta_endb(\"accddbbjjj\")\n"}
{"task_id": "MbppEval/796", "prompt": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n\n# check the correctness of return_sum\nassert ", "entry_point": "return_sum", "canonical_solution": "  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\n", "test": "def check(candidate):\n    assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n    assert return_sum({'a': 25, 'b':18, 'c':45}) == 88\n    assert return_sum({'a': 36, 'b':39, 'c':49}) == 124\n"}
{"task_id": "MbppEval/797", "prompt": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n\n# check the correctness of sum_odd\nassert ", "entry_point": "sum_odd", "canonical_solution": "    terms = (n + 1)//2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\n", "test": "def check(candidate):\n    assert sum_in_range(2,5) == 8\n    assert sum_in_range(5,7) == 12\n    assert sum_in_range(7,13) == 40\n"}
{"task_id": "MbppEval/798", "prompt": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    pass\n\n# check the correctness of _sum\nassert ", "entry_point": "_sum", "canonical_solution": "    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  \n", "test": "def check(candidate):\n    assert _sum([1, 2, 3]) == 6\n    assert _sum([15, 12, 13, 10]) == 50\n    assert _sum([0, 1, 2]) == 3\n"}
{"task_id": "MbppEval/799", "prompt": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n\n# check the correctness of left_rotate\nassert ", "entry_point": "left_rotate", "canonical_solution": "    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \n", "test": "def check(candidate):\n    assert left_rotate(16,2) == 64\n    assert left_rotate(10,2) == 40\n    assert left_rotate(99,3) == 792\n    assert left_rotate(99,3) == 792\n    assert left_rotate(0b0001,3) == 0b1000\n    assert left_rotate(0b0101,3) == 0b101000\n    assert left_rotate(0b11101,3) == 0b11101000\n"}
{"task_id": "MbppEval/800", "prompt": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pass\n\n# check the correctness of remove_all_spaces\nassert ", "entry_point": "remove_all_spaces", "canonical_solution": " return (re.sub(r'\\s+', '',text))\n", "test": "def check(candidate):\n    assert remove_all_spaces('python  program')==('pythonprogram')\n    assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\n    assert remove_all_spaces('python                     program')==('pythonprogram')\n    assert remove_all_spaces('   python                     program')=='pythonprogram'\n"}
{"task_id": "MbppEval/801", "prompt": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    pass\n\n# check the correctness of test_three_equal\nassert ", "entry_point": "test_three_equal", "canonical_solution": "  result = set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return 4-len(result)\n", "test": "def check(candidate):\n    assert test_three_equal(1,1,1) == 3\n    assert test_three_equal(-1,-2,-3) == 0\n    assert test_three_equal(1,2,2) == 2\n"}
{"task_id": "MbppEval/802", "prompt": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n\n# check the correctness of count_rotation\nassert ", "entry_point": "count_rotation", "canonical_solution": "    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\n", "test": "def check(candidate):\n    assert count_rotation([3,2,1]) == 1\n    assert count_rotation([4,5,1,2,3]) == 2\n    assert count_rotation([7,8,9,1,2,3]) == 3\n    assert count_rotation([1,2,3]) == 0\n    assert count_rotation([1,3,2]) == 2\n"}
{"task_id": "MbppEval/803", "prompt": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    pass\n\n# check the correctness of is_perfect_square\nassert ", "entry_point": "is_perfect_square", "canonical_solution": "    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False\n", "test": "def check(candidate):\n    assert not is_perfect_square(10)\n    assert is_perfect_square(36)\n    assert not is_perfect_square(14)\n    assert is_perfect_square(14*14)\n    assert not is_perfect_square(125)\n    assert is_perfect_square(125*125)\n"}
{"task_id": "MbppEval/804", "prompt": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    pass\n\n# check the correctness of is_product_even\nassert ", "entry_point": "is_product_even", "canonical_solution": "    for i in range(len(arr)): \n        if (arr[i] & 1) == 0: \n            return True\n    return False\n", "test": "def check(candidate):\n    assert is_product_even([1,2,3])\n    assert is_product_even([1,2,1,4])\n    assert not is_product_even([1,1])\n"}
{"task_id": "MbppEval/805", "prompt": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n\n# check the correctness of max_sum_list\nassert ", "entry_point": "max_sum_list", "canonical_solution": " return max(lists, key=sum)\n", "test": "def check(candidate):\n    assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n    assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\n    assert max_sum_list([[2,3,1]])==[2,3,1]\n"}
{"task_id": "MbppEval/806", "prompt": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n\n# check the correctness of max_run_uppercase\nassert ", "entry_point": "max_run_uppercase", "canonical_solution": "  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\n", "test": "def check(candidate):\n    assert max_run_uppercase('GeMKSForGERksISBESt') == 5\n    assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\n    assert max_run_uppercase('GooGLEFluTTER') == 4\n"}
{"task_id": "MbppEval/807", "prompt": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    pass\n\n# check the correctness of first_odd\nassert ", "entry_point": "first_odd", "canonical_solution": "  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\n", "test": "def check(candidate):\n    assert first_odd([1,3,5]) == 1\n    assert first_odd([2,4,1,3]) == 1\n    assert first_odd ([8,9,1]) == 9\n"}
{"task_id": "MbppEval/808", "prompt": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    pass\n\n# check the correctness of check_K\nassert ", "entry_point": "check_K", "canonical_solution": "  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return res \n", "test": "def check(candidate):\n    assert check_K((10, 4, 5, 6, 8), 6) == True\n    assert check_K((1, 2, 3, 4, 5, 6), 7) == False\n    assert check_K((7, 8, 9, 44, 11, 12), 11) == True\n"}
{"task_id": "MbppEval/809", "prompt": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass\n\n# check the correctness of check_smaller\nassert ", "entry_point": "check_smaller", "canonical_solution": "  return all(x > y for x, y in zip(test_tup1, test_tup2))\n", "test": "def check(candidate):\n    assert check_smaller((1, 2, 3), (2, 3, 4)) == False\n    assert check_smaller((4, 5, 6), (3, 4, 5)) == True\n    assert check_smaller((11, 12, 13), (10, 11, 12)) == True\n"}
